Dim reg As CashRegister ... TextBox1.Text = reg.Amount
Dim reg As New CashRegister Dim reg As CashRegister = New CashRegister
Private reg As CashRegister ... reg = New CashRegister()
Private reg As CashRegister Public Sub New() Dim reg As New CashRegister End Sub
Private arr as String() = New String(10){} Private arr() As String = New String(10){} Dim arr = New String(10) {}
Dim myDbl As Double() = {1.5, 2, 9.9, 18, 3.14} Dim myDbl = New Double() {1.5, 2, 9.9, 18, 3.14} Dim myDbl() = {1.5, 2, 9.9, 18, 3.14}
Private myDoubles As Double() = {1.5, 2, 9.9, 18, 3.14}
Dim arrFoo(5) As Foo For i As Integer = 0 To arrFoo.Count - 1 arrFoo(i).Bar = i * 10 Next
For i As Integer = 0 To arrFoo.Count - 1 arrFoo(i) = New Foo() arrFoo(i).Bar = i * 10 Next
Dim FooList As New List(Of Foo) Dim f As Foo For i As Integer = 0 To 5 f = New Foo() f.Bar = i * 10 FooList.Add(f) Next
Private myList As List(Of String) .. myList.Add("ziggy")
myList = New List(Of String) Private myList As New List(Of String)
Public Class Foo Private barList As List(Of Bar) Friend Function BarCount As Integer Return barList.Count End Function Friend Sub AddItem(newBar As Bar) If barList.Contains(newBar) = False Then barList.Add(newBar) End If End Function
Public Sub New() Dim barList As New List(Of Bar) End Sub
Dim da As OleDbDataAdapter Dim ds As DataSet Dim MaxRows As Integer con.Open() Dim sql = "SELECT * FROM tblfoobar_List" da = New OleDbDataAdapter(sql, con) da.Fill(ds, "foobar") con.Close() MaxRows = ds.Tables("foobar").Rows.Count
ds = New DataSet da = New OleDBDataAdapter(sql, con) da.Fill(ds, "Employees") txtID.Text = ds.Tables("Employee").Rows(0).Item(1) txtID.Name = ds.Tables("Employee").Rows(0).Item(2)
If ds.Tables(0).Rows.Count > 0 Then txtID.Text = ds.Tables(0).Rows(0).Item(1) txtID.Name = ds.Tables(0).Rows(0).Item(2) End If
Dim da As New OleDb.OleDbDataAdapter("SELECT TICKET.TICKET_NO, TICKET.CUSTOMER_ID, ... FROM TICKET_RESERVATION AS TICKET INNER JOIN FLIGHT_DETAILS AS FLIGHT ... WHERE [TICKET.TICKET_NO]= ...", con) Dim ds As New DataSet da.Fill(ds) If ds.Tables("TICKET_RESERVATION").Rows.Count > 0 Then
If (myFoo IsNot Nothing) AndAlso (myFoo.Bar IsNot Nothing) AndAlso (myFoo.Bar.Items IsNot Nothing) Then ....
myBase.myNodes(3).Layer.SubLayer.Foo.Files.Add("somefilename")
myWebBrowser.Document.GetElementById("formfld1").InnerText = "some value"
Dim cmd5 As New SqlCommand("select Cartons, Pieces, Foobar " _ & "FROM Invoice where invoice_no = Me.ComboBox5.SelectedItem.ToString.Trim & " Me.ListBox1.SelectedItem.ToString.Trim & " Me.ComboBox2.SelectedValue.ToString.Trim & " Me.expiry.Text & "
Dim expiry As DateTime If (ComboBox5.SelectedItems.Count > 0) AndAlso (ListBox1.SelectedItems.Count > 0) AndAlso (ComboBox2.SelectedItems.Count > 0) AndAlso (DateTime.TryParse(expiry.Text, expiry) Then Else MessageBox.Show(...error message...) End If
Public Class Form1 Private NameBoxes = New TextBox(5) {Controls("TextBox1"), _ Controls("TextBox2"), Controls("TextBox3"), _ Controls("TextBox4"), Controls("TextBox5"), _ Controls("TextBox6")} Private boxList As New List(Of TextBox) From {TextBox1, TextBox2, TextBox3 ...} Private somevar As String = Me.Controls("TextBox1").Text
Sub Form_Load(..._ Dim name As String = NameBoxes(2).Text End Sub
Public Class Form1 Private myFiles() As String = Me.OpenFileDialog1.FileName & ... Private dbcon As String = OpenFileDialog1.FileName & ";Jet Oledb..." Private studentName As String = TextBox13.Text
Private NameBoxes as TextBox() Private studentName As String ' NameBoxes = New TextBox() {Me.Controls("TextBox1"), Me.Controls("TestBox2"), ...) studentName = TextBox32.Text
Private NameBoxes As TextBox() NameBoxes = New TextBox() {TextBox1, TextBox2, ...) NamesList = New List(Of TextBox)({TextBox1, TextBox2, TextBox3...}) NamesList = New List(Of TextBox) NamesList.AddRange({TextBox1, TextBox2, TextBox3...})
Private bars As New List(Of Bars) Public Function BarList() As List(Of Bars) bars.Clear If someCondition Then For n As Integer = 0 to someValue bars.Add(GetBar(n)) Next n Else Exit Function End If Return bars End Function
bList = myFoo.BarList() For Each b As Bar in bList ...
bList = myFoo.BarList() If bList IsNot Nothing Then...
Dim dr As SqlDataReader Try Dim lnk As LinkButton = TryCast(sender, LinkButton) Dim gr As GridViewRow = DirectCast(lnk.NamingContainer, GridViewRow) Dim eid As String = GridView1.DataKeys(gr.RowIndex).Value.ToString() ViewState("username") = eid sqlQry = "select FirstName, Surname, DepartmentName, ExtensionName, jobTitle, Pager, mailaddress, from employees1 where username= If connection.State <> ConnectionState.Open Then connection.Open() End If command = New SqlCommand(sqlQry, connection) dr = command.ExecuteReader() If dr.Read() Then lblFirstName.Text = Convert.ToString(dr("FirstName")) ... End If mpe.Show() Catch Finally command.Dispose() dr.Close() connection.Close() End Try
For Each row As DataGridViewRow In dgvPlanning.Rows If Not IsDBNull(row.Cells(0).Value) Then ...
If (row.Cells(0) IsNot Nothing) AndAlso (IsDBNull(row.Cells(0).Value) = False) Then
Dim getFoo = (From f In dbContext.FooBars Where f.something = something Select f).FirstOrDefault If Not IsDBNull(getFoo) Then If IsDBNull(getFoo.user_id) Then txtFirst.Text = getFoo.first_name Else ...
Dim chk As CheckBox chk = CType(Me.Controls(chkName), CheckBox) If chk.Checked Then Return chk End If
If (chk IsNot Nothing) AndAlso (chk.Checked) Then ...
dgvBooks.DataSource = loan.Books dgvBooks.Columns("ISBN").Visible = True dgvBooks.Columns("Title").DefaultCellStyle.Format = "C" dgvBooks.Columns("Author").DefaultCellStyle.Format = "C" dgvBooks.Columns("Price").DefaultCellStyle.Format = "C"
xlWorkSheet = xlWorkBook.Sheets("sheet1") For i = 0 To myDGV.RowCount - 1 For j = 0 To myDGV.ColumnCount - 1 For k As Integer = 1 To myDGV.Columns.Count xlWorkSheet.Cells(1, k) = myDGV.Columns(k - 1).HeaderText xlWorkSheet.Cells(i + 2, j + 1) = myDGV(j, i).Value.ToString() Next Next Next
For Each r As DataGridViewRow in myDGV.Rows If r.IsNewRow = False Then
If My.Settings.FooBars Is Nothing Then My.Settings.FooBars = New System.Collections.Specialized.StringCollection End If
Imports System.IO Module Module1 Sub Main() Using ms As New MemoryStream Dim sw As New StreamWriter(ms) sw.WriteLine("Hello World") sw.Flush() ms.Position = 0 Dim sr As New StreamReader(ms) Dim myStr = sr.ReadToEnd() Console.WriteLine(myStr) sw.Dispose() sr.Dispose() End Using Console.WriteLine("Press any key to continue.") Console.ReadKey() End Sub End Module
<Extension()> _ Public Function ReadAll(ByVal memStream As MemoryStream) As String Dim pos = memStream.Position memStream.Position = 0 Dim reader As New StreamReader(memStream) Dim str = reader.ReadToEnd() memStream.Position = pos Return str End Function
byte[] array = Encoding.ASCII.GetBytes("MyTest1 - MyTest2"); MemoryStream streamItem = new MemoryStream(array); StreamReader reader = new StreamReader(streamItem); string text = reader.ReadToEnd();
public static class SetExtensions { public static string ReadToEnd(this MemoryStream BASE) { BASE.Position = 0; StreamReader R = new StreamReader(BASE); return R.ReadToEnd(); } }
using (MemoryStream m = new MemoryStream()) { XmlSerializer xs = new XmlSerializer(_yourVariable.GetType()); xs.Serialize(m, _yourVariable); MessageBox.Show(m.ReadToEnd()); }
using System; using System.Collections.Generic; using System.IO; using System.Runtime.Serialization; using System.Runtime.Serialization.Json; using System.Threading; namespace JsonSample { class Program { static void Main(string[] args) { var phones = new List<Phone> { new Phone { Type = PhoneTypes.Home, Number = "28736127" }, new Phone { Type = PhoneTypes.Movil, Number = "842736487" } }; var p = new Person { Id = 1, Name = "Person 1", BirthDate = DateTime.Now, Phones = phones }; Console.WriteLine("New object Console.WriteLine(string.Format("Id: {0}, Name: {1}, Birthday: {2}.", p.Id, p.Name, p.BirthDate.ToShortDateString())); Console.WriteLine(string.Format("Phone: {0} {1}", p.Phones[0].Type.ToString(), p.Phones[0].Number)); Console.WriteLine(string.Format("Phone: {0} {1}", p.Phones[1].Type.ToString(), p.Phones[1].Number)); Console.Write(Environment.NewLine); Thread.Sleep(2000); var stream1 = new MemoryStream(); var ser = new DataContractJsonSerializer(typeof(Person)); ser.WriteObject(stream1, p); stream1.Position = 0; StreamReader sr = new StreamReader(stream1); Console.Write("JSON form of Person object: "); Console.WriteLine(sr.ReadToEnd()); Console.Write(Environment.NewLine); Thread.Sleep(2000); var f = GetStringFromMemoryStream(stream1); Console.Write(Environment.NewLine); Thread.Sleep(2000); Console.WriteLine("Passing string parameter from server to client..."); Console.Write(Environment.NewLine); Thread.Sleep(2000); var g = GetMemoryStreamFromString(f); g.Position = 0; var ser2 = new DataContractJsonSerializer(typeof(Person)); var p2 = (Person)ser2.ReadObject(g); Console.Write(Environment.NewLine); Thread.Sleep(2000); Console.WriteLine("New object Console.WriteLine(string.Format("Id: {0}, Name: {1}, Birthday: {2}.", p2.Id, p2.Name, p2.BirthDate.ToShortDateString())); Console.WriteLine(string.Format("Phone: {0} {1}", p2.Phones[0].Type.ToString(), p2.Phones[0].Number)); Console.WriteLine(string.Format("Phone: {0} {1}", p2.Phones[1].Type.ToString(), p2.Phones[1].Number)); Console.Read(); } private static MemoryStream GetMemoryStreamFromString(string s) { var stream = new MemoryStream(); var sw = new StreamWriter(stream); sw.Write(s); sw.Flush(); stream.Position = 0; return stream; } private static string GetStringFromMemoryStream(MemoryStream ms) { ms.Position = 0; using (StreamReader sr = new StreamReader(ms)) { return sr.ReadToEnd(); } } } [DataContract] internal class Person { [DataMember] public int Id { get; set; } [DataMember] public string Name { get; set; } [DataMember] public DateTime BirthDate { get; set; } [DataMember] public List<Phone> Phones { get; set; } } [DataContract] internal class Phone { [DataMember] public PhoneTypes Type { get; set; } [DataMember] public string Number { get; set; } } internal enum PhoneTypes { Home = 1, Movil = 2 } }
Public Function ReadAll(ByVal memStream As MemoryStream, Optional ByVal startPos As Integer = 0) As String Dim Pos = memStream.Position memStream.Position = startPos Dim reader As New StreamReader(memStream) Dim str = reader.ReadToEnd() memStream.Position = Pos Return str End Function
public static class MemoryStreamExtensions { static object streamLock = new object(); public static void WriteLine(this MemoryStream stream, string text, bool flush) { byte[] bytes = Encoding.UTF8.GetBytes(text + Environment.NewLine); lock (streamLock) { stream.Write(bytes, 0, bytes.Length); if (flush) { stream.Flush(); } } } public static void WriteLine(this MemoryStream stream, string formatString, bool flush, params string[] strings) { byte[] bytes = Encoding.UTF8.GetBytes(String.Format(formatString, strings) + Environment.NewLine); lock (streamLock) { stream.Write(bytes, 0, bytes.Length); if (flush) { stream.Flush(); } } } public static void WriteToConsole(this MemoryStream stream) { lock (streamLock) { long temporary = stream.Position; stream.Position = 0; using (StreamReader reader = new StreamReader(stream, Encoding.UTF8, false, 0x1000, true)) { string text = reader.ReadToEnd(); if (!String.IsNullOrEmpty(text)) { Console.WriteLine(text); } } stream.Position = temporary; } } }
Dim foo As Integer? = If( someTrueExpression, Nothing, 2)
If mystring IsNot Nothing And mystring.Contains("Foo") Then End If
If mystring IsNot Nothing AndAlso mystring.Contains("Foo") Then End If
Dim a = 3 OR 5 Dim a = 3 And 5 Dim b = 3 OrElse 5 Dim b = 3 AndAlso 5 Dim c = 0 AndAlso 5
While File1.Seek_Next_Row() And File2.Seek_Next_Row() Str1 = File1.GetRow() Str2 = File2.GetRow() End While
If Bool1 And Bool2 Then If [both are true] Then If Bool1 AndAlso Bool2 Then If [first is true then evaluate the second] Then
If Not IsNull(myObj) AndAlso myObj.SomeProperty = 3 Then ... End If
Private Shared Function ConvertToUTF8(ByVal html As String) As String Dim isoEncoding As Encoding = Encoding.GetEncoding("iso-8859-1") Dim source As Byte() = isoEncoding.GetBytes(html) Return Encoding.UTF8.GetString(Encoding.Convert(isoEncoding, Encoding.UTF8, source)) End Function
Private Shared Function ReplaceNonASCIIChars(ByVal html As String) As String Return Regex.Replace(html, "[^\u0000-\u007F]", "&nbsp;") End Function
Dim first? As Integer = 3 Dim second As Integer = 6 Console.WriteLine(If(first, second)) second = Nothing Console.WriteLine(If(first, second)) first = Nothing second = 6 Console.WriteLine(If(first, second))
Dim first? As Integer = 3 Dim second As Integer = 6 Console.WriteLine(If(first, second)) second = Nothing Console.WriteLine(If(first, second)) first = Nothing second = 6 Console.WriteLine(If(first, second))
Dim first? As Integer = Nothing Dim second? As Integer = Nothing Dim third? As Integer = 6 Console.WriteLine(If(first, If(second, third)))
<System.Runtime.CompilerServices.Extension()> _ Public Function Coalesce(Of T)(ByVal obj As T, ByVal ParamArray args() As T) As T If obj IsNot Nothing Then Return obj End If Dim arg As T For Each arg In args If arg IsNot Nothing Then Return arg End If Next Return Nothing End Function
var value = expression1 ?? expression2 ?? expression3 ?? expression4;
dim value = if(exression1,if(expression2,if(expression3,expression4)))
Console.WriteLine(If(True, "TruePart", "FalsePart")) Console.WriteLine(If(False, "TruePart", "FalsePart")) Dim number = 3 Console.WriteLine(If(number >= 0, "Positive", "Negative")) number = -1 Console.WriteLine(If(number >= 0, "Positive", "Negative"))
Public Class Foo Private _Name As String Public Property Name() As String Get Return _Name End Get Set(ByVal value As String) _Name = value End Set End Property Private _Age As String Public Property Age() As String Get Return _Age End Get Set(ByVal value As String) _Age = value End Set End Property Private _ContactNumber As String Public Property ContactNumber() As String Get Return _ContactNumber End Get Set(ByVal value As String) _ContactNumber = value End Set End Property End Class
Public Sub DisplayAll(ByVal Someobject As Foo) For Each _Property As something In Someobject.Properties Console.WriteLine(_Property.Name & "=" & _Property.value) Next End Sub
Type type = obj.GetType(); PropertyInfo[] properties = type.GetProperties(); foreach (PropertyInfo property in properties) { Console.WriteLine("Name: " + property.Name + ", Value: " + property.GetValue(obj, null)); }
BindingFlags flags = BindingFlags.Public | BindingFlags.Instance; PropertyInfo[] properties = type.GetProperties(flags);
foreach(PropertyDescriptor prop in TypeDescriptor.GetProperties(obj)) { Console.WriteLine("{0} = {1}", prop.Name, prop.GetValue(obj)); }
string fmt = prop.Converter.ConvertToString(prop.GetValue(obj));
Public Sub DisplayAll(ByVal Someobject As Foo) Dim _type As Type = Someobject.GetType() Dim properties() As PropertyInfo = _type.GetProperties() For Each _property As PropertyInfo In properties Console.WriteLine("Name: " + _property.Name + ", Value: " + _property.GetValue(Someobject, Nothing)) Next End Sub
Dim flags As BindingFlags = BindingFlags.Public Or BindingFlags.Instance Dim properties() As PropertyInfo = _type.GetProperties(flags)
if (item is IEnumerable) { foreach (object o in item as IEnumerable) { } } else { foreach (System.Reflection.PropertyInfo p in obj.GetType().GetProperties()) { if (p.CanRead) { Console.WriteLine("{0}: {1}", p.Name, p.GetValue(obj, null)); } } }
If TypeOf item Is IEnumerable Then For Each o As Object In TryCast(item, IEnumerable) Next Else For Each p As System.Reflection.PropertyInfo In obj.GetType().GetProperties() If p.CanRead Then Console.WriteLine("{0}: {1}", p.Name, p.GetValue(obj, Nothing)) End If Next End If
private void ResetAllProperties() { Type type = this.GetType(); PropertyInfo[] properties = (from c in type.GetProperties() where c.Name.StartsWith("Doc") select c).ToArray(); foreach (PropertyInfo item in properties) { if (item.PropertyType.FullName == "System.String") item.SetValue(this, "", null); } }
SomeObject.GetType().GetProperties().ToList().ForEach(x => Console.WriteLine($"{x.Name} = {x.GetValue(SomeObject, null)}"));
SomeObject.GetType.GetProperties.ToList.ForEach(Sub(x) Console.WriteLine($"{x.Name} = {x.GetValue(SomeObject, Nothing)}"))
foreach (var fi in typeof(CustomRoles).GetFields()) { var propertyName = fi.Name; }
Private Sub Window1_Loaded(...) Handles MyBase.Loaded ListViewImages.ItemsSource = From g In db.Graphic _ Order By g.DateAdded Ascending _ Select g End Sub
<ListView Name="ListViewImages" SelectionMode="Single" ItemsSource="{Binding}"> <local:ImageView /> </ListView>
<ListView Name="ListViewImages" SelectionMode="Single" ItemsSource="{Binding}"> <ListView.View> <local:ImageView /> </ListView.View> </ListView>
<wpftoolkit:DataGrid AutoGenerateColumns="False" ItemsSource="{Binding Path=Accounts}" > <wpftoolkit:DataGridTextColumn Header="Account Name" Binding="{Binding Path=AccountName}" /> </wpftoolkit:DataGrid>
<wpftoolkit:DataGrid AutoGenerateColumns="False" ItemsSource="{Binding Path=Accounts}" > <wpftoolkit:DataGrid.Columns> <wpftoolkit:DataGridTextColumn Header="Account Name" Binding="{Binding Path=AccountName}" /> </wpftoolkit:DataGrid.Columns> </wpftoolkit:DataGrid>
<ComboBox Cursor="Hand" DataContext="{Binding}" FontSize="16" Height="27" ItemsSource="{Binding}" Name="cbxDamnCombo" SelectedIndex="0" SelectedValuePath="MemberId"> <DataTemplate> <TextBlock DataContext="{Binding}"> <TextBlock.Text> <MultiBinding StringFormat="{}{0} / {1}"> <Binding Path="MemberName"/> <Binding Path="Phone"/> </MultiBinding> </TextBlock.Text> </TextBlock> </DataTemplate> </ComboBox>
<ComboBox Cursor="Hand" DataContext="{Binding}" FontSize="16" Height="27" ItemsSource="{Binding}" Name="cbxDamnCombo" SelectedIndex="0" SelectedValuePath="MemberId"> <ComboBox.ItemTemplate> <DataTemplate> <TextBlock DataContext="{Binding}"> <TextBlock.Text> <MultiBinding StringFormat="{}{0} / {1}"> <Binding Path="MemberName"/> <Binding Path="Phone"/> </MultiBinding> </TextBlock.Text> </TextBlock> </DataTemplate> <ComboBox.ItemTemplate> </ComboBox>
<ItemsControl ItemsSource="{Binding TableList}"> <ItemsPanelTemplate> <WrapPanel Orientation="Horizontal"/> </ItemsPanelTemplate> </ItemsControl>
<ItemsControl ItemsSource="{Binding TableList}"> <ItemsControl.ItemsPanel> <ItemsPanelTemplate> <WrapPanel Orientation="Horizontal"/> </ItemsPanelTemplate> </ItemsControl.ItemsPanel> </ItemsControl>
<!--Right--> <ItemsControl ItemsSource="{Binding MyItems}"> <ItemsControl.ItemsPanel.../> <ItemsControl.MyAttachedProperty.../> <FrameworkElement.ActualWidth.../> </ItemsControl> <!--WRONG--> <ItemsControl ItemsSource="{Binding MyItems}"> <Grid.../> <Button.../> <DataTemplate.../> <Heigth.../> </ItemsControl>
<!--Right--> <ItemsControl> <Button.../> <TextBlock.../> <sys:String.../> </ItemsControl>
<ItemsControl ItemsSource="{Binding TimeSpanChoices}"> <ItemsPanelTemplate> <UniformGrid Rows="1" /> </ItemsPanelTemplate> ... </ItemsControl>
<ItemsControl ItemsSource="{Binding TimeSpanChoices}"> <ItemsControl.ItemsPanel> <!-- I am the missing parent! --> <ItemsPanelTemplate> <UniformGrid Rows="1" /> </ItemsPanelTemplate> </ItemsControl.ItemsPanel> ... </ItemsControl>
<ListView Name="_details" Margin="50,0,50,0"> <StackPanel Orientation="Vertical"> <StackPanel Orientation="Vertical"> <TextBlock Text="{Binding Location.LicenseName, StringFormat= <TextBlock Text="{Binding Ticket.Employee.s_name, StringFormat= <TextBlock Text="{Binding Ticket.dt_create_time, StringFormat= <Line StrokeThickness="2" Stroke="Gray" Stretch="Fill" Margin="0,5,0,5" /> <ItemsControl ItemsSource="{Binding Items}"/> </StackPanel> </StackPanel> </ListView>
<ListView Name="_details" Margin="50,0,50,0"> <StackPanel Orientation="Vertical"> <TextBlock Text="{Binding Location.LicenseName, StringFormat= <TextBlock Text="{Binding Ticket.Employee.s_name, StringFormat= <TextBlock Text="{Binding Ticket.dt_create_time, StringFormat= <Line StrokeThickness="2" Stroke="Gray" Stretch="Fill" Margin="0,5,0,5" /> <ItemsControl ItemsSource="{Binding Items}"/> </StackPanel> </ListView>
<ItemsControl Width="243" ItemsSource="{Binding List, Mode=TwoWay}"> <StackPanel Orientation="Horizontal"> <TextBox Width="25" Margin="0,0,5,0" Text="{Binding Path=Property1}"/> <Label Content="{Binding Path=Property2}"/> </StackPanel> </ItemsControl>
<ItemsControl Width="243" ItemsSource="{Binding List, Mode=TwoWay}"> <ItemsControl.ItemTemplate> <DataTemplate> <StackPanel Orientation="Horizontal"> <TextBox Width="25" Margin="0,0,5,0" Text="{Binding Path=Property1}"/> <Label Content="{Binding Path=Property2}"/> </StackPanel> </DataTemplate> </ItemsControl.ItemTemplate> </ItemsControl>
<DataGrid Name="DicsountScheduleItemsDataGrid" Grid.Column="0" Grid.Row="2" AutoGenerateColumns="false" ItemsSource="{Binding DiscountScheduleItems, Mode=OneWay}"> <Style TargetType="DataGridRow"> <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" /> </Style>
<DataGrid Name="DicsountScheduleItemsDataGrid" Grid.Column="0" Grid.Row="2" AutoGenerateColumns="false" ItemsSource="{Binding DiscountScheduleItems, Mode=OneWay}"> <DataGrid.RowStyle> <Style TargetType="DataGridRow"> <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" /> </Style> </DataGrid.RowStyle>
<TreeView Height="Auto" MinHeight="100" ItemsSource="{Binding Path=TreeNodes, Mode=TwoWay}" ContextMenu="{Binding Converter={StaticResource ContextMenuConverter}}"> ContextMenu=""> <TreeView.ItemContainerStyle> ...
<ComboBox ItemsSource="{Binding StatusTypes}" DisplayMemberPath="StatusName" SelectedValuePath="StatusID"> <ComboBox.SelectedValue> <Binding Path="StatusID"/> </ComboBox.SelectedValue> > </ComboBox>
<ComboBox ItemsSource="{Binding StatusTypes}" DisplayMemberPath="StatusName" SelectedValuePath="StatusID"> <ComboBox.SelectedValue> <Binding Path="StatusID"/> </ComboBox.SelectedValue> </ComboBox>
<DataGridTemplateColumn x:Name="addedDateColumn" Header="Added Date" Width="SizeToHeader"> <DataGridTemplateColumn.CellTemplate> <DataTemplate> <TextBlock Text="{Binding Path=AddedDate}" /> </DataTemplate> </DataGridTemplateColumn.CellTemplate> </DataGridTemplateColumn> </DataGrid.Columns> <DataGridTemplateColumn x:Name="rowguidColumn" Header="rowguid" Width="SizeToHeader"> <DataGridTemplateColumn.CellTemplate> <DataTemplate> <TextBlock Text="{Binding Path=rowguid}" /> </DataTemplate> </DataGridTemplateColumn.CellTemplate> </DataGridTemplateColumn> </DataGrid>
<TreeView ItemsSource="{Binding MyCollection}"> <TreeView.Resources> ... </TreeView.Resouces>> </TreeView>
Module Interop Public Function Succeeded(ByVal hr as Integer) As Boolean ... End Function Public Function Failed(ByVal hr As Integer) As Boolean ... End Function End Module Class SomeClass Sub Foo() Dim hr = CallSomeHrMethod() if Succeeded(hr) then .. End If End Sub End Class
Public NotInheritable Class MyClass1 Private Sub New() End Sub End Class
Option Strict On Option Infer On Imports System Module MainModule Sub Main() Dim i = 42 Dim s = "Hello" Console.WriteLine("{0}, {1}", i.GetType(), s.GetType()) End Sub End Module
Dim number As Integer = 1 Dim str As String = String.TryCast(number) If str IsNot Nothing Then
Imports System.Collections.Specialized Namespace System.Collections.ObjectModel Public Class ObservableRangeCollection(Of T) : Inherits System.Collections.ObjectModel.ObservableCollection(Of T) Public Sub AddRange(ByVal collection As IEnumerable(Of T)) For Each i In collection Items.Add(i) Next OnCollectionChanged(New NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset)) End Sub Public Sub RemoveRange(ByVal collection As IEnumerable(Of T)) For Each i In collection Items.Remove(i) Next OnCollectionChanged(New NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset)) End Sub Public Sub Replace(ByVal item As T) ReplaceRange(New T() {item}) End Sub Public Sub ReplaceRange(ByVal collection As IEnumerable(Of T)) Dim old = Items.ToList Items.Clear() For Each i In collection Items.Add(i) Next OnCollectionChanged(New NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset)) End Sub Public Sub New() MyBase.New() End Sub Public Sub New(ByVal collection As IEnumerable(Of T)) MyBase.New(collection) End Sub End Class End Namespace
Imports System.Collections.Specialized Imports System.ComponentModel Imports System.Collections.ObjectModel Public Class ObservableRangeCollection(Of T) : Inherits ObservableCollection(Of T) : Implements INotifyCollectionChanging(Of T) Public Sub New() MyBase.New() End Sub Public Sub New(ByVal collection As IEnumerable(Of T)) MyBase.New(collection) End Sub Public Sub AddRange(ByVal collection As IEnumerable(Of T)) Dim ce As New NotifyCollectionChangingEventArgs(Of T)(NotifyCollectionChangedAction.Add, collection) OnCollectionChanging(ce) If ce.Cancel Then Exit Sub Dim index = Items.Count - 1 For Each i In collection Items.Add(i) Next OnCollectionChanged(New NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, collection, index)) End Sub Public Sub InsertRange(ByVal index As Integer, ByVal Collection As IEnumerable(Of T)) Dim ce As New NotifyCollectionChangingEventArgs(Of T)(NotifyCollectionChangedAction.Add, Collection) OnCollectionChanging(ce) If ce.Cancel Then Exit Sub For Each i In Collection Items.Insert(index, i) Next OnCollectionChanged(New NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset)) End Sub Public Sub RemoveRange(ByVal collection As IEnumerable(Of T)) Dim ce As New NotifyCollectionChangingEventArgs(Of T)(NotifyCollectionChangedAction.Remove, collection) OnCollectionChanging(ce) If ce.Cancel Then Exit Sub For Each i In collection Items.Remove(i) Next OnCollectionChanged(New NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset)) End Sub Public Sub Replace(ByVal item As T) ReplaceRange(New T() {item}) End Sub Public Sub ReplaceRange(ByVal collection As IEnumerable(Of T)) Dim ce As New NotifyCollectionChangingEventArgs(Of T)(NotifyCollectionChangedAction.Replace, Items) OnCollectionChanging(ce) If ce.Cancel Then Exit Sub Items.Clear() For Each i In collection Items.Add(i) Next OnCollectionChanged(New NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset)) End Sub Protected Overrides Sub ClearItems() Dim e As New NotifyCollectionChangingEventArgs(Of T)(NotifyCollectionChangedAction.Reset, Items) OnCollectionChanging(e) If e.Cancel Then Exit Sub MyBase.ClearItems() End Sub Protected Overrides Sub InsertItem(ByVal index As Integer, ByVal item As T) Dim ce As New NotifyCollectionChangingEventArgs(Of T)(NotifyCollectionChangedAction.Add, item) OnCollectionChanging(ce) If ce.Cancel Then Exit Sub MyBase.InsertItem(index, item) End Sub Protected Overrides Sub MoveItem(ByVal oldIndex As Integer, ByVal newIndex As Integer) Dim ce As New NotifyCollectionChangingEventArgs(Of T)() OnCollectionChanging(ce) If ce.Cancel Then Exit Sub MyBase.MoveItem(oldIndex, newIndex) End Sub Protected Overrides Sub RemoveItem(ByVal index As Integer) Dim ce As New NotifyCollectionChangingEventArgs(Of T)(NotifyCollectionChangedAction.Remove, Items(index)) OnCollectionChanging(ce) If ce.Cancel Then Exit Sub MyBase.RemoveItem(index) End Sub Protected Overrides Sub SetItem(ByVal index As Integer, ByVal item As T) Dim ce As New NotifyCollectionChangingEventArgs(Of T)(NotifyCollectionChangedAction.Replace, Items(index)) OnCollectionChanging(ce) If ce.Cancel Then Exit Sub MyBase.SetItem(index, item) End Sub Protected Overrides Sub OnCollectionChanged(ByVal e As Specialized.NotifyCollectionChangedEventArgs) If e.NewItems IsNot Nothing Then For Each i As T In e.NewItems If TypeOf i Is INotifyPropertyChanged Then AddHandler DirectCast(i, INotifyPropertyChanged).PropertyChanged, AddressOf Item_PropertyChanged Next End If MyBase.OnCollectionChanged(e) End Sub Private Sub Item_PropertyChanged(ByVal sender As T, ByVal e As ComponentModel.PropertyChangedEventArgs) OnCollectionChanged(New NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset, sender, IndexOf(sender))) End Sub Public Event CollectionChanging(ByVal sender As Object, ByVal e As NotifyCollectionChangingEventArgs(Of T)) Implements INotifyCollectionChanging(Of T).CollectionChanging Protected Overridable Sub OnCollectionChanging(ByVal e As NotifyCollectionChangingEventArgs(Of T)) RaiseEvent CollectionChanging(Me, e) End Sub End Class Public Interface INotifyCollectionChanging(Of T) Event CollectionChanging(ByVal sender As Object, ByVal e As NotifyCollectionChangingEventArgs(Of T)) End Interface Public Class NotifyCollectionChangingEventArgs(Of T) : Inherits CancelEventArgs Public Sub New() m_Action = NotifyCollectionChangedAction.Move m_Items = New T() {} End Sub Public Sub New(ByVal action As NotifyCollectionChangedAction, ByVal item As T) m_Action = action m_Items = New T() {item} End Sub Public Sub New(ByVal action As NotifyCollectionChangedAction, ByVal items As IEnumerable(Of T)) m_Action = action m_Items = items End Sub Private m_Action As NotifyCollectionChangedAction Public ReadOnly Property Action() As NotifyCollectionChangedAction Get Return m_Action End Get End Property Private m_Items As IList Public ReadOnly Property Items() As IEnumerable(Of T) Get Return m_Items End Get End Property End Class
Imports System.XML Imports System.XML.Linq Imports System.Core Dim s As String = <a>Hello World</a>.Value
Dim s As String = <![CDATA[Hello World & Space]]>.Value
Dim query As String = <![CDATA[ SELECT a.QuestionID FROM CR_Answers a INNER JOIN CR_Class c ON c.ClassID = a.ClassID INNER JOIN CR_Questions q ON q.QuestionID = a.QuestionID WHERE a.CourseID = 1 AND c.ActionPlan = 1 AND q.Q_Year = AND q.Q_Term <= (SELECT CurrentTerm FROM CR_Current_Term) ]]>.Value()
Dim sql As String = " SELECT ID, Description FROM inventory ORDER BY DateAdded "
Dim primaryKey As String = "ID" Dim inventoryTable As String = "inventory" Dim sql As String = $" SELECT {primaryKey}, Description FROM {inventoryTable} ORDER BY DateAdded "
Imports System.Xml.Linq Public Sub Test() dim sOderBy as string = "" dim xe as XElement = <SQL> SELECT * FROM <%= sTableName %> <ORDER_BY> ORDER BY <%= sOrderBy %></ORDER_BY> </SQL> if sOrderBy.Length = 0 then xe.<ORDER BY>.Remove dim sSQL as String = xe.Value End Sub
Dim s as String = file_get_contents("filename.txt")
Dim script As String = <code><![CDATA[ <script type="text/javascript"> var URL = </script>]]> </code>.value
Dim lines As String() = { "Line 1", "Line 2", "Line 3" } Dim s As String = Join(lines, vbCrLf)
dim vrstr as string = <s> some words some words some words </s>
Dim HtmlSample As String = <anything>what ever you want to type here with multiline strings</anything> dim Test1 as string =<a>onother multiline example</a>
Dim str As String str = "First line" & vbCrLf & "Second line" MsgBox(str) str = "First line" & vbNewLine & "Second line" MsgBox(str)
Dim sValue As New System.Text.StringBuilder sValue.AppendLine("1st Line") sValue.AppendLine("2nd Line") sValue.AppendLine("3rd Line")
MySql = "" MySql = MySql & "SELECT myTable.id" MySql = MySql & " FROM myTable" MySql = MySql & " WHERE myTable.id_equipment = " & lblId.Text
If key.Equals("search", StringComparison.OrdinalIgnoreCase) Then DoSomething() End If
Public Sub Login(host as string, user as String, password as string, _ Optional bRetry as Boolean = False) Try ssh.Connect(host, user, password) Catch ex as TimeoutException When Not bRetry Login(host, user, password, True) Catch ex as TimeoutException End Try End Sub
' Public Class Rule Private ReadOnly m_Expression As String Private ReadOnly m_Options As RegexOptions Public Sub New(ByVal expression As String) Me.New(expression, RegexOptions.None) End Sub Public Sub New(ByVal expression As String, ByVal options As RegexOptions) m_Expression = expression m_options = options End Sub Public ReadOnly Property Expression() As String Get Return m_Expression End Get End Property Public ReadOnly Property Options() As RegexOptions Get Return m_Options End Get End Property End Class Public NotInheritable Class RuleTemplates Public Shared ReadOnly Whitespace As New Rule("\s+") Public Shared ReadOnly Identifier As New Rule("\w+") Public Shared ReadOnly [String] As New Rule("""([^""]|"""")*""") End Class
Dim testCheck As Boolean testCheck = "F" Like "F" testCheck = "F" Like "f" testCheck = "F" Like "FFF" testCheck = "aBBBa" Like "a*a" testCheck = "F" Like "[A-Z]" testCheck = "F" Like "[!A-Z]" testCheck = "a2a" Like "a testCheck = "aM5b" Like "a[L-P] testCheck = "BAT123khg" Like "B?T*" testCheck = "CAT123khg" Like "B?T*"
Imports StringPair = System.Collections.Generic.KeyValuePair(Of String, String)
Dim contact2 = _ <contact> <name>Patrick Hines</name> <%= From p In phoneNumbers2 _ Select <phone type=<%= p.Type %>><%= p.Number %></phone> _ %> </contact>
Dim x as New MyClass With {.Prop1 = foo, .Prop2 = bar}
Dim x = If(a = b, c, d) Dim hello As String = Nothing Dim y = If(hello, "World")
Select Case Role Case "Admin" Case "Tester" Case "Developer" Case Else End Select
Select Case Amount Case Is < 0 Case 0 To 15 Shipping = 2.0 Case 16 To 59 Shipping = 5.87 Case Is > 59 Shipping = 12.50 Case Else Shipping = 9.99 End Select
Select Case True Case a = b Case a = c Case b = c Case Else End Select
With ReallyLongClassName .Property1 = Value1 .Property2 = Value2 ... End With
Function CleanString(byval input As String) As String Static pattern As New RegEx("...") return pattern.Replace(input, "") End Function
Function GetNextRandom() As Integer Static r As New Random(getSeed()) Return r.Next() End Function
Sub Main() Dim x = 9 / 5 Dim y = 9 \ 5 Console.WriteLine("item x of Console.WriteLine("item y of End Sub
Public Class ApplePie Private ReadOnly m_BakedEvent As New List(Of EventHandler)() Custom Event Baked As EventHandler AddHandler(ByVal value As EventHandler) Console.WriteLine("Adding a new subscriber: {0}", value.Method) m_BakedEvent.Add(value) End AddHandler RemoveHandler(ByVal value As EventHandler) Console.WriteLine("Removing subscriber: {0}", value.Method) m_BakedEvent.Remove(value) End RemoveHandler RaiseEvent(ByVal sender As Object, ByVal e As EventArgs) Console.WriteLine("{0} is raising an event.", sender) For Each ev In m_BakedEvent ev.Invoke(sender, e) Next End RaiseEvent End Event Public Sub Bake() RaiseEvent Baked(Me, EventArgs.Empty) End Sub End Class
Module Module1 Public Sub Foo(ByVal sender As Object, ByVal e As EventArgs) Console.WriteLine("Hmm, freshly baked apple pie.") End Sub Sub Main() Dim pie As New ApplePie() AddHandler pie.Baked, AddressOf Foo pie.Bake() RemoveHandler pie.Baked, AddressOf Foo End Sub End Module
Dim Table As Hashtable = New Hashtable Table("Orange") = "A fruit" Table("Broccoli") = "A vegetable" Table("Pork") = "A meat" Console.WriteLine(Table("Pork"))
Dim Table As Hashtable = New Hashtable Table!Orange = "A fruit" Table!Broccoli = "A vegetable" Table!Pork = "A meat" Console.WriteLine(Table!Pork)
Public Sub GetISCSIAdmInfo(ByRef xDoc As System.Xml.XmlDocument) Implements IUnix.GetISCSIInfo End Sub
Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load Dim R = 4 Trace.WriteLine(R) Test(R) Trace.WriteLine(R) Test((R)) Trace.WriteLine(R) End Sub Private Sub Test(ByRef i As Integer) i += 1 End Sub
Sub MyFunc(Optional msg as String= "", Optional displayOrder As integer = 0) End function
Module Module1 Sub Main() MyFunc() End Sub End Module
Using lockThis as New MyLocker(objToLock) End Using
Import winf = System.Windows.Forms Dim x as winf.Form
If Not SomethingHappenedEvent Is Nothing OrElse SomethingHappenedEvent.GetInvocationList.Length = 0 Then ... End If
Class CodeException Public [Error] as String End Class Dim e as new CodeException e.Error = "Invalid Syntax"
Class Timer Public Sub Start() End Sub Public Sub [Stop]() End Sub
Dim myString = _ "This string contains ""quotes"" and they
Dim myString = _ <string>This string contains "quotes" and they
Dim csvTestYuck = _ """Smith"", ""Bob"", ""123 Anywhere St"", ""Los Angeles"", ""CA""" Dim csvTestMuchBetter = _ <string>"Smith", "Bob", "123 Anywhere St", "Los Angeles", "CA"</string>.Value
Dim independanceDay as DateTime = New DateTime(1776, 7, 4)
Function CloseTheSystem(Optional ByVal msg AS String = "Shutting down the system...") Console.Writeline(msg) End Function
Private Shared m_Dictionary As IDictionary(Of String, Object) = _ New Dictionary(Of String, Object) Public Shared Property DictionaryElement(ByVal Key As String) As Object Get If m_Dictionary.ContainsKey(Key) Then Return m_Dictionary(Key) Else Return [String].Empty End If End Get Set(ByVal value As Object) If m_Dictionary.ContainsKey(Key) Then m_Dictionary(Key) = value Else m_Dictionary.Add(Key, value) End If End Set End Property
Function myFunction() As String Return "blah" End Function
var theVar = new List<string>{"one", "two", "three"};
Dim theVar As New List(Of String)(New String() {"one", "two", "three"})
Dim theVar = New List(Of String) From { "one", "two", "three" }
Dim utf8 As New UTF8Encoding() Dim utf8EmitBOM As New UTF8Encoding(True) Dim strW As New StreamWriter("c:\temp\bom\1.html", True, utf8EmitBOM) strW.Write(utf8EmitBOM.GetPreamble()) strW.WriteLine("hi there") strW.Close() Dim strw2 As New StreamWriter("c:\temp\bom\2.html", True, utf8) strw2.Write(utf8.GetPreamble()) strw2.WriteLine("hi there") strw2.Close()
Dim utf8WithoutBom As New System.Text.UTF8Encoding(False) Using sink As New StreamWriter("Foobar.txt", False, utf8WithoutBom) sink.WriteLine("...") End Using
Using sink As New StreamWriter("Foobar.txt") sink.WriteLine("...") End Using
Encoding outputEnc = new UTF8Encoding(false); TextWriter file = new StreamWriter(filePath, false, outputEnc); file.Close();
new StreamWriter(Stream) new StreamWriter(String) new StreamWriter(String, Boolean)
Encoding utf8noBOM = new UTF8Encoding(false); XmlWriterSettings settings = new XmlWriterSettings(); settings.Encoding = utf8noBOM; … using (XmlWriter xw = XmlWriter.Create(filePath, settings)) { xDoc.WriteTo(xw); xw.Flush(); }
Dim sWriter As IO.StreamWriter = New IO.StreamWriter(shareworklist & "\" & getfilename() & ".txt", False, Encoding.Default)
for each item in itemList for each item1 in itemList1 if item1.text = "bla bla bla" then exit for end if end for end for
For Each item In itemList For Each item1 In itemList1 If item1.Text = "bla bla bla" Then Goto end_of_for End If Next Next end_of_for:
Do For Each item In itemList For Each item1 In itemList1 If item1.Text = "bla bla bla" Then Exit Do End If Next Next Loop While False
Try For Each item In itemlist For Each item1 In itemlist1 If item1 = "bla bla bla" Then Exit Try End If Next Next Finally End Try
Dim done = False For Each item In itemList For Each item1 In itemList1 If item1.Text = "bla bla bla" Then done = True Exit For End If Next If done Then Exit For Next
For Each item In itemlist For Each item1 In itemlist1 If item1 = item Then Return item1 End If Next Next
For i As Integer = 0 To 100 bool = False For j As Integer = 0 To 100 If check condition Then bool = True Exit For End If Next If bool = True Then Continue For Next
while (txt.Length > x) { thisChar = txt[x]; if (charsAllowedWithoutLimit.Contains(thisChar)) { ++x; } else if (allowLettersWithoutLimit && char.IsLetter(thisChar)) { ++x; } else if ((x2 = charsAllowedWithLimit.IndexOf(thisChar)) >= 0) { ++x; if (++usedCountA[x2] > charAllowedLimit[x2]) { break; } } else { break; } } While (txt.Length > x) thisChar = txt(x) If (charsAllowedWithoutLimit.Contains(thisChar)) Then x += 1 ElseIf (allowLettersWithoutLimit AndAlso Char.IsLetter(thisChar)) Then x += 1 Else x2 = charsAllowedWithLimit.IndexOf(thisChar) If (x2 >= 0) Then x += 1 usedCountA(x2) += 1S If usedCountA(x2) > charAllowedLimit(x2) Then Exit While Else Exit While End If End If End While
public static bool IsNotWithin(this Byte v, Byte v1, Byte v2) { return (v1 > v && v < v2) || (v2 < v && v > v1); } public static bool IsNotWithin(this SByte v, SByte v1, SByte v2) { return (v1 > v && v < v2) || (v2 < v && v > v1); } public static bool IsNotWithin(this Int16 v, Int16 v1, Int16 v2) { return (v1 > v && v < v2) || (v2 < v && v > v1); } public static bool IsNotWithin(this Int32 v, Int32 v1, Int32 v2) { return (v1 > v && v < v2) || (v2 < v && v > v1); } public static bool IsNotWithin(this Int64 v, Int64 v1, Int64 v2) { return (v1 > v && v < v2) || (v2 < v && v > v1); } public static bool IsNotWithin(this UInt16 v, UInt16 v1, UInt16 v2) { return (v1 > v && v < v2) || (v2 < v && v > v1); } public static bool IsNotWithin(this UInt32 v, UInt32 v1, UInt32 v2) { return (v1 > v && v < v2) || (v2 < v && v > v1); } public static bool IsNotWithin(this UInt64 v, UInt64 v1, UInt64 v2) { return (v1 > v && v < v2) || (v2 < v && v > v1); } public static bool IsNotWithin(this Decimal v, Decimal v1, Decimal v2) { return (v1 > v && v < v2) || (v2 < v && v > v1); } public static bool IsWithin(this Byte v, Byte v1, Byte v2) { return (v1 <= v && v <= v2) || (v2 <= v && v <= v1); } public static bool IsWithin(this SByte v, SByte v1, SByte v2) { return (v1 <= v && v <= v2) || (v2 <= v && v <= v1); } public static bool IsWithin(this Int16 v, Int16 v1, Int16 v2) { return (v1 <= v && v <= v2) || (v2 <= v && v <= v1); } public static bool IsWithin(this Int32 v, Int32 v1, Int32 v2) { return (v1 <= v && v <= v2) || (v2 <= v && v <= v1); } public static bool IsWithin(this Int64 v, Int64 v1, Int64 v2) { return (v1 <= v && v <= v2) || (v2 <= v && v <= v1); } public static bool IsWithin(this UInt16 v, UInt16 v1, UInt16 v2) { return (v1 <= v && v <= v2) || (v2 <= v && v <= v1); } public static bool IsWithin(this UInt32 v, UInt32 v1, UInt32 v2) { return (v1 <= v && v <= v2) || (v2 <= v && v <= v1); } public static bool IsWithin(this UInt64 v, UInt64 v1, UInt64 v2) { return (v1 <= v && v <= v2) || (v2 <= v && v <= v1); } public static bool IsWithin(this Decimal v, Decimal v1, Decimal v2) { return (v1 <= v && v <= v2) || (v2 <= v && v <= v1); } <Extension()> Public Function IsNotWithin(v As Byte, value1 As Byte, value2 As Byte) As Boolean Return (value1 > v AndAlso v < value2) OrElse (value2 < v AndAlso v > value1) End Function <Extension()> Public Function IsNotWithin(v As SByte, value1 As SByte, value2 As SByte) As Boolean Return (value1 > v AndAlso v < value2) OrElse (value2 < v AndAlso v > value1) End Function <Extension()> Public Function IsNotWithin(v As Int16, value1 As Int16, value2 As Int16) As Boolean Return (value1 > v AndAlso v < value2) OrElse (value2 < v AndAlso v > value1) End Function <Extension()> Public Function IsNotWithin(v%, value1%, value2%) As Boolean Return (value1 > v AndAlso v < value2) OrElse (value2 < v AndAlso v > value1) End Function <Extension()> Public Function IsNotWithin(v&, value1&, value2&) As Boolean Return (value1 > v AndAlso v < value2) OrElse (value2 < v AndAlso v > value1) End Function <Extension()> Public Function IsNotWithin(v As UInt16, value1 As UInt16, value2 As UInt16) As Boolean Return (value1 > v AndAlso v < value2) OrElse (value2 < v AndAlso v > value1) End Function <Extension()> Public Function IsNotWithin(v As UInt32, value1 As UInt32, value2 As UInt32) As Boolean Return (value1 > v AndAlso v < value2) OrElse (value2 < v AndAlso v > value1) End Function <Extension()> Public Function IsNotWithin(v As UInt64, value1 As UInt64, value2 As UInt64) As Boolean Return (value1 > v AndAlso v < value2) OrElse (value2 < v AndAlso v > value1) End Function <Extension()> Public Function IsNotWithin(v@, value1@, value2@) As Boolean Return (value1 > v AndAlso v < value2) OrElse (value2 < v AndAlso v > value1) End Function <Extension()> Public Function IsWithin(v As Byte, value1 As Byte, value2 As Byte) As Boolean Return (value1 <= v AndAlso v <= value2) OrElse (value2 <= v AndAlso v <= value1) End Function <Extension()> Public Function IsWithin(v As SByte, value1 As SByte, value2 As SByte) As Boolean Return (value1 <= v AndAlso v <= value2) OrElse (value2 <= v AndAlso v <= value1) End Function <Extension()> Public Function IsWithin(v As Int16, value1 As Int16, value2 As Int16) As Boolean Return (value1 <= v AndAlso v <= value2) OrElse (value2 <= v AndAlso v <= value1) End Function <Extension()> Public Function IsWithin(v%, value1%, value2%) As Boolean Return (value1 <= v AndAlso v <= value2) OrElse (value2 <= v AndAlso v <= value1) End Function <Extension()> Public Function IsWithin(v&, value1&, value2&) As Boolean Return (value1 <= v AndAlso v <= value2) OrElse (value2 <= v AndAlso v <= value1) End Function <Extension()> Public Function IsWithin(v As UInt16, value1 As UInt16, value2 As UInt16) As Boolean Return (value1 <= v AndAlso v <= value2) OrElse (value2 <= v AndAlso v <= value1) End Function <Extension()> Public Function IsWithin(v As UInt32, value1 As UInt32, value2 As UInt32) As Boolean Return (value1 <= v AndAlso v <= value2) OrElse (value2 <= v AndAlso v <= value1) End Function <Extension()> Public Function IsWithin(v As UInt64, value1 As UInt64, value2 As UInt64) As Boolean Return (value1 <= v AndAlso v <= value2) OrElse (value2 <= v AndAlso v <= value1) End Function <Extension()> Public Function IsWithin(v@, value1@, value2@) As Boolean Return (value1 <= v AndAlso v <= value2) OrElse (value2 <= v AndAlso v <= value1) End Function
Function c() As Integer End Function Function C() As Integer End Function
Public Class C Public Name As String Public Function M(name As String) As Boolean Return String.Equals(name, Name) End Function End Class
Dim x As System.Nullable(Of Decimal) = Nothing Dim y As System.Nullable(Of Decimal) = Nothing y = 5 If x <> y Then Console.WriteLine("true") Else Console.WriteLine("false") End If
<MyAttribute("This code sux and should be looked at")> Public Sub DoEverything() End Sub
<?xml version="1.0"?> <?mso-application progid="Excel.Sheet"?> <Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet" xmlns:html="http: <DocumentProperties xmlns="urn:schemas-microsoft-com:office:office"> <Author>Your_name_here</Author> <LastAuthor>Your_name_here</LastAuthor> <Created>20080625</Created> <Company>ABC Inc</Company> <Version>10.2625</Version> </DocumentProperties> <ExcelWorkbook xmlns="urn:schemas-microsoft-com:office:excel"> <WindowHeight>6135</WindowHeight> <WindowWidth>8445</WindowWidth> <WindowTopX>240</WindowTopX> <WindowTopY>120</WindowTopY> <ProtectStructure>False</ProtectStructure> <ProtectWindows>False</ProtectWindows> </ExcelWorkbook> <Styles> <Style ss:ID="Default" ss:Name="Normal"> <Alignment ss:Vertical="Bottom" /> <Borders /> <Font /> <Interior /> <NumberFormat /> <Protection /> </Style> </Styles> <Worksheet ss:Name="Sample Sheet 1"> <Table ss:ExpandedColumnCount="2" x:FullColumns="1" x:FullRows="1" ID="Table1"> <Column ss:Width="150" /> <Column ss:Width="200" /> <Row> <Cell><Data ss:Type="Number">1</Data></Cell> <Cell><Data ss:Type="Number">2</Data></Cell> </Row> <Row> <Cell><Data ss:Type="Number">3</Data></Cell> <Cell><Data ss:Type="Number">4</Data></Cell> </Row> <Row> <Cell><Data ss:Type="Number">5</Data></Cell> <Cell><Data ss:Type="Number">6</Data></Cell> </Row> <Row> <Cell><Data ss:Type="Number">7</Data></Cell> <Cell><Data ss:Type="Number">8</Data></Cell> </Row> </Table> </Worksheet> <Worksheet ss:Name="Sample Sheet 2"> <Table ss:ExpandedColumnCount="2" x:FullColumns="1" x:FullRows="1" ID="Table2"> <Column ss:Width="150" /> <Column ss:Width="200" /> <Row> <Cell><Data ss:Type="String">A</Data></Cell> <Cell><Data ss:Type="String">B</Data></Cell> </Row> <Row> <Cell><Data ss:Type="String">C</Data></Cell> <Cell><Data ss:Type="String">D</Data></Cell> </Row> <Row> <Cell><Data ss:Type="String">E</Data></Cell> <Cell><Data ss:Type="String">F</Data></Cell> </Row> <Row> <Cell><Data ss:Type="String">G</Data></Cell> <Cell><Data ss:Type="String">H</Data></Cell> </Row> </Table> </Worksheet> </Workbook>
Dim uiTable As HtmlTable = GetUiTable(groupedSumData) Response.Clear() Response.ContentType = "application/vnd.ms-excel" Response.AddHeader("Content-Disposition", String.Format("inline; filename=OSSummery{0:ddmmssf}.xls", DateTime.Now)) Dim writer As New System.IO.StringWriter() Dim htmlWriter As New HtmlTextWriter(writer) uiTable.RenderControl(htmlWriter) Response.Write(writer.ToString) Response.End()
Response.Clear(); Response.AddHeader("Content-Disposition", "attachment; filename=" + fi.Name); Response.AddHeader("Content-Length", fi.Length.ToString()); Response.ContentType = "application/octet-stream"; Response.WriteFile(fi.FullName); Response.End();
Response.ContentType = "application/vnd.ms-excel" Response.Charset = "" Response.AddHeader("content-disposition", "fileattachment;filename=YOURFILENAME.xls") Me.EnableViewState = False Dim sw As System.IO.StringWriter = New System.IO.StringWriter Dim hw As HtmlTextWriter = New HtmlTextWriter(sw) ClearControls(grid) grid.RenderControl(hw) Response.Write(sw.ToString()) Response.End()
Private Sub ClearControls(ByVal control As Control) Dim i As Integer For i = control.Controls.Count - 1 To 0 Step -1 ClearControls(control.Controls(i)) Next i If TypeOf control Is System.Web.UI.WebControls.Image Then control.Parent.Controls.Remove(control) End If If (Not TypeOf control Is TableCell) Then If Not (control.GetType().GetProperty("SelectedItem") Is Nothing) Then Dim literal As New LiteralControl control.Parent.Controls.Add(literal) Try literal.Text = CStr(control.GetType().GetProperty("SelectedItem").GetValue(control, Nothing)) Catch End Try control.Parent.Controls.Remove(control) Else If Not (control.GetType().GetProperty("Text") Is Nothing) Then Dim literal As New LiteralControl control.Parent.Controls.Add(literal) literal.Text = CStr(control.GetType().GetProperty("Text").GetValue(control, Nothing)) control.Parent.Controls.Remove(control) End If End If End If Return End Sub
‘Calls stored proc in SQL Server 2000 and puts data in Excel and ‘formats it Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click Dim cnn As ADODB.Connection cnn = New ADODB.Connection cnn.Open("Provider=SQLOLEDB;data source=xxxxxxx;" & _ "database=xxxxxxxx;Trusted_Connection=yes;") Dim cmd As New ADODB.Command cmd.ActiveConnection = cnn cmd.CommandText = "[sp_TomTepley]" cmd.CommandType = ADODB.CommandTypeEnum.adCmdStoredProc cmd.CommandTimeout = 0 cmd.Parameters.Refresh() Dim rst1 As ADODB.Recordset rst1 = New ADODB.Recordset rst1.Open(cmd) Dim oXL As New Excel.Application Dim oWB As Excel.Workbook Dim oSheet As Excel.Worksheet oXL.Visible = True oWB = oXL.Workbooks.Add oSheet = oWB.ActiveSheet Dim Column As Integer Column = 1 Dim fld As ADODB.Field For Each fld In rst1.Fields oXL.Workbooks(1).Worksheets(1).Cells(1, Column).Value = fld.Name oXL.Workbooks(1).Worksheets(1).cells(1, Column).Interior.ColorIndex = 15 Column = Column + 1 Next fld oXL.Workbooks(1).Worksheets(1).name = "Tom Tepley Report" oSheet.Cells(2, 1).copyfromrecordset(rst1) oXL.Workbooks(1).Worksheets(1).Cells.EntireColumn.AutoFit() oXL.Visible = True oXL.UserControl = True rst1 = Nothing cnn.Close() Beep() End Sub
Public Sub ExportToExcel(ByVal fileName As String, ByVal gv As GridView) HttpContext.Current.Response.Clear() HttpContext.Current.Response.AddHeader("content-disposition", String.Format("attachment; filename={0}", fileName)) HttpContext.Current.Response.ContentType = "application/ms-excel" Dim sw As StringWriter = New StringWriter Dim htw As HtmlTextWriter = New HtmlTextWriter(sw) Dim table As Table = New Table table.GridLines = gv.GridLines If (Not (gv.HeaderRow) Is Nothing) Then PrepareControlForExport(gv.HeaderRow) table.Rows.Add(gv.HeaderRow) End If For Each row As GridViewRow In gv.Rows PrepareControlForExport(row) table.Rows.Add(row) Next If (Not (gv.FooterRow) Is Nothing) Then PrepareControlForExport(gv.FooterRow) table.Rows.Add(gv.FooterRow) End If table.RenderControl(htw) HttpContext.Current.Response.Write(sw.ToString) HttpContext.Current.Response.End() End Sub Private Sub PrepareControlForExport(ByVal control As Control) Dim i As Integer = 0 Do While (i < control.Controls.Count) Dim current As Control = control.Controls(i) If (TypeOf current Is LinkButton) Then control.Controls.Remove(current) control.Controls.AddAt(i, New LiteralControl(CType(current, LinkButton).Text)) ElseIf (TypeOf current Is ImageButton) Then control.Controls.Remove(current) control.Controls.AddAt(i, New LiteralControl(CType(current, ImageButton).AlternateText)) ElseIf (TypeOf current Is HyperLink) Then control.Controls.Remove(current) control.Controls.AddAt(i, New LiteralControl(CType(current, HyperLink).Text)) ElseIf (TypeOf current Is DropDownList) Then control.Controls.Remove(current) control.Controls.AddAt(i, New LiteralControl(CType(current, DropDownList).SelectedItem.Text)) ElseIf (TypeOf current Is CheckBox) Then control.Controls.Remove(current) control.Controls.AddAt(i, New LiteralControl(CType(current, CheckBox).Checked)) End If If current.HasControls Then PrepareControlForExport(current) End If i = i + 1 Loop End Sub
Workbook workbook = new Workbook(); workbook.LoadFromFile(@"Data\EditSheetSample.xls"); Worksheet sheet = workbook.Worksheets[0]; sheet.Range["B1"].Text = "Hello,World!"; sheet.Range["B2"].NumberValue = 1234.5678; sheet.Range["B3"].DateTimeValue = System.DateTime.Now; sheet.Range["B4"].Formula = "=1111*11111"; workbook.SaveToFile("Sample.xls");
public static void ExportToExcel(DataTable data, HttpResponse response, string fileName) { response.Charset = "utf-8"; response.ContentEncoding = System.Text.Encoding.GetEncoding("windows-1250"); response.Cache.SetCacheability(HttpCacheability.NoCache); response.ContentType = "text/csv"; response.AddHeader("Content-Disposition", "attachment; filename=" + fileName); for (int i = 0; i < data.Columns.Count; i++) { response.Write(data.Columns[i].ColumnName); response.Write(i == data.Columns.Count - 1 ? "\n" : ","); } foreach (DataRow row in data.Rows) { for (int i = 0; i < data.Columns.Count; i++) { response.Write(String.Format("\"{0}\"", row[i].ToString())); response.Write(i == data.Columns.Count - 1 ? "\n" : ","); } } response.End(); }
public void ExportFileFromSPData(string filename, DataTable dt) { HttpResponse response = HttpContext.Current.Response; response.Clear(); response.Buffer = true; response.Charset = ""; response.ContentType = "application/vnd.ms-excel"; response.AddHeader("Content-Disposition", "attachment;filename=\"" + filename + "\""); response.ContentEncoding = System.Text.Encoding.UTF8; response.BinaryWrite(System.Text.Encoding.UTF8.GetPreamble()); string style = @"<style> .text { mso-number-format:\@; } </style>"; response.Write(style); using (StringWriter sw = new StringWriter()) { using (HtmlTextWriter htw = new HtmlTextWriter(sw)) { GridView dg = new GridView(); dg.DataSource = dt; dg.DataBind(); foreach (GridViewRow datarow in dg.Rows) { datarow.Cells[0].Attributes.Add("class", "text"); } dg.RenderControl(htw); response.Write(sw.ToString()); response.End(); } } }
Dim result = If(a > 5, "World", "Hello") Dim foo = If(result, "Alternative")
Module Module1 Sub Main() Dim test As Boolean = False Dim result As String = IIf(test, Foo(), Bar()) End Sub Public Function Foo() As String Console.WriteLine("Foo!") Return "Foo" End Function Public Function Bar() As String Console.WriteLine("Bar!") Return "Bar" End Function End Module
string results = IIf(Not oraData.IsDBNull(ndx), oraData.GetString(ndx), string.Empty)
Dim Keywords = If(String.IsNullOrEmpty(SelectedKeywords), "N/A", SelectedKeywords)
Dim Keywords = IIf(String.IsNullOrEmpty(SelectedKeywords), "N/A", SelectedKeywords)
Sub main() counter = 0 bln = True s = iif(bln, f1, f2) End Sub Function f1 As String counter = counter + 1 Return "YES" End Function Function f2 As String counter = counter + 1 Return "NO" End Function
<%=Html.ActionLink("Home", "Index", "Home", new {@class = "tab" })%>
<%=Html.ActionLink("Home", "Index", MyRouteValObj, new with {.class = "tab" })%>
@Html.ActionLink("Delete", "DeleteList", "List", new object { }, new { @class = "delete"})
@Html.ActionLink( "Front Page", "Index", "Home", null, new { @class = "MenuButtons" })
@Html.ActionLink("Delete", "DeleteList", "List", new { ID = item.ID, ListID = item.id }, new {@class= "delete"})
@Html.ActionLink("LinkText", "ActionName", new { id = item.id }, new { @class = "btn btn-success" })
<%=Html.ActionLink("Contact Us", "ContactUs", "Home", Nothing, New With {.class = "link"})%>
<a class="link" href="www.domain.com/Home/ContactUs">Contact Us</a>
<%=Html.ActionLink("Home", "Index", "Home", New With {.class = "tab"}, Nothing)%>
Dim a As Integer = DirectCast("1", Integer) Dim b As Integer = CType("1", Integer)
Sub Main() Dim newint As Integer = DirectCast(3345.34, Integer) Console.WriteLine(newint) Console.ReadLine() End Sub
Sub Main() Dim newint As Integer = CType(3345.34, Integer) Console.WriteLine(newint) Console.ReadLine() End Sub
Declaration: The code set in bold are all variable declarations that associate a variable name with an object type. Instantiation: The new keyword is a Java operator that creates the object. Initialization: The new operator is followed by a call to a constructor, which initializes the new object."
class P { string name = "Ralf"; } WriteLine(new P().name); WriteLine((FormatterServices.GetUninitializedObject(typeof(P)) as P).name);
static void Main() { object a = null; int b = 3; if (a == null | a.ToString() == "sdffd") { Console.WriteLine("dddd"); } Console.WriteLine(b | b); Console.Read(); }
.method private hidebysig static void Main() cil managed { .entrypoint .maxstack 3 .locals init ([0] object a, [1] int32 b, [2] bool CS$4$0000) IL_0000: nop IL_0001: ldnull IL_0002: stloc.0 IL_0003: ldc.i4.3 IL_0004: stloc.1 IL_0005: ldloc.0 IL_0006: ldnull IL_0007: ceq IL_0009: ldloc.0 IL_000a: callvirt instance string [mscorlib]System.Object::ToString() IL_000f: ldstr "sdffd" IL_0014: call bool [mscorlib]System.String::op_Equality(string, string) IL_0019: or IL_001a: ldc.i4.0 IL_001b: ceq IL_001d: stloc.2 IL_001e: ldloc.2 IL_001f: brtrue.s IL_002e IL_0021: nop IL_0022: ldstr "dddd" IL_0027: call void [mscorlib]System.Console::WriteLine(string) IL_002c: nop IL_002d: nop IL_002e: ldloc.1 IL_002f: ldloc.1 IL_0030: or IL_0031: call void [mscorlib]System.Console::WriteLine(int32) IL_0036: nop IL_0037: call int32 [mscorlib]System.Console::Read() IL_003c: pop IL_003d: ret }
.method private hidebysig static void Main() cil managed { .entrypoint .maxstack 2 .locals init ([0] object a, [1] int32 b, [2] bool CS$4$0000) IL_0000: nop IL_0001: ldnull IL_0002: stloc.0 IL_0003: ldc.i4.3 IL_0004: stloc.1 IL_0005: ldloc.0 IL_0006: brfalse.s IL_001d IL_0008: ldloc.0 IL_0009: callvirt instance string [mscorlib]System.Object::ToString() IL_000e: ldstr "sdffd" IL_0013: call bool [mscorlib]System.String::op_Equality(string, string) IL_0018: ldc.i4.0 IL_0019: ceq IL_001b: br.s IL_001e IL_001d: ldc.i4.0 IL_001e: stloc.2 IL_001f: ldloc.2 IL_0020: brtrue.s IL_002f IL_0022: nop IL_0023: ldstr "dddd" IL_0028: call void [mscorlib]System.Console::WriteLine(string) IL_002d: nop IL_002e: nop IL_002f: ldloc.1 IL_0030: ldloc.1 IL_0031: or IL_0032: call void [mscorlib]System.Console::WriteLine(int32) IL_0037: nop IL_0038: call int32 [mscorlib]System.Console::Read() IL_003d: pop IL_003e: ret }
If TextBox1.Text > 2 OrElse TextBox2.Text > 3 Then MsgBox("True") End If
If TextBox1.Text > 2 Or TextBox2.Text > 3 Then MsgBox("True") End If
if temp is dbnull.value OrElse temp = 0 then if 3 is dbnull.value OrElse 3 = 0 then if false OrElse 3=0 then if false OrElse false then if false then
cmdText = String.Format("SELECT foo FROM bar WHERE baz =
With command .Parameters.Count = 1 .Parameters.Item(0).ParameterName = "@baz" .Parameters.Item(0).Value = fuz End With
Public Function GetBarFooByBaz(ByVal Baz As String) As String Dim sql As String = "SELECT foo FROM bar WHERE baz= @Baz" Using cn As New SqlConnection("Your connection string here"), _ cmd As New SqlCommand(sql, cn) cmd.Parameters.Add("@Baz", SqlDbType.VarChar, 50).Value = Baz Return cmd.ExecuteScalar().ToString() End Using End Function
Dim stringValue As String = "42" For i As Integer = 1 To 10 - stringValue.Length stringValue = stringValue & " " & CStr(i) Console.WriteLine(stringValue) Next
For Each I As Item In Items If I = x Then End If Next
For Each I As Item In Items If I = x Then Else End If Next
For Each I As Item In Items If I = x Then Continue For Next
For Each I As Item In Items If I = x Then Continue For End If Next
For Each I As Item In Items If I = x Then GOTO Label1 End If Label1: Next
For Each I As Item In Items If I = x Then Resume Next End If Next
Sub FillCategories(ByVal Obj As Object) Dim cmd As New SqlCommand("sp_Resources_Categories", Conn) cmd.CommandType = CommandType.StoredProcedure Obj.DataSource = cmd.ExecuteReader If Obj Is System.Web.UI.WebControls.DropDownList Then End If Obj.DataBind() End Sub
Sub FillCategories(ByVal Obj As Object) Dim cmd As New SqlCommand("sp_Resources_Categories", Conn) cmd.CommandType = CommandType.StoredProcedure Obj.DataSource = cmd.ExecuteReader If Obj.GetType() Is GetType(System.Web.UI.WebControls.DropDownList) Then End If Obj.DataBind() End Sub
If TypeOf Obj Is System.Web.UI.WebControls.DropDownList Then End If
NotInheritable Class MyStaticClass Private Sub New() End Sub Public Shared Function MyMethod() As String End Sub End Class
Sub Main() Dim y As Integer Test(y) End Sub Sub Test(ByRef x As Integer) x = 42 End Sub
void TestFunc(int x, ref int y, out int z) { x++; y++; z = 5; }
Sub TestFunc(ByVal x As Integer, ByRef y As Integer, ByRef z As Integer) x += 1 y += 1 z = 5 End Sub
Dim m_arr_values() as Integer fnRetArray(m_arr_values)
Dim m_arr_values() as Integer = Nothing fnRetArray(m_arr_values)
Sub fnCreatePalette(ByRef arr_in_pal() As color, ByRef arr_out_pal() as uinteger) ... End Sub
Using m As New System.Net.Mail.MailMessage() m.Sender = New System.Net.Mail.MailAddress("test@test.com", "Name here") m.From = New System.Net.Mail.MailAddress("test@test.com", "Name here") m.Subject = "Test" m.Body = "Test" Dim client As New System.Net.Mail.SmtpClient("mymailserver.com") client.Send(m) End Using
Dim x As String = TryCast(y, String) If x Is Nothing Then ...
Dim myArray() as String = { "a", null, "c" } Console.WriteLine(String.Join(", ", myArray));
("a", "b", "c") --> "a, b, c" ("a", null, "c") --> "a, c"
Dim a As String = "", b As String = "b", c As String = "", d As String = "d", e As String = "" Dim lala As String = String.Join(" / ", String.Join(vbBack, New String() {a, b, c, d, e}).Split(New Char() {ControlChars.Back}, System.StringSplitOptions.RemoveEmptyEntries)) System.Console.WriteLine(lala)
string a = "", b = "b", c = "", d = "d", e = ""; string lala = string.Join(" / ", string.Join("\u0008", new string[] { a, b, c, d, e } ).Split(new char[] { ); System.Console.WriteLine(lala);
SELECT concat_ws( , NULLIF(searchTerm1, , NULLIF(searchTerm2, , NULLIF(searchTerm3, , NULLIF(searchTerm4, ) AS RPT_SearchTerms;
DECLARE @in_SearchTerm1 nvarchar(100) DECLARE @in_SearchTerm2 nvarchar(100) DECLARE @in_SearchTerm3 nvarchar(100) DECLARE @in_SearchTerm4 nvarchar(100) SET @in_SearchTerm1 = N SET @in_SearchTerm2 = N SET @in_SearchTerm3 = N SET @in_SearchTerm4 = N SELECT COALESCE ( STUFF ( ( SELECT FROM ( SELECT NULLIF(@in_SearchTerm1, N UNION ALL SELECT NULLIF(@in_SearchTerm2, N UNION ALL SELECT NULLIF(@in_SearchTerm3, N UNION ALL SELECT NULLIF(@in_SearchTerm4, N ) AS tempT WHERE RPT_SearchTerm IS NOT NULL ORDER BY RPT_Sort FOR XML PATH(N ).value( ,1 ,3 ,N ) ,N ) AS RPT_SearchTerms
var finalString = String.Join(",", ExampleArrayOfObjects.Where(x => !String.IsNullOrEmpty(x.TestParameter)).Select(x => x.TestParameter));
Dim d As DateTime = Nothing Dim boolNotSet As Boolean = d Is Nothing
Dim d As DateTime? = Nothing Dim boolNotSet As Boolean = d.HasValue
' ' Dim d1 As DateTime = Nothing Console.WriteLine(String.Format("d1 = [{0}]\n", d1)) ' ' ' ' Dim d2? As DateTime = Nothing Console.WriteLine(String.Format("d2 = [{0}][{1}]\n", d2, (d2 Is Nothing))) Dim d3 As DateTime? = Nothing Console.WriteLine(String.Format("d3 = [{0}][{1}]\n", d3, (d3 Is Nothing))) Dim d4 As Nullable(Of DateTime) = Nothing Console.WriteLine(String.Format("d4 = [{0}][{1}]\n", d4, (d4 Is Nothing)))
Public Class DateTimeNullable Private _value As DateTime Public Property Value() As DateTime Get Return _value End Get Set(ByVal value As DateTime) _value = value End Set End Property Public Sub New() Value = DateTime.MinValue End Sub Public Sub New(ByVal dt As DateTime) Value = dt End Sub Public Overrides Function ToString() As String Return Value.ToString() End Function
Dim dtn As DateTimeNullable = Nothing Dim strTest1 As String = "Falied" Dim strTest2 As String = "Failed" If dtn Is Nothing Then strTest1 = "Succeeded" dtn = New DateTimeNullable(DateTime.Now) If dtn Is Nothing Then strTest2 = "Succeeded" Console.WriteLine("test1: " & strTest1) Console.WriteLine("test2: " & strTest2) Console.WriteLine(".ToString() = " & dtn.ToString()) Console.WriteLine(".Value.ToString() = " & dtn.Value.ToString()) Console.ReadKey()
Private _myDate As Object Private Property MyDate As Date Get If IsNothing(_myDate) Then Return Nothing Return CDate(_myDate) End Get Set(value As Date) If date = Nothing Then _myDate = Nothing Return End If _myDate = value End Set End Property
MyDate = Nothing Dim theDate As Date = MyDate If theDate = Nothing Then End If
Using js = daoFactory.CreateJoinScope() Using tran = New Transactions.TransactionScope() tran.Complete() End Using End Using
Public Class JoinScope Implements IJoinScope Implements IDisposable End Class
void someFunction() { using (var db = new DBContext(GetConnectionString())) { using (var transaction = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted })) { someOtherFunction(); } } } void someOtherFunction() { using (var db = new DBContext(GetConnectionString())) { db.Whatever } }
db.Database.ExecuteSqlCommand("exec [SomeDB].[dbo].[SomeStoredProcedure]");
var connectionString = db.Database.Connection.ConnectionString; var connection = new System.Data.SqlClient.SqlConnection(connectionString); var cmd = connection.CreateCommand(); cmd.CommandText = "exec [SomeDB].[dbo].[SomeStoredProcedure]"; connection.Open(); var result = cmd.ExecuteNonQuery();
Sub WorkerMethod() Trace.WriteLine("Work progress") Trace.WriteLine("Another progress update") End Sub Sub Main() WorkerMethod() End Sub
Public Class ConsoleTrace Inherits Diagnostics.TraceListener Public Overloads Overrides Sub Write(ByVal message As String) Console.Write(message) End Sub Public Overloads Overrides Sub WriteLine(ByVal message As String) Console.WriteLine(message) End Sub End Class
<?xml version="1.0"?> <configuration> <system.diagnostics> <trace autoflush="true"> <listeners> <add name="logListener" type="System.Diagnostics.TextWriterTraceListener" initializeData="cat.log" /> <add name="consoleListener" type="System.Diagnostics.ConsoleTraceListener"/> </listeners> </trace> </system.diagnostics> </configuration>
ConsoleTraceListener listener = new ConsoleTraceListener(); Trace.Listeners.Add(listener); Trace.WriteLine("Howdy"); Trace.Listeners.Remove(listener); Trace.Close();
Stream outResultsFile = File.Create ("output.txt"); var textListener = new TextWriterTraceListener (outResultsFile); Trace.Listeners.Add (textListener);
Try connection.Open() Dim sqlCmd As New SqlCommand("do some SQL", connection) Dim sqlDa As New SqlDataAdapter(sqlCmd) sqlDa.Fill(dt) Catch ex As SQLException Finally connection.Close() End Try
Try Try Catch innerEx as Exception End Try Catch outerEx as Exception End Try
Try Catch ex as IOException Catch ex as Exception Throw End Try
Try Dim Message = String.Format("...", ) Try Catch ex As Exception End Try Try Catch ex As Exception End Try Catch ex As Exception End Try
dim myDataTable as DataTable dim tmpStr as String dim sID as Integer = 1 ... myDataTable = myTableAdapter.GetData() ... For Each myItem As DataRow In myDataTable.Rows tmpStr = nameItem("lastname") + " " + nameItem("initials") If myItem("sID")=sID Then End If Next
If NOT IsDbNull(myItem("sID")) AndAlso myItem("sID") = sId Then ELSE End If
Public Shared Function NotNull(Of T)(ByVal Value As T, ByVal DefaultValue As T) As T If Value Is Nothing OrElse IsDBNull(Value) Then Return DefaultValue Else Return Value End If End Function
Private Shared Function GetNullable(Of T)(dataobj As Object) As T If Convert.IsDBNull(dataobj) Then Return Nothing Else Return CType(dataobj, T) End If End Function
While reader.Read() colDropdownListNames.Add(New DDLItem( _ CType(reader("rid"), Integer), _ CType(reader("Item_Status"), String), _ CType(reader("Text_Show"), String), _ CType( IIf(IsDBNull(reader("Text_Use")), "", reader("Text_Use")) , String), _ CType(reader("Text_SystemOnly"), String), _ CType(reader("Parent_rid"), Integer))) End While
If IsDbNull(myItem("sID")) = False AndAlso myItem("sID")==sID Then End If
tmpStr = nameItem("lastname") + " " + nameItem("initials")
tmpStr = myItem("lastname").toString + " " + myItem("intials").toString
VB.Net ======== Dim da As New SqlDataAdapter Dim dt As New DataTable Call conecDB() da.SelectCommand = New SqlCommand("select max(RefNo) from BaseData", connDB) da.Fill(dt) If dt.Rows.Count > 0 And Convert.ToString(dt.Rows(0).Item(0)) = "" Then MsgBox("datbase is null") ElseIf dt.Rows.Count > 0 And Convert.ToString(dt.Rows(0).Item(0)) <> "" Then MsgBox("datbase have value") End If
Me.txtProvNum.Text = IIf(Convert.IsDBNull(TRIM(myReader("Prov_Num"))), "", TRIM(myReader("Prov_Num")))
Me.txtProvNum.Text = IIf(Convert.IsDBNull(myReader("Prov_Num")), "", myReader("Prov_Num"))
Dim Result = IF(expression,<true return>,<false return>)
i = 1 If i = 1 Then x = 3 : y = 3 Else x = 7 : y = 7
If (condition) Then : (do this) ElseIf (condition2) Then : (do this) Else : (do this) End If
If (condition) Then : (do this) : ElseIf (condition2) Then : (do this) : Else : (do this) : End If
If (condition) Then : (do this) : (and this) : End If
If <C1> Then <R1> Else If <C2> Then <R2> If <C3> Then <R3> If <C4> Then <R4> Else...
If (X1= 1) Then : Val1= "Yes" : Else : Val1= "Not" : End If
With Me.Elements .PropertyA = True .PropertyB = "Inactive" End With
Me.Elements.PropertyA = True Me.Elements.PropertyB = "Inactive"
UserHandler.GetUser.First.User.FirstName="Stefan" UserHandler.GetUser.First.User.LastName="Karlsson" UserHandler.GetUser.First.User.Age="39" UserHandler.GetUser.First.User.Sex="Male" UserHandler.GetUser.First.User.Occupation="Programmer" UserHandler.GetUser.First.User.UserID="0" ....and so on
With UserHandler.GetUser.First.User .FirstName="Stefan" .LastName="Karlsson" .Age="39" .Sex="Male" .Occupation="Programmer" .UserID="0" end with
dim myuser as user =UserHandler.GetUser.First.User myuser.FirstName="Stefan" myuser.LastName="Karlsson" myuser.Age="39" myuser.Sex="Male" myuser.Occupation="Programmer" myuser.UserID="0"
Imports System.Text Public Class Class1 Public Sub Foo() Dim sb As New StringBuilder With sb .Append("foo") .Append("bar") .Append("zap") End With Dim sb2 As New StringBuilder sb2.Append("foo") sb2.Append("bar") sb2.Append("zap") End Sub End Class
.method public instance void Foo() cil managed { .maxstack 2 .locals init ([0] class [mscorlib]System.Text.StringBuilder sb, [1] class [mscorlib]System.Text.StringBuilder sb2, [2] class [mscorlib]System.Text.StringBuilder VB$t_ref$L0) IL_0000: nop IL_0001: newobj instance void [mscorlib]System.Text.StringBuilder::.ctor() IL_0006: stloc.0 IL_0007: ldloc.0 IL_0008: stloc.2 IL_0009: ldloc.2 IL_000a: ldstr "foo" IL_000f: callvirt instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string) IL_0014: pop IL_0015: ldloc.2 IL_0016: ldstr "bar" IL_001b: callvirt instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string) IL_0020: pop IL_0021: ldloc.2 IL_0022: ldstr "zap" IL_0027: callvirt instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string) IL_002c: pop IL_002d: ldnull IL_002e: stloc.2 IL_002f: newobj instance void [mscorlib]System.Text.StringBuilder::.ctor() IL_0034: stloc.1 IL_0035: ldloc.1 IL_0036: ldstr "foo" IL_003b: callvirt instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string) IL_0040: pop IL_0041: ldloc.1 IL_0042: ldstr "bar" IL_0047: callvirt instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string) IL_004c: pop IL_004d: ldloc.1 IL_004e: ldstr "zap" IL_0053: callvirt instance class [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(string) IL_0058: pop IL_0059: nop IL_005a: ret }
Dim AA As AAClass = GetNextAAObject() With AA AA = GetNextAAObject() .SomeProperty = SomeValue End With
With myObject .Property1 = arg1 .Property2 = arg2 ...
var x = new Whatever { PropertyA=true, PropertyB="Inactive" };
UserHandler.GetUser.First.User.FirstName="Stefan" UserHandler.GetUser.First.User.LastName="Karlsson" UserHandler.GetUser.First.User.Age="39" UserHandler.GetUser.First.User.Sex="Male" UserHandler.GetUser.First.User.Occupation="Programmer" UserHandler.GetUser.First.User.UserID="0"
Public MustInherit Class A Public Function fX() As Integer Return 0 End Function End Class Public Class B Inherits A Public Shadows Function fX() As Integer Return 1 End Function End Class
Protected Overrides Sub OnPaint(ByVal e As System.Windows.Forms.PaintEventArgs) MyBase.OnPaint(e) End Sub
Public Class A Public Function Add(ByVal x As Integer, ByVal y As Integer) As Integer Return x + y End Function Public Function Add(ByVal x As Integer, ByVal y As Integer, ByVal z As Integer) As Integer Return x + y + z End Function End Class Public Class B Inherits A Public Shadows Function Add(ByVal x As Integer, ByVal y As Integer) As Integer Return x - y End Function End Class
Sub Main() Dim o As New ChildClass Console.WriteLine(o.GetValOverride()) Console.WriteLine(o.GetValShadow()) Console.WriteLine(CType(o, ParentClass).GetValOverride()) Console.WriteLine(CType(o, ParentClass).GetValShadow()) Console.ReadLine() End Sub Class ParentClass Public Overridable Function GetValOverride() As String Return "1" End Function Public Function GetValShadow() As String Return "1" End Function End Class Class ChildClass Inherits ParentClass Public Overrides Function GetValOverride() As String Return "2" End Function Public Shadows Function GetValShadow() As String Return "2" End Function End Class
Public Class Base Protected Sub Configure() .... End Sub End Class Public Class Inherited Inherits Base Public Shadows Sub Configure() MyBase.Configure() End Sub End Class
Public Shadows Function Focus() As Boolean txtSearch.Focus() Return MyBase.Focus() End Function
Public Class GenericTable Protected Friend Overridable Property Contents As System.Collections.Generic.List(Of GenericItem) ... do stuff ... End Class
Public Class WidgetTable Inherits GenericTable Protected Friend Shadows Property Contents As System.Collections.Generic.List(Of Widget) ... stuff is inhereted ... End Class
Sub Main() Dim X As New Derived Dim Y As Base = New Derived Console.WriteLine("X:" & X.Test()) Console.WriteLine("Y:" & Y.Test()) Console.WriteLine("X:" & CType(X, Base).Test) Console.WriteLine("X:" & X.Func()) Console.WriteLine("Y:" & Y.Func()) Console.WriteLine("X:" & CType(X, Base).Func) Console.ReadKey() End Sub Public Class Base Public Overridable Function Func() As String Return "Standard" End Function Function Test() As String Return Me.Func() End Function End Class Public Class Derived Inherits Base Public $$$ Function Func() As String Return "Passed By Class1" & " - " & MyBase.Func End Function End Class
Module Module1 Sub Main() Dim object1 As Parent = New Child() Console.WriteLine("object1, reference type Parent and object type Child") object1.TryMe1() object1.TryMe2() object1.TryMe3() Console.WriteLine("") Console.WriteLine("") Console.WriteLine("object2, reference type Child and object type Child") Dim object2 As Child = New Child() object2.TryMe1() object2.TryMe2() object2.TryMe3() Console.ReadLine() End Sub End Module Public Class Parent Public Sub TryMe1() Console.WriteLine("Testing Shadow: Parent.WriteMe1") End Sub Public Overridable Sub TryMe2() Console.WriteLine("Testing override: Parent.WriteMe2") End Sub Public Sub TryMe3() Console.WriteLine("Testing Shadow without explicitly writing shadow modifier: Parent.WriteMe3") End Sub End Class Public Class Child Inherits Parent Public Shadows Sub TryMe1() Console.WriteLine("Testing Shadow: Child.WriteMe1") End Sub Public Overrides Sub TryMe2() Console.WriteLine("Testing override: Child.WriteMe2") End Sub Public Sub TryMe3() Console.WriteLine("Testing Shadow without explicitly writing shadow modifier: Child.WriteMe3") End Sub End Class
<System.Runtime.CompilerServices.Extension()> _ Public Function Left(ByVal str As String, ByVal length As Integer) As String Return str.Substring(0, Math.Min(str.Length, length)) End Function
Public Class Status Implements IStatus Private _statusChangeDate As DateTime Public Property statusChangeDate As DateTime Implements IStatus.statusChangeDate Get Return _statusChangeDate End Get Set(value As Date) _statusChangeDate = value End Set End Property Private _statusId As Integer Public Property statusId As Integer Implements IStatus.statusId Get Return _statusId End Get Set(value As Integer) _statusId = value End Set End Property Private _statusName As String Public Property statusName As String Implements IStatus.statusName Get Return _statusName End Get Set(value As String) _statusName = value End Set End Property Public Iterator Function GetEnumerator() As IEnumerable(Of Object) Implements IStatus.GetEnumerator Yield Convert.ToDateTime(statusChangeDate) Yield Convert.ToInt32(statusId) Yield statusName.ToString() End Function End Class Public Interface IStatus Property statusChangeDate As DateTime Property statusId As Integer Property statusName As String Function GetEnumerator() As System.Collections.Generic.IEnumerable(Of Object) End Interface
For Each itm As SLA.IStatus In outputlist For Each it As Object In itm.GetEnumerator() Debug.Write(it & " ") Next Debug.WriteLine("") Next
Public Shared Function setofNumbers() As Integer() Dim counter As Integer = 0 Dim results As New List(Of Integer) Dim result As Integer = 1 While counter < 5 result = result * 2 results.Add(result) counter += 1 End While Return results.ToArray() End Function Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load For Each i As Integer In setofNumbers() MessageBox.Show(i) Next End Sub
private void Form1_Load(object sender, EventArgs e) { foreach (int i in setofNumbers()) { MessageBox.Show(i.ToString()); } } public static IEnumerable<int> setofNumbers() { int counter=0; int result=1; while (counter < 5) { result = result * 2; counter += 1; yield return result; } }
@Code Layout = "~/Views/Shared/_Layout.vbhtml" End COde
<configSections> <sectionGroup name="system.web.webPages.razor" type="System.Web.WebPages.Razor.Configuration.RazorWebSectionGroup, System.Web.WebPages.Razor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"> <section name="host" type="System.Web.WebPages.Razor.Configuration.HostSection, System.Web.WebPages.Razor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" /> <section name="pages" type="System.Web.WebPages.Razor.Configuration.RazorPagesSection, System.Web.WebPages.Razor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" /> </sectionGroup> </configSections> <system.web.webPages.razor> <host factoryType="System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" /> <pages pageBaseType="System.Web.Mvc.WebViewPage"> <namespaces> <add namespace="System.Web.Mvc" /> <add namespace="System.Web.Mvc.Ajax" /> <add namespace="System.Web.Mvc.Html" /> <add namespace="System.Web.Routing" /> </namespaces> </pages> </system.web.webPages.razor>
<ItemGroup> <Content Include="web.config"> <SubType>Designer</SubType> </Content> <Content Include="web.debug.local.config"> <DependentUpon>web.config</DependentUpon> </Content> <Content Include="web.debug.cloudstaging.config"> <DependentUpon>web.config</DependentUpon> </Content> <Content Include="web.release.cloudprod.config"> <DependentUpon>web.config</DependentUpon> </Content> </ItemGroup>
Private _name As String Public Property Name() As String Get Return _name End Get Private Set(ByVal value As String) _name = value End Set End Property
Public Property Name() As String Get Return _name End Get Private Set(ByVal value As String) _name = value End Set End Property
Private _name As String Public Property Name() As String Get Return _name End Get Private Set _name = value End Set End Property
Private _Name As String Public ReadOnly Property Name() As String Get Return _Name End Get End Property
Dim val = DirectCast([Enum].Parse(GetType(Gender), "Male"), Gender)
dim MyGender as string = "Male" dim Value as integer Value = DirectCast([Enum].Parse(GetType(Gender), MyGender), Integer)
value = cInt([enum].Parse(GetType(Gender), MyGender))
[Enum].Parse(Gender, DirectCast(MyGender, String), True)
keepLoopAlive = True Do While keepLoopAlive (your code that loops here) DoEvents Loop
<Obsolete("This method is deprecated, use XXXX instead.")> _
<Obsolete("This method is deprecated, use XXXX instead.")>
Dim myVar? As Integer = Nothing Console.WriteLine(If(myVar, 7))
Dim b As Boolean? Console.WriteLine("{0}.", If(b, "this is expected when b is nothing")) b = False Console.WriteLine("{0}.", If(b, "this is unexpected when b is false")) b = True Console.WriteLine("{0}.", If(b, "this is unexpected when b is true"))
"abc" + "def" = "abcdef" "abc" & "def" = "abcdef" "111" + "222" = "111222" "111" & "222" = "111222" "111" & 222 = "111222" "111" + 222 = 333 "abc" + 222 = conversion error
Module Module1 Sub Main() Dim s1 As String = "s1" Dim s2 As String = "s2" s2 += s1 s1 &= s2 End Sub End Module
.method public static void Main() cil managed { .entrypoint .custom instance void [mscorlib]System.STAThreadAttribute::.ctor() = ( 01 00 00 00 ) .maxstack 2 .locals init ([0] string s1, [1] string s2) IL_0000: nop IL_0001: ldstr "s1" IL_0006: stloc.0 IL_0007: ldstr "s2" IL_000c: stloc.1 IL_000d: ldloc.1 IL_000e: ldloc.0 IL_000f: call string [mscorlib]System.String::Concat(string, string) IL_0014: stloc.1 IL_0015: ldloc.0 IL_0016: ldloc.1 IL_0017: call string [mscorlib]System.String::Concat(string, string) IL_001c: stloc.0 IL_001d: nop IL_001e: ret }
Dim string1 As String = "A" + "B" Dim string2 As String = "A" & "B" If string1.Equals(string2) And string2.Equals(string1) Then Debugger.Break() End If
str = "the little red hen" count = countTheCharacters(str,"e") count = countTheCharacters(str,"t")
Public Function CountCharacter(ByVal value As String, ByVal ch As Char) As Integer Dim cnt As Integer = 0 For Each c As Char In value If c = ch Then cnt += 1 End If Next Return cnt End Function
Public Function CountCharacter(ByVal value As String, ByVal ch As Char) As Integer Return value.Count(Function(c As Char) c = ch) End Function
text = "the little red hen" count = text.Split("e").Length -1 count = text.Split("t").Length -1
Dim occurCount As Integer = Len(testStr) - Len(testStr.Replace(testCharStr, ""))
Function InstanceCount(ByVal StringToSearch As String, ByVal StringToFind As String) As Long If Len(StringToFind) Then InstanceCount = UBound(Split(StringToSearch, StringToFind)) End If End Function
Dim j As Integer = MyString.Count(Function(c As Char) c = vbLf)
Dim a As String = "this is test" Dim pattern As String = "t" Dim ex As New System.Text.RegularExpressions.Regex(pattern) Dim m As System.Text.RegularExpressions.MatchCollection m = ex.Matches(a) MsgBox(m.Count.ToString())
Public Class VOWELS Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click Dim str1, s, c As String Dim i, l As Integer str1 = TextBox1.Text l = Len(str1) c = 0 i = 0 Dim intloopIndex As Integer For intloopIndex = 1 To l s = Mid(str1, intloopIndex, 1) If (s = "A" Or s = "a" Or s = "E" Or s = "e" Or s = "I" Or s = "i" Or s = "O" Or s = "o" Or s = "U" Or s = "u") Then c = c + 1 End If Next MsgBox("No of Vowels: " + c.ToString) End Sub End Class
Public Shared Function StrCounter(str As String, CountStr As String) As Integer Dim Ctr As Integer = 0 Dim Ptr As Integer = 1 While InStr(Ptr, str, CountStr) > 0 Ptr = InStr(Ptr, str, CountStr) + Len(CountStr) Ctr += 1 End While Return Ctr End Function
Public Function CountCharacter(ByVal value As String, ByVal ch As Char) As Integer Return (New System.Text.RegularExpressions.Regex(ch)).Matches(value).Count End Function
Public Function CountCharacter(ByVal value As String, ByVal ch As Char) As Integer Return len(value) - len(replace(value, ch, "")) End Function
Public Function CountOccurrences(ByVal StToSerach As String, ByVal StToLookFor As String) As Int32 Dim iPos = -1 Dim iFound = 0 Do iPos = StToSerach.IndexOf(StToLookFor, iPos + 1) If iPos <> -1 Then iFound += 1 End If<br/> Loop Until iPos = -1 Return iFound End Function
Dim iCountTimes As Integer = CountOccurrences("Can I call you now?", "a")
<Extension()> _ Public Function CountOccurrences(ByVal StToSerach As String, ByVal StToLookFor As String) As Int32 Dim iPos = -1 Dim iFound = 0 Do iPos = StToSerach.IndexOf(StToLookFor, iPos + 1) If iPos <> -1 Then iFound += 1 End If Loop Until iPos = -1 Return iFound End Function
Dim iCountTimes2 As Integer = "Can I call you now?".CountOccurrences("a")
eCount = str.Length - Replace(str, "e", "").Length tCount = str.Length - Replace(str, "t", "").Length
Dim tmp() As String tmp = Split(Expression, Delimiter) Dim count As Integer = tmp.Length - 1
String.Replace("e", "").Count String.Replace("t", "").Count
String.ToString.Count - String.ToString.Replace("e", "").Count String.ToString.Count - String.ToString.Replace("t", "").Count
Function inStC(myInput As String, Search As String, Optional myCompareMethod As Long = CompareMethod.Text) As Long If InStr(1, myInput, Search, myCompareMethod) = 0 Then Return 0 Return UBound(Split(myInput, Search,, myCompareMethod)) End Function
str="the little red hen" count=inStC(str,"e") count=inStC(str,"t")
Function inStB(myInput As String, Search As String, Optional Start As Long = 1, Optional myCompareMethod As Long = CompareMethod.Text) As Boolean If InStr(Start, myInput, Search, myCompareMethod) > 0 Then Return True Return False End Function
string a = "this is test"; string pattern = "t"; System.Text.RegularExpressions.Regex ex = new System.Text.RegularExpressions.Regex(pattern); System.Text.RegularExpressions.MatchCollection m = ex.Matches(a); MessageBox.Show(m.Count.ToString());
public static int countTheCharacters(string str, char charToCount){ return str.ToCharArray().Count(c => c == charToCount); }
Function fNbrStrInStr(strin As Variant, strToCount As String) fNbrStrInStr = UBound(Split(strin, strToCount)) - LBound(Split(strin, strToCount)) End Function
public static int CountOccurences(this string s, char c) { return s.Count(t => t == c); }
Dim test As String = txtName.Text Dim intdots As Integer = 0 For i = 1 To test.Length Dim inta As Integer = 0 + 1 Dim stra As String = test.Substring(inta) If stra = "." Then intdots = intdots + 1 End If Next txttest.text = intdots
Dim a inputString = InputBox("Enter String", "Enter Value", "") MyString = UCase(inputString) MsgBox MyString Dim stringLength stringLength = Len(MyString) Dim temp output = "" i = 1 Do temp = Mid(MyString, i, 1) MsgBox temp & i CharacterCount = len(MyString) - len(Replace(MyString, temp, "")) MyString = Replace(MyString, temp, "") output = output & temp & ": " & CharacterCount & vbNewline Loop While MyString <> "" MsgBox output
Private Sub Data_KeyPress(sender As Object, e As KeyPressEventArgs) Handles Data.KeyPress If Not IsNumeric(e.KeyChar) And Not e.KeyChar = ChrW(Keys.Back) And Not e.KeyChar = "." Then e.Handled = True Else If e.KeyChar = "." And Data.Text.ToCharArray().Count(Function(c) c = ".") > 0 Then e.Handled = True End If End If End Sub
Dim str As String = "the little red hen" Dim total As Int32 Dim Target As String = "e" Dim Temp As Int32 Dim Temp2 As Int32 = -1 Line50: Temp = str.IndexOf(Target, Temp2 + 1) Temp2 = Temp If Temp <> -1 Then total = total + 1 GoTo Line50 End If MessageBox.Show(CStr(total))
Public Function CountOccurrence(ByVal YourStringToCountOccurrence As String, ByVal TargetSingleCharacterToCount As String) As Int32 Dim total As Int32 Dim Temp As Int32 Dim Temp2 As Int32 = -1 Line50: Temp = YourStringToCountOccurrence.IndexOf(TargetSingleCharacterToCount, Temp2 + 1) Temp2 = Temp If Temp <> -1 Then total = total + 1 GoTo Line50 Else Return total End If End Function
Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click Dim str As String = "the little red hen" MessageBox.Show(CStr(CountOccurrence(str, "e"))) End Sub
Public Sub SomeMethod() Dim methodName as String = System.Reflection.[function to get the current method name here?] End Sub
Dim methodName$ = System.Reflection.MethodBase.GetCurrentMethod().Name
Private Function GetMethodName(<System.Runtime.CompilerServices.CallerMemberName> Optional memberName As String = Nothing) As String Return memberName End Function
Public Sub DoSomeWork() Dim methodName As String = GetMethodName() Console.WriteLine($"Entered {methodName}") End Sub
Private Sub TraceEnter( <System.Runtime.CompilerServices.CallerMemberName> Optional memberName As String = Nothing) Console.WriteLine($"Entered {memberName}") End Sub
Dim methodName As String = System.Reflection.MethodBase.GetCurrentMethod().Name
Dictionary<String, String> dict = new Dictionary<string, string>() { { "", "" } };
Public dict As Dictionary(Of String, String) = New Dictionary(Of String, String) (("",""))
Public dict As Dictionary(Of String, String) = New Dictionary(Of String, String) ({"",""})
Public dict As Dictionary(Of String, String) = New Dictionary(Of String, String) {("","")}
Public dict As Dictionary(Of String, String) = New Dictionary(Of String, String) {{"",""}}
Dim dict = New Dictionary(Of Integer, String) From {{ 1, "Test1" }, { 2, "Test1" }}
Dictionary<int, string> VB$t_ref$S0 = new Dictionary<int, string>(); VB$t_ref$S0.Add(1, "Test1"); VB$t_ref$S0.Add(2, "Test1"); Dictionary<int, string> dict = VB$t_ref$S0;
Dim d As New Dictionary(Of String, String) From {{"", ""}}
private static readonly Dictionary<string, string[]> dics = new Dictionary<string, string[]> { {"sizes", new string[] {"small", "medium", "large"}}, {"colors", new string[] {"black", "red", "brown"}}, {"shapes", new string[] {"circle", "square"}} };
Private Shared ReadOnly dics As New Dictionary(Of String, String()) From { _ {"sizes", New String() {"small", "medium", "large"}}, _ {"colors", New String() {"black", "red", "brown"}}, _ {"shapes", New String() {"circle", "square"}}}
Public Function GetRandom(ByVal Min As Integer, ByVal Max As Integer) As Integer Dim Generator As System.Random = New System.Random() Return Generator.Next(Min, Max) End Function
Dim randoms(1000) As Integer For i As Integer = 0 to randoms.Length - 1 randoms(i) = GetRandom(1, 100) Next
Public Function GetRandom(ByVal Min As Integer, ByVal Max As Integer) As Integer Static Generator As System.Random = New System.Random() Return Generator.Next(Min, Max) End Function
Non-static: 70 Static: 70 Non-static: 70 Static: 46 Non-static: 70 Static: 58 Non-static: 70 Static: 19 Non-static: 70 Static: 79 Non-static: 70 Static: 24 Non-static: 70 Static: 14 Non-static: 70 Static: 46 Non-static: 70 Static: 82 Non-static: 70 Static: 31 Non-static: 70 Static: 25 Non-static: 70 Static: 8 Non-static: 70 Static: 76 Non-static: 70 Static: 74 Non-static: 70 Static: 84 Non-static: 70 Static: 39 Non-static: 70 Static: 30 Non-static: 70 Static: 55 Non-static: 70 Static: 49 Non-static: 70 Static: 21 Non-static: 70 Static: 99 Non-static: 70 Static: 15 Non-static: 70 Static: 83 Non-static: 70 Static: 26 Non-static: 70 Static: 16 Non-static: 70 Static: 75
Dim MyMin As Integer = 1, MyMax As Integer = 5, My1stRandomNumber As Integer, My2ndRandomNumber As Integer Dim Generator As System.Random = New System.Random() My1stRandomNumber = Generator.Next(MyMin, MyMax + 1) My2ndRandomNumber = Generator.Next(MyMin, MyMax + 1)
Private Function GenRandomInt(min As Int32, max As Int32) As Int32 Static staticRandomGenerator As New System.Random Return staticRandomGenerator.Next(min, max + 1) End Function
Private Function GenRandomInt(inMin As Int32, inMax As Int32) As Int32 Static staticRandomGenerator As New System.Random If inMin > inMax Then Dim t = inMin : inMin = inMax : inMax = t If inMax < Int32.MaxValue Then Return staticRandomGenerator.Next(inMin, inMax + 1) If inMin > Int32.MinValue Then Return staticRandomGenerator.Next(inMin - 1, inMax) + 1 Dim bytes(3) As Byte staticRandomGenerator.NextBytes(bytes) Return BitConverter.ToInt32(bytes, 0) End Function
Public Function RandomNumber(ByVal n As Integer) As Integer Dim r As New Random(System.DateTime.Now.Millisecond) Return r.Next(1, n) End Function
dim i = GetRandom(1, 1715) dim o = GetRandom(1, 1715)
Public Function GetRandom(ByVal min as Integer, ByVal max as Integer) as Integer Static staticRandomGenerator As New System.Random max += 1 Return staticRandomGenerator.Next(If(min > max, max, min), If(min > max, min, max)) End Function
Dim Generator As System.Random = New System.Random()
Public Function GetRandom(myGenerator As System.Random, ByVal Min As Integer, ByVal Max As Integer) As Integer Return myGenerator.Next(Min, Max + 1) End Function
Public NotInheritable Class VBMath Private Shared Function GetTimer() As Single Dim now As DateTime = DateTime.Now Return CSng((((((60 * now.Hour) + now.Minute) * 60) + now.Second) + (CDbl(now.Millisecond) / 1000))) End Function Public Shared Sub Randomize() Dim timer As Single = VBMath.GetTimer Dim projectData As ProjectData = ProjectData.GetProjectData Dim rndSeed As Integer = projectData.m_rndSeed Dim num3 As Integer = BitConverter.ToInt32(BitConverter.GetBytes(timer), 0) num3 = (((num3 And &HFFFF) Xor (num3 >> &H10)) << 8) rndSeed = ((rndSeed And -16776961) Or num3) projectData.m_rndSeed = rndSeed End Sub Public Shared Sub Randomize(ByVal Number As Double) Dim num2 As Integer Dim projectData As ProjectData = ProjectData.GetProjectData Dim rndSeed As Integer = projectData.m_rndSeed If BitConverter.IsLittleEndian Then num2 = BitConverter.ToInt32(BitConverter.GetBytes(Number), 4) Else num2 = BitConverter.ToInt32(BitConverter.GetBytes(Number), 0) End If num2 = (((num2 And &HFFFF) Xor (num2 >> &H10)) << 8) rndSeed = ((rndSeed And -16776961) Or num2) projectData.m_rndSeed = rndSeed End Sub Public Shared Function Rnd() As Single Return VBMath.Rnd(1!) End Function Public Shared Function Rnd(ByVal Number As Single) As Single Dim projectData As ProjectData = ProjectData.GetProjectData Dim rndSeed As Integer = projectData.m_rndSeed If (Number <> 0) Then If (Number < 0) Then Dim num1 As UInt64 = (BitConverter.ToInt32(BitConverter.GetBytes(Number), 0) And &HFFFFFFFF) rndSeed = CInt(((num1 + (num1 >> &H18)) And CULng(&HFFFFFF))) End If rndSeed = CInt((((rndSeed * &H43FD43FD) + &HC39EC3) And &HFFFFFF)) End If projectData.m_rndSeed = rndSeed Return (CSng(rndSeed) / 1.677722E+07!) End Function End Class
Public Class Random <__DynamicallyInvokable> _ Public Sub New() Me.New(Environment.TickCount) End Sub <__DynamicallyInvokable> _ Public Sub New(ByVal Seed As Integer) Me.SeedArray = New Integer(&H38 - 1) {} Dim num4 As Integer = If((Seed = -2147483648), &H7FFFFFFF, Math.Abs(Seed)) Dim num2 As Integer = (&H9A4EC86 - num4) Me.SeedArray(&H37) = num2 Dim num3 As Integer = 1 Dim i As Integer For i = 1 To &H37 - 1 Dim index As Integer = ((&H15 * i) Mod &H37) Me.SeedArray(index) = num3 num3 = (num2 - num3) If (num3 < 0) Then num3 = (num3 + &H7FFFFFFF) End If num2 = Me.SeedArray(index) Next i Dim j As Integer For j = 1 To 5 - 1 Dim k As Integer For k = 1 To &H38 - 1 Me.SeedArray(k) = (Me.SeedArray(k) - Me.SeedArray((1 + ((k + 30) Mod &H37)))) If (Me.SeedArray(k) < 0) Then Me.SeedArray(k) = (Me.SeedArray(k) + &H7FFFFFFF) End If Next k Next j Me.inext = 0 Me.inextp = &H15 Seed = 1 End Sub Private Function GetSampleForLargeRange() As Double Dim num As Integer = Me.InternalSample If ((Me.InternalSample Mod 2) = 0) Then num = -num End If Dim num2 As Double = num num2 = (num2 + 2147483646) Return (num2 / 4294967293) End Function Private Function InternalSample() As Integer Dim inext As Integer = Me.inext Dim inextp As Integer = Me.inextp If (++inext >= &H38) Then inext = 1 End If If (++inextp >= &H38) Then inextp = 1 End If Dim num As Integer = (Me.SeedArray(inext) - Me.SeedArray(inextp)) If (num = &H7FFFFFFF) Then num -= 1 End If If (num < 0) Then num = (num + &H7FFFFFFF) End If Me.SeedArray(inext) = num Me.inext = inext Me.inextp = inextp Return num End Function <__DynamicallyInvokable> _ Public Overridable Function [Next]() As Integer Return Me.InternalSample End Function <__DynamicallyInvokable> _ Public Overridable Function [Next](ByVal maxValue As Integer) As Integer If (maxValue < 0) Then Dim values As Object() = New Object() { "maxValue" } Throw New ArgumentOutOfRangeException("maxValue", Environment.GetResourceString("ArgumentOutOfRange_MustBePositive", values)) End If Return CInt((Me.Sample * maxValue)) End Function <__DynamicallyInvokable> _ Public Overridable Function [Next](ByVal minValue As Integer, ByVal maxValue As Integer) As Integer If (minValue > maxValue) Then Dim values As Object() = New Object() { "minValue", "maxValue" } Throw New ArgumentOutOfRangeException("minValue", Environment.GetResourceString("Argument_MinMaxValue", values)) End If Dim num As Long = (maxValue - minValue) If (num <= &H7FFFFFFF) Then Return (CInt((Me.Sample * num)) + minValue) End If Return (CInt(CLng((Me.GetSampleForLargeRange * num))) + minValue) End Function <__DynamicallyInvokable> _ Public Overridable Sub NextBytes(ByVal buffer As Byte()) If (buffer Is Nothing) Then Throw New ArgumentNullException("buffer") End If Dim i As Integer For i = 0 To buffer.Length - 1 buffer(i) = CByte((Me.InternalSample Mod &H100)) Next i End Sub <__DynamicallyInvokable> _ Public Overridable Function NextDouble() As Double Return Me.Sample End Function <__DynamicallyInvokable> _ Protected Overridable Function Sample() As Double Return (Me.InternalSample * 4.6566128752457969E-10) End Function Private inext As Integer Private inextp As Integer Private Const MBIG As Integer = &H7FFFFFFF Private Const MSEED As Integer = &H9A4EC86 Private Const MZ As Integer = 0 Private SeedArray As Integer() End Class
Function xrand() As Long Dim r1 As Long = Now.Day & Now.Month & Now.Year & Now.Hour & Now.Minute & Now.Second & Now.Millisecond Dim RAND As Long = Math.Max(r1, r1 * 2) Return RAND End Function
<Window x:Class="WindowMain" xmlns="http: xmlns:x="http: xmlns:local="clr-namespace:ProjectName" ... Name="WindowMain"> <Grid> ... <local:UserControlZack x:Name="UserControlZack1" ... /> ... </Grid> </Window>
(Window)PresentationSource.FromVisual(this).RootVisual
MyWpfDialog dialog = new MyWpfDialog(); new System.Windows.Interop.WindowInteropHelper(dialog).Owner = this.Handle; dialog.ShowDialog();
public static class Commands { public static RoutedUICommand TestShowDialogCommand = new RoutedUICommand("Test command", "TestShowDialog", typeof(Commands)); }
public Window1() { InitializeComponent(); CommandManager.RegisterClassCommandBinding(typeof(System.Windows.Controls.Control), new CommandBinding(Commands.TestShowDialogCommand, ShowDialogCommand, CanShowDialogCommand)); } private void ShowDialogCommand(object sender, ExecutedRoutedEventArgs e) { var box = new Window(); box.Owner = this; box.ShowDialog(); } private void CanShowDialogCommand(object sender, CanExecuteRoutedEventArgs e) { e.CanExecute = true; }
<Window x:Class="WpfApplication1.Window1" xmlns="http: xmlns:x="http: xmlns:WpfApplication1="clr-namespace:WpfApplication1" Title="Window1" Height="300" Width="322"> <Grid> <StackPanel> <Menu> <MenuItem Header="Test"> <MenuItem Header="ShowDialog" Command="{x:Static WpfApplication1:Commands.TestShowDialogCommand}"/> </MenuItem> </Menu> <WpfApplication1:BazUserControl /> </StackPanel> </Grid> </Window>
<UserControl x:Class="WpfApplication1.BazUserControl" xmlns="http: xmlns:x="http: xmlns:WpfApplication1="clr-namespace:WpfApplication1" Height="300" Width="300"> <Grid> <StackPanel> <Button Command="{x:Static WpfApplication1:Commands.TestShowDialogCommand}" Content="ClickMe" ></Button> <TextBox> <TextBox.ContextMenu> <ContextMenu> <MenuItem Header="ShowDialog" Command="{x:Static WpfApplication1:Commands.TestShowDialogCommand}" /> </ContextMenu> </TextBox.ContextMenu> </TextBox> </StackPanel> </Grid> </UserControl>
Select Case 2 Case 0 Case 1 Case 2 Or 3 Console.WriteLine("hit") End Select
Select Case 2 Case 0,1,2,3 Console.WriteLine("hit") End Select
Select Case 2 Case 0,1 Case 2 To 3 Console.WriteLine("Hit") End Select
2 binary = 0000 0010 3 binary = 0000 0011 2 Or 3 binary = 0000 0011 (= 3)
Select Case 2 Case 0 Console.WriteLine("something") Case 1 Console.WriteLine("something else") Case Is 2 To 3 Console.WriteLine("hit") Else Console.WriteLine("hit else") End Select
class Test { static void Main() { var strings = new string[] {"abc", "def", "ghi"}; } }
Private Shared Sub Main() Dim strings As String() = New String() { "abc", "def", "ghi" } End Sub
Dim strings As String() = New String() {"abc", "def", "ghi"}
Private Sub ComboBox1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles ComboBox1.KeyPress e.Handled = True End Sub
Private Sub ComboBox1_KeyDown(sender As Object, e As KeyEventArgs) Handles ComboBox1.KeyDown xCurrentTextValue = ComboBox1.Text If e.KeyCode <> Keys.Enter Then Me.ComboBox1.Text = xCmbItem End If End Sub
Private Sub ComboBox1_TextChanged(sender As Object, e As EventArgs) Handles ComboBox1.TextChanged If Len(xCurrentTextValue) > 0 Then Me.ComboBox1.Text = xCurrentTextValue End If End Sub
xCurrentTextValue = ComboBox1.Text If e.KeyCode <> Keys.Enter Then Me.ComboBox1.Text = xCurrentTextValue End If
Dim cbx as string Private Sub comboBox1_Enter(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles comboBox1.Enter cbx = Me.comboBox1.Text End Sub Private Sub comboBox1_Leave(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles comboBox1.Leave Me.comboBox1.Text = cbx End Sub
Private Sub comboBox1_Enter(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles comboBox1.Enter cbx = Me.comboBox1.Text End Sub Private Sub comboBox1_Leave(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles comboBox1.Leave Me.comboBox1.Text = cbx End Sub
Private Sub ComboBox4_KeyPress(sender As Object, e As KeyPressEventArgs) Handles ComboBox4.KeyPress e.keyChar = string.empty End Sub
Private Sub CourseName_KeyPress(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles CourseName.KeyPress e.Handled = True End Sub
If ((Not (comp.Container Is Nothing)) And (Not (comp.Container.Components Is Nothing))) Then For i As Integer = 0 To comp.Container.Components.Count() - 1 Step 1 fixUIIn(comp.Container.Components.Item(i), style) Next End If If ((Not IsDBNull(comp.Container)) And (Not IsDBNull(comp.Container.Components))) Then For i As Integer = 0 To comp.Container.Components.Count() - 1 Step 1 fixUIIn(comp.Container.Components.Item(i), style) Next End If If ((Not IsNothing(comp.Container)) And (Not IsNothing(comp.Container.Components))) Then For i As Integer = 0 To comp.Container.Components.Count() - 1 Step 1 fixUIIn(comp.Container.Components.Item(i), style) Next End If If ((Not (comp.Container Is DBNull.Value)) And (Not (comp.Container.Components Is DBNull.Value))) Then For i As Integer = 0 To comp.Container.Components.Count() Step 1 fixUIIn(comp.Container.Components.Item(i), style) Next End If
If comp.Container IsNot Nothing AndAlso comp.Container.Components IsNot Nothing Then For i As Integer = 0 To comp.Container.Components.Count() - 1 fixUIIn(comp.Container.Components(i), style) Next End If
If comp.Container IsNot Nothing AndAlso comp.Container.Components IsNot Nothing Then For Each component In comp.Container.Components fixUIIn(component, style) Next End If
If DataRow.Table.Columns.Contains("column") Then MsgBox("YAY") End If
If dataRow.Table.Columns("ColumnName") IsNot Nothing Then MsgBox("YAY") End If
Dim column = DataRow.Table.Columns("ColumnName") If column IsNot Nothing Then Dim type = column.DataType End If
var dictionary = new Dictionary<int, string> { {0, "string"}, {1, "string2"}, {2, "string3"} };
Dim days = New Dictionary(Of Integer, String) From {{0, "string"}, {1, "string2"}}
Public Class InitializableDictionary Inherits Dictionary(Of Int32, String) Public Sub New(ByVal args() As KeyValuePair(Of Int32, String)) MyBase.New() For Each kvp As KeyValuePair(Of Int32, String) In args Me.Add(kvp.Key, kvp.Value) Next End Sub End Class
Dim days = New Dictionary(Of Integer, String) From {{0, "Sunday"}, {1, "Monday"}}
Public Class CompositeCollections End Class Public Class GreekGod Public Property GreekName Public Property Name Public Property Description Public Sub New(ByVal greekName As String, ByVal englishName As String, ByVal description As String) Me.GreekName = greekName Me.Name = englishName Me.Description = description End Sub End Class Public Class CompositeCollectionVM Public Property GreekGods As System.Collections.ObjectModel.ObservableCollection(Of GreekGod) Public Sub New() GreekGods = New System.Collections.ObjectModel.ObservableCollection(Of GreekGod) GreekGods.Add(New GreekGod("Ἀφροδίτη (Venus)", "Aphrodite", "Goddess of love and beauty. Although married to Hephaestus she had many lovers, most notably Ares. She was depicted as a beautiful woman usually accompanied by her son Eros. Her symbols include the rose, scallop shell, and myrtle wreath. Her sacred animal is the dove.")) GreekGods.Add(New GreekGod("Ἀπόλλων (Apóllō)", "Apollo", "God of music, healing, plague, prophecies, poetry, and archery; associated with light, truth and the sun. He is Artemis GreekGods.Add(New GreekGod("Ἄρης (Mars)", "Ares", "God of war, bloodlust, violence, manly courage, and civil order. The son of Zeus and Hera, he was depicted as either a mature, bearded warrior dressed in battle arms, or a nude beardless youth with helm and spear. His attributes are golden armour and a bronze-tipped spear. His sacred animals are the vulture, venomous snakes, alligators, and dogs.")) GreekGods.Add(New GreekGod("Ἄρτεμις (Diana)", "Artemis", "Virgin goddess of the hunt, wilderness, wild animals, childbirth and plague. In later times she became associated with the moon. She is the daughter of Zeus and Leto, and twin sister of Apollo. In art she was usually depicted as a young woman dressed in a short knee-length chiton and equipped with a hunting bow and a quiver of arrows. In addition to the bow, her attributes include hunting spears, animal pelts, deer and other wild animals. Her sacred animals are deer, bears, and wild boars.")) GreekGods.Add(New GreekGod("Ἀθηνᾶ (Minerva)", "Athena", "Goddess of wisdom, warfare, battle strategy, heroic endeavour, handicrafts and reason. According to most traditions she was born from Zeus GreekGods.Add(New GreekGod("Δημήτηρ (Ceres)", "Demeter", "Goddess of agriculture, horticulture, grain and harvest. Demeter is a daughter of Cronus and Rhea and sister of Zeus, by whom she bore Persephone. She was depicted as a mature woman, often crowned and holding sheafs of wheat and a torch. Her symbols are the Cornucopia (horn of plenty), wheat-ears, the winged serpent and the lotus staff. Her sacred animals are pigs and snakes.")) GreekGods.Add(New GreekGod("Διόνυσος (Bacchus)", "Dionysos", "God of wine, parties and festivals, madness, civilization, drunkenness and pleasure at forever young. He was depicted in art as either an older bearded god or a pretty effeminate, long-haired youth. His attributes include the thyrsus (a pinecone-tipped staff), drinking cup, grape vine, and a crown of ivy. Animals sacred to him include dolphins, serpents, tigers, panthers, and donkeys. A later addition to the Olympians, in some accounts he replaced Hestia.")) GreekGods.Add(New GreekGod("ᾍδης (Hádēs) or Πλούτων (Ploútón)", "Hades or Pluto", "King of the Underworld and god of the dead and the hidden wealth of the Earth. His consort is Persephone and his attributes are the key of Hades, the Helm of Darkness, and the three-headed dog, Cerberus. The screech owl was sacred to him. Despite being the son of Cronus and Rhea and the elder brother of Zeus, as a chthonic god he is only rarely listed among the Olympians. The name Pluto became more common in the Classical period with the mystery religions and Athenian literature.")) GreekGods.Add(New GreekGod("Ἥφαιστος (Hḗphaistos)", "Hephaestus or Vulcan", "Crippled god of fire, metalworking, stonemasonry, sculpture and volcanism. The son of Hera alone, he is the smith of the gods and the husband of the adulterous Aphrodite. He was usually depicted as a bearded man holding hammer and tongs—the tools of a smith—and riding a donkey. His symbols are the hammer, tongs, and anvil. His sacred animals are the donkey, the guard dog and the crane. When he was born, he was thrown off of Mount Olympus by Hera as he was considered ugly.")) GreekGods.Add(New GreekGod("Ἥρα (Juno)", "Hera", "Queen of marriage, women, childbirth, heirs, kings and empires. She is daughter of Cronus and Rhea. She was usually depicted as a beautiful woman wearing a crown and veil and holding a royal, lotus-tipped staff. Her sacred animals are the cow, the peacock. She is the eternal wife of Zeus.")) GreekGods.Add(New GreekGod("Ἡρμῆς (Mercury)", "Hermes", "God of travel, messengers, trade, thievery, cunning wiles, language, writing, diplomacy, athletics, and animal husbandry. He is the messenger of the gods, a psychopomp who leads the souls of the dead into Hades GreekGods.Add(New GreekGod("Ἑστία (Vesta)", "Hestia", "Virgin goddess of the hearth, home and cooking. She is a daughter of Rhea and Cronus and sister of Zeus. She was depicted as a modestly veiled woman, whose symbols are the hearth and kettle. In some accounts, she gave up her seat as one of the Twelve Olympians to tend to the sacred flame on Mount Olympus for Dionysus.")) GreekGods.Add(New GreekGod("Ποσειδῶν (Neptune)", "Poseidon", "God of the sea, rivers, floods, droughts, storms, earthquakes, and the creator of horses; known as the GreekGods.Add(New GreekGod("Ζεύς (Jupiter)", "Zeus", "The king of the gods, the ruler of Mount Olympus and the god of the sky, weather, thunder, law, order, and fate. He is the youngest son of Cronus and Rhea, whom he overthrew after Cronus swallowed his brothers and sisters and he is brother-husband to Hera. In artwork, he was depicted as a regal, mature man with a sturdy figure and dark beard. His usual attributes are the royal sceptre and the lightning bolt. His main attribute was his master bolt. His sacred animals are the eagle and the bull.")) End Sub End Class
<%=Html.DropDownList("name",dataSource,"-please select item-")%>
dropdownlist.DataTextField = ds.Tables[0].Columns[0].Caption; dropdownlist.DataValueField = ds.Tables[0].Columns[1].Caption; dropdownlist.DataSource = ds; dropdownlist.DataBind(); dropdownlist.Items.Insert(0, new ListItem("Select ...", string.Empty));
Dim d As Double = 10 Dim i As Integer = DirectCast(d, Integer)
Dim d As Double = 10 Dim i As Integer = CType(d, Integer)
Dim i As Integer = 12 Dim l As Long = DirectCast(i, Long)
Dim i As Integer = 12 Dim o As Object = i Dim l As Long = DirectCast(o, Long)
Dim o As Object = SomeObject() Dim i As Integer = DirectCast(o, Integer)
Dim i As Integer = 12 Dim l As Long = DirectCast(i, Long)
msgbox "This is how" & vbcrlf & "to get a new line"
Module MyHelpers <Extension()> Public Function UnEscape(ByVal aString As String) As String Return Regex.Unescape(aString) End Function End Module
msgbox "This is the first line" & vbcrlf & "and this is the second line"
MsgBox "Message Name: " & objSymbol1.Name & Chr(13) & "Value of BIT-1: " & (myMessage1.Data(1)) & Chr(13) & "MessageCount: " & ReceiveMessages.Count
yourForm.FormBorderStyle = System.Windows.Forms.FormBorderStyle.Fixed3D yourForm.WindowState = FormWindowState.Maximized yourForm.MinimizeBox = False yourForm.MaximizeBox = False
frmYour.BorderStyle = System.WinForms.FormBorderStyle.Fixed3D
Protected Overrides Sub WndProc(ByRef m As Message) Const WM_NCLBUTTONDOWN As Integer = 161 Const WM_SYSCOMMAND As Integer = 274 Const HTCAPTION As Integer = 2 Const SC_MOVE As Integer = 61456 If (m.Msg = WM_SYSCOMMAND) And (m.WParam.ToInt32() = SC_MOVE) Then Return End If If (m.Msg = WM_NCLBUTTONDOWN) And (m.WParam.ToInt32() = HTCAPTION) Then Return End If MyBase.WndProc(m) End Sub
me.maximumsize = new size(Width, Height) me.minimumsize = me.maximumsize me.maximizebox = false me.minimizebox = false
me.maximumsize = new size(50, 50) me.minimumsize = me.maximumsize me.maximizebox = false me.minimizebox = false
frmYour.MinimizeBox = False frmYour.MaximizeBox = False
Sub test() Dim a As Action = Sub() Exit Sub Dim b As Action = Sub() Return a() b() MsgBox("Yes they do!") End Sub
HEADING <-- this is A1 kfdsl fdjgnm fdkj gdfkj 4353 fdjk <-- this is A9
numofrows = destsheet.Range("A2").End(xlDown).Row - 1
Lastrow = Cells.Find("*", [A1], , , xlByRows, xlPrevious).Row Lastcol = Cells.Find("*", [A1], , , xlByColumns, xlPrevious).Column
numofrows = Sheet1.Range("A1").Offset(Sheet1.Rows.Count - 1, 0).End(xlUp).Row
numofrows = Sheet1.Cells(Sheet1.Rows.Count,1).End(xlUp)
Set rngLastCell = Sheet1.Range("A1").Offset(Sheet1.Rows.Count - 1, 0).End(xlUp)
lastrow = calcws.Cells.Find("*", [A1], , , xlByColumns, xlPrevious).row
iLastRow = calcws.Cells(rows.count, "a").End(xlUp).row
numofrows = calcws.Cells.SpecialCells(xlLastCell).row
lastrow = calcws.UsedRange.rows.count Do While 1 If calcws.Cells(lastrow, 1).Value = "" Then lastrow = lastrow - 1 Else Exit Do End If Loop
iLastRow = Cells(Rows.Count, "a").End(xlUp).Row iLastCol = Cells(i, Columns.Count).End(xlToLeft).Column
numofrows = destsheet.UsedRange.SpecialCells(xlLastCell).row numofrows = destsheet.Cells.SpecialCells(xlLastCell).row
n = ThisWorkbook.Worksheets(1).Range("A:A").Cells.SpecialCells(xlCellTypeConstants).Count
Dim Liste As Worksheet Set Liste = wb.Worksheets("B Leistungen (Liste)") Dim longlastrow As Long longlastrow = Liste.Range(Liste.Cells(4, 1), Liste.Cells(6, 3)).CurrentRegion.Rows.Count
openFileDialog1.FileName = "Select File"; openFileDialog1.DefaultExt = ".xls"; openFileDialog1.Filter = "Excel documents (.xls)|*.xls"; DialogResult result = openFileDialog1.ShowDialog(); if (result==DialogResult.OK) { string filename = openFileDialog1.FileName; Excel.Application xlApp; Excel.Workbook xlWorkBook; Excel.Worksheet xlWorkSheet; object misValue = System.Reflection.Missing.Value; xlApp = new Excel.Application(); xlApp.Visible = false; xlApp.DisplayAlerts = false; xlWorkBook = xlApp.Workbooks.Open(filename, 0, true, 5, "", "", true, Microsoft.Office.Interop.Excel.XlPlatform.xlWindows, "\t", false, false, 0, true, 1, 0); xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item(1); var numRows = xlWorkSheet.Range["A1"].Offset[xlWorkSheet.Rows.Count - 1, 0].End[Excel.XlDirection.xlUp].Row; MessageBox.Show("Number of max row is : "+ numRows.ToString()); xlWorkBook.Close(true, misValue, misValue); xlApp.Quit(); }
If(Not System.IO.Directory.Exists(YourPath)) Then System.IO.Directory.CreateDirectory(YourPath) End If
If Not Directory.Exists(path) Then Directory.CreateDirectory(path) End If
Dim objFSO, strFolder strFolder = "C:\Temp" Set objFSO = CreateObject("Scripting.FileSystemObject") If Not objFSO.FolderExists(strFolder) Then objFSO.CreateFolder(strFolder) End If
Imports System Imports System.IO Public Class Test Public Shared Sub Main() Dim di As DirectoryInfo = New DirectoryInfo("c:\MyDir") Try If di.Exists Then Console.WriteLine("That path exists already.") Return End If di.Create() Console.WriteLine("The directory was created successfully.") di.Delete() Console.WriteLine("The directory was deleted successfully.") Catch e As Exception Console.WriteLine("The process failed: {0}", e.ToString()) End Try End Sub End Class
If Not Directory.Exists(somePath) then Directory.CreateDirectory(somePath) End If
Dim sPath As String = "Folder path here" If (My.Computer.FileSystem.DirectoryExists(sPath) = False) Then My.Computer.FileSystem.CreateDirectory(sPath + "/<Folder name>") Else End If
Dim str(-1) as String Dim str() as String = New String() { }
Dim strings() as String = {} Dim strings as String() = {}
Dim myList as New List(Of String) myList.Add("foo") myList.Add("bar")
MessageBox.Show("count: " + strings.Count.ToString)
Dim strEmpty() As String = Enumerable.Empty(Of String).ToArray
string path = (new System.Uri(Assembly.GetExecutingAssembly().CodeBase)).AbsolutePath;
string s = Assembly.GetExecutingAssembly().CodeBase; Console.WriteLine("CodeBase: [" + s + "]"); s = (new Uri(s)).AbsolutePath; Console.WriteLine("AbsolutePath: [" + s + "]"); s = Uri.UnescapeDataString(s); Console.WriteLine("Unescaped: [" + s + "]"); s = Path.GetFullPath(s); Console.WriteLine("FullPath: [" + s + "]");
new System.Uri(Assembly.GetExecutingAssembly().EscapedCodeBase).LocalPath;
Dim Price As Integer Int32.TryParse(txtPrice.Text, Price)
Dim valueStr as String = "10" Dim valueIntConverted as Integer = CInt(valueStr)
private void checkFinally() { try { doFinally(); } catch { Console.WriteLine(" Breaking news: a crash occured. "); } } private void doFinally() { Console.WriteLine(" "); Console.Write("Here goes: " + (radioReturnInTry.Checked ? "2. Return in try: " : (radioReturnInCatch.Checked? "3. Retrun in catch: " : (radioThrowInCatch.Checked? "4. Throw in catch: " : "1. Continue in catch: "))) ); try { if (radioReturnInTry.Checked) { Console.Write(" Returning in try. "); return; } Console.Write(" Throwing up in try. "); throw new Exception("check your checkbox."); } catch (Exception ex) { Console.Write(" ...caughtcha! "); if (radioReturnInCatch.Checked) { Console.Write("Returning in catch. "); return; } if (radioThrowInCatch.Checked) { Console.Write(" Throwing up in catch. "); throw new Exception("after caught"); } } finally { Console.Write(" Finally!!"); } Console.WriteLine(" Done!!!"); }
Try Catch ex As Exception if throw ex else Finally End Try
try { ... do something } catch { ... handle exception } finally { ... cleanup }
try { DoSomethingAndCleanup(); } catch { ... handle exception } ... private void DoSomethingAndCleanup() { try { ... do something } finally { ... cleanup } }
try{ | try{ send_message() | send_message() } catch(NetworkError){ | } catch(NetworkError){ deal_with_exception() | deal_with_exception() } finally { | } finalizes_connection() | finalizes_connection() } |
public static DoLengthyProcessing(this Control control, Action<Control> action) { Cursor oldCursor = control.Cursor try { control.Cursor = Cursors.WaitCursor; action(control); } catch (Exception ex) { ErrorHandler.Current.Handler(ex); } finally { control.Cursor = oldCursor; } }
select (case where @var = 0 then MyTable.Val1 else MyTable.Val2 end) from MyTable
Dim X as integer = IIF(SomeBoolean = true, ExpensiveFunction1(), ExpensiveFunction2())
Dim X as integer if SomeBoolean = true then X = ExpensiveFunction1() else X = ExpensiveFunction2() end if
Z = iif(FunctionA(InputOutputParam), FunctionB(InputOutputParam))
IIF(something Is Nothing, "nothing", something.Value)
If list IsNot Nothing AndAlso list.Length > 0 Then ..
If Not Validate(x) OrElse Not ExpensiveValidate(x) Then ..
If Not SomeObject Is Nothing AndAlso CheckObjectExistsInDatabase(SomeObject) Then
Dim tm As New Stopwatch Const tries As Integer = 123456 Dim z As Integer = 0 Dim s() As String = New String() {"0", "one"} Debug.WriteLine("AndAlso") For x As Integer = 0 To s.Length - 1 z = 0 tm.Restart() For y As Integer = 0 To tries If s(x) = x.ToString AndAlso s(x) = y.ToString Then z += 1 End If Next tm.Stop() Debug.WriteLine(x.ToString.PadRight(3, " "c) & z.ToString.PadRight(10, " "c) & tm.Elapsed.ToString) Next Debug.WriteLine("And") For x As Integer = 0 To s.Length - 1 z = 0 tm.Restart() For y As Integer = 0 To tries If s(x) = x.ToString And s(x) = y.ToString Then z += 1 End If Next tm.Stop() Debug.WriteLine(x.ToString.PadRight(3, " "c) & z.ToString.PadRight(10, " "c) & tm.Elapsed.ToString) Next
Dim variable As T Dim variable As T = Nothing Dim variable As New T() Dim variable As T = CType(Nothing, T)
Function Test(mode as Boolean) if mode = True then x = x + 1 : Exit Sub y = y - 1 End Sub
Function Test() Call Function1 : Call Function2 End Function
If Not SupportTasks(SomeArgument) Then Application.ScreenUpdating = True Exit Sub End If
Class Test Public Sub DoSomething() Console.WriteLine("doing something") End Sub End Class Sub Main() Call (New Test()).DoSomething() End Sub
Class Test Public Function GetSomething() As Integer Return 0 End Function End Class Sub Main() Dim x As Integer = (New Test()).GetSomething() End Sub
Dim c As IAsyncOperation(Of StartupTask) = StartupTask.GetAsync("Startup") …… (Await c).Disable()
Me.DataGridView1.DefaultCellStyle.SelectionBackColor = Me.DataGridView1.DefaultCellStyle.BackColor Me.DataGridView1.DefaultCellStyle.SelectionForeColor = Me.DataGridView1.DefaultCellStyle.ForeColor
private void datagridview_SelectionChanged(object sender, EventArgs e) { this.datagridview.ClearSelection(); }
private void dgvMyControl_SelectionChanged(object sender, EventArgs e) { this.dgvMyControl.SelectionChanged -= dgvMyControl_SelectionChanged; this.dgvMyControl.ClearSelection(); this.dgvMyControl.SelectionChanged += dgvMyControl_SelectionChanged; }
private void dgvMyControl_SelectionChanged(object sender, EventArgs e) { dgvMyControl.SelectedCells(0).Style.DefaultCellStyle.SelectionBackColor = dgvMyControl.SelectedCells(0).Style.DefaultCellStyle.BackColor }
foreach (datarow r in dgv.rows) { foreach (datacell c in r.cells) { c.Style.SelectionBackColor = c.Style.BackColor } }
Private Sub datagridview1_SelectionChanged(sender As Object, e As EventArgs) Handles datagridview1.SelectionChanged datagridview1.ClearSelection() End Sub
Private Sub DataGridView1_CellContentClick(ByVal sender As System.Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles DataGridView1.CellClick Dim row As Integer = DataGridView1.CurrentCellAddress.Y Dim column As Integer = DataGridView1.CurrentCellAddress.X If column = 1 Then Me.DataGridView1.CurrentCell.Selected = False DataGridView1.Item(column, row).Style.BackColor = SelectColour() End If End Sub
Private Sub DataGridView1_SelectionChanged(sender As Object, e As System.EventArgs) Handles DataGridView1.SelectionChanged Me.DataGridView1.ClearSelection() End Sub
Private Sub DataGridView1_MouseDown(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles DataGridView1.MouseDown Dim _ht As DataGridView.HitTestInfo = Me.DataGridView1.HitTest(e.X, e.Y) If _ht.Type = DataGridViewHitTestType.Cell Then Me.DataGridView1.Rows(_ht.RowIndex).Cells(_ht.ColumnIndex).Value = _ "RowIndex = " & _ht.RowIndex & ", " & "ColumnIndex = " & _ht.ColumnIndex End If End Sub
Private Sub DGW2_DataBindingComplete(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewBindingCompleteEventArgs) Handles DGW2.DataBindingComplete Dim mygrid As DataGridView mygrid = CType(sender, DataGridView) mygrid.ClearSelection() End Sub
^[0-9][0-9]\?[0-9]\?[0-9]\?[0-9]\?[0-9]\?$ ^[0-999999]$
^ : Start anchor [0-9] : Character class to match one of the 10 digits {1,6} : Range quantifier. Minimum 1 repetition and maximum 6. $ : End anchor
<p>some text here</p> <p>some text here</p> <p>some text here</p>
<p>some text here</p><p>some text here</p><p>some text here</p>
Dim newString As String = origString.Replace(vbCr, "").Replace(vbLf, "")
Dim s As String = "your string".Replace(vbCrLf, "")
var result = Regex.Replace(input, "\r\n", String.Empty)
var result = Regex.Replace(input, "\r\n$", String.Empty)
string res = string.Join("", sample.Split(Environment.NewLine.ToCharArray())
Dim MyNewString As String = MyString.Replace(Environment.NewLine,String.Empty)
Public Class BaseClass Public ReadOnly Text As String Public Sub New(ByVal SetText As String) Text = SetText End Sub Public Sub New() Text = "" End Sub End Class Public Class ChildClass Inherits BaseClass End Class Public Class TestClass Sub Test() Dim TestChild As ChildClass = New ChildClass("c") TestChild.Method1() End Sub End Class
Public Class ChildClass Inherits BaseClass Public Sub New (ByVal SetText As String) MyBase.New(SetText) End Class End Class
Class ChildClass Inherits BaseClass Public Sub New(text As String) MyBase.New(text) End Sub End Class
Public Class ChildClass Inherits BaseClass Public Sub New (ByVal SetText As String) MyBase.New(SetText) End Class End Class Public Class TestClass Public TestChild AS New ChildClass("c") End Class
Imports System.ServiceModel Imports System.ServiceModel.Channels Public Interface IMyContractCallback <OperationContract()> _ Sub OnCallBack() End Interface <ServiceContract(CallBackContract:=GetType(IMyContractCallback))> _ Public Interface IMyContract <OperationContract()> _ Sub DoSomething() End Interface <ServiceBehavior(ConcurrencyMode:=ConcurrencyMode.Reentrant)> _ Public Class Myservice Implements IMyContract Public Sub DoSomething() Implements IMyContract.DoSomething Console.WriteLine("Hi from server!") Dim callback As IMyContractCallback = OperationContext.Current.GetCallbackChannel(Of IMyContractCallback)() callback.OnCallBack() End Sub End Class Public Class MyContractClient Inherits DuplexClientBase(Of IMyContract) Public Sub New(ByVal callbackinstance As Object, ByVal binding As Binding, ByVal remoteAddress As EndpointAddress) MyBase.New(callbackinstance, binding, remoteAddress) End Sub End Class Public Class MyCallbackClient Implements IMyContractCallback Public Sub OnCallBack() Implements IMyContractCallback.OnCallBack Console.WriteLine("Hi from client!") End Sub End Class Module Module1 Sub Main() Dim uri As New Uri("net.tcp: Dim binding As New NetTcpBinding() Dim host As New ServiceHost(GetType(Myservice), uri) host.AddServiceEndpoint(GetType(IMyContract), binding, "") host.Open() Dim callback As New MyCallbackClient() Dim client As New MyContractClient(callback, binding, New EndpointAddress(uri)) Dim proxy As IMyContract = client.ChannelFactory.CreateChannel() proxy.DoSomething() Console.ReadLine() client.Close() host.Close() End Sub End Module
Dim y = TryCast(x, IFoo) If y IsNot Nothing Then ... something referencing y rather than CType or DirectCast (x, IFoo) End If
If TypeOf objectParameter Is ISpecifiedInterface Then End If
if (typeof(IWhateverable).IsAssignableFrom(myType)) { ... }
Dim _interfaceList As List(Of Type) = myInstance.GetType().GetInterfaces().ToList() If _interfaceList.Contains(GetType(IMyInterface)) Then End If
If o.GetType().GetInterfaces().Contains(GetType(ISomething)) Then End If
If tmp.GetInterfaces().Contains(GetType(IEnumerable)) Then End If
Dim sql = "INSERT INTO myTable (myField1, myField2) " & "VALUES ( Dim cmd As New SqlCommand(sql, myDbConnection) cmd.ExecuteNonQuery()
Dim sql = "INSERT INTO myTable (myField1, myField2) " & "VALUES (@someValue, @someOtherValue);" Using cmd As New SqlCommand(sql, myDbConnection) cmd.Parameters.AddWithValue("@someValue", someVariable) cmd.Parameters.AddWithValue("@someOtherValue", someTextBox.Text) cmd.ExecuteNonQuery() End Using
Dim sql = "UPDATE myTable SET myField1 = @newValue WHERE myField2 = @someValue;"
Dim sql = "SELECT myField1, myField2 FROM myTable WHERE myField3 = @someValue;" Using cmd As New SqlCommand(sql, myDbConnection) cmd.Parameters.AddWithValue("@someValue", someVariable) Using reader = cmd.ExecuteReader() End Using End Using
Dim result As Integer = MessageBox.Show("message", "caption", MessageBoxButtons.YesNoCancel) If result = DialogResult.Cancel Then MessageBox.Show("Cancel pressed") ElseIf result = DialogResult.No Then MessageBox.Show("No pressed") ElseIf result = DialogResult.Yes Then MessageBox.Show("Yes pressed") End If
Select Case MsgBox("Your Message", MsgBoxStyle.YesNoCancel, "caption") Case MsgBoxResult.Yes MessageBox.Show("Yes button") Case MsgBoxResult.Cancel MessageBox.Show("Cancel button") Case MsgBoxResult.No MessageBox.Show("NO button") End Select
switch (MessageBox.Show("Message", "caption", MessageBoxButtons.YesNoCancel)) { case DialogResult.Yes: MessageBox.Show("Yes"); break; case DialogResult.No: MessageBox.Show("No"); break; case DialogResult.Cancel: MessageBox.Show("Cancel"); break; }
dim result as dialogresult result = MessageBox.Show("message", "caption", MessageBoxButtons.YesNoCancel) If result = DialogResult.Cancel Then MessageBox.Show("Cancel pressed") ElseIf result = DialogResult.No Then MessageBox.Show("No pressed") ElseIf result = DialogResult.Yes Then MessageBox.Show("Yes pressed") End If
Dim n As String = MsgBox("Do you really want to exit?", MsgBoxStyle.YesNo, "Confirmation Dialog Box") If n = vbYes Then MsgBox("Current Form is closed....") Me.Close() Yogi_Cottex.Show() End If
Dim result = MessageBox.Show("Message To Display", "MessageBox Title", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question) If result = DialogResult.Cancel Then MessageBox.Show("Cancel Button Pressed", "MessageBox Title",MessageBoxButtons.OK , MessageBoxIcon.Exclamation) ElseIf result = DialogResult.No Then MessageBox.Show("No Button Pressed", "MessageBox Title", MessageBoxButtons.OK, MessageBoxIcon.Error) ElseIf result = DialogResult.Yes Then MessageBox.Show("Yes Button Pressed", "MessageBox Title", MessageBoxButtons.OK, MessageBoxIcon.Information) End If
Private Sub cmd_exit_click() If MsgBox("Are you sure want to exit now?", MsgBoxStyle.YesNo, "closing warning") = MsgBoxResult.Yes Then Me.Close() Else End If End Sub
If MsgBox("Are you sure?", MsgBoxStyle.YesNo) <> MsgBoxResults.Yes Then Exit Sub End If
Select Case MessageBox.Show("Message", "Title", MessageBoxButtons.YesNo) Case vbYes Case vbNo End Select
If MessageBox.Show("Message", "Title", MessageBoxButtons.YesNo) = vbYes Then End If
MsgBox("Are you sure want to Exit", MsgBoxStyle.YesNo, "") If True Then End End If
dsformulaValues.Tables.Add(m_DataAccess.GetFormulaValues (dv.ToTable.DefaultView.ToTable(False, strSelectedCols)).Tables(0))
DataSet ds = GetData1(); DataSet ds2 = GetData2(); DataTable dt = ds2.Tables[0]; ds2.Tables.Remove(dt); dt.TableName = "PortedTable"; ds.Tables.Add(dt);
dsformulaValues.Tables.Add(m_DataAccess.GetFormulaValues (dv.ToTable.DefaultView.ToTable(False, strSelectedCols)).Tables(0)) dsformulaValues.Tables.Remove(
DataTable myTable = new DataTable(); private void Save() { DataSet myDataSet = new DataSet(); myDataSet.Tables.Add(myTable); myDataSet.Tables.Remove(myTable); myDataSet.WriteXml("myTable.xml"); } private void buttonSave_Click(object sender, EventArgs e) { Save(); }
_DataTable.TableName = _TableName If _DataTable.DataSet IsNot Nothing Then _DataSet = _DataTable.DataSet Else _DataSet = New DataSet _DataSet.Tables.Add(_DataTable) End If
logLine = "e.Value: " + IIf(e.Value Is Nothing, "", e.Value.ToString())
logLine = "e.Value: " + If(e.Value Is Nothing, "", e.Value.ToString())
Public Class Program Public Shared Function Main(ByVal args As String()) As Integer System.Text.Encoding.GetEncoding(1252) End Function End Class
private void myFlowLayoutPannel_SizeChanged(object sender, EventArgs e) { myFlowLayoutPannel.SuspendLayout(); foreach (Control ctrl in pnSMS.Controls) { if (ctrl is Button) ctrl.Width = pnSMS.ClientSize.Width; } myFlowLayoutPannel.ResumeLayout(); }
public class StackPanel: FlowLayoutPanel { public StackPanel(): base() { InitializeComponent(); this.ForceAutoresizeOfControls = true; } private void InitializeComponent() { this.SuspendLayout(); // // this.AutoSizeMode = System.Windows.Forms.AutoSizeMode.GrowAndShrink; this.WrapContents = false; this.ResumeLayout(false); } [Browsable(false)] [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)] public new bool WrapContents { get { return base.WrapContents; } set { base.WrapContents = value; } } [DefaultValue(typeof(AutoSizeMode), "GrowAndShrink")] public override AutoSizeMode AutoSizeMode { get { return base.AutoSizeMode; } set { base.AutoSizeMode = value; } } [DefaultValue(true)] public bool ForceAutoresizeOfControls { get; set; } protected override void OnSizeChanged(EventArgs e) { base.OnSizeChanged(e); this.SuspendLayout(); switch (FlowDirection) { case FlowDirection.BottomUp: case FlowDirection.TopDown: foreach (Control control in this.Controls) if (ForceAutoresizeOfControls || control.AutoSize) control.Width = this.ClientSize.Width - control.Margin.Left - control.Margin.Right; break; case FlowDirection.LeftToRight: case FlowDirection.RightToLeft: foreach (Control control in this.Controls) if (ForceAutoresizeOfControls || control.AutoSize) control.Height = this.ClientSize.Height - control.Margin.Top - control.Margin.Bottom; break; default: break; } this.ResumeLayout(); } protected override void OnLayout(LayoutEventArgs levent) { base.OnLayout(levent); if (levent != null && levent.AffectedControl != null) { Control control = levent.AffectedControl; if (ForceAutoresizeOfControls || control.AutoSize) { switch (FlowDirection) { case FlowDirection.BottomUp: case FlowDirection.TopDown: control.Width = this.ClientSize.Width - control.Margin.Left - control.Margin.Right; break; case FlowDirection.LeftToRight: case FlowDirection.RightToLeft: control.Height = this.ClientSize.Height - control.Margin.Top - control.Margin.Bottom; break; default: break; } } } } }
Button1.Anchor = (AnchoreStyle.Left or AnchoreStyle.Right)
public class ButtonWindow : Panel { public ButtonWindow() { Dock = DockStyle.Fill; AutoScroll = true; for (int i = 0; i < 500; i++) { Button button = new Button() { Height = 100, Dock = DockStyle.Top }; Controls.Add(button); } } }
Dim obj As Object obj = "4/1/2010" Dim dt As DateTime = CType(obj, DateTime)
Dim dt As DateTime = DateTime.Parse(obj.ToString(), _ System.Globalization.CultureInfo.GetCultureInfo("en-US").DateTimeFormat)
static void Main(string[] args) { StringCollection stringCollection = new StringCollection(); stringCollection.AddRange(new string[] { "hello", "world" }); List<string> listOfStrings = new List<string>(new StringCollectionEnumerable(stringCollection)); Debug.Assert(listOfStrings.Count == stringCollection.Count); Debug.Assert(listOfStrings[0] == stringCollection[0]); } private class StringCollectionEnumerable : IEnumerable<string> { private StringCollection underlyingCollection; public StringCollectionEnumerable(StringCollection underlyingCollection) { this.underlyingCollection = underlyingCollection; } public IEnumerator<string> GetEnumerator() { return new StringEnumeratorWrapper(underlyingCollection.GetEnumerator()); } System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return this.GetEnumerator(); } } private class StringEnumeratorWrapper : IEnumerator<string> { private StringEnumerator underlyingEnumerator; public StringEnumeratorWrapper(StringEnumerator underlyingEnumerator) { this.underlyingEnumerator = underlyingEnumerator; } public string Current { get { return this.underlyingEnumerator.Current; } } public void Dispose() { } object System.Collections.IEnumerator.Current { get { return this.underlyingEnumerator.Current; } } public bool MoveNext() { return this.underlyingEnumerator.MoveNext(); } public void Reset() { this.underlyingEnumerator.Reset(); } }
var list = stringCollection.Cast<string>().ToList();
public static List<string> Convert(StringCollection collection) { List<string> list = new List<string>(); foreach (string item in collection) { list.Add(item); } return list; }
var list = new List<string>(new StringCollection().Cast<string>());
var c = new StringCollection(); c.AddRange(new List<string>().ToArray());
StringCollection colString = new StringCollection(); string[] arrString = new string[colString.Count]; colString.CopyTo(arrString, 0); List<string> lstString = new List<string>(arrString);
switch (msg.GetType()) { case ClassA: case ClassB: case ClassC: }
Select Case msg.GetType() Case GetType(ClassA) End Select
Dim type = msg.GetType() If type Is GetType(ClassA) ... ElseIf type Is GetType(ClassB) ... ... End If
Select Case True Case TypeOf msg Is ClassA Case TypeOf msg Is ClassB Case Else End Select
Private Sub Button1_Click(ByVal sender As System.Object, _ ByVal e As System.EventArgs) Handles Button1.Click, Button2.Click Select Case True Case sender Is Me.Button1 Case sender Is Me.Button2 End Select End Sub
Select Case msg.GetType.Name Case GetType(ClassA).Name ... Case GetType(ClassB).Name ... Case Else ... End Select
If msg.GetType Is GetType(ClassA) Then ... ElseIf msg.GetType Is GetType(ClassB) Then ... Else ... End If
Dim a As Object = New TextBox Select Case True Case TypeOf a Is TextBox MsgBox("aaa") Case TypeOf a Is ComboBox Case TypeOf a Is ListBox End Select
theList.Sort(Function(x, y) x.age.CompareTo(y.age))
theList = theList.OrderBy(Function(x) x.age).ToList()
Private Function sortpictures(s As String) As Integer If Regex.IsMatch(s, "FRONT") Then Return 0 ElseIf Regex.IsMatch(s, "SIDE") Then Return 1 ElseIf Regex.IsMatch(s, "CLASP") Then Return 2 Else Return 3 End If End Function
list.Sort(Function(elA As String, elB As String) Return sortpictures(elA).CompareTo(sortpictures(elB)) End Function)
Friend Class JSONReturnComparer Implements IComparer(of JSONReturn) Public Function Compare(x As JSONReturn, y As JSONReturn) As Integer Implements IComparer(Of JSONReturn).Compare Return String.Compare(x.Name, y.Name) End Function End Class
Exception Generated Error Message: A potentially dangerous Request.Path value was detected from the client (?). Stack Trace: at System.Web.HttpRequest.ValidateInputIfRequiredByConfig() at System.Web.HttpApplication.PipelineStepManager.ValidateHelper(HttpContext context) Technical Information: DATE/TIME: 23/01/2013 03:50:01 PAGE: www.amadeupurl.co.uk/ImageHandler.ashx?i=3604
<system.web> <httpRuntime requestPathInvalidCharacters="<,>,*,%,&,:,\,?" /> </system.web>
<system.web> <httpRuntime requestValidationMode="2.0" /> </system.web>
A potentially dangerous Request.Path value was detected from the client (?).
Public Module BooleanTest Public Function GetTrue() As Boolean GetTrue = True End Function End Module
[StructLayout(LayoutKind.Explicit)] struct MyStruct { [FieldOffset(0)] public bool MyBool; [FieldOffset(0)] public int MyInt32; } static void Main(string[] args) { MyStruct b1, b2; b1.MyInt32 = 0; b2.MyInt32 = 0; b1.MyBool = BooleanTest.BooleanTest.GetTrue(); b2.MyBool = true; Console.WriteLine(b1.MyInt32); Console.WriteLine(b2.MyInt32); }
Public Function BoolToMySql(bVal As Boolean) As Integer Dim retVal As Integer If bVal = True Then retVal = 1 Else retVal = 0 End If BoolToMySql = retVal End Function
Public Function BoolToMySql(bVal As Boolean) As Integer return If(bVal, 1, 0) End Function
Throw New System.Exception("An exception has occurred.")
Function GetName() As String Return "Something" End Function
PropertyInfo[] propertyInfo = myobject.GetType().GetProperties();
Dim info() As PropertyInfo = myobject.GetType().GetProperties()
For Each p As System.Reflection.PropertyInfo In obj.GetType().GetProperties() If p.CanRead Then Console.WriteLine("{0}: {1}", p.Name, p.GetValue(obj, Nothing)) End If Next
if (item is IEnumerable) { foreach (object o in item as IEnumerable) { } } else { foreach (System.Reflection.PropertyInfo p in obj.GetType().GetProperties()) { if (p.CanRead) { Console.WriteLine("{0}: {1}", p.Name, p.GetValue(obj, null)); } } }
If TypeOf item Is IEnumerable Then For Each o As Object In TryCast(item, IEnumerable) Next Else For Each p As System.Reflection.PropertyInfo In obj.GetType().GetProperties() If p.CanRead Then Console.WriteLine("{0}: {1}", p.Name, p.GetValue(obj, Nothing)) End If Next End If
using System.Reflection; Type type = job.GetType(); foreach ( MemberInfo memInfo in type.GetMembers() ) if (memInfo is PropertyInfo) { }
MsgBox("Hai" & vbLf & "Welcome") MsgBox ("Hai" & vbCrLf & "Welcome") MsgBox("Hai" & vbCr & "Welcome")
Constant Value Description ---------------------------------------------------------------- vbCr Chr(13) Carriage return vbCrLf Chr(13) & Chr(10) Carriage return–linefeed combination vbLf Chr(10) Line feed
public class Foo { public Foo(string name) { } public Foo(string name, int bar) : this(name) { } }
Public Class Foo Public Sub New(name As String) End Sub Public Sub New(name As String, bar As Integer) Me.New(name) End Sub End Class
If Not myObject Is Nothing *And* myObject.test() Then Else End If
Select Case True Case (myObject Is Nothing), Not myObject.test() MsgBox "no instance or test == false" Case Else MsgBox "got instance & test == true" End Select End Sub
Dim success As Boolean If myObj Is Nothing Then ElseIf Not myObj.test() Then Else: success = True End If If success Then Else End If
if Proceed(objMyAwesomeObject) then else end if ... end sub private function Proceed(objMyAwesomeObject as Object) if not objMyAweseomeObject is nothing then Proceed = true elseif objMyAwesomeObject.SomeProperty = SomeValue then Proceed = true else Proceed = false endif end function
If Not myObject Is Nothing Then If myObject.test() Then End If Else End If
Dim bTestsFailed as Boolean bTestsFailed = False If Not myObject Is Nothing Then If myObject.test() Then Else bTestsFailed = True End If Else bTestsFailed = True End If If bTestsFailed Then End If
If Not myObject Is Nothing Then If myObject.test() Then Else End If
dim conditionsValid as boolean conditionsValid = myObject Is Nothing if conditionsValid then conditionsValid = myObject.test() if conditionsValid then conditionsValid = myObject.anotherTest() if conditionsValid then else end if
Public Sub Method1(ByRef s As String) Dim c As String = s End Sub Public Sub Method2(ByVal s As String) Dim c As String = s End Sub Public Sub Method3(ByRef i As Integer) Dim x As Integer = i End Sub Public Sub Method4(ByVal i As Integer) Dim x As Integer = i End Sub Sub Main() Dim s As String = "Hello World!" Dim k As Integer = 5 Dim t As New Stopwatch t.Reset() t.Start() For i As Integer = 0 To 100000000 Method1(s) Next t.Stop() Console.WriteLine("Reference Type - ByRef " & t.ElapsedMilliseconds) t.Reset() t.Start() For i As Integer = 0 To 100000000 Method2(s) Next t.Stop() Console.WriteLine("Reference Type - ByVal " & t.ElapsedMilliseconds) t.Reset() t.Start() For i As Integer = 0 To 100000000 Method3(i) Next t.Stop() Console.WriteLine("Value Type - ByRef " & t.ElapsedMilliseconds) t.Reset() t.Start() For i As Integer = 0 To 100000000 Method4(i) Next t.Stop() Console.WriteLine("Value Type - ByVal " & t.ElapsedMilliseconds) Console.ReadKey() End Sub
Public Structure rStruct Public v1 As Integer Public v2 As String End Structure Public Class tClass Public v1 As Integer Public v2 As String End Class Public Sub Method1(ByRef s As String) Dim c As String = s End Sub Public Sub Method2(ByVal s As String) Dim c As String = s End Sub Public Sub Method3(ByRef i As Integer) Dim x As Integer = i End Sub Public Sub Method4(ByVal i As Integer) Dim x As Integer = i End Sub Public Sub Method5(ByVal st As rStruct) Dim x As rStruct = st End Sub Public Sub Method6(ByRef st As rStruct) Dim x As rStruct = st End Sub Public Sub Method7(ByVal cs As tClass) Dim x As tClass = cs End Sub Public Sub Method8(ByRef cs As tClass) Dim x As tClass = cs End Sub Sub DoTest() Dim s As String = "Hello World!" Dim cs As New tClass cs.v1 = 1 cs.v2 = s Dim rt As New rStruct rt.v1 = 1 rt.v2 = s Dim k As Integer = 5 ListBox1.Items.Add("BEGIN") Dim t As New Stopwatch Dim gt As New Stopwatch If CheckBox1.Checked Then ListBox1.Items.Add("Using Garbage Collection") System.Runtime.GCSettings.LargeObjectHeapCompactionMode = System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce GC.Collect() GC.WaitForPendingFinalizers() GC.Collect() GC.GetTotalMemory(False) End If Dim d As Double = GC.GetTotalMemory(False) ListBox1.Items.Add("Free Memory: " & d) gt.Start() t.Reset() t.Start() For i As Integer = 0 To 100000000 Method1(s) Next t.Stop() ListBox1.Items.Add("Reference Type - ByRef " & t.ElapsedMilliseconds) t.Reset() t.Start() For i As Integer = 0 To 100000000 Method2(s) Next t.Stop() ListBox1.Items.Add("Reference Type - ByVal " & t.ElapsedMilliseconds) t.Reset() t.Start() For i As Integer = 0 To 100000000 Method3(i) Next t.Stop() ListBox1.Items.Add("Value Type - ByRef " & t.ElapsedMilliseconds) t.Reset() t.Start() For i As Integer = 0 To 100000000 Method4(i) Next t.Stop() ListBox1.Items.Add("Value Type - ByVal " & t.ElapsedMilliseconds) t.Reset() t.Start() For i As Integer = 0 To 100000000 Method5(rt) Next t.Stop() ListBox1.Items.Add("Structure Type - ByVal " & t.ElapsedMilliseconds) t.Reset() t.Start() For i As Integer = 0 To 100000000 Method6(rt) Next t.Stop() ListBox1.Items.Add("Structure Type - ByRef " & t.ElapsedMilliseconds) t.Reset() t.Start() For i As Integer = 0 To 100000000 Method7(cs) Next t.Stop() ListBox1.Items.Add("Class Type - ByVal " & t.ElapsedMilliseconds) t.Reset() t.Start() For i As Integer = 0 To 100000000 Method8(cs) Next t.Stop() gt.Stop() ListBox1.Items.Add("Class Type - ByRef " & t.ElapsedMilliseconds) ListBox1.Items.Add("Total time " & gt.ElapsedMilliseconds) d = GC.GetTotalMemory(True) - d ListBox1.Items.Add("Total Memory Heap consuming (bytes)" & d) ListBox1.Items.Add("END") End Sub Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click DoTest() End Sub
Function RemoveWhitespace(fullString As String) As String Return New String(fullString.Where(Function(x) Not Char.IsWhiteSpace(x)).ToArray()) End Function
Imports System.Text.RegularExpressions Module TestRegExp Sub Main() Dim regWhitespace As New Regex("\s") Dim regSpace As New Regex(" ") Dim testString As String = "First Line" + vbCrLf + _ "Second line followed by 2 tabs" + vbTab + vbTab + _ "End of tabs" Console.WriteLine("Test string :") Console.WriteLine(testString) Console.WriteLine("Replace all whitespace :") Console.WriteLine(regWhitespace.Replace(testString, String.Empty)) Console.WriteLine("Replace all spaces :") Console.WriteLine(regSpace.Replace(testString, String.Empty)) Console.WriteLine("Press any key to finish") Console.ReadKey() End Sub End Module
While ImageText1.Contains(" ") ImageText1 = ImageText1.Replace(" ", " ") End While
Dim charstotrim() As Char = {" "c} myString = myString .Trim(charstotrim)
Public Shared Function RemoveXtraSpaces(strVal As String) As String Dim iCount As Integer = 1 Dim sTempstrVal As String sTempstrVal = "" For iCount = 1 To Len(strVal) sTempstrVal = sTempstrVal + Mid(strVal, iCount, 1).Trim Next RemoveXtraSpaces = sTempstrVal Return RemoveXtraSpaces End Function
Public Function AllTrim(ByVal GeVar As String) As String Dim i As Integer Dim e As Integer Dim NewStr As String = "" e = Len(GeVar) For i = 1 To e If Mid(GeVar, i, 1) <> " " Then NewStr = NewStr + Mid(GeVar, i, 1) End If Next i AllTrim = NewStr End Function
Dim webClient As New System.Net.WebClient Dim result As String = webClient.DownloadString("http:
System.Net.WebClient webClient = new System.Net.WebClient(); string result = webClient.DownloadString("http:
Try Dim fr As System.Net.HttpWebRequest Dim targetURI As New Uri("http: fr = DirectCast(HttpWebRequest.Create(targetURI), System.Net.HttpWebRequest) If (fr.GetResponse().ContentLength > 0) Then Dim str As New System.IO.StreamReader(fr.GetResponse().GetResponseStream()) Response.Write(str.ReadToEnd()) str.Close(); End If Catch ex As System.Net.WebException End Try
Sub Main() Dim URL As String = http: Dim client As WebClient = New WebClient() Dim data As Stream = client.OpenRead(URL) Dim reader As StreamReader = New StreamReader(data) Dim str As String = "" str = reader.ReadLine() Do While str.Length > 0 Console.WriteLine(str) str = reader.ReadLine() Loop End Sub
Try Dim _WebRequest As System.Net.WebRequest = Nothing _WebRequest = System.Net.WebRequest.Create(http: Catch ex As Exception Windows.Forms.MessageBox.Show(ex.Message) Exit Sub End Try Try _NormalImage = Image.FromStream(_WebRequest.GetResponse().GetResponseStream()) Catch ex As Exception Windows.Forms.MessageBox.Show(ex.Message) Exit Sub End Try
WebRequest request = WebRequest.CreateDefault(RequestUrl); request.Method = "GET"; WebResponse response; try { response = request.GetResponse(); } catch (WebException exc) { response = exc.Response; } if (response == null) throw new HttpException((int)HttpStatusCode.NotFound, "The requested url could not be found."); using(StreamReader reader = new StreamReader(response.GetResponseStream())) { string requestedText = reader.ReadToEnd(); }
Public Function getLoginresponce(ByVal email As String, ByVal password As String) As String Dim requestUrl As String = "your api" Dim request As HttpWebRequest = TryCast(WebRequest.Create(requestUrl), HttpWebRequest) Dim response As HttpWebResponse = TryCast(request.GetResponse(), HttpWebResponse) Dim dataStream As Stream = response.GetResponseStream() Dim reader As New StreamReader(dataStream) Dim responseFromServer As String = reader.ReadToEnd() Dim result = responseFromServer reader.Close() response.Close() Return result End Function
List<string> strList; List<int> intList; ArrayList someList;
Dim customers as new ArrayList Dim c as new Customer Dim m as new Manager customers.Add(c) customers.Add(m) For each c as Customer in customers console.writeline(c.Name) Next
Public Class MyStudent Public StudentId As Integer Public Sub New(newStudentId As Integer) StudentId = newStudentId End Sub End Class
Public Sub New(newStudentId As Integer) StudentId = newStudentId End Sub End Class
Public Function TestError() As String() Return {"foo", "bar"} End Function
Public Function TestOK() As String() Dim ar As String() = {"foo", "bar"} Return ar End Function
Public Function TestOK() As String() Return New String() {"foo", "bar"} End Function
Dim i as Integer() = {1, 2, 3, 4} Dim o() = {1, 2, 3}
Public Function TestError() As String() Return {"foo", "bar"} End Function
Public Class GlobalVariables Public Shared UserName As String = "Tim Johnson" Public Shared UserAge As Integer = 39 End Class
Public Class Form1 : Inherits Form Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles Me.Load MessageBox.Show("Hello, " & GlobalVariables.UserName) End Sub End Class
Public Module Module1 Public Foo As Integer End Module
Public Module DefineGlobals Public Parts As Integer Public FirstPrtAff As Long End Module
Public Class InitForm2 Private Sub InitForm_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load Parts = Parts + 3 End Sub End Class
Public Class Form1 Public Shared SomeValue As Integer = 5 End Class
Dim Parts as Integer parts = 3 GlobalVariables.parts += Parts
Public Class Form1 Friend sharevalue as string = "Boo"
Public Class Form1 Public Shared SomeValue As Integer = 5 End Class
MessageBox.Show("this is the number"&GlobalVariables.SomeValue)
Dim qp1 As New QueryParser("filename", New StandardAnalyzer()) Dim qp2 As New QueryParser("filetext", New StandardAnalyzer()) . .
IndexReader reader = IndexReader.Open("<lucene dir>"); Searcher searcher = new IndexSearcher(reader); BooleanQuery booleanQuery = new BooleanQuery(); Query query1 = new TermQuery(new Term("filename", "<text>")); Query query2 = new TermQuery(new Term("filetext", "<text>")); booleanQuery.add(query1, BooleanClause.Occur.SHOULD); booleanQuery.add(query2, BooleanClause.Occur.SHOULD); Hits hits = searcher.Search(booleanQuery);
IndexReader reader = IndexReader.Open("<lucene dir>"); Searcher searcher = new IndexSearcher(reader); Analyzer analyzer = new StandardAnalyzer(); MultiFieldQueryParser queryParser = new MultiFieldQueryParser( new string[] {"filename", "filetext"}, analyzer); Hits hits = searcher.Search(queryParser.parse("<text>"));
IndexReader reader = IndexReader.Open("<lucene dir>"); Searcher searcher = new IndexSearcher(reader); Analyzer analyzer = new StandardAnalyzer(); QueryParser queryParser = new QueryParser("<default field>", analyzer); string special = "filename:" + text + " OR filetext:" + text; Hits hits = searcher.Search(queryParser.parse(special));
Dim queryParser = New MultiFieldQueryParser(Version.LUCENE_29, indexReader__1.GetFieldNames(IndexReader.FieldOption.ALL).ToArray(), analyzer)
Dim directory As Directory = FSDirectory.Open(New DirectoryInfo(HostingEnvironment.MapPath(VirtualIndexPath))) Dim analyzer As Analyzer = New StandardAnalyzer(Version.LUCENE_29) Dim indexReader__1 As IndexReader = IndexReader.Open(directory, True) Dim indexSearch As Searcher = New IndexSearcher(indexReader__1) Dim queryParser = New MultiFieldQueryParser(Version.LUCENE_29, indexReader__1.GetFieldNames(IndexReader.FieldOption.ALL).ToArray(), analyzer) Dim query = queryParser.Parse(Criteria) Dim resultDocs As TopDocs = Nothing resultDocs = indexSearch.Search(query, indexReader__1.MaxDoc()) Dim hits = resultDocs.scoreDocs
If strMyString.Contains("Something") or ("Something2") Then End if
If strMyString.Contains("Something") OrElse strMyString.Contains("Something2") Then End if
If strMyString.Contains("Something") or strMyString.Contains("Something2") Then End if
Dim strMyString As String = "aaSomethingbb" Dim TargetString1 As String = "Something" Dim TargetString2 As String = "Something2" If strMyString.IndexOf(TargetString1) <> -1 Or strMyString.IndexOf(TargetString2) <> -1 Then End If
If strMyString.Contains("Most Likely To Find") OrElse strMyString.Contains("Less Likely to Find") Then End if
If strMyString.Contains("Something") or strMyString.Contains("Something2") Then
If strMyString.Contains("Something") or strMyString.Contains("Something2") Then End if
If strMyString.Tostring.Contains("Something") or strMyString.Tostring.Contains("Something2") Then End if
<TestCase("FirstNode", "<node id=\"FirstNode\">")> Public Sub GetNode_GivenSomeNodeId_ReturnCorrectNode(ByVal nodeId as String, ByVal expectedXml as String) (Call the method under test and request the xmlNode with the provided id...) Assert.AreEqual(expectedXml, returnedXml) End Sub
<Extension> Public Function MyExtension(value As Object) As Object Return value End Function
Dim myObj1 As New Object() Dim myObj2 = myObj1.MyExtension()
<Extension()> Public Function NullSafeToString(Of T)(this As T) As String If this is Nothing Then Return String.Empty End If Return this.ToString() End Function
<Extension()> Public Sub Dump(ByVal obj As Object) Console.WriteLine(obj) End Sub
Dim text1 As String = MyExtModule.NullSafeToString(DataGridView1.Rows(0).Cells(0).Value)
If someString.IsIn("a", "b", "c") Then DoSomething() Else If someInt.IsIn(1, 2, 3) Then DoSomethingElse() Else If someObj.IsIn(1, "q", DoSomethingTheThirdWay() End If
Imports System.Runtime.CompilerServices Public Module ObjectExtensions <Extension()> Public Function IsIn(obj As Object, ParamArray values() As Object) As Boolean For Each val As Object In values If val.Equals(obj) Then Return True Next Return False End Function End Module
dim results = from a in articles _ where a.articleID = 4 _ select a.articleName dim createArticle as string = _ "Create table article " & _ " (articleID int " & _ " ,articleName varchar(50) " & _ " )"
Dim s as string = <s><![CDATA[Line 1 line 2 line 3]]></s>.Value
dim results as String = "" results += "from a in articles " results += "where a.articleID = 4 " results += "select a.articleName"
Dim script As String = <code><![CDATA[ <script type="text/javascript"> var URL = </script>]]> </code>.value
dim createArticle as string = "Create table article " & " (articleID int " & " ,articleName varchar(50) " & " )"
dim results = from a in articles where a.articleID = 4 select a.articleName
Dim s = <sql> Create table article (articleID int -- sql comment ,articleName varchar(50) <comment text="here ) </sql>.Value
Dim alertText = "Hello World" Dim js = <script> $(document).ready(function() { alert( }); </script>.ToString
Cannot access a disposed object. Object name: at System.Windows.Forms.Control.CreateHandle() at System.Windows.Forms.Control.get_Handle() at System.Windows.Forms.Control.PointToScreen(Point p) at Dbi.WinControl.Schedule.dbiSchedule.a(Boolean A_0) at Dbi.WinControl.Schedule.dbiSchedule.a(Object A_0, EventArgs A_1) at System.Windows.Forms.Timer.OnTick(EventArgs e) at System.Windows.Forms.Timer.TimerNativeWindow.WndProc(Message& m) at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)
Private Sub myForm_FormClosing(ByVal sender As System.Object, ByVal e As System.Windows.Forms.FormClosingEventArgs) Handles MyBase.FormClosing _formIsClosing = True _timer.Stop() _timer.Dispose() End Sub
Private Sub Timer_Elapsed(ByVal sender As System.Object, ByVal e As System.Timers.ElapsedEventArgs) Handles _timer.Elapsed _timer.Stop() If Not _formIsClosing Then _timer.Interval = _refreshInterval _timer.Start() End If End Sub
<ValidateInput(False), AcceptVerbs(HttpVerbs.Post)> _
<AcceptVerbs(HttpVerbs.Post), ValidateInput(False)> _
<ValidateInput(False)> _ <AcceptVerbs(HttpVerbs.Post)> _
<system.Web> ... <httpRuntime requestValidationMode="2.0"/>
var shouldPerformRequestValidation = controllerContext.Controller.ValidateRequest && bindingContext.ModelMetadata.RequestValidationEnabled; var valueProviderResult = bindingContext.GetValueFromValueProvider(shouldPerformRequestValidation); if (valueProviderResult != null) { var theValue = valueProviderResult.AttemptedValue; }
public class InputModel { [AllowHtml] public string HtmlInput { get; set; } } ... [ValidateInput(false)] public async Task<ActionResult> ControllerMethod(InputModel model) { }
GlobalFilters.Filters.Add(new ValidateInputAttribute(false));
string separator = ", "; int len = separator.Length * (list.Count - 1); foreach (string s in list) len += s.Length; StringBuilder builder = new StringBuilder(len); builder.Append(list[0]); for (int i = 1; i < list.Count; i++) { builder.Append(separator).Append(list[i]); } string result = builder.ToString();
string = ["a","2"]\n newstring = "" endOfString = len(string)-1 for item in string: newstring = newstring + item if item != string[endOfString]: newstring = newstring ","'
dim str as string = "" for each item as string in lst str += ("," & item) next return str.substring(1)
<asp:FileUpload ID="certificateUploader" runat="server"/>
<Triggers> <asp:PostBackTrigger ControlID="btnCertificateUpload" /> </Triggers>
Page.Form.Attributes.Add("enctype", "multipart/form-data");
<asp:UpdatePanel ID="UpdatePanel1" UpdateMode="Always" runat="server"> <ContentTemplate> <asp:FileUpload ID="FileUpload1" runat="server" /> <asp:Button ID="UploadButton" runat="server" Text="Upload Selected File" OnClick="UploadButton_Click" /> <asp:Label ID="UploadDetails" runat="server" Text=""></asp:Label> </ContentTemplate> <Triggers> <asp:PostBackTrigger ControlID="UploadButton" /> </Triggers> </asp:UpdatePanel>
protected void UploadButton_Click(object sender, EventArgs e) { if (FileUpload1.HasFile == false) { UploadDetails.Text = "Please first select a file to upload..."; } else { string FileName = FileUpload1.FileName; UploadDetails.Text = string.Format( @"Uploaded file: {0}<br /> File size (in bytes): {1:N0}<br /> Content-type: {2}", FileName, FileUpload1.FileBytes.Length, FileUpload1.PostedFile.ContentType); string filePath = Server.MapPath("~/Brochures/" + FileUpload1.FileName); FileUpload1.SaveAs(filePath); } }
<input id="filMyFile" type="file" runat="server"></input>
HttpPostedFile myFile = filMyFile.PostedFile; string fullPath=Server.MapPath("~/UploadDocuments/") + myFile.FileName; myFile.SaveAs(fullPath);
Public Function GetSomeStringValue(Value as Integer) As String ... Code Goes here Return Some_Multicharacter_string End Function
Public Function GetSomeStringValue() As String ... Code Goes here Return Some_Multicharacter_String End Function
For i as integer = myStringList.Count-1 to 0 step -1 dim s as string = myStringList.Item(i) Next i
myStringList.Reverse() For Each s As String In myStringList Next
<Serializable()> Public Class SomeCollection Inherits CollectionBase Public Sub New() End Sub Public Sub Add(ByVal Value As Something) Me.List.Add(Value) End Sub Public Sub Remove(ByVal Value As Something) Me.List.Remove(Value) End Sub Public Function Contains(ByVal Value As Something) As Boolean Return Me.List.Contains(Value) End Function Public Function Item(ByVal Index As Integer) As Something Return DirectCast(Me.List.Item(Index), Something) End Function Public Function Reverse() As SomeCollection Dim revList As SomeCollection = New SomeCollection() For index As Integer = (Me.List.Count - 1) To 0 Step -1 revList.List.Add(Me.List.Item(index)) Next Return revList End Function End Class
For Each s As Something In SomeCollection.Reverse Next
Dim ff As New List(Of Integer) For Each rRow As DataRow In DeletedRows Dim item As Integer item = rRow.Table.Rows.IndexOf(rRow) ff.Add(item) Next For i As Integer = ff.Count - 1 To 0 Step -1 dim item as integer=ff(i) next i
For Each Id as Tkey in MyCollection.Keys.Reverse Next
dim revList as New List (of ToolStripItem) For each objItem as ToolStripItem in Menu.DropDownItems revList.Add(objItem) next revList.reverse
Sub Main() Dim i As Integer Dim b As Boolean i = 1 b = i i = b Console.WriteLine(i) i = Convert.ToInt32(b) Console.WriteLine(i) End Sub
i = 1 b = i i = b Console.WriteLine(i) i = Convert.ToInt32(b) Console.WriteLine(i)
Dim i As Byte Dim b As Boolean = True i = b Dim i As SByte Dim b As Boolean = True i = b
Dim b As Boolean b = False Dim i As Integer i = IIf(b, 1, 0)
Dim intValue as integer = 65 Dim strValue As String = Char.ConvertFromUtf32(intValue)
dim t As New TimeSpan(105, 56, 47) Console.WriteLine($"{CInt(Math.Truncate(t.TotalHours))}h {t:mm}mn {t:ss}sec")
String.Format("{0}hr {1:mm}mn {1:ss}sec", _ CInt(Math.Truncate(t.TotalHours)), _ t)
<?xml version="1.0" encoding="utf-8" ?> <nlog xmlns="http: xmlns:xsi="http: <targets> <!--<target name="logfile" xsi:type="File" fileName="C:\Users\keithb\Desktop\TestLog.txt" />--> <target name="Mail" xsi:type="Mail" html="true" subject="Error Received" body="${message}" to="user2@someemaill.com" from="user@someemail.com" Encoding="UTF8" smtpUsername="user@someemail.com" enableSsl="False" smtpPassword="pa$$word" smtpAuthentication="Basic" smtpServer="mail.someemail.com" smtpPort="25" /> </targets> <rules> <!--<logger name="*" minlevel="Debug" writeTo="logfile" />--> <logger name="*" level="Error" writeTo="Mail" /> <logger name="*" level="Fatal" writeTo="Mail" /> </rules> </nlog>
Imports NLog Public Class HandleGetRouteInfo Private Shared logger As Logger = LogManager.GetCurrentClassLogger() Public Shared Function GetRouteInfo(ByVal routeInfo As RequestGetRouteInfo) As GetRouteInfoResponse logger.Fatal("User" & routeInfo.UserName & "has entered the GetRouteInfo Method.") logger.Error("User" & routeInfo.UserName & "has entered the GetRouteInfo Method.") Dim str As String = logger.Name End Function End Class
<system.net> <mailSettings> <smtp from="someone@someone.org"> <network host="server.net" userName="someone@someone.org" password="somepassword"/> </smtp> <!--Just and example of for testing. Cant have both--> <smtp deliveryMethod="SpecifiedPickupDirectory" from="someone@someone.org"> <network host="localhost"/> <specifiedPickupDirectory pickupDirectoryLocation="d:\tmp\email"/> </smtp> </mailSettings> </system.net>
If <![CDATA[ Multiline comment about this and that Comment about this and that and so on with lots of lines ]]> Is Nothing Then : End If
If <![CDATA[ Multiline comment about this and that ... Is Nothing Then : End If
myVal = "bla bla bla" _ + " more of the same " _ + " and still more "
myVal = "bla bla bla" + " more of the same " + " and still more "
Public Class MyClass Public Sub MyMethod() End Sub End Class
Dim myvar As MyClass = New MyClass() myvar.MyMethod()
Public Class MyClass Public Shared Sub MyMethod() End Sub End Class
Dim s As String = "hello" s.Replace("h", "j") s = String.Concat(s, " there!");
Public Interface IFoo Property Description() As String End Interface Public MustInherit Class FooBase Private _Description As String Public Property Description() As String Get Return _Description End Get Set(ByVal value As String) _Description = value End Set End Property End Class Public Class MyFoo Inherits FooBase Implements IFoo End Class
Public MustInherit Class FooBase Private _Description As String Public Overridable Property Description() As String Get Return _Description End Get Set(ByVal value As String) _Description = value End Set End Property End Class Public Class MyFoo Inherits FooBase Implements IFoo Public Overrides Property Description() As String Implements IFoo.Description Get Return MyBase.Description End Get Set(ByVal value As String) MyBase.Description = value End Set End Property End Class
Dim X As FooBase = New MyFoo() Trace.WriteLine(X.Description)
Public Class MyFoo Inherits FooBase Implements IFoo Overloads Property Description() As String Implements IFoo.Description Get Return MyBase.Description End Get Set(ByVal value As String) MyBase.Description = value End Set End Property End Class
Public Class MyFoo Inherits FooBase Implements IFoo Public Overrides Property Description() As String Implements IFoo.Description Get Return MyBase.Description End Get Set(ByVal value As String) MyBase.Description = value End Set End Property End Class
Public Interface IFoo Property Description() As String End Interface Public MustInherit Class FooBase Implements IFoo Public MustOverride Property Description As String Implements IFoo.Description End Class Public Class MyFoo Inherits FooBase Private _description As String Public Overrides Property Description As String Get Return _description End Get Set(value As String) _description = value End Set End Property End Class
Public Class MyFoo Inherits FooBase Implements IFoo Private Property IFoo_Description() As String Implements IFoo.Description Get Return Me.Description End Get Set(ByVal value As String) Me.Description = value End Set End Property End Class
<configuration> ... <supportedRuntime version="v2.0.50727"/> </configuration">
[DllImport("gdi32.dll")] public static extern uint GetFontUnicodeRanges(IntPtr hdc, IntPtr lpgs); [DllImport("gdi32.dll")] public extern static IntPtr SelectObject(IntPtr hDC, IntPtr hObject); public struct FontRange { public UInt16 Low; public UInt16 High; } public List<FontRange> GetUnicodeRangesForFont(Font font) { Graphics g = Graphics.FromHwnd(IntPtr.Zero); IntPtr hdc = g.GetHdc(); IntPtr hFont = font.ToHfont(); IntPtr old = SelectObject(hdc, hFont); uint size = GetFontUnicodeRanges(hdc, IntPtr.Zero); IntPtr glyphSet = Marshal.AllocHGlobal((int)size); GetFontUnicodeRanges(hdc, glyphSet); List<FontRange> fontRanges = new List<FontRange>(); int count = Marshal.ReadInt32(glyphSet, 12); for (int i = 0; i < count; i++) { FontRange range = new FontRange(); range.Low = (UInt16)Marshal.ReadInt16(glyphSet, 16 + i * 4); range.High = (UInt16)(range.Low + Marshal.ReadInt16(glyphSet, 18 + i * 4) - 1); fontRanges.Add(range); } SelectObject(hdc, old); Marshal.FreeHGlobal(glyphSet); g.ReleaseHdc(hdc); g.Dispose(); return fontRanges; } public bool CheckIfCharInFont(char character, Font font) { UInt16 intval = Convert.ToUInt16(character); List<FontRange> ranges = GetUnicodeRangesForFont(font); bool isCharacterPresent = false; foreach (FontRange range in ranges) { if (intval >= range.Low && intval <= range.High) { isCharacterPresent = true; break; } } return isCharacterPresent; }
<DllImport("gdi32.dll")> _ Public Shared Function GetFontUnicodeRanges(ByVal hds As IntPtr, ByVal lpgs As IntPtr) As UInteger End Function <DllImport("gdi32.dll")> _ Public Shared Function SelectObject(ByVal hDc As IntPtr, ByVal hObject As IntPtr) As IntPtr End Function Public Structure FontRange Public Low As UInt16 Public High As UInt16 End Structure Public Function GetUnicodeRangesForFont(ByVal font As Font) As List(Of FontRange) Dim g As Graphics Dim hdc, hFont, old, glyphSet As IntPtr Dim size As UInteger Dim fontRanges As List(Of FontRange) Dim count As Integer g = Graphics.FromHwnd(IntPtr.Zero) hdc = g.GetHdc() hFont = font.ToHfont() old = SelectObject(hdc, hFont) size = GetFontUnicodeRanges(hdc, IntPtr.Zero) glyphSet = Marshal.AllocHGlobal(CInt(size)) GetFontUnicodeRanges(hdc, glyphSet) fontRanges = New List(Of FontRange) count = Marshal.ReadInt32(glyphSet, 12) For i = 0 To count - 1 Dim range As FontRange = New FontRange range.Low = Marshal.ReadInt16(glyphSet, 16 + (i * 4)) range.High = range.Low + Marshal.ReadInt16(glyphSet, 18 + (i * 4)) - 1 fontRanges.Add(range) Next SelectObject(hdc, old) Marshal.FreeHGlobal(glyphSet) g.ReleaseHdc(hdc) g.Dispose() Return fontRanges End Function Public Function CheckIfCharInFont(ByVal character As Char, ByVal font As Font) As Boolean Dim intval As UInt16 = Convert.ToUInt16(character) Dim ranges As List(Of FontRange) = GetUnicodeRangesForFont(font) Dim isCharacterPresent As Boolean = False For Each range In ranges If intval >= range.Low And intval <= range.High Then isCharacterPresent = True Exit For End If Next range Return isCharacterPresent End Function
[DllImport("gdi32.dll", EntryPoint = "CreateDC", CharSet = CharSet.Auto, SetLastError = true)] private static extern IntPtr CreateDC(string lpszDriver, string lpszDeviceName, string lpszOutput, IntPtr devMode); [DllImport("gdi32.dll", ExactSpelling = true, SetLastError = true)] private static extern bool DeleteDC(IntPtr hdc); [DllImport("Gdi32.dll")] private static extern IntPtr SelectObject(IntPtr hdc, IntPtr hgdiobj); [DllImport("Gdi32.dll", CharSet = CharSet.Unicode)] private static extern int GetGlyphIndices(IntPtr hdc, [MarshalAs(UnmanagedType.LPWStr)] string lpstr, int c, Int16[] pgi, int fl); public static bool CanDisplayString(string fontName, string text) { try { IntPtr hdc = CreateDC("DISPLAY", null, null, IntPtr.Zero); if (hdc != IntPtr.Zero) { using (Font font = new Font(new FontFamily(fontName), 12, FontStyle.Regular, GraphicsUnit.Point)) { SelectObject(hdc, font.ToHfont()); int count = text.Length; Int16[] rtcode = new Int16[count]; GetGlyphIndices(hdc, text, count, rtcode, 0xffff); DeleteDC(hdc); foreach (Int16 code in rtcode) if (code == 0) return false; } } } catch (Exception) { Trap.trap(); } return true; }
Protected Function Unsign(ByVal Input As Int16) As UInt16 If Input > -1 Then Return CType(Input, UInt16) Else Return UInt16.MaxValue - (Not Input) End If End Function
For i As Integer = 0 To count - 1 Dim range As FontRange = New FontRange range.Low = Unsign(Marshal.ReadInt16(glyphSet, 16 + (i * 4))) range.High = range.Low + Unsign(Marshal.ReadInt16(glyphSet, 18 + (i * 4)) - 1) fontRanges.Add(range) Next
public static void ParseName(this string s, out string prefix, out string first, out string middle, out string last, out string suffix) { prefix = ""; first = ""; middle = ""; last = ""; suffix = ""; List<string> parts = Regex.Split(s, @"(?<=[., ])").ToList(); for (int x = parts.Count - 1; x >= 0; x--) if (parts[x].Trim() == "") parts.RemoveAt(x); if (parts.Count > 0) { string[] prefixes = { "mr", "mrs", "ms", "dr", "miss", "sir", "madam", "mayor", "president" }; string normalizedPart = parts.First().Replace(".", "").Replace(",", "").Trim().ToLower(); if (prefixes.Contains(normalizedPart)) { prefix = parts[0].Trim(); parts.RemoveAt(0); } } if (parts.Count > 0) { string[] suffixes = { "jr", "sr", "i", "ii", "iii", "iv", "v", "vi", "vii", "viii", "ix", "x", "xi", "xii", "xiii", "xiv", "xv" }; string normalizedPart = parts.Last().Replace(".", "").Replace(",", "").Trim().ToLower(); if (suffixes.Contains(normalizedPart)) { suffix = parts.Last().Replace(",", "").Trim(); parts.RemoveAt(parts.Count - 1); } } if (parts.Count == 0) return; if (parts.Count == 1) { if(prefix == "") first = parts.First().Replace(",", "").Trim(); else last = parts.First().Replace(",", "").Trim(); } else if (parts.First().EndsWith(",")) { last = parts.First().Replace(",", "").Trim(); for (int x = 1; x < parts.Count; x++) first += parts[x].Replace(",", "").Trim() + " "; first = first.Trim(); } else { first = parts.First().Replace(",", "").Trim(); last = parts.Last().Replace(",", "").Trim(); for (int x = 1; x < parts.Count - 1; x++) middle += parts[x].Replace(",", "").Trim() + " "; middle = middle.Trim(); } }
string name = "Miss Jessica Dark-Angel Alba"; string prefix, first, middle, last, suffix; name.ParseName(out prefix, out first, out middle, out last, out suffix);
Name = Name.Trim(); arrNames = Name.Split( if (arrNames.Length > 0) { GivenName = arrNames[0]; } if (arrNames.Length > 1) { FamilyName = arrNames[arrNames.Length - 1]; } if (arrNames.Length > 2) { MiddleName = string.Join(" ", arrNames, 1, arrNames.Length - 2); }
/^ \s* (?:((?:Dr.)|(?:Mr.)|(?:Mr?s.)|(?:Miss)|(?:2nd\sLt.)|(?:Sen\.?))\s+)? ((?:\w+)|(?:\w\.)) (?: \s+ ((?:\w\.?)|(?:\w\w+)) )? (?: \s+ ((?:[OD][ (?: ,? \s+ ( (?:[JS]r\.?) | (?:Esq\.?) | (?: (?:M)|(?:Ph)|(?:Ed) \.?\s*D\.?) | (?: R\.?N\.?) | (?: I+) ) )? \s* $/x
To Me, _______________________ (standard subscribed corrospondence) To Me ( Myself | I ), ________ (standard recipient instigated corrospondence) To Me Myself I, ______________ (look out, its your mother, and you nobody addresses a person by their actual full name) Dear *(Mr./Mrs./Ms./Dr./Hon./Sen.) Me M. I *(I), To Whom it may Concern;
Name Parts | Correct | Percent of Names in DB 2 100% 48% 3 98% 42% 4 70% 9% 5 45% 0.25%
<cfset var nameString = REReplace(LCase(nameString), "(^[[:alpha:]]|[[:blank:]][[:alpha:]])", "\U\1\E", "ALL")>
public class FullNameDTO { public string Prefix { get; set; } public string FirstName { get; set; } public string MiddleName { get; set; } public string LastName { get; set; } public string Suffix { get; set; } } public static class FullName { public static FullNameDTO GetFullNameDto(string fullName) { string[] knownPrefixes = { "mr", "mrs", "ms", "miss", "dr", "sir", "madam", "master", "fr", "rev", "atty", "hon", "prof", "pres", "vp", "gov", "ofc" }; string[] knownSuffixes = { "jr", "sr", "ii", "iii", "iv", "v", "esq", "cpa", "dc", "dds", "vm", "jd", "md", "phd" }; string[] lastNamePrefixes = { "da", "de", "del", "dos", "el", "la", "st", "van", "von" }; var prefix = string.Empty; var firstName = string.Empty; var middleName = string.Empty; var lastName = string.Empty; var suffix = string.Empty; var fullNameDto = new FullNameDTO { Prefix = prefix, FirstName = firstName, MiddleName = middleName, LastName = lastName, Suffix = suffix }; var namePartsList = Regex.Split(fullName, "(?<=[., ])").ToList(); for (var x = namePartsList.Count - 1; x >= 0; x--) { if (namePartsList[x].Trim() == string.Empty) { namePartsList.RemoveAt(x); } } for (var x = namePartsList.Count - 1; x >= 0; x--) { namePartsList[x] = namePartsList[x].Trim(); } if (namePartsList.Count == 1) { firstName = namePartsList.First().Replace(",", string.Empty).Trim(); fullNameDto.FirstName = firstName; namePartsList.RemoveAt(0); } if (namePartsList.Count > 0) { var cleanedPart = namePartsList.First() .Replace(".", string.Empty) .Replace(",", string.Empty) .Trim() .ToLower(); if (knownPrefixes.Contains(cleanedPart)) { prefix = namePartsList[0].Trim(); fullNameDto.Prefix = prefix; namePartsList.RemoveAt(0); } } if (namePartsList.Count > 0) { foreach (var namePart in namePartsList) { var cleanedPart = namePart.Replace(",", string.Empty) .Trim() .ToLower(); if (!knownSuffixes.Contains(cleanedPart.Replace(".", string.Empty))) { continue; } if (namePart.ToLower() == "jr" && namePart != namePartsList.Last()) { continue; } suffix = namePart.Replace(",", string.Empty).Trim(); fullNameDto.Suffix = suffix; namePartsList.Remove(namePart); break; } } if (namePartsList.Count == 0) { return fullNameDto; } if (namePartsList.Count == 1) { if (prefix == string.Empty) { firstName = namePartsList.First().Replace(",", string.Empty).Trim(); fullNameDto.FirstName = firstName; } else { lastName = namePartsList.First().Replace(",", string.Empty).Trim(); fullNameDto.LastName = lastName; } } else if (namePartsList.First().EndsWith(",") || (namePartsList.Count >= 3 && namePartsList.Any(n => n == ",") && namePartsList.Last() != ",")) { if (namePartsList.First().EndsWith(",")) { lastName = namePartsList.First().Replace(",", string.Empty).Trim(); fullNameDto.LastName = lastName; namePartsList.Remove(namePartsList.First()); firstName = namePartsList.First(); fullNameDto.FirstName = firstName; namePartsList.Remove(namePartsList.First()); if (!namePartsList.Any()) { return fullNameDto; } foreach (var namePart in namePartsList) { middleName += namePart.Trim() + " "; } fullNameDto.MiddleName = middleName; return fullNameDto; } var indexOfComma = namePartsList.IndexOf(","); if (indexOfComma == 1) { namePartsList.Remove(namePartsList[indexOfComma]); lastName = namePartsList.First().Replace(",", string.Empty).Trim(); fullNameDto.LastName = lastName; namePartsList.Remove(namePartsList.First()); firstName = namePartsList.First(); fullNameDto.FirstName = firstName; namePartsList.Remove(namePartsList.First()); if (!namePartsList.Any()) { return fullNameDto; } foreach (var namePart in namePartsList) { middleName += namePart.Trim() + " "; } fullNameDto.MiddleName = middleName; return fullNameDto; } if (indexOfComma == 2) { var possibleLastPrefix = namePartsList.First() .Replace(".", string.Empty) .Replace(",", string.Empty) .Trim() .ToLower(); if (lastNamePrefixes.Contains(possibleLastPrefix)) { namePartsList.Remove(namePartsList[indexOfComma]); var lastPrefix = namePartsList.First().Trim(); namePartsList.Remove(lastPrefix); lastName = $"{lastPrefix} {namePartsList.First().Replace(",", string.Empty).Trim()}"; fullNameDto.LastName = lastName; namePartsList.Remove(namePartsList.First()); } else { lastName = namePartsList.First().Replace(",", string.Empty).Trim(); namePartsList.Remove(namePartsList.First()); lastName = lastName + " " + namePartsList.First().Replace(",", string.Empty).Trim(); namePartsList.Remove(namePartsList.First()); fullNameDto.LastName = lastName; } namePartsList.Remove(","); firstName = namePartsList.First(); fullNameDto.FirstName = firstName; namePartsList.Remove(namePartsList.First()); if (!namePartsList.Any()) { return fullNameDto; } foreach (var namePart in namePartsList) { middleName += namePart.Trim() + " "; } fullNameDto.MiddleName = middleName; return fullNameDto; } } else { if (namePartsList.Count >= 3) { firstName = namePartsList.First().Replace(",", string.Empty).Trim(); fullNameDto.FirstName = firstName; namePartsList.RemoveAt(0); var possibleLastPrefix = namePartsList[namePartsList.Count - 2] .Replace(".", string.Empty) .Replace(",", string.Empty) .Trim() .ToLower(); if (lastNamePrefixes.Contains(possibleLastPrefix)) { lastName = $"{namePartsList[namePartsList.Count - 2].Trim()} {namePartsList[namePartsList.Count -1].Replace(",", string.Empty).Trim()}"; fullNameDto.LastName = lastName; namePartsList.RemoveAt(namePartsList.Count - 1); namePartsList.RemoveAt(namePartsList.Count - 1); } else { lastName = namePartsList.Last().Replace(",", string.Empty).Trim(); fullNameDto.LastName = lastName; namePartsList.RemoveAt(namePartsList.Count - 1); } middleName = string.Join(" ", namePartsList).Trim(); fullNameDto.MiddleName = middleName; namePartsList.Clear(); } else { if (namePartsList.Count == 1) { lastName = namePartsList.First().Replace(",", string.Empty).Trim(); fullNameDto.LastName = lastName; namePartsList.RemoveAt(0); } else { var possibleLastPrefix = namePartsList.First() .Replace(".", string.Empty) .Replace(",", string.Empty) .Trim() .ToLower(); if (lastNamePrefixes.Contains(possibleLastPrefix)) { lastName = $"{namePartsList.First().Replace(",", string.Empty).Trim()} {namePartsList.Last().Replace(",", string.Empty).Trim()}"; fullNameDto.LastName = lastName; namePartsList.Clear(); } else { firstName = namePartsList.First().Replace(",", string.Empty).Trim(); fullNameDto.FirstName = firstName; namePartsList.RemoveAt(0); lastName = namePartsList.Last().Replace(",", string.Empty).Trim(); fullNameDto.LastName = lastName; namePartsList.Clear(); } } } } namePartsList.Clear(); fullNameDto.Prefix = prefix; fullNameDto.FirstName = firstName; fullNameDto.MiddleName = middleName; fullNameDto.LastName = lastName; fullNameDto.Suffix = suffix; return fullNameDto; } }
Function IsValidEmailFormat(ByVal s As String) As Boolean Try Dim a As New System.Net.Mail.MailAddress(s) Catch Return False End Try Return True End Function
Function IsValidEmailFormat(ByVal s As String) As Boolean Return Regex.IsMatch(s, "^([0-9a-zA-Z]([-\.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$") End Function
Function ValidEmail(ByVal strCheck As String) As Boolean Try Dim bCK As Boolean Dim strDomainType As String Const sInvalidChars As String = "! Dim i As Integer bCK = Not InStr(1, strCheck, Chr(34)) > 0 If Not bCK Then GoTo ExitFunction bCK = Not InStr(1, strCheck, "..") > 0 If Not bCK Then GoTo ExitFunction If Len(strCheck) > Len(sInvalidChars) Then For i = 1 To Len(sInvalidChars) If InStr(strCheck, Mid(sInvalidChars, i, 1)) > 0 Then bCK = False GoTo ExitFunction End If Next Else For i = 1 To Len(strCheck) If InStr(sInvalidChars, Mid(strCheck, i, 1)) > 0 Then bCK = False GoTo ExitFunction End If Next End If If InStr(1, strCheck, "@") > 1 Then bCK = Len(Left(strCheck, InStr(1, strCheck, "@") - 1)) > 0 Else bCK = False End If If Not bCK Then GoTo ExitFunction strCheck = Right(strCheck, Len(strCheck) - InStr(1, strCheck, "@")) bCK = Not InStr(1, strCheck, "@") > 0 If Not bCK Then GoTo ExitFunction strDomainType = Right(strCheck, Len(strCheck) - InStr(1, strCheck, ".")) bCK = Len(strDomainType) > 0 And InStr(1, strCheck, ".") < Len(strCheck) If Not bCK Then GoTo ExitFunction strCheck = Left(strCheck, Len(strCheck) - Len(strDomainType) - 1) Do Until InStr(1, strCheck, ".") <= 1 If Len(strCheck) >= InStr(1, strCheck, ".") Then strCheck = Left(strCheck, Len(strCheck) - (InStr(1, strCheck, ".") - 1)) Else bCK = False GoTo ExitFunction End If Loop If strCheck = "." Or Len(strCheck) = 0 Then bCK = False ExitFunction: ValidEmail = bCK Catch ex As ArgumentException Return False End Try Return ValidEmail End Function
Private Sub txtemailid_KeyPress(ByVal sender As System.Object, ByVal e As System.Windows.FormsKeyPressEventArgs) Handles txtemailid.KeyPress Dim ac As String = "@" If e.KeyChar <> ChrW(Keys.Back) Then If Asc(e.KeyChar) < 97 Or Asc(e.KeyChar) > 122 Then If Asc(e.KeyChar) <> 46 And Asc(e.KeyChar) <> 95 Then If Asc(e.KeyChar) < 48 Or Asc(e.KeyChar) > 57 Then If ac.IndexOf(e.KeyChar) = -1 Then e.Handled = True Else If txtemailid.Text.Contains("@") And e.KeyChar = "@" Then e.Handled = True End If End If End If End If End If End If End Sub
Private Sub txtemailid_Validating(ByVal sender As System.Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtemailid.Validating Dim pattern As String = "^[a-z][a-z|0-9|]*([_][a-z|0-9]+)*([.][a-z|0-9]+([_][a-z|0-9]+)*)?@[a-z][a-z|0-9|]*\.([a-z][a-z|0-9]*(\.[a-z][a-z|0-9]*)?)$" Dim match As System.Text.RegularExpressions.Match = Regex.Match(txtemailid.Text.Trim(), pattern, RegexOptions.IgnoreCase) If (match.Success) Then MessageBox.Show("Success", "Checking") Else MessageBox.Show("Please enter a valid email id", "Checking") txtemailid.Clear() End If End Sub
Public Function ValidateEmail(ByVal strCheck As String) As Boolean Try Dim vEmailAddress As New System.Net.Mail.MailAddress(strCheck) Catch ex As Exception Return False End Try Return True End Function
"(?:(?:\r\n)?[ \t])*(?:(?:(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t]" + ")+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|""(?:[^\""\r\\]|\\.|(?:(?:\r\n)?[ \t]))*""(?:(?:" + "\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(" + "?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|""(?:[^\""\r\\]|\\.|(?:(?:\r\n)?[ " + "\t]))*""(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t])*(?:[^()<>@,;:\\"".\[\] \000-\0" + "31]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|\[([^\[\]\r\\]|\\.)*\" + "](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,;:\\"".\[\] \000-\031]+" + "(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:" + "(?:\r\n)?[ \t])*))*|(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z" + "|(?=[\[""()<>@,;:\\"".\[\]]))|""(?:[^\""\r\\]|\\.|(?:(?:\r\n)?[ \t]))*""(?:(?:\r\n)" + "?[ \t])*)*\<(?:(?:\r\n)?[ \t])*(?:@(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\" + "r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[" + " \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)" + "?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t]" + ")*))*(?:,@(?:(?:\r\n)?[ \t])*(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[" + " \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*" + ")(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t]" + ")+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*)" + "*:(?:(?:\r\n)?[ \t])*)?(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+" + "|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|""(?:[^\""\r\\]|\\.|(?:(?:\r\n)?[ \t]))*""(?:(?:\r" + "\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:" + "\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|""(?:[^\""\r\\]|\\.|(?:(?:\r\n)?[ \t" + "]))*""(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t])*(?:[^()<>@,;:\\"".\[\] \000-\031" + "]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|\[([^\[\]\r\\]|\\.)*\](" + "?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,;:\\"".\[\] \000-\031]+(?" + ":(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?" + ":\r\n)?[ \t])*))*\>(?:(?:\r\n)?[ \t])*)|(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?" + ":(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|""(?:[^\""\r\\]|\\.|(?:(?:\r\n)?" + "[ \t]))*""(?:(?:\r\n)?[ \t])*)*:(?:(?:\r\n)?[ \t])*(?:(?:(?:[^()<>@,;:\\"".\[\] " + "\000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|""(?:[^\""\r\\]|" + "\\.|(?:(?:\r\n)?[ \t]))*""(?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>" + "@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|""" + "(?:[^\""\r\\]|\\.|(?:(?:\r\n)?[ \t]))*""(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t]" + ")*(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\" + """.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?" + ":[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[" + "\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*|(?:[^()<>@,;:\\"".\[\] \000-" + "\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|""(?:[^\""\r\\]|\\.|(" + "?:(?:\r\n)?[ \t]))*""(?:(?:\r\n)?[ \t])*)*\<(?:(?:\r\n)?[ \t])*(?:@(?:[^()<>@,;" + ":\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|\[([" + "^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,;:\\""" + ".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|\[([^\[\" + "]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*(?:,@(?:(?:\r\n)?[ \t])*(?:[^()<>@,;:\\"".\" + "[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|\[([^\[\]\" + "r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,;:\\"".\[\] " + "\000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|\[([^\[\]\r\\]" + "|\\.)*\](?:(?:\r\n)?[ \t])*))*)*:(?:(?:\r\n)?[ \t])*)?(?:[^()<>@,;:\\"".\[\] \0" + "00-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|""(?:[^\""\r\\]|\\" + ".|(?:(?:\r\n)?[ \t]))*""(?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@," + ";:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|""(?" + ":[^\""\r\\]|\\.|(?:(?:\r\n)?[ \t]))*""(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t])*" + "(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\""." + "\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[" + "^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\]" + "]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*\>(?:(?:\r\n)?[ \t])*)(?:,\s*(" + "?:(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\" + """.\[\]]))|""(?:[^\""\r\\]|\\.|(?:(?:\r\n)?[ \t]))*""(?:(?:\r\n)?[ \t])*)(?:\.(?:(" + "?:\r\n)?[ \t])*(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[" + "\[""()<>@,;:\\"".\[\]]))|""(?:[^\""\r\\]|\\.|(?:(?:\r\n)?[ \t]))*""(?:(?:\r\n)?[ \t" + "])*))*@(?:(?:\r\n)?[ \t])*(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t" + "])+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?" + ":\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|" + "\Z|(?=[\[""()<>@,;:\\"".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*|(?:" + "[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\"".\[\" + "]]))|""(?:[^\""\r\\]|\\.|(?:(?:\r\n)?[ \t]))*""(?:(?:\r\n)?[ \t])*)*\<(?:(?:\r\n)" + "?[ \t])*(?:@(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""" + "()<>@,;:\\"".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)" + "?[ \t])*(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>" + "@,;:\\"".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*(?:,@(?:(?:\r\n)?[" + " \t])*(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@," + ";:\\"".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t]" + ")*(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\" + """.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*)*:(?:(?:\r\n)?[ \t])*)?" + "(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[""()<>@,;:\\""." + "\[\]]))|""(?:[^\""\r\\]|\\.|(?:(?:\r\n)?[ \t]))*""(?:(?:\r\n)?[ \t])*)(?:\.(?:(?:" + "\r\n)?[ \t])*(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[" + """()<>@,;:\\"".\[\]]))|""(?:[^\""\r\\]|\\.|(?:(?:\r\n)?[ \t]))*""(?:(?:\r\n)?[ \t])" + "*))*@(?:(?:\r\n)?[ \t])*(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])" + "+|\Z|(?=[\[""()<>@,;:\\"".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\" + ".(?:(?:\r\n)?[ \t])*(?:[^()<>@,;:\\"".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z" + "|(?=[\[""()<>@,;:\\"".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*\>(?:(" + "?:\r\n)?[ \t])*))*)?;\s*)"
Public Class email Public Shared Function isValid(ByVal emailAddress As String, Optional ByVal disallowLocalDomain As Boolean = True, Optional ByVal allowAlerts As Boolean = True ) As Boolean Try Dim mailParts() As String = emailAddress.Split("@") If mailParts.Length <> 2 Then If allowAlerts Then MsgBox("Valid email addresses are formatted [sample@domain.tld]. " & "Your address is missing a header [i.e. ""@domain.tld""].", MsgBoxStyle.Exclamation, "No Header Specified") End If Return False End If If mailParts(mailParts.GetLowerBound(0)) = "" Then If allowAlerts Then MsgBox("Valid email addresses are formatted [sample@domain.tld]. " & "The username portion of the e-mail address you provided (before the @ symbol) is empty.", MsgBoxStyle.Exclamation, "Invalid Email User") End If Return False End If Dim headerParts() As String = mailParts(mailParts.GetUpperBound(0)).Split(".") If disallowLocalDomain AndAlso headerParts.Length < 2 Then If allowAlerts Then MsgBox("Valid email addresses are formatted [sample@domain.tld]. " & "Although addresses formatted like [sample@domain] are valid, " & "only addresses with headers like ""sample.org"", ""sample.com"", and etc. " & "[i.e. @domain.org] are accepted.", MsgBoxStyle.Exclamation, "Invalid Header") End If Return False ElseIf headerParts(headerParts.GetLowerBound(0)) = "" Or headerParts(headerParts.GetUpperBound(0)) = "" Then If allowAlerts Then MsgBox("Valid email addresses are formatted [sample@domain.tld]. " & "Your header """ & mailParts(mailParts.GetUpperBound(0)) & """ is invalid.", MsgBoxStyle.Exclamation, "Invalid Header") End If Return False End If Dim address As MailAddress = New MailAddress(emailAddress) Catch ex As Exception If allowAlerts Then MsgBox(ex.Message, MsgBoxStyle.Exclamation, "Invalid Email Address") End If Return False End Try Return True End Function End Class
Public Shared Function ValidEmailAddress(ByVal emailAddress As String, ByRef errorMessage As String) As Boolean If emailAddress.Length = 0 Then errorMessage = "E-mail address is required." Return False End If If emailAddress.IndexOf("@") > -1 Then If (emailAddress.IndexOf(".", emailAddress.IndexOf("@")) > emailAddress.IndexOf("@")) AndAlso emailAddress.Split(".").Length > 0 AndAlso emailAddress.Split(".")(1) <> "" Then errorMessage = "" Return True End If End If errorMessage = "E-mail address must be valid e-mail address format." Return False End Function
Dim m_equipmentList As New List(Of Schedule_Payitem)
m_equipmentList.Sort(Function(p1, p2) p1.ResourceID.CompareTo(p2.ResourceID))
Public Class PayItemResourceComparer Implements IComparer(Of Schedule_PayItem) Public Function Compare(ByVal p1 As Schedule_PayItem, _ ByVal p2 As Schedule_PayItem) As Integer Return p1.ResourceID.CompareTo(p2.ResourceID) End Function End Class ... m_equipmentList.Sort(New PayItemResourceComparer)
m_equipmentList.Sort( (payItem1,payItem2)=>payItem1.ResourceID.CompareTo(payItem2.ResourceID));
m_equipmentList.Sort( Function (ByVal payItem1 As Schedule_Payitem, ByVal payItem2 As Schedule_Payitem) Return payItem1.ResourceID.CompareTo(payItem2.ResourceID) End Function)
m_equipmentList.Sort( Function (ByVal payItem1 As Schedule_Payitem, ByVal payItem2 As Schedule_Payitem) Return payItem1.ResourceID.CompareTo(payItem2.ResourceID) End Function)
m_equipmentList.Sort( Function (ByVal payItem1 As Schedule_Payitem, ByVal payItem2 As Schedule_Payitem) Return payItem2.ResourceID.CompareTo(payItem1.ResourceID) End Function)
Dim m_equipmentList As New List(Of Schedule_Payitem) m_equipmentList.Sort(delegate(Schedule_Payitem p1, Schedule_Payitem p2) { return p1.resourceid .CompareTo(p2.resourceid ); });
Module Module1 Sub Main() Dim x = 0 Console.WriteLine(PlusEqual1(x)) Console.WriteLine(Add1(x)) Console.WriteLine(PlusEqual2(x)) Console.WriteLine(Add2(x)) Console.ReadLine() End Sub Public Function PlusEqual1(ByVal x As Integer) As Integer x += 1 Return x End Function Public Function Add1(ByVal x As Integer) As Integer x = x + 1 Return x End Function Public Function PlusEqual2(ByVal x As Integer) As Integer x += 2 Return x End Function Public Function Add2(ByVal x As Integer) As Integer x = x + 2 Return x End Function End Module
.method public static int32 Add1(int32 x) cil managed { .maxstack 2 .locals init ( [0] int32 Add1) L_0000: nop L_0001: ldarg.0 L_0002: ldc.i4.1 L_0003: add.ovf L_0004: starg.s x L_0006: ldarg.0 L_0007: stloc.0 L_0008: br.s L_000a L_000a: ldloc.0 L_000b: ret }
.method public static int32 Add2(int32 x) cil managed { .maxstack 2 .locals init ( [0] int32 Add2) L_0000: nop L_0001: ldarg.0 L_0002: ldc.i4.2 L_0003: add.ovf L_0004: starg.s x L_0006: ldarg.0 L_0007: stloc.0 L_0008: br.s L_000a L_000a: ldloc.0 L_000b: ret }
static void Main(string[] args) { int i = 0; i += 1; i = i + 1; Console.WriteLine(i); }
private static void Main(string[] args) { int i = 0; i++; i++; Console.WriteLine(i); }
static void Main(string[] args) { int x = 2; int y = 3; x += 1; y = y + 1; Console.WriteLine(x); Console.WriteLine(y); }
ADD reg,reg add ax,bx 1 ADD mem,reg add total, cx 3 ADD reg,mem add cx,incr 2 ADD reg,immed add bx,6 1 ADD mem,immed add pointers[bx][si],6 3 ADD accum,immed add ax,10 1 INC reg inc bx 1 INC mem inc vpage 3 MOV reg,reg mov bp,sp 1 MOV mem,reg mov array[di],bx 1 MOV reg,mem mov bx,pointer 1 MOV mem,immed mov [bx],15 1 MOV reg,immed mov cx,256 1 MOV mem,accum mov total,ax 1 MOV accum,mem mov al,string 1 MOV segreg,reg16 mov ds,ax 2, 3 MOV segreg,mem16 mov es,psp 2, 3 MOV reg16,segreg mov ax,ds 1 MOV mem16,segreg mov stack_save,ss 1 MOV reg32,controlreg mov eax,cr0 22 mov eax,cr2 12 mov eax,cr3 21, 46 mov eax,cr4 14 MOV controlreg,reg32 mov cr0,eax 4 MOV reg32,debugreg mov edx,dr0 DR0-DR3,DR6,DR7=11; DR4,DR5=12 MOV debugreg,reg32 mov dr0,ecx DR0-DR3,DR6,DR7=11; DR4,DR5=12
;for i = i+1 ; cycles mov ax, [i] ; 1 add ax, 1 ; 1 mov [i], ax ; 1 ;for i += 1 ; dunno the syntax of instruction. it should be the pointers one :S ;for i++ inc i ; 3 ;or mov ax, [i] ; 1 inc ax ; 1 mov [i], ax ; 1 ;for ++i mov ax, [i] ; 1 ;do stuff ; matters not inc ax ; 1 mov [i], ax ; 1
=dateadd("m",-1,dateserial(year(Today),month(Today),1))
=dateadd("m",0,dateserial(year(Today),month(Today),1))
=dateadd("m",1,dateserial(year(Today),month(Today),1))
=dateadd("m",0,dateserial(year(Today),month(Today),0))
=dateadd("m",1,dateserial(year(Today),month(Today),0))
=dateadd("m",2,dateserial(year(Today),month(Today),0))
DateAdd("m", -1, DateSerial(Year(Today()), Month(Today()), 1))
DateSerial(Year(Today()),Month(DateAdd("m", 1, Today())),0)
Dim thisMonth As New DateTime(DateTime.Today.Year, DateTime.Today.Month, 1) Dim firstDayLastMonth As DateTime Dim lastDayLastMonth As DateTime firstDayLastMonth = thisMonth.AddMonths(-1) lastDayLastMonth = thisMonth.AddDays(-1)
Dim prevMonth As DateTime = yourDate.AddMonths(-1) Dim prevMonthStart As New DateTime(prevMonth.Year, prevMonth.Month, 1) Dim prevMonthEnd As New DateTime(prevMonth.Year, prevMonth.Month, DateTime.DaysInMonth(prevMonth.Year, prevMonth.Month))
new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(-1) new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddDays(-1)
StartDate =dateadd("d",0,dateserial(year(dateadd("d",-1,dateserial(year(Today),month(Today),1))),month(dateadd("d",-1,dateserial(year(Today),month(Today),1))),1)) End Date =dateadd("d",0,dateserial(year(Today),month(Today),1))
firstDayInPreviousMonth = DateSerial(Year(dtmDate), Month(dtmDate) - 1, 1)
lastDayInPreviousMonth = DateSerial(Year(dtmDate), Month(dtmDate), 0)
Dim aDate As DateTime = Dim StartDate As DateTime = aDate.AddMonths(-1).AddDays(-(aDate.Day - 1)) Dim EndDate As DateTime = StartDate.AddDays(DateTime.DaysInMonth(StartDate.Year, StartDate.Month) - 1)
=FormatDateTime(DateAdd("m", -1, DateSerial(Year(Today()), Month(Today()), 1)), DateFormat.ShortDate)
=dateadd("m",-1,dateserial(year(Today),month(Today),1))
Dim tempInt as Integer If Integer.TryParse(myInt, tempInt) Then
Public Module MyExtensions <System.Runtime.CompilerServices.Extension()> _ Public Function IsInteger(ByVal value As String) As Boolean If String.IsNullOrEmpty(value) Then Return False Else Return Integer.TryParse(value, Nothing) End If End Function End Module
<System.Runtime.CompilerServices.Extension()> _ Public Function ToInteger(ByVal value As String) As Integer If value.IsInteger() Then Return Integer.Parse(value) Else Return 0 End If End Function
public static class Util { public static Int32? ParseInt32(this string text) { Int32 result; if(!Int32.TryParse(text, out result)) return null; return result; } public static bool IsParseInt32(this string text) { return text.ParseInt32() != null; } }
Module IntegerHelpers Function IsInteger(ByVal p1 as String) as Boolean Dim unused as Integer = 0 return Integer.TryParse(p1,unused) End Function End Module
public static class MyIntExtensionClass { public static bool IsInteger(this string value) { if(string.IsNullOrEmpty(value)) return false; int dummy; return int.TryParse(value, dummy); } }
Int32.TryParse(input_string, Globalization.NumberStyles.Integer)
<system.diagnostics> <trace> <listeners> <!-- This next line is the troublemaker. It looks so innocent --> <clear/> </listeners> </trace> </system.diagnostics>
<system.diagnostics> <trace> <listeners> </listeners> </trace> </system.diagnostics>
Select Tools → Customize Commands Tab View | Other Windows menu bar dropdown Add Command... The Immediate option is in the Debug section.
<system.web> <trace enabled="false"/> </system.web>
Using client As New TheHTTPLib client.FormData("parm1") = "somevalue" result = client.DownloadString(someurl, Method.POST) End Using
Using client As New Net.WebClient Dim reqparm As New Specialized.NameValueCollection reqparm.Add("param1", "somevalue") reqparm.Add("param2", "othervalue") Dim responsebytes = client.UploadValues(someurl, "POST", reqparm) Dim responsebody = (New Text.UTF8Encoding).GetString(responsebytes) End Using
Using client as new WebClient result = client.UploadString(someurl, "param1=somevalue&param2=othervalue") End Using
WebRequest r = WebRequest.Create("http: r.Method = "POST"; using (var s = r.GetResponse().GetResponseStream()) { using (var reader = new StreamReader(r, FileMode.Open)) { var content = reader.ReadToEnd(); } }
Dim MyVar as string = "stm_bm(["menu53d0",400,"","blank2.gif",0,"","",0,0,250,0,1000,1,0,0,""],this);"
private List<TabPage> hiddenPages = new List<TabPage>(); private void EnablePage(TabPage page, bool enable) { if (enable) { tabControl1.TabPages.Add(page); hiddenPages.Remove(page); } else { tabControl1.TabPages.Remove(page); hiddenPages.Add(page); } } protected override void OnFormClosed(FormClosedEventArgs e) { foreach (var page in hiddenPages) page.Dispose(); base.OnFormClosed(e); }
TabControl1.TabPages.Remove(TabPage1) TabControl1.TabPages.Remove(TabPage2)
TabControl1.TabPages.Insert(0, TabPage1) TabControl1.TabPages.Insert(1, TabPage2)
public static class TabPageExtensions { private struct TabPageData { internal int Index; internal TabControl Parent; internal TabPage Page; internal TabPageData(int index, TabControl parent, TabPage page) { Index = index; Parent = parent; Page = page; } internal static string GetKey(TabControl tabCtrl, TabPage tabPage) { string key = ""; if (tabCtrl != null && tabPage != null) { key = String.Format("{0}:{1}", tabCtrl.Name, tabPage.Name); } return key; } } private static Dictionary<string, TabPageData> hiddenPages = new Dictionary<string, TabPageData>(); public static void SetVisible(this TabPage page, TabControl parent) { if (parent != null && !parent.IsDisposed) { TabPageData tpinfo; string key = TabPageData.GetKey(parent, page); if (hiddenPages.ContainsKey(key)) { tpinfo = hiddenPages[key]; if (tpinfo.Index < parent.TabPages.Count) parent.TabPages.Insert(tpinfo.Index, tpinfo.Page); else parent.TabPages.Add(tpinfo.Page); hiddenPages.Remove(key); } } } public static void SetInvisible(this TabPage page) { if (IsVisible(page)) { TabControl tabCtrl = (TabControl)page.Parent; TabPageData tpinfo; tpinfo = new TabPageData(tabCtrl.TabPages.IndexOf(page), tabCtrl, page); tabCtrl.TabPages.Remove(page); hiddenPages.Add(TabPageData.GetKey(tabCtrl, page), tpinfo); } } public static bool IsVisible(this TabPage page) { return page != null && page.Parent != null; } public static void CleanUpHiddenPages(this TabPage page) { foreach (TabPageData info in hiddenPages.Values) { if (info.Parent != null && info.Parent.Equals((TabControl)page.Parent)) info.Page.Dispose(); } } }
If Me.chkShowTab1.Checked = True Then Me.tabsShown.TabPages.Add(Me.tabsHidden.TabPages("Tab1")) Me.tabsHidden.TabPages.RemoveByKey("Tab1") Else Me.tabsHidden.TabPages.Add(Me.tabsShown.TabPages("Tab1")) Me.tabsShown.TabPages.RemoveByKey("Tab1") End If
Public Class Form1 Dim State1 As Integer = 1 Dim AllTabs As List(Of TabPage) = New List(Of TabPage) Private Sub Button2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button2.Click Check1(State1) State1 = CInt(IIf(State1 = 1, 0, 1)) End Sub Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load AllTabs.Add(TabControl1.TabPages("TabPage1")) AllTabs.Add(TabControl1.TabPages("TabPage2")) End Sub Sub Check1(ByVal No As Integer) If TabControl1.TabPages.ContainsKey("TabPage1") Then TabControl1.TabPages.Remove(TabControl1.TabPages("TabPage1")) End If If TabControl1.TabPages.ContainsKey("TabPage2") Then TabControl1.TabPages.Remove(TabControl1.TabPages("TabPage2")) End If TabControl1.TabPages.Add(AllTabs(No)) End Sub End Class
public static Action<Func<TabPage, bool>> GetTabHider(this TabControl container) { if (container == null) throw new ArgumentNullException("container"); var orderedCache = new List<TabPage>(); var orderedEnumerator = container.TabPages.GetEnumerator(); while (orderedEnumerator.MoveNext()) { var current = orderedEnumerator.Current as TabPage; if (current != null) { orderedCache.Add(current); } } return (Func<TabPage, bool> where) => { if (where == null) throw new ArgumentNullException("where"); container.TabPages.Clear(); foreach (TabPage page in orderedCache) { if (where(page)) { container.TabPages.Add(page); } } }; }
var showOnly = this.TabContainer1.GetTabHider(); showOnly((tab) => tab.Text != "tabPage1");
PropertyTabControl.TabPages.Clear(); PropertyTabControl.TabPages.Add(AspectTabPage); PropertyTabControl.TabPages.Add(WerkstattTabPage);
PropertyTabControl.TabPages.Clear(); PropertyTabControl.TabPages.Add(TerminTabPage);
tabControl1.Appearance = TabAppearance.FlatButtons; tabControl1.ItemSize = new Size(0, 1); tabControl1.SizeMode = TabSizeMode.Fixed;
foreach (TabPage tab in tabControl1.TabPages) { tab.Text = ""; }
myTabControl.TabPages(9).Hide() myTabControl.TabPages(9).Show()
Public Class CS_Control_TabControl Inherits System.Windows.Forms.TabControl Private mTabPagesHidden As New Dictionary(Of String, System.Windows.Forms.TabPage) Private mTabPagesOrder As List(Of String) Public Sub HideTabPageByName(ByVal TabPageName As String) If mTabPagesOrder Is Nothing Then mTabPagesOrder = New List(Of String) For Each TabPageCurrent As TabPage In Me.TabPages mTabPagesOrder.Add(TabPageCurrent.Name) Next End If If Me.TabPages.ContainsKey(TabPageName) Then Dim TabPageToHide As TabPage TabPageToHide = TabPages(TabPageName) mTabPagesHidden.Add(TabPageName, TabPageToHide) Me.TabPages.Remove(TabPageToHide) End If End Sub Public Sub ShowTabPageByName(ByVal TabPageName As String) If mTabPagesHidden.ContainsKey(TabPageName) Then Dim TabPageToShow As TabPage TabPageToShow = mTabPagesHidden(TabPageName) Me.TabPages.Insert(GetTabPageInsertionPoint(TabPageName), TabPageToShow) mTabPagesHidden.Remove(TabPageName) End If End Sub Private Function GetTabPageInsertionPoint(ByVal TabPageName As String) As Integer Dim TabPageIndex As Integer Dim TabPageCurrent As TabPage Dim TabNameIndex As Integer Dim TabNameCurrent As String For TabPageIndex = 0 To Me.TabPages.Count - 1 TabPageCurrent = Me.TabPages(TabPageIndex) For TabNameIndex = TabPageIndex To mTabPagesOrder.Count - 1 TabNameCurrent = mTabPagesOrder(TabNameIndex) If TabNameCurrent = TabPageCurrent.Name Then Exit For End If If TabNameCurrent = TabPageName Then Return TabPageIndex End If Next Next Return TabPageIndex End Function Protected Overrides Sub Finalize() mTabPagesHidden = Nothing mTabPagesOrder = Nothing MyBase.Finalize() End Sub End Class
Public Shared HiddenTabs As New List(Of TabPage)() Public Shared Visibletabs As New List(Of TabPage)() Public Shared Function ShowTab(tab_ As TabPage, show_tab As Boolean) Select Case show_tab Case True If Visibletabs.Contains(tab_) = False Then Visibletabs.Add(tab_) If HiddenTabs.Contains(tab_) = True Then HiddenTabs.Remove(tab_) Case False If HiddenTabs.Contains(tab_) = False Then HiddenTabs.Add(tab_) If Visibletabs.Contains(tab_) = True Then Visibletabs.Remove(tab_) End Select For Each r In HiddenTabs Try Dim TC As TabControl = r.Parent If TC.Contains(r) = True Then TC.TabPages.Remove(r) Catch ex As Exception End Try Next For Each a In Visibletabs Try Dim TC As TabControl = a.Parent If TC.Contains(a) = False Then TC.TabPages.Add(a) Catch ex As Exception End Try Next End Function
public static class WinFormExtensions { public static TabPage FindTabByNameExt( this TabControl tc, string tabName) { foreach (TabPage tab in tc.TabPages) if (tab.Name == tabName) return tab; return null; } private struct TabPageData { internal int Index; internal TabControl Parent; internal TabPage Page; internal TabPageData(int index, TabControl parent, TabPage page) { Index = index; Parent = parent; Page = page; } internal static string GetKey(TabControl tc, TabPage tabPage) { string key = ""; if (tc == null || tabPage == null) return key; key = $"{tc.Name}:{tabPage.Name}"; return key; } internal static string GetKey(TabControl tc, string tabName) { string key = ""; if (tc == null) return key; key = $"{tc.Name}:{tabName}"; return key; } } private static Dictionary<string, TabPageData> hiddenPages = new Dictionary<string, TabPageData>(); public static void SetTabVisibleExt(this TabControl tc, string tabName) { if (tc == null || tc.IsDisposed) return; if (tc.IsTabVisibleExt(tabName)) return; string key = TabPageData.GetKey(tc, tabName); if (hiddenPages.ContainsKey(key)) { TabPageData tpinfo = hiddenPages[key]; if (tpinfo.Index < tc.TabPages.Count) tc.TabPages.Insert(tpinfo.Index, tpinfo.Page); else tc.TabPages.Add(tpinfo.Page); hiddenPages.Remove(key); return; } else throw new ApplicationException($"TabControl={tc.Name} does not have Invisible TabPage={tabName}"); } public static void SetTabInvisibleExt(this TabControl tc, string tabName) { if (tc == null || tc.IsDisposed) return; if (IsTabInvisibleExt(tc, tabName)) return; TabPage page = tc.FindTabByNameExt(tabName); if (page != null) { string key = TabPageData.GetKey(tc, page); TabPageData tpInfo = new TabPageData(tc.TabPages.IndexOf(page), tc, page); tc.TabPages.Remove(page); hiddenPages.Add(key, tpInfo); return; } else throw new ApplicationException($"TabControl={tc.Name} could not locate TabPage={tabName}"); } public static void SetTabVisibilityExt(this TabControl tc, string tabName, bool? isVisible) { if (isVisible == null) return; if (isVisible.Value) tc.SetTabVisibleExt(tabName); else tc.SetTabInvisibleExt(tabName); } public static bool IsTabVisibleExt(this TabControl tc, string tabName) { TabPage page = tc.FindTabByNameExt(tabName); return page != null; } public static bool IsTabInvisibleExt(this TabControl tc, string tabName) { string key = TabPageData.GetKey(tc, tabName); return hiddenPages.ContainsKey(key); } public static void CleanUpHiddenPagesExt(this TabControl tc) { foreach (TabPageData info in hiddenPages.Values) { if (info.Parent != null && info.Parent.Equals((TabControl)tc)) info.Page.Dispose(); } } }
public static void HideByRemoval(this TabPage tp) { TabControl tc = tp.Parent as TabControl; if (tc != null && tc.TabPages.Contains(tp)) { tp.Tag = new Tuple<TabControl, Int32>(tc, tc.TabPages.IndexOf(tp)); tc.TabPages.Remove(tp); } } public static void ShowByInsertion(this TabPage tp) { Tuple<TabControl, Int32> tagObj = tp.Tag as Tuple<TabControl, Int32>; if (tagObj?.Item1 != null) { tagObj.Item1.TabPages.Insert(tagObj.Item2, tp); } }
TabPanel1.Visible = true; TabPanel1.Visible = false;
Console.WriteLine(System.Web.HttpUtility.UrlEncode(" "));
Private Shared ReadOnly log As ILog = LogManager.GetLogger("")
If log.IsDebugEnabled Then log.Debug("Integration Services Constructed") End If
[assembly: log4net.Config.XmlConfigurator(ConfigFile = "log4net.config", Watch = true)]
<Assembly: log4net.Config.XmlConfigurator(Watch:=True)>
<root> <level value="ALL" /> <appender-ref ref="AppenderName" /> </root>
using System.Windows.Controls; // Menu myMenu = new Menu(); myMenu.Items.Add(new Separator());
<Menu> <MenuItem Header="Menu Item 1" /> <Separator /> <MenuItem Header="Menu Item 1" /> <Menu>
Public Sub (Something As WhateverClass) Something = New WhateverClass Something.Property1 = "Test" End Sub
& -> Long % -> Integer ! -> Single @ -> Decimal $ -> String
Dim s$ = "FooBar" Dim r As String Stop r = Replace$(s, "Bar", "") r = s.Replace("Bar", "")
<DefaultProperty("Value")> _ Public Class GenericStat ... Public Property Value() As Integer ... End Property ... End Class
Public Class Sample Private mValue As Integer Default Public ReadOnly Property Test(ByVal index As Integer) As Integer Get Return index End Get End Property End Class
Sub Main() Dim s As New Sample Console.WriteLine(s(42)) Console.ReadLine() End Sub
<System.Reflection.DefaultMember("AnotherTest")> _ Public Class Sample Public ReadOnly Property AnotherTest() As Integer Get Return 42 End Get End Property End Class
public class Sample { public int this[int index] { get { return index; } } }
Public Class GenericStat ... Public Property Value() As Integer ... End Property ... Public Sub New(ByVal Value As Integer) _Value = Value End Sub ' Public Shared Widening Operator CType(ByVal val As Integer) As GenericStat Return New GenericStat(val) End Operator ' Public Shared Widening Operator CType(ByVal val As GenericStat) As Integer Return val.Value End Operator End Class
Dim myVal as Integer myVal = 15 If myVal = 15 then ... End If
myVal.SomeReadOnlyProperty (as String) myVal.SomeOtherReadOnlyProperty (as Integer)
GetSomeReadOnlyProperty(ByVal pVal as Integer) as String GetSomeOtherReadOnlyProperty(ByVal pVal as Integer) as Integer
Public Shared Widening Operator CType(ByVal val As Integer) As MySpecialIntType Return New MySpecialIntType(val) End Operator Public Shared Narrowing Operator CType(ByVal val As MySpecialIntType) As Integer Return val.Value End Operator Public Shared Operator =(ByVal pSpecialTypeParameter As MySpecialIntType, ByVal pInt As Integer) As Boolean Return pSpecialTypeParameter.Value = pInt End Operator Public Shared Operator <>(ByVal pSpecialTypeParameter As MySpecialIntType, ByVal pInt As Integer) As Boolean Return pSpecialTypeParameter.Value <> pInt End Operator
Public Overrides Function ToString() As String Return Me.Value.ToString End Function
Public Class MyClass Private m_Stats(100) As Stats Public Property StatValue(ByVal stat_number As Integer) As _ Integer Get Return m_Stats(stat_number) End Get Set(ByVal Value As Integer) m_Stats(stat_number) = Value End Set End Property End Class
Public Class GenericStat(Of Ttype) Public Property Value As Ttype ' Public Sub New() End Sub ' Public Sub New(ByVal Value As Ttype) _Value = Value End Sub ' Public Shared Widening Operator CType(ByVal val As Ttype) As GenericStat(Of Ttype) Return New GenericStat(Of Ttype)(val) End Operator ' Public Shared Widening Operator CType(ByVal val As GenericStat(Of Ttype)) As Ttype Return val.Value End Operator End Class
Dim MyInteger As GenericStat(Of Integer) MyInteger = 123 Dim Int As Integer Int = MyInteger Dim MyString As GenericStat(Of String) MyString = "MyValue" Dim Str As String Str = MyString
Dim mailAddress As MailAddress Try mailAddress = New MailAddress("testing@invalid@email.com") Catch ex As Exception End Try
public static string FixEmailAddress(string emailAddress) { string result = ""; emailAddress = emailAddress.Replace(";",","); if (emailAddress.Contains(",")) { List<string> results = new List<string>(); string[] emailAddresses = emailAddress.Split(new char[] { foreach (string e in emailAddresses) { string temp = FixEmailAddress(e); if (temp != "") { results.Add(temp); } } result = string.Join(",", results); } else { try { System.Net.Mail.MailAddress email = new System.Net.Mail.MailAddress(emailAddress); result = email.Address; } catch (Exception) { result = ""; } } return result;
Dim stream As New MemoryStream(File.ReadAllBytes(filename))
string fullPath = Path.Combine(filePath, fileName); FileStream fileStream = new FileStream(fullPath, FileMode.Open); Image image = Image.FromStream(fileStream); MemoryStream memoryStream = new MemoryStream(); image.Save(memoryStream, ImageFormat.Jpeg); fileStream.Close();
<asp:DropDownList ID="DropDownList1" runat="server" AppendDataBoundItems="true"> <asp:ListItem Text="--Select One--" Value="" /> </asp:DropDownList>
<asp:RequiredFieldValidator ID="RequiredFieldValidator1" runat="server" ControlToValidate="DropDownList1"></asp:RequiredFieldValidator>
protected void dropdown_DataBound(object sender, EventArgs e) { DropDownList list = sender as DropDownList; if (list != null) list.Items.Insert(0, "--Select One--"); }
protected void LoadPersonComboBox() { var p = new PeopleBLL(); rcmbboxEditPerson.DataSource = p.GetPeople(); rcmbboxEditPerson.DataBind(); rcmbboxEditPerson.Text = "Please select an existing person to edit..."; }
<asp:DropDownList id="country" runat="server" CssClass="selectOne" DataSourceID="country_code" DataTextField="Name" DataValueField="CountryCode_PK" ></asp:DropDownList> <asp:SqlDataSource id="country_code" runat="server" ConnectionString="<%$ ConnectionStrings:DBConnectionString %>" SelectCommand="SELECT CountryCode_PK, CountryCode_PK + ></asp:SqlDataSource>
if (this.IsPostBack) { } else { country.SelectedValue = "US"; }
<asp:DropDownList ID="DropDownList1" runat="server" AppendDataBoundItems="true"></asp:DropDownList>
DropDownList1.Items[DropDownList1.SelectedIndex].Value
<asp:DropDownList ID="DropDownList1" runat="server" AppendDataBoundItems="true"> <asp:ListItem Text="--Select One--" Value="" /> </asp:DropDownList>
Protected Sub DepartmentDropDownList_DataBound(ByVal sender As Object, ByVal e As System.EventArgs) Handles DepartmentDropDownList.DataBound If Not Page.IsPostBack Then DepartmentDropDownList.SelectedValue = "somevalue" End If End Sub
dropdownlist.Items.Insert(0, new Listitem("--Select One--", "0");
switch (parameter) { case "userID": case "packageID": case "mvrType": if (otherFactor) { } else { goto default; } default: break; }
Select Case parameter Case "userID" Case "packageID" Case "mvrType" If otherFactor Then Else GoTo Case Else End If Case Else Exit Select End Select
If otherFactor AndAlso parameter = "mvrType" Then Else End If
switch (args[0]) { case "UserID": Console.Write("UserID"); break; case "PackageID": Console.Write("PackageID"); break; case "MVRType": if (args[1] == "None") Console.Write("None"); else goto default; break; default: Console.Write("Default"); break; }
Dim CS$4$0000 As String = args(0) If (Not CS$4$0000 Is Nothing) Then If (CS$4$0000 = "UserID") Then Console.Write("UserID") Return End If If (CS$4$0000 = "PackageID") Then Console.Write("PackageID") Return End If If ((CS$4$0000 = "MVRType") AndAlso (args(1) = "None")) Then Console.Write("None") Return End If End If Console.Write("Default")
Select Case parameter Case "userID" Case "packageID" Case "mvrType" If otherFactor Then Else Exit Select End If End Select
Select Case parameter Case "userID" Case "packageID" Case "mvrType" If otherFactor Then Else GoTo caseElse End If Case Else caseElse: End Select
If parameter = "userID" Then ElseIf parameter = "packageID" Then ElseIf parameter = "mvrType" AndAlso otherFactor Then Else End If
Dim doSomething As Boolean Select Case parameter Case "userID" Case "packageID" Case "mvrType" If otherFactor Then Else doSomething = True End If Case Else doSomething = True End Select If doSomething Then End If
Select Case parameter Case "userID" Case "packageID" Case "mvrType" And otherFactor Case Else End Select
Select Case parameter Case "userID" Case "packageID" Case "mvrType" If otherFactor Then Else GoTo else End If Case Else else : Exit Select End Select
Select Case parameter Case "userID", "packageID", "mvrType" If otherFactor Then Else goto case default End If Case Else Exit Select End Select
Select Case parameter Case "userID", "packageID", "mvrType" If otherFactor Then Else goto case default End If Case Else Exit Select End Select
Select Case parameter Case "userID" Case "packageID" Case "mvrType" If otherFactor Then End If Case Else Exit Select End Select
Class MyDemoClass Dim mVar1 As Integer Private mVar2 As Integer End Class
Dim parm As New SqlParameter("searchText", SqlDbType.VarChar) parm.Direction = ParameterDirection.Input parm.Size = 50 parm.Value="test" cmd.Parameters.Add(parm)
Dim parm As New SqlParameter("@searchText", SqlDbType.VarChar) parm.Direction = ParameterDirection.Input parm.Size = 50 parm.Value="test" cmd.Parameters.Add(parm)
if (0 < parameterName.get_Length() && { parameterName = "@" + parameterName; }
Protected Overrides Sub WndProc(ByRef m As System.Windows.Forms.Message) If CInt(m.Msg) <> CInt(26) then MyBase.WndProc(m) end if End Sub
Public Class MyMessageFilter Implements IMessageFilter Public Function PreFilterMessage(ByRef m As Message) As Boolean Implements IMessageFilter.PreFilterMessage Return m.Msg = 26 End Function End Class
Protected Overrides Sub WndProc(ByRef m As System.Windows.Forms.Message) If CInt(m.Msg) <> CInt(26) Then MyBase.WndProc(m) Else MessageBox.Show("Get to work!", "Attention", MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1, MessageBoxOptions.ServiceNotification) End If End Sub
SendMessageTimeout(HWND_BROADCAST, WM_SETTINGCHANGE, IntPtr.Zero, IntPtr.Zero, _ SendMessageTimeoutFlags.SMTO_ABORTIFHUNG, 5000, IntPtr.Zero)
Public Class MyMessageFilter Implements IMessageFilter Public Function PreFilterMessage(ByRef m As Message) As Boolean Implements IMessageFilter.PreFilterMessage Return m.Msg = MessageToDiscard End Function End Class
Application.AddMessageFilter(New MyMessageFilter())
If (example Is Nothing Or example.Item IsNot compare.Item) Then End If
If (example Is Nothing Or Not example.Item = compare.Item) Then End If
If (example Is Nothing OrElse Not example.Item = compare.Item) Then End If
split = Regex.Split(temp_string, "< beginning of record >")
Dim myDelims As String() = New String(){"< beginning of record >"} split = temp_string.Split(myDelims, StringSplitOptions.None)
string[] myDelims = new string[] { "<beginning of record>" }; split = temp_string.Split(myDelims,StringSplitOptions.None);
Dim myDelims As String() = New String() { "<beginning of record>" } split = temp_string.Split(myDelims, StringSplitOptions.None)
Dim delim as String() = New String(0) { "<beginning of record>" } split = temp_string.Split(delim, StringSplitOptions.None)
dim s as string = "you have a <funny> thing <funny> going on" dim a() as string = Regex.Split(s,"<funny>") for each b as string in a Response.Write( b & "<br>") next
Dim results = "hay needle hay needle hay".Split("needle")
public static class Tools { public static string[] Split(this string input, params string[] delimiter) { return input.Split(delimiter, StringSplitOptions.None); } }
Module Tools <Extension()> _ Public Function Split(ByVal input As String, _ ByVal ParamArray delimiter As String()) As String() Return input.Split(delimiter, StringSplitOptions.None) End Function End Module
Dim myString As String = "aaajjbbbjjccc" Dim mySplit() As Char = "jj".ToCharArray Dim myResult() As String = myString.Split(mySplit, StringSplitOptions.RemoveEmptyEntries)
al /out:MyAssembly.dll MyOldAssembly.dll /keyfile:sgKey.snk
<Reference Include="OtherProjectNothingToDo"> <HintPath>..\..\..\..\Pedidos\XBAP\Pedidos\Pedidos\bin\Release\Pedidos.exe</HintPath> </Reference>
If TypeOf obj Is SomeClass Then someObj = DirectCast(obj, SomeClass) End If
someObj = TryCast(obj, SomeClass) If someObj IsNot Nothing Then End If
Sub MyMethod(ByVal Param1 As String, Optional ByVal FlagArgument As Boolean = True) If FlagArgument Then Console.WriteLine(Param1) End If End Sub
AddHandler theButton.Click, AddressOf Me.theButton_Click
Dim btn as Button = Nothing For Each ctrl As Control in myForm.Controls If TypeOf ctrl Is Button Then btn = DirectCast(ctrl, Button) AddHandler btn.Click, AddressOf Me.Button_Click End If Next
Dim Panel1 As new Panel() For i As Integer = 1 to 100 btn = New Button() Panel1.Controls.Add(btn) AddHandler btn.Click, AddressOf Me.Button_Click Next
Private Sub Button_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) End Sub
Private Sub btn_done_clicked(ByVal sender As System.Object, ByVal e As System.EventArgs) Dim selectedBtn As Button = sender MsgBox("you have clicked button " & selectedBtn.Name) End Sub
Private Sub btn_done_clicked(ByVal sender As System.Object, ByVal e As System.EventArgs) MsgBox.Show("you have clicked button " & CType(CType(sender, _ System.Windows.Forms.Button).Tag, String)) End Sub
Private Sub radioFit_Components_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) If sender.name = "radioFit_Components" And sender.visible Then If sender.checked Then For Each ctrl As Control In TabControl1.SelectedTab.Controls Select Case ctrl.Name Case "embChartSSE_Components" ctrl.BringToFront() Case "embChartSSE_Fit_Curve" ctrl.SendToBack() Case "dgvFit_Components" ctrl.BringToFront() End Select Next End If End If End Sub
Public Class MyEnumClass(of T) Public MyValue as T End Class
Public Function GetEnumInt(Of T)(enumVal As T) As Integer Return Convert.ToInt32(enumVal) End Function
Dim intVal As Integer For Each intVal In [Enum].GetValues(GetType(T)) Next
Sub GetEnumInt(of T)(enumVal as T) as Int return 0 + enumVal End Sub
Public Enum TypOfProtectWs pws_NotFound = 0 pws_AllowAll = 1 pws_AllowFormat = 2 pws_AllowNone = 3 End Enum Private Function TypOfProtectWs2I(pws As TypOfProtectWs) As Integer TypOfProtectWs2I = Format("0", pws) End Function Private Sub test_TypOfProtectWs2I() Debug.Print TypOfProtectWs2I(pws_AllowAll) End Sub
Public Sub Main() Application.EnableVisualStyles() Application.SetCompatibleTextRenderingDefault(False) Application.Run(New Form1) End Sub
Public Sub New() MyBase.New() InitializeComponent() End Sub
<Flags()> _ Enum CombinationEnums As Integer HasButton = 1 TitleBar = 2 ReadOnly = 4 ETC = 8 End Enum
Dim settings As CombinationEnums settings = CombinationEnums.TitleBar Or CombinationEnums.Readonly
If (settings And CombinationEnums.TitleBar) = CombinationEnums.TitleBar Then Window.TitleBar = True End If
<FlagsAttribute> _ Public Enumeration SecurityRights None = 0 Read = 1 Write = 2 Execute = 4
Public Sub New ( _ options As SecurityRights _ ) New UserPrivileges(SecurityRights.Read OR SecurityRights.Execute)
If (user.Privileges And SecurityRights.Write = SecurityRigths.Write) Then Else End If
<System.Runtime.CompilerServices.Extension()> _ Function RemoveAt(Of T)(ByVal arr As T(), ByVal index As Integer) As T() Dim uBound = arr.GetUpperBound(0) Dim lBound = arr.GetLowerBound(0) Dim arrLen = uBound - lBound If index < lBound OrElse index > uBound Then Throw New ArgumentOutOfRangeException( _ String.Format("Index must be from {0} to {1}.", lBound, uBound)) Else Dim outArr(arrLen - 1) As T Array.Copy(arr, 0, outArr, 0, index) Array.Copy(arr, index + 1, outArr, index, uBound - index) Return outArr End If End Function
Module Module1 Sub Main() Dim arr = New String() {"abc", "mno", "xyz"} arr.RemoveAt(1) End Sub End Module
<System.Runtime.CompilerServices.Extension()> _ Public Sub RemoveAt(Of T)(ByRef arr As T(), ByVal index As Integer) Dim uBound = arr.GetUpperBound(0) Dim lBound = arr.GetLowerBound(0) Dim arrLen = uBound - lBound If index < lBound OrElse index > uBound Then Throw New ArgumentOutOfRangeException( _ String.Format("Index must be from {0} to {1}.", lBound, uBound)) Else Dim outArr(arrLen - 1) As T Array.Copy(arr, 0, outArr, 0, index) Array.Copy(arr, index + 1, outArr, index, uBound - index) arr = outArr End If End Sub
Dim arr = New String() {"abc", "mno", "xyz"} arr.RemoveAt(1) RemoveAt(arr, 1) arr = arr.RemoveAt(1) arr = RemoveAt(arr, 1)
<System.Runtime.CompilerServices.Extension()> _ Public Sub RemoveAt(Of T)(ByRef a() As T, ByVal index As Integer) Array.Copy(a, index + 1, a, index, UBound(a) - index) ReDim Preserve a(UBound(a) - 1) End Sub
Dim a() As String = {"Albert", "Betty", "Carlos", "David"} a.RemoveAt(0) a.RemoveAt(1) a.RemoveAt(UBound(a))
<System.Runtime.CompilerServices.Extension()> _ Public Sub DropFirstElement(Of T)(ByRef a() As T) a.RemoveAt(0) End Sub <System.Runtime.CompilerServices.Extension()> _ Public Sub DropLastElement(Of T)(ByRef a() As T) a.RemoveAt(UBound(a)) End Sub
Dim arr() As String = {"uno", "dos", "tres", "cuatro", "cinco"} Dim indx As Integer = 2 arr = arr.Where(Function(item, index) index <> indx).ToArray
Imports System.Runtime.CompilerServices <Extension()> _ Public Sub RemoveAll(Of T)(ByRef arr As T(), matching As Predicate(Of T)) If Not IsNothing(arr) Then If arr.Count > 0 Then Dim ls As List(Of T) = arr.ToList ls.RemoveAll(matching) arr = ls.ToArray End If End If End Sub
arr.RemoveAll(Function(c) c.MasterContactID.Equals(customer.MasterContactID))
Public Sub ArrayDelAt(ByRef x As Array, ByVal stack As Integer) For i = 0 To x.Length - 2 If i >= stack Then x(i) = x(i + 1) x(x.Length-1) = Nothing End If Next End Sub
Dim myArray As String() = TextBox1.Lines Dim Counter As Integer = 0 For x = 0 To myArray.Count - 1 If Len(myArray(x)) < 1 Then Counter += 1 End If Next Dim tempArr(myArray.Count - Counter) As String Counter = -1 For x = 0 To myArray.Count - 1 If Len(myArray(x)) > 1 Then Counter += 1 tempArr(Counter) = myArray(x) End If Next
Using a As New Thingy(), _ b As New OtherThingy() ... End Using
Using w1 = File.CreateText("W1"), w2 = File.CreateText("W2") End Using
Dim d As Double d = 123.456 Dim s As String s = Trim(Str$(d))
Dim number As String = "07747(a)" If number.... Then endif
If Regex.IsMatch(number, "^[0-9 ]+$") Then ... End If
Dim number As String = "077 234 211" If number.Replace(" ", "").All(AddressOf Char.IsDigit) Then Console.WriteLine("The string is all numeric (spaces ignored)!") Else Console.WriteLine("The string contains a char that is not numeric and space!") End If
Dim PersonalInfo As String = "Personal Info" Dim Contanct As String = "Personal Contanct" Public Enum Test PersonalInfo Contanct End Enum
Class Test Private Key As String Public Shared ReadOnly Contact As Test = New Test("Personal Contanct") Public Shared ReadOnly PersonalInfo As Test = New Test("Personal Info") Private Sub New(key as String) Me.Key = key End Sub Public Overrides Function ToString() As String Return Me.Key End Function End Class
Sub Main DoSomething(Test.Contact) DoSomething(Test.PersonalInfo) End Sub Sub DoSomething(test As Test) Console.WriteLine(test.ToString()) End Sub
Structure Test Const PersonalInfo = "Personal Info" Const Contanct = "Personal Contanct" End Structure
Module Test Public Const PersonalInfo = "Personal Info" Public Const Contanct = "Personal Contanct" End Module
Enum Test Personal_Info Personal_Contanct End Enum Dim PersonalInfo As String = Test.Personal_Info.ToString.Replace("_"c, " "c) Dim Contanct As String = NameOf(Test.Personal_Contanct).Replace("_"c, " "c)
Public Enum MyEnum <StringValue("Personal Contact")>Contact <StringValue("My PersonalInfo")>PersonalInfo End Enum
Public Class StringValueAttribute Inherits Attribute Public Property Value As String Public Sub New(ByVal val As String) Value = val End Sub End Class
Public Function GetEnumByStringValueAttribute(value As String, enumType As Type) As Object For Each val As [Enum] In [Enum].GetValues(enumType) Dim fi As FieldInfo = enumType.GetField(val.ToString()) Dim attributes As StringValueAttribute() = DirectCast(fi.GetCustomAttributes(GetType(StringValueAttribute), False), StringValueAttribute()) Dim attr As StringValueAttribute = attributes(0) If attr.Value = value Then Return val End If Next Throw New ArgumentException("The value End Function Public Function GetEnumByStringValueAttribute(Of YourEnumType)(value As String) As YourEnumType Return CType(GetEnumByStringValueAttribute(value, GetType(YourEnumType)), YourEnumType) End Function
Dim mEnum as MyEnum = GetEnumByStringValueAttribute(Of MyEnum)("Personal Contact")
Public Function GetEnumValue(Of YourEnumType)(p As YourEnumType) As String Return DirectCast(Attribute.GetCustomAttribute(ForValue(p), GetType(StringValueAttribute)), StringValueAttribute).Value End Function Private Function ForValue(Of YourEnumType)(p As YourEnumType) As MemberInfo Return GetType(YourEnumType).GetField([Enum].GetName(GetType(YourEnumType), p)) End Function
Dim strValue as String = GetEnumValue(Of MyEnum)(MyEnum.Contact)
Public NotInheritable Class Link Public Const lrAutoSpeed As String = "scVirtualMaster<.lrAutoSpeed>" Public Const eSimpleStatus As String = "scMachineControl<.eSimpleStatus>" Public Const xLivebitHMI As String = "scMachineControl<.xLivebitHMI>" Public Const xChangeCycleActive As String = "scMachineControl<.xChangeCycleActive>" End Class
Private Enum MyEnum Select_an_option___ __ACCOUNTS__ Invoices0 Review_Invoice __MEETINGS__ Scheduled_Meetings0 Open_Meeting Cancelled_Meetings0 Current_Meetings0 End Enum
Select an option... **ACCOUNTS** Invoices Review Invoice **MEETINGS** Scheduled Meetings Open Meeting Cancelled Meetings Current Meetings
HttpUtility.ParseQueryString(Request.UrlReferrer.Query)["SYSTEM"]
HttpUtility.ParseQueryString(Request.UrlReferrer.Query())("SYSTEM")
HttpUtility.ParseQueryString(Request.UrlReferrer.Query).GetValues("SYSTEM")(0)
Select Case oReader.Name Case "NameExample1" Me.Elements.NameExample1.Value = oReader.ReadString .... Case "NameExampleN" Me.Elements.NameExampleN.Value = oReader.ReadString .... End Select
Dim sReadString As String = oReader.ReadString Me.Elements.InvokeProperty(sReadString).Value = sReadString
CallByName(yourClassOrObjectName,"NameExample1",CallType.Set,oReader.ReadString)
Dim count As Integer = 0 Console.WriteLine(count += 1)
ColumnName1 ColumnName2 value1 35 value2 44 value3 10
searchedValue = DataTable.Rows("value3").Item("ColumnName2)
Dim rows() AS DataRow = DataTable.Select("ColumnName1 = If rows.Count > 0 Then searchedValue = rows(0).Item("ColumnName2") End If
Dim row AS DataRow = DataTable.Select("ColumnName1 = If Not row Is Nothing Then searchedValue = row.Item("ColumnName2") End If
var row = DataTable.Select("ColumnName1 = if (row != null) searchedValue = row["ColumnName2"];
Public Class ColumnValue Public ColumnName As String Public ColumnValue As New Object End Class For Each row In [YourDataTable].Rows For Each item As DataColumn In row.Table.Columns Dim rowValue As New ColumnValue rowValue.ColumnName = item.Caption rowValue.ColumnValue = row.item(item.Ordinal) RowValues.Add(rowValue) rowValue = Nothing Next Dim results = (From p In RowValues Where p.ColumnName = "MyColumn" Select p.ColumnValue).FirstOrDefault Next
DataTable.Rows[RowNo].ItemArray[columnIndex].ToString()
Public Shared Function ToInteger(ByVal Value As String) As Integer Dim num As Integer If (Value Is Nothing) Then Return 0 End If Try Dim num2 As Long If Utils.IsHexOrOctValue(Value, (num2)) Then Return CInt(num2) End If num = CInt(Math.Round(Conversions.ParseDouble(Value))) Catch exception As FormatException Throw New InvalidCastException(Utils.GetResourceString("InvalidCast_FromStringTo", New String() { Strings.Left(Value, &H20), "Integer" }), exception) End Try Return num End Function
Try Catch ex As ThreadAbortException Catch ex As Exception HandleException(ex) End Try
Try Catch tex As ThreadAbortException Catch ex As Exception HandleException(ex) End Try
Try Catch ex As ThreadAbortException Dim i As Integer = 1 Catch ex As Exception HandleException(ex) End Try
Try Catch ex As Exception When Not TypeOf ex Is ThreadAbortException End Try
Try Throw New InvalidOperationException("MESSAGE") Catch ex As ArgumentException Catch ex As Exception Debug.WriteLine(ex) End Try
Try Catch ex As ThreadAbortException Catch ex As Exception HandleException(ex) End Try
private void button1_Click(object sender, EventArgs e) { try { if (textBox1.Text == "") { throw new ArgumentNullException("textBox1", "TextBox can not be empty"); } else { MyString(textBox1.Text); } } catch (ArgumentNullException ex) { } catch (Exception ex) { MessageBox.Show("Test: " + ex.Message); } } private int MyString(string text) { return int.Parse(text); }
Protected Overrides Sub OnStart(ByVal args() As String) Try MyServiceComponent.Start() Catch ex As Exception MyExceptionHandlingComponent.ManuallyHandleException (ex) ExitCode = -1 System.Environment.Exit(-1) End Try End Sub
Private Sub ServiceQueuedMainCallback(ByVal state As Object) Dim args As String() = DirectCast(state, String()) Try Me.OnStart(args) Me.WriteEventLogEntry(Res.GetString("StartSuccessful")) Me.status.checkPoint = 0 Me.status.waitHint = 0 Me.status.currentState = 4 Catch exception As Exception Me.WriteEventLogEntry(Res.GetString("StartFailed", New Object() { exception.ToString }), EventLogEntryType.Error) Me.status.currentState = 1 Catch obj1 As Object Me.WriteEventLogEntry(Res.GetString("StartFailed", New Object() { String.Empty }), EventLogEntryType.Error) Me.status.currentState = 1 End Try Me.startCompletedSignal.Set End Sub
Response.Write("Hello \r\n") Response.Write("World \r\n")
Response.Write("Hello <br/>") Response.Write("World <br/>")
Public Const HtmlNewLine as string ="<br />" Response.Write("Hello " & HtmlNewLine) Response.Write("World " & HtmlNewLine)
System.Text.RegularExpressions.Regex.Unescape(String.format("FirstName:{0} \r\n LastName: {1}", "Nordanne", "Isahac"))
"00","000000112260 ","Pie Pumpkin ","RET","6.99 "," ","ea ",+0000000006.99000 "00","000000304078 ","Pie Apple caramel ","RET","9.99 "," ","ea ",+0000000009.99000 "00","StringValue here","8" Tray of Food ","RET","6.99 "," ","ea ",-00000000005.3200
Encoding fileEncoding = GetFileEncoding(csvFile); string fileContents = File.ReadAllText(csvFile, fileEncoding); string fixedContents = Regex.Replace(fileContents, @"([^\^,\r\n])""([^$,\r\n])", @"$1$2"); using (CsvReader csv = new CsvReader(new StringReader(fixedContents), true)) {
Imports Microsoft.VisualBasic.FileIO.TextFieldParser
Dim afile As FileIO.TextFieldParser = New FileIO.TextFieldParser(FileName) Dim CurrentRecord As String() afile.TextFieldType = FileIO.FieldType.Delimited afile.Delimiters = New String() {","} afile.HasFieldsEnclosedInQuotes = True Do While Not afile.EndOfData Try CurrentRecord = afile.ReadFields Catch ex As FileIO.MalformedLineException Stop End Try Loop
CsvReader csv = new CsvReader( streamToFile ); IEnumerable<MyObject> myObjects = csv.GetRecords<MyObject>();
var parser = new CsvParser( myTextReader ); while( true ) { string[] line = parser.ReadLine(); if( line == null ) { break; } }
Dim fixedContents As String = Regex.Replace( File.ReadAllText(csvFile, fileEncoding), "(?<!,)("")(?!,)", AddressOf ReplaceQuotes)
string fixedCSV = Regex.Replace( File.ReadAllText(fileName), @"(?<!^)(?<!;)("")(?!;)(?!$)", "
Dim fr As StreamReader = Nothing Dim FileString As String = "" Dim LineItemsArr() as String Dim FilePath As String = HttpContext.Current.Request.MapPath("YourFile.csv") fr = New System.IO.StreamReader(FilePath) While fr.Peek <> -1 FileString = fr.ReadLine.Trim If String.IsNullOrEmpty(FileString) Then Continue While LineItemsArr = FileString.Split(",") For Each Item as String In LineItemsArr Next End While
public static Encoding GetFileEncoding(String fileName) { Encoding Result = null; FileInfo FI = new FileInfo(fileName); FileStream FS = null; try { FS = FI.OpenRead(); Encoding[] UnicodeEncodings = { Encoding.BigEndianUnicode, Encoding.Unicode, Encoding.UTF8 }; for (int i = 0; Result == null && i < UnicodeEncodings.Length; i++) { FS.Position = 0; byte[] Preamble = UnicodeEncodings[i].GetPreamble(); bool PreamblesAreEqual = true; for (int j = 0; PreamblesAreEqual && j < Preamble.Length; j++) { PreamblesAreEqual = Preamble[j] == FS.ReadByte(); } if (PreamblesAreEqual) { Result = UnicodeEncodings[i]; } } } catch (System.IO.IOException) { } finally { if (FS != null) { FS.Close(); } } if (Result == null) { Result = Encoding.Default; } return Result; }
If Not Regex.IsMatch(s, "^[A-Z]\d{8}$") AndAlso Not Regex.IsMatch(s, "^\d{9}$") Then ... End If
If Not Regex.IsMatch(s, "^[A-Z]\d{8}|\d{9}$") Then ... End If
Public Function Test() As String Test = "Test" End Function Public Function Test2() As String Return "Test" End Function
.method public static string Test() cil managed { .maxstack 1 .locals init ( [0] string Test) L_0000: nop L_0001: ldstr "Test" L_0006: stloc.0 L_0007: ldloc.0 L_0008: ret } .method public static string Test2() cil managed { .maxstack 1 .locals init ( [0] string Test2) L_0000: nop L_0001: ldstr "Test" L_0006: stloc.0 L_0007: br.s L_0009 L_0009: ldloc.0 L_000a: ret }
Public Function MyFunction() As String MyFunction = "Hello" End Function
textBox.AppendText("your new text" & Environment.NewLine)
Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load Dim Newline As String Newline = System.Environment.NewLine TextBox1.Text = "This is a test" TextBox1.Text = TextBox1.Text & Newline & "This is line 2" End Sub
MessageLabel.Text = "The Sales tax was:" & Format(douSales_tax, "Currency") & "." & vbNewLine & "The sale person: " & mstrSalesPerson
TextBox2.Text = "Line 1" & Environment.NewLine & "Line 2"
TextBox2.Text = "Line 1" TextBox2.Text += Environment.NewLine TextBox2.Text += "Line 2"
Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load Dim Newline As String = System.Environment.NewLine TextBox1.Text = "This is a test" TextBox1.Text += Newline + "This is another test" End Sub
TextBox1.Text = "This is a test" TextBox1.Text = TextBox1.Text & ControlChars.Newline & "This is line 2"
Dim ImageCollection As New Dictionary(Of ConvensionImages, Integer)
For Each dr As DataRow In dt.Rows Dim obj As New ConvensionImages obj.ImageID = dr("ID") obj.Name = dr("Name") obj.Description = dr("Description") obj.CategoryID = dr("CategoryID") obj.CategoryName = dr("CategoryName") obj.CategoryDescription = dr("CatDescription") obj.EventID = dr("EventID") obj.Image = dr("img") obj.DownloadImage = dr("DownLoadImg") ImageCollection.Add(obj, key) key = key + 1
Dim ImageCollection As New Dictionary(Of Integer, ConvensionImages)
For Each kvp As KeyValuePair(Of Integer, ConvensionImages) In ImageCollection Dim v1 As Integer = kvp.Key Dim v2 As ConvensionImages = kvp.Value Next
For Each iKey As Integer In ImageCollection.Keys Dim value As ConvensionImages = ImageCollection(iKey) Next
dim firstvar as string dim secondvar as string dim thirdvar as string thirdvar = firstvar & secondvar
Dim fd As OpenFileDialog = New OpenFileDialog() Dim strFileName As String fd.Title = "Open File Dialog" fd.InitialDirectory = "C:\" fd.Filter = "All files (*.*)|*.*|All files (*.*)|*.*" fd.FilterIndex = 2 fd.RestoreDirectory = True If fd.ShowDialog() = DialogResult.OK Then strFileName = fd.FileName End If
Sub SomeButton_Click(sender As Object, e As EventArgs) Handles SomeButton.Click Using dialog As New OpenFileDialog If dialog.ShowDialog() <> DialogResult.OK Then Return File.Copy(dialog.FileName, newPath) End Using End Sub
Dim frmCollection As New FormCollection() frmCollection = Application.OpenForms() If frmCollection.Item("Form2").IsHandleCreated Then MsgBox("Yes Opened") Else Dim f As New Form2() With f .Text = "form2" .Show() End With End If
Imports System.Linq If Application.OpenForms().OfType(Of Form2).Any Then MessageBox.Show("Opened") Else Dim f2 As New Form2 f2.Text = "form2" f2.Show() End If
If myForm.IsHandleCreated then myForm is open End If
Dim frm as New frmDontknow Dim frmCollection = System.Windows.Forms.Application.OpenForms For i As Int16 = 0I To frmCollection.Count - 1I If frmCollection.Item(i).Name = frm.Name Then frmCollection.Item(i).Activate() Exit Sub End If Next i
Private Sub OpenWindowsForm(ByVal FormName As String) Dim instForm As Form = Application.OpenForms.OfType(Of Form)().Where(Function(frm) frm.Name = FormName).SingleOrDefault() If instForm Is Nothing Then Dim frm As New Form frm = DirectCast(CreateObjectInstance(FormName), Form) frm.MdiParent = Me Me.Panel1.Controls.Add(frm) Me.Panel1.Tag = frm frm.Show() Else instForm.Select() instForm.WindowState = FormWindowState.Maximized instForm.BringToFront() End If End Sub Public Function CreateObjectInstance(ByVal objectName As String) As Object Dim obj As Object Try If objectName.LastIndexOf(".") = -1 Then objectName = [Assembly].GetEntryAssembly.GetName.Name & "." & objectName End If obj = [Assembly].GetEntryAssembly.CreateInstance(objectName) Catch ex As Exception obj = Nothing End Try Return obj End Function
Private Sub btnBusqueda_Click(sender As Object, e As EventArgs) Handles btnBusqueda.Click OpenWindowsForm("Busqueda") End Sub Private Sub btnCalendario_Click_1(sender As Object, e As EventArgs) Handles btnCalendario.Click OpenWindowsForm("Calendario") End Sub
Dim frmCollection = System.Windows.Forms.Application.OpenForms If frmCollection.OfType(Of Form2).Any Then frmCollection.Item("Form2").Activate() Else Dim newForm2 = New Form2 newForm2.Show() End If
Dim xChildWindows = Application.OpenForms.OfType(Of frmForm2) If xChildWindows.Any Then xChildWindows.First().Focus() Else Dim xfrmNew As New frmForm2() xfrmNew.MdiParent = Me xfrmNew.Show() End If
Dim formText As String Dim prevText As String Private Sub OpenForm(ByVal frm As Windows.Forms.Form) formText = frm.Text If formText = prevText Then Exit Sub CloseForms() frm.MdiParent = Me frm.Show() frm.Location = New Point(0, 0) prevText = formText End Sub Private Sub CloseForms() For Each ChildForm As Form In Me.MdiChildren ChildForm.Close() Next End Sub Private Sub NewToolStripButton_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PayablesToolStripMenuItem.Click OpenForm(frmPayables) End Sub
Dim dt As DateTime = Date.Today dt = dt.AddMonths(-2) Dim x As String = dt.ToString()
Dim d As DateTime d = New DateTime(2010, 1, 1) d = d.AddMonths(-1)
Dim dtToday As DateTime = Date.Today dtToday = dtToday.AddMonths(-2)
void label1_Paint(object sender, PaintEventArgs e) { ControlPaint.DrawBorder(e.Graphics, label1.DisplayRectangle, Color.Blue, ButtonBorderStyle.Solid); }
Public Class nomLabel Inherits Label Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs) MyBase.OnPaint(e) ControlPaint.DrawBorder(e.Graphics, e.ClipRectangle, myColor, ButtonBorderStyle.Solid) End Sub End Class
Stops the form from submitting: OnClientClick="return false;"
Allows the form to submit: OnClientClick="return true;"
function mycheck() { return false; } OnClientClick="return mycheck();"
function mycheck() { return true; } OnClientClick="return mycheck();"
<asp:button ID="Button1" runat="server" OnClick="Button1_Click" OnClientClick="return checkValidation()" Text="Submit" /> <script type="text/javascript"> function checkValidation() { return confirm( } </script>
<asp:LinkButton runat="server" OnClientClick="if(!ValidatePage()) { return false;}" />
function onclientClickFun(e) { if(!IsValidationSuccess) { e.preventDefault(); } }
function onclientClickFun(e) { if(!IsValidationSuccess) { return false; } }
var button1 = new Button(); button1.ServerClick += new EventHandler(button1_ServerClick); button1.OnClientClick = SetJsForSaveBtn(); button1.Attributes.Add("UseSubmitBehavior", "false"); panel.Controls.Add(button1 );
private void saveBtn_ServerClick(object sender, EventArgs e) { }
LiteralControl js = new LiteralControl(); panel.Controls.Add(js); js.Text =@"<script type= $(document).ready(function(){ function CheckValidationOnClient(){ if(!ValidatePage()){ return false; } else{ return true; } }; }); </script> "; private string SetJsForSaveBtn() { var jsfunc = @" return CheckValidationOnClient()"; return jsfunc ; }
namespace My.WebControls { [ToolboxData("<{0}:LinkButton runat=server ID=btn></{0}:LinkButton>"), ParseChildren(true), ToolboxItem(true)] public class LinkButton : System.Web.UI.WebControls.LinkButton { private bool _postback = true; [Bindable(true), Category("Behavior"), DefaultValue(true), Description("Gets or Sets the postback click behavior")] public bool AutoPostBack { get { return _postback; } set { _postback = value; } } protected override void Render(System.Web.UI.HtmlTextWriter writer) { if(!AutoPostBack){ this.OnClientClick = "return false"; } base.Render(writer); } } }
<DllImport("user32.dll", SetLastError:=True, CharSet:=CharSet.Auto)> _ Private Shared Function GetWindowText(ByVal hwnd As IntPtr, ByVal lpString As StringBuilder, ByVal cch As Integer) As Integer End Function
<System.Runtime.InteropService.DllImport("user32.dll", _ SetLastError:=True, CharSet:=CharSet.Auto)> _
<DllImport("user32.dll", SetLastError:=True, CharSet:=CharSet.Ansi)> _ Public Function GetWindowText(hwnd As IntPtr, <MarshalAs(UnManagedType.LPStr)>lpString As System.Text.StringBuilder, cch As Integer) As Integer End Function
Private Declare Function GetWindowText Lib "user32.dll" (ByVal hwnd As IntPtr, ByVal lpString As StringBuilder, ByVal cch As Integer) As Integer
Imports System Imports System.IO Imports System.Runtime.InteropServices Namespace SqlServerTypes Public Class Utilities <DllImport("kernel32.dll", CharSet:=CharSet.Auto, SetLastError:=True)> Public Shared Function LoadLibrary(ByVal libname As String) As IntPtr End Function Public Shared Sub LoadNativeAssemblies(ByVal rootApplicationPath As String) Dim nativeBinaryPath = If(IntPtr.Size > 4, Path.Combine(rootApplicationPath, "SqlServerTypes\x64\"), Path.Combine(rootApplicationPath, "SqlServerTypes\x86\")) LoadNativeAssembly(nativeBinaryPath, "msvcr120.dll") LoadNativeAssembly(nativeBinaryPath, "SqlServerSpatial140.dll") End Sub Private Shared Sub LoadNativeAssembly(ByVal nativeBinaryPath As String, ByVal assemblyName As String) Dim path = System.IO.Path.Combine(nativeBinaryPath, assemblyName) Dim ptr = LoadLibrary(path) If ptr = IntPtr.Zero Then Throw New Exception(String.Format("Error loading {0} (ErrorCode: {1})", assemblyName, Marshal.GetLastWin32Error())) End If End Sub End Class End Namespace
Dim str As String Dim int As Nullable(Of Integer) Dim reader As SqlDataReader Dim colA As Integer = reader.GetOrdinal("colA") Dim colB As Integer = reader.GetOrdinal("colB") str = If(reader.IsDBNull(colA), DirectCast(Nothing, String), reader.GetString(colA)) int = If(reader.IsDBNull(colB), DirectCast(Nothing, Nullable(Of Integer)), reader.GetInt32(colB))
Private Function GetTheAnswerAsInteger() As Integer Return 42I End Function
Public Const MyByte As Byte = 4UB; Public Const MyByte2 As SByte = 4SB;
Imports System.Runtime.CompilerServices Module IntegerExtensions <Extension()> _ Public Function B(ByVal iNumber As Integer) As Byte Return Convert.ToByte(iNumber) End Function End Module
Private Function GetTheAnswerAsByte() As Byte Return 42.B End Function
Dim anArrayOfSomethingTypes() As Something = getArrayOfSomethings() For Each x As MyType In anArrayOfSomethingTypes .... Next
Class C1 Public Shared Widening Operator CType(ByVal p1 As C1) As C2 End Operator End Class
If Nothing = String.Empty Then End If If Nothing = "Foo" Then End If
Console.WriteLine("Is String.Empty equal to Nothing?: {0}", String.Empty.Equals(Nothing))
Dim myString as String = nothing mySqlCommand.Parameters.Add("@MyParameter", SqlDbType.Char).Value = myString Dim myString as String = string.empty mySqlCommand.Parameters.Add("@MyParameter", SqlDbType.Char).Value = myString
If(ts < TimeSpan.Zero, "-", "") & ts.ToString("hh\:mm")
Module Extensions <System.Runtime.CompilerServices.Extension()> _ Public Function HoursAndMinutes(ByVal ts As TimeSpan) As String Return If(ts < TimeSpan.Zero, "-", "") & ts.ToString("hh\:mm") End Function End Module
Dim ts As New TimeSpan(-10, 1, 2) Debug.WriteLine(ts.ToString("c"))
if (timeDiff.TotalSeconds < 0) { timeDiff = timeDiff.Negate(); TimeChangeTb.Text = string.Format("-{0:D2}:{1:D2}:{2:D2}", timeDiff.Hours, timeDiff.Minutes, timeDiff.Seconds); } else { TimeChangeTb.Text = string.Format("{0:D2}:{1:D2}:{2:D2}", timeDiff.Hours, timeDiff.Minutes, timeDiff.Seconds); }
public static class TimeSpanUtil { public static string HoursAndMinutes(this TimeSpan ts) { return (ts < TimeSpan.Zero ? "-" : "") + ts.ToString("hh:mm"); } }
For Each item in Collection If item Is Collection.Last Then End If Next
StringBuilder result = new StringBuilder(); bool firstTime = true; foreach(string s in names) { if (!firstTime) { result.Append(", "); } result.Append(s); firstTime = false; }
If item.Equals(itemCollection(itemCollection.Count)) Then ... End If
For Each obj In myCollection Console.WriteLine("current object: {0}", obj.ToString) If Object.ReferenceEquals(obj, myCollection.Last()) Then Console.WriteLine("current object is the last object") End If Next
For Each item in Collection If ReferenceEquals(Collection.Item(Collection.Count - 1), item) Then End If Next
Dim count As Integer = 0 Dim totalListCount As Integer = CheckBoxList.Items.Count() For Each li In CheckBoxList.Items count += 1 If count = totalListCount THEN END IF NEXT
for each item in listOfThings if(item = listOfThings.last)then end if next
if (DateTime.Compare(date1, date2) > 0) if (DateTime.Compare(date1, date2) == 0) if (DateTime.Compare(date1, date2) < 0)
Dim backDateCount As Integer = DateDiff(DateInterval.Day, CDate(dtpCheckIn.SelectedDate.Value).Date, Date.Now.Date)
Dim date1, date2 As Date date1 = Date.Parse(dtpStart.Text) date2 = Date.Parse(dtpEnd.Text) If (DateTime.Compare(date1, date2) > 0) Then MessageBox.Show("يجب تحديد الفترة للتاريخ بشكل صحيح ", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1, MessageBoxOptions.RtlReading) Exit Sub End If
For each q in dtDataTable.Column("Detail) strDetail = Row of Column Detail Next
For Each row As DataRow In dtDataTable.Rows strDetail = row.Item("Detail") Next row
For Each row As DataRow In dtDataTable.Rows strDetail = row("Detail") Next row
Dim row As DataRow For Each row In dtDataTable.Rows Dim strDetail As String strDetail = row("Detail") Console.WriteLine("Processing Detail {0}", strDetail) Next row
For Each q In dtDataTable.Rows strDetail = q("Detail") Next
For Each row As DataRow In your_table.Rows For Each cell As String In row.ItemArray Next Next
<asp:TextBox type="text" runat="server" id="txtSearchTerm" />
txtSearchTerm.**placeholder** = "Search " + Site.Name
<input type="text" runat="server" id="txtSearchTerm" placeholder="Search Site
txtSearchTerm.Attributes.Add("placeholder", "Search" + Site.Name);
txtSearchTerm.Attributes["placeholder"] = "Search" + Site.Name;
txtSearchTerm.Attributes["placeholder"] = GetLocalResourceObject("YourLocalResourceName").ToString();
namespace Project.Controls { public class TextBox : System.Web.UI.WebControls.TextBox { public string PlaceHolder { get; set; } protected override void OnLoad(EventArgs e) { if(!string.IsNullOrWhiteSpace(PlaceHolder)) this.Attributes.Add("placeholder", PlaceHolder); base.OnLoad(e); } } }
<system.web> <pages> <controls> <add tagPrefix="ext" assembly="Project" namespace="Project.Controls" /> </controls> </pages> </system.web>
<ext:TextBox runat="server" id="SomeId" PlaceHolder="This is a PlaceHolder" />
<asp:TextBox placeholder="hola mundo" ID="some_id" runat="server"/>
<ajaxToolkit:TextBoxWatermarkExtender ID="TBWE2" runat="server" TargetControlID="TextBox1" WatermarkText="Type First Name Here" WatermarkCssClass="watermarked" />
Public intFileID As Integer = 0 Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load If Not Page.IsPostBack Then If Not Request.QueryString("fileid") Is Nothing Then intFileID = CInt(Request.QueryString("fileid")) End If If intFileID > 0 Then GetFile(intFileID) End If End If End Sub Private Sub GetFile() End Sub
Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load If Not Page.IsPostBack Then If Not Request.QueryString("fileid") Is Nothing Then intFileID = CInt(Request.QueryString("fileid")) End If If intFileID > 0 Then GetFile(intFileID) End If ViewState("intFileID") = intFileID Else intFileID = ViewState("intFileID") End If End Sub
Private intFileId As Integer = 0 Public Property FileID() As Integer Get Return intFileId End Get Set(ByVal value As Integer) intFileId = value End Set End Property Protected Overrides Function SaveControlState() As Object Dim objState(2) As Object objState(0) = MyBase.SaveControlState() objState(1) = Me.FileID Return objState End Function Protected Overrides Sub LoadControlState(ByVal savedState As Object) Dim objState() As Object objState = savedState MyBase.LoadControlState(objState(0)) Me.FileID = CInt(objState(1)) End Sub Protected Sub Page_Init(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Init Me.Page.RegisterRequiresControlState(Me) End Sub Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load If Not Page.IsPostBack Then If Not String.IsNullOrEmpty(Request.QueryString("fileid")) Then Me.FileID = CInt(Request.QueryString("fileid")) End If End If Response.Write(Me.FileID.ToString()) End Sub
Description: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code. Exception Details: System.OutOfMemoryException: Exception of type Source Error: An unhandled exception was generated during the execution of the current web request. Information regarding the origin and location of the exception can be identified using the exception stack trace below. Stack Trace: [OutOfMemoryException: Exception of type System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks) +0 System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, StackCrawlMark& stackMark, Boolean forIntrospection, Boolean suppressSecurityChecks) +567 System.Reflection.RuntimeAssembly.InternalLoad(String assemblyString, Evidence assemblySecurity, StackCrawlMark& stackMark, Boolean forIntrospection) +192 System.Reflection.Assembly.Load(String assemblyString) +35 System.Web.Configuration.CompilationSection.LoadAssemblyHelper(String assemblyName, Boolean starDirective) +123 [ConfigurationErrorsException: Exception of type System.Web.Configuration.CompilationSection.LoadAssemblyHelper(String assemblyName, Boolean starDirective) +11569328 System.Web.Configuration.CompilationSection.LoadAllAssembliesFromAppDomainBinDirectory() +485 System.Web.Configuration.AssemblyInfo.get_AssemblyInternal() +79 System.Web.Compilation.BuildManager.GetReferencedAssemblies(CompilationSection compConfig) +337 System.Web.Compilation.BuildManager.CallPreStartInitMethods() +280 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters, PolicyLevel policyLevel, Exception appDomainCreationException) +1167 [HttpException (0x80004005): Exception of type System.Web.HttpRuntime.FirstRequestInit(HttpContext context) +11702064 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context) +141 System.Web.HttpRuntime.ProcessRequestNotificationPrivate(IIS7WorkerRequest wr, HttpContext context) +4870277
Sub Main() Dim list = New List(Of Person)() Dim sorted = list.OrderBy(Function(x) x.zIndex) End Sub Public Class Person Public Property zIndex As Integer End Class
Dim list = New List(Of Person)() list.Sort(Function(x, y) x.zIndex.CompareTo(y.zIndex))
nList.Sort(Function(x, y) x.zIndex.CompareTo(y.zIndex))
Public Class ClassName Implements IComparable(Of ClassName) Public Function CompareTo(ByVal other As ClassName) As Integer Implements System.IComparable(Of ClassName).CompareTo If _ZIndex = other.ZIndex Then Return 0 Else If _ZIndex < other.ZIndex Then Return -1 Else Return 1 End If End If End Function End Sub
Dim s, s1, t As String Dim i As Integer s1 = "Hello" i = 1 s = s1 & i t = s1 + i If s = t Then MessageBox.Show("Equal...") End If
processDetails=objProcess.ProcessId & ":" & objProcess.name message = msgbox(processDetails,16,"Details")
Dim I, J, K, L As Integer Dim K1, L1 As String K1 = K L1 = L Cells(2, 1) = K1 & " - uploaded" Cells(3, 1) = L1 & " - expanded" MsgBox "records uploaded " & K & " records expanded " & L
Dim s1 As String Dim i As Integer s1 = "Hello" i = 1 String.Format("{0} {1}", s1, i)
Select * from Documents Where Name Like %ABC% AND Name Like %DEF% AND Name like %GHI%
Dim query = From document In _context.Documents << loop based on number of strings passed in >> query = query.Where( ... what goes here?? )
Public Function GetDocuments(criteria as String) Dim splitCriteria = SplitTheCriteria(criteria) dim query = from document in _context.Documents For Each item in splitCriteria Dim localItem = item query = AddCriteriaToQuery(query, localItem) Next dim matchingDocuments = query.ToList() End Function Private Function AddCriteriaToQuery(query as IQueryable(Of Document), criteria as string) as IQueryable(Of Document) return query.Where(Function(doc) doc.Name = criteria) End Function
Public Class Doc Private _docName As String Public Property DocName() As String Get Return _docName End Get Set(ByVal value As String) _docName = value End Set End Property Public Sub New(ByVal newDocName As String) _docName = newDocName End Sub End Class Sub Main() Dim Documents As New List(Of Doc) Documents.Add(New Doc("ABC")) Documents.Add(New Doc("DEF")) Documents.Add(New Doc("GHI")) Documents.Add(New Doc("ABC DEF")) Documents.Add(New Doc("DEF GHI")) Documents.Add(New Doc("GHI LMN")) Dim qry = From docs In Documents qry = qry.Where(Function(d) d.DocName.Contains("GHI")) Dim qryResults As List(Of Doc) = qry.ToList() For Each d As Doc In qryResults Console.WriteLine(d.DocName) Next End Sub
Dim query = From document In _context.Documents where document.name =
Dim query = From document In _context.Documents where document.name.contains(
.Where(Function(i as mytype) i.myfiltervar = WhatIWantToSelect)
MessageBox.Show( "test message", "caption", MessageBoxButtons.YesNo, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1, 0, "http: "keyword")
if (hyperLinks != null) { foreach (var link in hyperLinks) { var linkLabel = new LinkLabel(); linkLabel.Text = link; linkLabel.Width = WhateverParentPanelYouHave.Width; linkLabel.Click += LabelClicked; WhateverParentPanelYouHave.Controls.Add(linkLabel); } }
private async void LabelClicked(object sender, EventArgs e) { var linkLabel = (LinkLabel) sender; var path = linkLabel.Text; try { await Task.Run(() => Process.Start($@"{path}")); } catch (Exception ex) { MessageBox.ShowMessage(ex.Message, @"An Error Has Occurred"); } }
Dim yourNumber as Int32 = 5 yourNumber.ToString("D2")
Dim varNumber As Integer = 3 Dim number As String = String.Format("{0:0
Dim yourNumber as Long = 5 Format(yourNumber, "00")
if(number < 10){ number = Int32.Parse("0" + number.ToString()); }
Dim Request As System.Net.WebRequest = _ System.Net.WebRequest.Create( _ "http: Dim WebResponse As System.Net.HttpWebResponse = _ DirectCast(Request.GetResponse(), System.Net.HttpWebResponse) Dim Stream As New System.IO.StreamReader( _ WebResponse.GetResponseStream, System.Text.Encoding.UTF8) Dim Text as String = Stream.ReadToEnd
Dim Image As New Drawing.Bitmap(WebResponse.GetResponseStream)
Dim Stream as Stream = ReadToStream(Text, System.Text.Encoding.UTF8) Dim Image As New Drawing.Bitmap(Stream)
using(WebClient wc = new WebClient()) { byte[] raw = wc.DownloadData("http: }
string base64; using (MemoryStream ms = new MemoryStream()) { byte[] buffer = new byte[1024]; int bytesRead; while ((bytesRead = s.Read(buffer, 0, buffer.Length)) > 0) { ms.Write(buffer, 0, bytesRead); } base64 = Convert.ToBase64String(ms.GetBuffer(), 0, (int) ms.Length); } byte[] raw = Convert.FromBase64String(base64); using (MemoryStream decoded = new MemoryStream(raw)) { }
Dim strAsBytes() as Byte = new System.Text.UTF8Encoding().GetBytes(Text) Dim ms as New System.IO.MemoryStream(strAsBytes)
var bytes = new byte[contents.Length * sizeof( char )]; Buffer.BlockCopy( contents.ToCharArray(), 0, bytes, 0, bytes.Length ); using( var stream = new MemoryStream( bytes ) ) { }
Public Overrides Function GetHashCode() As Int32 Dim hash As Int32 = 17 hash = hash * 23 + _Name.GetHashCode() hash = hash * 23 + _Value hash = hash * 23 + _Type.GetHashCode() Return hash End Function
Public Overrides Function GetHashCode() As Int32 Return New With { _ Key .A = _Name, _ Key .B = _Value, _ Key .C = _Type }.GetHashCode() End Function
Public Const HASH_PRIME1 As Int32 = 4 Public Const HASH_PRIME2 As Int32 = 28 Public Const INT32_MASK As Int32 = &HFFFFFFFF Public Function RotateHash(ByVal hash As Int64, ByVal hashcode As Int32) As Int64 Return ((hash << HASH_PRIME1) Xor (hash >> HASH_PRIME2) Xor hashcode) End Function
Dim hash As Long = 17 Return CInt(hash And &H7fffffffL)
Imports System.Runtime.InteropServices Module NoOverflows Public Function LongToInteger(ByVal value As Long) As Integer Dim cast As Caster cast.LongValue = value Return cast.IntValue End Function <StructLayout(LayoutKind.Explicit)> _ Private Structure Caster <FieldOffset(0)> Public LongValue As Long <FieldOffset(0)> Public IntValue As Integer End Structure End Module
Dim hash As Long = 17 Return NoOverflows.LongToInteger(hash)
<StructLayout(LayoutKind.Explicit)> Private Structure HashCodeNoOverflow <FieldOffset(0)> Public Int64 As Int64 <FieldOffset(0)> Public Int32 As Int32 End Structure
Public Overrides Function GetHashCode() As Integer Dim hashCode As HashCodeNoOverflow hashCode.Int64 = 17 hashCode.Int64 = CLng(hashCode.Int32) * 23 + Field1.GetHashCode hashCode.Int64 = CLng(hashCode.Int32) * 23 + Field2.GetHashCode hashCode.Int64 = CLng(hashCode.Int32) * 23 + Field3.GetHashCode Return hashCode.Int32 End Function
Public Overrides Function GetHashCode() As Integer Dim hashCode = New HashCodeNoOverflow With {.Int32 = 17} For Each field In Fields hashCode.Int64 = CLng(hashCode.Int32) * 23 + field.GetHashCode Next Return hashCode.Int32 End Function
Public Overrides Function GetHashCode() As Int32 Dim hash as Int64 = 17 hash = (hash * 23 + _Name.GetHashCode()) Mod Integer.MaxValue hash = (hash * 23 + _Value) Mod Integer.MaxValue hash = (hash * 23 + _Type.GetHashCode()) Mod Integer.MaxValue Return Convert.ToInt32(hash) End Function
Public Overrides Function GetHashCode() as Integer Dim hashCode as Long = 0 If myReplacePattern IsNot Nothing Then _ hashCode = ((hashCode*397) Xor myField.GetHashCode()) And &HffffffffL If myPattern IsNot Nothing Then _ hashCode = ((hashCode*397) Xor myOtherField.GetHashCode()) And &HffffffffL Return CInt(hashCode) End Function
<PropertyGroup> <RemoveIntegerChecks>true</RemoveIntegerChecks> </PropertyGroup>
Public Structure HypnoKey Public Sub New(name As String, areaId As Guid) _resourceKey = New Tuple(Of Guid, String)(resourceAreaId, key) End Sub Private ReadOnly _name As String Private ReadOnly _areaId As Guid Public ReadOnly Property Name As String Get Return _name End Get End Property Public ReadOnly Property AreaId As Guid Get Return _areaId End Get End Property Public Overrides Function GetHashCode() As Integer End Function End Structure
Public Structure HypnoKey Public Sub New(name As String, areaId As Guid) _innerKey = New Tuple(Of Guid, String)(areaId , key) End Sub Private ReadOnly _innerKey As Tuple(Of Guid, String) Public ReadOnly Property Name As String Get Return _innerKey.Item2 End Get End Property Public ReadOnly Property AreaId As Guid Get Return _innerKey.Item1 End Get End Property Public Overrides Function GetHashCode() As Integer Return _innerKey.GetHashCode() End Function End Structure
private sub main() dim value = getValue() end sub private sub getValue() return 3 end sub
Private Sub Main() Dim value = getValue() End Sub Private Function getValue() As Integer Return 3 End Function
Private _myValue As String Public Property MyValue As String Get Return _myValue End Get Set(value As String) _myValue = value End Set End Property
Public Class Form1 public DEB as Integer DEB = 1 DEB = 0 Private Sub Form1_Load(....) if DEB=1 Then <do something> else <do something else> end if ....
Public Class Form1 Private Sub Form1_Load(....) <do something> <do something else> End Sub End Class
Public Module Common Public In_Debug As Boolean = True Public In_Debug As Boolean = False End Module Public Class Form1 Private Sub Form1_Load(....) If In_Debug Then SplashScreen.Hide() ...
static bool IsNull(this object obj) { return obj == null; } object x = null; bool exists = !x.IsNull();
<Extension()> _ Function IsNull(ByVal obj As Object) As Boolean Return obj Is Nothing End Function Dim exampleObject As Object = Nothing Dim exists As Boolean = Not exampleObject.IsNull()
Imports System.Runtime.CompilerServices Module Extensions <Extension()> _ Public Function IsNull(ByVal obj As Object) As Boolean Return obj Is Nothing End Function <Extension()> _ Public Function IsNull(ByVal obj As A) As Boolean Return obj Is Nothing End Function <Extension()> _ Public Function IsNull(ByVal obj As String) As Boolean Return obj Is Nothing End Function End Module Class A End Class Module Module1 Sub Main() Dim someString As String = Nothing Dim isStringNull As Boolean = someString.IsNull() Dim someA As A = Nothing Dim isANull As Boolean = someA.IsNull() Dim someObject As Object = Nothing Dim anotherObject As Object = New Object Dim anotherObjectIsNull As Boolean = anotherObject.IsNull() End Sub End Module
.locals init ([0] object exampleObject, [1] bool exists) IL_0000: ldnull IL_0001: stloc.0 IL_0002: ldloc.0 IL_0003: ldnull IL_0004: ldstr "IsNull" IL_0009: ldc.i4.0 IL_000a: newarr [mscorlib]System.Object IL_000f: ldnull IL_0010: ldnull IL_0011: ldnull IL_0012: call object [Microsoft.VisualBasic]Microsoft.VisualBasic. CompilerServices.NewLateBinding::LateGet( object, class [mscorlib]System.Type, string, object[], string[], class [mscorlib]System.Type[], bool[]) IL_0017: call object [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.Operators::NotObject(object) IL_001c: call bool [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.Conversions::ToBoolean(object) IL_0021: stloc.1
Dim exampleObject As Object = "Test" Dim text As String = exampleObject.IsNull()
<system.webServer> <rewrite> <-------------------- this is underlined in squiggly blue <rules> <rule name="RemoveASPX" enabled="true" stopProcessing="true"> <match url="(.*)\.aspx" /> <action type="Redirect" url="{R:1}" /> <conditions logicalGrouping="MatchAll"> <add input="{URL}" pattern="(.*)/default.aspx" negate="true" /> <add input="{URL}" pattern="(.*)/admin/*" negate="true" /> <add input="{URL}" pattern="(.*)/desktopmodules/*" negate="true" /> </conditions> </rule>
Module ImageMagickNetExtensions <Extension()> _ Public Function SomeExtensionFunction(ByVal imn As ImageMagickNet, ByVal filename As String) As Boolean Return imn.IsSimilarImage(filename) End Function End Module Class SomeClass Private imn As New ImageMagickNet Private Sub DoSomething() If imn.SomeExtensionFunction("c:\someimage.jpg") Then ... End If End Sub End Class
Private mStringArray As String() = {"String1", "String2", "etc"}
Imports System.Collections.Generic Module Module1 Sub Main() Dim items As New FancyDictionary(Of Integer, String)(New Object(,) {{1, "First Item"}, {2, "Second Item"}, {3, "Last Item"}}) Dim enumerator As FancyDictionary(Of Integer, String).Enumerator = items.GetEnumerator While enumerator.MoveNext Console.WriteLine(String.Format("{0} : {1}", enumerator.Current.Key, enumerator.Current.Value)) End While Console.Read() End Sub Public Class FancyDictionary(Of TKey, TValue) Inherits Dictionary(Of TKey, TValue) Public Sub New(ByVal InitialValues(,) As Object) For i As Integer = 0 To InitialValues.GetLength(0) - 1 Me.Add(InitialValues(i, 0), InitialValues(i, 1)) Next End Sub End Class End Module
Dim myDic As New Dictionary(Of String, String) From {{"1", "One"}, {"2", "Two"}}
Dictionary<string, double> dict = new Dictionary<string, double>() { { "pi", 3.14}, { "e", 2.71 } };
Private __sampleDictionary As New Dictionary(Of Integer, String) From {{1, "This is a string value"}, {2, "Another value"}}
result = str.Substring(Math.Max(0, str.Length - 5))
Dim result As String = str If str.Length > 5 Then result = str.Substring(str.Length - 5) End If
If(str.Length <= 5, str, str.Substring(str.Length - 5))
Dim str, result As String str = "11!" result = If(str.Length <= 5, str, str.Substring(str.Length - 5)) MessageBox.Show(result) str = "I will be going to school in 2011!" result = If(str.Length <= 5, str, str.Substring(str.Length - 5)) MessageBox.Show(result)
Dim sMyString, sLast5 As String sMyString = "I will be going to school in 2011!" sLast5 = Right(sMyString, - 5) MsgBox("sLast5 = " & sLast5)
Dim a As String = Microsoft.VisualBasic.right("I will be going to school in 2011!", 5) MsgBox("the value is:" & a)
<HttpPost> <HttpGet> <Route("{view}")> Public Function GetResultsWithView(view As String, pPaging As Paging) As HttpResponseMessage Dim resp As New HttpResponseMessage Dim lstrFetchXml As String = String.Empty Dim lstrResults As String = String.Empty Try resp.Content = New StringContent(lstrResults) resp.Content.Headers.ContentType.MediaType = "text/xml" resp.Headers.Add("Status-Message", "Query executed successfully") resp.StatusCode = HttpStatusCode.OK Catch ex As Exception resp.StatusCode = HttpStatusCode.InternalServerError resp.Headers.Add("Status-Message", String.Format("Error while retrieving results from view {0}: {1}", view, ex.Message)) End Try Return resp End Function
Dim uri As String = BASE_URI + "fetch/someview" Dim resp As HttpWebResponse Dim sr As StreamReader Dim lstrResponse As String Dim reqStream As Stream Dim bytData As Byte() Dim req As HttpWebRequest = WebRequest.Create(uri) Dim lstrPagingJSON As String Dim lPaging As New Paging Try lPaging.Page = 1 lPaging.Count = 100 lPaging.PagingCookie = "" req.Method = "POST" lstrPagingJSON = JsonSerializer(Of Paging)(lPaging) bytData = Encoding.UTF8.GetBytes(lstrPagingJSON) req.ContentLength = bytData.Length reqStream = req.GetRequestStream() reqStream.Write(bytData, 0, bytData.Length) reqStream.Close() req.ContentType = "application/json" resp = req.GetResponse() sr = New StreamReader(resp.GetResponseStream, Encoding.UTF8) lstrResponse = sr.ReadToEnd Catch exweb As WebException txtOutput.AppendText("Error during request: " + exweb.Message) Catch ex As Exception txtOutput.AppendText(String.Format("General error during request to {0}: {1}", uri, ex.Message)) End Try
$.ajax({ headers: {}, url: "api/fetch/someview", type: "POST", data: "{Count:100,Page:1,PagingCookie:\"\"}", contentType: "application/json; charset=utf-8", dataType: "xml", success: function (data) { alert("call succeeded"); }, failure: function (response) { alert("call failed"); } });
req.Method = "POST" req.ContentType = "application/json" lstrPagingJSON = JsonSerializer(Of Paging)(lPaging) bytData = Encoding.UTF8.GetBytes(lstrPagingJSON) req.ContentLength = bytData.Length reqStream = req.GetRequestStream() reqStream.Write(bytData, 0, bytData.Length) reqStream.Close()
var content = new StringContent(postData); httpClient.PostAsync(uri, content);
var content = new StringContent(postData, Encoding.UTF8, "application/json"); httpClient.PostAsync(uri, content);
<WebMethod()> _ Public Function Foo(ByVal Input As String) As Dictionary(Of String, String) Dim Results As New Dictionary(Of String, String) Results.Add(key,value) Return Results End Function
for (var key in obj.d) { console.log("Key: " + key); console.log("Value: " + obj.d[key]); }
var data; for (var key in data) { var value = data[key]; alert(key + ", " + value); }
var info = { "fname": "Bhaumik", "lname": "Mehta", "Age": "34", "favcolor": {"color1":"Gray", "color2":"Black", "color3":"Blue"} };
for(key in info) { var infoJSON = info[key]; console.log(infoJSON); }
Bhaumik Mehta Object {color1: "Gray", color2: "Black", color3: "Blue"}
for(key in info) { var infoJSON = info[key]; if(typeof infoJSON !== "object"){ console.log(infoJSON); } }
for(key in info) { var infoJSON = info[key]; if (typeof infoJSON !== "object"){ console.log(infoJSON); } } for(key1 in infoJSON) { if (infoJSON.hasOwnProperty(key1)) { if(infoJSON[key1] instanceof Array) { for(var i=0;i<infoJSON[key1].length;i++) { console.log(infoJSON[key1][i]); } } else {console.log(infoJSON[key1]);} } }
Imports Microsoft.VisualBasic, System.Web.Mail Shared Sub SendMail(ByVal ToAdd, ByVal FromAdd, ByVal Message, ByVal Subject) Dim msgMail As New MailMessage() msgMail.To = ToAdd msgMail.From = FromAdd msgMail.Subject = Subject msgMail.Headers.Add("X-Mailer", "ASP.NET") msgMail.BodyFormat = MailFormat.Text msgMail.Body = Message SmtpMail.SmtpServer = "localhost" SmtpMail.Send(msgMail) End Sub
<system.net> <mailSettings> <smtp> <network host="relay.tagadab.com" port="25" /> </smtp> </mailSettings> </system.net>
<configuration> <system.net> <mailSettings> <smtp from="yourmail@gmail.com"> <network host="smtp.gmail.com" port="587" userName="yourmail@gmail.com" password="yourpassword" enableSsl="true"/> </smtp> </mailSettings> </system.net> </configuration>
SmtpClient smtpClient = new SmtpClient("smtp.sender.you", Convert.ToInt32(587)); System.Net.NetworkCredential credentials = new System.Net.NetworkCredential("username", "password"); smtpClient.Credentials = credentials; smtpClient.Send(msgMail);
SmtpClient smtpClient = new SmtpClient(); smtpClient.Send(msgMail);
If TxtBox.Text > 10 Then MessageBox.Show("Please Enter a Number from 1 to 10") TxtBox.Focus() ElseIf TxtBox.Text < 10 Then MessageBox.Show("Thank You, your rating was " & TxtBox.Text) Total = Total + 1 ElseIf IsNumeric(TxtBox.Text) Then MessageBox.Show("Thank you, your rating was " & ValueTxtBox.Text) End If ValueTxtBox.Clear() ValueTxtBox.Focus()
Private Sub TextBox1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles TextBox1.KeyPress If Asc(e.KeyChar) <> 8 Then If Asc(e.KeyChar) < 48 Or Asc(e.KeyChar) > 57 Then e.Handled = True End If End If End Sub
Private Sub TextBox_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles TextBox.KeyPress If Not Char.IsNumber(e.KeyChar) AndAlso Not Char.IsControl(e.KeyChar) Then e.Handled = True End If End Sub Private Sub TextBox_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles TextBox.TextChanged Dim digitsOnly As Regex = New Regex("[^\d]") TextBox.Text = digitsOnly.Replace(TextBox.Text, "") End Sub
Private Sub txtCaseID_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtCaseID.KeyPress If Not Char.IsNumber(e.KeyChar) AndAlso Not Char.IsControl(e.KeyChar) Then e.KeyChar = "" End Sub
Dim intValue As Integer If Integer.TryParse(TxtBox.Text, intValue) AndAlso intValue > 0 AndAlso intValue < 11 Then MessageBox.Show("Thank You, your rating was " & TxtBox.Text) Else MessageBox.Show("Please Enter a Number from 1 to 10") End If
Private Sub MyTextBox_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles MyTextBox.KeyPress If Not IsNumeric(e.KeyChar) And Not e.KeyChar = ChrW(Keys.Back) Then e.Handled = True End If End Sub
Private Sub Data_KeyPress(sender As Object, e As KeyPressEventArgs) Handles Data.KeyPress If (Not e.KeyChar = ChrW(Keys.Back) And ("0123456789.").IndexOf(e.KeyChar) = -1) Or (e.KeyChar = "." And Data.Text.ToCharArray().Count(Function(c) c = ".") > 0) Then e.Handled = True End If End Sub
Private Sub textBox5_KeyPress(sender As System.Object, e As System.Windows.Forms.KeyPressEventArgs) Handles textBox5.KeyPress If Asc(e.KeyChar) <> 8 Then If Asc(e.KeyChar) < 48 Or Asc(e.KeyChar) > 57 Then e.Handled = True End If End If End Sub
Dim ch(10) As Char Dim len As Integer len = TextBox1.Text.Length ch = TextBox1.Text.ToCharArray() For i = 0 To len - 1 If Not IsNumeric(ch(i)) Then MsgBox("Value you insert is not numeric") End If Next
If Not Char.IsNumber(e.KeyChar) AndAlso Not e.KeyChar = "." AndAlso Not Char.IsControl(e.KeyChar) Then e.KeyChar = "" End If
<Runtime.CompilerServices.Extension()> _ Public Function HandledStringtoInteger(s As String) As Integer Try If s = String.Empty Then Return 0 Else Return Integer.Parse(s) End If Catch Dim result As String = String.Empty Dim ReturnInt As Integer Dim Parsed As Integer For Each Character In s.ToCharArray If Character = "-" Then If s.Substring(0, 1).ToString <> "-" Then result = Character + result End If End If If Character = "." Then Exit For End If If Integer.TryParse(Character, Parsed) Then result = result + Parsed.ToString End If Next If result <> String.Empty Then If Integer.TryParse(result, ReturnInt) Then Return Integer.Parse(ReturnInt) Else If Double.Parse(result) > Double.Parse(Integer.MaxValue.ToString) Then Return Integer.MaxValue ElseIf Double.Parse(result) < Double.Parse(Integer.MinValue.ToString) Then Return Integer.MinValue Else Return Integer.Parse(ReturnInt) End If End If Else Return 0 End If End Try End Function
Private Sub TextBox_to_IntBox(sender As Object, e As TextChangedEventArgs) Handles YourTextBox.TextChanged If DirectCast(sender, TextBox).IsKeyboardFocused Then DirectCast(sender, TextBox).Text = DirectCast(sender, TextBox).Text.HandledStringtoInteger DirectCast(sender, TextBox).CaretIndex = DirectCast(sender, TextBox).Text.Length End If End Sub
Public Class Properties Implement INotifyPropertyChanged Private _Variable as Integer Public Property YourProperty as Object get Return _Variable end get set(value as Object) _Variable = value.ToString.ToInteger end set end property Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged Public Sub OnPropertyChange(ByVal e As PropertyChangedEventArgs) If Not PropertyChangedEvent Is Nothing Then RaiseEvent PropertyChanged(Me, e) End If End Sub End Class
Public WithEvents _YourVariable as New Properties Public Sub New() InitializeComponent() With YourTextBox .SetBinding(Textbox.TextProperty, New Binding("YourProperty")) .DataContext = _YourVariable End With End Sub
<Runtime.CompilerServices.Extension()> _ Public Function toInteger(Of T)(ByRef X As T, Optional I As Integer = 0) As Integer Dim S As String = X.ToString Try If S = String.Empty Then Return I Else Return Integer.Parse(S) End If Catch Dim result As String = String.Empty Dim ReturnInt As Integer Dim Parsed As Byte For Each Character In S.ToCharArray If Character = "-" Then If S.Substring(0, 1).ToString <> "-" Then result = Character + result End If End If If Character = "." Then Exit For End If If Byte.TryParse(Character, Parsed) Then result = result + Parsed.ToString End If Next If result <> String.Empty Then If Integer.TryParse(result, ReturnInt) Then Return Integer.Parse(ReturnInt) Else If Double.Parse(result) > Double.Parse(Integer.MaxValue.ToString) Then Return Integer.MaxValue ElseIf Double.Parse(result) < Double.Parse(Integer.MinValue.ToString) Then Return Integer.MinValue Else Return Integer.Parse(ReturnInt) End If End If Else Return I End If End Try End Function
Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click Dim theNumber As Integer Dim theEntry As String = Trim(TextBox1.Text) Try theNumber = Convert.ToInt32(theEntry) If theNumber < 0 Or theNumber > 10 Then theNumber = -1 Catch ex As Exception theNumber = -1 End Try If theNumber < 0 Or theNumber > 10 Then MsgBox("Invalid Entry, allows (0-10) only.") TextBox1.Focus() Else End If End Sub
Imports System.Text.RegularExpressions Module Module1 Public Enum ValidationType Only_Numbers = 1 Only_Characters = 2 Not_Null = 3 Only_Email = 4 Phone_Number = 5 End Enum Public Sub AssignValidation(ByRef CTRL As Windows.Forms.TextBox, ByVal Validation_Type As ValidationType) Dim txt As Windows.Forms.TextBox = CTRL Select Case Validation_Type Case ValidationType.Only_Numbers AddHandler txt.KeyPress, AddressOf number_Leave Case ValidationType.Only_Characters AddHandler txt.KeyPress, AddressOf OCHAR_Leave Case ValidationType.Not_Null AddHandler txt.Leave, AddressOf NotNull_Leave Case ValidationType.Only_Email AddHandler txt.Leave, AddressOf Email_Leave Case ValidationType.Phone_Number AddHandler txt.KeyPress, AddressOf Phonenumber_Leave End Select End Sub Public Sub number_Leave(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Dim numbers As Windows.Forms.TextBox = sender If InStr("1234567890.", e.KeyChar) = 0 And Asc(e.KeyChar) <> 8 Or (e.KeyChar = "." And InStr(numbers.Text, ".") > 0) Then e.KeyChar = Chr(0) e.Handled = True End If End Sub Public Sub Phonenumber_Leave(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Dim numbers As Windows.Forms.TextBox = sender If InStr("1234567890.()-+ ", e.KeyChar) = 0 And Asc(e.KeyChar) <> 8 Or (e.KeyChar = "." And InStr(numbers.Text, ".") > 0) Then e.KeyChar = Chr(0) e.Handled = True End If End Sub Public Sub OCHAR_Leave(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) If InStr("1234567890!@ e.KeyChar = Chr(0) e.Handled = True End If End Sub Public Sub NotNull_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Dim No As Windows.Forms.TextBox = sender If No.Text.Trim = "" Then MsgBox("This field Must be filled!") No.Focus() End If End Sub Public Sub Email_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Dim Email As Windows.Forms.TextBox = sender If Email.Text <> "" Then Dim rex As Match = Regex.Match(Trim(Email.Text), "^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,3})$", RegexOptions.IgnoreCase) If rex.Success = False Then MessageBox.Show("Please Enter a valid Email Address", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information) Email.BackColor = Color.Red Email.Focus() Exit Sub Else Email.BackColor = Color.White End If End If End Sub End Module
Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load AssignValidation(Me.TextBox1, ValidationType.Only_Digits) AssignValidation(Me.TextBox2, ValidationType.Only_Characters) AssignValidation(Me.TextBox3, ValidationType.No_Blank) AssignValidation(Me.TextBox4, ValidationType.Only_Email) End Sub
Private Sub TextBox1_KeyPress(sender As System.Object, e As System.Windows.Forms.KeyPressEventArgs) Handles TextBox1.KeyPress Dim tb As TextBox = CType(sender, TextBox) If Not IsNumeric(e.KeyChar) Then If Char.IsControl(e.KeyChar) Then If e.KeyChar = ChrW(Keys.Enter) Then If Val(tb.Text) > 10 Then tb.Text = "" ShowPassFail(False) Else ShowPassFail(True) End If e.Handled = True End If Exit Sub End If e.Handled = True ShowPassFail(False) End If End Sub Private Sub ShowPassFail(pass As Boolean) If pass Then MessageBox.Show("Thank you, your rating was " & TextBox1.Text) Else MessageBox.Show("Please Enter a Number from 1 to 10") End If TextBox1.Clear() TextBox1.Focus() End Sub
Private Sub txtbox1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtbox1.KeyPress Try If val(txtbox1.text) < 10 then If Char.IsLetterOrDigit(e.KeyChar) = False And Char.IsControl(e.KeyChar) = False Then e.Handled = True End If Else e.Handled = True End If Catch ex As Exception ShowException(ex.Message, MESSAGEBOX_TITLE, ex) End Try End Sub
Public Function Isnumber(ByVal KCode As String) As Boolean If Not Isnumeric(KCode) And KCode <> ChrW(Keys.Back) And KCode <> ChrW(Keys.Enter) And KCode <> "."c Then MsgBox("Please Enter Numbers only", MsgBoxStyle.OkOnly) End If End Function Private Sub txtBalance_KeyPress(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtBalance.KeyPress If Not Isnumber(e.KeyChar) Then e.KeyChar = "" End If End Sub
Private Sub TextBox2_TextChanged(sender As Object, e As EventArgs) Handles TextBox2.TextChanged If IsNumeric(TextBox2.Text) Then Else TextBox2.Clear() End If End Sub
Public Function MakeTextBoxNumeric(kcode As Integer, shift As Boolean) As Boolean If kcode >= 96 And kcode <= 105 Then ElseIf kcode >= 48 And kcode <= 57 If shift = True Then Return False ElseIf kcode = 8 Or kcode = 107 Then ElseIf kcode = 187 Then If shift = False Then Return False Else Return False End If Return True End Function
Private Sub txtboxNumeric_KeyDown(sender As Object, e As KeyEventArgs) Handles txtboxNumeric.KeyDown If MakeTextBoxNumeric(e.KeyCode, e.Shift) = False Then e.SuppressKeyPress = True End Sub
<asp:TextBox ID="TextBox1" runat="server" onkeydown = "return (!(event.keyCode>=65) && event.keyCode!=32);"></asp:TextBox>
!(event.shiftKey && (event.keyCode >= 48 && event.keyCode <= 57))
<asp:TextBox ID="TextBox1" runat="server" onkeydown = "return (!(event.keyCode>=65) && event.keyCode!=32 && !(event.shiftKey && (event.keyCode >= 48 && event.keyCode <= 57)));"></asp:TextBox>
public Sub textbox_memorytotal_TextChanged(sender As Object, e As EventArgs) Handles textbox_memorytotal.TextChanged TextboxOnlyNumbers(sender) End Sub
Public Sub TextboxOnlyNumbers(ByRef objTxtBox As TextBox) If Not IsNumeric(objTxtBox.Text) Then If objTxtBox.Text.Length > 0 Then MsgBox("Numerical Values only!") Try objTxtBox.Text = objTxtBox.Text.Substring(0, objTxtBox.Text.Length - 1) objTxtBox.Select(objTxtBox.Text.Length + 1, 1) Catch ex As Exception End Try End If End If End Sub
Private Sub TextBox1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles TextBox1.KeyDown If nonNumberEntered(e, TextBox1, True) Then e.SuppressKeyPress = True End If If e.KeyCode = Keys.Enter Then End If End Sub
Public Function nonNumberEntered(ByVal e As System.Windows.Forms.KeyEventArgs, _ ByVal ob As TextBox, _ Optional ByVal decim As Boolean = False) As Boolean nonNumberEntered = False If decim Then If e.KeyCode < Keys.D0 OrElse e.KeyCode > Keys.D9 Then If e.KeyCode < Keys.NumPad0 OrElse e.KeyCode > Keys.NumPad9 Then If e.KeyCode <> Keys.Decimal And e.KeyCode <> Keys.OemPeriod Then If e.KeyCode <> Keys.Divide And e.KeyCode <> Keys.OemQuestion Then If e.KeyCode <> Keys.Back And e.KeyCode <> Keys.Delete _ And e.KeyCode <> Keys.Left And e.KeyCode <> Keys.Right Then nonNumberEntered = True End If ElseIf ob.Text.Contains("/") Or ob.Text.Length = 0 Then nonNumberEntered = True End If ElseIf ob.Text.Contains(".") Or ob.Text.Length = 0 Then nonNumberEntered = True End If End If End If Else If e.KeyCode < Keys.D0 OrElse e.KeyCode > Keys.D9 Then If e.KeyCode < Keys.NumPad0 OrElse e.KeyCode > Keys.NumPad9 Then If e.KeyCode <> Keys.Back And e.KeyCode <> Keys.Delete _ And e.KeyCode <> Keys.Left And e.KeyCode <> Keys.Right Then nonNumberEntered = True End If End If End If End If If Control.ModifierKeys = Keys.Shift Then nonNumberEntered = True End If End Function
Private Sub txtbox1_TextChanged(sender As Object, e As EventArgs) Handles txtbox1.TextChanged If txtbox1.Text.Length > 0 Then If Not IsNumeric(txtbox1.Text) Then Dim sel As Integer = txtbox1.SelectionStart txtbox1.Text = txtbox1.Text.Remove(sel - 1, 1) txtbox1.SelectionStart = sel - 1 End If End If End Sub
Dim temp1 As Integer If (RestrictedTextBox.Text = Nothing) Then temp1 = Nothing Else Try temp1 = CInt(RestrictedTextBox.Text) Catch ex As Exception temp1 = Nothing End Try End If
Private Sub textBox_TextChanged(sender As System.Object, e As System.EventArgs) Handles RestrictedTextBox.TextChanged Try temp1 = CInt(RestrictedTextBox.Text) Catch ex As Exception RestrictedTextBox.Text = temp1.ToString End Try End Sub
Private Sub PriceTxt_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles PriceTxt.Validating If Not IsNumeric(PriceTxt.Text) Then PriceTxt.BackColor = Color.Red MsgBox("The Price Should Be Numeric Only , Enter Again", vbCritical) PriceTxt.Text = "" PriceTxt.BackColor = Color.White End If End Sub
Dim los1 as New List(Of String) los1.Add("Some value") Dim los2 as New List(Of String) los2.Add("More values")
Dim combined As New List(Of String)(los1.Concat(los2));
public static class EnumerableUtils { public static IEnumerable<T> Concat<T>(IEnumerable<T> first, IEnumerable<T> second) { foreach (T item in first) yield return item; foreach (T item in second) yield return item; } }
Dim los1 as New List(Of String) los1.Add("Some value") Dim los2 as New List(Of String) los2.Add("More values") Dim combined As New List(Of String)(EnumerableUtils.Concat(los2, los2))
Dim strFile As String = "C:\ErrorLog_" & DateTime.Today.ToString("dd-MMM-yyyy") & ".txt" Dim sw As StreamWriter Dim fs As FileStream = Nothing If (Not File.Exists(strFile)) Then Try fs = File.Create(strFile) sw = File.AppendText(strFile) sw.WriteLine("Start Error Log for today") Catch ex As Exception MsgBox("Error Creating Log File") End Try Else sw = File.AppendText(strFile) sw.WriteLine("Error Message in Occured at-- " & DateTime.Now) sw.Close() End If
Dim strFile As String = "yourfile.txt" Dim fileExists As Boolean = File.Exists(strFile) Using sw As New StreamWriter(File.Open(strFile, FileMode.OpenOrCreate)) sw.WriteLine( _ IIf(fileExists, _ "Error Message in Occured at-- " & DateTime.Now, _ "Start Error Log for today")) End Using
Dim strFile As String = String.Format("C:\ErrorLog_{0}.txt", DateTime.Today.ToString("dd-MMM-yyyy")) File.AppendAllText(strFile, String.Format("Error Message in Occured at-- {0}{1}", DateTime.Now, Environment.NewLine))
Dim filePath As String = String.Format("C:\ErrorLog_{0}.txt", DateTime.Today.ToString("dd-MMM-yyyy")) Dim fileExists As Boolean = File.Exists(filePath) Using writer As New StreamWriter(filePath, True) If Not fileExists Then writer.WriteLine("Start Error Log for today") End If writer.WriteLine("Error Message in Occured at-- " & DateTime.Now) End Using
Dim strFile As String = "C:\ErrorLog_" & DateTime.Today.ToString("dd-MMM-yyyy") & ".txt" Dim sw As StreamWriter Try If (Not File.Exists(strFile)) Then sw = File.CreateText(strFile) sw.WriteLine("Start Error Log for today") Else sw = File.AppendText(strFile) End If sw.WriteLine("Error Message in Occured at-- " & DateTime.Now) sw.Close() Catch ex As IOException MsgBox("Error writing to log file.") End Try
If File.Exists(strFile) File.AppendAllText(strFile, String.Format("Error Message in Occured at-- {0:dd-MMM-yyyy}{1}", Date.Today, Environment.NewLine)) Else File.AppendAllText(strFile, "Start Error Log for today{0}Error Message in Occured at-- {1:dd-MMM-yyyy}{0}", Environment.NewLine, Date.Today) End If
Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click Dim filePath As String = String.Format("C:\ErrorLog_{0}.txt", DateTime.Today.ToString("dd-MMM-yyyy")) Using writer As New StreamWriter(filePath, True) If File.Exists(filePath) Then writer.WriteLine("Error Message in Occured at-- " & DateTime.Now) Else writer.WriteLine("Start Error Log for today") End If End Using End Sub
Dim filePath As String = String.Format("C:\ErrorLog_{0}.txt", DateTime.Today.ToString("dd-MMM-yyyy")) if File.Exists(filePath) then Using writer As New StreamWriter(filePath, True) writer.WriteLine("Error Message in Occured at-- " & DateTime.Now) Else writer.WriteLine("Start Error Log for today") End Using end if
msbuild /property:Configuration=Release MyFile.vbproj
Public Function RealTimeUntilNow(ByVal dt As DateTime, Optional ByVal bAllowSegments As Byte = 2) As String Dim rYears, rMonths, rDays, rHours, rMinutes, rSeconds As Int16 Dim dtNow = DateTime.Now Dim daysInBaseMonth = Date.DaysInMonth(dt.Year, dt.Month) rYears = dtNow.Year - dt.Year rMonths = dtNow.Month - dt.Month If rMonths < 0 Then rMonths += 12 : rYears -= 1 rDays = dtNow.Day - dt.Day If rDays < 0 Then rDays += daysInBaseMonth : rMonths -= 1 rHours = dtNow.Hour - dt.Hour If rHours < 0 Then rHours += 24 : rDays -= 1 rMinutes = dtNow.Minute - dt.Minute If rMinutes < 0 Then rMinutes += 60 : rHours -= 1 rSeconds = dtNow.Second - dt.Second If rSeconds < 0 Then rSeconds += 60 : rMinutes -= 1 Dim sb As StringBuilder = New StringBuilder() Dim iSegmentsAdded As Int16 = 0 If rYears > 0 Then sb.Append(rYears) : sb.Append(" year" & If(rYears <> 1, "s", "") & ", ") : iSegmentsAdded += 1 If bAllowSegments = iSegmentsAdded Then GoTo parseAndReturn If rMonths > 0 Then sb.AppendFormat(rMonths) : sb.Append(" month" & If(rMonths <> 1, "s", "") & ", ") : iSegmentsAdded += 1 If bAllowSegments = iSegmentsAdded Then GoTo parseAndReturn If rDays > 0 Then sb.Append(rDays) : sb.Append(" day" & If(rDays <> 1, "s", "") & ", ") : iSegmentsAdded += 1 If bAllowSegments = iSegmentsAdded Then GoTo parseAndReturn If rHours > 0 Then sb.Append(rHours) : sb.Append(" hour" & If(rHours <> 1, "s", "") & ", ") : iSegmentsAdded += 1 If bAllowSegments = iSegmentsAdded Then GoTo parseAndReturn If rMinutes > 0 Then sb.Append(rMinutes) : sb.Append(" minute" & If(rMinutes <> 1, "s", "") & ", ") : iSegmentsAdded += 1 If bAllowSegments = iSegmentsAdded Then GoTo parseAndReturn If rSeconds > 0 Then sb.Append(rSeconds) : sb.Append(" second" & If(rSeconds <> 1, "s", "") & "") : iSegmentsAdded += 1 parseAndReturn: If sb.ToString = "" Then sb.Append("less than 1 second") Return ReplaceLast(sb.ToString.TrimEnd(" ", ",").ToString, ",", " and") End Function
<Extension()> _ Public Function ReplaceLast(ByVal sReplacable As String, ByVal sReplaceWhat As String, ByVal sReplaceWith As String) As String sReplacable = sReplacable.ReverseIt sReplacable = Replace(sReplacable, sReplaceWhat.ReverseIt, sReplaceWith.ReverseIt, , 1) Return sReplacable.ReverseIt.ToString End Function <Extension()> _ Public Function ReverseIt(ByVal strS As String, Optional ByVal n As Integer = -1) As String Dim strTempX As String = "", intI As Integer If n > strS.Length Or n = -1 Then n = strS.Length For intI = n To 1 Step -1 strTempX = strTempX + Mid(strS, intI, 1) Next intI ReverseIt = strTempX + Right(strS, Len(strS) - n) End Function
Public Property Foo As String Public Property Foo2 As String
Public Class Class1 Private _foo As String Public Property Foo() As String Get Return _foo End Get Set(ByVal value As String) _foo = value End Set End Property Public Sub New(ByVal foo As String) _foo = foo End Sub End Class
Option Strict On Module Module1 Sub Main() For Each i As Integer In New String() {"why", "is", "this", "tolerated?"} Next End Sub End Module
Dim VB$t_array$L0 As String() = New String() { "why", "is", "this", "tolerated?" } Dim VB$t_i4$L0 As Integer For VB$t_i4$L0 = 0 To VB$t_array$L0.Length - 1 Dim i As Integer = Conversions.ToInteger(VB$t_array$L0(VB$t_i4$L0)) Next VB$t_i4$L0
@foreach(string genreName in Model.Genres) { <li>@genreName</li> }
@For Each genreName As String In Model.Genres @:<li>@genreName</li> Next
@For Each genreName As String In Model.Genres @<text> <li>@genreName</li> </text> Next
<ul> @For Each i As Integer In Enumerable.Range(0, 5) @:<li>@i</li> Next </ul>
<ul> <li>0</li> <li>1</li> <li>2</li> <li>3</li> <li>4</li> </ul>
@using (Html.BeginForm()) { @Html.ValidationSummary() <p>Your name: @Html.TextBoxFor(x => x.Name, new { @class = "form-control" }) </p> <p>Your email: @Html.TextBoxFor(x => x.Email, new { @class = "form-control" }) </p> <p>Your phone: @Html.TextBoxFor(x => x.Phone, new { @class = "form-control" }) </p> <p>Will you attend? @Html.DropDownListFor(x => x.WillAttend, new[] { new SelectListItem() {Text = "Yes, I Value = bool.TrueString}, new SelectListItem() {Text = "No, I can Value = bool.FalseString} }, "Choose an option", new { @class = "form-control" }) </p> }
@Using Html.BeginForm() @:<p>Your name: @Html.TextBoxFor(Function(x) x.Name)</p> @:<p>Your email: @Html.TextBoxFor(Function(x) x.Email)</p> @:<p>Your phone: @Html.TextBoxFor(Function(x) x.Phone)</p> @:<p>Will you attend? @Html.DropDownListFor(Function(x) x.WillAttend, New SelectListItem() {New SelectListItem() With {.Text = "Yes", .Value = Boolean.TrueString}, New SelectListItem() With {.Text = "No", .Value = Boolean.FalseString}}) @:</p> End Using @Using Html.BeginForm() @<text> <p>Your name: @Html.TextBoxFor(Function(x) x.Name)</p> <p>Your email: @Html.TextBoxFor(Function(x) x.Email)</p> <p>Your phone: @Html.TextBoxFor(Function(x) x.Phone)</p> <p>Will you attend? @Html.DropDownListFor(Function(x) x.WillAttend, New SelectListItem() {New SelectListItem() With {.Text = "Yes", .Value = Boolean.TrueString}, New SelectListItem() With {.Text = "No", .Value = Boolean.FalseString}}) </p> </text> End Using @code Using Html.BeginForm() @:<p>Your name: @Html.TextBoxFor(Function(x) x.Name)</p> @:<p>Your email: @Html.TextBoxFor(Function(x) x.Email)</p> @:<p>Your phone: @Html.TextBoxFor(Function(x) x.Phone)</p> @:<p>Will you attend? @Html.DropDownListFor(Function(x) x.WillAttend, New SelectListItem() {New SelectListItem() With {.Text = "Yes", .Value = Boolean.TrueString}, New SelectListItem() With {.Text = "No", .Value = Boolean.FalseString}}) @:</p> End Using End Code @code Using Html.BeginForm() @<text> <p>Your name: @Html.TextBoxFor(Function(x) x.Name)</p> <p>Your email: @Html.TextBoxFor(Function(x) x.Email)</p> <p>Your phone: @Html.TextBoxFor(Function(x) x.Phone)</p> <p>Will you attend? @Html.DropDownListFor(Function(x) x.WillAttend, New SelectListItem() {New SelectListItem() With {.Text = "Yes", .Value = Boolean.TrueString}, New SelectListItem() With {.Text = "No", .Value = Boolean.FalseString}}) </p> </text> End Using End Code
? <!-- Single statement blocks --> @Code Dim total = 7 End Code @Code Dim myMessage = "Hello World" End Code <!-- Inline expressions --> <p>The value of your account is: @total </p> <p>The value of myMessage is: @myMessage</p> <!-- Multi-statement block --> @Code Dim greeting = "Welcome to our site!" Dim weekDay = DateTime.Now.DayOfWeek Dim greetingMessage = greeting & " Today is: " & weekDay.ToString() End Code <p>The greeting is: @greetingMessage</p>
1 Module Module1 2 3 Sub Main() 4 Console.WriteLine("Hello") 5 End Sub 6 7 End Module
Private Sub txtDiscount_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtDiscount.KeyPress If e.KeyChar = Microsoft.VisualBasic.ChrW(Keys.Return) Then SendKeys.Send("{TAB}") e.Handled = True End If End Sub
If e.KeyCode = Keys.Enter Then Messagebox.Show("Enter key pressed") end if
Private Sub Form1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles Me.KeyPress If e.KeyChar = Microsoft.VisualBasic.ChrW(Keys.Return) Then SendKeys.Send("{TAB}") e.Handled = True End If End Sub
Protected Overrides Function ProcessCmdKey(ByRef msg As System.Windows.Forms.Message, _ ByVal keyData As System.Windows.Forms.Keys) _ As Boolean If msg.WParam.ToInt32() = CInt(Keys.Enter) Then SendKeys.Send("{Tab}") Return True End If Return MyBase.ProcessCmdKey(msg, keyData) End Function
Private Sub tbSecurity_KeyPress(sender As System.Object, e As System.EventArgs) Handles tbSecurity.KeyPress Dim tmp As System.Windows.Forms.KeyPressEventArgs = e If tmp.KeyChar = ChrW(Keys.Enter) Then MessageBox.Show("Enter key") Else MessageBox.Show(tmp.KeyChar) End If End Sub
Private Sub txtPassword_PreviewKeyDown(ByVal sender As System.Object, ByVal e As System.Windows.Forms.PreviewKeyDownEventArgs) Handles txtPassword.PreviewKeyDown If e.KeyCode = Keys.Enter Then Call btnLogin_Click(sender, e) End If End Sub
Private Sub txtFiltro_PreviewKeyDown(ByVal sender As System.Object, ByVal e As System.Windows.Forms.PreviewKeyDownEventArgs) Handles txtFiltro.PreviewKeyDown Select Case e.KeyCode Case Keys.Enter e.IsInputKey = True End Select End Sub
Private Sub txtFiltro_KeyDown(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txtFiltro.KeyDown If e.KeyCode = Keys.Enter Then e.handled = True Textbox1.Focus() End If End Sub
Private Sub BagQty_KeyPress(sender As Object, e As KeyPressEventArgs) Handles BagQty.KeyPress Select e.KeyChar Case Microsoft.VisualBasic.ChrW(Keys.Return) PurchaseTotal.Text = Val(ActualRate.Text) * Val(BagQty.Text) End Select End Sub
Private Sub TxtSearch_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles TxtSearch.KeyPress Try If e.KeyChar = Convert.ToChar(13) Then nexttextbox.setfoucus End If Catch ex As Exception MsgBox(ex.Message) End Try End Sub
Public Class Form1 Private Sub TextBox1_KeyPress(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles TextBox1.KeyPress If e.KeyChar = Convert.ToChar(13) Then MsgBox("enter key pressd ") End If End Sub End Clas Public Class Form1 Private Sub TextBox1_KeyDown(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles TextBox1.KeyDown If e.KeyCode = Keys.Enter Then MsgBox("enter key pressd ") End If End Sub End Class
Private Sub TextBox1_KeyUp(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles TextBox1.KeyUp If e.KeyCode = Keys.Enter Then MsgBox("Fel lösenord") End If End Sub
If Asc(e.KeyChar) = 13 Then MessageBox.Show("Enter pressed!") e.Handled = True End If
If e.KeyCode = Keys.Enter Then MsgBox ("You pressed enter") End if
DataGridView1.DataSource=Nothing DataGridView1.Refresh()
ta.clear() DataGridView1.DataSource = ta DataGridView1.DataSource = Nothing
Call CType(myDataGrid.DataSource, DataTable).Rows.Clear()
Public Class Form1 Private dataStuff As List(Of String) Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click DataGridView1.DataSource = Nothing End Sub Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load dataStuff = New List(Of String) dataStuff.Add("qwerty") dataStuff.Add("another") dataStuff.Add("...and another") DataGridView1.DataSource = dataStuff End Sub End Class
dtStore.Rows.Clear() dtStore.Columns.Clear() gridView.DataSource = dtStore
Try Me.Fh_maintTableAdapter.FillByHydrantNumber(Me.Fh2010DataSet.fh_maint, hydrantNum) Catch ex As System.Exception System.Windows.Forms.MessageBox.Show(ex.Message) End Try
DataGridView1.DataSource = Nothing DataGridView1.DataBind()
Public Sub doQuery(sql As String) Try DS.Clear() DBCon.Open() Cmd = New OleDbCommand(sql, DBCon) DA = New OleDbDataAdapter(Cmd) DA.Fill(DS) DBCon.Close() Catch ex As Exception MsgBox(ex.Message) End Try End Sub
gvArchive.DataSource = Nothing gvArchive.DataBind()
Dim connectionString As String = "your-string-details" Dim connection As New SqlConnection(connectionString)
Private Sub BindOrders() connection.Open() Dim sqlCommand As String = "SELECT * FROM [dictionary]" Dim dataAdapter As New SqlDataAdapter(sqlCommand, connection) Dim dt As New DataTable() dataAdapter.Fill(dt) GridView1.Columns.Clear() If GridView1.Columns.Count <= 0 Then Dim Field As New BoundField() Field.DataField = "id" Field.HeaderText = "id" GridView1.Columns.Add(Field) Field = New BoundField() Field.DataField = "strArHundreds" Field.HeaderText = "strArHundreds" GridView1.Columns.Add(Field) Field = New BoundField() Field.DataField = "strArTens" Field.HeaderText = "strArTens" GridView1.Columns.Add(Field) Field = New BoundField() Field.DataField = "strArSingles" Field.HeaderText = "strArSingles" GridView1.Columns.Add(Field) End If GridView1.DataSource = dt GridView1.DataBind() connection.Close() End Sub
Private Sub BindDocuments() connection.Open() Dim sqlCommand As String = "SELECT * FROM [meny]" Dim dataAdapter As New SqlDataAdapter(sqlCommand, connection) Dim dt As New DataTable() dataAdapter.Fill(dt) GridView1.Columns.Clear() If GridView1.Columns.Count <= 0 Then Dim Field As New BoundField Field = New BoundField Field.DataField = "id" Field.HeaderText = "id" GridView1.Columns.Add(Field) Field = New BoundField Field.DataField = "nazev" Field.HeaderText = "nazev" GridView1.Columns.Add(Field) End If GridView1.DataSource = dt GridView1.DataBind() connection.Close() End Sub
Protected Sub RadioButtonList1_SelectedIndexChanged(sender As Object, e As EventArgs) Handles RadioButtonList1.SelectedIndexChanged Dim index As Integer index = RadioButtonList1.SelectedIndex Select Case index Case 0 BindOrders() Exit Select Case 1 BindDocuments() Exit Select End Select End Sub
<asp:RadioButtonList ID="RadioButtonList1" runat="server" AutoPostBack="True" OnSelectedIndexChanged="RadioButtonList1_SelectedIndexChanged"> <asp:ListItem>Obraty</asp:ListItem> <asp:ListItem>Dokumenty</asp:ListItem> </asp:RadioButtonList> <asp:GridView ID="GridView1" runat="server" AutoGenerateColumns="False"> </asp:GridView>
myDataSet.clear() myDataAdapter.Fill(myDataSet) myDataGridView.DataSource = myDataSet.Tables(0)
DataGridView2.DataSource = Nothing DataGridView2.DataMember = Nothing DataGridView2.Refresh() Try connection.Open() adapter1 = New SqlDataAdapter(sql, connection) ds1.Clear() adapter1.Fill(ds1) DataGridView2.DataSource = ds1.Tables(0) connection.Close() Catch ex As Exception MsgBox(ex.ToString) End Try
DataGridView1.Enable = false DataGridView1.DataSource = Nothing DataGridView1.Enable = true
DataGridView1.DataSource=Nothing DataGridView1.DataBind()
Public Property Get Name() As String End Property Public Property Get Age() As Long End Property
Implements Person Private name_ As String Private age_ As Long Public Property Get Name() As String Name = name_ End Property Public Property Let Name(ByVal Value As String) name_ = Value End Property Public Property Get Age() As Long Age = age_ End Property Public Property Let Age(ByVal Value As Long) age_ = Value End Property Private Property Get Person_Name() As String Person_Name = Name End Property Private Property Get Person_Age() As Long Person_Age = Age End Property
Public Enum ComparisonMethod Names = 0 Ages = 1 References = 2 End Enum Public Function Compare(ByRef obj1 As Person, _ ByRef obj2 As Person, _ Optional method As ComparisonMethod = 0) _ As Boolean Select Case method Case Ages Compare = IIf(obj1.Age = obj2.Age, True, False) Case References Compare = IIf(obj1 Is obj2, True, False) Case Else Compare = IIf(obj1.Name = obj2.Name, True, False) End Select End Function
Option Explicit Sub Main() Dim emp As New Employee emp.Name = "person" emp.Age = 25 Dim man As New Manager man.Name = "manager" man.Age = 25 Dim People As New Collection People.Add emp People.Add man Dim individual As Person For Each individual In People Debug.Print TypeName(individual), individual.Name, individual.Age Next End Sub
emp.Name = "name" man.Name = "name" Comparer.Compare(emp, name, Names) Comparer.Compare(emp, name, References) Comparer.Compare(emp, emp, References)
Public Function GetComputerName() As String Dim ComputerName As String ComputerName = System.Net.Dns.GetHostName Return ComputerName End Function
Private Sub Form1_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load Me.Text = System.Windows.Forms.SystemInformation.ComputerName End Sub
Private Sub load(sender As Object, e As EventArgs)Handles MyBase.Loaded TextBlock1.Text = Environment.MachineName End Sub
Private Sub Button_Click_1(sender As Object, e As RoutedEventArgs) Handles Button1.Click TextBlock1.Text = Environment.MachineName MyBase.Title = "Hello " + Environment.MachineName End Sub
Dim arr As Integer() = {1, 2, 3} Dim newItem As Integer = 4
Dim list As List(Of Integer)(arr) list.Add(newItem) arr = list.ToArray() ReDim Preserve arr(arr.Length) arr(arr.Length - 1) = newItem Array.Resize(arr, arr.Length + 1) arr(arr.Length - 1) = newItem
Public Module MyExtensions <Extension()> _ Public Sub Add(Of T)(ByRef arr As T(), item As T) Array.Resize(arr, arr.Length + 1) arr(arr.Length - 1) = item End Sub End Module
Dim arr As Integer() = {1, 2, 3} Dim newItem As Integer = 4 arr.Add(newItem)
Module ArrayExtension <Extension()> _ Public Sub Add(Of T)(ByRef arr As T(), item As T) If arr IsNot Nothing Then Array.Resize(arr, arr.Length + 1) arr(arr.Length - 1) = item Else ReDim arr(0) arr(0) = item End If End Sub End Module
Dim arr As Integer() = {1, 2, 3} Dim newItem As Integer = 4 ReDim Preserve arr (3) arr(3)=newItem
Dim arr As Integer() = {1, 2, 3} Dim newItem As Integer = 4 arr = arr.Concat({newItem}).ToArray
numberOfItems = ?? If numberOfItems+1 >= arr.Length Then Array.Resize(arr, arr.Length + 10) End If arr(numberOfItems) = newItem numberOfItems += 1
Dim list As List(Of Integer)(arr) list.Add(newItem) arrayWasModified = True Function GetArray() If arrayWasModified Then arr = list.ToArray() End If Return Arr End Function
OpenFileDialog.ShowDialog() PictureNameTextEdit.Text = OpenFileDialog.FileName
OpenFileDialog.ShowDialog() PictureNameTextEdit.Text = System.IO.Path.GetFileName(OpenFileDialog.FileName)
OpenFileDialog.ShowDialog() PictureNameTextEdit.Text = System.IO.Path.GetFileName(OpenFileDialog.FileName)
string[] FileFullPath; string FileName; objOpenFileDialog.Title = "Select Center Logo"; objOpenFileDialog.ShowDialog(); FileFullPath = objOpenFileDialog.FileNames[0].ToString().Split( FileName = FileFullPath[FileFullPath.Length - 1]; System.IO.File.Copy(OFD.FileName, Application.StartupPath + "/CenterLogo/" + FileName, true);
MsgBox(System.IO.Path.GetExtension(Opendlg.FileName))
MsgBox(System.IO.Path.GetFileNameWithoutExtension(Opendlg.FileName))
Imports System.IO PictureNameTextEdit.Text = Path.GetFileNameWithoutExtension(OpenFileDialog1.Fi‌​leName)
OpenFileDialog.ShowDialog() PictureNameTextEdit.Text = OpenFileDialog.SafeFileName
TempList.ForEach(Function(obj) obj.Deleted = True End Function)
TempList.ForEach(Function(obj) obj.Deleted = True Return True End Function)
Public Function MyFunction (Of TData) (ByVal InParam As Integer) As TData End Sub
If Nullable.GetUnderlyingType(GetType(TData)) <> Nothing
if (Nullable.GetUnderlyingType(typeof(TData)) != null)
Dim hasNullableParameter As Boolean = _ obj.GetType.IsGenericType _ AndAlso _ obj.GetType.GetGenericTypeDefinition = GetType(Nullable(Of ))
bool hasNullableParameter = obj.GetType().IsGenericType && obj.GetGenericTypeDefinition().Equals(typeof(Nullable<>));
public static bool IsNullable(this Type type) { Contract.Requires(type != null); return type.IsDerivedFromOpenGenericType(typeof(Nullable<>)); }
protected System.Web.UI.HtmlControls.HtmlGenericControl divControl;
divControl.Style.Add("height", number / anotherNumer);
Protected divControl As System.Web.UI.HtmlControls.HtmlGenericControl
divControl.Attributes.Add("style", "height: number");
Dim leftString = strOrig.Substring(0, strOrig.IndexOf("-"))
Dim leftString = Left(strOrig, InStr(strOrig, "-"))
Dim str As String = "010451-09F2" Dim leftPart As String = str.Split("-")(0)
string mystring ="010451-09F2"; string whatIwant = mystring.Split(
dim s as String = "010451-09F2" Console.WriteLine(s.Substring(0, s.IndexOf("-"))) Console.WriteLine(s.Split("-")(0))
Dim sValue As String = "010451-09F2" Debug.WriteLine(sValue.Substring(0, sValue.IndexOf("-"c)))
Dim str1 as string = me@test.com Dim str As String str = Strings.Left(str1, str1.LastIndexOf("@"))
Dim Sqrt As Double Sqrt = Radius ^ 2 - (CenterX - X) ^ 2
Class Int32 End Class Module Module1 Sub Main() Dim local1 As Integer = Nothing Dim local2 As Int32 = Nothing local1 = local2 End Sub End Module
Private Sub btnClear_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnClear.Click ClearAllControls(panMid, True) End Sub ClearAllControls(ByRef container As Panel, Optional Recurse As Boolean = True) Dim ctrl As Control For Each ctrl In container.Controls If (ctrl.GetType() Is GetType(TextBox)) Then Dim txt As TextBox = CType(ctrl, TextBox) txt.Text = "" End If If (ctrl.GetType() Is GetType(CheckBox)) Then Dim chkbx As CheckBox = CType(ctrl, CheckBox) chkbx.Checked = False End If If (ctrl.GetType() Is GetType(ComboBox)) Then Dim cbobx As ComboBox = CType(ctrl, ComboBox) cbobx.SelectedIndex = -1 End If If (ctrl.GetType() Is GetType(DateTimePicker)) Then Dim dtp As DateTimePicker = CType(ctrl, DateTimePicker) dtp.Value = Now() End If If Recurse Then If (ctrl.GetType() Is GetType(Panel)) Then Dim pnl As Panel = CType(ctrl, Panel) ClearAllControls(pnl, Recurse) End If If ctrl.GetType() Is GetType(GroupBox) Then Dim grbx As GroupBox = CType(ctrl, GroupBox) ClearAllControls(grbx, Recurse) End If End If Next End Sub
Private Sub ClearAllControls(ByRef controls As ControlCollection, Optional ByVal Recurse As Boolean = True)
Dim dtp as DateTimePicker = TryCast(ctrl, DateTimePicker) If dtp IsNot Nothing then dtp.Value = Now()
<Extension()> _ Public Shared Sub ClearValue(c as Control, recursive as Boolean) Dim dtp as DateTimePicker = TryCast(c, DateTimePicker) If dtp IsNot Nothing Then dtp.Value = Now() End Sub
<Extension()> _ Public Shared Sub ClearValue(c as CheckBox) If c IsNot Nothing Then c.Checked = False End Sub TryCast(ctrl, CheckBox).ClearValue()
Private Sub GetControls() For Each GroupBoxCntrol As Control In Me.Controls If TypeOf GroupBoxCntrol Is GroupBox Then For Each cntrl As Control In GroupBoxCntrol.Controls Next End If Next End Sub
ClearAllControls(ByRef container As Control, Optional ByVal Recurse As Boolean = True)
For Each c In CONTAINER.Controls If TypeOf c Is TextBox Then c.Text = "" End If Next
Private Sub ClearAll() Try For Each ctrl As Control In Me.Controls If ctrl.[GetType]().Name = "Panel" Then ClearControls(ctrl) End If If ctrl.[GetType]().Name = "GroupBox" Then ClearControls(ctrl) End If If ctrl.[GetType]().Name = "ComboBox" Then Dim tb As ComboBox = TryCast(ctrl, ComboBox) tb.SelectedText = "" End If If ctrl.[GetType]().Name = "TabControl" Then ClearControls(ctrl) End If If ctrl.[GetType]().Name = "TextBox" Then Dim tb As TextBox = TryCast(ctrl, TextBox) tb.Clear() End If If ctrl.[GetType]().Name = "RadioButton" Then Dim tb As RadioButton = TryCast(ctrl, RadioButton) tb.Checked = False End If If ctrl.[GetType]().Name = "CheckBox" Then Dim tb As CheckBox = TryCast(ctrl, CheckBox) tb.Checked = False End If If ctrl.[GetType]().Name = "ComboBox" Then Dim tb As ComboBox = TryCast(ctrl, ComboBox) tb.SelectedIndex = 0 End If If ctrl.[GetType]().Name = "RichTextBox" Then Dim tb As RichTextBox = TryCast(ctrl, RichTextBox) tb.Clear() End If Next Catch ex As Exception MessageBox.Show(ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error) End Try End Sub Private Sub ClearControls(ByVal Type As Control) Try For Each ctrl As Control In Type.Controls If ctrl.[GetType]().Name = "TextBox" Then Dim tb As TextBox = TryCast(ctrl, TextBox) tb.Clear() End If If ctrl.[GetType]().Name = "Panel" Then ClearControls(ctrl) End If If ctrl.[GetType]().Name = "GroupBox" Then ClearControls(ctrl) End If If ctrl.[GetType]().Name = "TabPage" Then ClearControls(ctrl) End If If ctrl.[GetType]().Name = "ComboBox" Then Dim tb As ComboBox = TryCast(ctrl, ComboBox) tb.SelectedText = "" End If If ctrl.[GetType]().Name = "RadioButton" Then Dim tb As RadioButton = TryCast(ctrl, RadioButton) tb.Checked = False End If If ctrl.[GetType]().Name = "CheckBox" Then Dim tb As CheckBox = TryCast(ctrl, CheckBox) tb.Checked = False End If If ctrl.[GetType]().Name = "RichTextBox" Then Dim tb As RichTextBox = TryCast(ctrl, RichTextBox) tb.Clear() End If Next Catch ex As Exception MessageBox.Show(ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error) End Try End Sub
Private Sub ClearForm(ByVal ctrlParent As Control) Dim ctrl As Control For Each ctrl In ctrlParent.Controls If TypeOf ctrl Is TextBox Then ctrl.Text = "" End If If ctrl.HasChildren Then ClearForm(ctrl) End If Next End Sub
Public Sub raz(lst As Control.ControlCollection, Optional recursive As Boolean = True) For Each ctrl As Control In lst If TypeOf ctrl Is TextBox Then CType(ctrl, TextBox).Clear() End If If TypeOf ctrl Is MaskedTextBox Then CType(ctrl, MaskedTextBox).Clear() End If If TypeOf ctrl Is ComboBox Then CType(ctrl, ComboBox).SelectedIndex = -1 End If If TypeOf ctrl Is DateTimePicker Then Dim dtp As DateTimePicker = CType(ctrl, DateTimePicker) dtp.CustomFormat = " " End If If TypeOf ctrl Is CheckedListBox Then Dim clbox As CheckedListBox = CType(ctrl, CheckedListBox) For i As Integer = 0 To clbox.Items.Count - 1 clbox.SetItemChecked(i, False) Next End If If TypeOf ctrl Is RadioButton Then CType(ctrl, RadioButton).Checked = False End If If recursive Then If TypeOf ctrl Is GroupBox Then raz(CType(ctrl, GroupBox).Controls) End If End If Next End Sub
ControlIterator.Disable(CheckBox1) ControlIterator.Enable({CheckBox1, CheckBox2}) ControlIterator.Check(Of CheckBox)(Me) ControlIterator.Uncheck(Of CheckBox)(Me.GroupBox1) ControlIterator.Hide(Of CheckBox)("1") ControlIterator.PerformAction(Of CheckBox)(Sub(ctrl As CheckBox) ctrl.Visible = True) ControlIterator.AsyncPerformAction(RichTextBox1, Sub(rb As RichTextBox) For n As Integer = 0 To 9 rb.AppendText(CStr(n)) Next End Sub) ControlIterator.PerformAction(Me.Controls, Sub(c As Control) c.BackColor = Color.Green End Sub)
Dim str As String Dim int As Nullable(Of Integer) Dim reader As SqlDataReader Dim colA As Integer = reader.GetOrdinal("colA") Dim colB As Integer = reader.GetOrdinal("colB") str = If(reader.IsDBNull(colA), DirectCast(Nothing, String), reader.GetString(colA)) int = If(reader.IsDBNull(colB), DirectCast(Nothing, Nullable(Of Integer)), reader.GetInt32(colB))
Dim pars As List(Of SqlParameter) = New List(Of SqlParameter) With pars .Add(New SqlParameter("@Id", LogbookNoteId)) If Flag Then .Add(New SqlParameter("@Status", Flag)) End If End With ExecuteNonQuery("dbo.UpdateSomeTable", pars, CommandType.StoredProcedure)
Option Compare Database: Option Explicit rsDataSet.Close: Set rsDataSet= Nothing
Do Until IE.ReadyState = READYSTATE_COMPLETE: DoEvents: Loop
Public Sub DoYouKnowWhatThisDoes() MsgBox Example End Sub Private Function Example() Const s$ = "078243185105164060193114247147243200250160004134202029132090174000215255134164128142" Const w% = 3: Const l% = 42: Dim i%, r$: For i = 1 To l Step w: r = r & ChrW$(Mid$(s, i, w) Xor Mid$(s, i + l, w)): Next: Example = r End Function
Select Case success Case ERROR_FILE_NO_ASSOCIATION: msg = "no association" Case ERROR_FILE_NOT_FOUND: msg = "file not found" Case ERROR_PATH_NOT_FOUND: msg = "path not found" Case ERROR_BAD_FORMAT: msg = "bad format"
If _bCancel Then Status = CancelProcess() : Return Status
Select Case GetStringValue(Index).Trim.ToLower Case "yes", "y" : GetBooleanValue = True Case "no", "n" : GetBooleanValue = False Case Else : GetBooleanValue = Nothing End Select
Public Class DerivedClass : Inherits BaseClass ... End Class
Using pro As New Process() : With pro ... End With End Using
If somevalue1 = 0 Then AddLogTry("True") Else AddLogFalse("False") If somevalue2 = 0 Then AddLogTry("True") Else AddLogFalse("False") If somevalue3 = 0 Then AddLogTry("True") Else AddLogFalse("False") If somevlaue1 = 0 Then AddLogTrue("True") Else AddLogFalse("False") EndIf If somevlaue2 = 0 Then AddLogTrue("True") Else AddLogFalse("False") EndIf If somevlaue3 = 0 Then AddLogTrue("True") Else AddLogFalse("False") EndIf
System.DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss")
<PasswordBox Height="42" Width="200" Margin="22,28,28,0" Name="passwordBox1" VerticalAlignment="Top" Background="LightBlue" Foreground="DarkBlue" MaxLength="25" PasswordChar="*" />
<appSettings> <add key="AdminPassword" value="ASDF1234" /> </appSettings>
System.Configuration.ConfigurationManager.AppSettings["AdminPassword"].ToString()
Dim myhousestring As String = "My house is cold" If txt.Text.Contains(myhousestring) Then Messagebox.Show("Found it") End If
Dim myhousestring As String = "My house is cold" If txt.Text.IndexOf(myhousestring, 0, StringComparison.CurrentCultureIgnoreCase) > -1 Then Messagebox.Show("Found it") End If
Dim myhousestring As String = "MY HOUSE IS COLD" If txt.Text.ToUpper.Contains(myhousestring) Then Messagebox.Show("Found it") End If
Dim UGroup as String = dr.Item(2).ToString().ToUpper Dim s as String = ds.Item(1).ToString.ToUpper If s.Contains(UGroup) then MsgBox("Well done!") Else End Sub
Dim s as string = "My HoUsE iS cOlD".ToUpper If s.Contains("MY HOUSE IS COLD") Then Exit Sub
Dim match As Match = Regex.Match(Textbox1.text,"My house is cold",RegexOptions.IgnoreCase) If match.Success Then Msgbox(match.Value) End If
<Runtime.CompilerServices.Extension> Function InStr(s As String, find As String) As Boolean Return s.ToLower.Contains(find.ToLower) End Function
If InStr(1, value, search, vbTextCompare) > 0 Then Beep End If '
Select commentStr Case commentStr.Contains("10") Case commentStr.Contains("15")
Select Case True Case commentStr.Contains("10") Case commentStr.Contains("15") End Select
URL url = new URL("http: HttpURLConnection httpcon = (HttpURLConnection) url.openConnection(); httpcon.addRequestProperty("User-Agent", "anything"); IOUtils.copy(httpcon.getInputStream(), new FileOutputStream("output.mp3"));
Imports System.Net Imports System.IO Imports System.Text Dim MP As New MediaPlayer.MediaPlayer Private Sub SaySomething(TTS As String) If Not TTS = "" Then If Not System.IO.File.Exists(Environment.CurrentDirectory.ToString() + "/TTS/" + TTS + ".mp3") Then Dim WR As HttpWebRequest = HttpWebRequest.Create("http: Dim response As HttpWebResponse = CType(WR.GetResponse(), HttpWebResponse) Dim receiveStream As Stream = response.GetResponseStream() Dim readStream As New StreamReader(receiveStream, Encoding.UTF8) If Not System.IO.Directory.Exists(Environment.CurrentDirectory.ToString() + "/TTS") Then System.IO.Directory.CreateDirectory(Environment.CurrentDirectory.ToString() + "/TTS") End If Dim fs As New FileStream(Environment.CurrentDirectory.ToString() + "/TTS/" + TTS + ".mp3", FileMode.Create) readStream.BaseStream.CopyTo(fs) fs.Close() fs.Dispose() readStream.Dispose() receiveStream.Dispose() End If MP.Open(Environment.CurrentDirectory.ToString() + "/TTS/" + TTS + ".mp3") End If End Sub
myObjects.RemoveAll(delegate (MyObject m) { return m.X >= 10; });
myObjects.RemoveAll(AddressOf GreaterOrEqaulToTen) Private Function GreaterOrEqaulToTen(ByVal m as MyObject) If m.x >= 10 Then Return true Else Return False End If End Function
myObjects.RemoveAll(Function(m As MyObject) m.X >= 10)
<TestFixture()> _ Public Class TestClass <Test()> _ Public Sub EventTest() Dim eventClass As New EventClass Dim eventRaised As Boolean = False AddHandler eventClass.AnEvent, Function() (eventRaised = True) eventClass.RaiseIt() Assert.IsTrue(eventRaised) End Sub End Class Public Class EventClass Public Event AnEvent() Public Sub RaiseIt() RaiseEvent AnEvent() End Sub End Class
<TestFixture()> _ Public Class Test <Test()> _ Public Sub EventTest() Dim eventClass As New EventClass Dim eventRaised As Boolean = False AddHandler eventClass.AnEvent, Function() (SetValueToTrue(eventRaised)) eventClass.RaiseIt() Assert.IsTrue(eventRaised) End Sub Private Function SetValueToTrue(ByRef value As Boolean) As Boolean value = True Return True End Function End Class Public Class EventClass Public Event AnEvent() Public Sub RaiseIt() RaiseEvent AnEvent() End Sub End Class
Dim screenWidth as Integer = Screen.PrimaryScreen.Bounds.Width Dim screenHeight as Integer = Screen.PrimaryScreen.Bounds.Height
Public Function ScreenResolution() As String Dim intX As Integer = Screen.PrimaryScreen.Bounds.Width Dim intY As Integer = Screen.PrimaryScreen.Bounds.Height Return intX & " × " & intY End Function
Module Module1 Sub Main() Dim a1 As C1 = New C2 Dim a2 As New C2 a1.M1() a2.M1() a1.M2() a2.M2() a1.M3() a2.M3() a1.M1(1) a2.M1(1) a1.M2(1) a1.M3(1) If Debugger.IsAttached Then _ Console.ReadLine() End Sub End Module Class C1 Public Sub M1() Console.WriteLine("C1.M1") End Sub Public Sub M1(ByVal i As Integer) Console.WriteLine("C1.M1(int)") End Sub Public Sub M2() Console.WriteLine("C1.M2") End Sub Public Sub M2(ByVal i As Integer) Console.WriteLine("C1.M2(int)") End Sub Public Overridable Sub M3() Console.WriteLine("C1.M3") End Sub Public Overridable Sub M3(ByVal i As Integer) Console.WriteLine("C1.M3(int)") End Sub End Class Class C2 Inherits C1 Public Overloads Sub M1() Console.WriteLine("C2.M1") End Sub Public Shadows Sub M2() Console.WriteLine("C2.M2") End Sub Public Shadows Sub M3() Console.WriteLine("C2.M3") End Sub End Class
C1.M1 C2.M1 C1.M2 C2.M2 C1.M3 C2.M3 C1.M1(int) C1.M1(int) C1.M2(int) C1.M3(int)
Dim subscription = Sub() End Sub AddHandler MyClass.MyEvent, subscription RemoveHandler MyClass.MyEvent, subscription
Public Function DirectoryExists(ByVal sDirectory As String, ByRef sError As String, Optional ByRef fActuallyDoesntExist As Boolean = False) As Boolean If Not IO.Directory.Exists(sDirectory) Then Try Dim dtCreated As Date dtCreated = Directory.GetCreationTime(sDirectory) fActuallyDoesntExist = True sError = "The directory does not exist" Catch theException As Exception sError = theException.Message End Try Return False Else Return True End If End Function
Dim oMapping As Dictionary(Of Integer, String) = {{1,"First"}, {2, "Second"}}
Dim list As New List(Of String) From {"First", "Second"}
Dim oMapping As New Dictionary(Of Integer, String) From {{1, "First"}, {2, "Second"}}
Dim cities() As String = Db.Cities.Select(Function(c) c.CityName).ToArray Dim cities() As String = Db.Cities.Local.Select(Function(c) c.CityName).ToArray
List<string> cities = db.Cities.Select( x=>x.CityName).ToList();
<Extension()> Public Function QuickLocal(Of T As Class)(ByRef DbCollection As DbSet(Of T)) As IEnumerable(Of T) Dim baseType = DbCollection.[GetType]().GetGenericArguments(0) Dim internalSet = DbCollection.GetType().GetField("_internalSet", Reflection.BindingFlags.NonPublic Or Reflection.BindingFlags.Instance).GetValue(DbCollection) Dim internalContext = internalSet.GetType().GetProperty("InternalContext").GetValue(internalSet, Nothing) Return DirectCast(internalContext.GetType.GetMethod("GetLocalEntities").MakeGenericMethod(baseType).Invoke(internalContext, Nothing), IEnumerable(Of T)) End Function
ReportDataSource reportDataSource = new ReportDataSource("MyProject_MyObject", myIEnumerable);
Dim anchName As New HtmlAnchor anchName.ID = "bcrasodiuhf" & foo AddHandler anchName.ServerClick, AddressOf HandleNameClick anchName.Attributes.Add("style", "font-weight: bold; font-size: 14px;") anchName.Attributes.Add("for", foo) anchName.InnerText = foo
<a id="MainContent_bcrasodiuhf1" **href="javascript:WebForm_DoPostBackWithOptions(new WebForm_PostBac…0$MainContent$bcrasodiuhf1", "", true, "", "", false, true))**" for="1" style="font-weight: bold; font-size: 14px;"></a>
Dim ancJoe As New HtmlAnchor ancJoe.ID = "pjancJoe" & foo AddHandler ancJoe.ServerClick, AddressOf HandleJoeClick ancJoe.InnerText = joe.Title ancJoe.Attributes.Add("style", "font-size: 150%;") ancJoe.Attributes.Add("jn", foo) ancJoe.Attributes.Add("for", foo) ancJoe.Attributes.Add("action", "actionA")
<a id="MainContent_pcancJoe19416" **href="javascript:__doPostBack(
A first chance exception of type A first chance exception of type A first chance exception of type A first chance exception of type A first chance exception of type A first chance exception of type A first chance exception of type A first chance exception of type A first chance exception of type A first chance exception of type A first chance exception of type A first chance exception of type
Dim webAddress As String = "http: Process.Start(webAddress)
Private Sub NavigateWebURL(ByVal URL As String, Optional browser As String = "default") If Not (browser = "default") Then Try Process.Start(browser, URL) Catch ex As Exception Process.Start(URL) End Try Else Process.Start(URL) End If End Sub
Dim url As String url = "http: Process.Start("Firefox", url)
Dim URL As String Dim browser As String = TextBox1.Text URL = TextBox1.Text Try If Not (browser = TextBox1.Text) Then Try Process.Start(browser, URL) Catch ex As Exception Process.Start(URL) End Try Else Process.Start(URL) End If Catch ex As Exception MsgBox("There End Try
Dim a(1) as Byte Console.WriteLine("{0}", a.Length) a(0) = 7 a(1) = 7 a(a.Length) = 7
byte[] a = new byte[1]; Console.WriteLine("{0}", a.Length); a[0] = 7 a[1] = 7 a[a.Length] = 7;
Dim list as new List(of string) ...some stuff to fill the list... Dim observable as new ObservableCollection(of string)(list)
public static ObservableCollection<T> ToObservableCollection<T>(this IEnumerable<T> coll) { var c = new ObservableCollection<T>(); foreach (var e in coll) c.Add(e); return c; }
List<Product> myProds = ...... ObservableCollection<Product> oc = new ObservableCollection<Product>(myProds);
ObservableCollection (TObservable) =new ObservableCollection (TObservable)(); OldListItems.ForEach(x => TObservable.Add(x));
List<Application> filteredApplications = (Applications.Where( i => i.someBooleanDetail )).ToList(); Applications = new ObservableCollection<Application>( filteredApplications );
public static ObservableCollection<TDest> ToObservableCollection<TDest, TSource>(this IEnumerable<TSource> coll, Func<TSource, TDest> converter) { var c = new ObservableCollection<TDest>(); foreach (var e in coll) { c.Add(converter(e)); } return c; }
ObservableCollection<yourobjectname> result = new ObservableCollection<yourobjectname>(yourobjectlist);
Dim D As String D = MsgBox("Are you sure you want to exit?", vbYesNo+vbQuestion,"Thanking You") If D = vbYes Then Unload Me Else Exit Sub End If End End Sub
SetCurrentDirectory("Folder_Path") Process.Start("explorer.exe")
Shell("explorer Folder_Path", AppWinStyle.NormalFocus)
Dim Proc As String = "Explorer.exe" Dim Args As String = ControlChars.Quote & IO.Path.Combine("C:\", "Folder with spaces in the name") & ControlChars.Quote Process.Start(Proc, Args)
Process.Start("explorer.exe", String.Format("/n, /e, {0}", "d:\yourdirectory\"))
Process.Start("explorer.exe", "/select," + "C:\File_Name.txt")
string fmt1 = " string fmt2 = " double posAmount = 12345.67; double negAmount = -12345.67; Console.WriteLine("posAmount.ToString(fmt1) returns " + posAmount.ToString(fmt1)); Console.WriteLine("negAmount.ToString(fmt1) returns " + negAmount.ToString(fmt1)); Console.WriteLine("posAmount.ToString(fmt2) returns " + posAmount.ToString(fmt2)); Console.WriteLine("negAmount.ToString(fmt2) returns " + negAmount.ToString(fmt2));
posAmount.ToString(fmt1) returns 12,345.67 negAmount.ToString(fmt1) returns -12,345.67 posAmount.ToString(fmt2) returns 12,345.67 negAmount.ToString(fmt2) returns (12,345.67)
Try current = CDbl(x) current = Math.Round(current, d) Return current Catch ex As System.InvalidCastException Return x End Try
Dim A as String = "5.3" Dim B as Double B = CDbl(Val(A)) MsgBox (B)
Dim text As String = "123.45" Dim value As Double If Double.TryParse(text, value) Then Else End If
Public Shared Function GetDouble(ByVal doublestring As String) As Double Dim retval As Double Dim sep As String = CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator Double.TryParse(Replace(Replace(doublestring, ".", sep), ",", sep), retval) Return retval End Function Public Shared Function GetDoubleNullable(ByVal doublestring As String) As Double? Dim retval As Double Dim sep As String = CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator If Double.TryParse(Replace(Replace(doublestring, ".", sep), ",", sep), retval) Then Return retval Else Return Nothing End If End Function
Double.TryParse("1.12", d1) Double.TryParse("1,12", d2) Double.TryParse("abcd", d3) d1 = GetDouble("1.12") d2 = GetDouble("1,12") d3 = GetDouble("abcd") d1n = GetDoubleNullable("1.12") d2n = GetDoubleNullable("1,12") d3n = GetDoubleNullable("abcd")
Dim loHttp As HttpWebRequest = CType(WebRequest.Create(_url), HttpWebRequest) loHttp.Timeout = 10000 loHttp.Method = "GET" loHttp.KeepAlive = True loHttp.AllowAutoRedirect = True loHttp.PreAuthenticate = True Dim _cred1 As NetworkCredential = ... loHttp.Credentials = _cc loWebResponse = loHttp.GetResponse()
CookieContainer cookieContainer = new CookieContainer(); loHttp.CookieContainer = cookieContainer;
Dim cookieContainer As CookieContainer = New CookieContainer() loHttp.CookieContainer = cookieContainer loWebResponse = loHttp.GetResponse()
Dim timeFormat As String = "yyyy-MM-dd HH:mm:ss" myDate.ToString(timeFormat)
Dim timeFormat As String = "yyyy-MM-dd HH:mm:ss" objBL.date = Convert.ToDateTime(txtDate.Value).ToString(timeFormat)
Me.AcceptButton = OKButton Me.CancelButton = CancelButton Me.FormBorderStyle = Windows.Forms.FormBorderStyle.FixedDialog Me.HelpButton = True Me.MaximizeBox = False Me.MinimizeBox = False Me.ShowInTaskbar = False Me.ShowIcon = False Me.StartPosition = FormStartPosition.CenterParent
Nobugz.PatchMsgBox(New String() {"Da", "Njet"}) MsgBox("gack", MsgBoxStyle.YesNo)
Imports System.Text Imports System.Runtime.InteropServices Public Class Nobugz Private Shared mLabels() As String Private Shared mLabelIndex As Integer Public Shared Sub PatchMsgBox(ByVal labels() As String) mLabels = labels Application.OpenForms(0).BeginInvoke(New FindWindowDelegate(AddressOf FindMsgBox), GetCurrentThreadId()) End Sub Private Shared Sub FindMsgBox(ByVal tid As Integer) EnumThreadWindows(tid, AddressOf EnumWindow, IntPtr.Zero) End Sub Private Shared Function EnumWindow(ByVal hWnd As IntPtr, ByVal lp As IntPtr) As Boolean Dim sb As New StringBuilder(256) GetClassName(hWnd, sb, sb.Capacity) If sb.ToString() <> " mLabelIndex = 0 EnumChildWindows(hWnd, AddressOf FindButtons, IntPtr.Zero) Return False End Function Private Shared Function FindButtons(ByVal hWnd As IntPtr, ByVal lp As IntPtr) As Boolean Dim sb As New StringBuilder(256) GetClassName(hWnd, sb, sb.Capacity) If sb.ToString() = "Button" And mLabelIndex <= UBound(mLabels) Then SetWindowText(hWnd, mLabels(mLabelIndex)) mLabelIndex += 1 End If Return True End Function Private Delegate Sub FindWindowDelegate(ByVal tid As Integer) Private Delegate Function EnumWindowDelegate(ByVal hWnd As IntPtr, ByVal lp As IntPtr) As Boolean Private Declare Auto Function EnumThreadWindows Lib "user32.dll" (ByVal tid As Integer, ByVal callback As EnumWindowDelegate, ByVal lp As IntPtr) As Boolean Private Declare Auto Function EnumChildWindows Lib "user32.dll" (ByVal hWnd As IntPtr, ByVal callback As EnumWindowDelegate, ByVal lp As IntPtr) As Boolean Private Declare Auto Function GetClassName Lib "user32.dll" (ByVal hWnd As IntPtr, ByVal name As StringBuilder, ByVal maxlen As Integer) As Integer Private Declare Auto Function GetCurrentThreadId Lib "kernel32.dll" () As Integer Private Declare Auto Function SetWindowText Lib "user32.dll" (ByVal hWnd As IntPtr, ByVal text As String) As Boolean End Class
private void DGroup_Click(object sender, EventArgs e) { messageBox m = new messageBox(); m.ShowDialog(); if (m.DialogResult == DialogResult.Yes) { String[] asd = new String[2]; asd[0] = "groups.php?opt=del&amp;id=613"; asd[1] = "asdasd"; addgroup.Document.InvokeScript("del",asd); } else if (m.DialogResult == DialogResult.No) { MessageBox.Show("App won´t close"); } }
private void deleteGroupOnly_Click(object sender, EventArgs e) { this.DialogResult = DialogResult.Yes; this.Close(); } private void deleteAll_Click(object sender, EventArgs e) { this.DialogResult = DialogResult.No; this.Close(); } private void cancel_Click(object sender, EventArgs e) { this.DialogResult = DialogResult.Cancel; this.Close(); }
<DllImport("kernel32.dll")> _ Private Shared Function GetCurrentThreadId() As UInteger End Function <DllImport("user32.dll", CharSet:=CharSet.Auto)> _ Private Shared Function CallNextHookEx(ByVal idHook As Integer, ByVal nCode As Integer, ByVal wParam As IntPtr, ByVal lParam As IntPtr) As Integer End Function <DllImport("user32.dll", CharSet:=CharSet.Auto)> _ Private Shared Function UnhookWindowsHookEx(ByVal idHook As Integer) As Boolean End Function <DllImport("user32.dll", CharSet:=CharSet.Auto)> _ Private Shared Function SetWindowsHookEx(ByVal idHook As Integer, ByVal lpfn As HookProc, ByVal hInstance As IntPtr, ByVal threadId As Integer) As Integer End Function <DllImport("user32.dll")> _ Private Shared Function SetDlgItemText(ByVal hWnd As IntPtr, ByVal nIDDlgItem As Integer, ByVal lpString As String) As Boolean End Function Private Delegate Function HookProc(ByVal nCode As Integer, ByVal wParam As IntPtr, ByVal lParam As IntPtr) As Integer Shared dlgHookProc As HookProc Private Const WH_CBT As Long = 5 Private Const HCBT_ACTIVATE As Long = 5 Private Const ID_BUT_OK As Integer = 1 Private Const ID_BUT_CANCEL As Integer = 2 Private Const ID_BUT_ABORT As Integer = 3 Private Const ID_BUT_RETRY As Integer = 4 Private Const ID_BUT_IGNORE As Integer = 5 Private Const ID_BUT_YES As Integer = 6 Private Const ID_BUT_NO As Integer = 7 Private Const BUT_OK As String = "Save" Private Const BUT_CANCEL As String = "Cancelar" Private Const BUT_ABORT As String = "Stop" Private Const BUT_RETRY As String = "Continue" Private Const BUT_IGNORE As String = "Ignore" Private Const BUT_YES As String = "Si" Private Const BUT_NO As String = "No" Private Shared _hook As Integer = 0 Private Shared Function DialogHookProc(ByVal nCode As Integer, ByVal wParam As IntPtr, ByVal lParam As IntPtr) As Integer If nCode < 0 Then Return CallNextHookEx(_hook, nCode, wParam, lParam) End If If nCode = HCBT_ACTIVATE Then SetDlgItemText(wParam, ID_BUT_OK, BUT_OK) SetDlgItemText(wParam, ID_BUT_CANCEL, BUT_CANCEL) SetDlgItemText(wParam, ID_BUT_ABORT, BUT_ABORT) SetDlgItemText(wParam, ID_BUT_RETRY, BUT_RETRY) SetDlgItemText(wParam, ID_BUT_IGNORE, BUT_IGNORE) SetDlgItemText(wParam, ID_BUT_YES, BUT_YES) SetDlgItemText(wParam, ID_BUT_NO, BUT_NO) End If Return CallNextHookEx(_hook, nCode, wParam, lParam) End Function Private Sub btn_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn.Click dlgHookProc = New HookProc(AddressOf DialogHookProc) _hook = SetWindowsHookEx(CInt(WH_CBT), dlgHookProc, IntPtr.op_Explicit(0), CInt(GetCurrentThreadId())) Dim dlgEmptyCheck As DialogResult = MessageBox.Show("Text", "Caption", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button3) If dlgEmptyCheck = DialogResult.Abort Then End If UnhookWindowsHookEx(_hook) End Sub
[DllImport("kernel32.dll")] static extern uint GetCurrentThreadId(); [DllImport("user32.dll", CharSet = CharSet.Auto)] private static extern int CallNextHookEx(int idHook, int nCode, IntPtr wParam, IntPtr lParam); [DllImport("user32.dll", CharSet = CharSet.Auto)] private static extern bool UnhookWindowsHookEx(int idHook); [DllImport("user32.dll", CharSet = CharSet.Auto)] private static extern int SetWindowsHookEx(int idHook, HookProc lpfn, IntPtr hInstance, int threadId); [DllImport("user32.dll")] private static extern bool SetDlgItemText(IntPtr hWnd, int nIDDlgItem, string lpString); delegate int HookProc(int nCode, IntPtr wParam, IntPtr lParam); static HookProc dlgHookProc; private const long WH_CBT = 5; private const long HCBT_ACTIVATE = 5; private const int ID_BUT_OK = 1; private const int ID_BUT_CANCEL = 2; private const int ID_BUT_ABORT = 3; private const int ID_BUT_RETRY = 4; private const int ID_BUT_IGNORE = 5; private const int ID_BUT_YES = 6; private const int ID_BUT_NO = 7; private const string BUT_OK = "Save"; private const string BUT_CANCEL = "Cancel"; private const string BUT_ABORT = "Stop"; private const string BUT_RETRY = "Continue"; private const string BUT_IGNORE = "Ignore"; private const string BUT_YES = "Yeeh"; private const string BUT_NO = "Never"; private static int _hook = 0; private static int DialogHookProc(int nCode, IntPtr wParam, IntPtr lParam) { if (nCode < 0) { return CallNextHookEx(_hook, nCode, wParam, lParam); } if (nCode == HCBT_ACTIVATE) { SetDlgItemText(wParam, ID_BUT_OK, BUT_OK); SetDlgItemText(wParam, ID_BUT_CANCEL, BUT_CANCEL); SetDlgItemText(wParam, ID_BUT_ABORT, BUT_ABORT); SetDlgItemText(wParam, ID_BUT_RETRY, BUT_RETRY); SetDlgItemText(wParam, ID_BUT_IGNORE, BUT_IGNORE); SetDlgItemText(wParam, ID_BUT_YES, BUT_YES); SetDlgItemText(wParam, ID_BUT_NO, BUT_NO); } return CallNextHookEx(_hook, nCode, wParam, lParam); } private void Button_Click(object sender, EventArgs e) { dlgHookProc = new HookProc(DialogHookProc); _hook = SetWindowsHookEx((int)WH_CBT, dlgHookProc, (IntPtr)0, (int)GetCurrentThreadId()); DialogResult dlgEmptyCheck = MessageBox.Show("Text", "Caption", MessageBoxButtons.AbortRetryIgnore, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button3); if (dlgEmptyCheck == DialogResult.Abort) { } UnhookWindowsHookEx(_hook); }
WebBrowser1.Document.Window.DomWindow.execscript("checkPasswordConfirm();","JavaScript") Dim allelements As HtmlElementCollection = WebBrowser1.Document.All For Each webpageelement As HtmlElement In allelements If webpageelement.InnerText = "Sign Up" Then webpageelement.InvokeMember("click") End If Next
WebBrowser1.Document.Window.DomWindow.execscript("checkPasswordConfirm();","JavaScript") Threading.Thread.Sleep(500) Dim allelements As HtmlElementCollection = WebBrowser1.Document.All For Each webpageelement As HtmlElement In allelements If webpageelement.InnerText = "Sign Up" Then webpageelement.InvokeMember("click") End If Next
Imports VB = Microsoft.VisualBasic Public Sub wait(ByVal seconds As Single) Static start As Single start = VB.Timer() Do While VB.Timer() < start + seconds System.Windows.Forms.Application.DoEvents() Loop End Sub
Private Sub wait(ByVal seconds As Integer) For i As Integer = 0 To seconds * 100 System.Threading.Thread.Sleep(10) Application.DoEvents() Next End Sub
WebBrowser1.Document.Window.DomWindow.execscript("checkPasswordConfirm();","JavaScript") timer.enabled = true Dim allelements As HtmlElementCollection = WebBrowser1.Document.All For Each webpageelement As HtmlElement In allelements If webpageelement.InnerText = "Sign Up" Then webpageelement.InvokeMember("click") End If Next
Imports VB = Microsoft.VisualBasic Public Sub wait(ByVal seconds As Single) Static start As Single start = VB.Timer() Do While VB.Timer() < start + seconds System.Windows.Forms.Application.DoEvents() Loop End Sub
Private Sub wait(ByVal seconds As Integer) For i As Integer = 0 To seconds * 100 System.Threading.Thread.Sleep(10) Application.DoEvents() Next End Sub
Static tStart As Single, tEnd As Single, myInterval As Integer myInterval = 5 tStart = VB.Timer() tEnd = myInterval + VB.Timer() Do While tEnd > tStart Application.DoEvents() tStart = VB.Timer() Loop
public shared functionA() As Boolean IF A is false THEN log -> return true or false
public shared functionB() As Boolean IF B is false THEN log -> return true or false
Dim R as string = stringA & " * sample text" & _ stringB & " * sample text2" & _ stringC & " * sameple text3" & _ If(ApplyValue IsNot Nothing AndAlso ApplyValue.CheckedBox Then ,StringD & " * sample text4" & _ , NOTHING) stringE & " * sample text5"
Dim y As Double Dim d As String = "string1 *" & _ "string2 *" & _ If(y IsNot Nothing, " * sample text4", "") & _ "string4 *"
Dim R as string = stringA & " * sample text" & _ stringB & " * sample text2" & _ stringC & " * sameple text3" & _ IIf(ApplyValue IsNot Nothing AndAlso ApplyValue.CheckedBox, StringD & " * sample text4", "") & _ stringE & " * sample text5"
Dim R as string = stringA & " * sample text" & _ stringB & " * sample text2" & _ stringC & " * sameple text3" & _ If(ApplyValue IsNot Nothing AndAlso ApplyValue.CheckedBox, StringD & " * sample text4", "") & _ stringE & " * sample text5"
<asp:DataPager ID="HistoryDataPager" runat="server" PagedControlID="HistoryListView" PageSize="10"> <Fields> <asp:NextPreviousPagerField ButtonType="Button" ShowFirstPageButton="true" ShowLastPageButton="true" /> </Fields> </asp:DataPager> <asp:ListView ID="HistoryListView" runat="server"> ... </asp:ListView>
Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load If Not IsPostBack Then HistoryListView.DataSource = From x in myContext.myTables ... DataBind() End If End Sub
private ListViewPagedDataSource GetProductsAsPagedDataSource(DataView dv) { ListViewPagedDataSource pagedData = new ListViewPagedDataSource(); pagedData.DataSource = dv; pagedData.MaximumRows = dv.Table.Rows.Count; pagedData.TotalRowCount = dpTop.PageSize; if (Request.QueryString[dpTop.QueryStringField] != null) pagedData.StartRowIndex = (Convert.ToInt32(Request.QueryString[dpTop.QueryStringField]) - 1) * dpTop.PageSize; else pagedData.StartRowIndex = 0; return pagedData; }
protected override void OnPreRender(EventArgs e) { ListView1.DataBind(); base.OnPreRender(e); }
ListView_PagePropertiesChanged(object sender, EventArgs e) { ListView.DataSource=someDatasource; ListView.DataBind() }
<asp:DataPager ID="DataPagerProducts" runat="server" QueryStringField="ID" PageSize="3"> <Fields> <asp:NextPreviousPagerField ShowFirstPageButton="True" ShowNextPageButton="False" /> <asp:NumericPagerField /> <asp:NextPreviousPagerField ShowLastPageButton="True" ShowPreviousPageButton="False" /> </Fields> </asp:DataPager>
private void ResetListViewPager() { DataPager pager = (DataPager)ListViewMembers.FindControl("DataPager1"); if (pager != null) { CommandEventArgs commandEventArgs = new CommandEventArgs(DataControlCommands.FirstPageCommandArgument, ""); NextPreviousPagerField nextPreviousPagerField = pager.Fields[0] as NextPreviousPagerField; if (nextPreviousPagerField != null) { nextPreviousPagerField.HandleEvent(commandEventArgs); } } }
<asp:ListView ID="ListView1" runat="server" DataSourceID="sdsImages"> <ItemTemplate> <div class="photo sample12"> <asp:Image ID="img_Galerie" runat="server" ImageUrl= </div> </ItemTemplate> </asp:ListView> <asp:DataPager ID="DataPager1" runat="server" PagedControlID="ListView1" PageSize="3" QueryStringField="ImageID"> <Fields> <asp:NextPreviousPagerField ShowFirstPageButton="True" ShowNextPageButton="False" /> <asp:NumericPagerField /> <asp:NextPreviousPagerField ShowLastPageButton="True" ShowPreviousPageButton="False" /> </Fields> </asp:DataPager> <asp:SqlDataSource ID="sdsImages" runat="server" ConnectionString="<%$ ConnectionStrings:DBCS %>" SelectCommand="SELECT ImageID FROM Images ">
protected void ListView1_PagePropertiesChanging(object sender, PagePropertiesChangingEventArgs e) { DataPager1.SetPageProperties(e.StartRowIndex, e.MaximumRows, false); ListView1.DataSource = productList; ListView1.DataBind(); DataPager1.DataBind(); }
Private is64BitProcess As Boolean = (IntPtr.Size = 8) Private is64BitOperatingSystem As Boolean = is64BitProcess OrElse InternalCheckIsWow64() <DllImport("Kernel32.dll", SetLastError:=True, CallingConvention:=CallingConvention.Winapi)> _ Public Shared Function IsWow64Process( _ ByVal hProcess As Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid, _ ByRef wow64Process As Boolean) As <MarshalAs(UnmanagedType.Bool)> Boolean End Function Public Shared Function InternalCheckIsWow64() As Boolean If (Environment.OSVersion.Version.Major = 5 AndAlso Environment.OSVersion.Version.Minor >= 1) OrElse Environment.OSVersion.Version.Major >= 6 Then Using p As Process = Process.GetCurrentProcess() Dim retVal As Boolean If Not IsWow64Process(p.Handle, retVal) Then Return False End If Return retVal End Using Else Return False End If End Function
If IntPtr.Size = 8 Then ElseIf IntPtr.Size = 4 Then End If
If System.Environment.Is64BitOperatingSystem = True Then MessageBox.Show("OS System : 64 Bit Operating System") Else MessageBox.Show("OS System : 32 Bit Operating System") End If
If System.IO.Directory.Exists("C:\Program Files (x86)") Then MsgBox("64-Bit OS") Else MsgBox("32-Bit OS") End If
Msgbox (Runtime.InteropServices.Marshal.SizeOf(GetType(IntPtr)) * 8)
Dim exampleItems As Dictionary(Of String, String) = New Dictionary(Of String, String) Dim blah = exampleItems.Select (Function(x) New (x.Key, x.Value)).ToList
Dim blah = exampleItems.Select (Function(x) New With { .Key = x.Key, .Value = x.Value }).ToList
Dim gen = New General() gen.updateDynamics(get_prospect.dynamicsID)
General.updateDynamics(get_prospect.dynamicsID) Public Shared Sub updateDynamics(dynID As Int32) End Sub
Private Function SendRequest(uri As Uri, jsonDataBytes As Byte(),contentType As String, method As String) As String Dim req As WebRequest = WebRequest.Create(uri) req.ContentType = contentType req.Method = method req.ContentLength = jsonDataBytes.Length Dim stream = req.GetRequestStream() stream.Write(jsonDataBytes, 0, jsonDataBytes.Length) stream.Close() Dim response = req.GetResponse().GetResponseStream() Dim reader As New StreamReader(response) Dim res = reader.ReadToEnd() reader.Close() response.Close() Return res End Function
Dim data = Encoding.UTF8.GetBytes(jsonSring) Dim result_post = SendRequest(uri, data, "application/json", "POST")
Imports System Imports System.Net Imports System.Security.Cryptography.X509Certificates Public Class clsSSL Public Function AcceptAllCertifications(ByVal sender As Object, ByVal certification As System.Security.Cryptography.X509Certificates.X509Certificate, ByVal chain As System.Security.Cryptography.X509Certificates.X509Chain, ByVal sslPolicyErrors As System.Net.Security.SslPolicyErrors) As Boolean Return True End Function End Class
ServicePointManager.ServerCertificateValidationCallback = New System.Net.Security.RemoteCertificateValidationCallback(AcceptAllCertifications)
ServicePointManager.ServerCertificateValidationCallback = AddressOf AcceptAllCertifications
ServicePointManager.ServerCertificateValidationCallback = _ New RemoteCertificateValidationCallback(AddressOf AcceptAllCertifications)
System.Net.ServicePointManager.ServerCertificateValidationCallback = _ Function(se As Object, _ cert As System.Security.Cryptography.X509Certificates.X509Certificate, _ chain As System.Security.Cryptography.X509Certificates.X509Chain, _ sslerror As System.Net.Security.SslPolicyErrors) True
ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
Dim lstFiles As New List(Of String) lstFiles.AddRange(IO.Directory.GetFiles(m_strFolderPath, "*.xls", IO.SearchOption.AllDirectories)) Dim m_XlApp = New Excel.Application Dim m_xlWrkbs As Excel.Workbooks = m_XlApp.Workbooks Dim m_xlWrkb As Excel.Workbook For Each strFile As String In lstFiles m_xlWrkb = m_xlWrkbs.Open(strFile) Dim m_XlWrkSheet As Excel.Worksheet = m_xlWrkb.Worksheets(1) Dim intRow As Integer = 1 While intRow <= m_XlWrkSheet.UsedRange.Rows.Count If m_XlApp.WorksheetFunction.CountA(m_XlWrkSheet.Cells(intRow, 1).EntireRow) = 0 Then m_XlWrkSheet.Cells(intRow, 1).EntireRow.Delete(Excel.XlDeleteShiftDirection.xlShiftUp) Else intRow += 1 End If End While Dim intCol As Integer = 1 While intCol <= m_XlWrkSheet.UsedRange.Columns.Count If m_XlApp.WorksheetFunction.CountA(m_XlWrkSheet.Cells(1, intCol).EntireColumn) = 0 Then m_XlWrkSheet.Cells(1, intCol).EntireColumn.Delete(Excel.XlDeleteShiftDirection.xlShiftToLeft) Else intCol += 1 End If End While Next m_xlWrkb.Save() m_xlWrkb.Close(SaveChanges:=True) Marshal.ReleaseComObject(m_xlWrkb) Marshal.ReleaseComObject(m_xlWrkbs) m_XlApp.Quit() Marshal.ReleaseComObject(m_XlApp)
Public Structure Person Dim first as String Dim last as String Dim age as Integer End Structure
Public Sub ListTest() Dim newPerson as Person Dim records as List (Of Person) records = new List (Of Person) person.first = "Yogi" person.last = "bear" person.age = 35 records.Add(person) records(0).first = "Papa" End Sub
Dim p As Person = records(0) p.first = "Papa" records(0) = p
Dim people(0) As Person people(0).first = "Yogi" people(0).last = "Bear" people(0).age = 35
Public Structure Person Dim first as String Dim last as String Dim age as Integer Public Sub ChangeFirst(value as String) me.first = value End Sub End Structure
With SomeObjectExpression() .SomeProperty = 5 .SomeOtherProperty = "Hello" End With
File.Create("C:\my files\2010\SomeFileName.txt").Dispose()
Dim filepath as String = "C:\my files\2010\SomeFileName.txt" If Not System.IO.File.Exists(filepath) Then System.IO.File.Create(filepath).Dispose() End If
Private Sub writeDebug(ByVal x As String) Dim path As String = System.Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) Dim FILE_NAME As String = path & "\mydebug.txt" MsgBox(FILE_NAME) If System.IO.File.Exists(FILE_NAME) = False Then System.IO.File.Create(FILE_NAME).Dispose() End If Dim objWriter As New System.IO.StreamWriter(FILE_NAME, True) objWriter.WriteLine(x) objWriter.Close() End Sub
FileOpen(1, "C:\my files\2010\SomeFileName.txt", OpenMode.Output) FileClose(1)
Select Case True Case testVariable < 0 Console.Write("You must supply a positive value.") Case testVariable > 10 Console.Write("Please enter a number from 0-10.") Case True Call DoWork(testVariable) End Select
If testVariable < 0 Then Console.Write("You must supply a positive value.") ElseIf testVariable > 10 Then Console.Write("Please enter a number less than 10.") Else Call DoWork(testVariable) End If
Dim A As Boolean Dim B As Boolean ' ' Select Case True Case A And B Case A And Not B Case Not A And B Case Else End Select
Public Sub Example() If A Or B Then Beep End If Select Case True Case A, B Beep End Select End Sub Private Function A() As Boolean Debug.Print "A Ran" A = True End Function Private Function B() As Boolean Debug.Print "B Ran" B = False End Function
Public Sub Example2() If A Then ElseIf B Then Beep End If End Sub
Select Case True Case 1 = 0 Console.Write("1") Case 1 = 1 Console.Write("2") Case 2 = 2 Console.Write("3") End Select
Select Case testVariable Case Is < 0 : Console.Write("You must supply a non-negative value.") Case Is > 10 : Console.Write("Please enter a number from 0-10.") Case Else : Call DoWork(testVariable) End Select
Imports System.Runtime.InteropServices <DebuggerStepThrough()> Friend Module Util Public Function _Is(v As Object) As IsWrapper Return New IsWrapper With {.Obj = v} End Function Public Structure IsWrapper Public Obj As Object Public Shared Operator =(ByVal a As IsWrapper, ByVal b As Object) As Boolean Return a.Obj Is b End Operator Public Shared Operator <>(ByVal a As IsWrapper, ByVal b As Object) As Boolean Return a.Obj IsNot b End Operator End Structure End Module
Private Sub RbClass_CheckedChanged(sender As System.Object, e As System.EventArgs) If DirectCast(sender, RadioButton).Checked = False Then Return Select Case _Is(sender) Case RbClass : Rb = 0 Case RbTablePredicate : Rb = 1 Case RbTableRowFilter : Rb = 2 End Select QueryCtl1_QueryChanged(Nothing, Nothing) End Sub Public Sub Predicate(ByVal PredicateType As Type, ByVal Op As Operadores, ByVal Obj As Object, ByVal CompareOptions As CompareOptions, ByVal Fnc As [Delegate]) Dim pred As [Delegate] = Nothing Select Case _Is(PredicateType) Case GetType(Boolean) pred = New Predicate(Of Boolean)(Function(v) v) Case GetType(String) pred = StrPredicate(Op, Obj, CompareOptions) Case Else pred = GenericHelper.Builder(PredicateType).Predicate(Op, Obj) End Select Predicate(pred, Fnc) End Sub
Dim isVisible As Boolean .... If isVisible Then .... End If
SELECT CASE [string] CASE "String 1", "String 2" [do a thing] CASE "String 3" [do another thing] END SELECT
SELECT CASE [string] CASE LIKE "*1", "*2" [do a thing] CASE LIKE "*3" [do another thing] END SELECT
SELECT CASE TRUE CASE [string] LIKE "*1", "*2" [do a thing] CASE [string] LIKE "*3" [do another thing] END SELECT
IF [string] LIKE "*1" AND [string] LIKE "*2" THEN [do a thing] ELSEIF [string] LIKE "*3" [do another thing] END IF
table.DefaultView.Sort = "Town ASC, Cutomer ASC" table.Select("", "Town ASC, Cutomer ASC")
foreach(DataRowView r in table.DefaultView) { Console.WriteLine(r["Town"].ToString()); }
DataRow[] rowList = table.Select("", "Town ASC, Cutomer ASC"); foreach(DataRow r in rowList) { Console.WriteLine(r["Town"].ToString()); }
Dim dataView As New DataView(table) dataView.Sort = " AutoID DESC, Name DESC" Dim dataTable AS DataTable = dataView.ToTable()
DataTable.DefaultView.Sort = "ColumnName ASC" DataTable = DataTable.DefaultView.ToTable
private void SortDataTable(DataTable dt, string sort) { DataTable newDT = dt.Clone(); int rowCount = dt.Rows.Count; DataRow[] foundRows = dt.Select(null, sort); for (int i = 0; i < rowCount; i++) { object[] arr = new object[dt.Columns.Count]; for (int j = 0; j < dt.Columns.Count; j++) { arr[j] = foundRows[i][j]; } DataRow data_row = newDT.NewRow(); data_row.ItemArray = arr; newDT.Rows.Add(data_row); } dt.Rows.Clear(); for (int i = 0; i < newDT.Rows.Count; i++) { object[] arr = new object[dt.Columns.Count]; for (int j = 0; j < dt.Columns.Count; j++) { arr[j] = newDT.Rows[i][j]; } DataRow data_row = dt.NewRow(); data_row.ItemArray = arr; dt.Rows.Add(data_row); } }
Imports System.Net.Sockets Imports System.Net Public Class Client Private _Socket As Socket Public Property Socket As Socket Get Return _Socket End Get Set(ByVal value As Socket) _Socket = value End Set End Property Public Enum State RequestHeader ResponseHeader Stream End Enum Public Sub New() End Sub Public Sub New(ByRef Socket As Socket) Me._Socket = Socket End Sub End Class
Public Class Foo Public Property Bar As String Public Sub New(ByVal Bar As String) Me.Bar = Bar End Sub End Class Public Sub RefTest(ByRef Baz As Foo) Baz.Bar = "Foo" Baz = new Foo("replaced") End Sub Public Sub ValTest(ByVal Baz As Foo) Baz.Bar = "Foo" Baz = new Foo("replaced") End Sub Dim MyFoo As New Foo("-") RefTest(MyFoo) Console.WriteLine(MyFoo.Bar) ValTest(MyFoo) Console.WriteLine(MyFoo.Bar)
Module Module1 Sub Main() Dim i As Integer = 10 Console.WriteLine("initial value of int {0}:", i) ByValInt(i) Console.WriteLine("after byval value of int {0}:", i) ByRefInt(i) Console.WriteLine("after byref value of int {0}:", i) Dim s As String = "hello" Console.WriteLine("initial value of str {0}:", s) ByValString(s) Console.WriteLine("after byval value of str {0}:", s) ByRefString(s) Console.WriteLine("after byref value of str {0}:", s) Dim sb As New System.Text.StringBuilder("hi") Console.WriteLine("initial value of string builder {0}:", sb) ByValStringBuilder(sb) Console.WriteLine("after byval value of string builder {0}:", sb) ByRefStringBuilder(sb) Console.WriteLine("after byref value of string builder {0}:", sb) Console.WriteLine("Done...") Console.ReadKey(True) End Sub Sub ByValInt(ByVal value As Integer) value += 1 End Sub Sub ByRefInt(ByRef value As Integer) value += 1 End Sub Sub ByValString(ByVal value As String) value += " world!" End Sub Sub ByRefString(ByRef value As String) value += " world!" End Sub Sub ByValStringBuilder(ByVal value As System.Text.StringBuilder) value.Append(" world!") End Sub Sub ByRefStringBuilder(ByRef value As System.Text.StringBuilder) value.Append(" world!") End Sub End Module
Private Function Equal(ByVal parameter As String, ByVal paramenterName As String, ByVal dataType As Type) As String If dataType = String Then return 1; End If End Function
If dataType.Equals(GetType(String)) Then Return 1 End If
If dataType Is GetType(String) Then Return 1 End If
Dim lstOfStrings as *IDK* Dim String0 As String = "some value" Dim String1 As String = "some value" Dim String2 As String = "some value" Dim String3 As String = "some value" Dim String4 As String = "some value" Dim String5 As String = "some value" lstOfStrings.add(String0, String1, String2, String3)
Dim s1 = lstOfStrings(0) Dim s2 = lstOfStrings(1) Dim s3 = lstOfStrings(2) Dim s4 = lstOfStrings(3)
Private Function Foo() As List(Of String) Dim temp1 As String Dim temp2 As String Dim temp3 As String Dim temp4 As String Dim temp5 As String Dim temp6 As String Dim inputs() As String = {temp1, temp2, temp3, temp4, temp5, temp6} Dim lstWriteBits As List(Of String) = New List(Of String)(inputs) Return lstWriteBits End Function
lstOfString.Add(String1) lstOfString.Add(String2) lstOfString.Add(String3) lstOfString.Add(String4)
Dim inputs() As String = { "some value", _ "some value2", _ "some value3", _ "some value4" } Dim lstOfString as List(Of String) = new List(Of String)(inputs) Dim s3 = lstOfStrings(3)
Dim lstOfStrings As New List(Of String) From {"Value1", "Value2", "Value3"}
Imports System.Runtime.CompilerServices Module StringExtensions <Extension()> Public Sub Add(ByVal list As List(Of String), ParamArray values As String()) For Each s As String In values list.Add(s) Next End Sub End Module
Dim lstOfStrings as New List(Of String) lstOfStrings.Add(String1, String2, String3, String4)
Private Function getWriteBits() As IList(Of String) Dim temp1 As String Dim temp2 As Boolean Dim temp3 As Boolean Dim temp4 As Boolean Dim temp5 As Boolean Dim temp6 As Boolean Dim lstWriteBits As Ilist = {temp1, temp2, temp3, temp4, temp5, temp6} Return lstWriteBits End Function
Dim blankList As List(Of String) = New List(Of String)
For Each item in blankList Console.WriteLine(item) Next
Return _dbContext.WebCategories.OrderBy(Function(c As WebCategory) c.DisplayOrder).ToList
Return _dbContext.WebCategories.OrderBy(Function(c As WebCategory) c.DisplayOrder).OrderBy(Function(c As WebCategory) c.WebPage.DisplayOrder).ToList
Return _dbContext.WebCategories.OrderBy(Function(c As WebCategory) c.DisplayOrder). _ ThenBy(Function(c As WebCategory) c.WebPage.DisplayOrder).ToList
Return _dbContext.WebCategories.OrderBy(Function(c As WebCategory) c.DisplayOrder) _ .ThenBy(Function(c As WebCategory) c.WebPage.DisplayOrder) _ .ToList()
Dim stream as Stream = New FileStream(msgURL, FileMode.Open)
Dim req As WebRequest = HttpWebRequest.Create("url here") Using stream As Stream = req.GetResponse().GetResponseStream() End Using
var req = System.Net.WebRequest.Create("url here"); using (Stream stream = req.GetResponse().GetResponseStream()) { }
Using wc As New WebClient() Using stream As Stream = wc.OpenRead(msgURL) ... End Using End Using
HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url); HttpWebResponse response = (HttpWebResponse)request.GetResponse(); Stream receiveStream = response.GetResponseStream(); receiveStream.Close(); response.Close();
Dim q = From x In {"Bob", "Larry"} Select x.Length Select Length * 2
Dim q = From x In {"Bob", "Larry"} Select (x.Length) Select Length * 2
Dim q = From x In { 1, 2 } Select x.ToString() Select ToString.Length
From x In {1, 2, 3} Let str = x.ToString() Select str
Dim b = From num In {1, 2, 3} Select num.ToString("d")
public class Class1 { [CompilerGenerated] private static string _Lambda$__1(int num) { return num.ToString("d"); } public void Test1() { IEnumerable<string> b = new int[] { 1, 2, 3 } .Select<int, string>(new Func<int, string>(Class1._Lambda$__1)); } }
Dim dest As String() dest = New String(src.Length - 1) {}
Dim dest As String() dest = New String(src.Length - 1) {}
Public Class CookieAwareWebClient Inherits WebClient Private cc As New CookieContainer() Private lastPage As String Protected Overrides Function GetWebRequest(ByVal address As System.Uri) As System.Net.WebRequest Dim R = MyBase.GetWebRequest(address) If TypeOf R Is HttpWebRequest Then With DirectCast(R, HttpWebRequest) .CookieContainer = cc If Not lastPage Is Nothing Then .Referer = lastPage End If End With End If lastPage = address.ToString() Return R End Function End Class
using System.Net; class CookieAwareWebClient : WebClient { private CookieContainer cc = new CookieContainer(); private string lastPage; protected override WebRequest GetWebRequest(System.Uri address) { WebRequest R = base.GetWebRequest(address); if (R is HttpWebRequest) { HttpWebRequest WR = (HttpWebRequest)R; WR.CookieContainer = cc; if (lastPage != null) { WR.Referer = lastPage; } } lastPage = address.ToString(); return R; } }
Public MasterList as IEnumerable(Of MasterItem) Public Class MasterItem(Of T) Public SubItems as IEnumerable(Of T) End Class
Dim children1 = MasterList.SelectMany(Function(master) master.SubItems) Dim children2 = From master In MasterList, child in master.SubItems Select child Dim children3 = Aggregate master In MasterList Into SelectMany(master.SubItems)
If Request.QueryString("MyQueryString") <> Nothing Then
If Not Request.QueryString("MyQueryString") Is Nothing Then
If Request.QueryString("MyQueryString") IsNot Nothing Then
If Not String.IsNullOrEmpty(Request.QueryString("MyQueryString")) Then
Dim b As HttpContext If b <> Nothing Then ... End If
<%If Not boolean_variable%>Do this if boolean_variable is false<%End If%>
A a = new A(); ... if (a != null) it will totally wrong, you always need to use if((object)a != null) but in vb.net you cannot write in this way, you always need to write if not a is nothing then or if a isnot nothing then
Math.Round(0.575, 2, MidpointRounding.AwayFromZero)
Math.Round(0.575M, 2, MidpointRounding.AwayFromZero)
Decimal.Round(0.575, 2, MidpointRounding.AwayFromZero)
Dim sender As Object btnStart_Click(sender, New EventArgs())
Imports System.ComponentModel Partial Public Class frmProgress Private bw As BackgroundWorker = New BackgroundWorker Public Sub New() InitializeComponent() bw.WorkerReportsProgress = True bw.WorkerSupportsCancellation = True AddHandler bw.DoWork, AddressOf bw_DoWork AddHandler bw.ProgressChanged, AddressOf bw_ProgressChanged AddHandler bw.RunWorkerCompleted, AddressOf bw_RunWorkerCompleted Dim sender As Object btnStart_Click(sender, New EventArgs()) End Sub Private Sub btnStart_Click(sender As Object, e As EventArgs) Handles btnStart.Click If Not bw.IsBusy = True Then Me.btnMore.Enabled = True set_form_on_start() bw.RunWorkerAsync() End If End Sub End Class
Public Event ForceManualStep As EventHandler RaiseEvent ForceManualStep(Me, EventArgs.Empty) AddHandler ForceManualStep, AddressOf ManualStepCompletion Private Sub ManualStepCompletion(sender As Object, e As EventArgs) End Sub
Private Sub btnStart_Click(sender As Object, e As EventArgs) Handles btnStart.Click call SeparateSubroutine() End Sub private sub SeparateSubroutine() End Sub
Dim sb as new System.Text.StringBuilder() str = sb.Append("Hello").Append(" ").Append("World").ToString()
Dim str As String = New String("") & "some other string"
If Not txtBookTitle.Text = String.Empty Then objBook.DisplayName = txtBookTitle.Text End If
objBook.DisplayName = If(Not (txtBookTitle.Text = String.Empty), txtBookTitle.Text, objBook.DisplayName)
objBook.DisplayName = If(String.IsNullOrEmpty(txtBookTitle.Text), txtBookTitle.Text)
objBook.DisplayName = IIF(String.IsNullorEmpty(txtBookTitle.Text),objBook.DisplayName, txtBookTitle.Text)
If txtBookTitle.Text <> String.Empty Then objBook.DisplayName = txtBookTitle.Text
<asp:HyperLink ID="HyperLinkDownload" runat="server" NavigateUrl="~/Download.aspx">Download as CSV file</asp:HyperLink>
Public Partial Class Download Inherits System.Web.UI.Page Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load Response.Clear() Response.ContentType = "text/csv" Dim FileName As String = "books.csv" Response.AppendHeader("Content-Disposition", "attachment;filename=" + FileName) Dim db As New bookDevelopmentDataContext Dim Allbooks = From b In db.books _ Order By b.Added _ Select b Dim CsvFile As New StringBuilder CsvFile.AppendLine(CsvHeader()) For Each b As Book In Allbooks CsvFile.AppendLine(bookString(b)) Next Response.Write(CsvFile.ToString) Response.End() End Sub Function CsvHeader() As String Dim CsvLine As New StringBuilder CsvLine.Append("Published,") CsvLine.Append("Title,") CsvLine.Append("Author,") CsvLine.Append("Price") Return CsvLine.ToString End Function Function bookString(ByVal b As Book) As String Dim CsvLine As New StringBuilder CsvLine.Append(b.Published.ToShortDateString + ",") CsvLine.Append(b.Title.Replace(",", "") + ",") CsvLine.Append(b.Author.Replace(",", "") + ",") CsvLine.Append(Format(b.Price, "c").Replace(",", "")) Return CsvLine.ToString End Function End Class
CsvLine.Append(Format(b.Price, "c").Replace(",", ""))
CsvLine.Append(String.Format("\"{0:c}\"", b.Price))
Function PrepForCSV(ByVal value As String) As String return String.Format("""{0}""", Value.Replace(" """)) End Function
protected void Page_Load(object sender, EventArgs e) { using (var db = new bookDevelopmentDataContext()) { string fileName = "book.csv"; var q = from b in db.books select string.Format("{0:d},\"{1}\",\"{2}\",{3:F2}", b.Published, b.Title.Replace("\"", "\"\""), b.Author.Replace("\"", "\"\""), t.price); string outstring = string.Join(",", q.ToArray()); Response.Clear(); Response.ClearHeaders(); Response.ContentType = "text/csv"; Response.AppendHeader("Content-Disposition", string.Format("attachment;filename={0}", fileName)); Response.Write("Published,Title,Author,Price," + outstring); Response.End(); } }
public override void ExecuteResult(ControllerContext context) { StringBuilder csv = new StringBuilder(10 * Table.Rows.Count * Table.Columns.Count); for (int c = 0; c < Table.Columns.Count; c++) { if (c > 0) csv.Append(","); DataColumn dc = Table.Columns[c]; string columnTitleCleaned = CleanCSVString(dc.ColumnName); csv.Append(columnTitleCleaned); } csv.Append(Environment.NewLine); foreach (DataRow dr in Table.Rows) { StringBuilder csvRow = new StringBuilder(); for(int c = 0; c < Table.Columns.Count; c++) { if(c != 0) csvRow.Append(","); object columnValue = dr[c]; if (columnValue == null) csvRow.Append(""); else { string columnStringValue = columnValue.ToString(); string cleanedColumnValue = CleanCSVString(columnStringValue); if (columnValue.GetType() == typeof(string) && !columnStringValue.Contains(",")) { cleanedColumnValue = "=" + cleanedColumnValue; } csvRow.Append(cleanedColumnValue); } } csv.AppendLine(csvRow.ToString()); } HttpResponseBase response = context.HttpContext.Response; response.ContentType = "text/csv"; response.AppendHeader("Content-Disposition", "attachment;filename=" + this.FileName); response.Write(csv.ToString()); } protected string CleanCSVString(string input) { string output = "\"" + input.Replace("\"", "\"\"").Replace("\r\n", " ").Replace("\r", " ").Replace("\n", "") + "\""; return output; }
Private Function formatForCSV(stringToProcess As String) As String If stringToProcess.Contains("""") Or stringToProcess.Contains(",") Then stringToProcess = String.Format("""{0}""", stringToProcess.Replace(" """)) End If Return stringToProcess End Function CsvLine.Append(b.Title.Replace(",", "") + ",") CsvLine.Append(formatForCSV(b.Title)) + ",")
Select case Name case "Mary" case "John" case else end select
Select case Name case "Mary" exit select case "John" exit select case else end select
Select Case SomeEnumVar Case SomeEnum.SomeValue1 If Not SomeCondition Then Exit Select Case SomeEnum.SomeValue2 Case Else End Select
Select Case SomeEnumVar Case SomeEnum.SomeValue1 If SomeCondition Then End If Case SomeEnum.SomeValue2 Case Else End Select
Case 1 Do something Do something Evaluate exit select Else Do something
Form TableLayoutPanel FlowLayoutPanel TextBox (focused)
Function FindFocussedControl(ByVal ctr As Control) As Control Dim container As ContainerControl = TryCast(ctr, ContainerControl) Do While (container IsNot Nothing) ctr = container.ActiveControl container = TryCast(ctr, ContainerControl) Loop Return ctr End Function
if (txtModelPN != this.ActiveControl) txtModelPN.BackColor = Color.White;
IF txtModelPN <> Me.ActiveControl Then txtModelPN.BackColor = Color.White End If
If DataGridView1.Name = Me.ActiveControl.Name Then TextBox1.Visible = True Else TextBox1.Visible = False End If
Private bFocus = False Private Sub txtUrl_MouseEnter(sender As Object, e As EventArgs) Handles txtUrl.MouseEnter If Me.ActiveControl.Name <> txtUrl.Name Then bFocus = True End If End Sub Private Sub txtUrl_MouseUp(sender As Object, e As MouseEventArgs) Handles txtUrl.MouseUp If bFocus Then bFocus = False txtUrl.SelectAll() End If End Sub
Protected Function GetFocusControl() As Control Dim focusControl As Control = Nothing Dim focusHandle As IntPtr = GetFocus() If IntPtr.Zero.Equals(focusHandle) Then focusControl = Control.FromHandle(focusHandle) End If Return focusControl End Function
Dim myVar Dim myString = "Hello world!" Dim myString2 As String = "Hello world!"
Option Infer On Dim myVar1 myVar1 = 10 Dim myVar2 = 10 myVar1 = New MyClass() myVar2 = New MyClass()
Dim type As Type = yourObject.GetType() Dim typeName As String = type.FullName
Dim ClassName as string = Me.GetType().BaseType.FullName
Try ' ' ' ' ' ' Catch e As Exception ' ' Throw e End Try
Try ' ' ' ' Catch e As Exception Throw e Finally ' ' End Try
Try ' ' ' ' Catch e As Exception Throw Finally ' ' End Try
hfSupEmail.Value = dt.Rows(0)("SupEmail").ToString()
If Not IsDBNull(dt.Rows(0)("SupEmail")) Then hfSupEmail.Value = dt.Rows(0)("SupEmail") End If
hfSupEmail.Value = If(IsDbNull(dt.Rows(0)("SupEmail")), String.Empty, dt.Rows(0)("SupEmail").ToString)
Imports Microsoft.VisualBasic Imports System.Runtime.CompilerServices Public Module HTMLExtensionMethods <Extension()> _ Public Function DefaultIfDBNull(Of T)(ByVal obj As Object) As T Return If(Convert.IsDBNull(obj), CType(Nothing, T), CType(obj, T)) End Function End Module
hfSupEmail.Value = dt.Rows(0)("SupEmail").DefaultIfDBNull(Of String)()
hfSupEmail.Value = If(dt.Rows(0).Field(Of String)("SupEmail"), "")
Select Object.Name.ToString() Case "Name1" Case "Name2" Case Else End Select
Private Sub Button_Click(sender as Object, e as EventArgs) _ Handles button1.Click, Button2.Click Select CType(sender, Button).Name Case button1.Name Case button2.Name Case Else End Select End Sub
Dim num as Integer = 5 Select Case num Case 1 to 10 Case 11 to 20 Case Else End Select
public readonly property foo as string get return bar end get end property
public function foo() as string return bar end function
Dim name As String = IIf(obj Is Nothing, "", obj.Name)
Public Shared Function IIf(Of T)(ByVal Expression As Boolean, ByVal TruePart As T, ByVal FalsePart As T) As T If Expression Then Return TruePart Else Return FalsePart End Function
Public Class Test Public Sub New() Dim rnd = New Random() Dim result As Integer = If(rnd.Next(1000) < 500, 1, -1) Console.WriteLine(result) End Sub End Class
.method public specialname rtspecialname instance void .ctor() cil managed { .maxstack 2 .locals init ( [0] int32 result, [1] class [mscorlib]System.Random rnd) L_0000: nop L_0001: ldarg.0 L_0002: call instance void [mscorlib]System.Object::.ctor() L_0007: nop L_0008: newobj instance void [mscorlib]System.Random::.ctor() L_000d: stloc.1 L_000e: ldloc.1 L_000f: ldc.i4 0x3e8 L_0014: callvirt instance int32 [mscorlib]System.Random::Next(int32) L_0019: ldc.i4 500 L_001e: blt.s L_0023 L_0020: ldc.i4.m1 L_0021: br.s L_0024 L_0023: ldc.i4.1 L_0024: stloc.0 L_0025: ldloc.0 L_0026: call void [mscorlib]System.Console::WriteLine(int32) L_002b: nop L_002c: nop L_002d: ret }
.method public specialname rtspecialname instance void .ctor() cil managed { .maxstack 3 .locals init ( [0] int32 result, [1] class [mscorlib]System.Random rnd) L_0000: nop L_0001: ldarg.0 L_0002: call instance void [mscorlib]System.Object::.ctor() L_0007: nop L_0008: newobj instance void [mscorlib]System.Random::.ctor() L_000d: stloc.1 L_000e: ldloc.1 L_000f: ldc.i4 0x3e8 L_0014: callvirt instance int32 [mscorlib]System.Random::Next(int32) L_0019: ldc.i4 500 L_001e: clt L_0020: ldc.i4.1 L_0021: box int32 L_0026: ldc.i4.m1 L_0027: box int32 L_002c: call object [Microsoft.VisualBasic]Microsoft.VisualBasic.Interaction::IIf(bool, object, object) L_0031: call int32 [Microsoft.VisualBasic]Microsoft.VisualBasic.CompilerServices.Conversions::ToInteger(object) L_0036: stloc.0 L_0037: ldloc.0 L_0038: call void [mscorlib]System.Console::WriteLine(int32) L_003d: nop L_003e: nop L_003f: ret }
Public WM_SYSCOMMAND As Integer = &H112 Public SC_MONITORPOWER As Integer = &Hf170 <DllImport("user32.dll")> _ Private Shared Function SendMessage(hWnd As Integer, hMsg As Integer, wParam As Integer, lParam As Integer) As Integer End Function Private Sub button1_Click(sender As Object, e As System.EventArgs) SendMessage(Me.Handle.ToInt32(), WM_SYSCOMMAND, SC_MONITORPOWER, 2) End Sub
Dim ee = From e In someXML.<Employee> _ Select New With {.Surname = e.<Surname>, .Forename = e.<Forename>}
Dim ee = From e In someXML.<Employee> _ Select Surname = .Surname = e.<Surname>, .Forename = e.<Forename>
Dim X = New With { .Surname = "A", .Forename = "B" }
Dim x = From it in SomeCollection Select New Student With { .Name = it.Name }
Dim ee = From e In someXML.<Employee> _ Select e.<Surname>.Value, e.<Forename>.Value
Class Employee Private _surname As String Public Property Surname() As String Get Return _surname End Get Set(ByVal value As String) _surname = value End Set End Property Private _forename As String Public Property Forename() As String Get Return _forename End Get Set(ByVal value As String) _forename = value End Set End Property End Class
Dim ee = From e In someXML.<Employee> _ Select New Employee With {.Surname = e.<Surname>.Value, _ .Forename = e.<Forename>.Value}
Public Module CoreModule Dim R As New System.Random(CInt(Microsoft.VisualBasic.Timer)) Public Function D(ByVal Roll As Integer) As Integer Return R.Next(0, Roll) + 1 End Function Public Function _1D6() As Integer Return D(6) End Function Public Function _2D6() As Integer Return D(6) + D(6) End Function Public Function _3D6() As Integer Return D(6) + D(6) + D(6) End Function Public Function _4D6() As Integer Return D(6) + D(6) + D(6) + D(6) End Function Public Function CRLF() As String Return Microsoft.VisualBasic.ControlChars.CrLf End Function End Module
Public NotInheritable Class CoreModule Shared Sub New() Public Shared Function _1D6() As Integer Public Shared Function _2D6() As Integer Public Shared Function _3D6() As Integer Public Shared Function _4D6() As Integer Public Shared Function CRLF() As String Public Shared Function D(ByVal Roll As Integer) As Integer Private Shared R As Random End Class
public sealed class CoreModule { private static Random R; static CoreModule(); public static int _1D6(); public static int _2D6(); public static int _3D6(); public static int _4D6(); public static string CRLF(); public static int D(int Roll); }
Imports System.Web Imports System.Web.UI Module ResponseHelper <System.Runtime.CompilerServices.Extension()> _ Public Sub Redirect(ByVal response As Net.HttpWebResponse, _ ByVal url As String, ByVal target As String, _ ByVal windowFeatures As String) If String.IsNullOrEmpty(target) Or _ target.Equals("_self", StringComparison.OrdinalIgnoreCase) And _ String.IsNullOrEmpty(windowFeatures) Then response.Redirect(url, target, windowFeatures) Else Dim page As Page = CType(HttpContext.Current.Handler, Page) If page Is Nothing Then Throw New InvalidOperationException("Cannot redirect to new window outside Page context.") End If url = page.ResolveClientUrl(url) Dim script As String If String.IsNullOrEmpty(windowFeatures) Then script = "window.open(""{0}"", ""{1}"", ""{2}"";" Else script = "window.open(""{0}"", ""{1}"");" End If script = String.Format(script, url, target, windowFeatures) ScriptManager.RegisterStartupScript(page, GetType(Page), "Redirect", script, True) End If End Sub End Module
System.Text.Encoding.ASCII System.Text.Encoding.BigEndianUnicode System.Text.Encoding.Default System.Text.Encoding.Unicode System.Text.Encoding.UTF32 System.Text.Encoding.UTF7 System.Text.Encoding.UTF8
Public Function GetFileEncoding(filePath As String) As Encoding Using sr As New StreamReader(filePath, True) sr.Read() Return sr.CurrentEncoding End Using End Function
If (data(0) = &HFF) And (data(1) = &HFE) Then End If
Function IsUtf16LittleEndian(data() as Byte) As Boolean Dim bom() As Byte = Encoding.Unicode.GetPreamble() If (data(0) = bom(0)) And (data(1) = bom(1) Then Return True Else Return False End If End Function
Function IsUtf16LittleEndian(data() as Byte) As Boolean Dim bom() As Byte = Encoding.Unicode.GetPreamble() Return data.Zip(bom, Function(x, y) x = y).All(Function(x) x) End Function
Public Function DetectEncodingFromBom(data() As Byte) As Encoding Return Encoding.GetEncodings(). Select(Function(info) info.GetEncoding()). FirstOrDefault(Function(enc) DataStartsWithBom(data, enc)) End Function Private Function DataStartsWithBom(data() As Byte, enc As Encoding) As Boolean Dim bom() As Byte = enc.GetPreamble() If bom.Length <> 0 Then Return data. Zip(bom, Function(x, y) x = y). All(Function(x) x) Else Return False End If End Function
Dim data() As Byte = File.ReadAllBytes("test.txt") Dim detectedEncoding As Encoding = DetectEncodingFromBom(data) If detectedEncoding Is Nothing Then Console.WriteLine("Unable to detect encoding") Else Console.WriteLine(detectedEncoding.EncodingName) End If
Dim S As String S = "RAJAN" Dim answer As Char answer = S.Substring(0, 1)
Dim strW As String strW = ChrW(&H25B2) & "More text"
Dim myString = _ <q>This string would contain an escaped character &
Dim today As Date = Date.Today Dim dayDiff As Integer = today.DayOfWeek - DayOfWeek.Monday Dim monday As Date = today.AddDays(-dayDiff)
Dim today As Date = Date.Today Dim dayIndex As Integer = today.DayOfWeek If dayIndex < DayOfWeek.Monday Then dayIndex += 7 End If Dim dayDiff As Integer = dayIndex - DayOfWeek.Monday Dim monday As Date = today.AddDays(-dayDiff)
Dim monday As DateTime = Today.AddDays((Today.DayOfWeek - DayOfWeek.Monday) * -1)
=Format(DateAdd("d", (-1 * WeekDay(Date.Today()) + 2), Date.Today()), "dd/MM/yyyy")
private static DateTime GetMondayForWeek(DateTime inputDate) { int daysFromMonday = inputDate.DayOfWeek - DayOfWeek.Monday; return inputDate.AddDays(-daysFromMonday); }
private static DateTime GetDayForWeek(DateTime inputDate, DayOfWeek inputDay) { int daysAway = inputDate.DayOfWeek - inputDay; return inputDate.AddDays(-daysAway); }
DateTime mondayDate = GetMondayForWeek(new DateTime(2009, 11, 15)); Console.WriteLine(mondayDate);
Dim today As Date = Date.Today Dim dayDiff As Integer = today.DayOfWeek - DayOfWeek.Monday Dim monday As Date = today.AddDays(-dayDiff) dayDiff = DayOfWeek.Saturday - today.DayOfWeek + 1 Dim sunday As Date = today.AddDays(dayDiff)
Dim instance As DateTime Dim value As DayOfWeek value = instance.DayOfWeek
Public Function GetSubsequentMonday(ByVal startDate As DateTime, ByVal subsequentWeeks As Integer) As DateTime Dim dayOfWeek As Integer = CInt(startDate.DayOfWeek) Dim daysUntilMonday As Integer = (Math.Sign(dayOfWeek) * (7 - dayOfWeek)) + 1 Return startDate.AddDays(CDbl((daysUntilMonday + (7 * (subsequentWeeks - 1))))) End Function
Public Function GetFirstOfLastWeek() As DateTime Dim today As DateTime, daysSinceMonday As Integer today = DateTime.Today daysSinceMonday = today.DayOfWeek - DayOfWeek.Monday If daysSinceMonday < 0 Then daysSinceMonday += 7 End If Return today.AddDays(-daysSinceMonday) End Function
DateTime mondayDate = DateTime.Now.AddDays(((DateTime.Now.DayOfWeek == DayOfWeek.Sunday?7: (int)DateTime.Now.DayOfWeek) - 1)*-1); DateTime sundayDate = DateTime.Now.AddDays(7 - (DateTime.Now.DayOfWeek == DayOfWeek.Sunday?7: (int)DateTime.Now.DayOfWeek ));
Dim stringList = {"123", "456", "789"}.ToList Dim intList = stringList.ConvertAll(Function(str) Int32.Parse(str))
Dim intList = stringList.ConvertAll(AddressOf Int32.Parse)
Dim stringArray = {"123", "456", "789"} Dim intArray = Array.ConvertAll(stringArray, Function(str) Int32.Parse(str))
Dim value As Int32 Dim intArray = (From str In stringArray Let isInt = Int32.TryParse(str, value) Where isInt Select Int32.Parse(str)).ToArray
Dim intArray = Array.ConvertAll(stringArray, Function(str) New With { .IsInt = Int32.TryParse(str, value), .Value = value }).Where(Function(result) result.IsInt). Select(Function(result) result.Value).ToArray
Dim arrStrings() As String = {"55555", "44444"} Dim arrIntegers() As Integer = Array.ConvertAll(arrStrings, New Converter(Of String, Integer)(AddressOf ConvertToInteger)) Public Function ConvertToInteger(ByVal input As String) As Integer Dim output As Integer = 0 Integer.TryParse(input, output) Return output End Function
dim ls as new List(of string)() ls.Add("55555") ls.Add("44444") ls.Add(" ") Dim temp as integer Dim ls2 as List(Of integer)=ls.Where(function(x) integer.TryParse(x,temp)).Select(function(x) temp).ToList()
Dim arrNumeric() As Integer For Each strItemInArray In YourArrayName If IsNumeric(strItemInArray) Then If arrNumeric Is Nothing Then ReDim arrNumeric(0) arrNumeric(0) = CInt(strItemInArray) Else ReDim Preserve arrNumeric(arrNumeric.Length) arrNumeric(arrNumeric.Length - 1) = CInt(strItemInArray) End If End If Next
Dim stringList() As String = New String() {"", "123", "456", "789", "a"} Dim intList() As Integer intList = (From str As String In stringList Where Integer.TryParse(str, Nothing) Select (Integer.Parse(str))).ToArray
Dim NewIntArray = YouStringArray.Select(Function(x) CInt(x)).ToArray
Public Structure Product Public ItemNo As Int32 Public Description As String Public Cost As Decimal End Structure
Dim ProductsList As New List(Of Product) Dim product1 As New Product With product1 .ItemNo = 100 .Description = "Standard Widget" .Cost = 10D End With ProductsList.Add(product1) Dim product2 As New Product With product2 .ItemNo = 101 .Description = "Standard Cog" .Cost = 10.95D End With ProductsList.Add(product2) Dim product3 As New Product With product3 .ItemNo = 101 .Description = "Industrial Strenght Sprocket" .Cost = 99.95D End With ProductsList.Add(product3)
Dim s = (From p As Product In products Select p.Cost).Sum()
Imports System.Environment Class Sample Public Shared Sub Main() Dim appData As String = GetFolderPath(SpecialFolder.ApplicationData) Console.WriteLine("App Data Folder Path: " & appData) End Sub End Class
Function GetAppDataPath() As String Return Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) End Function
Dim filepath as String filePath = CStr(fileDialog) Dim sourceXL As Variant Dim sourceBook As Variant Dim sourceSheet As Variant Dim sourceSheetSum As Variant Set sourceXL = Nothing Set sourceBook = Nothing Set sourceSheet = Nothing Set sourceSheetSum = Nothing Set sourceXL = Excel.Application Set sourceBook = sourceXL.Workbooks.Open(filePath) Set sourceSheet = sourceBook.Sheets("Measurements") Set sourceSheetSum = sourceBook.Sheets("Analysis Summary") Dim measName As Variant Dim partName As Variant sourceSheetSum.Range("C3").Select measName = sourceSheetSum.Range(Selection, Selection.End(xlDown)).Value sourceSheetSum.Range("D3").Select partName = sourceSheetSum.Range(Selection, Selection.End(xlDown)).Value
For j = 1 To sourceBook.Sheets.Count Debug.Print (Sheets(j).name) Next j
For j = 1 To sourceBook.Sheets.Count listSheet(j) = Sheets(j).name Next j Debug.Print (listSheet(2)) Set sourceSheetSum = sourceBook.Sheets(listSheet(2))
Dim sourceXL As Variant Dim sourceBook As Variant Dim sourceSheet As Variant Dim sourceSheetSum As Variant Set sourceSheet = sourceBook.Sheets("Measurements")
Dim sourceXL As Excel.Application Dim sourceBook As Excel.Workbook Dim sourceSheet As Worksheet Dim sourceSheetSum As Worksheet Set sourceSheet = sourceBook.Worksheets("Measurements")
Option Explicit Sub RangeError() Dim sourceBook As Workbook Dim sourceSheet As Worksheet Dim sourceSheetSum As Worksheet Set sourceBook = ActiveWorkbook Set sourceSheet = sourceBook.Sheets("Sheet1") Set sourceSheetSum = sourceBook.Sheets("Sheet2") sourceSheetSum.Select sourceSheetSum.Range("C3").Select End Sub
sourceSheetSum.Select sourceSheetSum.Range("C3").Select
Dim sourceXL As Object, sourceBook As Object Dim sourceSheet As Object, sourceSheetSum As Object Dim lRow As Long Dim measName As Variant, partName As Variant Dim filepath As String filepath = CStr(FileDialog) On Error Resume Next Set sourceXL = GetObject(, "Excel.Application") If Err.Number <> 0 Then Set sourceXL = CreateObject("Excel.Application") End If Err.Clear On Error GoTo 0 Set sourceBook = sourceXL.Workbooks.Open(filepath) Set sourceSheet = sourceBook.Sheets("Measurements") Set sourceSheetSum = sourceBook.Sheets("Analysis Summary") lRow = sourceSheetSum.Range("C" & sourceSheetSum.Rows.Count).End(xlUp).Row measName = sourceSheetSum.Range("C3:C" & lRow) lRow = sourceSheetSum.Range("D" & sourceSheetSum.Rows.Count).End(xlUp).Row partName = sourceSheetSum.Range("D3:D" & lRow)
Public Class GenericThing(Of T1, T2) Public Function Foo( id As T2 ) As T1 If id IsNot Nothing Then End If End Function End Class
Public Function Bar( id As Integer ) As T1 If id <> Nothing Then End If End Function
Public Class GenericThing(Of T) Public Sub Foo(id As T) Dim defaultValue As T = Nothing If id <> defaultValue Then Console.WriteLine("Not default") Else Console.WriteLine("Default") End If End Function End Class
If Not EqualityComparer(Of T).Default.Equals(id, Nothing) Then
Imports System Imports System.ComponentModel Public Class WinTracker Implements INotifyPropertyChanged Public Event PropertyChanged(ByVal sender As Object, ByVal e As PropertyChangedEventArgs) Implements INotifyPropertyChanged.PropertyChanged Public Event SoundAlert(ByVal sender As Object, ByVal e As EventArgs) Private _ID As Integer Private _Text As String Private _ElapsedTime As TimeSpan Private _LastStart As DateTime Private _RunningTime As TimeSpan Public Sub New(ByVal id As Integer, ByVal text As String) _ID = id _Text = text Call StartTracking() End Sub ReadOnly Property ID() As Integer Get Return _ID End Get End Property Property Text() As String Get Return _Text End Get Set(ByVal value As String) If value <> _Text Then _Text = value RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("Text")) End If End Set End Property Public Sub StartTracking() _RunningTime = TimeSpan.Zero _LastStart = DateTime.Now End Sub Public Sub StopTracking() _ElapsedTime += _RunningTime _RunningTime = TimeSpan.Zero RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("ToString")) End Sub Public Sub UpdateTime() _RunningTime = (DateTime.Now - _LastStart) RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("ToString")) If _RunningTime.Seconds >= 60 Then RaiseEvent SoundAlert(Me, New EventArgs) End If End Sub Public Overrides Function ToString() As String Return "(" & FormatTimeSpan(_ElapsedTime + _RunningTime) & ") " & _Text End Function Public Shared Operator =(ByVal thisItem As WinTracker, ByVal thatItem As WinTracker) As Boolean Return (thisItem.ID = thatItem.ID) End Operator Public Shared Operator <>(ByVal thisItem As WinTracker, ByVal thatItem As WinTracker) As Boolean Return Not (thisItem.ID = thatItem.ID) End Operator Private Function FormatTimeSpan(ByVal span As TimeSpan) As String Return span.Hours.ToString("00") & " hrs " & span.Minutes.ToString("00") & " min " & span.Seconds.ToString("00") & " sec" End Function Public Shared Sub SwitchWindows(ByVal FromWindow As WinTracker, ByVal ToWindow As WinTracker) FromWindow.StopTracking() ToWindow.StartTracking() End Sub End Class
Imports System Imports System.ComponentModel Imports System.Diagnostics Imports System.Runtime.InteropServices Public Class Form1 Private Declare Auto Function GetForegroundWindow Lib "user32" () As IntPtr Private Declare Auto Function GetWindowThreadProcessId Lib "user32" (ByVal hWnd As Int32, ByRef lpdwProcessId As Int32) As UInt32 Private _Windows As New BindingList(Of WinTracker) Private _ActiveWindow As WinTracker Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load With ListBox1 .ValueMember = "ID" .DisplayMember = "ToString" .DataSource = New BindingSource(_Windows, Nothing) End With Timer1.Enabled = True End Sub Private Sub Timer1_Tick(ByVal sender As Object, ByVal e As EventArgs) Handles Timer1.Tick Dim hWnd As Integer = GetForegroundWindow().ToInt32 If hWnd > 0 Then Dim id As Integer = 1 Call GetWindowThreadProcessId(hWnd, id) If id > 0 Then Dim text As String = Process.GetProcessById(id).ProcessName If text <> String.Empty Then Dim spent As WinTracker = _Windows.FirstOrDefault(Function(x As WinTracker) x.ID = id) If spent Is Nothing Then spent = New WinTracker(id, text) _Windows.Add(spent) If text.ToLower = "firefox" Then AddHandler spent.SoundAlert, AddressOf WinTracker_SoundAlert End If Else spent.Text = text End If If _ActiveWindow Is Nothing Then _ActiveWindow = spent Else If _ActiveWindow <> spent Then WinTracker.SwitchWindows(_ActiveWindow, spent) _ActiveWindow = spent Else _ActiveWindow.UpdateTime() End If End If End If End If End If End Sub Private Sub WinTracker_SoundAlert(ByVal sender As Object, ByVal e As EventArgs) My.Computer.Audio.PlaySystemSound(Media.SystemSounds.Beep) End Sub End Class
using System; using System.Diagnostics; using System.Runtime.InteropServices; using System.Windows.Forms; namespace FireFoxWatch { public partial class Form1 : Form { [DllImport("user32.dll")] private static extern IntPtr GetForegroundWindow(); [DllImport("user32.dll", SetLastError = true)] static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId); private TimeSpan fireFoxElapsedTime = new TimeSpan(); public Form1() { InitializeComponent(); } private void timer1_Tick(object sender, EventArgs e) { var wnd = GetForegroundWindow(); uint procId; GetWindowThreadProcessId(wnd, out procId); var process = Process.GetProcessById((int)procId); if (process.ProcessName.Equals("firefox", StringComparison.CurrentCultureIgnoreCase)) fireFoxElapsedTime += new TimeSpan(0, 0, 0, 0, timer1.Interval); label1.Text = fireFoxElapsedTime.ToString(); } private void Form1_Load(object sender, EventArgs e) { timer1.Start(); } } }
Public Function AES_Encrypt(ByVal input As String, ByVal pass As String) As String Dim AES As New System.Security.Cryptography.RijndaelManaged Dim Hash_AES As New System.Security.Cryptography.MD5CryptoServiceProvider Dim encrypted As String = "" Try Dim hash(31) As Byte Dim temp As Byte() = Hash_AES.ComputeHash(System.Text.ASCIIEncoding.ASCII.GetBytes(pass)) Array.Copy(temp, 0, hash, 0, 16) Array.Copy(temp, 0, hash, 15, 16) AES.Key = hash AES.Mode = Security.Cryptography.CipherMode.ECB Dim DESEncrypter As System.Security.Cryptography.ICryptoTransform = AES.CreateEncryptor Dim Buffer As Byte() = System.Text.ASCIIEncoding.ASCII.GetBytes(input) encrypted = Convert.ToBase64String(DESEncrypter.TransformFinalBlock(Buffer, 0, Buffer.Length)) Return encrypted Catch ex As Exception End Try End Function Public Function AES_Decrypt(ByVal input As String, ByVal pass As String) As String Dim AES As New System.Security.Cryptography.RijndaelManaged Dim Hash_AES As New System.Security.Cryptography.MD5CryptoServiceProvider Dim decrypted As String = "" Try Dim hash(31) As Byte Dim temp As Byte() = Hash_AES.ComputeHash(System.Text.ASCIIEncoding.ASCII.GetBytes(pass)) Array.Copy(temp, 0, hash, 0, 16) Array.Copy(temp, 0, hash, 15, 16) AES.Key = hash AES.Mode = Security.Cryptography.CipherMode.ECB Dim DESDecrypter As System.Security.Cryptography.ICryptoTransform = AES.CreateDecryptor Dim Buffer As Byte() = Convert.FromBase64String(input) decrypted = System.Text.ASCIIEncoding.ASCII.GetString(DESDecrypter.TransformFinalBlock(Buffer, 0, Buffer.Length)) Return decrypted Catch ex As Exception End Try End Function
Private Function AESE(ByVal plaintext As String, ByVal key As String) As String Dim AES As New System.Security.Cryptography.RijndaelManaged Dim SHA256 As New System.Security.Cryptography.SHA256Cng Dim ciphertext As String = "" Try AES.GenerateIV() AES.Key = SHA256.ComputeHash(System.Text.ASCIIEncoding.ASCII.GetBytes(key)) AES.Mode = Security.Cryptography.CipherMode.CBC Dim DESEncrypter As System.Security.Cryptography.ICryptoTransform = AES.CreateEncryptor Dim Buffer As Byte() = System.Text.ASCIIEncoding.ASCII.GetBytes(plaintext) ciphertext = Convert.ToBase64String(DESEncrypter.TransformFinalBlock(Buffer, 0, Buffer.Length)) Return Convert.ToBase64String(AES.IV) & Convert.ToBase64String(DESEncrypter.TransformFinalBlock(Buffer, 0, Buffer.Length)) Catch ex As Exception Return ex.Message End Try End Function Private Function AESD(ByVal ciphertext As String, ByVal key As String) As String Dim AES As New System.Security.Cryptography.RijndaelManaged Dim SHA256 As New System.Security.Cryptography.SHA256Cng Dim plaintext As String = "" Dim iv As String = "" Try Dim ivct = ciphertext.Split({"=="}, StringSplitOptions.None) iv = ivct(0) & "==" ciphertext = If(ivct.Length = 3, ivct(1) & "==", ivct(1)) AES.Key = SHA256.ComputeHash(System.Text.ASCIIEncoding.ASCII.GetBytes(key)) AES.IV = Convert.FromBase64String(iv) AES.Mode = Security.Cryptography.CipherMode.CBC Dim DESDecrypter As System.Security.Cryptography.ICryptoTransform = AES.CreateDecryptor Dim Buffer As Byte() = Convert.FromBase64String(ciphertext) plaintext = System.Text.ASCIIEncoding.ASCII.GetString(DESDecrypter.TransformFinalBlock(Buffer, 0, Buffer.Length)) Return plaintext Catch ex As Exception Return ex.Message End Try End Function
Private Function AESE(ByVal input As Byte(), ByVal key As String) As Byte() Dim AES As New System.Security.Cryptography.RijndaelManaged Dim SHA256 As New System.Security.Cryptography.SHA256Cng Dim ciphertext As String = "" Try AES.Key = SHA256.ComputeHash(System.Text.ASCIIEncoding.ASCII.GetBytes(key)) AES.Mode = Security.Cryptography.CipherMode.ECB Dim DESEncrypter As System.Security.Cryptography.ICryptoTransform = AES.CreateEncryptor Dim Buffer As Byte() = input Return DESEncrypter.TransformFinalBlock(Buffer, 0, Buffer.Length) Catch ex As Exception End Try End Function Private Function AESD(ByVal input As Byte(), ByVal key As String) As Byte() Dim AES As New System.Security.Cryptography.RijndaelManaged Dim SHA256 As New System.Security.Cryptography.SHA256Cng Try AES.Key = SHA256.ComputeHash(System.Text.ASCIIEncoding.ASCII.GetBytes(key)) AES.Mode = Security.Cryptography.CipherMode.ECB Dim DESDecrypter As System.Security.Cryptography.ICryptoTransform = AES.CreateDecryptor Dim Buffer As Byte() = input Return DESDecrypter.TransformFinalBlock(Buffer, 0, Buffer.Length) Catch ex As Exception End Try End Function
Dim strFilepath = "" Dim directory As New System.IO.DirectoryInfo(strFilepath) Dim File As System.IO.FileInfo() = directory.GetFiles() Dim File1 As System.IO.FileInfo For Each File1 In File Dim strLastModified As String strLastModified = System.IO.File.GetLastWriteTime(strFilepath & "\" & File1.Name).ToShortDateString() Next
Select f.Title, TotalArea = Sum(c.Area) From Firms f Left Join Concessions c on c.FirmID = f.FirmID Group By f.Title Order by Sum(c.Area) DESC
From f As Firm In Db.Firms _ Order By f.Concessions.Sum(Area)
From c In Concessions _ Join f In Firms on f.FirmID equals c.FirmID _ Group by f.Title _ Into TotalArea = sum(c.OfficialArea) _ Order by TotalArea Descending _ Select Title, TotalArea
Dim stringToCleanUp As String = "bon;jour" Dim characterToRemove As String = ";"
Function RemoveCharacter(ByVal stringToCleanUp, ByVal characterToRemove) ... End Function
Dim cleanString As String = Replace(stringToCleanUp, characterToRemove, "")
Function RemoveCharacter(ByVal stringToCleanUp, ByVal characterToRemove) Return stringToCleanUp.Replace(characterToRemove, "") End Function
Dim clean as String clean = myString.Replace(",", "")
Dim newstring As String newstring = oldstring.Replace(",", "").Replace(";", "")
Public Shared Function stripTags(ByVal html As String) As String Dim plain As String = String.Empty Dim htmldoc As New HtmlAgilityPack.HtmlDocument htmldoc.LoadHtml(html) Dim invalidNodes As HtmlAgilityPack.HtmlNodeCollection = htmldoc.DocumentNode.SelectNodes(" If Not htmldoc Is Nothing Then For Each node In invalidNodes node.ParentNode.RemoveChild(node, True) Next End If Return htmldoc.DocumentNode.WriteContentTo End Function
Public Shared Function stripTags(ByVal html As String) As String Dim htmldoc As New HtmlAgilityPack.HtmlDocument htmldoc.LoadHtml(html.Replace("</p>", "</p>" & New String(Environment.NewLine, 2)).Replace("<br/>", Environment.NewLine)) Return htmldoc.DocumentNode.InnerText End Function
Public NotInheritable Class HtmlSanitizer Private Sub New() End Sub Private Shared ReadOnly Whitelist As IDictionary(Of String, String()) Private Shared DeletableNodesXpath As New List(Of String)() Shared Sub New() Whitelist = New Dictionary(Of String, String())() From { _ {"a", New () {"href"}}, _ {"strong", Nothing}, _ {"em", Nothing}, _ {"blockquote", Nothing}, _ {"b", Nothing}, _ {"p", Nothing}, _ {"ul", Nothing}, _ {"ol", Nothing}, _ {"li", Nothing}, _ {"div", New () {"align"}}, _ {"strike", Nothing}, _ {"u", Nothing}, _ {"sub", Nothing}, _ {"sup", Nothing}, _ {"table", Nothing}, _ {"tr", Nothing}, _ {"td", Nothing}, _ {"th", Nothing} _ } End Sub Public Shared Function Sanitize(input As String) As String If input.Trim().Length < 1 Then Return String.Empty End If Dim htmlDocument = New HtmlDocument() htmlDocument.LoadHtml(input) SanitizeNode(htmlDocument.DocumentNode) Dim xPath As String = HtmlSanitizer.CreateXPath() Return StripHtml(htmlDocument.DocumentNode.WriteTo().Trim(), xPath) End Function Private Shared Sub SanitizeChildren(parentNode As HtmlNode) For i As Integer = parentNode.ChildNodes.Count - 1 To 0 Step -1 SanitizeNode(parentNode.ChildNodes(i)) Next End Sub Private Shared Sub SanitizeNode(node As HtmlNode) If node.NodeType = HtmlNodeType.Element Then If Not Whitelist.ContainsKey(node.Name) Then If Not DeletableNodesXpath.Contains(node.Name) Then node.Name = "removeableNode" DeletableNodesXpath.Add(node.Name) End If If node.HasChildNodes Then SanitizeChildren(node) End If Return End If If node.HasAttributes Then For i As Integer = node.Attributes.Count - 1 To 0 Step -1 Dim currentAttribute As HtmlAttribute = node.Attributes(i) Dim allowedAttributes As String() = Whitelist(node.Name) If allowedAttributes IsNot Nothing Then If Not allowedAttributes.Contains(currentAttribute.Name) Then node.Attributes.Remove(currentAttribute) End If Else node.Attributes.Remove(currentAttribute) End If Next End If End If If node.HasChildNodes Then SanitizeChildren(node) End If End Sub Private Shared Function StripHtml(html As String, xPath As String) As String Dim htmlDoc As New HtmlDocument() htmlDoc.LoadHtml(html) If xPath.Length > 0 Then Dim invalidNodes As HtmlNodeCollection = htmlDoc.DocumentNode.SelectNodes(xPath) For Each node As HtmlNode In invalidNodes node.ParentNode.RemoveChild(node, True) Next End If Return htmlDoc.DocumentNode.WriteContentTo() End Function Private Shared Function CreateXPath() As String Dim _xPath As String = String.Empty For i As Integer = 0 To DeletableNodesXpath.Count - 1 If i IsNot DeletableNodesXpath.Count - 1 Then _xPath += String.Format(" Else _xPath += String.Format(" End If Next Return _xPath End Function End Class
Private Shared Function StripHtml(html As String, xPath As String) As String Dim htmlDoc As New HtmlAgilityPack.HtmlDocument() htmlDoc.LoadHtml(html) If xPath.Length > 0 Then Dim invalidNodes As HtmlNodeCollection = htmlDoc.DocumentNode.SelectNodes(xPath) ' ' For i = invalidNodes.Count - 1 To 0 Step -1 Dim Node As HtmlNode = invalidNodes.Item(i) Node.ParentNode.RemoveChild(Node, True) Next ' ' End If Return htmlDoc.DocumentNode.WriteContentTo() End Function
public string RemoveHTMLTags(string source) { string expn = "<.*?>"; return Regex.Replace(source, expn, string.Empty); }
Enum Colors Red Green Blue Yellow End Enum Dim colors = [Enum].GetValues(GetType(Colors)) For Each c In colors Console.WriteLine(c) Next
Dim countries As Generic.List(Of String) = New Generic.List(Of String) For Each ci As Globalization.CultureInfo In Globalization.CultureInfo.GetCultures(Globalization.CultureTypes.AllCultures And Globalization.CultureTypes.NeutralCultures) Dim ri As Globalization.RegionInfo = New Globalization.RegionInfo(ci.LCID) countries.Add(ri.EnglishName) Next ci
Private Sub gridFiles_DragDrop(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles gridFiles.DragDrop If e.Data.GetDataPresent(DataFormats.FileDrop) Then Dim DroppedFiles() As String = e.Data.GetData(DataFormats.FileDrop) If Not DroppedFiles Is Nothing Then For Each file As String In DroppedFiles MsgBox(file) Next End If End If End Sub Private Sub gridFiles_DragEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles gridFiles.DragEnter If e.Data.GetDataPresent(DataFormats.FileDrop) Then e.Effect = DragDropEffects.All End If End Sub
Imports System.Threading Imports System.Threading.Tasks ... Dim buffer As StringBuilder; Sub processPackets() buffer.Append(packet); If buffer.ToString() = "REMOTELY" Then buffer.Clear() Else buffer.Clear() End If End Sub
Dim t = Task.Factory.StartNew(Sub() processPackets())
Dim strPath As String = System.IO.Path.GetDirectoryName( _ System.Reflection.Assembly.GetExecutingAssembly().CodeBase)
My.Application.Info.DirectoryPath Environment.CurrentDirectory System.Windows.Forms.Application.StartupPath AppDomain.CurrentDomain.BaseDirectory System.Reflection.Assembly.GetExecutingAssembly.Location System.Reflection.Assembly.GetExecutingAssembly.CodeBase New System.UriBuilder(System.Reflection.Assembly.GetExecutingAssembly.CodeBase) Path.GetDirectoryName(Uri.UnescapeDataString((New System.UriBuilder(System.Reflection.Assembly.GetExecutingAssembly.CodeBase).Path))) Uri.UnescapeDataString((New System.UriBuilder(System.Reflection.Assembly.GetExecutingAssembly.CodeBase).Path))
Dim P As String = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().CodeBase) P = New Uri(P).LocalPath
Dim dataDirectory As String = String.Format("{0}\Data\", Environment.CurrentDirectory)
C:\Development\solution folder\application folder\bin\debug
Path.Combine(Path.GetParentDirectory(GetType(MyClass).Assembly.Location), "Images\image.jpg")
Dim rButton As RadioButton = GroupBox1.Controls .OfType(Of RadioButton) .FirstOrDefault(Function(r) r.Checked = True)
Dim checkedRadioButton as RadioButton checkedRadioButton = radioButtonList.FirstOrDefault(Function(radioButton) radioButton.Checked))
Dim checkedRadioButton as RadioButton checkedRadioButton = groupBox.Controls.OfType(Of RadioButton)().FirstOrDefault(Function(radioButton) radioButton.Checked))
Private Function WhatRadioIsSelected(ByVal grp As GroupBox) As String Dim rbtn As RadioButton Dim rbtnName As String = String.Empty Try Dim ctl As Control For Each ctl In grp.Controls If TypeOf ctl Is RadioButton Then rbtn = DirectCast(ctl, RadioButton) If rbtn.Checked Then rbtnName = rbtn.Name Exit For End If End If Next Catch ex As Exception Dim stackframe As New Diagnostics.StackFrame(1) Throw New Exception("An error occurred in routine, End Try Return rbtnName End Function
var checkedButton = GroupBox1.Controls.OfType<RadioButton>() .FirstOrDefault(rb => rb.Checked);
Public Class Form1 Private Sub Form1_Shown(sender As Object, _ e As System.EventArgs) Handles Me.Shown RadioButton1.Tag = New Action(AddressOf rb1Action) RadioButton2.Tag = New Action(AddressOf rb2Action) RadioButton3.Tag = New Action(AddressOf rb3Action) RadioButton4.Tag = New Action(AddressOf rb4Action) End Sub Private Sub rb1Action() Debug.WriteLine("1 " & RadioButton1.Checked) End Sub Private Sub rb2Action() Debug.WriteLine("2 " & RadioButton2.Checked) End Sub Private Sub rb3Action() Debug.WriteLine("3 " & RadioButton3.Checked) End Sub Private Sub rb4Action() Debug.WriteLine("4 " & RadioButton4.Checked) End Sub Private Sub RadioButton_CheckedChanged(sender As System.Object, _ e As System.EventArgs) Handles _ RadioButton1.CheckedChanged, _ RadioButton2.CheckedChanged, _ RadioButton3.CheckedChanged, _ RadioButton4.CheckedChanged Dim aRadioButton As RadioButton = DirectCast(sender, RadioButton) If aRadioButton.Checked Then Dim rbAct As Action = DirectCast(aRadioButton.Tag, Action) rbAct.Invoke() End If End Sub End Class
Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click Dim ceckedRadioButton As Integer = 0 Dim totalRadioButton As Integer = 0 For Each myControl As RadioButton In Me.GroupBox1.Controls.OfType(Of RadioButton)() If myControl.Checked Then ceckedRadioButton += 1 End If totalRadioButton += 1 Next If ceckedRadioButton > 0 Then MessageBox.Show("Were selected" & " " & ceckedRadioButton.ToString & " " & "RadioButton on" & " " & totalRadioButton.ToString) Else MessageBox.Show("No selected RadioButton") End If End Sub
For Each b As RadioButton In GroupBox1.Controls.OfType(Of RadioButton)() If b.Checked = True Then MsgBox("I hope that will help you") End If Next
Private Sub Radios_Click(sender As Object, e As EventArgs) Handles RadioButton1.Click, RadioButton2.Click, RadioButton3.Click Dim rb As RadioButton rb = sender MsgBox(rb.Name) End Sub
Private Sub iButton_checked(ByVal sender As System.Object, ByVal e As System.EventArgs) For Each b As RadioButton In grpgodown.Controls.OfType(Of RadioButton)() If b.Checked = True Then MsgBox(b.Text) End If Next End Sub
Private Sub BTN_OK_Click(sender As Object, e As EventArgs) Handles BTN_OK.Click For Each Ctrl In GroupBox1.Controls If Ctrl.checked Then MsgBox(Ctrl.text) Next
Select Case True RadioButton1.checked RadioButton2.checked RadioButton3.checked End Select
Dim mytext As String = "123a123" Dim myChars() As Char = mytext.ToCharArray() For Each ch As Char In myChars If Char.IsDigit(ch) Then MessageBox.Show(ch) End If Next
Private Shared Function Num(ByVal value As String) As Integer Dim returnVal As String = String.Empty Dim collection As MatchCollection = Regex.Matches(value, "\d+") For Each m As Match In collection returnVal += m.ToString() Next Return Convert.ToInt32(returnVal) End Function
Dim x As String = "123a123&*^*&^*&^*&^ a sdsdfsdf" MsgBox(Integer.Parse(Regex.Replace(x, "[^\d]", "")))
Public Function getNumeric(value As String) As String Dim output As StringBuilder = New StringBuilder For i = 0 To value.Length - 1 If IsNumeric(value(i)) Then output.Append(value(i)) End If Next Return output.ToString() End Function
resultString = Regex.Match(subjectString, @"\d+").Value;
Dim TestMe = CInt(Val(New Text.StringBuilder((From ch In "123abc123".ToCharArray Where IsNumeric(ch)).ToArray).ToString))
string str = “123a123”; for(int i=0;i<str.length()-1;i++) { if(int.TryParse(str[i], out nval)) continue; else str=str.Rremove(i,i+1); }
"qwert" + "yuiop" + "asdf" + "gh" + "jkl;" + "zxcv" + "bnm" + ",."
String.Concat("qwert", "yuiop", "asdf", "gh", "jkl;", "zxcv", "bnm", ",.");
Sub F1(s as String) Sub F1(n as Integer) Overloads Sub F2(s as String) Overloads Sub F2(n as Integer) Overloads Sub F3(s as String) Sub F3(n as Integer)
Class Foo Public Sub DoSomething(ByVal text As String) Console.WriteLine("Foo did: " + text) End Sub End Class Class SonOfFoo Inherits Foo Public Sub DoSomething(ByVal number As Integer) Console.WriteLine("SonOfFoo did: " + number.ToString()) End Sub End Class Class Bar Public Sub DoSomething(ByVal text As String) Console.WriteLine("Bar did: " + text) End Sub End Class Class SonOfBar Inherits Bar Public Overloads Sub DoSomething(ByVal number As Integer) Console.WriteLine("SonOfBar did: " + number.ToString()) End Sub End Class Sub Main() Dim fooInstance As Foo = New SonOfFoo() fooInstance.DoSomething("I fooInstance.DoSomething(123) Dim barInstance As Bar = New SonOfBar() barInstance.DoSomething("I barInstance.DoSomething(123) Dim sonOfFooInstance As New SonOfFoo() sonOfFooInstance.DoSomething("I sonOfFooInstance.DoSomething(123) Dim sonOfBarInstance As New SonOfBar() sonOfBarInstance.DoSomething("I sonOfBarInstance.DoSomething(123) End Sub
Public Overrides Function Equals(ByVal obj As Object) As Boolean ...
Public Function Equals(ByVal otherProduct As Product) As Boolean ...
Public Class DataManager Public MustOverride Function LoadDataSet(ByVal TableName as String, ByVal SQL as SQLObject) as DataSet Public Function LoadDataSet(ByVal TableName as String, ByVal SQL as String) as DataSet Return LoadDataSet(TableName, new SQLObject(SQL)) End Function End Class Public Class OracleDataManager Inherits DataManager Public Overloads Overrides Function LoadDataSet(ByVal TableName as String, ByVal SQLObj as SQLObject) as DataSet End Function End Class
<DebuggerHidden> _ <System.Runtime.CompilerServices.Extension> _ Public Function toWfpPoint(p As System.Drawing.Point) As Point Return new Point(p.X, p.Y) End Function
Dim MousPos As Point = System.Windows.Forms.Control.MousePosition.toWfpPoint
Public Sub New(ByVal argA As Object, ByVal argB As Object, ByVal mode As FormMode) InitializeComponent() ' End Sub
Private Sub frmInstrumentEditor_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load If Not argA Is Nothing Then End If End Sub
Private Sub frmScheduleInquiry_FormClosed(sender As Object, e As System.Windows.Forms.FormClosedEventArgs) Handles Me.FormClosed Me.Dispose() End Sub
Private Sub frmInstrumentEditor_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load If Not argA Is Nothing Then Else MessageBox.Show("argA has not been set") End If End Sub
Dim xVersion As Version = ApplicationDeployment.CurrentDeployment.CurrentVersion sysVersion = String.Format("{0}.{1}{2}.{3}", xVersion.Major, xVersion.Minor, xVersion.Build, xVersion.Revision)
sysVersion = "[Debug mode]" Dim xVersion As Version = ApplicationDeployment.CurrentDeployment.CurrentVersion sysVersion = String.Format("{0}.{1}{2}.{3}", xVersion.Major, xVersion.Minor, xVersion.Build, xVersion.Revision)
<startup useLegacyV2RuntimeActivationPolicy="true"> <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0"/> </startup>
UltraPictureBox1.Image = my.Resources.zoo_picture_1 UltraPictureBox1.Image = ???
UltraPictureBox1.Image = _ My.Resources.ResourceManager.GetObject(object_name_as_string)
PictureBoxName.Image = My.Resources.ResourceManager.GetObject("object_name")
Dim resources As Object = My.Resources.ResourceManager PictureBoxName.Image = resources.GetObject("Company_Logo")
{ "Venue": { "ID": 3145, "Name": "Big Venue, Clapton", "NameWithTown": "Big Venue, Clapton, London", "NameWithDestination": "Big Venue, Clapton, London", "ListingType": "A", "Address": { "Address1": "Clapton Raod", "Address2": "", "Town": "Clapton", "County": "Greater London", "Postcode": "PO1 1ST", "Country": "United Kingdom", "Region": "Europe" }, "ResponseStatus": { "ErrorCode": "200", "Message": "OK" } } }
Imports Newtonsoft.Json Public Class Form1 Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click Dim obj As JSON_result obj = JsonConvert.DeserializeObject(Of JSON_result)(Me.TextBox1.Text) MsgBox(obj.ID) End Sub End Class Public Class JSON_result Public ID As Integer Public Name As String Public NameWithTown As String Public NameWithDestination As String Public ListingType As String End Class
Public Class Container Public Venue As JSON_result End Class Public Class JSON_result Public ID As Integer Public Name As String Public NameWithTown As String Public NameWithDestination As String Public ListingType As String End Class Dim obj = JsonConvert.DeserializeObject(Of Container)(...your_json...)
{ "ID": 3145, "Name": "Big Venue, Clapton", "NameWithTown": "Big Venue, Clapton, London", "NameWithDestination": "Big Venue, Clapton, London", "ListingType": "A", "Address": { "Address1": "Clapton Raod", "Address2": "", "Town": "Clapton", "County": "Greater London", "Postcode": "PO1 1ST", "Country": "United Kingdom", "Region": "Europe" }, "ResponseStatus": { "ErrorCode": "200", "Message": "OK" } }
Imports Newtonsoft.Json.Linq Dim json As JObject = JObject.Parse(Me.TextBox1.Text) MsgBox(json.SelectToken("Venue").SelectToken("ID"))
public partial class TextBox : System.Windows.Forms.TextBox { private ManualResetEvent _delayMSE; public event EventHandler OnUserStopTyping; private delegate bool TestTimeout(); public TextBox() { _delayMSE = new ManualResetEvent(false); this.TextChanged += new EventHandler(TextBox_TextChanged); } void TextBox_TextChanged(object sender, EventArgs e) { _delayMSE.Set(); Thread.Sleep(20); _delayMSE.Reset(); TestTimeout tester = new TestTimeout(TBDelay); tester.BeginInvoke(new AsyncCallback(Test), tester); } private void Test(IAsyncResult pResult) { bool timedOut = (bool)((TestTimeout)pResult.AsyncState).EndInvoke(pResult); if (timedOut) { if (OnUserStopTyping != null) OnUserStopTyping(this, null); } } private bool TBDelay() { return !_delayMSE.WaitOne(500, false); } }
private ManualResetEvent _delayMSE; private Func<bool> TBDelay; private delegate void ActionToRunWhenUserStopstyping(); public Form1() { InitializeComponent(); _delayMSE = new ManualResetEvent(false); TBDelay = () => !_delayMSE.WaitOne(1500, false); } private void textBox1_TextChanged(object sender, EventArgs e) { _delayMSE.Set(); Thread.Sleep(20); _delayMSE.Reset(); TBDelay.BeginInvoke(res => { bool timedOut = TBDelay.EndInvoke(res); if (timedOut) Dispatcher.CurrentDispatcher.Invoke( new ActionToRunWhenUserStopstyping(DoWhatEverYouNeed), DispatcherPriority.Input); }, null); } private void DoWhatEverYouNeed() { MessageBox.Show(textBox1.Text); }
private ManualResetEvent _delayMSE; private Func<bool> TBDelay = () => !_delayMSE.WaitOne(600, false); private void TextBox_TextChanged(object sender, TextChangedEventArgs e) { SendOrPostCallback ActionToRunWhenUserStopsTyping = o => { }; _delayMSE.Set(); Thread.Sleep(0); _delaySearchMSE.Reset(); TBDelay.BeginInvoke(res => { bool timedOut = TBDelay.EndInvoke(res); if (timedOut) Dispatcher.Invoke(DispatcherPriority.Input, ActionToRunWhenUserStopstyping,null); }, null); }
Timer1.start() if Tawal <2 then T awal =0 if Tawal >3 then Call FillGrid Timer1.stop() end if
<c:\Documents and Settings>\<username>\[LocalSettings\]ApplicationData\<companyname>\<appdomainname>_<eid>_<hash>\<verison>.
Dim config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.PerUserRoamingAndLocal) MessageBox.Show(config.FilePath)
Public Enum TestEnum As int32 First = 0 Second = 2 Third = 4 Fourth = 6 End Enum
Public Class Form1 Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click Dim Enum1 As TestEnum Dim Members() As String Members = System.Enum.GetNames(CType(Enum1, System.Enum)) End Sub End Class
Public Class Form1 Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click Dim Members() As String Members = System.Enum.GetNames(GetType(TestEnum)) MessageBox.Show(Join(Members, Chr(13) & Chr(10))) End Sub End Class
Public Enum TestEnum As int32 First = 0 Second = 2 Third = 4 Fourth = 6 End Enum For Each tstEnum As TestEnum In System.Enum.GetValues(GetType(TestEnum)) Response.Write( String.Format("Name: {0} Value: {1}", tstEnum.ToString, CInt(tstEnum).ToString ) ) Next
Module Module1 Sub Main() For Each tstEnum As TestEnum In System.Enum.GetValues(GetType(TestEnum)) Console.WriteLine($"Name: {tstEnum.ToString}, Value: {CType(tstEnum, Integer)}") Next Console.WriteLine(Environment.NewLine) For Each tstEnum As TestEnum In GetType(TestEnum).GetEnumValues Console.WriteLine($"Name: {tstEnum.ToString}, Value: {CType(tstEnum, Integer)}") Next Console.ReadKey() End Sub Public Enum TestEnum First = 1 Second = 2 Third = 3 End Enum End Module
Name: First, Value: 1 Name: Second, Value: 2 Name: Third, Value: 3 Name: First, Value: 1 Name: Second, Value: 2 Name: Third, Value: 3
Dim aNewString$ = name.Replace(ControlChars.DblQuote, "")
Dim GetDate31 As String = Date31(16).Replace(Chr(34), "")
Dim path As String = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) & "\YOURPATH" System.IO.Directory.Delete(path, True)
System.IO.Directory.GetDirectories("C:\\Program Files\\Your Directory\\*.*"); System.IO.Directory.GetFiles("C:\\Program Files\\Your Directory\\*.*");
Dim di As New IO.DirectoryInfo(path) di.Delete(True)
Dim path As String = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) & "\YOURPATH" System.IO.Directory.Delete(path, True)
Dim MyButton as New Button() MyButton.Name = "MyButton"
Private Sub MyButton_Click(ByVal sender as system.object, ByVal e As System.EventArgs) Handles....
Dim MyButton as New Button() MyButton.Name = "MyButton" AddHandler MyButton.Click, AddressOf MyButton_Click
Dim MyButton as New Button() MyButton.Name = "MyButton" AddHandler MyButton.Click, Sub(sender2, eventargs2) End Sub
Class Button Public Overridable Sub Paint() End Sub End Class Class ButtonWithFancyBanner Inherits Button Public Overrides Sub Paint() MyBase.Paint() End Sub End Class
Class Base Public Overridable Sub PrintName() Console.WriteLine("I’m Base") End Sub Public Sub ReallyPrintMyName() MyClass.PrintName() End Sub End Class Class Derived Inherits Base Public Overrides Sub PrintName() Console.WriteLine("I’m Derived") End Sub End Class Dim b As Base = New Derived() b.PrintName() b.ReallyPrintMyName()
Dim t As List(Of MyType) t = GetMyTypes() t = t.Where(AccountNumber = "123")
Dim t As List(Of MyType) t = GetMyTypes() Dim result = t.Where(Function(x) x.AccountNumber = "123")
Dim result = From t In GetMyTypes() Where t.AccountNumber = "123"
Dim doc As New HtmlDocument() doc.Load(Server.MapPath("Template.htm")) Dim title As HtmlNode = doc.DocumentNode.SelectSingleNode(" title.InnerHtml = title.InnerHtml & "CEU Classes" Dim topContent As HtmlAgilityPack.HtmlNode = doc.GetElementbyId("topContent") topContent.InnerHtml = html.ToString doc.OptionWriteEmptyNodes = True doc.Save(outputFileName, Encoding.UTF8)
Dim html As String = "Words<br/>more words" Dim doc As New HtmlDocument() Dim title As HtmlNode Dim topContent As HtmlNode HtmlNode.ElementsFlags("br") = HtmlElementFlag.Empty doc.Load(Server.MapPath("Template.htm")) Title = doc.DocumentNode.SelectSingleNode(" title.InnerHtml = title.InnerHtml & "CEU Classes" topContent = doc.GetElementbyId("topContent") topContent.InnerHtml = html.ToString doc.OptionWriteEmptyNodes = True doc.Save(outputFileName, Encoding.UTF8)
Dim TemplateHTML As String = File.ReadAllText(Server.MapPath("Template.htm")) TemplateHTML = TemplateHTML.Insert(TemplateHTML.IndexOf("<div id=""topContent"">") + "<div id=""topContent"">".Length, _ html.ToString) doc.LoadHtml(TemplateHTML)
Dim doc As New HtmlDocument() HtmlNode.ElementsFlags("br") = HtmlElementFlag.Empty doc.LoadHtml("<test>before<br/>after</test>") doc.OptionWriteEmptyNodes = True doc.Save(Console.Out)
var doc = new HtmlDocument(); HtmlNode.ElementsFlags["br"] = HtmlElementFlag.Empty; doc.OptionWriteEmptyNodes = true; doc.LoadHtml("Lorem ipsum dolor sit<br/>Lorem ipsum dolor sit"); var postParsed = doc.DocumentNode.WriteTo();
HtmlDocument doc = new HtmlDocument(); doc.OptionWriteEmptyNodes = true; doc.LoadHtml(content);
if (HtmlNode.ElementsFlags.ContainsKey("img")) { HtmlNode.ElementsFlags["img"] = HtmlElementFlag.Closed; } else { HtmlNode.ElementsFlags.Add("img", HtmlElementFlag.Closed); }
Imports mshtml Function parseMyHtml(ByVal htmlToParse$) As String Dim htmlDocument As IHTMLDocument2 = New HTMLDocumentClass() htmlDocument.write(htmlToParse) htmlDocument.close() Dim allElements As IHTMLElementCollection = htmlDocument.body.all Dim allInputs As IHTMLElementCollection = allElements.tags("a") Dim element As IHTMLElement For Each element In allInputs element.title = element.innerText Next Return htmlDocument.body.innerHTML End Function
chart.ChartAreas(0).AxisY.Maximum = 6 chart.ChartAreas(0).AxisY.Minimum = 1 chart.ChartAreas(0).AxisX.LabelStyle.Angle = -90 chart.Series.Clear() chart.ChartAreas(0).AxisY.StripLines.Clear() Dim myStripLine1 as new StripLine() myStripLine1.IntervalOffset = 4 chart.ChartAreas(0).AxisY.StripLines.add(myStripLine1) chart.Series.Add("Chemie") chart.Series(chart.Series.Count - 1).ChartType = DataVisualization.Charting.SeriesChartType.Line chart.Series(chart.Series.Count - 1).BorderWidth = 4 chart.Series(chart.Series.Count - 1).Points.AddXY("01.03.2011", 4.9)
Dim subjects As New Dictionary(Of Integer, ArrayList) Dim allgrades As New ArrayList For Each grade In MainForm.grades Dim cD As New Dictionary(Of String, String) cD.Add("SUBJECTID", grade.Value("SUBJECTID")) cD.Add("GRADE", grade.Value("GRADE")) cD.Add("DATE", grade.Value("DATE")) allgrades.Add(cD) Next cht_main.ChartAreas(0).AxisX.IntervalType = DateTimeIntervalType.Days cht_main.ChartAreas(0).AxisX.LabelStyle.Angle = -90 Dim gradesDateSorter = New gradesDateSorter() allgrades.Sort(gradesDateSorter) For Each grade In allgrades If Not subjects.ContainsKey(Integer.Parse(grade("SUBJECTID"))) Then subjects.Add(Integer.Parse(grade("SUBJECTID")), New ArrayList) End If Dim gradeDict As New Dictionary(Of String, String) gradeDict.Add("DATE", grade("DATE")) gradeDict.Add("GRADE", grade("GRADE")) subjects(Integer.Parse(grade("SUBJECTID"))).Add(gradeDict) Next For Each subject In subjects cht_main.Series.Add(MainForm.subjects(subject.Key)("NAME")) cht_main.Series(cht_main.Series.Count - 1).ChartType = DataVisualization.Charting.SeriesChartType.Line cht_main.Series(cht_main.Series.Count - 1).BorderWidth = 4 For Each grade In subject.Value cht_main.Series(cht_main.Series.Count - 1).Points.AddXY(Date.Parse(grade("DATE")), Double.Parse(grade("GRADE"))) Next Next
DateTimeIntervalType.Days Public Sub Add( _ labelsStep As Double, _ intervalType As DateTimeIntervalType, _ format As String _ ) End Sub chart.ChartAreas(0).AxisX.IntervalType = DateTimeIntervalType.Days Dim format as String = "MM.dd.yyyy" Dim actualDate as Date = Date.ParseExact(yourDate, format)
Dim dateString, format As String Dim result As Date Dim provider As CultureInfo = CultureInfo.InvariantCulture Parse date and time with custom specifier. dateString = "Sun 15 Jun 2008 8:30 AM -06:00" format = "ddd dd MMM yyyy h:mm tt zzz" result = Date.ParseExact(dateString, format, provider)
Dim date1 As Date = Console.WriteLine(date1.ToString(System.Globalization.CultureInfo.CreateSpecificCulture("fr-FR")))
Imports System.Globalization Dim format as String = "dd.MM.yyyy" Dim actualDate as Date = Date.ParseExact(yourDate, format, provider) chart.ChartAreas(0).AxisX.LabelStyle.Format ="dd.MM.yyyy" cht_main.ChartAreas(0).AxisX.IntervalType = DateTimeIntervalType.Days cht_main.ChartAreas(0).AxisX.Interval = 1
Dim format as String = "MM.dd.yyyy" Dim actualDate as Date = Date.ParseExact(yourDate, format) chart.Series(chart.Series.Count - 1).Points.AddXY(actualDate, 4.9)
chart.ChartAreas(0).AxisX.LabelStyle.Format ="MM.dd.yyyy" chart.ChartAreas(0).AxisX.Interval = 1 chart.ChartAreas(0).AxisX.IntervalType = DateTimeIntervalType.Days
Dim TaskCollection As New List(Of Tasks.Task) For x As Integer = 1 To Threads Dim NewTask As Tasks.Task = TaskHandler.Delegates(DelegateKey).Invoke(Me, Proxies, TotalParams).ContinueWith(Sub() ThreadFinished()) TaskCollection.Add(NewTask) Next Await Tasks.Task.WhenAll(TaskCollection)
Await Tasks.Task.WhenAny(Tasks.Task.WhenAll(TaskCollection), XXX)
<System.Runtime.CompilerServices.Extension> _ Public Shared Function AsTask(cancellationToken As CancellationToken) As Task Dim tcs = New TaskCompletionSource(Of Object)() cancellationToken.Register(Function() tcs.TrySetCanceled(), useSynchronizationContext := False) Return tcs.Task End Function
Await Task.WhenAny(Task.WhenAll(taskCollection), cancellationToken.AsTask())
Dim tcs as new TaskCompletionSource(Of Object)() Await Tasks.Task.WhenAny(Tasks.Task.WhenAll(TaskCollection), tcs)
await Task.Run(()=> Task.WaitAll(myArrayOfTasks), theCancellationToken);
await Task.WhenAny(Task.WhenAll(tasks), Task.Delay(1000));
Dim rdr As SqlDataReader Dim cmdInsert As SqlCommand = New SqlCommand() cmdInsert.CommandText = "spPersonalDetailsInsert" cmdInsert.CommandType = CommandType.StoredProcedure cmdInsert.Connection = connSQL Dim firstname, lastname, address, address1, town, county, postcode As SqlParameter Dim frmFirstName As String If pd_first_name.Text = "" Then frmFirstName = Convert.DBNull Else frmFirstName = pd_first_name.Text End If firstname = New SqlParameter() firstname.ParameterName = "@firstname" firstname.SqlDbType = SqlDbType.NVarChar firstname.Size = 50 firstname.Direction = ParameterDirection.Input firstname.Value = frmFirstName
If pd_first_name.Text = "" Then frmFirstName = DBNull.Value Else frmFirstName = pd_first_name.Text End If
If pd_first_name.Text = "" Then Response.Write("NULL") address1.Value = DBNull.Value Else Response.Write("NOT NULL") address1.Value = pd_address1.Text End If
If String.IsNullOrEmpty(pd_first_name.Text.ToString().Trim) = true Then frmFirstName = DBNull.Value Else frmFirstName = pd_first_name.Text End If
If pd_first_name.Text <> "" Then frmFirstName = pd_first_name.Text firstname = New SqlParameter() firstname.ParameterName = "@firstname" firstname.SqlDbType = SqlDbType.NVarChar firstname.Size = 50 firstname.Direction = ParameterDirection.Input firstname.Value = frmFirstName End If
If String.IsNullOrEmpty(pd_first_name.Text) = True Then frmFirstName = Nothing Else frmFirstName = pd_first_name.Text End If
Dim rdr As SqlDataReader Dim cmdInsert As SqlCommand = New SqlCommand() cmdInsert.CommandText = "spPersonalDetailsInsert" cmdInsert.CommandType = CommandType.StoredProcedure cmdInsert.Connection = connSQL Dim firstname, lastname, address, address1, town, county, postcode As SqlParameter Dim frmFirstName As String firstname = New SqlParameter() firstname.ParameterName = "@firstname" firstname.SqlDbType = SqlDbType.NVarChar firstname.Size = 50 firstname.Direction = ParameterDirection.Input If pd_first_name.Text = "" Then firstname.Value = DBNull.Value Else firstname.Value = frmFirstName End If
Dim TempStr As String TempStr= "spPersonalDetailsInsert" TempStr = TempStr.Replace(" cmdInsert.CommandText = TempStr
If pd_first_name.Text = "" Then Response.Write("NULL") address1.Value = DBNull.Value Else Response.Write("NOT NULL") address1.Value = pd_address1.Text End If
CREATE PROCEDURE [dbo].[USP_TDS_SaveRecod] @ID INT, @CODE INT, @FIRSTNAME VARCHAR(8)=NULL, @CITY VARCHAR(15)=NULL AS BEGIN ......................... ......................... ......................... END
cmd.Parameters.Add("@ID", SqlDbType.Int).Value = obj.ID; cmd.Parameters.Add("@CODE", SqlDbType.Int).Value = obj.CODE; if(pd_first_name.Text != "") { cmd.Parameters.Add("@FIRSTNAME", SqlDbType.VarChar).Value = pd_first_name.Text; } if(city.Text != "") { cmd.Parameters.Add("@CITY", SqlDbType.VarChar).Value = pd_first_name.Text; }
If RdFree.Checked = True Then Dim nu As String = "NULL" UpdPolicys.Append(", AccIDFree = " & nu & " , AccTypeIDFree = " & nu & " ") End If
ServicePointManager.ServerCertificateValidationCallback = Function(obj As [Object], certificate As X509Certificate, chain As X509Chain, errors As SslPolicyErrors) (certificate.Subject.Contains("CN=MyTrustedCompany.com"))
ServicePointManager.ServerCertificateValidationCallback = Nothing
ServicePointManager.ServerCertificateValidationCallback = Nothing
private System.Net.Security.RemoteCertificateValidationCallback mIgnoreBadCertificates = new System.Net.Security.RemoteCertificateValidationCallback( delegate { return true; }); if (beSecure) { System.Net.ServicePointManager.ServerCertificateValidationCallback -= mIgnoreBadCertificates; Iwds.EventLogger.LogVeryFrequentEvent("Requiring Good Certificates from Remote Sites"); } else { System.Net.ServicePointManager.ServerCertificateValidationCallback += mIgnoreBadCertificates; Iwds.EventLogger.LogVeryFrequentEvent("Ignoring Bad Certificates from Remote Sites"); }
request = (FtpWebRequest)FtpWebRequest.Create("ftp: using(var validator = new WebRequestCertificateValidator(request)) { } public sealed class WebRequestCertificateValidator : IDisposable { private bool disposed; private WebRequest request; private RemoteCertificateValidationCallback callback; public WebRequestCertificateValidator(WebRequest request) : this(request, null) { // } public WebRequestCertificateValidator(WebRequest request, RemoteCertificateValidationCallback callback) { this.disposed = false; this.request = request; this.callback = callback; ServicePointManager.ServerCertificateValidationCallback += this.InternalCallback; } private bool InternalCallback(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { WebRequest request = sender as WebRequest; if(request != null) { if(request == this.request) { if(this.callback != null) { return this.callback(sender, certificate, chain, sslPolicyErrors); } } } return true; } public void Dispose() { if(!this.disposed) { ServicePointManager.ServerCertificateValidationCallback -= this.InternalCallback; this.callback = null; this.request = null; this.disposed = true; } } }
public class OAuthRequestHandler : WebRequestHandler { public OAuthRequestHandler() : base() { base.ServerCertificateValidationCallback += this.InternalCallback; } private bool InternalCallback(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { return certificate.Subject.Contains("CN=MyTrustedCompany.com"); } }
HttpClient client = new HttpClient(new OAuthRequestHandler()); responseString = await client.GetStringAsync("https:
Dim foo As Boolean = True While Not foo Debug.WriteLine("!") End While Do While Not foo Debug.WriteLine("*") Loop
Dim foo As Boolean = True While Not foo Debug.WriteLine("!") End While Do Debug.WriteLine("*") Loop While Not foo
Dim str = "hello" Dim str = “hello” Dim str = "hello“
Dim origString As String = "This string uses ""quotes"" around a word." Dim newString As String = origString.Replace("""", ChrW(8220)) MessageBox.Show(newString)
Dim origString As String = "This string uses fancy " & ChrW(8220) & _ "quotes" & ChrW(8220) & " around a word." Dim newString As String = origString.Replace(ChrW(8220), "& MessageBox.Show(newString)
Option Explicit On Option Strict Off Option Infer On Partial Public Class ClassX Public Sub TestDynamic() Dim dyn As Object = New System.Dynamic.ExpandoObject() Dim a As String = 1 Dim obj As Object = "999" dyn.Str = a Console.WriteLine("dyn.Str = {0} : Type = {1}", dyn.Str, dyn.Str.GetType().ToString()) dyn.Num = 123 Console.WriteLine("dyn.Num = {0} : Type = {1}", dyn.Num, dyn.Num.GetType().ToString()) dyn.Dbl = obj / 9 Console.WriteLine("dyn.Dbl = {0} : Type = {1}", dyn.Dbl, dyn.Dbl.GetType().ToString()) dyn.Obj = obj Console.WriteLine("dyn.Obj = {0} : Type = {1}", dyn.Obj, dyn.Obj.GetType().ToString()) dyn.Dte = Console.WriteLine("dyn.Dte = {0} : Type = {1}", dyn.Dte, dyn.Dte.GetType().ToString()) AmICalled(dyn.Num) AmICalled(dyn.Obj) AmICalled(dyn.Str) AmICalled(dyn.Dbl) Try AmICalled(dyn.Dte) Catch Console.WriteLine("Dates don End Try Console.WriteLine(dyn.Num + dyn.Str) Console.WriteLine(dyn.Num & dyn.Str) End Sub Private Sub AmICalled(ByVal i As Integer) Console.WriteLine("AmICalled was called with: " & i) End Sub End Class
Partial Public Class ClassX Public Sub TestDynamic() Dim dyn As Object = New System.Dynamic.ExpandoObject() Dim a As String = "1" Dim obj As Object = "999" CallByName(dyn, "Str", CallType.Set, a) Console.WriteLine("dyn.Str = {0} : Type = {1}", CallByName(dyn, "Str", CallType.Get, a), CallByName(dyn, "Str", CallType.Get, a).GetType().ToString() )
Dim nodes As List(Of String) For Each childNodeLevel1 As TreeNode In parentNode.Nodes For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes For Each childNodeLevel3 As TreeNode In childNodeLevel2.Nodes nodes.Add(childNodeLevel3.Text) Next Next Next
Function GetChildren(parentNode as TreeNode) as List(Of String) Dim nodes as List(Of String) = New List(Of String) GetAllChildren(parentNode, nodes) return nodes End Function Sub GetAllChildren(parentNode as TreeNode, nodes as List(Of String)) For Each childNode as TreeNode in parentNode.Nodes nodes.Add(childNode.Text) GetAllChildren(childNode, nodes) Next End Sub
function outputNodes(Node root) writeln(root.Text) foreach(Node n in root.ChildNodes) outputNodes(n) end end
List< TreeNode > nodes = TreeViewUtils.FlattenDepth(tree);
public static IEnumerable<TreeNode> DescendantNodes( this TreeNode input ) { foreach ( TreeNode node in input.Nodes ) { yield return node; foreach ( var subnode in node.DescendantNodes() ) yield return subnode; } }
Dim FlattenedNodes As List(Of TreeNode) = clTreeUtil.FlattenDepth(Me.TreeView1)
Public Class clTreeUtil Public Shared Function FlattenBreath(Tree As TreeView) As List(Of TreeNode) Dim nodes As List(Of TreeNode) = New List(Of TreeNode) Dim queue As Queue(Of TreeNode) = New Queue(Of TreeNode) For Each top As TreeNode In Tree.Nodes queue.Enqueue(top) Next While (queue.Count > 0) Dim node As TreeNode = queue.Dequeue() If node IsNot Nothing Then nodes.Add(node) If node.Nodes IsNot Nothing And node.Nodes.Count > 0 Then For Each child As TreeNode In node.Nodes queue.Enqueue(child) Next End If End If End While Return nodes End Function Public Shared Function FlattenDepth(tree As TreeView) As List(Of TreeNode) Dim nodes As List(Of TreeNode) = New List(Of TreeNode) Dim stack As Stack(Of TreeNode) = New Stack(Of TreeNode) For Each top As TreeNode In tree.Nodes stack.Push(top) Next While (stack.Count > 0) Dim node As TreeNode = stack.Pop() If node IsNot Nothing Then nodes.Add(node) If node.Nodes IsNot Nothing And node.Nodes.Count > 0 Then For Each child As TreeNode In node.Nodes stack.Push(child) Next End If End If End While Return nodes End Function End Class
Public Function FlattenBreadth(ByVal tree As TreeView) As List(Of TreeNode) Dim nodes As New List(Of TreeNode) Dim queue As New Queue(Of TreeNode) Dim top As TreeNode Dim nod As TreeNode For Each top In tree.Nodes queue.Enqueue(top) Next While (queue.Count > 0) top = queue.Dequeue nodes.Add(top) For Each nod In top.Nodes queue.Enqueue(nod) Next End While FlattenBreadth = nodes End Function
nodParent As TreeNode tvwOpt.Nodes.Find(nodParent.Name, True)
Public Shared Function GetChildren(objTree As TreeView) As List(Of TreeNode) Dim nodes As List(Of TreeNode) = New List(Of TreeNode) For Each parentNode As TreeNode In objTree.Nodes nodes.Add(parentNode) GetAllChildren(parentNode, nodes) Next Return nodes End Function Public Shared Sub GetAllChildren(parentNode As TreeNode, nodes As List(Of TreeNode)) For Each childNode As TreeNode In parentNode.Nodes nodes.Add(childNode) GetAllChildren(childNode, nodes) Next End Sub
"Lorem ipsum dolor sit amet, consectetur adipiscing elit" .Split() .Where(x => x != string.Empty)
using System; using System.Linq; using System.Diagnostics; using System.Text.RegularExpressions; using System.Windows.Forms; namespace ConsoleApplication1 { class Program { public enum TestMethods {regex, split}; [STAThread] static void Main(string[] args) { TestMethods TestMethod = TestMethods.split; String RepetitionString = string.Join(" \t", Enumerable.Repeat("A",100)); int RepCountInitial = 100;int RepCountMax = 1000 * 100; Func<int, int> Step = x => (int)Math.Round(x / 5.0, 0); Func<double, int> ExecutionCount = x => (int)(1 + Math.Round(500.0 / (x + 1), 0)); string s; string Results = ""; string ResultInfo; double ResultTime = 1; for (int RepCount = RepCountInitial; RepCount < RepCountMax; RepCount += Step(RepCount)) { s = string.Join("", Enumerable.Repeat(RepetitionString, RepCount)); ResultTime = Test(s, ExecutionCount(ResultTime), TestMethod); ResultInfo = ResultTime.ToString() + "\t" + RepCount.ToString() + "\t" + ExecutionCount(ResultTime).ToString() + "\t" + TestMethod.ToString(); Console.WriteLine(ResultInfo); Results += ResultInfo + "\r\n"; } Clipboard.SetText(Results); } public static double Test(string s, int iMax, TestMethods Method) { switch (Method) { case TestMethods.regex: return Math.Round(RegexRunTime(s, iMax),2); case TestMethods.split: return Math.Round(SplitRunTime(s, iMax),2); default: return -1; } } private static double RegexRunTime(string s, int iMax) { Stopwatch sw = new Stopwatch(); sw.Restart(); for (int i = 0; i < iMax; i++) { System.Collections.Generic.IEnumerable<string> ens = Regex.Split(s, @"\s+"); } sw.Stop(); return Math.Round(sw.ElapsedMilliseconds / (double)iMax, 2); } private static double SplitRunTime(string s,int iMax) { Stopwatch sw = new Stopwatch(); sw.Restart(); for (int i = 0; i < iMax; i++) { System.Collections.Generic.IEnumerable<string> ens = s.Split().Where(x => x != string.Empty); } sw.Stop(); return Math.Round(sw.ElapsedMilliseconds / (double)iMax, 2); } } }
.Split().Where(Function(x) x <> String.Empty).ToList.ToArray
Dim words As String = "This is a list of words, with: a bit of punctuation" + _ vbTab + "and a tab character." + vbNewLine Dim split As String() = words.Split(New [Char]() {" "c, CChar(vbTab), CChar(vbNewLine) })
Dim sdate As String Dim expenddt As Date expenddt = Date.Parse(edate) expenddt = expenddt.AddDays(-1)
Dim edate = "10/12/2009" Dim expenddt As Date = Date.ParseExact(edate, "dd/MM/yyyy", System.Globalization.DateTimeFormatInfo.InvariantInfo)
Dim format() = {"dd/MM/yyyy", "d/M/yyyy", "dd-MM-yyyy"} Dim expenddt As Date = Date.ParseExact(edate, format, System.Globalization.DateTimeFormatInfo.InvariantInfo, Globalization.DateTimeStyles.None)
Dim format() = {"dd/MM/yyyy", "d/M/yyyy", "dd-MM-yyyy"} Dim expenddt As Date Date.TryParseExact(edate, format, System.Globalization.DateTimeFormatInfo.InvariantInfo, Globalization.DateTimeStyles.None, expenddt)
Dim expenddt as Date = Date.ParseExact(edate, "dd/mm/yyyy", System.Globalization.DateTimeFormatInfo.InvariantInfo);
string iDate = "05/05/2005"; DateTime oDate = Convert.ToDateTime(iDate); MessageBox.Show(oDate.Day + " " + oDate.Month + " " + oDate.Year );
Dim iDate As String = "05/05/2005" Dim oDate As DateTime = Convert.ToDateTime(iDate)
For Each item As Host In hostCollection1 hostCollection2.Add(item) Next
List<string> list1 = new List<string>(); list1.Add("Hello"); List<string> list2 = new List<string>(list1);
Dim collection As IEnumerable(Of T) Dim instance As New List(collection)
Dim list = GetSomeList() Dim sorted = list. _ OrderBy(Function(x) x.Popular). _ ThenBy(Function(x) x.Clicked). _ ThenBy(Function(x) x.Name)
var list = GetSomeList(); var sorted = list.OrderBy(x => x.Popular).ThenBy(x => x.Clicked).ThenBy(x => x.Name);
Private Function Comparer(ByVal x As Product, ByVal y As Product) As Integer Dim result As Integer = x.Popular.CompareTo(y.Popular) If result = 0 Then result = x.Clicked.CompareTo(y.Clicked) If result = 0 Then result = x.Name.CompareTo(y.Name) End If End If Return result End Function
List<Product> sortedProducts = null; sortedProducts = products.OrderBy(p => p.Popular) .ThenByDescending(p => p.Clicked) .ThenBy(p => p.Name) .ToList();
products.OrderBy(p => p.Popular). ThenByDescending(p => p.Clicked). ThenBy(p => p.Name);
Dim Conts As List(of clsContact) Conts.Sort(Function(C1 As clsContact, C2 As clsContact) Dim CompRes As Integer = C1.Contact_LastName.CompareTo(C2.Contact_LastName) If CompRes = 0 Then CompRes = C1.Contact_FirstName.CompareTo(C2.Contact_FirstName) End If Return CompRes End Function)
Dim bmi As New BitmapImage(New Uri(fiInfo.FullName, UriKind.Absolute)) bmi.CacheOption = BitmapCacheOption.OnLoad
Dim bmi As New BitmapImage() bmi.BeginInit() bmi.CacheOption = BitmapCacheOption.OnLoad bmi.UriSource = New Uri(fiInfo.FullName, UriKind.Absolute) bmi.EndInit()
MemoryStream ms = new MemoryStream(); BitmapImage bi = new BitmapImage(); byte[] bytArray = File.ReadAllBytes(@"test.jpg"); ms.Write(bytArray, 0, bytArray.Length);ms.Position = 0; bi.BeginInit(); bi.StreamSource = ms; bi.EndInit(); image.Source = bi;
public static BitmapImage BitmapFromUri(Uri source) { var bitmap = new BitmapImage(); bitmap.BeginInit(); bitmap.UriSource = source; bitmap.CacheOption = BitmapCacheOption.OnLoad; bitmap.EndInit(); return bitmap; }
BitmapImage bimg = BitmapFromUri(new Uri(some_URI));
BitmapFrame.Create(new Uri(filePath), BitmapCreateOptions.None, BitmapCacheOption.OnLoad);
Public Shared Function GetRecord(ByVal Key As String) As Record Dim Sql As New StringBuilder() With Sql .Append("SELECT * FROM TableName") If String.IsNullOrEmpty(Agency) Then .Append(" ORDER BY DateAdded") Else .Append(" WHERE Key = .Append(PrepareString(Key)) .Append(" End If End With Return ExecuteQuery(Sql.ToString()) End Function Public Shared Function PrepareString(ByVal Value As String) As String Return Value.Replace(" .Replace(" .Replace("`", " .Replace("´", " .Replace("--", "") End Function
Public Class Form1 Dim Hours, Minutes, Seconds As Integer Private Sub btnReset_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnReset.Click lblHours.Text = "00" lblMinutes.Text = "00" lblSeconds.Text = "00" txtTimeSeconds.Text = "" txtFormattedTime.Text = "" End Sub Private Sub btnCalculate_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCalculate1.Click Seconds = Integer.Parse(txtTimeSeconds.Text) Hours = Seconds / 3600 Seconds = Seconds Mod 3600 Minutes = Seconds / 60 Seconds = Seconds Mod 60 lblHours.Text = Hours.ToString.PadLeft(2, "0"c) lblMinutes.Text = Minutes.ToString.PadLeft(2, "0"c) lblSeconds.Text = Seconds.ToString.PadLeft(2, "0"c) txtFormattedTime.Text = Hours.ToString.PadLeft(2, "0"c) & ":" & Minutes.ToString.PadLeft(2, "0"c) & ":" & Seconds.ToString.PadLeft(2, "0"c) End Sub End Class
dim iSecond as double = 0 Dim iSpan As TimeSpan = TimeSpan.FromSeconds(iSecond) lblHours.Text = iSpan.Hours.ToString.PadLeft(2, "0"c) lblMinutes.Text = iSpan.Minutes.ToString.PadLeft(2, "0"c) lblSeconds.Text = iSpan.Seconds.ToString.PadLeft(2, "0"c) txtFormattedTime.Text = iSpan.Hours.ToString.PadLeft(2, "0"c) & ":" & _ iSpan.Minutes.ToString.PadLeft(2, "0"c) & ":" & _ iSpan.Seconds.ToString.PadLeft(2, "0"c)
Dim ts As TimeSpan = TimeSpan.FromSeconds(227) Dim mydate As DateTime = New DateTime(ts.Ticks) MessageBox.Show(mydate.ToString(("HH:mm:ss")))
Dim SecondsDifference as integer = 2500 Dim hms = TimeSpan.FromSeconds(SecondsDifference) Dim h = hms.Hours.ToString Dim m = hms.Minutes.ToString Dim s = hms.Seconds.ToString MsgBox("Hour:" + h + " Min:" + m + " Sec:" + s)
Public Class Form1 Private Sub btnReset_Click(sender As Object, e As EventArgs) Handles btnReset.Click lblHours.Text = "00" lblMinutes.Text = "00" lblSeconds.Text = "00" txtTimeSeconds.Text = "" txtFormattedTime.Text = "" End Sub Private Sub btnCalculate_Click(sender As Object, e As EventArgs) Handles btnCalculate.Click Dim tsSeconds = TimeSpan.FromSeconds(Convert.ToDouble(txtTimeSeconds.Text)) lblHours.Text = tsSeconds.ToString("hh") lblMinutes.Text = tsSeconds.ToString("mm") lblSeconds.Text = tsSeconds.ToString("ss") txtFormattedTime.Text = tsSeconds.ToString("hh\:mm\:ss") End Sub End Class
public static string GetIp() { var Request = HttpContext.Current.Request; try { Console.WriteLine(string.Join("|", new List<object> { Request.UserHostAddress, Request.Headers["X-Forwarded-For"], Request.Headers["REMOTE_ADDR"] }) ); var ip = Request.UserHostAddress; if (Request.Headers["X-Forwarded-For"] != null) { ip = Request.Headers["X-Forwarded-For"]; Console.WriteLine(ip + "|X-Forwarded-For"); } else if (Request.Headers["REMOTE_ADDR"] != null) { ip = Request.Headers["REMOTE_ADDR"]; Console.WriteLine(ip + "|REMOTE_ADDR"); } return ip; } catch (Exception ex) { Log.WriteInfo("Message :" + ex.Message + "<br/>" + Environment.NewLine + "StackTrace :" + ex.StackTrace); } return null; }
List<Employee> Employees = new List<Employee>{ new Employee{firstname="Aamir",lastname="Hasan",age=20}, new Employee{firstname="awais",lastname="Hasan",age=50}, new Employee{firstname="Bill",lastname="Hasan",age=70}, new Employee{firstname="sobia",lastname="khan",age=80}, };
Dim Employees as List(Of Employee) = New List(Of Employee)() With { New Employee() With { _ .firstname = "Aamir", _ .lastname = "Hasan", _ .age = 20 _ }, _ New Employee() With { _ .firstname = "awais", _ .lastname = "Hasan", _ .age = 50 _ }, _ New Employee() With { _ .firstname = "Bill", _ .lastname = "Hasan", _ .age = 70 _ }, _ New Employee() With { _ .firstname = "sobia", _ .lastname = "khan", _ .age = 80 _ } _ }
Dim Employees = { New Employee() With { _ .FirstName = "Aamir", _ .LastName = "Hasan", _ .Age = 20}, _ New Employee() With { _ .FirstName = "Awais", _ .LastName = "Hasan", _ .Age = 50}, _ New Employee() With { _ .FirstName = "Bill", _ .LastName = "Hasan", _ .Age = 70 _ } _ }
Dim EmployeesTemp As Employee() = { _ New Employee() With { _ .firstname = "Aamir", _ .lastname = "Hasan", _ .age = 20 _ }, _ New Employee() With { _ .firstname = "awais", _ .lastname = "Hasan", _ .age = 50 _ }, _ New Employee() With { _ .firstname = "Bill", _ .lastname = "Hasan", _ .age = 70 _ }, _ New Employee() With { _ .firstname = "sobia", _ .lastname = "khan", _ .age = 80 _ } _ } Dim Employees as List(Of Employee) = EmployeesTemp.ToList()
Dim Employees as List(Of Employee) = New List(Of Employee)() From { New Employee() With { _ .firstname = "Aamir", _ .lastname = "Hasan", _ .age = 20 _ }, _ New Employee() With { _ .firstname = "awais", _ .lastname = "Hasan", _ .age = 50 _ }, _ New Employee() With { _ .firstname = "Bill", _ .lastname = "Hasan", _ .age = 70 _ }, _ New Employee() With { _ .firstname = "sobia", _ .lastname = "khan", _ .age = 80 _ } _ }
Dim Employees As List(Of Employee) = { _ New Employee() With { .firstname = "Aamir", .lastname = "Hasan", .age = 20 }, _ New Employee() With { .firstname = "awais", .lastname = "Hasan", .age = 50 }, _ New Employee() With { .firstname = "Bill", .lastname = "Hasan", .age = 70 }, _ New Employee() With { .firstname = "sobia", .lastname = "khan", .age = 80 } _ }.ToList()
Dim cxt As New datContext Dim qry = (From lst In cxt.zipcodes _ Select lst.state).Distinct qry = qry.OrderBy()
qry = qry.OrderBy(Function(obj) obj.PropertyToSortBy)
Dim qry = From lst In cxt.zipcodes _ Select lst.state Distinct _ Order By state
Dim cxt As New datContext Dim qry = (From lst In cxt.zipcodes OrderBy lst.state).Distinct.tolist Dim statelst = qry.Select(Function(o) o.state).ToList
<asp:Chart ID="chtNBAChampionships" runat="server"> <Series> <asp:Series Name="Championships" YValueType="Int32" Palette="Berry" ChartType="Column" ChartArea="MainChartArea" IsValueShownAsLabel="true"> <Points> <asp:DataPoint AxisLabel="Celtics" YValues="17" /> <asp:DataPoint AxisLabel="Lakers" YValues="15" /> <asp:DataPoint AxisLabel="Bulls" YValues="6" /> <asp:DataPoint AxisLabel="Spurs" YValues="4" /> <asp:DataPoint AxisLabel="76ers" YValues="3" /> <asp:DataPoint AxisLabel="Pistons" YValues="3" /> <asp:DataPoint AxisLabel="Warriors" YValues="3" /> <asp:DataPoint AxisLabel="Mara" YValues="4" /> <asp:DataPoint AxisLabel="Saza" YValues="9" /> <asp:DataPoint AxisLabel="Buha" YValues="6" /> </Points> </asp:Series> </Series> <ChartAreas> <asp:ChartArea Name="MainChartArea"> </asp:ChartArea> </ChartAreas> </asp:Chart>
Chart2.ChartAreas["ChartArea1"].AxisX.Interval = 1;
<ChartAreas> <asp:ChartArea Name="ChartArea1" > <AxisY Title="Progress->"> </AxisY> <AxisX Interval="1" Title="Activity->"> </AxisX> </asp:ChartArea>
<asp:Chart ID="chtNBAChampionships" runat="server" Width="400px">
<asp:DataPoint AxisLabel="Celtics" YValues="17" Color="Green" />
Button1.click() event Dim name = txtname.Text Dim dt As New DataTable dt.Columns.Add("ID", GetType(Integer)) dt.Columns.Add("Name", GetType(String)) Dim N As Integer = dt.Columns("ID").AutoIncrement dt.Rows.Add(N, name) GridView1.DataSource = dt GridView1.DataBind() txtname.Text = ""
<asp:TextBox ID="txtname" runat="server"> </asp:TextBox><asp:Button ID="Button1" runat="server" Text="Button" /> <asp:GridView ID="GridView1" runat="server"> </asp:GridView>
Dim dt As New DataTable dt.Columns.Add("ID") dt.Columns.Add("Name") dt.Columns(0).AutoIncrement = True
Dim R As DataRow = dt.NewRow R("Name") = txtName.Text dt.Rows.Add(R) DataGridView1.DataSource = dt
Dim dt As New DataTable dt.Columns.Add("ID", Type.GetType("System.String")) dt.Columns.Add("Name",Type.GetType("System.String"))
Dim dr As DataRow = dt.NewRow dr("ID") = System.GUID.NewGUID() dr("Name") = txtName.Text dt.Rows.Add(dr) DataGridView1.DataSource = dt DataGridView1.DataBind()
Dim ShippingMethod() As String = {"Standard Shipping", "Ground EST"} Dim Shipping as String = "Ground EST"
If ShippingMethod.Contains(Shipping, StringComparer.CurrentCultureIgnoreCase) Then End If
Do Until WebBrowser1.ReadyState = WebBrowserReadyState.Complete Application.DoEvents() Loop
whatbrowser.Document.GetElementById("UserName").InnerText = whatusername whatbrowser.Document.GetElementById("Password").InnerText = whatpassword whatbrowser.Document.GetElementById("LoginButton").InvokeMember("click") WaitForPageLoad()
Private Property pageready As Boolean = False Private Sub WaitForPageLoad() AddHandler whatbrowser.DocumentCompleted, New WebBrowserDocumentCompletedEventHandler(AddressOf PageWaiter) While Not pageready Application.DoEvents() End While pageready = False End Sub Private Sub PageWaiter(ByVal sender As Object, ByVal e As WebBrowserDocumentCompletedEventArgs) If whatbrowser.ReadyState = WebBrowserReadyState.Complete Then pageready = True RemoveHandler whatbrowser.DocumentCompleted, New WebBrowserDocumentCompletedEventHandler(AddressOf PageWaiter) End If End Sub
Private Sub WebBrowser1_ProgressChanged(sender As Object, e As WebBrowserProgressChangedEventArgs) _ Handles WebBrowser1.ProgressChanged Console.WriteLine("CurrentProgress: " + e.CurrentProgress.ToString) If e.CurrentProgress = e.MaximumProgress Then load_stated = True End If If e.CurrentProgress = 0 Then If load_stated Then WebBrowser1.Print() load_stated = False End If End If End Sub
Private Sub webBrowser1_DocumentCompleted(sender As Object, _ e As WebBrowserDocumentCompletedEventArgs) _ Handles webBrowser1.DocumentCompleted If e.Url.ToString = webBrowser1.Url.ToString Then fullyLoaded = True End If End Sub
Private Sub WebBrowser1_DocumentComplete(ByVal pDisp As Object, URL As Variant) fullyLoaded = True End Sub
Private Sub holdBrowserPage() fullyLoaded = False Do While fullyLoaded = False DoEvents Loop fullyLoaded = False End Sub
Private Sub holdBrowser() Do While WebBrowser1.Busy Or WebBrowser1.ReadyState <> READYSTATE_COMPLETE DoEvents Loop End Sub
private void WaitForPageLoad ( ) { while (pageReady == false) Application.DoEvents(); while (webBrowser1.IsBusy || webBrowser1.ReadyState != WebBrowserReadyState.Complete) Application.DoEvents(); }
Dim StatusDate As String StatusDate = InputBox("What status date do you want to pull?", "Enter Status Date", " ") If StatusDate = " " Then MessageBox.Show("You must enter a Status date to continue.") Exit Sub ElseIf StatusDate = "" Then Exit Sub End If
input = InputBox("Text:") If input <> "" Then Else End If
Imports System.Runtime.InteropServices Public intInputBoxCancel as integer Public Function StrPtr(ByVal obj As Object) As Integer Dim Handle As GCHandle = GCHandle.Alloc(obj, GCHandleType.Pinned) Dim intReturn As Integer = Handle.AddrOfPinnedObject.ToInt32 Handle.Free() Return intReturn End Function
dim ans as string = inputbox("prompt") if StrPtr(ans) = intInputBoxCancel then else endif
input = InputBox("Text:") If String.IsNullOrEmpty(input) Then Else End If
Public sName As String Sub FillName() sName = InputBox("Who is your name?") If StrPtr(sName) = False Then MsgBox ("Please fill your name!") Exit Sub End If If sName = "" Then MsgBox ("Please fill your name!") Else MsgBox ("Welcome " & sName & " and nice see you!") End If End Sub
Dim anInput as String = InputBox("Enter your pin") If anInput <>"" then Elseif DialogResult.Cancel then Msgbox("You End if
Dim Green as integer Try Green = InputBox("Please enter a value for green") Catch ex as Exception MsgBox("Green must be a valid integer!") End Try
Dim ask = InputBox("") If ask.Length <> 0 Then Else End If
Dim input As String input = InputBox("Enter something:") If StrPtr(input) = 0 Then MsgBox "You pressed cancel!" Elseif input.Length = 0 Then MsgBox "OK pressed but nothing entered." Else MsgBox "OK pressed: value= " & input End If
Dim userReply As String userReply = Microsoft.VisualBasic.InputBox("Message") If userReply = "" Then MsgBox("You did not enter anything. Try again") ElseIf userReply.Length = 0 Then MsgBox("You did not enter anything") End If
For I = 0 To Collection.Count() - 1 Write(I & " = " & Collection(I)) Next
I = 0 For Each El In Collection Write(I & " = " & El) I += 1 Next
For Each El in Collection Write(Collection.IndexOf(El) & " = " & El) Next
Dim i as Integer = 0 For Each obj In myList i+=1 Next
Dim list = Enumerable.Range(1, 10).Reverse() Dim query = list.Select(Function(item, index) _ New With { .Index = index, .Item = item }) For Each obj In query Console.WriteLine("Index: {0} -- Item: {1}", obj.Index, obj.Item) Next
private void dgtest_CellClick(object sender, DataGridViewCellEventArgs e) { if (e.ColumnIndex == 0) { dtp = new DateTimePicker(); dgtest.Controls.Add(dtp); dtp.Format = DateTimePickerFormat.Short; Rectangle Rectangle = dgtest.GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, true); dtp.Size = new Size(Rectangle.Width, Rectangle.Height); dtp.Location = new Point(Rectangle.X, Rectangle.Y); dtp.CloseUp += new EventHandler(dtp_CloseUp); dtp.TextChanged += new EventHandler(dtp_OnTextChange); dtp.Visible = true; } } private void dtp_OnTextChange(object sender, EventArgs e) { dgtest.CurrentCell.Value = dtp.Text.ToString(); } void dtp_CloseUp(object sender, EventArgs e) { dtp.Visible = false; }
protected override bool ProcessCmdKey(ref Message msg, Keys keyData) { switch (keyData & Keys.KeyCode) { case Keys.Enter: case Keys.Tab: this.dataGridView.Focus(); break; } return base.ProcessCmdKey(ref msg, keyData); }
DateTimePicker1.Visible = True ActiveControl = DateTimePicker1
Public Sub DateTimePicker1_ValueChanged(sender As System.Object, e As System.EventArgs) Handles DateTimePicker1.ValueChanged requestDGV.Rows(0).Cells("requestTimeOff").Value = (DateTimePicker1.Value) DateTimePicker1.Visible = False DateTimePicker1.Enabled = False End Sub
Public Sub DateTimePicker1_ValueChanged(sender As System.Object, e As System.EventArgs) Handles DateTimePicker1.ValueChanged requestDGV.Rows(0).Cells("requestTimeOff").Value = (DateTimePicker1.Value) End Sub
using System; ... try { var getExecutingAssembly = typeof(Assembly).GetRuntimeMethods() .Where(m => m.Name.Equals("GetExecutingAssembly")) .FirstOrDefault(); var assemblies = getExecutingAssembly.Invoke(null, null); } catch(Exception exc){ ... try something else } finally{ ... time for some alternative }
public bool IsNull(string columnName) { DataColumn column = GetDataColumn(columnName); int record = GetDefaultRecord(); return column.IsNull(record); }
internal bool IsNull(int record) { Debug.Assert(null != _storage, "no storage"); return _storage.IsNull(record); }
public virtual bool IsNull(int recordNo) { return this.dbNullBits.Get(recordNo); }
get { DataColumn column = GetDataColumn(columnName); int record = GetDefaultRecord(); _table.recordManager.VerifyRecord(record, this); VerifyValueFromStorage(column, DataRowVersion.Default, column[record]); return column[record]; }
Dim fromDate As DateTime? = If(fromDatePicker.Checked, fromDatePicker.Value, Nothing)
If (Not startDate Is Nothing) Then list = list.Where(Function(i) i.InvDate.Value >= startDate.Value) End If
Dim fromDate As DateTime? = If(fromDatePicker.Checked, _ fromDatePicker.Value, _ CType(Nothing, DateTime?))
Dim fromDate As DateTime? = If(fromDatePicker.Checked, _ fromDatePicker.Value, _ New DateTime?)
Dim fromDate As New Date If fromDatePicker.Checked Then fromDate = fromDatePicker.Value End If If fromDate <> New Date Then list = list.Where(Function(i) i.InvDate.Value >= fromDate.Value) End If
squery = "insert into tblTest values( Dim cmd = New SqlCommand(squery, con) cmd.Parameters.Add("@Date", SqlDbType.DateTime) If txtRequireDate.Text = "" Then cmd.Parameters("@Date").Value = DBNull.Value Else cmd.Parameters("@Date").Value = txtRequireDate.Text End If
Dim PatientAddressDto = New List(Of PatientAddress) {Populate PatientAddressDto with lots of duplicate data} PatientAddressDto = (From d In PatientAddressDto Group d By PatientAddressDtoGrouped = New PatientAddress With { .Address1 = d.Address1, .Address2 = d.Address2, .City = d.City, .State = d.State, .Zip = d.Zip } Into Group Select New PatientAddress With { .Address1 = PatientAddressDtoGrouped.Address1, .Address2 = PatientAddressDtoGrouped.Address2, .City = PatientAddressDtoGrouped.City, .State = PatientAddressDtoGrouped.State, .Zip = PatientAddressDtoGrouped.Zip }).ToList()
PatientAddressDto = (From d In PatientAddressDto Select New PatientAddress With { .Address1 = d.Address1, .Address2 = d.Address2, .City = d.City, .State = d.State, .Zip = d.Zip }).Distinct
PatientAddressDto = PatientAddressDto.GroupBy(Function(p) New PatientAddress With { .Address1 = p.Address1, .Address2 = p.Address2, .City = p.City, .State = p.State, .Zip = p.Zip })
Group d By PatientAddressDtoGrouped = New With { Key .Address1 = d.Address1, Key .Address2 = d.Address2, Key .City = d.City, Key .State = d.State, Key .Zip = d.Zip }
Dim PatientAddressDto = New List(Of PatientAddress) {Populate PatientAddressDto with lots of duplicate data} PatientAddressDto = (From d In PatientAddressDto Group d By d.Address1, d.Address2, d.City, d.State, d.Zip Into g = Group Let grp = New PatientAddress With {.Address1 = Address1, .Address2 = Address2, .City = City, .State = State, .Zip = Zip} Select grp).ToList()
Group d By PatientAddressDtoGrouped = New With { Key .Address1 = d.Address1, ....
Sub Main() Dim x, z As Object Dim y As Nullable(Of Integer) z = "1243" Dim c As Object = Coalesce(x, y, z) End Sub Private Function Coalesce(ByVal ParamArray x As Object()) Return x.First(Function(y) Not IsNothing(y)) End Function
Private Function Coalesce(ByVal ParamArray Parameters As String()) As String For Each Parameter As String In Parameters If Not Parameter Is Nothing Then Return Parameter End If Next Return Nothing End Function
If DataGridView1.RowCount > 0 Then Dim MyDesiredIndex As Integer = 0 If DataGridView1.CurrentRow.Index < DataGridView1.RowCount - 1 Then MyDesiredIndex = DataGridView1.CurrentRow.Index + 1 End If DataGridView1.ClearSelection() DataGridView1.CurrentCell = DataGridView1.Rows(MyDesiredIndex).Cells(0) DataGridView1.Rows(MyDesiredIndex).Selected = True End If
DataGridView1.ClearSelection() DataGridView1.CurrentCell = DataGridView1.Rows(MyDesiredIndex).Cells(0)
Object key = Convert.ToInt32(cdr["WordList"]); int itemFound = lexiconNamesBindingSource.Find("ID_Name", key); lexiconNamesBindingSource.Position = itemFound;
If DataGridView1.CurrentRow.Index < DataGridView1.Rows.Count Then DataGridView1.Rows(DataGridView1.CurrentRow.Index + 1).Selected = True End If
If DataGridView1.SelectedRows(0).Index < DataGridView1.RowCount - 1 Then MyDesiredIndex = DataGridView1.SelectedRows(0).Index + 1 End If DataGridView1.Rows(MyDesiredIndex).Selected = True
Private Sub btnPrev_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPrev.Click Try dgvDevices.ClearSelection() Dim currentr As Integer = dgvDevices.CurrentCell.RowIndex dgvDevices.CurrentCell = dgvDevices.Rows(currentr - 1).Cells(0) dgvDevices.Rows(currentr - 1).Selected = True Catch ex As Exception dgvDevices.CurrentCell = dgvDevices.Rows(0).Cells(0) dgvDevices.Rows(0).Selected = True End Try End Sub Private Sub btnForw_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnForw.Click Try dgvDevices.ClearSelection() Dim currentr As Integer = dgvDevices.CurrentCell.RowIndex dgvDevices.CurrentCell = dgvDevices.Rows(currentr + 1).Cells(0) dgvDevices.Rows(currentr + 1).Selected = True Catch ex As Exception dgvDevices.CurrentCell = dgvDevices.Rows(dgvDevices.RowCount - 1).Cells(0) dgvDevices.Rows(dgvDevices.RowCount - 1).Selected = True End Try End Sub
Dim bsExample As New BindingSource Dim dgv As New DataGridView dgv.DataSource = bsExample Dim desiredIndex As Integer = 10 bsExample.Position = desiredIndex
Private Sub DGW2_DataBindingComplete(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewBindingCompleteEventArgs) Handles DGW2.DataBindingComplete Dim mygrid As DataGridView mygrid = CType(sender, DataGridView) mygrid.ClearSelection() End Sub
Dim Condition As Integer = 55 Select Case Condition Case 1, 3 To 5, 10, 12, 14, Is > 50 Case Else End Select
Private Sub OK_Button_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OK_Button.Click Me.DialogResult = System.Windows.Forms.DialogResult.OK Me.Hide() End Sub Private Sub Cancel_Button_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Cancel_Button.Click Me.DialogResult = System.Windows.Forms.DialogResult.Cancel Me.Hide() End Sub
If theModelessDialog.IsDisposed Then theModelessDialog = New dlgModeless End If dlgModeless.Show()
Private Sub Form1_FormClosing(sender as Object, e as FormClosingEventArgs) _ Handles Form1.FormClosing if e.CloseReason = CloseReason.UserClosing then e.Cancel = true Me.Hide() end if End Sub
Dim msgboxresponse As MsgBoxResult If e.CloseReason = CloseReason.UserClosing Then If Not Me.bTerminate Then msgboxresponse = MsgBox("Are you sure you want to cancel adding?", _ MsgBoxStyle.Question + MsgBoxStyle.YesNo, Me.Text) If msgboxresponse <> MsgBoxResult.Yes Then e.Cancel = True Return End If End If End If
Private Sub Cancel_Button_Click(ByVal sender As System.Object, _ ByVal e As System.EventArgs) _ Handles Cancel_Button.Click, Me.FormClosing ....More code Me.Dispose End Sub
>e.Cancel = False >FORM2.Show() (if you want to show another form)
Public Class Utility Public Shared Function GetValue() As String End Function End Class
SCRIPT5022: Sys.ArgumentOutOfRangeException: Value must be an integer. Parameter name: x Actual value was 5.999999523162842.
Sys.UI.Point = function Sys$UI$Point(x, y) { var e = Function._validateParams(arguments, [ {name: "x", type: Number, integer: true}, {name: "y", type: Number, integer: true} ]); if (e) throw e; this.x = x; this.y = y;
<script language="javascript"> Sys.UI.Point = function Sys$UI$Point(x, y) { x = Math.round(x); y = Math.round(y); var e = Function._validateParams(arguments, [ {name: "x", type: Number, integer: true}, {name: "y", type: Number, integer: true} ]); if (e) throw e; this.x = x; this.y = y; } </script>
Sys.UI.Bounds = function Sys$UI$Bounds(x, y, width, height) { x = Math.round(x); y = Math.round(y); var e = Function._validateParams(arguments, [ { name: "x", type: Number, integer: true }, { name: "y", type: Number, integer: true }, { name: "width", type: Number, integer: true }, { name: "height", type: Number, integer: true } ]); if (e) throw e; this.x = x; this.y = y; this.height = height; this.width = width; }
<meta http-equiv="X-UA-Compatible" content="IE=7" />
if (typeof param1 === "number") { param1 = Math.round(param1); } if (typeof param2 === "number") { param2 = Math.round(param2); } return new Sys.UI.Point(param1, param2);
<Extension()> Public Sub UnBold(Of T As Control)(cc As Control.ControlCollection) For Each c As Control In cc If Not TypeOf c Is T AndAlso c.GetType.GetProperty("Font") IsNot Nothing Then Dim RegularFont As New Font(c.Font.FontFamily, c.Font.Size, FontStyle.Regular) c.Font = RegularFont ElseIf c.HasChildren Then UnBold(Of T)(c.Controls) End If Next End Sub
<GroupBox Header="Group" FontSize="16" FontWeight="Bold"> <ContentControl Margin="0" FontSize="12" FontWeight="Regular"> ... ... ... </ContentControl> </GroupBox>
Public Function TitleCase(ByVal strIn As String) Dim result As String = "" Dim culture As New CultureInfo("en", False) Dim tInfo As TextInfo = culture.TextInfo() result = tInfo.ToTitleCase(strIn) Return result End Function
string yourString = "TEST"; TextInfo formatter = new CultureInfo("en-US", false).TextInfo; formatter.ToTitleCase(yourString.ToLower());
public string ToProperCase(this string value) { if (string.IsNullOrEmpty(value)) { return ""; } string proper = System.Threading.Thread.CurrentThread.CurrentCulture. TextInfo.ToTitleCase(value.ToLower()); int oddCapIndex = proper.IndexOfAny({ "D "O "Mc" }); if (oddCapIndex > 0) { proper = proper.Substring(0, oddCapIndex + 2) + proper.Substring(oddCapIndex + 2).ToProperCase(); } return proper; }
public int IndexOfAny(this string test, string[] values) { int first = -1; foreach (string item in values) { int i = test.IndexOf(item); if (i > 0) { if (first > 0) { if (i < first) { first = i; } } else { first = i; } } } return first; }
Partial Public Class User Public Function GetUser(ByVal UserID as Integer) as User End Function End Class
Partial Public Class User Public Function GetUser(ByVal UserID as Integer) as User Dim dc as New MyDataContext() Return (From u in dc.Users Where u.ID = UserID).Single() End Function End Class
Partial Public Class User Private dc as MyDataContext Public Sub New() dc = new MyDataContext() End Sub Public Function GetUser(ByVal UserID as Integer) as User Return (From u in dc.Users Where u.ID = UserID).Single() End Function Public Function GetAllUsers() as IEnumerable(Of User) Return From u in dc.Users End Function End Class
Using dc As New MyDataContext() user = (From u in dc.Users Where u.ID = UserID).Single() End Using
public class UserDataProvider { private UserDataContext _data = null; public UserDataProvider() { _data = new UserDataContext(); } public User GetUser(int userID) { return _data.Users.FirstOrDefault(u => u.UserID == userID); } }
public class UserDataProvider { private UserDataContext _dataContext; private UserDataContext DataContext { get { if (_data == null) _data = new UserDataContext(); return _data; } } public User GetUser(int userID) { return DataContext.Users.FirstOrDefault(u => u.UserID == userID); } }
<DllImport("User32.dll", CharSet:=CharSet.Auto, _ CallingConvention:=CallingConvention.StdCall)> _ Public Overloads Shared Function SetWindowsHookEx _ (ByVal idHook As Integer, ByVal HookProc As CallBack, _ ByVal hInstance As IntPtr, ByVal wParam As Integer) As Integer End Function
hHook = SetWindowsHookEx(WH_MOUSE, _ hookproc, _ IntPtr.Zero, _ AppDomain.GetCurrentThreadId())
using System.Diagnostics; Process.GetCurrentProcess().Threads[0].Id
var thread = Process.GetCurrentProcess().Threads.OfType<ProcessThread>(). SingleOrDefault(x => x.ThreadState == ThreadState.Running); if (thread != null) { }
Delegate Sub updateresults_delegate(ByVal textbox As TextBox, ByVal text As String) Private Sub updatelog_threadsafe(ByVal textbox As TextBox, ByVal text As String) If textbox.InvokeRequired Then Dim mydelegate As New updateresults_delegate(AddressOf updatelog_threadsafe) Me.Invoke(mydelegate, New Object() {textbox, text}) Else textbox.Text = text End If End Sub
For i As Integer = val1 To val2 host = s1(0) & "." & s1(1) & "." & s1(2) & "." & i Try Dim reply As PingReply = pingsender.Send(host, timeoutval, buffer, options) If reply.Status = IPStatus.Success Then name = System.Net.Dns.GetHostEntry(host) resulttext += String.Format("{1} - {2}: reply: Bytes={3} time{4} TTL={5}{0}", vbCrLf, name.HostName, reply.Address.ToString, reply.Buffer.Length, getms(reply.RoundtripTime), reply.Options.Ttl) Else resulttext += String.Format(" {1}: Ping failed. {2}{0}", vbCrLf, host, reply.Status.ToString) End If updatelog_threadsafe(txtlog, resulttext) System.Threading.Thread.Sleep(1000) Catch ex As Exception End Try Next
switch(c) { default : case 1: break; case 2 : break; }
Select [ Case ] testexpression [ Case expressionlist [ statements ] ] [ Case Else [ elsestatements ] ] End Select
creamcake = TextBox1.Text Select Case creamcake Case "Eaten" DietState = "Diet Ruined" Case "Not Eaten" DietState = "Diet Not Ruined" Case Else DietState = "Didn End Select
Select Case agerange Case 16 To 21 MsgBox “Still Young” Case 50 To 64 MsgBox “Start Lying” End Select
Select Object.Name.ToString() Case "Name1" Case "Name2" Case Else End Select
build deploy */bin */bin/* obj *.dll *.pdb *.user *.suo _ReSharper* *.resharper* bin
Declare Function MultiplyAndRound Lib "FPLib.dll" (ByVal x As Double, ByVal y As Double) As Long Console.WriteLine(MultiplyAndRound(2.5, 1)) Console.WriteLine(MultiplyAndRound(0.25, 10)) Console.WriteLine(MultiplyAndRound(0.025, 100)) Console.WriteLine(MultiplyAndRound(0.0025, 1000))
Dim myInt32 As Integer myInt32 = CInt(2.5) myInt32 = CInt(0.025 * 100)
Dim result As Double = 0.025 * 100 Dim delta As Double = Double.Epsilon Dim floor As Integer = Math.Floor(result) If Math.Abs(result - (CDbl(floor) + 0.5)) <= delta Then result = floor + 0.5 End
Class C1 Public WithEvents ev As New EventThrower() Public Sub catcher() Handles ev.event Debug.print("Event") End Sub End Class
Class C2 Private _ev As EventThrower Public Property ev() As EventThrower Get Return _ev End Get Set(ByVal value As EventThrower) If _ev IsNot Nothing Then removehandler _ev.event, addressof catcher End If _ev = value If _ev IsNot Nothing Then addhandler _ev.event, addressof catcher End If End Set End Property Public Sub New() ev = New EventThrower() End Sub Public Sub catcher() Debug.print("Event") End Sub End Class
Dim comments As List(Of Comment) Using conn = New SqlConnection(ConnectionString) conn.Open() comments = conn.Query(Of Comment)("SELECT * from comments where userid = @commentid", New With {.userid= 1}) End Using Return View(comments)
SELECT * FROM ( SELECT tbl.*, ROW_NUMBER() OVER (ORDER BY ID) rownum FROM comments as tbl ) seq WHERE seq.rownum BETWEEN @x AND @y AND userid = @commentid ORDER BY seq.rownum
OFFSET @PageSize * (@PageNumber - 1) ROWS FETCH NEXT @PageSize ROWS ONLY;
ROWS (@PageSize * (@PageNumber - 1)) TO (@PageSize * @PageNumber -1)
StartAt @PageSize * (pagenum - 1) + 1 EndAt @PageSize * (pagenum - 1) + @PageSize
DECLARE @PageSize int DECLARE @PageNumber int SET @PageSize = 5 SET @PageNumber = 2 SELECT * FROM T_Users ORDER BY USR_ID -- Must contain "ORDER BY" OFFSET @PageSize * (@PageNumber - 1) ROWS FETCH NEXT @PageSize ROWS ONLY;
DECLARE @PageSize int SET @PageSize = 5 ;WITH CTE AS ( SELECT 1 as pagenum UNION ALL SELECT pagenum+1 AS pagenum FROM CTE WHERE CTE.pagenum < 100 ) SELECT pagenum ,@PageSize * (pagenum - 1) AS StartOFFSETBase0 --,@PageSize * (pagenum - 1) + @PageSize - 1 AS EndOFFSETBase0 ,@PageSize * pagenum - 1 AS EndOFFSETBase0 -- Simplified ,@PageSize * (pagenum - 1) + 1 AS StartOFFSETBase1 ,@PageSize * (pagenum - 1) + @PageSize AS EndOFFSETBase1 FROM CTE
Loop through each individual character in the string If the character = "e","f" or "g" add 1 to number of characters Exit loop Display total in messagebox
Dim s As String = "test" For Each c As Char in s Next
Dim TestString = "ABCDEFGH" for i = 0 to TestString.length-1 debug.print(teststring(i)) next
Dim dict As New Dictionary(Of Char, Integer) dict.Add("e"c, 0) Beware: a dictionary can only hold ONE item of the key - that means, adding another "e" would cause an error. each time you encounter the char you want, call something like this: dict.Item("e"c) += 1
Dim text = "H*ow do i loop through individual characters in a string (using a for loop) and how do I count the number of times a specific character appears in a string?*" Dim charGroups = From chr In text Group By chr Into Group Dim eCount As Int32 = charGroups.Where(Function(g) g.chr = "e"c).Sum(Function(g) g.Group.Count) Dim fCount As Int32 = charGroups.Where(Function(g) g.chr = "f"c).Sum(Function(g) g.Group.Count) Dim gCount As Int32 = charGroups.Where(Function(g) g.chr = "g"c).Sum(Function(g) g.Group.Count)
Instruction Explanation Stack 00: ldarg.0 Push Me (ref to current inst of Form1) Me 01: ldarg.0 Push Me Me, Me 02: ldfld bool Form1::_b Pop Me, read _b and push it _b, Me 07: brfalse.s 11 Pop _b; if false, branch to 11 Me 09: ldarg.0 (_b true) Push Me Me, Me 0a: ldfld bool Form1::_c (_b true) Pop Me, read _c and push it _c, Me 0f: brtrue.s 14 (_b true) Pop _c; if true, branch to 14 Me 11: ldc.i4.0 (_b, _c not both true) Push result 0 result, Me 12: br.s 15 Jump unconditionally to 15 result, Me ----- 14: ldc.i4.1 (_b, _c both true) Push result 1 result, Me 15: stfld bool Form1::_a Pop result and Me; write result to _a (empty) 1a:
if (condition) { if (anotherCondition) { if (yetanotherCondition) { } } }
if (!condition) return; if (!anotherCondition) return; if (!yetAnotherCondition) return;
var foo = MyList.select(val => val.isThing() && val.isCorrect && val.hasConditions() && val.things.Any(thing => thing.isCorrect())).orderBy(val => val.property).First();
var foo = MyList.select(val => val.isThing() && val.isCorrect && val.hasConditions() && val.things.Any(thing => thing.isCorrect() ) ) .OrderBy(val => val.property) .First();
routes.MapRoute( name:="Default", url:="{controller} / {Action} / {id}", defaults:=New With {.controller = "Home", .action = "Index", .id = UrlParameter.Optional} ) routes.MapHttpRoute( name:="UnitTests", routeTemplate:="test/{category}/{testname}", defaults:=New With {.controller = "TestApis", .action = "testme", .category = "TestCategoryOne", .testname = UrlParameter.Optional} )
config.Routes.MapHttpRoute( _ name:="UnitTests", _ routeTemplate:="test/{category}/{testname}", _ defaults:=New With {.controller = "TestApis", .action = "testme", .category = "TestCategoryOne", .testname = UrlParameter.Optional} )
[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Order", Storage="_Customer", ThisKey="fkCustomer", OtherKey="id", IsForeignKey=true)] public Customer Customer { get { return this._Customer.Entity; } set { Customer previousValue = this._Customer.Entity; if (((previousValue != value) || (this._Customer.HasLoadedOrAssignedValue == false))) { this.SendPropertyChanging(); if ((previousValue != null)) { this._Customer.Entity = null; previousValue.Orders.Remove(this); } this._Customer.Entity = value; if ((value != null)) { value.Orders.Add(this); this._fkCustomer = value.id; } else { this._fkCustomer = default(Nullable<int>); } this.SendPropertyChanged("Customer"); } } }
<ComboBox Name="provList" DisplayMemberPath="Code" ItemsSource="{Binding Source={x:Static list:GlobalList.ProvinceList}}" SelectedItem="{Binding Path=Provinces}" Width="75" Height="23" HorizontalAlignment="Left" Margin="5,0,0,0" VerticalAlignment="Top"/>
If String.IsNullOrEmpty(editTransactionRow.pay_id.ToString()) = False Then stTransactionPaymentID = editTransactionRow.pay_id End If
Public Property pay_Id1 Then Get return DirectCast(me.GetValue("pay_Id1", short) End Get End Property
If editTransactionRow.pay_id IsNot Nothing Then stTransactionPaymentID = editTransactionRow.pay_id End If
If editTransactionRow.pay_id <> DbNull.Value Then ... End If
If String.IsNullOrEmpty(editTransactionRow.pay_id) = False Then stTransactionPaymentID = editTransactionRow.pay_id End If
If editTransactionRow.pay_id IsNot Nothing Then stTransactionPaymentID = editTransactionRow.pay_id End If
If Not IsDBNull(editTransactionRow.pay_id) Then ...
If String.IsNullOrEmpty(editTransactionRow.pay_id.ToString()) = False Then stTransactionPaymentID = editTransactionRow.pay_id End If
If Not editTransactionRow.pay_id AndAlso String.IsNullOrEmpty(editTransactionRow.pay_id.ToString()) = False Then stTransactionPaymentID = editTransactionRow.pay_id End If
If Short.TryParse(editTransactionRow.pay_id, New Short) Then editTransactionRow.pay_id.ToString()
Dim d As DateTime = Now Debug.WriteLine(d.ToLongDateString) Debug.WriteLine(d.ToShortDateString) Debug.WriteLine(d.ToString("d")) Debug.WriteLine(d.ToString("yyyy-MM-dd"))
Wednesday, December 10, 2008 12/10/2008 12/10/2008 2008-12-10
private void HandleErrors( Action codeBlock ){ try{ codeBlock(); }catch(Exception e){ } } HandleErrors(() => { var x = foo(); x.DoStuff(); etc });
Dim food = New With { .ID = 1, .Name = "Carrot", .Type = ( Function(name As String) If String.IsNullOrEmpty(name) Then Return String.Empty Select Case name.ToLower() Case "apple", "tomato": Return "Fruit" Case "potato": Return "Vegetable" End Select Return "Meat" End Function )(.Name) } Dim type = food.Type
Return operations.Find(Function(p) p.OperationID = operationID)
Sub Main() Dim PersonDynamicType = AnonyFunc(New With {.Name = "david", .Family = "Fisher"}) Console.Write(PersonDynamicType.Name) End Sub Function AnonyFunc(Of t)(v As t) As t Return v End Function
Private Function JsonToObject(Of T)(Value As String) As T Dim JavaScriptSerializer As New System.Web.Script.Serialization.JavaScriptSerializer() Return JavaScriptSerializer.Deserialize(Of T)(Value) End Function Dim People As Generic.List(Of Person) = JsonToObject(Of Generic.List(Of Person))(Json)
worksheet.Cells(rowIndex, colIndex) = data(rowIndex)(colIndex)
var sheet = (Worksheet)Application.ActiveSheet; var range = sheet.get_Range("A1", "B2"); var data = new string[3,3]; data[0, 0] = "A1"; data[0, 1] = "B1"; data[1, 0] = "A2"; data[1, 1] = "B2"; range.Value2 = data;
Range filledRange = Worksheet.get_Range("A1:Z678",Missing); object[,] rngval = (object[,]) filledRange.get_Value (XlRangeValueDataType.xlRangeValueDefault); Range Destination = Worksheet2.get_Range("A1:Z678",Missing); destination.set_Value(Missing,rngval);
Dim misValue As Object = System.Reflection.Missing.Value Dim arr As Object = DataTableToArray(dt) Dim RangeTopLeft As String = Convert.ToChar(65 + 0).ToString() + rowNum.ToString() Dim RangeBottomRight As String = Convert.ToChar(65 + dt.Columns.Count - 1).ToString() + (rowNum + dt.Rows.Count - 1).ToString() Dim Range As String = RangeTopLeft + ":" + RangeBottomRight myExcelWorksheet.Range(Range, misValue).NumberFormat = "@" myExcelWorksheet.Range(Range, misValue).Value2 = arr
Function DataTableToArray(dt As DataTable) As Object Dim arr As Object = Array.CreateInstance(GetType(Object), New Integer() {dt.Rows.Count, dt.Columns.Count}) For nRow As Integer = 0 To dt.Rows.Count - 1 For nCol As Integer = 0 To dt.Columns.Count - 1 arr(nRow, nCol) = dt.Rows(nRow).Item(nCol).ToString() Next Next Return arr End Function
Dim newString As String = String.Format("{0} said {1} blah.", name, blah)
Dim newString As String = $"{name} said {blah} blah."
<asp:RequiredFieldValidator runat="server" ID="rfvRequired" ErrorMessage="This is required.<br/>This is line 2" ControlToValidate="tbRequired" ValidationGroup="CommonAttributesValidationGroup" SetFocusOnError="True" CssClass="valerror" Display="Dynamic"></asp:RequiredFieldValidator>
span.valerror[style*="inline"] { display:block !Important; background-color: Yellow; border: 1px solid font-size:.9em; }
<div><asp:RegularExpressionValidator id="x" runat="server"></div>
<asp:RequiredFieldValidator runat="server" EnableClientScript="True" Display="Dynamic" > <TemplateControl> <span class="error">This field is required.</span> </TemplateControl> </asp:RequiredFieldValidator>
<span id="ctl00_ <templatecontrol> <span class="error">This field is required.</span> </templatecontrol> </span>
ValidatorUpdateDisplay = function (val) { if (val.isvalid){ $(val).hide(); } else { $(val).show(); } }
ValidatorUpdateDisplay = function (val) { if (val.isvalid){ val.style.display = } else { val.style.display = } }
Sub MyBackgroundThread() Console.WriteLine("Hullo") End Sub
Dim thread As New Thread(AddressOf MyBackgroundThread) thread.Start()
Dim thread as New Thread( Sub() Console.WriteLine("Hullo") End Sub ) thread.Start()
Imports System.Threading Module Module1 Sub Main() Dim t As New Thread(Sub() Console.WriteLine("hello thread") End Sub) t.Start() t.Join() Console.ReadLine() End Sub End Module
Dim worker As New Thread(New ThreadStart(Function() 42))
Dim worker As New Thread(New ThreadStart(Function() End Function))
Dim SourcePath As String = "c:\SomeFolder\SomeFileYouWantToCopy.txt" Dim SaveDirectory As string = "c:\DestinationFolder" Dim Filename As String = System.IO.Path.GetFileName(SourcePath) Dim SavePath As String = System.IO.Path.Combine(SaveDirectory, Filename) If System.IO.File.Exists(SavePath) Then Else End If
Private Function Get_Enum_ValueName(Of T)(ByVal EnumName As T, ByVal EnumValue As Integer) As String Return DirectCast([Enum].Parse(GetType(EnumName), EnumValue ), EnumName).ToString End Function
public enum Week { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }
static void Main(string[] args) { int i=(int)Week.Thursday; Week day=(Week)3; string name=Week.Thursday.ToString(); string fun=Enum.GetName(typeof(Week), 6); string agh=Enum.GetName(typeof(Week), Week.Monday); string wed=EnumName(Week.Wednesday); Week apt=(Week)Enum.Parse(typeof(Week), "Thursday"); Week[] days=(Week[])Enum.GetValues(typeof(Week)); string[] names=Enum.GetNames(typeof(Week)); } static string EnumName<T>(T value) { return Enum.GetName(typeof(T), value); }
return Enum.ToObject(typeof(T), EnumValue).ToString();
public enum WeekDay { Monday = 1, Tuesday = 2, Wednesday = 3, Thursday = 4, Friday = 5, Saturday = 6, Sunday = 7 } string s = WeekDay.Friday.ToString();
public static class EnumExtensions { public static T ToEnum<T>(this int value) where T : struct { return (T)(object)value; } public static string ToEnumName<T>(this int value) where T : struct { return ((T)(object)value).ToString(); } }
int someEnumValue = 4; string name = someEnumValue.ToEnumName<WeekDay>();
Math.Round(32.625, 2, MidpointRounding.AwayFromZero) Math.Round(32.635, 2, MidpointRounding.AwayFromZero)
Math.Round(32.625D, 2, MidpointRounding.AwayFromZero) Math.Round(32.635D, 2, MidpointRounding.AwayFromZero)
Dim d As Decimal = 3.625 Dim r As Decimal = Math.Ceiling(d * 100D) / 100D MsgBox(r)
Private Function roundd(dec As Decimal) Dim d As Decimal = dec Dim r As Decimal = Math.Ceiling(d * 100D) / 100D Return r End Function
Dim lineItem = New With {.Name = myFile(index).Last_Name & ", " & myFile(index).First_Name, _ .StartDate = myFile(index).Day, .EndDate = myFile(index).Day}
Public Function CreateListFromSingle(Of T)(ByVal p1 As T) As List(Of T) Dim list As New List(Of T) list.Add(p1) return List End Function
Public Function CreateEmptyList(Of T)(ByVal unused As T) As List(Of T) Return New List(Of T)() End Function Dim x = CreateEmptyList(New With { .Name = String.Empty, .ID = 42 })
Sub Main() Dim x = New With {.Name = "Bob", .Number = 8675309} Dim xList = {x}.ToList() End Sub
Module Module1 Sub Main() Dim dsResource = New With {.Name = "Foo"} Dim List = dsResource.CreateTypedList End Sub <System.Runtime.CompilerServices.Extension()> _ Function CreateTypedList(Of T)(ByVal Prototype As T) As List(Of T) Return New List(Of T)() End Function End Module
Dim yourList = {(New With {.Name="", .Age=0})}.Take(0).ToList
Public Function EnumerateFromSingle(Of T)(ByVal p1 As T) As IEnumerable(Of T) Return New T() { p1 } End Function
Dim aList = {(New With {.Name="John", .Age=30}),(.Name="Julie", .Age=32)}.ToList
Dim l = dsResources.Select(Function(d) New With { .Name = d.Last_Name & ", " & d.First_Name }).ToList()
Dim parts As String() = myString.Split(new String() {Environment.NewLine}, StringSplitOptions.None)
Dim strLines() As String = Clipboard.GetText.Replace(Chr(13), "").Split(Chr(10))
Dim enter As String = vbCrLf Dim linecount As Integer = 0 Dim sr As New System.IO.StreamReader(yourTextFilePath) linecount = sr.ReadToEnd.Split(CChar(enter)).Length - 1
str.Split(New String() {Environment.NewLine}, StringSplitOptions.RemoveEmptyEntries)
Dim _dLocation As String = udDefaultLocationTextEdit.Text Dim _intDLocation As Integer If _dLocation <> "" Then _intDLocation = Integer.Parse(udDefaultLocationTextEdit.Text) Else _intDLocation = "" End If
Dim _dLocation As String = udDefaultLocationTextEdit.Text Dim _intDLocation As Integer? If _dLocation <> "" Then _intDLocation = Integer.Parse(udDefaultLocationTextEdit.Text) Else _intDLocation = Nothing End If
If _intDLocation.HasValue Then DoSomething() End If
Dim _dLocation As String = udDefaultLocationTextEdit.Text Dim _intDLocation As Nullable(Of Integer) If Not String.IsNullOrEmpty(_dLocation) Then _intDLocation = Integer.Parse(_dLocation) End If
Public Shared Function Nullinator(ByVal CheckVal As String) As Integer If String.IsNullOrEmpty(CheckVal) Then Return 0 Else Return CheckVal End If End Function
Dim Match_Innings As Integer = Nullinator(Me.TotalInnings.Text)
Dim rightAlign As Integer = Label1.Left + Label1.Width Label1.Text = value Label1.Left = rightAlign - Label1.Width
If ShouldRightJustify(rs.Fields(i).Type) Then rpt.Section(acPageHeader).Controls(rs.Fields(i).Name & "lbl").Left = _ (lblCol + txtNew.Width) _ - rpt.Section(acPageHeader).Controls(rs.Fields(i).Name & "lbl").Width End If
[DllImport("user32.dll", EntryPoint = "MessageBox", CharSet = Unicode)] int MessageBox(void* hWnd, wchar_t* lpText, wchar_t* lpCaption, unsigned int uType);
Declare Function getUserName Lib "advapi32.dll" Alias "GetUserNameA" ( ByVal lpBuffer As String, ByRef nSize As Integer) As Integer
*SELECT dp_duckbill_accounts.platypus_no AS duckbill, t_accounts.name AS Name " & _ "FROM t_accounts INNER JOIN dp_duckbill_accounts ON t_accounts.account_no = dp_duckbill_accounts.account_no " & _ "ORDER BY dp_duckbill_accounts.platypus_no*
x = "Hello " & "World" x = "Hello " & _ "World" x = "Hello " & "World"
text = "One line string" text = "Two line " & _ "string"
Dim serializer as New JavaScriptSerializer() Dim arrayJson as String = serializer.Serialize(myArray)
Imports Word = Microsoft.Office.Interop.Word Imports Excel = Microsoft.Office.Interop.Excel Public Class Form1 Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load For x As Integer = 1 To 3500 DataGridView1.Rows.Add(New Object() {"r" & x.ToString & "c1", "r" & x.ToString & "c2", "r" & x.ToString & "c3", "r" & x.ToString & "c4", "r" & x.ToString & "c5"}) Next End Sub Private Sub Button2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button2.Click exportToWord (DataGridView1) End Sub Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click Dim xlApp As New Excel.Application Dim xlWorkBook As Excel.Workbook Dim xlWorkSheet As Excel.Worksheet xlWorkBook = xlApp.Workbooks.Add xlWorkSheet = DirectCast(xlWorkBook.Sheets("sheet1"), Excel.Worksheet) xlApp.Visible = True Dim headers = (From ch In DataGridView1.Columns _ Let header = DirectCast(DirectCast(ch, DataGridViewColumn).HeaderCell, DataGridViewColumnHeaderCell) _ Select header.Value).ToArray() Dim headerText() As String = Array.ConvertAll(headers, Function(v) v.ToString) Dim items() = (From r In DataGridView1.Rows _ Let row = DirectCast(r, DataGridViewRow) _ Where Not row.IsNewRow _ Select (From cell In row.Cells _ Let c = DirectCast(cell, DataGridViewCell) _ Select c.Value).ToArray()).ToArray() Dim table As String = String.Join(vbTab, headerText) & Environment.NewLine For Each a In items Dim t() As String = Array.ConvertAll(a, Function(v) v.ToString) table &= String.Join(vbTab, t) & Environment.NewLine Next table = table.TrimEnd(CChar(Environment.NewLine)) Clipboard.SetText (table) Dim alphabet() As Char = "abcdefghijklmnopqrstuvwxyz".ToUpper.ToCharArray Dim range As excel.Range = xlWorkSheet.Range("B2:" & alphabet(headerText.Length) & (items.Length + 2).ToString) range.Select() xlWorkSheet.Paste() range.Borders(Excel.XlBordersIndex.xlDiagonalDown).LineStyle = Excel.XlLineStyle.xlLineStyleNone range.Borders(Excel.XlBordersIndex.xlDiagonalUp).LineStyle = Excel.XlLineStyle.xlLineStyleNone With range.Borders(Excel.XlBordersIndex.xlEdgeLeft) .LineStyle = Excel.XlLineStyle.xlContinuous .ColorIndex = 1 .TintAndShade = 0 .Weight = Excel.XlBorderWeight.xlMedium End With With range.Borders(Excel.XlBordersIndex.xlEdgeTop) .LineStyle = Excel.XlLineStyle.xlContinuous .ColorIndex = 1 .TintAndShade = 0 .Weight = Excel.XlBorderWeight.xlMedium End With With range.Borders(Excel.XlBordersIndex.xlEdgeBottom) .LineStyle = Excel.XlLineStyle.xlContinuous .ColorIndex = 1 .TintAndShade = 0 .Weight = Excel.XlBorderWeight.xlMedium End With With range.Borders(Excel.XlBordersIndex.xlEdgeRight) .LineStyle = Excel.XlLineStyle.xlContinuous .ColorIndex = 1 .TintAndShade = 0 .Weight = Excel.XlBorderWeight.xlMedium End With With range.Borders(Excel.XlBordersIndex.xlInsideVertical) .LineStyle = Excel.XlLineStyle.xlContinuous .ColorIndex = 1 .TintAndShade = 0 .Weight = Excel.XlBorderWeight.xlThin End With With range.Borders(Excel.XlBordersIndex.xlInsideHorizontal) .LineStyle = Excel.XlLineStyle.xlContinuous .ColorIndex = 1 .TintAndShade = 0 .Weight = Excel.XlBorderWeight.xlThin End With xlWorkBook.SaveAs("C:\Users\CoDeXeR\Desktop\Word1.xls", True) xlWorkBook.Close() xlApp.Application.Quit() ReleaseObject(xlWorkSheet) ReleaseObject (xlWorkBook) ReleaseObject (xlApp) End Sub Public Sub exportToWord(ByVal dgv As DataGridView) Dim oWord As Word.Application = DirectCast(CreateObject("Word.Application"), Word.Application) Dim oDoc As Word.Document = oWord.Documents.Add() Dim headers = (From ch In dgv.Columns _ Let header = DirectCast(DirectCast(ch, DataGridViewColumn).HeaderCell, DataGridViewColumnHeaderCell) _ Select header.Value).ToArray() Dim headerText() As String = Array.ConvertAll(headers, Function(v) v.ToString) Dim items() = (From r In dgv.Rows _ Let row = DirectCast(r, DataGridViewRow) _ Where Not row.IsNewRow _ Select (From cell In row.Cells _ Let c = DirectCast(cell, DataGridViewCell) _ Select c.Value).ToArray()).ToArray() Dim table As String = String.Join(vbTab, headerText) & Environment.NewLine For Each a In items Dim t() As String = Array.ConvertAll(a, Function(v) v.ToString) table &= String.Join(vbTab, t) & Environment.NewLine Next table = table.TrimEnd(CChar(Environment.NewLine)) Clipboard.SetText (table) Dim oTable As Word.Table = oDoc.Tables.Add(oDoc.Bookmarks.Item("\endofdoc").Range, items.Count + 1, headers.Count) oTable.Range.Paste() oTable.Rows.Item(1).range.Font.Bold = &H98967E oTable.Rows.Item(1).range.Font.Size = 14 oTable.Rows.Item(1).range.Font.Color = Word.WdColor.wdColorWhite oTable.Rows.Item(1).range.Shading.Texture = Word.WdTextureIndex.wdTextureNone oTable.Rows.Item(1).range.Shading.ForegroundPatternColor = Word.WdColor.wdColorAutomatic oTable.Rows.Item(1).range.Shading.BackgroundPatternColor = Word.WdColor.wdColorLightBlue oDoc.SaveAs("C:\Users\CoDeXeR\Desktop\Word1.doc", True) oDoc.Close() oWord.Application.Quit() End Sub Public Sub exportToExcel(ByVal dgv As DataGridView) End Sub Private Sub ReleaseObject(ByVal obj As Object) Try System.Runtime.InteropServices.Marshal.ReleaseComObject (obj) obj = Nothing Catch ex As Exception obj = Nothing Finally GC.Collect() End Try End Sub End Class
Imports Excel = Microsoft.Office.Interop.Excel Public Class Form1 Dim xlApp As New Excel.Application Dim xlWorkBook As Excel.Workbook Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click xlWorkBook = xlApp.Workbooks.Add xlApp.Visible = True xlWorkBook.SaveAs(Filename:="C:\Tutorial\SampleNew.xlsx", FileFormat:=51) xlWorkBook.Close() xlApp.Quit() releaseObject (xlApp) releaseObject (xlWorkBook) End Sub Private Sub releaseObject(ByVal obj As Object) Try System.Runtime.InteropServices.Marshal.ReleaseComObject (obj) obj = Nothing Catch ex As Exception obj = Nothing Finally GC.Collect() End Try End Sub Private Sub Button3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button3.Click Me.Close() End Sub End Class
Private Sub ReleaseObject(ByVal obj As Object) Try Dim intRel As Integer = 0 Do intRel = System.Runtime.InteropServices.Marshal.ReleaseComObject(obj) Loop While intRel > 0 MsgBox("Final Released obj Catch ex As Exception MsgBox("Error releasing object" & ex.ToString) obj = Nothing Finally GC.Collect() End Try End Sub
Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click Dim xlApp As New excel.Application Dim xlWorkBook As excel.Workbook Dim xlWorkSheet As excel.Worksheet Dim xlRange As excel.Range xlWorkBook = xlApp.Workbooks.Add xlWorkSheet = DirectCast(xlWorkBook.Sheets("sheet1"), excel.Worksheet) xlApp.Visible = True Dim headers = (From ch In DataGridView1.Columns _ Let header = DirectCast(DirectCast(ch, DataGridViewColumn).HeaderCell, DataGridViewColumnHeaderCell) _ Select header.Value).ToArray() Dim headerText() As String = Array.ConvertAll(headers, Function(v) v.ToString) Dim items() = (From r In DataGridView1.Rows _ Let row = DirectCast(r, DataGridViewRow) _ Where Not row.IsNewRow _ Select (From cell In row.Cells _ Let c = DirectCast(cell, DataGridViewCell) _ Select c.Value).ToArray()).ToArray() Dim table As String = String.Join(vbTab, headerText) & Environment.NewLine For Each a In items Dim t() As String = Array.ConvertAll(a, Function(v) v.ToString) table &= String.Join(vbTab, t) & Environment.NewLine Next table = table.TrimEnd(CChar(Environment.NewLine)) Clipboard.SetText(table) Dim alphabet() As Char = "abcdefghijklmnopqrstuvwxyz".ToUpper.ToCharArray xlRange = xlWorkSheet.Range("B2:" & alphabet(headerText.Length) & (items.Length + 2).ToString) xlRange.Select() xlWorkSheet.Paste() xlRange.Borders(excel.XlBordersIndex.xlDiagonalDown).LineStyle = excel.XlLineStyle.xlLineStyleNone xlRange.Borders(excel.XlBordersIndex.xlDiagonalUp).LineStyle = excel.XlLineStyle.xlLineStyleNone With xlRange.Borders(excel.XlBordersIndex.xlEdgeLeft) .LineStyle = excel.XlLineStyle.xlContinuous .ColorIndex = 1 .TintAndShade = 0 .Weight = excel.XlBorderWeight.xlMedium End With With xlRange.Borders(excel.XlBordersIndex.xlEdgeTop) .LineStyle = excel.XlLineStyle.xlContinuous .ColorIndex = 1 .TintAndShade = 0 .Weight = excel.XlBorderWeight.xlMedium End With With xlRange.Borders(excel.XlBordersIndex.xlEdgeBottom) .LineStyle = excel.XlLineStyle.xlContinuous .ColorIndex = 1 .TintAndShade = 0 .Weight = excel.XlBorderWeight.xlMedium End With With xlRange.Borders(excel.XlBordersIndex.xlEdgeRight) .LineStyle = excel.XlLineStyle.xlContinuous .ColorIndex = 1 .TintAndShade = 0 .Weight = excel.XlBorderWeight.xlMedium End With With xlRange.Borders(excel.XlBordersIndex.xlInsideVertical) .LineStyle = excel.XlLineStyle.xlContinuous .ColorIndex = 1 .TintAndShade = 0 .Weight = excel.XlBorderWeight.xlThin End With With xlRange.Borders(excel.XlBordersIndex.xlInsideHorizontal) .LineStyle = excel.XlLineStyle.xlContinuous .ColorIndex = 1 .TintAndShade = 0 .Weight = excel.XlBorderWeight.xlThin End With xlWorkBook.SaveAs(Filename:="C:\Users\Siddharth Rout\Desktop\Word1.xls", FileFormat:=56) xlWorkBook.Close() xlApp.Quit() ReleaseObject(xlRange) ReleaseObject(xlWorkSheet) ReleaseObject(xlWorkBook) ReleaseObject(xlApp) End Sub Private Sub ReleaseObject(ByVal obj As Object) Try Dim intRel As Integer = 0 Do intRel = System.Runtime.InteropServices.Marshal.ReleaseComObject(obj) Loop While intRel > 0 MsgBox("Final Released obj Catch ex As Exception MsgBox("Error releasing object" & ex.ToString) obj = Nothing Finally GC.Collect() End Try End Sub
using System; using System.Runtime.InteropServices; using Microsoft.Office.Interop.Excel; namespace TestCsCom { Class Program { static void Main(string[] args) { DoTheWork(); do { GC.Collect(); GC.WaitForPendingFinalizers(); } while (Marshal.AreComObjectsAvailableForCleanup()); } static void DoTheWork() { Application app = new Application(); Workbook book = app.Workbooks.Add(); Worksheet worksheet = book.Worksheets["Sheet1"]; app.Visible = true; for (int i = 1; i <= 10; i++) { worksheet.Cells.Range["A" + i].Value = "Hello"; } book.Save(); book.Close(); app.Quit(); } } }
Sub ExitWorkBook() Dim wb As Workbook Dim c As Integer c = 0 For Each wb In Application.Workbooks c = c + 1 Next wb If c = 1 Then Application.Quit Else Workbooks("(excel workbook name).xls").Close End If ' End Sub
xlApp = New Excel.Application xlWorkBooks = xlApp.Workbooks xlWorkBook = xlWorkBooks.Open(Me.txtFilePath.Text) xlWorkSheets = xlWorkBook.Worksheets xlWorkSheet = CType(xlWorkSheets(1), Excel.Worksheet) xlWorkBook.Close() xlWorkBooks.Close() xlApp.Quit() releaseObject(xlWorkSheet) xlWorkSheet = Nothing releaseObject(xlWorkSheets) xlWorkSheets = Nothing releaseObject(xlWorkBook) xlWorkBook = Nothing releaseObject(xlWorkBooks) xlWorkBooks = Nothing releaseObject(xlApp) xlApp = Nothing Private Sub releaseObject(ByVal obj As Object) Try System.Runtime.InteropServices.Marshal.FinalReleaseComObject(obj) obj = Nothing Catch ex As Exception obj = Nothing Finally GC.Collect() End Try End Sub
Private Sub releaseObject(ByVal obj As Object) Try System.Runtime.InteropServices.Marshal.ReleaseComObject(obj) obj = Nothing Catch ex As Exception obj = Nothing Finally GC.Collect() Try Dim iID As Integer Dim lastOpen As DateTime Dim obj1(10) As Process obj1 = Process.GetProcessesByName("EXCEL") lastOpen = obj1(0).StartTime For Each p As Process In obj1 If lastOpen < p.StartTime Then iID = p.Id Exit For End If Next For Each p As Process In obj1 If p.Id = iID Then p.Kill() Exit For End If Next Catch ex As Exception End Try End Try End Sub
<Flags()> Public Enum Week Monday = 1 Tuesday = 2 Wednesday = 4 Thursday = 8 Friday = 16 Saturday = 32 Sunday = 64 End Enum Dim mondayOrSunday = Week.Monday Or Week.Sunday Dim strDays = "MTWtFSs" Dim strMondayOrSundayBinary = Convert.ToString( mondayOrSunday, 2).PadRight(7, CChar("0")) Dim charMondayOrSunday = strDays.Zip( strMondayOrSundayBinary, Function(day, mask) If(mask = CChar("1"), day, CChar("-"))).ToArray() Dim strMondayOrSunday = New String(charMondayOrSunday) Console.WriteLine("{0} I see as {1}", mondayOrSunday, strMondayOrSunday)
<Flags()> Public Enum Week Monday = 1 Tuesday = 2 Wednesday = 4 Thursday = 8 Friday = 16 Saturday = 32 Sunday = 64 End Enum Dim strFullWeek As String = "MTWtFSs" Private Function GetMaskedWeek(ByVal days As Week) As String Dim result(strFullWeek.Length) As Char For i As Integer = 0 To strFullWeek.Length - 1 If ((days >> i) And 1) <> 0 Then result(i) = strFullWeek.ToCharArray(i, 1)(0) Else result(i) = "-"c End If Next Return New String(result) End Function
Dim sbrBuilder as New StringBuilder ... sbrBuilder.ToString() return sbrBuilder.ToString
private void treeView1_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e) { if (e.Button == MouseButtons.Right) treeView1.SelectedNode = e.Node; }
Private Sub TreeView1_NodeMouseClick(sender As Object, e As System.Windows.Forms.TreeNodeMouseClickEventArgs) Handles TreeView1.NodeMouseClick If e.Button = Windows.Forms.MouseButtons.Right Then TreeView1.SelectedNode = e.Node End If End Sub
LocalReport myReport = new LocalReport(); myReport.ReportPath = Server.MapPath("~/Path/To/Report.rdlc"); ReportParameter myParam = new ReportParameter("ParamName", "ParamValue"); myReport.SetParameters(new ReportParameter[] { myParam });
ReportViewer1.LocalReport.DataSources.Clear(); ReportViewer1.Reset(); Label1.Visible = false; ReportViewer1.Visible = true; DataSet dataSet = new DataSet(); dataSet = new ClassBLL().Load_Report_Detail(TextBox1.Text, ddlType.SelectedValue, levelcode, fields); ReportDataSource datasource = new ReportDataSource("DataSet_StoreprocedureName", dataSet.Tables[0]); if (dataSet.Tables[0].Rows.Count == 0) { ReportViewer1.Visible = false; } ReportViewer1.LocalReport.ReportPath = Server.MapPath("") + @"\Report.rdlc"; ReportViewer1.LocalReport.DataSources.Clear(); ReportViewer1.LocalReport.DataSources.Add(datasource); string fields="name,girish,Z0117"; string[] filedName = fields.Split( ReportParameter[] param = new ReportParameter[2]; param[0] = new ReportParameter(filedName[0], filedName[0], true); param[1] = new ReportParameter(filedName[3], filedName[3], true); ReportViewer1.LocalReport.SetParameters(param); ReportViewer1.ServerReport.Refresh();
MyRS.Credentials = New System.Net.NetworkCredential(rs1, rs2, rs3) Dim ReportByteArray As Byte() = Nothing Dim ReportPath As String = "/SRSSiteSubFolder/ReportNameWithoutRDLExtension" Dim ReportFormat As String = "PDF" Dim HistoryID As String = Nothing Dim DevInfo As String = "<DeviceInfo><Toolbar>False</Toolbar></DeviceInfo>" Dim ReportParams(0) As ParameterValue ReportParams(0) = New ParameterValue() ReportParams(0).Name = "TheParamName" ReportParams(0).Value = WhateverValue Dim Credentials As DataSourceCredentials() = Nothing Dim ShowHideToggle As String = Nothing Dim Encoding As String Dim MimeType As String Dim ReportHistoryParameters As ParameterValue() = Nothing Dim Warnings As Warning() = Nothing Dim StreamIDs As String() = Nothing ReportByteArray = MyRS.Render(ReportPath, ReportFormat, HistoryID, DevInfo, ReportParams, Credentials, _ ShowHideToggle, Encoding, MimeType, ReportHistoryParameters, Warnings, StreamIDs) Dim fs As FileStream = File.Create(FullReportPath, ReportByteArray.Length) fs.Write(ReportByteArray, 0, ReportByteArray.Length) fs.Close() Call EmailTheReport(FullReportPath) If IO.File.Exists(FullReportPath) Then IO.File.Delete(FullReportPath) End If
Public Interface ICurrentStep Property outerstep() As String Property innerstep() As String End Interface
Public Interface ICurrentStep Property outerstep() As String = "Hello" Property innerstep() As String End Interface
Private ReadOnly Property MemberNode() As XmlNode</br> Get Return CreatePathAndNode(mnodMessage, "objData/colMember/objMember") End Get End Property
Public Interface ICurrentStep Private _outerstep As String Property outerstep() As String Get Return _outerstep End Get Set(ByVal value As String) _outerstep = value End Set End Property End Interface
Public ReadOnly Property TestProp() As Integer Get Return 0 End Get End Property
Public ReadOnly Property TestProp() As Integer Get Return 0 End Get End Property
Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load Call DoAsyncWork() End Sub Protected Sub DoAsyncWork() Dim ID As String = ParentAccountID Dim ParentDirectory As String = ConfigurationManager.AppSettings("AcctDataDirectory") Dim account As New Account() Dim accts As IEnumerable(Of Account) = account.GetAccounts(ID) For Each f As String In My.Computer.FileSystem.GetFiles(ParentDirectory) If f.EndsWith(".txt") Then Dim LastSlashIndex As Integer = f.LastIndexOf("\") Dim newFilePath As String = f.Insert(LastSlashIndex, "\Templates") My.Computer.FileSystem.CopyFile(f, newFilePath) End If Next For Each acct As Account In accts If acct.ID <> ID Then Dim ChildDirectory As String = ConfigurationManager.AppSettings("AcctDataDirectory") & acct.ID If My.Computer.FileSystem.DirectoryExists(ChildDirectory) = False Then IO.Directory.CreateDirectory(ChildDirectory) End If My.Computer.FileSystem.DeleteDirectory(ChildDirectory, FileIO.DeleteDirectoryOption.DeleteAllContents) My.Computer.FileSystem.CopyDirectory(ParentDirectory, ChildDirectory, True) Else End If Next End Sub
System.Threading.ThreadPool.QueueUserWorkItem(AddressOf DoAsyncWork)
Dim t As New Thread(New ThreadStart(AddressOf DoAsyncWork)) t.Priority = Threading.ThreadPriority.Normal t.Start()
Private Sub Test() Dim nr As New NETRESOURCE nr.dwType = RESOURCETYPE_DISK nr.lpRemoteName = "\\computer\share" If WNetAddConnection2(nr, "password", "user", 0) <> NO_ERROR Then Throw New Exception("WNetAddConnection2 failed.") End If If WNetCancelConnection2("\\computer\share", 0, True) <> NO_ERROR Then Throw New Exception("WNetCancelConnection2 failed.") End If End Sub <StructLayout(LayoutKind.Sequential)> _ Private Structure NETRESOURCE Public dwScope As UInteger Public dwType As UInteger Public dwDisplayType As UInteger Public dwUsage As UInteger <MarshalAs(UnmanagedType.LPTStr)> _ Public lpLocalName As String <MarshalAs(UnmanagedType.LPTStr)> _ Public lpRemoteName As String <MarshalAs(UnmanagedType.LPTStr)> _ Public lpComment As String <MarshalAs(UnmanagedType.LPTStr)> _ Public lpProvider As String End Structure Private Const NO_ERROR As UInteger = 0 Private Const RESOURCETYPE_DISK As UInteger = 1 <DllImport("mpr.dll", CharSet:=CharSet.Auto)> _ Private Shared Function WNetAddConnection2(ByRef lpNetResource As NETRESOURCE, <[In](), MarshalAs(UnmanagedType.LPTStr)> ByVal lpPassword As String, <[In](), MarshalAs(UnmanagedType.LPTStr)> ByVal lpUserName As String, ByVal dwFlags As UInteger) As UInteger End Function <DllImport("mpr.dll", CharSet:=CharSet.Auto)> _ Private Shared Function WNetCancelConnection2(<[In](), MarshalAs(UnmanagedType.LPTStr)> ByVal lpName As String, ByVal dwFlags As UInteger, <MarshalAs(UnmanagedType.Bool)> ByVal fForce As Boolean) As UInteger End Function
string[] dirs = Directory.GetDirectories(@"\\192.168.1.116\");
<applicationSettings> <PhotoImportRobot.My.MySettings> <setting name="ADIImageRoot" serializeAs="String"> <value>C:\DataTemp\ADI\Original\</value> </setting> <setting name="ADIImageVariantsRoot" serializeAs="String"> <value>C:\DataTemp\ADI\Variants\</value> </setting> </PhotoImportRobot.My.MySettings> </applicationSettings>
System.Configuration.ConfigurationManager.AppSettings("ADIImageVariantsRoot")
<appSettings> <add key="ADIImageRoot" value="C:\DataTemp\ADI\Original\" /> <add key="ADIImageVariantsRoot" value="C:\DataTemp\ADI\Variants\" /> </appSettings>
ConfigurationManager.AppSettings["ADIImageVariantsRoot"]
using System.Web.Configuration; String webConfigValue; webConfigValue = WebConfigurationManager.AppSettings["employeeDB"].ToString();
<appSettings> <add key="employeeDB" value="Data Source=servername;Initial Catalog=employee;Persist Security Info=True;User ID=userid;Password=password;"/> </appSettings>
[YourNamespace].Properties.Settings.Default.[YourSettingName]
System.Web.Configuration.WebConfigurationManager.AppSettings
myvalue = CType(value, "String, Integer or Boolean")
Dim bMyValue As Boolean Dim iMyValue As Integer Dim sMyValue As String Dim t As Type = myValue.GetType Select Case t.Name Case "String" sMyValue = ctype(myValue, string) Case "Boolean" bMyValue = ctype(myValue, boolean) Case "Integer" iMyValue = ctype(myValue, Integer) End Select
Sub DoCast(ByVal something As Object) Dim newSomething = Convert.ChangeType(something, something.GetType()) End Sub
Dim t As Type = testObject.GetType() Dim prop As PropertyInfo = t.GetProperty("propertyName") Dim gmi As MethodInfo = prop.GetGetMethod() gmi.Invoke(testObject, Nothing)
combo.Items.Add(enumExample.holiday) combo.Items.Add(enumExample.oblivion) combo.Items.Add(enumExample.world)
For Each i In [Enum].GetValues(GetType(EnumExample)) combo.Items.Add(i) Next
combo.Items.AddRange([Enum].GetValues(GetType(EnumExample)))
Enum enumExample world oblivion holiday End Enum ComboBox1.DataSource = [Enum].GetValues(GetType(enumExample))
Dim TextFileReader As New Microsoft.VisualBasic.FileIO.TextFieldParser("C:\Documents and Settings\...\My Documents\My Database\Text\SemiColonDelimited.txt") TextFileReader.TextFieldType = FileIO.FieldType.Delimited TextFileReader.SetDelimiters(";") Dim TextFileTable As DataTable = Nothing Dim Column As DataColumn Dim Row As DataRow Dim UpperBound As Int32 Dim ColumnCount As Int32 Dim CurrentRow As String() While Not TextFileReader.EndOfData Try CurrentRow = TextFileReader.ReadFields() If Not CurrentRow Is Nothing Then If TextFileTable Is Nothing Then TextFileTable = New DataTable("TextFileTable") UpperBound = CurrentRow.GetUpperBound(0) For ColumnCount = 0 To UpperBound Column = New DataColumn() Column.DataType = System.Type.GetType("System.String") Column.ColumnName = "Column" & ColumnCount Column.Caption = "Column" & ColumnCount Column.ReadOnly = True Column.Unique = False TextFileTable.Columns.Add(Column) Next End If Row = TextFileTable.NewRow For ColumnCount = 0 To UpperBound Row("Column" & ColumnCount) = CurrentRow(ColumnCount).ToString Next TextFileTable.Rows.Add(Row) End If Catch ex As _ Microsoft.VisualBasic.FileIO.MalformedLineException MsgBox("Line " & ex.Message & _ "is not valid and will be skipped.") End Try End While TextFileReader.Dispose() frmMain.DataGrid1.DataSource = TextFileTable
Dim fi As New FileInfo("c:\foo.csv") Dim connectionString As String = "Provider=Microsoft.Jet.OLEDB.4.0;Extended Properties=Text;Data Source=" & fi.DirectoryName Dim conn As New OleDbConnection(connectionString) conn.Open() Dim cmdSelect As New OleDbCommand("SELECT Foo, Bar, FORMAT(""SomeDate"", Dim adapter1 As New OleDbDataAdapter adapter1.SelectCommand = cmdSelect Dim ds As New DataSet adapter1.Fill(ds, "DATA") myDataGridView.DataSource = ds.Tables(0).DefaultView myDataGridView.DataBind conn.Close()
Dim cc As new CsvContext() Dim inputFileDescription As New CsvFileDescription() With { _ .SeparatorChar = ","C, _ .FirstLineHasColumnNames = True _ } Dim products As IEnumerable(Of Product) = _ cc.Read(Of Product)("products.csv", inputFileDescription) Dim productsByName = From p In products Select New CustomDisplayClass With _ {.Name = p.Name, .SomeDate = p.SomeDate, .Price = p.Price}, _ Order By p.Name myDataGridView1.DataSource = products myDataGridView1.DataBind()
For Each line As String In System.IO.File.ReadAllLines("D:\abc.csv") DataGridView1.Rows.Add(line.Split(",")) Next
Dim items = (From line In IO.File.ReadAllLines("C:YourData.csv") _ Select Array.ConvertAll(line.Split(","c), Function(v) _ v.ToString.TrimStart(""" ".ToCharArray).TrimEnd(""" ".ToCharArray))).ToArray Dim Your_DT As New DataTable For x As Integer = 0 To items(0).GetUpperBound(0) Your_DT.Columns.Add() Next For Each a In items Dim dr As DataRow = Your_DT.NewRow dr.ItemArray = a Your_DT.Rows.Add(dr) Next Your_DataGrid.DataSource = Your_DT
If OpenFileDialog1.ShowDialog(Me) = DialogResult.OK Then Try Dim fi As New FileInfo(OpenFileDialog1.FileName) Dim sConnectionStringz As String = "Provider=Microsoft.Jet.OLEDB.4.0;Extended Properties=Text;Data Source=" & fi.DirectoryName Dim objConn As New OleDbConnection(sConnectionStringz) objConn.Open() Dim objCmdSelect As New OleDbCommand("SELECT * FROM " & fi.Name, objConn) Dim objAdapter1 As New OleDbDataAdapter objAdapter1.SelectCommand = objCmdSelect Dim objDataset1 As New DataSet objAdapter1.Fill(objDataset1) DataGridView1.DataSource = objDataset1.Tables(0).DefaultView Catch ex as Exception MsgBox("Error: " + ex.Message) Finally objConn.Close() End Try End If
Dim dataTable1 As New DataTable dataTable1.Columns.Add("FECHA") dataTable1.Columns.Add("TT") dataTable1.Columns.Add("DESCRIPCION") dataTable1.Columns.Add("No. DOC") dataTable1.Columns.Add("DEBE") dataTable1.Columns.Add("HABER") dataTable1.Columns.Add("SALDO") For Each line As String In System.IO.File.ReadAllLines(objetos.url) dataTable1.Rows.Add(line.Split(",")) Next
Public Class ClassName Implements BaseInterface1, BaseInterface2 End Class
Public Interface InterfaceName Implements BaseInterface1, BaseInterface2 End Interface
Public MustInherit Class InterfaceName Implements BaseInterface1, BaseInterface2 End Class
public interface InterfaceName: BaseInterface1, BaseInterface2 {}
Public Overloads Property myFlexibleProperty() As myCustomClass1 Get Return _myFlexibleProperty1 End Get Set(ByVal value As myCustomClass1) _myFlexibleProperty1 = value End Set End Property Public Overloads Property myFlexibleProperty() As myCustomClass2 Get Return _myFlexibleProperty2 End Get Set(ByVal value As myCustomClass2) _myFlexibleProperty2 = value End Set End Property
Public Overloads Readonly Property Average() As Double Public Overloads Readonly Property Average(ByVal startIndex As Integer) As Double
Public Overloads Readonly Property Average() As Double Public Overloads Readonly Property Average() As Decimal
Public Enum myType inInteger = 0 inDouble = 1 inString = 2 End Enum Public Class clsTest Dim _Value1 As Integer Dim _Value2 As Double Dim _Value3 As String Public Property MyValue(ByVal Typ As myType) As Object Get Select Case Typ Case myType.inDouble Return _Value2 Case myType.inInteger Return _Value1 Case Else Return _Value3 End Select End Get Set(ByVal value As Object) Select Case Typ Case myType.inDouble _Value2 = value Case myType.inInteger _Value1 = value Case Else _Value3 = value End Select End Set End Property End Class
Dim name(DT.Columns.Count) As String Dim i As Integer = 0 For Each column As DataColumn In DT.Columns name(i) = column.ColumnName i += 1 Next
Dim dt As New DataTable() For Each column As DataColumn In dt.Columns Console.WriteLine(column.ColumnName) Next
DataTable dt = new DataTable(); foreach (DataColumn column in dt.Columns) { Console.WriteLine(column.ColumnName); }
Private Sub DatabaseTest_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load Public ConString As String = "Data Source=.\SQLEXPRESS;AttachDbFilename=C:\Users\{username}\documents\visual studio 2010\Projects\Userapplication prototype v1.0\Userapplication prototype v1.0\Database\DB.mdf;" & "Integrated Security=True;User Instance=True" Dim conn As New SqlClient.SqlConnection Dim cmd As New SqlClient.SqlCommand Dim da As New SqlClient.SqlDataAdapter Dim dt As New DataTable Dim sSQL As String = String.Empty Try conn = New SqlClient.SqlConnection(ConString) conn.Open() cmd.Connection = conn cmd.CommandType = CommandType.Text sSQL = "SELECT * FROM DBtable" cmd.CommandText = sSQL da.SelectCommand = cmd da.Fill(dt) Me.DataGrid.DataSource = dt If dt.Rows.Count = 0 Then MsgBox("No record found!") End If Catch ex As Exception MsgBox(ErrorToString) Finally conn.Close() End Try End Sub
For Each c as DataColumn in dt.Columns For j=0 To _dataTable.Columns.Count-1 xlWorksheet.Cells (i+1, j+1) = _dataTable.Columns(j).ColumnName Next Next
SendAck(AppData:=AppData, Status:=Status, StatusMessage:=StatusMessage, IsApplication:=IsApplication)
Private Sub SendAck(ByVal AppData As XDocument, ByVal Status As Boolean, ByVal StatusMessage As String, ByVal IsApplication As Boolean)
Sub Example(ByVal param1 as Integer, ByVal param2 As Integer) Console.WriteLine("{0} - {1}", param1, param2) End Sub Example(param2:=42, param1:=1) Example(42, 1)
Dim dictionary As New Dictionary(Of String, Integer) dictionary.Add("Dot", 20) dictionary.Add("Net", 1) dictionary.Add("Perls", 10) dictionary.Add("Visual", -1) Dim Hashtable As New Hashtable() hashtable.Add("Area", 1000) hashtable.Add("Perimeter", 55) hashtable.Add("Mortgage", 540)
Error 31 Unable to open module file System Error &H80070003&
<Window x:Class="MainWindow" xmlns="http: xmlns:x="http: Title="MainWindow" Height="350" Width="525"> <StackPanel> <TextBox Height="50" >Hilight and Drag this text</TextBox> <Border BorderBrush="Blue" BorderThickness="2"> <StackPanel AllowDrop="True" Name="Stack" > <Label >If I drag text across the gray line, Stack.DragLeave will fire.</Label> <Separator></Separator> <Label>I only expect to get this event when leaving the blue rectangle. </Label> </StackPanel> </Border> <TextBlock >Stack.DragLeave Count: <Label x:Name="countLabel" /></TextBlock> </StackPanel> </Window>
Class MainWindow Private Sub Stack_DragLeave(ByVal sender As Object, ByVal e As System.Windows.DragEventArgs) Handles Stack.PreviewDragLeave countLabel.Content = countLabel.Content + 1 End Sub End Class
protected virtual void OnTargetDragLeave(object sender, DragEventArgs e) { _dragInProgress = false; _target.Dispatcher.BeginInvoke( new Action( ()=> { if( _dragInProgress == false ) OnRealTargetDragLeave( sender, e ); } ) ); } protected virtual void OnTargetDragOver(object sender, DragEventArgs e) { _dragInProgress = true; OnQueryDragDataValid( sender, e ); }
Private Thingy As Integer Property Thing() As Integer Get Return Thingy End Get Private Set(ByVal value As Integer) Thingy = value End Set End Property
string url = @"http: string ext = System.IO.Path.GetExtension(url); MessageBox.Show(this, ext);
string url = @"http: string ext = System.IO.Path.GetExtension(url); MessageBox.Show(this, ext);
HttpWebResponse res = (HttpWebResponse)request.GetResponse(); using (Stream rstream = res.GetResponseStream()) { string fileName = res.Headers["Content-Disposition"] != null ? res.Headers["Content-Disposition"].Replace("attachment; filename=", "").Replace("\"", "") : res.Headers["Location"] != null ? Path.GetFileName(res.Headers["Location"]) : Path.GetFileName(url).Contains( Path.GetFileName(res.ResponseUri.ToString()) : defaultFileName; } res.Close();
.+ Match any character between one and infinite (...) With this you create a group, after you can use for getting string inside the brackets \. Match the character \w Matches any word character equal to [a-zA-Z0-9_] \?* Match the character .* Match any character between zero and infinite
http: http: But if you have an url like this: http: This take
.+ Match any character between one and infinite \/{2} Match two .+ Match any character between one and infinite \/{1} Match one .+ Match any character between one and infinite (\.\w+) Group and match \?* Match the character .* Match any character between zero and infinite
http: https: http: C:\Foo\file.png (No match, only urls!) http: http: .+ example.com .+ / \/{1} file .+ .png (\.\w+)
public static string GetFileExtensionFromUrl(string url) { url = url.Split( url = url.Split( return url.Contains( }
[TestMethod] public void TestGetExt() { Assert.IsTrue(Helpers.GetFileExtensionFromUrl("../wtf.js?x=wtf")==".js"); Assert.IsTrue(Helpers.GetFileExtensionFromUrl("wtf.js")==".js"); Assert.IsTrue(Helpers.GetFileExtensionFromUrl("http: Assert.IsTrue(Helpers.GetFileExtensionFromUrl("wtf") == ""); Assert.IsTrue(Helpers.GetFileExtensionFromUrl("") == ""); }
if (Uri.TryCreate(url, UriKind.Absolute, out var uri)){ Console.WriteLine(Path.GetExtension(uri.LocalPath)); }
string url = @"http: string ext = System.IO.Path.GetExtension(url.Split(
(From items In myDatabase.ItemAssignments _ Where items.BuildingID = buildingID _ And items.ResidentID = ResidentID _ Select items).Concat(From moreitems In myDatabase.ItemAssignments _ Where moreitems.occupied = 0 _ And moreitems.BuildingID = buildingID _ Order by moreitems.Floor, moreitems.ItemNumber _ Select moreitems)
Dim firstQuery = From items In myDatabase.ItemAssignments _ Where items.BuildingID = buildingID _ And items.ResidentID = ResidentID _ Select New With { .Row = items, .Order = 1 } Dim secondQuery = From moreitems In myDatabase.ItemAssignments _ Where moreitems.occupied = 0 _ And moreitems.BuildingID = buildingID _ Select New With { .Row = moreitems, .Order = 2 } Dim query = firstQuery.Concat(secondQuery) _ .OrderBy(Function(o) o.Order) _ .ThenBy(Function(o) o.Row.Floor) _ .ThenBy(Function(o) o.Row.ItemNumber) _ .Select(Function(o) o.Row)
From items In myDatabase.ItemAssignments.AsEnumerable() ...
partial class one : base {} partial class one : base {}
partial class one : fu {} partial class two : bar {}
System.Web.HttpCompileException (0x80004005): C:\path\to\project\MasterPages\SiteMaster.master(71): error BC30561: at System.Web.Compilation.BuildManager.PostProcessFoundBuildResult(BuildResult result, Boolean keyFromVPP, VirtualPath virtualPath) at System.Web.Compilation.BuildManager.GetBuildResultFromCacheInternal(String cacheKey, Boolean keyFromVPP, VirtualPath virtualPath, Int64 hashCode, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVPathBuildResultFromCacheInternal(VirtualPath virtualPath, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVPathBuildResultInternal(VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVPathBuildResultWithNoAssert(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVPathBuildResult(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean ensureIsUpToDate) at System.Web.UI.BaseTemplateParser.GetReferencedType(VirtualPath virtualPath, Boolean allowNoCompile) at System.Web.UI.PageParser.ProcessMainDirectiveAttribute(String deviceName, String name, String value, IDictionary parseData) at System.Web.UI.TemplateParser.ProcessMainDirective(IDictionary mainDirective)
$.SetLanguage("<%= Globalization.CultureInfo.CurrentUICulture.TwoLetterISOLanguageName %>");
Globalization.CultureInfo.CurrentUICulture error BC30560:
+namespace System.Web.Globalization { + public interface IStringLocalizerProvider { + string GetLocalizedString(CultureInfo culture, string name, params object[] arguments); + } + public sealed class ResourceFileStringLocalizerProvider : IStringLocalizerProvider { + public const string ResourceFileName = "DataAnnotation.Localization"; + public ResourceFileStringLocalizerProvider(); + public string GetLocalizedString(CultureInfo culture, string name, params object[] arguments); + } + public static class StringLocalizerProviders { + public static IStringLocalizerProvider DataAnnotationStringLocalizerProvider { get; set; } + } +}
Option Explicit On Option Infer Off Imports System Imports System.Runtime.InteropServices Imports System.Security.Principal Public Class clsAuthenticator Enum SECURITY_IMPERSONATION_LEVEL As Int32 SecurityAnonymous = 0 SecurityIdentification = 1 SecurityImpersonation = 2 SecurityDelegation = 3 End Enum Public Enum LogonType As Integer LOGON32_LOGON_INTERACTIVE = 2 LOGON32_LOGON_NETWORK = 3 LOGON32_LOGON_BATCH = 4 LOGON32_LOGON_SERVICE = 5 LOGON32_LOGON_UNLOCK = 7 LOGON32_LOGON_NETWORK_CLEARTEXT = 8 LOGON32_LOGON_NEW_CREDENTIALS = 9 End Enum Public Enum LogonProvider As Integer LOGON32_PROVIDER_DEFAULT = 0 LOGON32_PROVIDER_WINNT35 = 1 LOGON32_PROVIDER_WINNT40 = 2 LOGON32_PROVIDER_WINNT50 = 3 End Enum Declare Auto Function LogonUser Lib "advapi32.dll" (ByVal lpszUsername As String, ByVal lpszDomain As String, ByVal lpszPassword As String, ByVal dwLogonType As LogonType, ByVal dwLogonProvider As LogonProvider, ByRef phToken As IntPtr) As Integer Declare Function CloseHandle Lib "kernel32.dll" (ByVal handle As IntPtr) As Boolean Declare Auto Function DuplicateToken Lib "advapi32.dll" (ExistingTokenHandle As IntPtr, SECURITY_IMPERSONATION_LEVEL As Int16, ByRef DuplicateTokenHandle As IntPtr) As Boolean Private newUser As WindowsImpersonationContext Public Sub Impersonator(ByVal sDomain As String, ByVal sUsername As String, ByVal sPassword As String) Dim pExistingTokenHandle As New IntPtr(0) Dim pDuplicateTokenHandle As New IntPtr(0) If sDomain = "" Then sDomain = System.Environment.MachineName End If Try Const LOGON32_PROVIDER_DEFAULT As Int32 = 0 Const LOGON32_LOGON_NEW_CREDENTIALS = 9 Dim bImpersonated As Boolean = LogonUser(sUsername, sDomain, sPassword, LOGON32_LOGON_NEW_CREDENTIALS, LOGON32_PROVIDER_DEFAULT, pExistingTokenHandle) If bImpersonated = False Then Dim nErrorCode As Int32 = Marshal.GetLastWin32Error() Throw New ApplicationException("LogonUser() failed with error code: " & nErrorCode.ToString) End If Dim bRetVal As Boolean = DuplicateToken(pExistingTokenHandle, SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation, pDuplicateTokenHandle) If bRetVal = False Then Dim nErrorCode As Int32 = Marshal.GetLastWin32Error CloseHandle(pExistingTokenHandle) Throw New ApplicationException("DuplicateToken() failed with error code: " & nErrorCode) Else Dim newId As New WindowsIdentity(pDuplicateTokenHandle) Dim impersonatedUser As WindowsImpersonationContext = newId.Impersonate newUser = impersonatedUser End If Catch ex As Exception Finally If pExistingTokenHandle <> IntPtr.Zero Then CloseHandle(pExistingTokenHandle) End If If pDuplicateTokenHandle <> IntPtr.Zero Then CloseHandle(pDuplicateTokenHandle) End If End Try End Sub Public Sub Undo() newUser.Undo() End Sub End Class
Dim Impersonator As New clsAuthenticator Dim sDomain as string = "SomeDomain" Dim sUser as string = "SomeUserName" Dim sPass as string = "SomePassword" Impersonator.Impersonator(sDomain, sUser, sPass) Impersonator.Undo
Dim cmd As New System.Data.SqlClient.SqlCommand cmd.CommandTimeout = 60
public SqlCommand() { this.ObjectID = Interlocked.Increment(ref _objectTypeCount); this._commandTimeout = 30; this._updatedRowSource = UpdateRowSource.Both; this._prepareHandle = -1; this._rowsAffected = -1; this._notificationAutoEnlist = true; GC.SuppressFinalize(this); }
Dim commandTemplate60 = new SqlCommand() commandTemplate60.Timeout = 60
Dim cmd As New System.Data.SqlClient.SqlCommand(commandTemplate60)
Dim A As String = "A" Dim B As String = "B" Dim Test = Function(C As String) As String Return C & A End Function Debug.Print(Test("Test "))
Console.WriteLine("Debug") Console.WriteLine("Not Debug") Console.WriteLine("Not Debug")
Console.WriteLine("Debug"); Console.WriteLine("Not Debug");
Imports System Public Module Module1 Sub Main() Console.WriteLine("Debug!") Console.WriteLine("Not Debug!") End Sub End Module
> vbc.exe default.vb /out:out.exe > out.exe Not Debug!
> vbc.exe default.vb /out:out.exe /debug:full > out.exe Not Debug!
Using p = CodeDomProvider.CreateProvider("VisualBasic") Dim params As New CompilerParameters() With { _ .GenerateExecutable = True, _ .OutputAssembly = "out.exe" _ } p.CompileAssemblyFromFile(params, "Default.vb") End Using > out.exe Not Debug!
Using p = CodeDomProvider.CreateProvider("VisualBasic") Dim params As New CompilerParameters() With { _ .IncludeDebugInformation = True, _ .GenerateExecutable = True, _ .OutputAssembly = "C:\Users\brackett\Desktop\out.exe" _ } p.CompileAssemblyFromFile(params, "Default.vb") End Using > out.exe Debug! Not Debug!
if (options.IncludeDebugInformation) { sb.Append("/D:DEBUG=1 "); sb.Append("/debug+ "); }
<asp:RegularExpressionValidator ID="ValidateFooOrder" runat="server" ControlToValidate="txtFooNum" Text="*" ErrorMessage="Invalid Foo number" ValidationExpression="^\d{0,4}$" ValidationGroup="GenerateFooFile" />
<ajaxToolkit:NumericUpDownExtender ID="NumericExtenderFooNum" runat="server" TargetControlID="txtFooNum" TargetButtonDownID="FooBack" TargetButtonUpID="FooForward" />
Sys.Application.add_init(function() { $create(AjaxControlToolkit.NumericUpDownBehavior, {"Maximum":1.7976931348623157E+308,"Minimum":-1.7976931348623157E+308, ); });
readValue : function() { if (this._elementTextBox) { var v = this._elementTextBox.value; if(!this._refValuesValue) { if(!v) { this._currentValue = this._min; } else { try { this._currentValue = parseFloat(v); } catch(ex) { this._currentValue = this._min; } } if(isNaN(this._currentValue)) { this._currentValue = this._min; } this.setCurrentToTextBox(this._currentValue); this._valuePrecision = this._computePrecision(this._currentValue); } else { if(!v) { this._currentValue = 0; } else { var find = 0; for (var i = 0; i < this._refValuesValue.length; i++) { if (v.toLowerCase() == this._refValuesValue[i].toLowerCase()) { find = i; } } this._currentValue = find; } this.setCurrentToTextBox(this._refValuesValue[this._currentValue]); } } }
<ajaxToolkit:NumericUpDownExtender ID="NumericExtenderFooNum" runat="server" Minimum="0" TargetControlID="txtFooNum" TargetButtonDownID="FooBack" TargetButtonUpID
setCurrentToTextBox : function(value) { if (document.createEvent) { } else if( document.createEventObject ) { } } } setCurrentToTextBox : function(value) { if (document.createEventObject) { } else if(document.createEvent) { } } }
Response.Cache.SetExpires(DateTime.UtcNow.AddDays(-1)) Response.Cache.SetValidUntilExpires(False) Response.Cache.SetRevalidation(HttpCacheRevalidation.AllCaches) Response.Cache.SetCacheability(HttpCacheability.NoCache) Response.Cache.SetNoStore()
<head> <script language="JavaScript"> <!-- javascript:window.history.forward(1); </script> </head>
<body onUnload="OperaReload()"> <input type="hidden" id="refreshed" value="no">
Dim str As String str = "This is part one of a very long string" & _ "Notice that this is more text" & _ "AND SOME MORE"
<WebMethod()> _ Public Function dosomething() As Boolean Try If successful Then Return True Else Return False End If Catch ex As Exception Throw ex End Try End Function
Dim lockObj As New Object() If Monitor.TryEnter(lockObj) Then Try Catch throw Finally Monitor.Exit(lockObj) End Try End If
try { } catch(RuntimeException e) { throw e; } catch (Exception e) { }
Dim exePath As String = Application.ExecutablePath()
Dim appPath As String = My.Application.Info.DirectoryPath
Dim CurDir as string = My.Application.Info.DirectoryPath
Dim strPath As String = AppDomain.CurrentDomain.BaseDirectory
TextBox1.Text = Application.StartupPath TextBox2.Text = Len(Application.StartupPath) TextBox3.Text = Microsoft.VisualBasic.Right(Application.StartupPath, 10) myPathsValues = Val(TextBox2.Text) - 9 TextBox4.Text = Microsoft.VisualBasic.Left(Application.StartupPath, myPathsValues) & "Reports"
Imports System.IO Dim strPath as String=Directory.GetCurrentDirectory
IF condition = true THEN ...true action--even if rare... ELSE ...action END IF
IF condition = [most common condition] THEN ...most common action.... ELSE ...least common action END IF
Connect() if connected then SendString("Hello!") else FlagConnectionFailed() endif
if not connected then FlagConnectionLost() return endif SendString("Still connected!")
Disconnect() if not connected then return "Complete" else FlagConnectionDisconnectFailure() endif
Dim Foo as String = "a,b,c,d,e" Dim Boo as List(of String) = Foo.Split(","c)
Dim foo As String = "a,b,c,d,e" Dim boo As New List(Of String)(foo.Split(","c))
String foo = "a,b,c,d,e"; List<String> boo = new List<String>(foo.Split(","));
Dim Foo as String = "a,b,c,d,e" Dim Boo as List(of String) Boo.AddRange(Foo.Split(","c))
Dim strings As List<string> = string_variable.Split().ToList<string>();
var values = labels.Split(" "[0]).ToList<string>();
Return New List(Of String)(IO.File.ReadAllLines(sFileName))
Dim Foo as String = "a,b,c,d,e" Dim Boo as List(of String) Boo = Split(Foo, ",").ToList
Dim Foo as String = "a<blah>b<blah>c<blah>d<blah>e" Dim Boo as List(of String) Boo = Split(Foo, "<blah>").ToList
Private Sub Btn_Click() Dim evaluator As New Thread(AddressOf Me.testthread(goodList, 1)) evaluator.Start() Exit Sub
Private Sub testthread(ByRef goodList As List(Of OneItem), ByVal coolvalue As Integer) StatusProgressBar.Maximum = 100000 While (coolvalue < 100000) coolvalue = coolvalue + 1 StatusProgressBar.Value = coolvalue lblPercent.Text = coolvalue & "%" Me.StatusProgressBar.Refresh() End While End Sub
Dim Evaluator = New Thread(Sub() Me.TestThread(goodList, 1))
Public Class MyParameters public property Name As String public property Number As Integer End Class Thread newThread = new Thread(AddressOf DoWork); Dim parameters As New MyParameters parameters.Name = "Arne" newThread.Start(parameters); public shared sub DoWork(byval data as object) { dim parameters = CType(data, Parameters) }
Dim evaluator As New Thread(Sub() Me.testthread(goodList, 1)) With evaluator .IsBackground = True .Start() End With
Dim evaluator As New Thread(Sub() testthread(goodList, 1) End Sub)
Private Delegate Sub TestThreadDelegate(ByRef goodList As List(Of String), ByVal coolvalue As Integer)
Dim tester As TestThreadDelegate = AddressOf Me.testthread Dim params(1) As Object params(0) = New List(Of String) params(1) = 0 tester.DynamicInvoke(params)
Public Class MyWork Public Structure thread_Data Dim TCPIPAddr As String Dim TCPIPPort As Integer End Structure Dim STthread_Data As thread_Data STthread_Data.TCPIPAddr = "192.168.2.2" STthread_Data.TCPIPPort = 80 Dim multiThread As Thread = New Thread(AddressOf testthread) multiThread.SetApartmentState(ApartmentState.MTA) multiThread.Start(STthread_Data) Private Function testthread(ByVal STthread_Data As thread_Data) Dim IPaddr as string = STthread_Data.TCPIPAddr Dim IPport as integer = STthread_Data.TCPIPPort End Function End Class
Imports System.Threading Public Class ThreadWithState Private boilerplate As String Private value As Integer Public Sub New(text As String, number As Integer) boilerplate = text value = number End Sub Public Sub ThreadProc() Console.WriteLine(boilerplate, value) End Sub End Class Public Class Example Public Shared Sub Main() Dim tws As New ThreadWithState( _ "This report displays the number {0}.", 42) Dim t As New Thread(New ThreadStart(AddressOf tws.ThreadProc)) t.Start() Console.WriteLine("Main thread does some work, then waits.") t.Join() Console.WriteLine( _ "Independent task has completed main thread ends.") End Sub End Class
<asp:Button ID="btnDelete" runat="server" Text="Delete" UseSubmitBehavior="false" OnClick="btnDelete_Click" OnClientClick="confirmation();" />
function confirmation() { var answer = confirm("Are you sure you want to delete? This action cannot be undone.") }
<asp:Button ID="btnDelete" runat="server" Text="Delete" UseSubmitBehavior="false" OnClick="btnDelete_Click" OnClientClick="return confirmation();" />
function confirmation() { return confirm("Are you sure you want to delete?"); }
<asp:Button ID="Button1" runat="server" Text="Button" OnClientClick="return ConfirmOnDelete();"/> <script type="text/javascript"> function ConfirmOnDelete() { if (confirm("Do you really want to delete?") == true) return true; else return false; } </script>
<ajaxToolkit:ConfirmButtonExtender ID="cbeDelete" TargetControlID="btnDelete" ConfirmText="Are you sure you want to delete? This action cannot be undone." runat="server">
<asp:Button runat="server" ID="btnDelete" Text="Delete" OnClick="btnDelete_Click" OnClientClick="if ( !confirm(
function confirmation() { var answer = confirm("Are you sure you want to delete? This action cannot be undone.") if(answer) { $.post("ajaxserverpage.aspx?item=34",function(data){ alert(data); }); } return false; }
protected void Page_Load(object sender, EventArgs e) { if (Request.QueryString["item"] != null) { Response.Write("Deleted succssfully"); Response.End(); } }
<html xmlns="http: <head> <title></title> <script type = "text/javascript"> function Confirm() { var confirm_value = document.createElement("INPUT"); confirm_value.type = "hidden"; confirm_value.name = "confirm_value"; if (confirm("Do you want to save data?")) { confirm_value.value = "Yes"; } else { confirm_value.value = "No"; } document.forms[0].appendChild(confirm_value); } </script> </head> <body> <form id="form1" runat="server"> <asp:Button ID="btnConfirm" runat="server" OnClick = "OnConfirm" Text ="Raise Confirm" OnClientClick = "Confirm()"/> </form> </body> </html>
public void OnConfirm(object sender, EventArgs e) { string confirmValue = Request.Form["confirm_value"]; if (confirmValue == "Yes") { this.Page.ClientScript.RegisterStartupScript(this.GetType(),"alert( } else { this.Page.ClientScript.RegisterStartupScript(this.GetType(), "alert", "alert( } }
<asp:LinkButton ID="takeActionBtn" CausesValidation="false" runat="server" onclientclick="return confirm(
Protected Sub takeActionBtn_Click(ByVal sender As Object, ByVal e As EventArgs) Handles takeActionBtn.Click End Sub
$.ajax({ url: success: successfuntion(), dataType: });
at System.Windows.Forms.Control.get_Handle() at System.Windows.Forms.Control.OnEnabledChanged(EventArgs e) at System.Windows.Forms.Control.set_Enabled(Boolean value) at Helium.Form1.BackgroundWorker1_DoWork(Object sender, DoWorkEventArgs e) in C:\Users\Kevin\documents\visual studio 2010\Projects\Helium\Helium\Form1.vb:line 167 at System.ComponentModel.BackgroundWorker.OnDoWork(DoWorkEventArgs e) at System.ComponentModel.BackgroundWorker.WorkerThreadStart(Object argument)
Private Sub SetControlEnabled(ByVal ctl As Control, ByVal enabled As Boolean) If ctl.InvokeRequired Then ctl.BeginInvoke(New Action(Of Control, Boolean)(AddressOf SetControlEnabled), ctl, enabled) Else ctl.Enabled = enabled End If End Sub
System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls = False
<System.Runtime.CompilerServices.Extension()> _ Public Sub Invoke(ByVal control As Control, ByVal action As Action) If control.InvokeRequired Then control.Invoke(New MethodInvoker(Sub() action()), Nothing) Else action.Invoke() End If End Sub
cboServerList.Invoke(Sub() cboServerList.Items.Clear())
cboServerList.Invoke(Sub() cboServerList.Items.Add("Hello World"))
Private Sub SetText(ByVal [text] As String) If Me.textBox1.InvokeRequired Then Dim d As New SetTextCallback(AddressOf SetText) Me.Invoke(d, New Object() {[text]}) Else Me.textBox1.Text = [text] End If End Sub
System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls = False
If e.Key = Key.F5 Then Dim peer As New ButtonAutomationPeer(btnExecute) Dim invokeProv As IInvokeProvider = TryCast(peer.GetPattern(PatternInterface.Invoke), IInvokeProvider) invokeProv.Invoke() End If
Textbox1.BackColor = System.Drawing.ColorTranslator.FromHtml("
.focusfld { background-color: } .normalfld { background-color: }
function DoFocus(fld) { fld.className = } function DoBlur(fld) { fld.className= }
TempTextBox.Attributes.Add("onFocus", "DoFocus(this);"); TempTextBox.Attributes.Add("onBlur", "DoBlur(this);");
public Color HexColor(String hex) { hex = hex.Replace(" byte a = 255; byte r = 255; byte g = 255; byte b = 255; int start = 0; if (hex.Length == 8) { a = byte.Parse(hex.Substring(0, 2), System.Globalization.NumberStyles.HexNumber); start = 2; } r = byte.Parse(hex.Substring(start, 2), System.Globalization.NumberStyles.HexNumber); g = byte.Parse(hex.Substring(start+2, 2), System.Globalization.NumberStyles.HexNumber); b = byte.Parse(hex.Substring(start+4, 2), System.Globalization.NumberStyles.HexNumber); return Color.FromArgb(a, r, g, b); }
Color c = HexColor(" Textbox1.BackColor = HexColor("
