set.seed(1) Data <- data.frame( X = sample(1:10), Y = sample(c("yes", "no"), 10, replace = TRUE) )
> dput(head(iris,4)) structure(list(Sepal.Length = c(5.1, 4.9, 4.7, 4.6), Sepal.Width = c(3.5, 3, 3.2, 3.1), Petal.Length = c(1.4, 1.4, 1.3, 1.5), Petal.Width = c(0.2, 0.2, 0.2, 0.2), Species = structure(c(1L, 1L, 1L, 1L), .Label = c("setosa", "versicolor", "virginica"), class = "factor")), .Names = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species"), row.names = c(NA, 4L), class = "data.frame")
> dput(droplevels(head(iris, 4))) structure(list(Sepal.Length = c(5.1, 4.9, 4.7, 4.6), Sepal.Width = c(3.5, 3, 3.2, 3.1), Petal.Length = c(1.4, 1.4, 1.3, 1.5), Petal.Width = c(0.2, 0.2, 0.2, 0.2), Species = structure(c(1L, 1L, 1L, 1L), .Label = "setosa", class = "factor")), .Names = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species"), row.names = c(NA, 4L), class = "data.frame")
zz <- "Sepal.Length Sepal.Width Petal.Length Petal.Width Species 1 5.1 3.5 1.4 0.2 setosa 2 4.9 3.0 1.4 0.2 setosa 3 4.7 3.2 1.3 0.2 setosa 4 4.6 3.1 1.5 0.2 setosa 5 5.0 3.6 1.4 0.2 setosa 6 5.4 3.9 1.7 0.4 setosa" Data <- read.table(text=zz, header = TRUE)
my.df <- data.frame(col1 = sample(c(1,2), 10, replace = TRUE), col2 = as.factor(sample(10)), col3 = letters[1:10], col4 = sample(c(TRUE, FALSE), 10, replace = TRUE)) my.list <- list(list1 = my.df, list2 = my.df[3], list3 = letters)
library(vegan) data(varespec) ord <- metaMDS(varespec)
my.df2 <- data.frame(a = sample(10e6), b = sample(letters, 10e6, replace = TRUE))
library(raster) r1 <- r2 <- r3 <- raster(nrow=10, ncol=10) values(r1) <- runif(ncell(r1)) values(r2) <- runif(ncell(r2)) values(r3) <- runif(ncell(r3)) s <- stack(r1, r2, r3)
library(rgdal) ogrDrivers() dsn <- system.file("vectors", package = "rgdal")[1] ogrListLayers(dsn) ogrInfo(dsn=dsn, layer="cities") cities <- readOGR(dsn=dsn, layer="cities")
install.packages("devtools") library(devtools) source_url("https: reproduce(myData)
DF <- data.frame(id=rep(LETTERS, each=4)[1:100], replicate(100, sample(1001, 100)), Class=sample(c("Yes", "No"), 100, TRUE))
This is what the sample looks like: id X1 X73 Class 1 A 266 960 Yes 2 A 373 315 No Notice the selection split 3 A 573 208 No (which can be turned off) 4 A 907 850 Yes 5 B 202 46 Yes 6 B 895 969 Yes <~~~ 70 % of selection is from the top rows 7 B 940 928 No 98 Y 371 171 Yes 99 Y 733 364 Yes <~~~ 30 % of selection is from the bottom rows. 100 Y 546 641 No ==X==============================================================X== Copy+Paste this part. (If on a Mac, it is already copied!) ==X==============================================================X== DF <- structure(list(id = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 25L, 25L, 25L), .Label = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y"), class = "factor"), X1 = c(266L, 373L, 573L, 907L, 202L, 895L, 940L, 371L, 733L, 546L), X73 = c(960L, 315L, 208L, 850L, 46L, 969L, 928L, 171L, 364L, 641L), Class = structure(c(2L, 1L, 1L, 2L, 2L, 2L, 1L, 2L, 2L, 1L), .Label = c("No", "Yes"), class = "factor")), .Names = c("id", "X1", "X73", "Class"), class = "data.frame", row.names = c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 98L, 99L, 100L)) ==X==============================================================X==
==X==============================================================X== Copy+Paste this part. (If on a Mac, it is already copied!) ==X==============================================================X== DF <- structure(list(id = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 25L,25L, 25L), .Label = c("A", "B", "C", "D", "E", "F", "G", "H","I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U","V", "W", "X", "Y"), class = "factor"), X1 = c(809L, 81L, 862L,747L, 224L, 721L, 310L, 53L, 853L, 642L), X2 = c(926L, 409L,825L, 702L, 803L, 63L, 319L, 941L, 598L, 830L), X16 = c(447L,164L, 8L, 775L, 471L, 196L, 30L, 420L, 47L, 327L), X22 = c(335L,164L, 503L, 407L, 662L, 139L, 111L, 721L, 340L, 178L)), .Names = c("id","X1", "X2", "X16", "X22"), class = "data.frame", row.names = c(1L,2L, 3L, 4L, 5L, 6L, 7L, 98L, 99L, 100L)) ==X==============================================================X==
> x <- matrix(1:8, nrow=4, ncol=2, dimnames=list(c("A","B","C","D"), c("x","y")) > x x y A 1 5 B 2 6 C 3 7 D 4 8 >
> x.df <- reshape(data.frame(row=rownames(x), x), direction="long", varying=list(colnames(x)), times=colnames(x), v.names="value", timevar="col", idvar="row")
df <- read.table(header=T, text="Sepal.Length Sepal.Width Petal.Length Petal.Width Species 1 5.1 3.5 1.4 0.2 setosa 2 4.9 3.0 1.4 0.2 setosa 3 4.7 3.2 1.3 0.2 setosa 4 4.6 3.1 1.5 0.2 setosa 5 5.0 3.6 1.4 0.2 setosa 6 5.4 3.9 1.7 0.4 setosa ")
mydata <- data.frame(a=character(0), b=numeric(0), c=numeric(0), d=numeric(0)) >fix(mydata)
set.seed(1) myData <- data.frame(a=sample(letters[1:5], 20, rep=T), b=runif(20))
cyl mean.hp 1: 6 122.28571 2: 4 82.63636 3: 8 209.21429
install.packages("SciencesPo") dt <- data.frame( Z = sample(LETTERS,10), X = sample(1:10), Y = sample(c("yes", "no"), 10, replace = TRUE) ) > dt Z X Y 1 D 8 no 2 T 1 yes 3 J 7 no 4 K 6 no 5 U 2 no 6 A 10 yes 7 Y 5 no 8 M 9 yes 9 X 4 yes 10 Z 3 no
> anonymize(dt) Z X Y 1 b2 2.5 c1 2 b6 -4.5 c2 3 b3 1.5 c1 4 b4 0.5 c1 5 b7 -3.5 c1 6 b1 4.5 c2 7 b9 -0.5 c1 8 b5 3.5 c2 9 b8 -1.5 c2 10 b10 -2.5 c1
> anonymize(sample.df(dt,5,vars=c("Y","X"))) Y X 1 a1 -0.4 2 a1 0.6 3 a2 -2.4 4 a1 -1.4 5 a2 3.6
names(mtcars) your problem demostrated on the mtcars data set
if (!require("pacman")) install.packages("pacman") pacman::p_load_gh("trinker/wakefield")
r_data_frame( n = 500, id, race, age, sex, hour, iq, height, died )
ID Race Age Sex Hour IQ Height Died 1 001 White 33 Male 00:00:00 104 74 TRUE 2 002 White 24 Male 00:00:00 78 69 FALSE 3 003 Asian 34 Female 00:00:00 113 66 TRUE 4 004 White 22 Male 00:00:00 124 73 TRUE 5 005 White 25 Female 00:00:00 95 72 TRUE 6 006 White 26 Female 00:00:00 104 69 TRUE 7 007 Black 30 Female 00:00:00 111 71 FALSE 8 008 Black 29 Female 00:00:00 100 64 TRUE 9 009 Asian 25 Male 00:30:00 106 70 FALSE 10 010 White 27 Male 00:30:00 121 68 FALSE .. ... ... ... ... ... ... ... ...
If I have a matrix x as follows: > x <- matrix(1:8, nrow=4, ncol=2, dimnames=list(c("A","B","C","D"), c("x","y"))) > x x y A 1 5 B 2 6 C 3 7 D 4 8 > How can I turn it into a dataframe with 8 rows, and three columns named `row`, `col`, and `value`, which have the dimension names as the values of `row` and `col`, like this: > x.df row col value 1 A x 1 ... (To which the answer might be: > x.df <- reshape(data.frame(row=rownames(x), x), direction="long", + varying=list(colnames(x)), times=colnames(x), + v.names="value", timevar="col", idvar="row") )
x <- matrix(1:8, nrow=4, ncol=2, dimnames=list(c("A","B","C","D"), c("x","y"))) x x.df <- reshape(data.frame(row=rownames(x), x), direction="long", varying=list(colnames(x)), times=colnames(x), v.names="value", timevar="col", idvar="row")
typeof(mydf1), what it is. length(mydf1), how many elements it contains. attributes(mydf1), additional arbitrary metadata. head(str(mydf1))
library(testthat) if (y >= 10) { expect_equal(x, 1.23) } else { expect_equal(x, 3.21) }
dd <- data.frame(b = factor(c("Hi", "Med", "Hi", "Low"), levels = c("Low", "Med", "Hi"), ordered = TRUE), x = c("A", "D", "A", "C"), y = c(8, 3, 9, 9), z = c(1, 1, 1, 2)) dd b x y z 1 Hi A 8 1 2 Med D 3 1 3 Hi A 9 1 4 Low C 9 2
R> dd[with(dd, order(-z, b)), ] b x y z 4 Low C 9 2 2 Med D 3 1 1 Hi A 8 1 3 Hi A 9 1
R> dd[order(-dd[,4], dd[,1]), ] b x y z 4 Low C 9 2 2 Med D 3 1 1 Hi A 8 1 3 Hi A 9 1 R>
dd <- data.frame(b = factor(c("Hi", "Med", "Hi", "Low"), levels = c("Low", "Med", "Hi"), ordered = TRUE), x = c("A", "D", "A", "C"), y = c(8, 3, 9, 9), z = c(1, 1, 1, 2)) library(taRifx) sort(dd, f= ~ -z + b )
dd <- data.frame(b = factor(c("Hi", "Med", "Hi", "Low"), levels = c("Low", "Med", "Hi"), ordered = TRUE), x = c("A", "D", "A", "C"), y = c(8, 3, 9, 9), z = c(1, 1, 1, 2)) library(microbenchmark) microbenchmark(dd[with(dd, order(-z, b)), ] , dd[order(-dd$z, dd$b),], times=1000 )
library(taRifx) microbenchmark(sort(dd, f= ~-z+b ),times=1000)
library(plyr) microbenchmark(arrange(dd,desc(z),b),times=1000)
library(doBy) microbenchmark(orderBy(~-z+b, data=dd),times=1000)
library(Deducer) microbenchmark(sortData(dd,c("z","b"),increasing= c(FALSE,TRUE)),times=1000)
esort <- function(x, sortvar, ...) { attach(x) x <- x[with(x,order(sortvar,...)),] return(x) detach(x) } microbenchmark(esort(dd, -z, b),times=1000)
m <- microbenchmark( arrange(dd,desc(z),b), sort(dd, f= ~-z+b ), dd[with(dd, order(-z, b)), ] , dd[order(-dd$z, dd$b),], times=1000 ) uq <- function(x) { fivenum(x)[4]} lq <- function(x) { fivenum(x)[2]} y_min <- 0 y_max <- max(by(m$time,m$expr,uq)) * 1.05 p <- ggplot(m,aes(x=expr,y=time)) + coord_cartesian(ylim = c( y_min , y_max )) p + stat_summary(fun.y=median,fun.ymin = lq, fun.ymax = uq, aes(fill=expr))
quarterlyreport[with(quarterlyreport,order(-z,b)),]
quarterlyreport[with(lastquarterlyreport,order(-z,b)),]
quarterlyreport[with(lastquarterlyreport,order(-z,b)),]
library(dplyr) arrange(mtcars, mpg) arrange(mtcars , mpg, cyl, wt)
arrange(dd, desc(z), b) b x y z 1 Low C 9 2 2 Med D 3 1 3 Hi A 8 1 4 Hi A 9 1
require(plyr) require(doBy) require(data.table) require(dplyr) require(taRifx) set.seed(45L) dat = data.frame(b = as.factor(sample(c("Hi", "Med", "Low"), 1e8, TRUE)), x = sample(c("A", "D", "C"), 1e8, TRUE), y = sample(100, 1e8, TRUE), z = sample(5, 1e8, TRUE), stringsAsFactors = FALSE)
orderBy( ~ -z + b, data = dat) plyr::arrange(dat, desc(z), b) arrange(dat, desc(z), b) sort(dat, f = ~ -z + b) dat[with(dat, order(-z, b)), ] setDT(dat) dat[order(-z, b)] setorder(dat, -z, b)
library(Deducer) dd<- sortData(dd,c("z","b"),increasing= c(FALSE,TRUE))
set.seed(1234) ID = 1:10 Age = round(rnorm(10, 50, 1)) diag = c("Depression", "Bipolar") Diagnosis = sample(diag, 10, replace=TRUE) data = data.frame(ID, Age, Diagnosis) databyAge = data[order(Age),] databyAge
my.data <- read.table(text = ' id age diagnosis 1 49 Depression 2 50 Depression 3 51 Depression 4 48 Depression 5 50 Depression 6 51 Bipolar 7 49 Bipolar 8 49 Bipolar 9 49 Bipolar 10 49 Depression
set.seed(1234) v1 <- c(0,0,0,0, 0,0,0,0, 1,1,1,1, 1,1,1,1) v2 <- c(0,0,0,0, 1,1,1,1, 0,0,0,0, 1,1,1,1) v3 <- c(0,0,1,1, 0,0,1,1, 0,0,1,1, 0,0,1,1) v4 <- c(0,1,0,1, 0,1,0,1, 0,1,0,1, 0,1,0,1) df.1 <- data.frame(v1, v2, v3, v4) df.1 rdf.1 <- df.1[sample(nrow(df.1), nrow(df.1), replace = FALSE),] rdf.1 order.rdf.1 <- rdf.1[do.call(order, as.list(rdf.1)),] order.rdf.1 order.rdf.2 <- rdf.1[do.call(order, rev(as.list(rdf.1))),] order.rdf.2 rdf.3 <- data.frame(rdf.1$v2, rdf.1$v4, rdf.1$v3, rdf.1$v1) rdf.3 order.rdf.3 <- rdf.1[do.call(order, as.list(rdf.3)),] order.rdf.3
df1 <- tbl_df(iris) arrange_(df1, c( arrange_(df1, ~Petal.Length, ~Petal.Width) Source: local data frame [150 x 5] Sepal.Length Sepal.Width Petal.Length Petal.Width Species (dbl) (dbl) (dbl) (dbl) (fctr) 1 4.6 3.6 1.0 0.2 setosa 2 4.3 3.0 1.1 0.1 setosa 3 5.8 4.0 1.2 0.2 setosa 4 5.0 3.2 1.2 0.2 setosa 5 4.7 3.2 1.3 0.2 setosa 6 5.4 3.9 1.3 0.4 setosa 7 5.5 3.5 1.3 0.2 setosa 8 4.4 3.0 1.3 0.2 setosa 9 5.0 3.5 1.3 0.3 setosa 10 4.5 2.3 1.3 0.3 setosa .. ... ... ... ... ... sortBy <- c( arrange_(df1, .dots = sortBy) Source: local data frame [150 x 5] Sepal.Length Sepal.Width Petal.Length Petal.Width Species (dbl) (dbl) (dbl) (dbl) (fctr) 1 4.6 3.6 1.0 0.2 setosa 2 4.3 3.0 1.1 0.1 setosa 3 5.8 4.0 1.2 0.2 setosa 4 5.0 3.2 1.2 0.2 setosa 5 4.7 3.2 1.3 0.2 setosa 6 5.5 3.5 1.3 0.2 setosa 7 4.4 3.0 1.3 0.2 setosa 8 4.4 3.2 1.3 0.2 setosa 9 5.0 3.5 1.3 0.3 setosa 10 4.5 2.3 1.3 0.3 setosa .. ... ... ... ... ... sortByDesc <- c( arrange_(df1, .dots = sortByDesc)
dt1 <- data.table(iris) sortBy <- c( sortType <- c(-1, 1) setorderv(dt1, sortBy, sortType) dt1 Sepal.Length Sepal.Width Petal.Length Petal.Width Species 1: 7.7 2.6 6.9 2.3 virginica 2: 7.7 2.8 6.7 2.0 virginica 3: 7.7 3.8 6.7 2.2 virginica 4: 7.6 3.0 6.6 2.1 virginica 5: 7.9 3.8 6.4 2.0 virginica --- 146: 5.4 3.9 1.3 0.4 setosa 147: 5.8 4.0 1.2 0.2 setosa 148: 5.0 3.2 1.2 0.2 setosa 149: 4.3 3.0 1.1 0.1 setosa 150: 4.6 3.6 1.0 0.2 setosa
library(BBmisc) sortByCol(dd, c("z", "b"), asc = c(FALSE, TRUE)) b x y z 4 Low C 9 2 2 Med D 3 1 1 Hi A 8 1 3 Hi A 9 1
library(microbenchmark) microbenchmark(sortByCol(dd, c("z", "b"), asc = c(FALSE, TRUE)), times = 100000) median 202.878 library(plyr) microbenchmark(arrange(dd,desc(z),b),times=100000) median 148.758 microbenchmark(dd[with(dd, order(-z, b)), ], times = 100000) median 115.872
> library(rgr) > gx.sort.df(dd, ~ -z+b) b x y z 4 Low C 9 2 2 Med D 3 1 1 Hi A 8 1 3 Hi A 9 1
df1 = data.frame(CustomerId = c(1:6), Product = c(rep("Toaster", 3), rep("Radio", 3))) df2 = data.frame(CustomerId = c(2, 4, 6), State = c(rep("Alabama", 2), rep("Ohio", 1))) df1 df2
library(sqldf) df3 <- sqldf("SELECT CustomerId, Product, State FROM df1 JOIN df2 USING(CustomerID)") df4 <- sqldf("SELECT CustomerId, Product, State FROM df1 LEFT JOIN df2 USING(CustomerID)")
library(data.table) dt1 <- data.table(df1, key = "CustomerId") dt2 <- data.table(df2, key = "CustomerId") joined.dt1.dt.2 <- dt1[dt2]
library(dplyr) df1$CustomerId <- as.numeric(df1$CustomerId) df2$CustomerId <- as.numeric(df2$CustomerId)
inner_join(df1, df2) left_join(df1, df2) right_join(df1, df2) left_join(df2, df1) full_join(df1, df2)
df1 = data.frame(CustomerId = c(1:6), Product = c(rep("Toaster", 3), rep("Radio", 3))) df2 = data.frame(CustomerId = c(2L, 4L, 7L), State = c(rep("Alabama", 2), rep("Ohio", 1))) library(data.table) dt1 = as.data.table(df1) dt2 = as.data.table(df2) setkey(dt1, CustomerId) setkey(dt2, CustomerId) dt1[dt2] setkey(dt1, NULL) setkey(dt2, NULL) dt1[dt2, on = "CustomerId"] dt2[dt1, on = "CustomerId"] dt1[dt2, nomatch=0L, on = "CustomerId"] dt1[!dt2, on = "CustomerId"] merge(dt1, dt2, by = "CustomerId") merge(dt1, dt2, by = "CustomerId", all = TRUE)
library(microbenchmark) library(sqldf) library(dplyr) library(data.table) n = 5e6 set.seed(123) df1 = data.frame(x=sample(n,n-1L), y1=rnorm(n-1L)) df2 = data.frame(x=sample(n,n-1L), y2=rnorm(n-1L)) dt1 = as.data.table(df1) dt2 = as.data.table(df2) microbenchmark(times = 10L, base = merge(df1, df2, by = "x"), sqldf = sqldf("SELECT * FROM df1 INNER JOIN df2 ON df1.x = df2.x"), dplyr = inner_join(df1, df2, by = "x"), data.table = dt1[dt2, nomatch = 0L, on = "x"]) microbenchmark(times = 10L, base = merge(df1, df2, by = "x", all.x = TRUE), sqldf = sqldf("SELECT * FROM df1 LEFT OUTER JOIN df2 ON df1.x = df2.x"), dplyr = left_join(df1, df2, by = c("x"="x")), data.table = dt2[dt1, on = "x"]) microbenchmark(times = 10L, base = merge(df1, df2, by = "x", all.y = TRUE), sqldf = sqldf("SELECT * FROM df2 LEFT OUTER JOIN df1 ON df2.x = df1.x"), dplyr = right_join(df1, df2, by = "x"), data.table = dt1[dt2, on = "x"]) microbenchmark(times = 10L, base = merge(df1, df2, by = "x", all = TRUE), dplyr = full_join(df1, df2, by = "x"), data.table = merge(dt1, dt2, by = "x", all = TRUE))
df1 <- data.frame(CustomerId=1:6,Product=c(rep( df2 <- data.frame(CustomerId=c(2L,4L,6L,7L),State=c(rep( df1[names(df2)[-1L]] <- df2[match(df1[,1L],df2[,1L]),-1L]; df1;
library(microbenchmark); library(data.table); library(sqldf); library(plyr); library(dplyr); solSpecs <- list( merge=list(testFuncs=list( inner=function(df1,df2,key) merge(df1,df2,key), left =function(df1,df2,key) merge(df1,df2,key,all.x=T), right=function(df1,df2,key) merge(df1,df2,key,all.y=T), full =function(df1,df2,key) merge(df1,df2,key,all=T) )), data.table.unkeyed=list(argSpec= inner=function(dt1,dt2,key) dt1[dt2,on=key,nomatch=0L,allow.cartesian=T], left =function(dt1,dt2,key) dt2[dt1,on=key,allow.cartesian=T], right=function(dt1,dt2,key) dt1[dt2,on=key,allow.cartesian=T], full =function(dt1,dt2,key) merge(dt1,dt2,key,all=T,allow.cartesian=T) )), data.table.keyed=list(argSpec= inner=function(dt1,dt2) dt1[dt2,nomatch=0L,allow.cartesian=T], left =function(dt1,dt2) dt2[dt1,allow.cartesian=T], right=function(dt1,dt2) dt1[dt2,allow.cartesian=T], full =function(dt1,dt2) merge(dt1,dt2,all=T,allow.cartesian=T) )), sqldf.unindexed=list(testFuncs=list( inner=function(df1,df2,key) sqldf(paste0( left =function(df1,df2,key) sqldf(paste0( right=function(df1,df2,key) sqldf(paste0( )), sqldf.indexed=list(testFuncs=list( inner=function(df1,df2,key) sqldf(paste0( left =function(df1,df2,key) sqldf(paste0( right=function(df1,df2,key) sqldf(paste0( )), plyr=list(testFuncs=list( inner=function(df1,df2,key) join(df1,df2,key, left =function(df1,df2,key) join(df1,df2,key, right=function(df1,df2,key) join(df1,df2,key, full =function(df1,df2,key) join(df1,df2,key, )), dplyr=list(testFuncs=list( inner=function(df1,df2,key) inner_join(df1,df2,key), left =function(df1,df2,key) left_join(df1,df2,key), right=function(df1,df2,key) right_join(df1,df2,key), full =function(df1,df2,key) full_join(df1,df2,key) )), in.place=list(testFuncs=list( left =function(df1,df2,key) { cns <- setdiff(names(df2),key); df1[cns] <- df2[match(df1[,key],df2[,key]),cns]; df1; }, right=function(df1,df2,key) { cns <- setdiff(names(df1),key); df2[cns] <- df1[match(df2[,key],df1[,key]),cns]; df2; } )) ); getSolTypes <- function() names(solSpecs); getJoinTypes <- function() unique(unlist(lapply(solSpecs,function(x) names(x$testFuncs)))); getArgSpec <- function(argSpecs,key=NULL) if (is.null(key)) argSpecs$default else argSpecs[[key]]; initSqldf <- function() { sqldf(); if (exists( sqldf(); } else { assign( }; invisible(); }; setUpBenchmarkCall <- function(argSpecs,joinType,solTypes=getSolTypes(),env=parent.frame()) { callExpressions <- list(); nms <- character(); for (solType in solTypes) { testFunc <- solSpecs[[solType]]$testFuncs[[joinType]]; if (is.null(testFunc)) next; testFuncName <- paste0( assign(testFuncName,testFunc,envir=env); argSpecKey <- solSpecs[[solType]]$argSpec; argSpec <- getArgSpec(argSpecs,argSpecKey); argList <- setNames(nm=names(argSpec$args),vector( for (i in seq_along(argSpec$args)) { argName <- paste0( assign(argName,argSpec$args[[i]],envir=env); argList[[i]] <- if (i%in%argSpec$copySpec) call( }; callExpressions[[length(callExpressions)+1L]] <- do.call(call,c(list(testFuncName),argList),quote=T); nms[length(nms)+1L] <- solType; }; names(callExpressions) <- nms; callExpressions; }; harmonize <- function(res) { res <- as.data.frame(res); for (ci in which(sapply(res,is.factor))) res[[ci]] <- as.character(res[[ci]]); for (ci in which(sapply(res,is.logical))) res[[ci]] <- as.integer(res[[ci]]); res <- res[order(names(res))]; res <- res[do.call(order,res),]; res; }; checkIdentical <- function(argSpecs,solTypes=getSolTypes()) { for (joinType in getJoinTypes()) { callExpressions <- setUpBenchmarkCall(argSpecs,joinType,solTypes); if (length(callExpressions)<2L) next; ex <- harmonize(eval(callExpressions[[1L]])); for (i in seq(2L,len=length(callExpressions)-1L)) { y <- harmonize(eval(callExpressions[[i]])); if (!isTRUE(all.equal(ex,y,check.attributes=F))) { ex <<- ex; y <<- y; solType <- names(callExpressions)[i]; stop(paste0( }; }; }; invisible(); }; testJoinType <- function(argSpecs,joinType,solTypes=getSolTypes(),metric=NULL,times=100L) { callExpressions <- setUpBenchmarkCall(argSpecs,joinType,solTypes); bm <- microbenchmark(list=callExpressions,times=times); if (is.null(metric)) return(bm); bm <- summary(bm); res <- setNames(nm=names(callExpressions),bm[[metric]]); attr(res, res; }; testAllJoinTypes <- function(argSpecs,solTypes=getSolTypes(),metric=NULL,times=100L) { joinTypes <- getJoinTypes(); resList <- setNames(nm=joinTypes,lapply(joinTypes,function(joinType) testJoinType(argSpecs,joinType,solTypes,metric,times))); if (is.null(metric)) return(resList); units <- unname(unlist(lapply(resList,attr, res <- do.call(data.frame,c(list(join=joinTypes),setNames(nm=solTypes,rep(list(rep(NA_real_,length(joinTypes))),length(solTypes))),list(unit=units,stringsAsFactors=F))); for (i in seq_along(resList)) res[i,match(names(resList[[i]]),names(res))] <- resList[[i]]; res; }; testGrid <- function(makeArgSpecsFunc,sizes,overlaps,solTypes=getSolTypes(),joinTypes=getJoinTypes(),metric= res <- expand.grid(size=sizes,overlap=overlaps,joinType=joinTypes,stringsAsFactors=F); res[solTypes] <- NA_real_; res$unit <- NA_character_; for (ri in seq_len(nrow(res))) { size <- res$size[ri]; overlap <- res$overlap[ri]; joinType <- res$joinType[ri]; argSpecs <- makeArgSpecsFunc(size,overlap); checkIdentical(argSpecs,solTypes); cur <- testJoinType(argSpecs,joinType,solTypes,metric,times); res[ri,match(names(cur),names(res))] <- cur; res$unit[ri] <- attr(cur, }; res; };
argSpecs <- list( default=list(copySpec=1:2,args=list( df1 <- data.frame(CustomerId=1:6,Product=c(rep( df2 <- data.frame(CustomerId=c(2L,4L,6L,7L),State=c(rep( )), data.table.unkeyed=list(copySpec=1:2,args=list( as.data.table(df1), as.data.table(df2), )), data.table.keyed=list(copySpec=1:2,args=list( setkey(as.data.table(df1),CustomerId), setkey(as.data.table(df2),CustomerId) )) ); initSqldf(); sqldf( sqldf( checkIdentical(argSpecs); testAllJoinTypes(argSpecs,metric=
makeArgSpecs.singleIntegerKey.optionalOneToOne <- function(size,overlap) { com <- as.integer(size*overlap); argSpecs <- list( default=list(copySpec=1:2,args=list( df1 <- data.frame(id=sample(size),y1=rnorm(size),y2=rnorm(size)), df2 <- data.frame(id=sample(c(if (com>0L) sample(df1$id,com) else integer(),seq(size+1L,len=size-com))),y3=rnorm(size),y4=rnorm(size)), )), data.table.unkeyed=list(copySpec=1:2,args=list( as.data.table(df1), as.data.table(df2), )), data.table.keyed=list(copySpec=1:2,args=list( setkey(as.data.table(df1),id), setkey(as.data.table(df2),id) )) ); initSqldf(); sqldf( sqldf( argSpecs; }; sizes <- c(1e1L,1e3L,1e6L); overlaps <- c(0.99,0.5,0.01); system.time({ res <- testGrid(makeArgSpecs.singleIntegerKey.optionalOneToOne,sizes,overlaps); });
plotRes <- function(res,titleFunc,useFloor=F) { solTypes <- setdiff(names(res),c( normMult <- c(microseconds=1e-3,milliseconds=1); joinTypes <- getJoinTypes(); cols <- c(merge= pchs <- list(inner=20L,left= cexs <- c(inner=0.7,left=1,right=1,full=0.7); NP <- 60L; ord <- order(decreasing=T,colMeans(res[res$size==max(res$size),solTypes],na.rm=T)); ymajors <- data.frame(y=c(1,1e3),label=c( for (overlap in unique(res$overlap)) { x1 <- res[res$overlap==overlap,]; x1[solTypes] <- x1[solTypes]*normMult[x1$unit]; x1$unit <- NULL; xlim <- c(1e1,max(x1$size)); xticks <- 10^seq(log10(xlim[1L]),log10(xlim[2L])); ylim <- c(1e-1,10^((if (useFloor) floor else ceiling)(log10(max(x1[solTypes],na.rm=T))))); yticks <- 10^seq(log10(ylim[1L]),log10(ylim[2L])); yticks.minor <- rep(yticks[-length(yticks)],each=9L)*1:9; plot(NA,xlim=xlim,ylim=ylim,xaxs= abline(v=xticks,col= abline(h=yticks.minor,col= abline(h=yticks,col= axis(1L,xticks,parse(text=sprintf( axis(2L,yticks,parse(text=sprintf( axis(4L,ymajors$y,ymajors$label,las=1L,tick=F,cex.axis=0.7,hadj=0.5); for (joinType in rev(joinTypes)) { x2 <- x1[x1$joinType==joinType,]; for (solType in solTypes) { if (any(!is.na(x2[[solType]]))) { xy <- spline(x2$size,x2[[solType]],xout=10^(seq(log10(x2$size[1L]),log10(x2$size[nrow(x2)]),len=NP))); points(xy$x,xy$y,pch=pchs[[joinType]],col=cols[solType],cex=cexs[joinType],xpd=NA); }; }; }; leg.cex <- 0.7; leg.x.in <- grconvertX(0.275, leg.y.in <- grconvertY(0.6, leg.x.user <- grconvertX(leg.x.in, leg.y.user <- grconvertY(leg.y.in, leg.outpad.w.in <- 0.1; leg.outpad.h.in <- 0.1; leg.midpad.w.in <- 0.1; leg.midpad.h.in <- 0.1; leg.sol.w.in <- max(strwidth(solTypes, leg.sol.h.in <- max(strheight(solTypes, leg.join.w.in <- max(strheight(joinTypes, leg.join.h.in <- max(strwidth(joinTypes, leg.main.w.in <- leg.join.w.in*length(joinTypes); leg.main.h.in <- leg.sol.h.in*length(solTypes); leg.x2.user <- grconvertX(leg.x.in+leg.outpad.w.in*2+leg.main.w.in+leg.midpad.w.in+leg.sol.w.in, leg.y2.user <- grconvertY(leg.y.in+leg.outpad.h.in*2+leg.main.h.in+leg.midpad.h.in+leg.join.h.in, leg.cols.x.user <- grconvertX(leg.x.in+leg.outpad.w.in+leg.join.w.in*(0.5+seq(0L,length(joinTypes)-1L)), leg.lines.y.user <- grconvertY(leg.y.in+leg.outpad.h.in+leg.main.h.in-leg.sol.h.in*(0.5+seq(0L,length(solTypes)-1L)), leg.sol.x.user <- grconvertX(leg.x.in+leg.outpad.w.in+leg.main.w.in+leg.midpad.w.in, leg.join.y.user <- grconvertY(leg.y.in+leg.outpad.h.in+leg.main.h.in+leg.midpad.h.in, rect(leg.x.user,leg.y.user,leg.x2.user,leg.y2.user,col= text(leg.sol.x.user,leg.lines.y.user,solTypes[ord],cex=leg.cex,pos=4L,offset=0); text(leg.cols.x.user,leg.join.y.user,joinTypes,cex=leg.cex,pos=4L,offset=0,srt=90); for (i in seq_along(joinTypes)) { joinType <- joinTypes[i]; points(rep(leg.cols.x.user[i],length(solTypes)),ifelse(colSums(!is.na(x1[x1$joinType==joinType,solTypes[ord]]))==0L,NA,leg.lines.y.user),pch=pchs[[joinType]],col=cols[solTypes[ord]]); }; title(titleFunc(overlap)); readline(sprintf( }; }; titleFunc <- function(overlap) sprintf( plotRes(res,titleFunc,T);
makeArgSpecs.assortedKey.optionalManyToMany <- function(size,overlap,uniquePct=75) { u1Size <- as.integer(size*uniquePct/100); u1SizePerKeyColumn <- as.integer(ceiling(u1Size^(1/3))); keys1 <- expand.grid(stringsAsFactors=F, idCharacter=replicate(u1SizePerKeyColumn,paste(collapse= idInteger=sample(u1SizePerKeyColumn), idLogical=sample(c(F,T),u1SizePerKeyColumn,T) )[seq_len(u1Size),]; keys1 <- rbind(keys1,keys1[sample(nrow(keys1),size-u1Size,T),])[sample(size),]; com <- as.integer(size*overlap); uni <- size-com; keys2 <- data.frame(stringsAsFactors=F, idCharacter=replicate(uni,paste(collapse= idInteger=u1SizePerKeyColumn+sample(uni), idLogical=sample(c(F,T),uni,T) ); keys2 <- rbind(keys2,keys1[sample(nrow(keys1),com,T),])[sample(size),]; keyNames <- c( argSpecs <- list( default=list(copySpec=1:2,args=list( df1 <- cbind(stringsAsFactors=F,keys1,y1=sample(c(F,T),size,T),y2=sample(size),y3=rnorm(size),y4=replicate(size,paste(collapse= df2 <- cbind(stringsAsFactors=F,keys2,y5=sample(c(F,T),size,T),y6=sample(size),y7=rnorm(size),y8=replicate(size,paste(collapse= keyNames )), data.table.unkeyed=list(copySpec=1:2,args=list( as.data.table(df1), as.data.table(df2), keyNames )), data.table.keyed=list(copySpec=1:2,args=list( setkeyv(as.data.table(df1),keyNames), setkeyv(as.data.table(df2),keyNames) )) ); initSqldf(); sqldf(paste0( sqldf(paste0( argSpecs; }; sizes <- c(1e1L,1e3L,1e5L); overlaps <- c(0.99,0.5,0.01); solTypes <- setdiff(getSolTypes(), system.time({ res <- testGrid(makeArgSpecs.assortedKey.optionalManyToMany,sizes,overlaps,solTypes); });
titleFunc <- function(overlap) sprintf( plotRes(res,titleFunc,F);
merge(df1, df2) dplyr::intersect(df1, df2) data.table::fintersect(setDT(df1), setDT(df2))
df1 <- data.frame(V1 = LETTERS[1:4], V2 = 1:4) df2 <- data.frame(V1 = LETTERS[2:3], V2 = 2:3)
sales = data.frame( CustomerId = c(1, 1, 1, 3, 4, 6), Year = 2000:2005, Product = c(rep("Toaster", 3), rep("Radio", 3)) ) cust = data.frame( CustomerId = c(1, 1, 4, 6), Year = c(2001L, 2002L, 2002L, 2002L), State = state.name[1:4] ) sales cust
sales$State <- cust$State[ match(sales$CustomerId, cust$CustomerId) ] sales$State <- NULL
library(data.table) setDT(sales); setDT(cust) sales[, State := cust[sales, on=.(CustomerId, Year), x.State]] sales[, State := NULL]
sales[, State := cust[sales, on=.(CustomerId, Year), roll=TRUE, x.State]]
M <- matrix(seq(1,16), 4, 4) apply(M, 1, min) [1] 1 2 3 4 apply(M, 2, max) [1] 4 8 12 16 M <- array( seq(32), dim = c(4,4,2)) apply(M, 1, sum) [1] 120 128 136 144 apply(M, c(1,2), sum) [,1] [,2] [,3] [,4] [1,] 18 26 34 42 [2,] 20 28 36 44 [3,] 22 30 38 46 [4,] 24 32 40 48
x <- list(a = 1, b = 1:3, c = 10:100) lapply(x, FUN = length) $a [1] 1 $b [1] 3 $c [1] 91 lapply(x, FUN = sum) $a [1] 1 $b [1] 6 $c [1] 5005
x <- list(a = 1, b = 1:3, c = 10:100) sapply(x, FUN = length) a b c 1 3 91 sapply(x, FUN = sum) a b c 1 6 5005
sapply(1:5,function(x) matrix(x,2,2), simplify = "array")
x <- list(a = 1, b = 1:3, c = 10:100) vapply(x, FUN = length, FUN.VALUE = 0L) a b c 1 3 91
mapply(sum, 1:5, 1:5, 1:5) [1] 3 6 9 12 15 mapply(rep, 1:4, 4:1) [[1]] [1] 1 1 1 1 [[2]] [1] 2 2 2 [[3]] [1] 3 3 [[4]] [1] 4
Map(sum, 1:5, 1:5, 1:5) [[1]] [1] 3 [[2]] [1] 6 [[3]] [1] 9 [[4]] [1] 12 [[5]] [1] 15
myFun <- function(x){ if(is.character(x)){ return(paste(x,"!",sep="")) } else{ return(x + 1) } } l <- list(a = list(a1 = "Boo", b1 = 2, c1 = "Eeek"), b = 3, c = "Yikes", d = list(a2 = 1, b2 = list(a3 = "Hey", b3 = 5))) rapply(l, myFun) rapply(l, myFun, how="replace")
Base function Input Output plyr function --------------------------------------- aggregate d d ddply + colwise apply a a/l aaply / alply by d l dlply lapply l l llply mapply a a/l maply / mlply replicate r a/l raply / rlply sapply l a laply
ct <- tapply(iris$Sepal.Width , iris$Species , summary ) cb <- by(iris$Sepal.Width , iris$Species , summary ) cb iris$Species: setosa Min. 1st Qu. Median Mean 3rd Qu. Max. 2.300 3.200 3.400 3.428 3.675 4.400 -------------------------------------------------------------- iris$Species: versicolor Min. 1st Qu. Median Mean 3rd Qu. Max. 2.000 2.525 2.800 2.770 3.000 3.400 -------------------------------------------------------------- iris$Species: virginica Min. 1st Qu. Median Mean 3rd Qu. Max. 2.200 2.800 3.000 2.974 3.175 3.800 ct $setosa Min. 1st Qu. Median Mean 3rd Qu. Max. 2.300 3.200 3.400 3.428 3.675 4.400 $versicolor Min. 1st Qu. Median Mean 3rd Qu. Max. 2.000 2.525 2.800 2.770 3.000 3.400 $virginica Min. 1st Qu. Median Mean 3rd Qu. Max. 2.200 2.800 3.000 2.974 3.175 3.800
tapply(iris, iris$Species, summary ) Error in tapply(iris, iris$Species, summary) : arguments must have same length
bywork <- by(iris, iris$Species, summary ) bywork iris$Species: setosa Sepal.Length Sepal.Width Petal.Length Petal.Width Species Min. :4.300 Min. :2.300 Min. :1.000 Min. :0.100 setosa :50 1st Qu.:4.800 1st Qu.:3.200 1st Qu.:1.400 1st Qu.:0.200 versicolor: 0 Median :5.000 Median :3.400 Median :1.500 Median :0.200 virginica : 0 Mean :5.006 Mean :3.428 Mean :1.462 Mean :0.246 3rd Qu.:5.200 3rd Qu.:3.675 3rd Qu.:1.575 3rd Qu.:0.300 Max. :5.800 Max. :4.400 Max. :1.900 Max. :0.600 -------------------------------------------------------------- iris$Species: versicolor Sepal.Length Sepal.Width Petal.Length Petal.Width Species Min. :4.900 Min. :2.000 Min. :3.00 Min. :1.000 setosa : 0 1st Qu.:5.600 1st Qu.:2.525 1st Qu.:4.00 1st Qu.:1.200 versicolor:50 Median :5.900 Median :2.800 Median :4.35 Median :1.300 virginica : 0 Mean :5.936 Mean :2.770 Mean :4.26 Mean :1.326 3rd Qu.:6.300 3rd Qu.:3.000 3rd Qu.:4.60 3rd Qu.:1.500 Max. :7.000 Max. :3.400 Max. :5.10 Max. :1.800 -------------------------------------------------------------- iris$Species: virginica Sepal.Length Sepal.Width Petal.Length Petal.Width Species Min. :4.900 Min. :2.200 Min. :4.500 Min. :1.400 setosa : 0 1st Qu.:6.225 1st Qu.:2.800 1st Qu.:5.100 1st Qu.:1.800 versicolor: 0 Median :6.500 Median :3.000 Median :5.550 Median :2.000 virginica :50 Mean :6.588 Mean :2.974 Mean :5.552 Mean :2.026 3rd Qu.:6.900 3rd Qu.:3.175 3rd Qu.:5.875 3rd Qu.:2.300 Max. :7.900 Max. :3.800 Max. :6.900 Max. :2.500
by(iris, iris$Species, mean) iris$Species: setosa [1] NA ------------------------------------------- iris$Species: versicolor [1] NA ------------------------------------------- iris$Species: virginica [1] NA Warning messages: 1: In mean.default(data[x, , drop = FALSE], ...) : argument is not numeric or logical: returning NA 2: In mean.default(data[x, , drop = FALSE], ...) : argument is not numeric or logical: returning NA 3: In mean.default(data[x, , drop = FALSE], ...) : argument is not numeric or logical: returning NA
at <- tapply(iris$Sepal.Length , iris$Species , mean) ag <- aggregate(iris$Sepal.Length , list(iris$Species), mean) at setosa versicolor virginica 5.006 5.936 6.588 ag Group.1 x 1 setosa 5.006 2 versicolor 5.936 3 virginica 6.588
ag <- aggregate(len ~ ., data = ToothGrowth, mean) ag supp dose len 1 OJ 0.5 13.23 2 VC 0.5 7.98 3 OJ 1.0 22.70 4 VC 1.0 16.77 5 OJ 2.0 26.06 6 VC 2.0 26.14
att <- tapply(ToothGrowth$len, list(ToothGrowth$dose, ToothGrowth$supp), mean) att OJ VC 0.5 13.23 7.98 1 22.70 16.77 2 26.06 26.14
ag1 <- aggregate(cbind(Ozone, Temp) ~ Month, data = airquality, mean) ag1 Month Ozone Temp 1 5 23.61538 66.73077 2 6 29.44444 78.22222 3 7 59.11538 83.88462 4 8 59.96154 83.96154 5 9 31.44828 76.89655
ta1 <- tapply(airquality$Ozone, airquality$Month, mean, na.rm = TRUE) ta2 <- tapply(airquality$Temp, airquality$Month, mean, na.rm = TRUE) cbind(ta1, ta2) ta1 ta2 5 23.61538 65.54839 6 29.44444 79.10000 7 59.11538 83.90323 8 59.96154 83.96774 9 31.44828 76.90000
by(airquality[c("Ozone", "Temp")], airquality$Month, mean, na.rm = TRUE)
byagg <- by(airquality[c("Ozone", "Temp")], airquality$Month, summary) aggagg <- aggregate(cbind(Ozone, Temp) ~ Month, data = airquality, summary)
library(dplyr) library(data.table) set.seed(123) n = 5e7 k = 5e5 x = runif(n) grp = sample(k, n, TRUE) timing = list() timing[["sapply"]] = system.time({ lt = split(x, grp) r.sapply = sapply(lt, function(x) list(sum(x), length(x)), simplify = FALSE) }) timing[["lapply"]] = system.time({ lt = split(x, grp) r.lapply = lapply(lt, function(x) list(sum(x), length(x))) }) timing[["tapply"]] = system.time( r.tapply <- tapply(x, list(grp), function(x) list(sum(x), length(x))) ) timing[["by"]] = system.time( r.by <- by(x, list(grp), function(x) list(sum(x), length(x)), simplify = FALSE) ) timing[["aggregate"]] = system.time( r.aggregate <- aggregate(x, list(grp), function(x) list(sum(x), length(x)), simplify = FALSE) ) timing[["dplyr"]] = system.time({ df = data_frame(x, grp) r.dplyr = summarise(group_by(df, grp), sum(x), n()) }) timing[["data.table"]] = system.time({ dt = setnames(setDT(list(x, grp)), c("x","grp")) r.data.table = dt[, .(sum(x), .N), grp] }) sapply(list(sapply=r.sapply, lapply=r.lapply, tapply=r.tapply, by=r.by, aggregate=r.aggregate, dplyr=r.dplyr, data.table=r.data.table), function(x) (if(is.data.frame(x)) nrow else length)(x)==k)
as.data.table(sapply(timing, `[[`, "elapsed"), keep.rownames = TRUE )[,.(fun = V1, elapsed = V2) ][order(-elapsed)]
dfr <- data.frame(a=1:20, f=rep(LETTERS[1:5], each=4)) means <- tapply(dfr$a, dfr$f, mean) dfr$m <- means[dfr$f] dfr$m2 <- ave(dfr$a, dfr$f, FUN=mean) dfr
dfr$foo <- ave(1:nrow(dfr), dfr$f, FUN=function(x) { x <- dfr[x,] sum(x$m*x$m2) }) dfr
The outer product of the arrays X and Y is the array A with dimension c(dim(X), dim(Y)) where element A[c(arrayindex.x, arrayindex.y)] = FUN(X[arrayindex.x], Y[arrayindex.y], ...).
A<-c(1,3,5,7,9) B<-c(0,3,6,9,12) mapply(FUN=pmax, A, B) > mapply(FUN=pmax, A, B) [1] 1 3 6 9 12 outer(A,B, pmax) > outer(A,B, pmax) [,1] [,2] [,3] [,4] [,5] [1,] 1 3 6 9 12 [2,] 3 3 6 9 12 [3,] 5 5 6 9 12 [4,] 7 7 7 9 12 [5,] 9 9 9 9 12
A<-c(1,3,5,7,9) B<-c(0,3,6,9,12) C<-list(x=1, y=2) D<-function(x){x+1} > eapply(.GlobalEnv, is.function) $A [1] FALSE $B [1] FALSE $C [1] FALSE $D [1] TRUE
dataPoints <- matrix(4:15, nrow = 4) dataPoints_means <- apply(dataPoints, 2, mean) dataPoints_sdev <- apply(dataPoints, 2, sd) dataPoints_Trans1 <- sweep(dataPoints, 2, dataPoints_means,"-") print(dataPoints_Trans1) dataPoints_Trans1 dataPoints_Trans2 <- sweep(dataPoints_Trans1, 2, dataPoints_sdev, "/") dataPoints_Trans2
DF <- data.frame( x=1:10, y=10:1, z=rep(5,10), a=11:20 ) drops <- c("x","z") DF[ , !(names(DF) %in% drops)]
df <- data.frame(a = 1:10, b = 2:11, c = 3:12) df <- subset(df, select = c(a, c))
dat <- mtcars colnames(dat) dat[,c("mpg","cyl","wt")] <- list(NULL) colnames(dat)
library(data.table) df <- data.frame(a=1:10, b=1:10, c=1:10, d=1:10) DT <- data.table(df) DT[, c(
del <- c( DT <- data.table(a=1:10, b=1:10, c=1:10, d=1:10) DT[, (del) := NULL] DT <- <- data.table(a=1:10, b=1:10, c=1:10, d=1:10) DT[, {del} := NULL]
df <- data.frame(a=1:10, b=1:10, c=1:10, d=1:10) DT <- data.table(df) set(df, j = set(DT, j =
DF <- DF[, -grep( paste("^",drops,"$", sep="", collapse="|"), names(DF) )]
library(dplyr) df <- data.frame(var1 = rnorm(5), var2 = rnorm(5), var3 = rnorm (5), var4 = rnorm(5), char1 = rnorm(5), char2 = rnorm(5)) df df1 <- df %>% select(-starts_with("char")) df1
DF <- data.frame( x=1:10, y=10:1, z=rep(5,10), a=11:20 ) DF
x y z a 1 1 10 5 11 2 2 9 5 12 3 3 8 5 13 4 4 7 5 14 5 5 6 5 15 6 6 5 5 16 7 7 4 5 17 8 8 3 5 18 9 9 2 5 19 10 10 1 5 20
y z 1 10 5 2 9 5 3 8 5 4 7 5 5 6 5 6 5 5 7 4 5 8 3 5 9 2 5 10 1 5
df.cut <- df %>% select(-col.to.drop.1, -col.to.drop.2, ..., -col.to.drop.6)
df <- data.frame(a=1:10, b=1:10, c=1:10, d=1:10) df <- df[,-match(c("a","c"),names(df))] df
undesired <- c( mtcars %>% select(-one_of(undesired))
remove_features <- function(df, features) { rem_vec <- unlist(strsplit(features, res <- df[,!(names(df) %in% rem_vec)] return(res) }
library(dplyr) starwars %>% select(-(name:mass)) %>% select(-contains( select(-starts_with( select(-ends_with( select(-matches( select_if(~!is.list(.)) %>% head(2) homeworld species <chr> <chr> 1 Tatooine Human 2 Tatooine Droid
DF <- data.frame(one=c( DF DF[which(names(DF) %in% c(
gene hsap mmul mmus rnor cfam 1 ENSG00000208234 0 NA NA NA NA 2 ENSG00000199674 0 2 2 2 2 3 ENSG00000221622 0 NA NA NA NA 4 ENSG00000207604 0 NA NA 1 2 5 ENSG00000207431 0 NA NA NA NA 6 ENSG00000221312 0 1 2 3 2
gene hsap mmul mmus rnor cfam 2 ENSG00000199674 0 2 2 2 2 6 ENSG00000221312 0 1 2 3 2
gene hsap mmul mmus rnor cfam 2 ENSG00000199674 0 2 2 2 2 4 ENSG00000207604 0 NA NA 1 2 6 ENSG00000221312 0 1 2 3 2
> final[complete.cases(final), ] gene hsap mmul mmus rnor cfam 2 ENSG00000199674 0 2 2 2 2 6 ENSG00000221312 0 1 2 3 2
> final[complete.cases(final[ , 5:6]),] gene hsap mmul mmus rnor cfam 2 ENSG00000199674 0 2 2 2 2 4 ENSG00000207604 0 NA NA 1 2 6 ENSG00000221312 0 1 2 3 2
> final[rowSums(is.na(final[ , 5:6])) == 0, ] gene hsap mmul mmus rnor cfam 2 ENSG00000199674 0 2 2 2 2 4 ENSG00000207604 0 NA NA 1 2 6 ENSG00000221312 0 1 2 3 2
row.has.na <- apply(final, 1, function(x){any(is.na(x))})
library(tidyr) df %>% drop_na() df %>% drop_na(rnor, cfam)
final <- final[!(is.na(final$rnor)) | !(is.na(rawdata$cfam)),]
gene hsap mmul mmus rnor cfam 1 ENSG00000208234 0 NA NA NA 2 2 ENSG00000199674 0 2 2 2 2 3 ENSG00000221622 0 NA NA 2 NA 4 ENSG00000207604 0 NA NA 1 2 5 ENSG00000207431 0 NA NA NA NA 6 ENSG00000221312 0 1 2 3 2
gene hsap mmul mmus rnor cfam 1 ENSG00000208234 0 NA NA NA 2 2 ENSG00000199674 0 2 2 2 2 3 ENSG00000221622 0 NA NA 2 NA 4 ENSG00000207604 0 NA NA 1 2 6 ENSG00000221312 0 1 2 3 2
delete.na <- function(DF, n=0) { DF[rowSums(is.na(DF)) <= n,] }
delete.na(final) gene hsap mmul mmus rnor cfam 2 ENSG00000199674 0 2 2 2 2 6 ENSG00000221312 0 1 2 3 2
delete.na(final, 2) gene hsap mmul mmus rnor cfam 2 ENSG00000199674 0 2 2 2 2 4 ENSG00000207604 0 NA NA 1 2 6 ENSG00000221312 0 1 2 3 2
row_size <- 1e6L col_size <- 20 p_missing <- 0.05 col_subset <- 18:21 R.version library(data.table); packageVersion( library(dplyr); packageVersion( library(tidyr); packageVersion( library(microbenchmark) fakeData <- function(m, n, p){ set.seed(123) m <- matrix(runif(m*n), nrow=m, ncol=n) m[m<p] <- NA return(m) } df <- cbind( data.frame(id = paste0( stringsAsFactors = FALSE), data.frame(fakeData(row_size, col_size, p_missing) ) ) dt <- data.table(df) par(las=3, mfcol=c(1,2), mar=c(22,4,1,1)+0.1) boxplot( microbenchmark( df[complete.cases(df), ], na.omit(df), df %>% drop_na, dt[complete.cases(dt), ], na.omit(dt) ), xlab= main = col=c(rep( ) boxplot( microbenchmark( df[complete.cases(df[,col_subset]), ], df %>% drop_na(col_subset), dt[complete.cases(dt[,col_subset,with=FALSE]), ], na.omit(dt, cols=col_subset) ), xlab= main = col=c( )
finalData<-subset(data,!(is.na(data["mmul"]) | is.na(data["rnor"])))
ez.na.keep = function(df, col=NULL, n=0){ if (!is.null(col)) { df.temp = df[,col,drop=FALSE] } else { df.temp = df } if (length(n)==1){ if (n==0) { result = df[complete.cases(df.temp),] } else { log <- apply(df.temp, 2, is.na) logindex <- apply(log, 1, function(x) sum(x) == n) result = df[logindex, ] } } if (length(n)==2){ min = n[1]; max = n[2] log <- apply(df.temp, 2, is.na) logindex <- apply(log, 1, function(x) {sum(x) >= min && sum(x) <= max}) result = df[logindex, ] } return(result) }
> dat[!rowSums((is.na(dat))),] gene hsap mmul mmus rnor cfam 2 ENSG00000199674 0 2 2 2 2 6 ENSG00000221312 0 1 2 3 2
> dat[!Reduce( gene hsap mmul mmus rnor cfam 2 ENSG00000199674 0 2 2 2 2 6 ENSG00000221312 0 1 2 3 2
delete.dirt <- function(DF, dart=c( dirty_rows <- apply(DF, 1, function(r) !any(r %in% dart)) DF <- DF[dirty_rows, ] } mydata <- delete.dirt(mydata)
m <- matrix(1:25, ncol = 5) m[c(1, 6, 13, 25)] <- NA df <- data.frame(m) library(dplyr) df %>% filter_all(any_vars(is.na(.)))
ggplot(mapping=aes(x=seq(1,10,.1), y=seq(1,10,.1))) + geom_line(position="jitter", color="red", size=2) + theme_bw()
library(ggplot2) library(extrafont) loadfonts() data <- NULL data$x <- seq(1, 10, 0.1) data$y1 <- sin(data$x) data$y2 <- cos(data$x) data$xaxis <- -1.5 data <- as.data.frame(data) theme_xkcd <- theme( panel.background = element_rect(fill="white"), axis.ticks = element_line(colour=NA), panel.grid = element_line(colour="white"), axis.text.y = element_text(colour=NA), axis.text.x = element_text(colour="black"), text = element_text(size=16, family="Humor Sans") ) p <- ggplot(data=data, aes(x=x, y=y1))+ geom_line(aes(y=y2), position="jitter")+ geom_line(colour="white", size=3, position="jitter")+ geom_line(colour="red", size=1, position="jitter")+ geom_text(family="Humor Sans", x=6, y=-1.2, label="A SIN AND COS CURVE")+ geom_line(aes(y=xaxis), position = position_jitter(h = 0.005), colour="black")+ scale_x_continuous(breaks=c(2, 5, 6, 9), labels = c("YARD", "STEPS", "DOOR", "INSIDE"))+labs(x="", y="")+ theme_xkcd ggsave("xkcd_ggplot.jpg", plot=p, width=8, height=5)
xkcd_line <- function(x, y, color) { len <- length(x); rg <- par("usr"); yjitter <- (rg[4] - rg[3]) / 1000; xjitter <- (rg[2] - rg[1]) / 1000; x_mod <- x + rnorm(len) * xjitter; y_mod <- y + rnorm(len) * yjitter; lines(x_mod, y_mod, col= lines(x_mod, y_mod, col=color, lwd=5); }
xkcd_axis <- function() { rg <- par("usr"); yaxis <- 1:100 / 100 * (rg[4] - rg[3]) + rg[3]; xaxis <- 1:100 / 100 * (rg[2] - rg[1]) + rg[1]; xkcd_line(1:100 * 0 + rg[1] + (rg[2]-rg[1])/100, yaxis, xkcd_line(xaxis, 1:100 * 0 + rg[3] + (rg[4]-rg[3])/100, }
data <- data.frame(x=1:100) data$one <- exp(-((data$x - 50)/10)^2) data$two <- sin(data$x/10) plot.new() plot.window( c(min(data$x),max(data$x)), c(min(c(data$one,data$two)),max(c(data$one,data$two)))) xkcd_axis() xkcd_line(data$x, data$one, xkcd_line(data$x, data$two,
xkcdFontURL <- "http: download.file(xkcdFontURL,dest="xkcd.ttf",mode="wb")
library(ggplot2) p <- ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point() + ggtitle("Fuel Efficiency of 32 Cars") + xlab("Weight (x1000 lb)") + ylab("Miles per Gallon") + theme(text=element_text(size=16, family="xkcd")) ggsave("xkcd_ggplot.pdf", plot=p, width=4, height=4) embed_fonts("xkcd_ggplot.pdf")
library(xkcd) library(ggplot2) font_import(pattern="[H/h]umor") loadfonts() d1 <- data.frame( p <- NULL p <- ggplot() + xkcdrect(aes(xmin = type-0.1,xmax= type+0.1,ymin=0,ymax =score), d1,fill= " geom_text(data=d1,aes(x=type,y=score+2.5,label=score,ymax=0),family="Humor Sans") + coord_flip() d1long <- NULL d1long <- rbind(c(0,-2),d1,c(12,32)) d1long$xaxis <- -1 d1long$yaxis <- 11.75 p <- p + geom_line(data=d1long,aes(x=type,y=jitter(xaxis)),size=1) p <- p + geom_line(data=d1long,aes(x=yaxis,y=score), size=1) p <- p + scale_x_continuous(breaks=seq(1,11,by=1),labels = data$Type) + scale_y_continuous(breaks=NULL) t1 <- "GOOGLE RESULTS" p <- p + annotate( p <- p + theme(panel.background = element_rect(fill="white"), panel.grid = element_line(colour="white"),axis.text.x = element_blank(), axis.text.y = element_text(colour="black"),text = element_text(size=18, family="Humor Sans") ,panel.grid.major = element_blank(),panel.grid.minor = element_blank(),panel.border = element_blank(),axis.title.y = element_blank(),axis.title.x = element_blank(),axis.ticks = element_blank()) print(p)
set.seed(551) x <- seq(0, 1, length.out = 1000) y <- sin(x) imperfect <- arima.sim(n = length(y), model = list(ar = c(.9999))) imperfect <- scale(imperfect) z <- y + imperfect*.005 plot(x, z, type = "l", col = "blue", lwd = 2)
ggplot()+geom_line(aes(x=seq(0,1,length.out=1000),y=sin(x)),position=position_jitter(width=0.02),lwd=1.5,col="white")+ geom_line(aes(x=seq(0,1,length.out=1000),y=sin(x)),position=position_jitter(width=0.004),lwd=1.4,col="red")+ geom_line(aes(x=seq(0,1,length.out=1000),y=cos(x)),position=position_jitter(width=0.02),lwd=1.5,col="white")+ geom_line(aes(x=seq(0,1,length.out=1000),y=cos(x)),position=position_jitter(width=0.004),lwd=1.4,col="blue")+ theme_bw()+theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())
dat %.% group_by(name, job) %.% filter(job != "Boss" | year == min(year)) %.% mutate(cumu_job2 = cumsum(job2))
setDT(dat)[, .SD[job != "Boss" | year == min(year)][, cumjob := cumsum(job2)], by=list(id, job) ]
dat <- structure(list(id = c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), name = c("Jane", "Jane", "Jane", "Jane", "Jane", "Jane", "Jane", "Jane", "Bob", "Bob", "Bob", "Bob", "Bob", "Bob", "Bob", "Bob"), year = c(1980L, 1981L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L), job = c("Manager", "Manager", "Manager", "Manager", "Manager", "Manager", "Boss", "Boss", "Manager", "Manager", "Manager", "Boss", "Boss", "Boss", "Boss", "Boss"), job2 = c(1L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L)), .Names = c("id", "name", "year", "job", "job2"), class = "data.frame", row.names = c(NA, -16L))
ans <- DF %>% mutate(y = replace(y, which(x >= 1L), NA))
foo <- function(DT) { DT = shallow(DT) DT[, newcol := 1L] DT[x > 2L, newcol := 2L] DT[x > 2L, x := 3L] }
bar <- function(DT) { DT[, newcol := 1L] DT[x > 2L, x := 3L] }
DT1 = data.table(x=c(1,1,1,1,2,2,2,2), y=c("a", "a", "b", "b"), z=1:8, key=c("x", "y")) DT2 = data.table(x=1:2, y=c("a", "b"), mul=4:3, key=c("x", "y"))
DT1[, .(z = sum(z)), keyby = .(x,y)][DT2][, z := z*mul][] DF1 %>% group_by(x, y) %>% summarise(z = sum(z)) %>% right_join(DF2) %>% mutate(z = z * mul)
DT = data.table(x=1:10, y=11:20, z=rep(1:2, each=5)) DF = as.data.frame(DT)
DT[, sum(y), by = z] DF %>% group_by(z) %>% summarise(sum(y)) DT[, y := cumsum(y), by = z] ans <- DF %>% group_by(z) %>% mutate(y = cumsum(y)) DT[x > 2, sum(y), by = z] DF %>% filter(x>2) %>% group_by(z) %>% summarise(sum(y)) DT[x > 2, y := cumsum(y), by = z] ans <- DF %>% group_by(z) %>% mutate(y = replace(y, which(x > 2), cumsum(y))) DT[, if(any(x > 5L)) y[1L]-y[2L] else y[2L], by = z] DF %>% group_by(z) %>% summarise(if (any(x > 5L)) y[1L] - y[2L] else y[2L]) DT[, if(any(x > 5L)) y[1L] - y[2L], by = z] DF %>% group_by(z) %>% filter(any(x > 5L)) %>% summarise(y[1L] - y[2L])
DT[, lapply(.SD, sum), by = z] DF %>% group_by(z) %>% summarise_each(funs(sum)) DT[, (cols) := lapply(.SD, sum), by = z] ans <- DF %>% group_by(z) %>% mutate_each(funs(sum)) DT[, c(lapply(.SD, sum), lapply(.SD, mean)), by = z] DF %>% group_by(z) %>% summarise_each(funs(sum, mean)) DT[, c(.N, lapply(.SD, sum)), by = z] DF %>% group_by(z) %>% summarise_each(funs(n(), mean))
setkey(DT1, x, y) DT1[DT2] left_join(DT2, DT1) DT1[DT2, .(z, i.mul)] left_join(select(DT2, x, y, mul), select(DT1, x, y, z)) DT1[DT2, .(sum(z) * i.mul), by = .EACHI] DF1 %>% group_by(x, y) %>% summarise(z = sum(z)) %>% inner_join(DF2) %>% mutate(z = z*mul) %>% select(-mul) DT1[DT2, z := cumsum(z) * i.mul, by = .EACHI] ?? DT1[DT2, roll = -Inf] ?? DT1[DT2, mult = "first"] ??
DT[, list(x[1], y[1]), by = z] DF %>% group_by(z) %>% summarise(x[1], y[1]) DT[, list(x[1:2], y[1]), by = z] DF %>% group_by(z) %>% do(data.frame(.$x[1:2], .$y[1])) DT[, quantile(x, 0.25), by = z] DF %>% group_by(z) %>% summarise(quantile(x, 0.25)) DT[, quantile(x, c(0.25, 0.75)), by = z] DF %>% group_by(z) %>% do(data.frame(quantile(.$x, c(0.25, 0.75)))) DT[, as.list(summary(x)), by = z] DF %>% group_by(z) %>% do(data.frame(as.list(summary(.$x))))
diamonds %>% filter(cut != "Fair") %>% group_by(cut) %>% summarize( AvgPrice = mean(price), MedianPrice = as.numeric(median(price)), Count = n() ) %>% arrange(desc(Count))
diamondsDT <- data.table(diamonds) diamondsDT[ cut != "Fair", .(AvgPrice = mean(price), MedianPrice = as.numeric(median(price)), Count = .N ), by = cut ][ order(-Count) ]
diamonds %>% data.table() %>% .[cut != "Fair", .(AvgPrice = mean(price), MedianPrice = as.numeric(median(price)), Count = .N ), by = cut ] %>% .[order(-Count)]
library(formatR) tidy_source(text = "x=1:5", arrow = TRUE)
… ‘-> ->>’ rightwards assignment ‘<- <<-’ assignment (right to left) ‘=’ assignment (right to left) …
‹function_name›(‹argname› = ‹value›, …) ‹function_name›(‹args›, ‹argname› = ‹value›, …)
if (‹var› = ‹value›) … while (‹var› = ‹value›) … for (‹var› = ‹value› in ‹value2›) … for (‹var1› in ‹var2› = ‹value›) …
> m <- matrix(sample(c(NA, 1:10), 100, replace = TRUE), 10) > d <- as.data.frame(m) V1 V2 V3 V4 V5 V6 V7 V8 V9 V10 1 4 3 NA 3 7 6 6 10 6 5 2 9 8 9 5 10 NA 2 1 7 2 3 1 1 6 3 6 NA 1 4 1 6 4 NA 4 NA 7 10 2 NA 4 1 8 5 1 2 4 NA 2 6 2 6 7 4 6 NA 3 NA NA 10 2 1 10 8 4 7 4 4 9 10 9 8 9 4 10 NA 8 5 8 3 2 1 4 5 9 4 7 9 3 9 10 1 9 9 10 5 3 3 10 4 2 2 5 NA 9 7 2 5 5 > d[is.na(d)] <- 0 > d V1 V2 V3 V4 V5 V6 V7 V8 V9 V10 1 4 3 0 3 7 6 6 10 6 5 2 9 8 9 5 10 0 2 1 7 2 3 1 1 6 3 6 0 1 4 1 6 4 0 4 0 7 10 2 0 4 1 8 5 1 2 4 0 2 6 2 6 7 4 6 0 3 0 0 10 2 1 10 8 4 7 4 4 9 10 9 8 9 4 10 0 8 5 8 3 2 1 4 5 9 4 7 9 3 9 10 1 9 9 10 5 3 3 10 4 2 2 5 0 9 7 2 5 5
baseR.sbst.rssgn <- function(x) { x[is.na(x)] <- 0; x } baseR.replace <- function(x) { replace(x, is.na(x), 0) } baseR.for <- function(x) { for(j in 1:ncol(x)) x[[j]][is.na(x[[j]])] = 0 } library(tidyverse) dplyr_if_else <- function(x) { mutate_all(x, funs(if_else(is.na(.), 0, .))) } dplyr_coalesce <- function(x) { mutate_all(x, funs(coalesce(., 0))) } tidyr_replace_na <- function(x) { replace_na(x, as.list(setNames(rep(0, 10), as.list(c(paste0("var", 1:10)))))) } hybrd.ifelse <- function(x) { mutate_all(x, funs(ifelse(is.na(.), 0, .))) } hybrd.rplc_all <- function(x) { mutate_all(x, funs(replace(., is.na(.), 0))) } hybrd.rplc_at.idx<- function(x) { mutate_at(x, c(1:10), funs(replace(., is.na(.), 0))) } hybrd.rplc_at.nse<- function(x) { mutate_at(x, vars(var1:var10), funs(replace(., is.na(.), 0))) } hybrd.rplc_at.stw<- function(x) { mutate_at(x, vars(starts_with("var")), funs(replace(., is.na(.), 0))) } hybrd.rplc_at.ctn<- function(x) { mutate_at(x, vars(contains("var")), funs(replace(., is.na(.), 0))) } hybrd.rplc_at.mtc<- function(x) { mutate_at(x, vars(matches("\\d+")), funs(replace(., is.na(.), 0))) } hybrd.rplc_if <- function(x) { mutate_if(x, is.numeric, funs(replace(., is.na(.), 0))) } library(data.table) DT.for.set.nms <- function(x) { for (j in names(x)) set(x,which(is.na(x[[j]])),j,0) } DT.for.set.sqln <- function(x) { for (j in seq_len(ncol(x))) set(x,which(is.na(x[[j]])),j,0) }
library(microbenchmark) set.seed(42) dfN <- as.data.frame(matrix(sample(c(NA, as.numeric(1:4)), 5e6*10, replace = TRUE), dimnames = list(NULL, paste0("var", 1:10)), ncol = 10)) perf_results <- microbenchmark( hybrid.ifelse = hybrid.ifelse(copy(dfN)), dplyr_if_else = dplyr_if_else(copy(dfN)), baseR.sbst.rssgn = baseR.sbst.rssgn(copy(dfN)), baseR.replace = baseR.replace(copy(dfN)), dplyr_coalesce = dplyr_coalesce(copy(dfN)), hybrd.rplc_at.nse= hybrd.rplc_at.nse(copy(dfN)), hybrd.rplc_at.stw= hybrd.rplc_at.stw(copy(dfN)), hybrd.rplc_at.ctn= hybrd.rplc_at.ctn(copy(dfN)), hybrd.rplc_at.mtc= hybrd.rplc_at.mtc(copy(dfN)), hybrd.rplc_at.idx= hybrd.rplc_at.idx(copy(dfN)), hybrd.rplc_if = hybrd.rplc_if(copy(dfN)), tidyr_replace_na = tidyr_replace_na(copy(dfN)), baseR.for = baseR.for(copy(dfN)), DT.for.set.nms = DT.for.set.nms(copy(dfN)), DT.for.set.sqln = DT.for.set.sqln(copy(dfN)), times = 250L )
> perf_results Unit: milliseconds expr min lq mean median uq max neval hybrid.ifelse 5250.5259 5620.8650 5809.1808 5759.3997 5947.7942 6732.791 250 dplyr_if_else 3209.7406 3518.0314 3653.0317 3620.2955 3746.0293 4390.888 250 baseR.sbst.rssgn 1611.9227 1878.7401 1964.6385 1942.8873 2031.5681 2485.843 250 baseR.replace 1559.1494 1874.7377 1946.2971 1920.8077 2002.4825 2516.525 250 dplyr_coalesce 949.7511 1231.5150 1279.3015 1288.3425 1345.8662 1624.186 250 hybrd.rplc_at.nse 735.9949 871.1693 1016.5910 1064.5761 1104.9590 1361.868 250 hybrd.rplc_at.stw 704.4045 887.4796 1017.9110 1063.8001 1106.7748 1338.557 250 hybrd.rplc_at.ctn 723.9838 878.6088 1017.9983 1063.0406 1110.0857 1296.024 250 hybrd.rplc_at.mtc 686.2045 885.8028 1013.8293 1061.2727 1105.7117 1269.949 250 hybrd.rplc_at.idx 696.3159 880.7800 1003.6186 1038.8271 1083.1932 1309.635 250 hybrd.rplc_if 705.9907 889.7381 1000.0113 1036.3963 1083.3728 1338.190 250 tidyr_replace_na 680.4478 973.1395 978.2678 1003.9797 1051.2624 1294.376 250 baseR.for 670.7897 965.6312 983.5775 1001.5229 1052.5946 1206.023 250 DT.for.set.nms 496.8031 569.7471 695.4339 623.1086 861.1918 1067.640 250 DT.for.set.sqln 500.9945 567.2522 671.4158 623.1454 764.9744 1033.463 250
par(mar=c(8,5,1,1) + 0.1) boxplot(opN, las = 2, xlab = "", ylab = "log(time)[milliseconds]")
qplot(y=time/10^9, data=opN, colour=expr) + labs(y = "log10 Scaled Elapsed Time per Trial (secs)", x = "Trial Number") + scale_y_log10(breaks=c(1, 2, 4))
library(dplyr) df1 <- df1 %>% mutate(myCol1 = if_else(is.na(myCol1), 0, myCol1))
na.zero <- function (x) { x[is.na(x)] <- 0 return(x) }
> x <- c(1,2,NA,NA,1,1) > x1 <- replace(x,is.na(x),0) > x1 [1] 1 2 0 0 1 1
df = data.frame(col = c(1,2,NA,NA,1,1)) df <- df %>% mutate(col = replace(col,is.na(col),0))
library(dplyr) df <- data.frame(v = c(1, 2, 3, NA, 5, 6, 8)) df df %>% mutate(v = coalesce(v, 0))
n <- length(levels(data.vector))+1 data.vector <- as.numeric(data.vector) data.vector[is.na(data.vector)] <- n data.vector <- as.factor(data.vector) levels(data.vector) <- c("level1","level2",...,"leveln", "NAlevel")
> m <- matrix(sample(c(NA, 1:10), 100, replace = TRUE), 10) > d <- as.data.frame(m) > d V1 V2 V3 V4 V5 V6 V7 V8 V9 V10 1 4 8 1 9 6 9 NA 8 9 8 2 8 3 6 8 2 1 NA NA 6 3 3 6 6 3 NA 2 NA NA 5 7 7 4 10 6 1 1 7 9 1 10 3 10 5 10 6 7 10 10 3 2 5 4 6 6 2 4 1 5 7 NA NA 8 4 4 7 7 2 3 1 4 10 NA 8 7 7 8 9 5 8 10 5 3 5 8 3 2 9 9 1 8 7 6 5 NA NA 6 7 10 6 10 8 7 1 1 2 2 5 7 > d %>% mutate_each( funs_( interp( ~replace(., is.na(.),0) ) ) ) V1 V2 V3 V4 V5 V6 V7 V8 V9 V10 1 4 8 1 9 6 9 0 8 9 8 2 8 3 6 8 2 1 0 0 6 3 3 6 6 3 0 2 0 0 5 7 7 4 10 6 1 1 7 9 1 10 3 10 5 10 6 7 10 10 3 2 5 4 6 6 2 4 1 5 7 0 0 8 4 4 7 7 2 3 1 4 10 0 8 7 7 8 9 5 8 10 5 3 5 8 3 2 9 9 1 8 7 6 5 0 0 6 7 10 6 10 8 7 1 1 2 2 5 7
> x <- c(-1,0,1,0,NA,0,1,1) > x1 <- replace(x,5,1) > x1 [1] -1 0 1 0 1 0 1 1 > x1 <- replace(x,5,mean(x,na.rm=T)) > x1 [1] -1.00 0.00 1.00 0.00 0.29 0.00 1.00 1.00
require(dplyr) require(tidyr) m <- matrix(sample(c(NA, 1:10), 100, replace = TRUE), 10) d <- as.data.frame(m) myList <- setNames(lapply(vector("list", ncol(d)), function(x) x <- 0), names(d)) df <- d %>% replace_na(myList)
d$str <- c("string", NA) myList <- myList[sapply(d, is.numeric)] df <- d %>% replace_na(myList)
replace_missings <- function(x, replacement) { is_miss <- is.na(x) x[is_miss] <- replacement message(sum(is_miss), " missings replaced by the value ", replacement) x }
library(tidyr) df <- df %>% mutate_all(funs(replace_na(.,0)))
data(diamonds) diamonds$cut <- paste("Super Dee-Duper",as.character(diamonds$cut)) q <- qplot(cut,carat,data=diamonds,geom="boxplot") q + opts(axis.text.x=theme_text(angle=-90))
q + theme(axis.text.x = element_text(angle = 90, hjust = 1))
q + theme(axis.text.x=element_text(angle=90, hjust=1))
data(diamonds) diamonds$cut <- paste("Super Dee-Duper",as.character(diamonds$cut)) qplot(cut,carat,data = diamonds, geom = "boxplot") + coord_flip()
library(ggplot2) library(gridExtra) rotatedAxisElementText = function(angle,position= angle = angle[1]; position = position[1] positions = list(x=0,y=90,top=180,right=270) if(!position %in% names(positions)) stop(sprintf(" if(!is.numeric(angle)) stop(" rads = (angle - positions[[ position ]])*pi/180 hjust = 0.5*(1 - sin(rads)) vjust = 0.5*(1 + cos(rads)) element_text(angle=angle,vjust=vjust,hjust=hjust) }
df = data.frame(x=0.5,y=0.5) plots = lapply(seq(0,90,length.out=4),function(a){ ggplot(df,aes(x,y)) + geom_point() + theme(axis.text.x = rotatedAxisElementText(a, axis.text.y = rotatedAxisElementText(a, labs(title = sprintf("Rotated %s",a)) }) grid.arrange(grobs=plots)
library(ggplot2) diamonds$cut <- paste("Super Dee-Duper", as.character(diamonds$cut)) q <- qplot(cut, carat, data = diamonds, geom = "boxplot") q + ggpubr::rotate_x_text()
f <- factor(sample(runif(5), 20, replace = TRUE)) as.numeric(f) as.integer(f)
library(microbenchmark) microbenchmark( as.numeric(levels(f))[f], as.numeric(levels(f)[f]), as.numeric(as.character(f)), paste0(x), paste(x), times = 1e5 )
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
x <- rep(c("a", "b", "c"), 20) y <- rep(c(1, 1, 0), 20) class(x) class(y) x <- factor(x) y <- factor(y) class(x) class(y) library(varhandle) x <- unfactor(x) y <- unfactor(y) class(x) class(y)
y2<-factor(c("A","B","C","D","A")); as.numeric(levels(y2))[y2] [1] NA NA NA NA NA Warning message: NAs introduced by coercion
f <- factor(x, levels = c(10, 20, 30, 40), labels = c("A", "B", "C", "D"))
> str(f) Factor w/ 4 levels "A","B","C","D": 2 1 3 2 1 4 1 4 > attributes(f) $levels [1] "A" "B" "C" "D" $class [1] "factor"
> orig_levels <- c(10, 20, 30, 40) > x1 <- orig_levels[f] > all.equal(x, x1) [1] TRUE
library(hablar) library(dplyr) df <- dplyr::tibble(a = as.factor(c("7", "3")), b = as.factor(c("1.5", "6.3")))
x <- seq(-2, 2, 0.05) y1 <- pnorm(x) y2 <- pnorm(x, 1, 1) plot(x, y1, type = "l", col = "red") plot(x, y2, type = "l", col = "green")
plot(x,y1,type="l",col="red") lines(x,y2,col="green")
plot( x, y1, type="l", col="red" ) par(new=TRUE) plot( x, y2, type="l", col="green" )
x <- seq(-2, 2, 0.05) y1 <- pnorm(x) y2 <- pnorm(x,1,1) df <- data.frame(x,y1,y2)
require(ggplot2) ggplot(df, aes(x)) + geom_line(aes(y=y1), colour="red") + geom_line(aes(y=y2), colour="green")
g <- ggplot(df, aes(x)) g <- g + geom_line(aes(y=y1), colour="red") g <- g + geom_line(aes(y=y2), colour="green") g
plot(first thing to plot) plot(second thing to plot,add=TRUE)
matplot(x, cbind(y1,y2),type="l",col=c("red","green"),lty=c(1,1))
x1 <- seq(-2, 2, 0.05) x2 <- seq(-3, 3, 0.05) y1 <- pnorm(x1) y2 <- pnorm(x2,1,1) plot(x1,y1,ylim=range(c(y1,y2)),xlim=range(c(x1,x2)), type="l",col="red") lines(x2,y2,col="green")
library(ggplot2) library(reshape2) x <- seq(-2, 2, 0.05) y1 <- pnorm(x) y2 <- pnorm(x, 1, 1) df <- data.frame(x, y1, y2) df2 <- melt(data = df, id.vars = "x") ggplot(data = df2, aes(x = x, y = value, colour = variable)) + geom_line()
x = matrix( c(21,50,80,41), nrow=2 ) y = matrix( c(1,2,1,2), nrow=2 ) plot(x, y, col("red","blue")
x1 <- seq(1,10,.2) df1 <- data.frame(x=x1,y=log(x1),type="Log") x2 <- seq(1,10) df2 <- data.frame(x=x2,y=cumsum(1/x2),type="Harmonic") df <- rbind(df1,df2) library(ggplot2) ggplot(df)+geom_line(aes(x,y,colour=type))
library(ggvis) x <- seq(-2, 2, 0.05) y1 <- pnorm(x) y2 <- pnorm(x,1,1) df <- data.frame(x, y1, y2) df %>% ggvis(~x, ~y1, stroke := layer_paths() %>% layer_paths(data = df, x = ~x, y = ~y2, stroke :=
library(plotly) x <- seq(-2, 2, 0.05) y1 <- pnorm(x) y2 <- pnorm(x, 1, 1) plot_ly(x = x) %>% add_lines(y = y1, color = I("red"), name = "Red") %>% add_lines(y = y2, color = I("green"), name = "Green")
library(lattice) x <- seq(-2,2,0.05) y1 <- pnorm(x) y2 <- pnorm(x,1,1) xyplot(y1 + y2 ~ x, ylab = "y1 and y2", type = "l", auto.key = list(points = FALSE,lines = TRUE))
xyplot(y1 + y2 ~ x,ylab = "y1 and y2", type = "l", auto.key = list(points = F,lines = T), par.settings = list(superpose.line = list(col = c("red","green"))))
> test <- library("abc") Error in library("abc") : there is no package called > test Error: object > test <- require("abc") Loading required package: abc Warning message: In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE, : there is no package called > test [1] FALSE
if(require("lme4")){ print("lme4 is loaded correctly") } else { print("trying to install lme4") install.packages("lme4") if(require(lme4)){ print("lme4 installed and loaded") } else { stop("could not install lme4") } }
if (!require(package, character.only=T, quietly=T)) { install.packages(package) library(package, character.only=T) }
for (package in c( if (!require(package, character.only=T, quietly=T)) { install.packages(package) library(package, character.only=T) } }
require(dplyr) x = data.frame(y = seq(100)) y = 1 filter(x, y == 1)
require = function (package) { already_attached = paste( if (already_attached) return(TRUE) maybe_error = try(library(package, character.only = TRUE)) success = ! inherits(maybe_error, if (! success) cat("Failed") success }
microbenchmark(req = require(microbenchmark), lib = library(microbenchmark),times = 100000) Unit: microseconds expr min lq mean median uq max neval req 3.676 5.181 6.596968 5.655 6.177 9456.006 1e+05 lib 17.192 19.887 27.302907 20.852 22.490 255665.881 1e+05
library(data.table) n=1e6 DT = data.table( a=sample(1:1000,n,replace=TRUE), b=sample(1:1000,n,replace=TRUE), c=rnorm(n), d=sample(c("foo","bar","baz","qux","quux"),n,replace=TRUE), e=rnorm(n), f=sample(1:1000,n,replace=TRUE) ) DT[2,b:=NA_integer_] DT[4,c:=NA_real_] DT[3,d:=NA_character_] DT[5,d:=""] DT[2,e:=+Inf] DT[3,e:=-Inf]
write.table(DT,"test.csv",sep=",",row.names=FALSE,quote=FALSE) cat("File size (MB):",round(file.info("test.csv")$size/1024^2),"\n") system.time(DF1 <- read.csv("test.csv",stringsAsFactors=FALSE)) system.time(DF1 <- read.csv("test.csv",stringsAsFactors=FALSE))
system.time(DF2 <- read.table("test.csv",header=TRUE,sep=",",quote="", stringsAsFactors=FALSE,comment.char="",nrows=n, colClasses=c("integer","integer","numeric", "character","numeric","integer")))
require(data.table) system.time(DT <- fread("test.csv"))
require(sqldf) system.time(SQLDF <- read.csv.sql("test.csv",dbname=NULL)) f <- file("test.csv") system.time(SQLf <- sqldf("select * from f", dbname = tempfile(), file.format = list(header = T, row.names = F)))
require(ff) system.time(FFDF <- read.csv.ffdf(file="test.csv",nrows=n))
bigdf <- data.frame(dim=sample(letters, replace=T, 4e7), fact1=rnorm(4e7), fact2=rnorm(4e7, 20, 50)) write.csv(bigdf,
library(sqldf) f <- file("bigdf.csv") system.time(bigdf <- sqldf("select * from f", dbname = tempfile(), file.format = list(header = T, row.names = F)))
attr(df, "row.names") <- .set_row_names(length(df[[1]])) class(df) <- "data.frame"
str <- "key1\t3.9\nkey1\t8.9\nkey1\t1.2\nkey1\t3.9\nkey1\t8.9\nkey1\t1.2\nkey2\t9.9\nkey2\" cat(str) cols = list(key= con <- textConnection(str, open = "r") hsTableReader(con,cols,chunkSize=6,FUN=print,ignoreKey=TRUE) close(con)
>numRow=as.integer(system(paste("wc -l", bedGraph, "| sed
>system.time((BG=read.table(bedGraph, nrows=numRow, col.names=c( user system elapsed 25.877 0.887 26.752 >object.size(BG) 203949432 bytes
library(RPostgreSQL);library(lattice) con <- dbConnect(PostgreSQL(), user= "postgres", password="password", port="2345", host="localhost", dbname="WC2014_08_01_2014") Decade_BD_1980_42 <- dbGetQuery(con,"Select PrecinctID,Count(PrecinctID),extract(DECADE from Birthdate) from voterdb where extract(DECADE from Birthdate)::numeric > 198 and PrecinctID in (Select * from LD42) Group By PrecinctID,date_part Order by Count DESC;") Decade_RD_1980_42 <- dbGetQuery(con,"Select PrecinctID,Count(PrecinctID),extract(DECADE from RegistrationDate) from voterdb where extract(DECADE from RegistrationDate)::numeric > 198 and PrecinctID in (Select * from LD42) Group By PrecinctID,date_part Order by Count DESC;") with(Decade_BD_1980_42,(barchart(~count | as.factor(precinctid)))); mtext("42LD Birthdays later than 1980 by Precinct",side=1,line=0) with(Decade_RD_1980_42,(barchart(~count | as.factor(precinctid)))); mtext("42LD Registration Dates later than 1980 by Precinct",side=1,line=0)
data_frame <- fread("filename.csv",sep=",",header=FALSE,stringsAsFactors=FALSE,select=c(1,4,5,6,7),colClasses=c("as.numeric","as.character","as.numeric","as.Date","as.Factor"))
.ls.objects <- function (pos = 1, pattern, order.by, decreasing=FALSE, head=FALSE, n=5) { napply <- function(names, fn) sapply(names, function(x) fn(get(x, pos = pos))) names <- ls(pos = pos, pattern = pattern) obj.class <- napply(names, function(x) as.character(class(x))[1]) obj.mode <- napply(names, mode) obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class) obj.size <- napply(names, object.size) obj.dim <- t(napply(names, function(x) as.numeric(dim(x))[1:2])) vec <- is.na(obj.dim)[, 1] & (obj.type != "function") obj.dim[vec, 1] <- napply(names, length)[vec] out <- data.frame(obj.type, obj.size, obj.dim) names(out) <- c("Type", "Size", "Rows", "Columns") if (!missing(order.by)) out <- out[order(out[[order.by]], decreasing=decreasing), ] if (head) out <- head(out, n) out } lsos <- function(..., n=10) { .ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n) }
.ls.objects <- function (pos = 1, pattern, order.by, decreasing=FALSE, head=FALSE, n=5) { napply <- function(names, fn) sapply(names, function(x) fn(get(x, pos = pos))) names <- ls(pos = pos, pattern = pattern) obj.class <- napply(names, function(x) as.character(class(x))[1]) obj.mode <- napply(names, mode) obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class) obj.prettysize <- napply(names, function(x) { format(utils::object.size(x), units = "auto") }) obj.size <- napply(names, object.size) obj.dim <- t(napply(names, function(x) as.numeric(dim(x))[1:2])) vec <- is.na(obj.dim)[, 1] & (obj.type != "function") obj.dim[vec, 1] <- napply(names, length)[vec] out <- data.frame(obj.type, obj.size, obj.prettysize, obj.dim) names(out) <- c("Type", "Size", "PrettySize", "Length/Rows", "Columns") if (!missing(order.by)) out <- out[order(out[[order.by]], decreasing=decreasing), ] if (head) out <- head(out, n) out } lsos <- function(..., n=10) { .ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n) } lsos()
Type Size PrettySize Length/Rows Columns pca.res PCA 790128 771.6 Kb 7 NA DF data.frame 271040 264.7 Kb 669 50 factor.AgeGender factanal 12888 12.6 Kb 12 NA dates data.frame 9016 8.8 Kb 669 2 sd. numeric 3808 3.7 Kb 51 NA napply function 2256 2.2 Kb NA NA lsos function 1944 1.9 Kb NA NA load loadings 1768 1.7 Kb 12 2 ind.sup integer 448 448 bytes 102 NA x character 96 96 bytes 1 NA
obj.prettysize <- napply(names, function(x) { print(object.size(x), units = "auto") })
.ls.objects <- function (pos = 1, pattern, order.by, decreasing=FALSE, head=FALSE, n=5) { napply <- function(names, fn) sapply(names, function(x) fn(get(x, pos = pos))) names <- ls(pos = pos, pattern = pattern) obj.class <- napply(names, function(x) as.character(class(x))[1]) obj.mode <- napply(names, mode) obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class) obj.size <- napply(names, object.size) obj.prettysize <- sapply(obj.size, function(r) prettyNum(r, big.mark = ",") ) obj.dim <- t(napply(names, function(x) as.numeric(dim(x))[1:2])) vec <- is.na(obj.dim)[, 1] & (obj.type != "function") obj.dim[vec, 1] <- napply(names, length)[vec] out <- data.frame(obj.type, obj.size,obj.prettysize, obj.dim) names(out) <- c("Type", "Size", "PrettySize", "Rows", "Columns") if (!missing(order.by)) out <- out[order(out[[order.by]], decreasing=decreasing), ] out <- out[c("Type", "PrettySize", "Rows", "Columns")] names(out) <- c("Type", "Size", "Rows", "Columns") if (head) out <- head(out, n) out }
Mayo.PrCr.rbc.mdl <- cph(formula = Surv(surv.yr, death) ~ age + Sex + nsmkr + rcs(Mayo, 4) + rcs(PrCr.rat, 3) + rbc.cat * Sex, data = subset(set1HLI, gdlab2 & HIVfinal == "Negative", select = c("surv.yr", "death", "PrCr.rat", "Mayo", "age", "Sex", "nsmkr", "rbc.cat") ) )
showMemoryUse <- function(sort="size", decreasing=FALSE, limit) { objectList <- ls(parent.frame()) oneKB <- 1024 oneMB <- 1048576 oneGB <- 1073741824 memoryUse <- sapply(objectList, function(x) as.numeric(object.size(eval(parse(text=x))))) memListing <- sapply(memoryUse, function(size) { if (size >= oneGB) return(paste(round(size/oneGB,2), "GB")) else if (size >= oneMB) return(paste(round(size/oneMB,2), "MB")) else if (size >= oneKB) return(paste(round(size/oneKB,2), "kB")) else return(paste(size, "bytes")) }) memListing <- data.frame(objectName=names(memListing),memorySize=memListing,row.names=NULL) if (sort=="alphabetical") memListing <- memListing[order(memListing$objectName,decreasing=decreasing),] else memListing <- memListing[order(memoryUse,decreasing=decreasing),] if(!missing(limit)) memListing <- memListing[1:limit,] print(memListing, row.names=FALSE) return(invisible(memListing)) }
> showMemoryUse(decreasing=TRUE, limit=5) objectName memorySize coherData 713.75 MB spec.pgram_mine 149.63 kB stoch.reg 145.88 kB describeBy 82.5 kB lmBandpass 68.41 kB
dfinal <- NULL first <- TRUE tempfile <- "dfinal_temp.csv" for( i in bigloop ) { if( !i %% 10000 ) { print( i, "; flushing to disk..." ) write.table( dfinal, file=tempfile, append=!first, col.names=first ) first <- FALSE dfinal <- NULL } } print( "Loop done; flushing to disk and re-reading entire data set..." ) write.table( dfinal, file=tempfile, append=TRUE, col.names=FALSE ) dfinal <- read.table( tempfile )
get.data <- function(x) { return(paste("data from",x)) } collect.data <- function(i,x,env) { data <- get.data(x[[i]]) element.name <- paste("V",i,sep="") env[[element.name]] <- data return(NULL) } better.list <- new.env() filenames <- c("file1","file2","file3") lapply(seq_along(filenames),collect.data,x=filenames,env=better.list) print(better.list[["V1"]]) better.list[["V2"]] <- "testdata" length(ls(better.list))
MemoryObjects = ls() MemoryAssessmentTable=array(NA,dim=c(length(MemoryObjects),2)) colnames(MemoryAssessmentTable)=c("object","bytes") MemoryAssessmentTable[,1]=MemoryObjects MemoryAssessmentFunction=function(x){object.size(get(x))} MemoryAssessmentTable[,2]=t(t(sapply(MemoryAssessmentTable[,1],MemoryAssessmentFunction))) noquote(MemoryAssessmentTable[rev(order(as.numeric(MemoryAssessmentTable[,2]))),])
for(l in 1:length(fdir)) { for(k in 1:length(fds)) { system(paste("Rscript runConsensus.r", l, k)) } }
install.packages("pryr") library(pryr) object_size(1:10) object_size(mean) object_size(mtcars)
part1 ```{r corpus, warning=FALSE, cache=TRUE, message=FALSE, eval=TRUE} corpusTw <- corpus(twitter) ``` part2 ```{r trigrams, warning=FALSE, cache=TRUE, message=FALSE, eval=FALSE} dfmTw <- dfm(corpusTw, verbose=TRUE, removeTwitter=TRUE, ngrams=3) ```
.ls.objects <- function (pos = 1, pattern, order.by, decreasing=FALSE, head=FALSE, n=5) { napply <- function(names, fn) sapply(names, function(x) fn(get(x, pos = pos))) names <- ls(pos = pos, pattern = pattern) obj.class <- napply(names, function(x) as.character(class(x))[1]) obj.mode <- napply(names, mode) obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class) obj.prettysize <- napply(names, function(x) { format(utils::object.size(x), units = "auto") }) obj.size <- napply(names, utils::object.size) obj.dim <- t(napply(names, function(x) as.numeric(dim(x))[1:2])) vec <- is.na(obj.dim)[, 1] & (obj.type != "function") obj.dim[vec, 1] <- napply(names, length)[vec] out <- data.frame(obj.type, obj.size, obj.prettysize, obj.dim) names(out) <- c("Type", "Size", "PrettySize", "Rows", "Columns") if (!missing(order.by)) out <- out[order(out[[order.by]], decreasing=decreasing), ] if (head) out <- head(out, n) return(out) } lsos <- function(..., n=10) { .ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n) } lsos()
```{r Create OBJECT} COMPLICATED.FUNCTION <- function(...) { Do heavy calculations needing lots of memory; Output OBJECT; } ``` ```{r Generate or load OBJECT} LOAD <- TRUE; if(LOAD == TRUE) { OBJECT <- readRDS(file = { OBJECT <- COMPLICATED.FUNCTION(x, y, z); saveRDS(file = ```
df <- data.frame(letters=letters[1:5], numbers=seq(1:5)) levels(df$letters) subdf <- subset(df, numbers <= 3) levels(subdf$letters)
> subdf$letters [1] a b c Levels: a b c d e subdf$letters <- factor(subdf$letters) > subdf$letters [1] a b c Levels: a b c
subdf <- subset(df, numbers <= 3) subdf[] <- lapply(subdf, function(x) if(is.factor(x)) factor(x) else x)
> drop.levels(subdf) letters numbers 1 a 1 2 b 2 3 c 3 > levels(drop.levels(subdf)$letters) [1] "a" "b" "c"
> levels(subdf$letters) [1] "a" "b" "c" "d" "e" > subdf$letters <- as.factor(as.character(subdf$letters)) > levels(subdf$letters) [1] "a" "b" "c"
library(dplyr) subdf <- df %>% filter(numbers <= 3) %>% droplevels() str(subdf)
subdf <- df %>% filter(numbers <= 3) %>% droplevels levels(subdf$letters)
> df <- data.frame(let=letters[1:5], num=1:5) > subdf <- df[df$num <= 3, ] > subdf$let <- subdf$let[ , drop=TRUE] > levels(subdf$let) [1] "a" "b" "c"
library(data.table) dt = data.table(letters=factor(letters[1:5]), numbers=seq(1:5)) levels(dt$letters) subdt = dt[numbers <= 3] levels(subdt$letters) upd.cols = sapply(subdt, is.factor) subdt[, names(subdt)[upd.cols] := lapply(.SD, factor), .SDcols = upd.cols] levels(subdt$letters)
f <- factor(c("a", "b", NA), exclude = NULL) droplevels(f) forcats::fct_drop(f)
varFactor <- factor(letters[1:15]) varFactor <- varFactor[1:5] varFactor <- varFactor[drop=T]
present_levels <- function(x) intersect(levels(x), x) trim_levels <- function(...) UseMethod("trim_levels") trim_levels.factor <- function(x) factor(x, levels=present_levels(x)) trim_levels.data.frame <- function(x) { for (n in names(x)) if (is.factor(x[,n])) x[,n] = trim_levels(x[,n]) x }
df <- data.frame(letters=letters[1:5],numbers=seq(1:5)) levels(df$letters) subdf <- df[df$numbers <= 3] subdf$letters<-factor(as.character(subdf$letters))
> t function (x) UseMethod("t") <bytecode: 0x2332948> <environment: namespace:base>
> with standardGeneric for "with" defined from package "base" function (data, expr, ...) standardGeneric("with") <bytecode: 0x102fb3fc0> <environment: 0x102fab988> Methods may be defined for arguments: data Use showMethods("with") for currently available ones.
> ts.union function (..., dframe = FALSE) .cbind.ts(list(...), .makeNamesTs(...), dframe = dframe, union = TRUE) <bytecode: 0x36fbf88> <environment: namespace:stats> > .cbindts Error: object > .makeNamesTs Error: object
> matrix function (data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL) { if (is.object(data) || !is.atomic(data)) data <- as.vector(data) .Internal(matrix(data, nrow, ncol, byrow, dimnames, missing(nrow), missing(ncol))) } <bytecode: 0x134bd10> <environment: namespace:base> > .Internal function (call) .Primitive(".Internal") > .Primitive function (name) .Primitive(".Primitive")
> methods(t) [1] t.data.frame t.default t.ts* Non-visible functions are asterisked > methods(class="ts") [1] aggregate.ts as.data.frame.ts cbind.ts* cycle.ts* [5] diffinv.ts* diff.ts kernapply.ts* lines.ts [9] monthplot.ts* na.omit.ts* Ops.ts* plot.ts [13] print.ts time.ts* [<-.ts* [.ts* [17] t.ts* window<-.ts* window.ts* Non-visible functions are asterisked
> getAnywhere(t.ts) A single object matching ‘t.ts’ was found It was found in the following places registered S3 method for t from namespace stats namespace:stats with value function (x) { cl <- oldClass(x) other <- !(cl %in% c("ts", "mts")) class(x) <- if (any(other)) cl[other] attr(x, "tsp") <- NULL t(x) } <bytecode: 0x294e410> <environment: namespace:stats>
> library(Matrix) Loading required package: lattice > chol2inv standardGeneric for "chol2inv" defined from package "base" function (x, ...) standardGeneric("chol2inv") <bytecode: 0x000000000eafd790> <environment: 0x000000000eb06f10> Methods may be defined for arguments: x Use showMethods("chol2inv") for currently available ones.
> showMethods(chol2inv) Function: chol2inv (package base) x="ANY" x="CHMfactor" x="denseMatrix" x="diagonalMatrix" x="dtrMatrix" x="sparseMatrix"
> getMethod("chol2inv", "diagonalMatrix") Method Definition: function (x, ...) { chk.s(...) tcrossprod(solve(x)) } <bytecode: 0x000000000ea2cc70> <environment: namespace:Matrix> Signatures: x target "diagonalMatrix" defined "diagonalMatrix"
require(raster) showMethods(extract) Function: extract (package raster) x="Raster", y="data.frame" x="Raster", y="Extent" x="Raster", y="matrix" x="Raster", y="SpatialLines" x="Raster", y="SpatialPoints" x="Raster", y="SpatialPolygons" x="Raster", y="vector"
getMethod("extract" , signature = c( x = "Raster" , y = "SpatialPolygons") )
> stats:::.makeNamesTs function (...) { l <- as.list(substitute(list(...)))[-1L] nm <- names(l) fixup <- if (is.null(nm)) seq_along(l) else nm == "" dep <- sapply(l[fixup], function(x) deparse(x)[1L]) if (is.null(nm)) return(dep) if (any(fixup)) nm[fixup] <- dep nm } <bytecode: 0x38140d0> <environment: namespace:stats>
download.packages(pkgs = "Matrix", destdir = ".", type = "source")
untar(download.packages(pkgs = "Matrix", destdir = ".", type = "source")[,2])
>t function (x) UseMethod("t") <bytecode: 0x000000003085c010> <environment: namespace:base>
> debug(t) > t(co2) debugging in: t(co2) debug: UseMethod("t") Browse[2]> debugging in: t.ts(co2) debug: { cl <- oldClass(x) other <- !(cl %in% c("ts", "mts")) class(x) <- if (any(other)) cl[other] attr(x, "tsp") <- NULL t(x) } Browse[3]> debug: cl <- oldClass(x) Browse[3]> debug: other <- !(cl %in% c("ts", "mts")) Browse[3]> debug: class(x) <- if (any(other)) cl[other] Browse[3]> debug: attr(x, "tsp") <- NULL Browse[3]> debug: t(x)
{ if (is.null(max)) max <- getOption("max.print", 9999L) if (max < length(x)) { print(format(x[seq_len(max)]), max = max, ...) cat(" [ reached getOption(\"max.print\") -- omitted", length(x) - max, "entries ]\n") } else print(format(x), max = max, ...) invisible(x) }
[1] "{" [2] " if (is.null(max)) " [3] " max <- getOption(\"max.print\", 9999L)" [4] " if (max < length(x)) {" [5] " print(format(x[seq_len(max)]), max = max, ...)" [6] " cat(\" [ reached getOption(\\\"max.print\\\") -- omitted\", " [7] " length(x) - max, \"entries ]\\n\")" [8] " }" [9] " else print(format(x), max = max, ...)" [10] " invisible(x)" [11] "}"
sourceVector = capture.output(print(body(x[["fun"]]))) cat(paste0(" ", sourceVector, "\n"))
if( foo[ Error in if (foo["bool"]) { : argument is not interpretable as logical class( foo[ [1] "list"
bar <- list( mat=matrix(0,nrow=2,ncol=2), rand=rnorm(1) )
foo[[ 2:3 ]] <- bar Error in foo[[2:3]] <- bar : more elements supplied than there are to replace
foo[ 2:3 ] <- bar print( foo ) $str [1] "R" $vec [,1] [,2] [1,] 0 0 [2,] 0 0 $bool [1] -0.6291121
lst <- list( a <- lst[1] class(a) a <- lst[[1]] class(a)
alist <- list(c("a", "b", "c"), c(1,2,3,4), c(8e6, 5.2e9, -9.3e7)) str(alist[[1]]) chr [1:3] "a" "b" "c" str(alist[1]) List of 1 $ : chr [1:3] "a" "b" "c" str(alist[[1]][1]) chr "a"
x[[ y[1] ]][[ y[2] ]][[ y[3] ]] ... [[ y[length(y)] ]]
x <- list(list(list(1), 2), list(list(list(3), 4), 5), 6) x # # # # #
>r [[1]] [1] 1 2 3 4 5 6 7 8 9 10 $foo [1] 1 $far [1] 2
>r[c(1,2,3)] [[1]] [1] 1 2 3 4 5 6 7 8 9 10 $foo [1] 1 $far [1] 2
> r[[1]] [1] 1 2 3 4 5 6 7 8 9 10 >r[["foo"]] [1] 1
> r[[c(1:3)]] Error in r[[c(1:3)]] : recursive indexing failed at level 2 > r[[c(1,2,3)]] Error in r[[c(1, 2, 3)]] : recursive indexing failed at level 2 > r[[c("foo","far")]] Error in r[[c("foo", "far")]] : subscript out of bounds
(x <- c(x=1, y=2)); x[1]; x[[1]] (x <- list(x=1, y=2, z=3)); x[1]; x[[1]] (x <- data.frame(x=1, y=2, z=3)); x[1]; x[[1]]
> class(data) [1] "data.frame" > dsplit<-split(data, data$id) > class(dsplit) [1] "list" > class(dsplit[ [1] "list" > class(dsplit[[ [1] "data.frame"
df1 <- data.frame(a = 1:3) df1$b <- list(4:5, 6:7, 8:9) df1[[1,2]] df1[1,2] str(df1[[1,2]]) str(df1[1,2])
> mtcars mpg cyl disp hp drat wt ... Mazda RX4 21.0 6 160 110 3.90 2.62 ... Mazda RX4 Wag 21.0 6 160 110 3.90 2.88 ... Datsun 710 22.8 4 108 93 3.85 2.32 ... ............
library(remotes) install_version("foobarbaz", "0.1.2")
install.packages("foobarbaz", type = "source") source("http: biocLite("foobarbaz", type = "source")
library(remotes) install_github("packageauthor/foobarbaz") install_bitbucket("packageauthor/foobarbaz") install_gitorious("packageauthor/foobarbaz")
install.packages("lubridate", dependencies=TRUE, repos=
packages <- function(pkg){ new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])] if (length(new.pkg)) install.packages(new.pkg, dependencies = TRUE, repos= sapply(pkg, require, character.only = TRUE) } packages(c("foo", "bar", "baz"))
install.packages("devtools") library(devtools) install_git("https:
detach_package <- function(pkg, character.only = FALSE) { if(!character.only) { pkg <- deparse(substitute(pkg)) } search_item <- paste("package", pkg, sep = ":") while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) } }
library(splines) pkg <- "package:splines" detach(pkg, character.only = TRUE)
if("package:vegan" %in% search()) detach("package:vegan", unload=TRUE)
v <- c( is.element( is.element( subv <- c( subv %in% v is.element(subv, v)
> w <- c(1,2,3) > any(w==1) [1] TRUE > v <- c( > any(v== [1] TRUE > any(v== [1] FALSE
pop <- c(1,2,4,6,10) Tset <- c(2,10,7) pop[which(!(pop%in%Tset))]
yo <- c("a", "a", "b", "b", "c", "c") grep("b", yo) [1] 3 4
yo <- c("a", "a", "b", "b", "c", "c") grepl("b", yo) [1] FALSE FALSE TRUE TRUE FALSE FALSE
l <- replicate( 132, list(sample(letters, 20)), simplify = FALSE )
df <- data.frame(matrix(unlist(l), nrow=132, byrow=T))
df <- data.frame(matrix(unlist(l), nrow=132, byrow=T),stringsAsFactors=FALSE)
l <- list(a = list(var.1 = 1, var.2 = 2, var.3 = 3) , b = list(var.1 = 4, var.2 = 5, var.3 = 6) , c = list(var.1 = 7, var.2 = 8, var.3 = 9) , d = list(var.1 = 10, var.2 = 11, var.3 = 12) )
library(data.table) ll <- list(a = list(var.1 = 1, var.2 = 2, var.3 = 3) , b = list(var.1 = 4, var.2 = 5, var.3 = 6) , c = list(var.1 = 7, var.2 = 8, var.3 = 9) , d = list(var.1 = 10, var.2 = 11, var.3 = 12) ) DT <- rbindlist(ll)
x <- list( a = 1:5, b = 3:4, c = 5:6 ) df <- enframe(x) df
library(tidyverse) l <- replicate( 132, list(sample(letters, 20)), simplify = FALSE ) l_tib <- l %>% unlist(recursive = FALSE) %>% enframe() %>% unnest() l_tib l_tib_spread <- l_tib %>% add_column(index = rep(1:20, 132)) %>% spread(key = index, value = value) l_tib_spread
library(reshape2) l <- list(a = list(var.1 = 1, var.2 = 2, var.3 = 3) , b = list(var.1 = 4, var.2 = 5, var.3 = 6) , c = list(var.1 = 7, var.2 = 8, var.3 = 9) , d = list(var.1 = 10, var.2 = 11, var.3 = 12) ) l <- melt(l) dcast(l, L1 ~ L2)
L1 var.1 var.2 var.3 1 a 1 2 3 2 b 4 5 6 3 c 7 8 9 4 d 10 11 12
l <- list(list(col1="a",col2=1),list(col1="b",col2=2)) f = function(x) function(i) unlist(lapply(x, `[[`, i), use.names=FALSE) as.data.frame(Map(f(l), names(l[[1]])))
do.call(rbind, lapply(your_list, data.frame, stringsAsFactors=FALSE))
{ "2015": { "spain": {"population": 43, "GNP": 9}, "sweden": {"population": 7, "GNP": 6}}, "2016": { "spain": {"population": 45, "GNP": 10}, "sweden": {"population": 9, "GNP": 8}} }
myjson <- jsonlite:fromJSON(file("test.json")) tall <- reshape2::melt(myjson)[, c("L1", "L2", "L3", "value")] L1 L2 L3 value 1 2015 spain population 43 2 2015 spain GNP 9 3 2015 sweden population 7 4 2015 sweden GNP 6 5 2016 spain population 45 6 2016 spain GNP 10 7 2016 sweden population 9 8 2016 sweden GNP 8
wide <- reshape2::dcast(tall, L1+L2~L3) L1 L2 GNP population 1 2015 spain 9 43 2 2015 sweden 6 7 3 2016 spain 10 45 4 2016 sweden 8 9
lolov = list(list(c(1,2,3),c(4,5,6)), list(c(7,8,9),c(10,11,12),c(13,14,15)) )
lov = unlist(lolov, recursive = FALSE ) > lov [[1]] [1] 1 2 3 [[2]] [1] 4 5 6 [[3]] [1] 7 8 9 [[4]] [1] 10 11 12 [[5]] [1] 13 14 15
library(plyr) >ldply(lov) V1 V2 V3 1 1 2 3 2 4 5 6 3 7 8 9 4 10 11 12 5 13 14 15
l <- list(a = list(var.1 = 1, var.2 = 2, var.3 = 3) , b = list(var.1 = 4, var.2 = 5) , c = list(var.1 = 7, var.3 = 9) , d = list(var.1 = 10, var.2 = 11, var.3 = NA)) df <- dplyr::bind_rows(l) df <- purrr::map_df(l, dplyr::bind_rows) df <- purrr::map_df(l, ~.x) var.1 var.2 var.3 <dbl> <dbl> <dbl> 1 1 2 3 2 4 5 NA 3 7 NA 9 4 10 11 NA
library(dplyr) bind_rows( list(a = 1, b = 2), data_frame(a = 3:4, b = 5:6), c(a = 7) ) a b <dbl> <dbl> 1 1 2 2 3 5 3 4 6 4 7 NA
l <- replicate(10,list(sample(letters, 20))) a <-lapply(l[1:10],data.frame) do.call("cbind", a)
n = 1000 kk = 10 x1 = runif(kk) y1 = runif(kk) z1 = runif(kk) x4 = sample(x1,length(x1)) y4 = sample(y1,length(y1)) randObs <- function() { ix = sample( 1:length(x4), 1 ) iy = sample( 1:length(y4), 1 ) rx = rnorm( 1, x4[ix], runif(1)/8 ) ry = rnorm( 1, y4[ix], runif(1)/8 ) return( c(rx,ry) ) } x = c() y = c() for ( k in 1:n ) { rPair = randObs() x = c( x, rPair[1] ) y = c( y, rPair[2] ) } z <- rnorm(n) d <- data.frame( x, y, z )
n = 100 g = 6 set.seed(g) d <- data.frame(x = unlist(lapply(1:g, function(i) rnorm(n/g, runif(1)*i^2))), y = unlist(lapply(1:g, function(i) rnorm(n/g, runif(1)*i^2)))) plot(d)
mydata <- d wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var)) for (i in 2:15) wss[i] <- sum(kmeans(mydata, centers=i)$withinss) plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
library(fpc) pamk.best <- pamk(d) cat("number of clusters estimated by optimum average silhouette width:", pamk.best$nc, "\n") plot(pam(d, pamk.best$nc))
library(fpc) asw <- numeric(20) for (k in 2:20) asw[[k]] <- pam(d, k) $ silinfo $ avg.width k.best <- which.max(asw) cat("silhouette-optimal number of clusters:", k.best, "\n")
require(vegan) fit <- cascadeKM(scale(d, center = TRUE, scale = TRUE), 1, 10, iter = 1000) plot(fit, sortg = TRUE, grpmts.plot = TRUE) calinski.best <- as.numeric(which.max(fit$results[2,])) cat("Calinski criterion optimal number of clusters:", calinski.best, "\n")
# library(mclust) d_clust <- Mclust(as.matrix(d), G=1:20) m.best <- dim(d_clust$z)[2] cat("model-based optimal number of clusters:", m.best, "\n") plot(d_clust)
library(apcluster) d.apclus <- apcluster(negDistMat(r=2), d) cat("affinity propogation optimal number of clusters:", length(d.apclus@clusters), "\n") heatmap(d.apclus) plot(d.apclus, d)
library(cluster) clusGap(d, kmeans, 10, B = 100, verbose = interactive()) Clustering k = 1,2,..., K.max (= 10): .. done Bootstrapping, b = 1,2,..., B (= 100) [one "." per sample]: .................................................. 50 .................................................. 100 Clustering Gap statistic ["clusGap"]. B=100 simulated reference sets, k = 1..10 --> Number of clusters (method logW E.logW gap SE.sim [1,] 5.991701 5.970454 -0.0212471 0.04388506 [2,] 5.152666 5.367256 0.2145907 0.04057451 [3,] 4.557779 5.069601 0.5118225 0.03215540 [4,] 3.928959 4.880453 0.9514943 0.04630399 [5,] 3.789319 4.766903 0.9775842 0.04826191 [6,] 3.747539 4.670100 0.9225607 0.03898850 [7,] 3.582373 4.590136 1.0077628 0.04892236 [8,] 3.528791 4.509247 0.9804556 0.04701930 [9,] 3.442481 4.433200 0.9907197 0.04935647 [10,] 3.445291 4.369232 0.9239414 0.05055486
library(NbClust) nb <- NbClust(d, diss="NULL", distance = "euclidean", min.nc=2, max.nc=15, method = "kmeans", index = "alllong", alphaBeale = 0.1) hist(nb$Best.nc[1,], breaks = max(na.omit(nb$Best.nc[1,])))
install.packages("bclust") library(bclust) x <- as.matrix(d) d.bclus <- bclust(x, transformed.par = c(0, -50, log(16), 0, 0, 0)) viplot(imp(d.bclus)$var); plot(d.bclus); ditplot(d.bclus) dptplot(d.bclus, scale = 20, horizbar.plot = TRUE,varimp = imp(d.bclus)$var, horizbar.distance = 0, dendrogram.lwd = 2)
library(pvclust) library(MASS) data(Boston) boston.pv <- pvclust(Boston) plot(boston.pv)
d_dist <- dist(as.matrix(d)) plot(hclust(d_dist)) clusters <- identify(hclust(d_dist))
elbow.k <- function(mydata){ dist.obj <- dist(mydata) hclust.obj <- hclust(dist.obj) css.obj <- css.hclust(dist.obj,hclust.obj) elbow.obj <- elbow.batch(css.obj) k <- elbow.obj$k return(k) }
no_cores <- detectCores() cl<-makeCluster(no_cores) clusterEvalQ(cl, library(GMD)) clusterExport(cl, list("data.clustering", "data.convert", "elbow.k", "clustering.kmeans")) start.time <- Sys.time() elbow.k.handle(data.clustering)) k.clusters <- parSapply(cl, 1, function(x) elbow.k(data.clustering)) end.time <- Sys.time() cat(
library(apcluster) apclus = apcluster(negDistMat(r=2), data) show(apclus)
sim = corSimMat(data, method="spearman") apclus = apcluster(s=sim)
library(RWeka) WOW("XMeans") weka_ctrl <- Weka_control( I = 1000, M = 1000, L = 20, H = 150, D = "weka.core.EuclideanDistance", C = 0.4, S = 12 ) x_means <- XMeans(d, control = weka_ctrl) d$xmeans.cluster <- x_means$class_ids
> set.seed(2) > x=matrix(rnorm(50*2), ncol=2) > hc.complete = hclust(dist(x), method="complete") > plot(hc.complete)
> cutree(hc.complete,k = 2) [1] 1 1 1 2 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 1 1 2 1 1 1 [26] 2 1 1 1 1 1 1 1 1 1 1 2 2 1 1 1 2 1 1 1 1 1 1 1 2
library(factoextra) fviz_nbclust(mtcars, kmeans, method = "wss") + geom_vline(xintercept = 3, linetype = 2)+ labs(subtitle = "Elbow method")
df <- data.frame(Date=as.Date("01/01/2000", format="%m/%d/%Y"), File="", User="", stringsAsFactors=FALSE) df <- df[-1,]
df <- data.frame(Date=as.Date(character()), File=character(), User=character(), stringsAsFactors=FALSE)
df <- data.frame(Doubles=double(), Ints=integer(), Factors=factor(), Logicals=logical(), Characters=character(), stringsAsFactors=FALSE) str(df) > str(df) $ Doubles : num $ Ints : int $ Factors : Factor w/ 0 levels: $ Logicals : logi $ Characters: chr
df = data.frame(matrix(vector(), 0, 3, dimnames=list(c(), c("Date", "File", "User"))), stringsAsFactors=F)
colClasses = c("Date", "character", "character") col.names = c("Date", "File", "User") df <- read.table(text = "", colClasses = colClasses, col.names = col.names)
df <- read.csv(text="Date,File,User", colClasses = colClasses)
structure(list(Date = as.Date(character()), File = character(), User = character()), class = "data.frame")
s <- function() structure(list(Date = as.Date(character()), File = character(), User = character()), class = "data.frame") d <- function() data.frame(Date = as.Date(character()), File = character(), User = character(), stringsAsFactors = FALSE) library("microbenchmark") microbenchmark(s(), d())
df = data.frame(id = numeric(0), jobs = numeric(0));
newrow = data.frame(id=3, jobs=4) df <- rbind(df, newrow)
headers<-c("Date","File","User") df <- as.data.frame(matrix(,ncol=3,nrow=0)) names(df)<-headers df<-rbind(df, new_df)
names <- c("v","u","w") df <- data.frame() for (k in names) df[[k]]<-as.numeric()
names <- c("u", "v") df <- data.frame() df[[names[1]]] <- as.numeric() df[[names[2]]] <- as.character()
library(data.table) setnames(setDF(lapply(colClasses, function(x) eval(call(x)))), col.names)
classes <- c("character", "numeric", "factor", "integer", "logical","raw", "complex") NN <- 300 colClasses <- sample(classes, NN, replace = TRUE) col.names <- paste0("V", 1:NN) setDF(lapply(colClasses, function(x) eval(call(x)))) library(microbenchmark) microbenchmark(times = 1000, read = read.table(text = "", colClasses = colClasses, col.names = col.names), DT = setnames(setDF(lapply(colClasses, function(x) eval(call(x)))), col.names))
microbenchmark(times = 1000, DT = setnames(setDF(lapply(colClasses, function(x) eval(call(x)))), col.names), struct = eval(parse(text=paste0( "structure(list(", paste(paste0(col.names, "=", colClasses, "()"), collapse = ","), "), class = \"data.frame\")"))))
create_empty_table <- function(num_rows, num_cols) { frame <- data.frame(matrix(NA, nrow = num_rows, ncol = num_cols)) return(frame) }
create_empty_table <- function(num_rows, num_cols, type_vec) { frame <- data.frame(matrix(NA, nrow = num_rows, ncol = num_cols)) for(i in 1:ncol(frame)) { print(type_vec[i]) if(type_vec[i] == if(type_vec[i] == if(type_vec[i] == if(type_vec[i] == } return(frame) }
lapply(df, class) $X1 [1] "character" $X2 [1] "logical" $X3 [1] "numeric"
nms <- sample(LETTERS,sample(1:10)) as.data.frame(t(matrix(nrow=length(nms),ncol=0,dimnames=list(nms))))
> require(dplyr) > dbNames <- c( > emptyTableOut <- data.frame( character(), matrix(integer(), ncol = 3, nrow = 0), stringsAsFactors = FALSE ) %>% setNames(nm = c(dbNames)) > glimpse(emptyTableOut) Observations: 0 Variables: 4 $ a <chr> $ b <int> $ c <int> $ d <int>
args <- commandArgs(TRUE) res <- try(install.packages(args)) if(inherits(res, "try-error")) q(status=1) else q()
airquality[airquality$Month == 8 & airquality$Temp > 90, ]
scramble <- function(x) x[sample(nrow(x)), ] subscramble <- function(x, condition) { scramble(subset(x, condition)) } subscramble(mtcars, cyl == 4)
cyl <- 4 subscramble(mtcars, cyl == 4) cyl <- sample(10, 100, rep = T) subscramble(mtcars, cyl == 4)
require(microbenchmark) microbenchmark(subset(airquality, Month == 8 & Temp > 90),airquality[airquality$Month == 8 & airquality$Temp > 90,]) Unit: microseconds expr min lq median uq max neval subset(airquality, Month == 8 & Temp > 90) 301.994 312.1565 317.3600 349.4170 500.903 100 airquality[airquality$Month == 8 & airquality$Temp > 90, ] 234.807 239.3125 244.2715 271.7885 340.058 100
numbers <- c(4,23,4,23,5,43,54,56,657,67,67,435, 453,435,324,34,456,56,567,65,34,435)
> a <- table(numbers) > a numbers 4 5 23 34 43 54 56 65 67 324 435 453 456 567 657 2 1 2 2 1 1 2 1 2 1 3 1 1 1 1
> as.data.frame(table(numbers)) numbers Freq 1 4 2 2 5 1 3 23 2 4 34 2 ...
> numbers <- c(4,23,4,23,5,43,54,56,657,67,67,435,453,435,324,34,456,56,567,65,34,435) > a <- rle(sort(numbers)) > a Run Length Encoding lengths: int [1:15] 2 1 2 2 1 1 2 1 2 1 ... values : num [1:15] 4 5 23 34 43 54 56 65 67 324 ...
> b <- data.frame(number=a$values, n=a$lengths) > b values n 1 4 2 2 5 1 3 23 2 4 34 2 5 43 1 6 54 1 7 56 2 8 65 1 9 67 2 10 324 1 11 435 3 12 453 1 13 456 1 14 567 1 15 657 1
index<-sapply(1:length(numbers),function(x)sum(numbers[1:x]==numbers[x])) cbind(numbers, index)
numbers index [1,] 4 1 [2,] 23 1 [3,] 4 2 [4,] 23 2 [5,] 5 1 [6,] 43 1 [7,] 54 1 [8,] 56 1 [9,] 657 1 [10,] 67 1 [11,] 67 2 [12,] 435 1 [13,] 453 1 [14,] 435 2 [15,] 324 1 [16,] 34 1 [17,] 456 1 [18,] 56 2 [19,] 567 1 [20,] 65 1 [21,] 34 2 [22,] 435 3
numbers <- c(4,23,4,23,5,43,54,56,657,67,67,435 453,435,324,34,456,56,567,65,34,435) > length(grep(435, numbers)) [1] 3 > length(which(435 == numbers)) [1] 3 > require(plyr) > df = count(numbers) > df[df$x == 435, ] x freq 11 435 3 > sum(435 == numbers) [1] 3 > sum(grepl(435, numbers)) [1] 3 > sum(435 == numbers) [1] 3 > tabulate(numbers)[435] [1] 3 > table(numbers)[ 435 3 > length(subset(numbers, numbers== [1] 3
numbers <- c(4,23,4,23,5,43,54,56,657,67,67,435) x <- 67 numbertable <- table(numbers) numbertable[as.character(x)]
numbers <- c(4,23,4,23,5,43,54,56,657,67,67,435,453,435,324,34,456,56,567,65,34,435) (s<-summary (as.factor(numbers)))
4 5 23 34 43 54 56 65 67 324 435 453 456 567 657 2 1 2 2 1 1 2 1 2 1 3 1 1 1 1
Number Freq 1 4 2 2 5 1 3 23 2 4 34 2 5 43 1 6 54 1 7 56 2 8 65 1 9 67 2 10 324 1 11 435 3 12 453 1 13 456 1 14 567 1 15 657 1
library(plyr) numbers =c(4,23,4,23,5,43,54,56,657,67,67,435,453,435,7,65,34,435) print(length(which(numbers==435))) print(sum(numbers==435)) print(sum(c(TRUE, FALSE, TRUE))) print(count(numbers[numbers==435])) print(count(numbers[numbers==435])[[
df <- data.frame(No = numbers) df$count <- rowSums(outer(df$No, df$No, FUN = `==`))
Mode <- function(x) { ux <- unique(x) ux[which.max(tabulate(match(x, ux)))] }
Modes <- function(x) { ux <- unique(x) tab <- tabulate(match(x, ux)) ux[tab == max(tab)] }
mySamples <- c(19, 4, 5, 7, 29, 19, 29, 13, 25, 19) library(modeest) mlv(mySamples, method = "mfv") Mode (most likely value): 19 Bickel Call: mlv.default(x = mySamples, method = "mfv")
Mode <- function(x, na.rm = FALSE) { if(na.rm){ x = x[!is.na(x)] } ux <- unique(x) return(ux[which.max(tabulate(match(x, ux)))]) }
estimate_mode <- function(x) { d <- density(x) d$x[which.max(d$y)] }
x <- c(5.8, 5.6, 6.2, 4.1, 4.9, 2.4, 3.9, 1.8, 5.7, 3.2) estimate_mode(x)
modeav <- function (x, method = "mode", na.rm = FALSE) { x <- unlist(x) if (na.rm) x <- x[!is.na(x)] u <- unique(x) n <- length(u) frequencies <- rep(0, n) for (i in seq_len(n)) { if (is.na(u[i])) { frequencies[i] <- sum(is.na(x)) } else { frequencies[i] <- sum(x == u[i], na.rm = TRUE) } } if (method == "mode" | is.na(method) | method == "") {return(ifelse(length(frequencies[frequencies==max(frequencies)])>1,NA,u[which.max(frequencies)]))} if(method == "nmode" | method == "nmodes") {return(length(frequencies[frequencies==max(frequencies)]))} if (method == "modes" | method == "modevalues") {return(u[which(frequencies==max(frequencies), arr.ind = FALSE, useNames = FALSE)])} warning("Warning: method not recognised. Valid methods are return() }
freq <- tapply(mySamples,mySamples,length) as.numeric(names(freq)[which.max(freq)])
estimate_mode <- function(x,from=min(x), to=max(x)) { d <- density(x, from=from, to=to) d$x[which.max(d$y)] }
MODE <- function(dataframe){ DF <- as.data.frame(dataframe) MODE2 <- function(x){ if (is.numeric(x) == FALSE){ df <- as.data.frame(table(x)) df <- df[order(df$Freq), ] m <- max(df$Freq) MODE1 <- as.vector(as.character(subset(df, Freq == m)[, 1])) if (sum(df$Freq)/length(df$Freq)==1){ warning("No Mode: Frequency of all values is 1", call. = FALSE) }else{ return(MODE1) } }else{ df <- as.data.frame(table(x)) df <- df[order(df$Freq), ] m <- max(df$Freq) MODE1 <- as.vector(as.numeric(as.character(subset(df, Freq == m)[, 1]))) if (sum(df$Freq)/length(df$Freq)==1){ warning("No Mode: Frequency of all values is 1", call. = FALSE) }else{ return(MODE1) } } } return(as.vector(lapply(DF, MODE2))) }
MODE(mtcars) MODE(CO2) MODE(ToothGrowth) MODE(InsectSprays)
stat_mode <- function(x, return_multiple = TRUE, na.rm = FALSE) { if(na.rm){ x <- na.omit(x) } ux <- unique(x) freq <- tabulate(match(x, ux)) mode_loc <- if(return_multiple) which(freq==max(freq)) else which.max(freq) return(ux[mode_loc]) }
foo <- c(2L, 2L, 3L, 4L, 4L, 5L, NA, NA) bar <- c( str(stat_mode(foo)) str(stat_mode(bar)) str(stat_mode(bar, na.rm=T)) str(stat_mode(bar, return_mult=F, na.rm=T))
Mode <- function(x){ a = table(x) return(a[which.max(a)]) }
Mode <- function(x, method = "one", na.rm = FALSE) { x <- unlist(x) if (na.rm) { x <- x[!is.na(x)] } ux <- unique(x) n <- length(ux) frequencies <- tabulate(match(x, ux)) modes <- frequencies == max(frequencies) nmodes <- sum(modes) nmodes <- ifelse(nmodes==n, 0L, nmodes) if (method %in% c("one", "mode", "") | is.na(method)) { if (nmodes != 1) { return(NA) } else { return(ux[which(modes)]) } } else if (method %in% c("n", "nmodes")) { return(nmodes) } else if (method %in% c("all", "modes")) { if (nmodes > 0) { return(ux[which(modes)]) } else { return(NA) } } warning("Warning: method not recognised. Valid methods are }
mySamples <- c(19, 4, 5, 7, 29, 19, 29, 13, 25, 19) tabSmpl<-tabulate(mySamples) SmplMode<-which(tabSmpl== max(tabSmpl)) if(sum(tabSmpl == max(tabSmpl))>1) SmplMode<-NA > SmplMode [1] 19
> a<-c(1,1,2,2,3,3,4,4,5) > names(table(a))[table(a)==max(table(a))]
mode <- function(x) { unique_val <- unique(x) counts <- vector() for (i in 1:length(unique_val)) { counts[i] <- length(which(x==unique_val[i])) } position <- c(which(counts==max(counts))) if (mean(counts)==max(counts)) mode_x <- else mode_x <- unique_val[position] return(mode_x) }
rmode <- function(x) { x <- sort(x) u <- unique(x) y <- lapply(u, function(y) length(x[x==y])) u[which( unlist(y) == max(unlist(y)) )] }
library(magrittr) Aksel <- function(x, freq=FALSE) { z <- 2 if (freq) z <- 1:2 run <- x %>% as.vector %>% sort %>% rle %>% unclass %>% data.frame colnames(run) <- c("freq", "value") run[which(run$freq==max(run$freq)), z] %>% as.vector } set.seed(2) F <- sample(c("yes", "no", "maybe", NA), 10, replace=TRUE) %>% factor Aksel(F) C <- sample(c("Steve", "Jane", "Jonas", "Petra"), 20, replace=TRUE) Aksel(C, freq=TRUE)
Mode <- function(x){ y <- data.frame(table(x)) y[y$Freq == max(y$Freq),1] }
> test <- c("red","red","green","blue","red") > Mode(test) [1] red
Mode <- function(x){ y <- data.frame(table(x)) z <- y[y$Freq == max(y$Freq),1] as(as.character(z),class(x)) }
Mode <- function(v) { uniqv <- unique(v) m1 <- max(tabulate(match(v, uniqv))) n <- length(tabulate(match(v, uniqv))) same_val_check <- all(diff(v) == 0) if(same_val_check == F){ m2 <- sort(tabulate(match(v, uniqv)),partial=n-1)[n-1] if (m1 != m2) { mode <- uniqv[which.max(tabulate(match(v, uniqv)))] } else{ mode <- "Two or more values have same frequency. So mode can } } else { mode <- unique(v) } return(mode) }
x1 <- c(1,2,3,3,3,4,5) Mode(x1) x2 <- c(1,2,3,4,5) Mode(x2) x3 <- c(1,1,2,3,3,4,5) Mode(x3)
df = as.data.frame(unclass(rle(sort(mySamples)))) df = df[order(-df$lengths),] head(df)
function(x) density(x, 2)$x[density(x, 2)$y == max(density(x, 2)$y)]
Mode <- function(x) { if (is.numeric(x)) { x_table <- table(x) return(as.numeric(names(x_table)[which.max(x_table)])) } }
set.seed(100) v <- sample(x = 1:100, size = 1000000, replace = TRUE) system.time(Mode(v))
mode <- function(x){ y <- as.factor(x) freq <- summary(y) mode <- names(freq)[freq[names(freq)] == max(freq)] as.numeric(mode) }
labels(table(HouseVotes84$V1)[as.numeric(labels(max(table(HouseVotes84$V1))))])
Mode <- function(x) { if ( length(x) <= 2 ) return(x[1]) if ( anyNA(x) ) x = x[!is.na(x)] ux <- unique(x) ux[which.max(tabulate(match(x, ux)))] }
t0 <- Sys.time() summary(as.factor(round(rnorm(1e6), 2)))[1] Sys.time()-t0
> temp <- table(as.vector(x)) > names (temp)[temp==max(temp)] [1] "1" > as.data.frame(table(x)) r5050 Freq 1 0 13 2 1 15 3 2 6 >
install.packages(path_to_file, repos = NULL, type="source")
library(devtools) install_github("twitter/AnomalyDetection")
> paste("Hello", "world", sep=" ") [1] "Hello world"
> x <- c("Hello", "World") > x [1] "Hello" "World" > paste(x, collapse="--") [1] "Hello--World"
> paste(x, "and some more", sep="|-|", collapse="--") [1] "Hello|-|and some more--World|-|and some more"
tmp <- cbind("GAD", "AB") library(stringr) str_c(tmp, collapse = ",")
> tmp = paste("GAD", "AB", sep = ",") > tmp [1] "GAD,AB"
p <- function(..., sep= paste(..., sep=sep, collapse=sep) }
implode <- function(..., sep= paste(..., collapse=sep) }
sprintf("%s you can add other static strings here %s",string1,string2)
sprintf("/%s", paste("this", "is", "a", "path", sep="/"))
df <- data.frame(a = letters[1:5], b = LETTERS[1:5], c = 1:5) df$new_col <- do.call(paste, c(df[c("a", "b")], sep = ", ")) df
x <- capture.output(cat(data, sep = ",")) x [1] "GAD,AB"
> myDummy[myDummy$country == c("Austria"),c(1,2,3:7,19)] [1] codeHelper country dummyLI dummyLMI dummyUMI [6] dummyHInonOECD dummyHIOECD dummyOECD <0 rows> (or 0-length row.names)
> myDummy[myDummy$country == c("Austria "),c(1,2,3:7,19)] codeHelper country dummyLI dummyLMI dummyUMI dummyHInonOECD dummyHIOECD 18 AUT Austria 0 0 0 0 1 dummyOECD 18 1
trim.leading <- function (x) sub("^\\s+", "", x) trim.trailing <- function (x) sub("\\s+$", "", x) trim <- function (x) gsub("^\\s+|\\s+$", "", x)
install.packages("stringr", dependencies=TRUE) require(stringr) example(str_trim) d4$clean2<-str_trim(d4$V2)
trim <- function( x ) { gsub("(^[[:space:]]+|[[:space:]]+$)", "", x) }
> text = " foo bar baz 3 " > trim(text) [1] "foo bar baz 3"
names<-c("Ganga Din\t","Shyam Lal","Bulbul ") grep("[[:space:]]+$",names) [1] 1 3 grepl("[[:space:]]+$",names) [1] TRUE FALSE TRUE sub("[[:space:]]+$","",names) [1] "Ganga Din" "Shyam Lal" "Bulbul"
> trim(" Remove leading and trailing blanks ") [1] "Remove leading and trailing blanks"
> x <- c(" leading space","trailing space ") > stri_trim(x) [1] "leading space" "trailing space"
> a <- " a string with lots of starting, inter mediate and trailing whitespace "
> strsplit(a, split=" +") [[1]] [1] "" "a" "string" "with" "lots" [6] "of" "starting," "inter" "mediate" "and" [11] "trailing" "whitespace"
trim.strings <- function(x, side = "both") { if (is.na(match(side, c("both", "leading", "trailing")))) { side <- "both" } if (side == "leading") { sub("^\\s+", "", x) } else { if (side == "trailing") { sub("\\s+$", "", x) } else gsub("^\\s+|\\s+$", "", x) } }
a <- c(" ABC123 456 ", " ABC123DEF ") trim.strings(a) trim.strings(a, side = "leading") trim.strings(a, side = "trailing")
myDummy[myDummy$country == "Austria "] <- "Austria"
myDummy$country = factor(myDummy$country, levels=c("Austria", "USA", "Spain"))
> newprice Chang. Chang. Chang. 1 100 36 136 2 120 -33 87 3 150 14 164
names(newprice)[1]<-paste("premium") names(newprice)[2]<-paste("change") names(newprice)[3]<-paste("newprice")
> names(newprice)[1]<-paste(“premium”) Error: unexpected input in "names(newprice)[1]<-paste(“" > names(newprice)[2]<-paste(“change”) Error: unexpected input in "names(newprice)[2]<-paste(“" > names(newprice)[3]<-paste(“newpremium”) Error: unexpected input in "names(newprice)[3]<-paste(“"
R> X <- data.frame(bad=1:3, worse=rnorm(3)) R> X bad worse 1 1 -2.440467 2 2 1.320113 3 3 -0.306639 R> colnames(X) <- c("good", "better") R> X good better 1 1 -2.440467 2 2 1.320113 3 3 -0.306639
colnames(dataframe)[which(names(dataframe) == "columnName")] <- "newColumnName"
names(newprice)[1]<-paste(“premium”) names(newprice)[1]<-paste("premium")
data_frame <- setNames(data_frame, c("premium","change","newprice"))
names(data)[names(data) == "oldVariableName"] <- "newVariableName"
cols <- c("premium","change","newprice") colnames(dataframe) <- cols
df = data.frame(bad=1:3, worse=rnorm(3), worst=LETTERS[1:3]) bad worse worst 1 1 -0.77915455 A 2 2 0.06717385 B 3 3 -0.02827242 C
colnames(df)[which(colnames(df) %in% c("bad","worst") )] <- c("good","best")
good worse best 1 1 -0.6010363 A 2 2 0.7336155 B 3 3 0.9435469 C
names(newprice) <- c("premium", "change", "newprice")
library(data.table) set.seed(123) n = 1e8 df = data.frame(bad=sample(1:3, n, TRUE), worse=rnorm(n)) address(df) colnames(df) <- c("good", "better") address(df) rm(df) dt = data.table(bad=sample(1:3, n, TRUE), worse=rnorm(n)) address(dt) setnames(dt, c("good", "better")) address(dt) rm(dt)
colnames(t) [1] "Class" "Sex" "Age" "Survived" "Freq"
colnames(t)=c("STD","Gender","AGE","SURVIVED","FREQ")
names(newprice) <- c("premium","change","newprice")
rename.columns=function(df,changelist){ for(i in 1:length(names(df))){ if(length(changelist[[names(df)[i]]])>0){ names(df)[i]= changelist[[names(df)[i]]] } } df }
library(dplyr) mtcars %>% tibble::rownames_to_column( select(car_model, est_mpg = mpg, horse_power = hp, everything()) %>% rename(weight = wt, cylinders = cyl) %>% head(2) car_model est_mpg horse_power cylinders disp drat weight qsec vs am gear carb 1 Mazda RX4 21 110 6 160 3.9 2.620 16.46 0 1 4 4 2 Mazda RX4 Wag 21 110 6 160 3.9 2.875 17.02 0 1 4 4
iris %>% rename_all(~gsub("\\s+|\\.", "_", .)) %>% rename_all(tolower) %>% head(2) sepal_length sepal_width petal_length petal_width species 1 5.1 3.5 1.4 0.2 setosa 2 4.9 3.0 1.4 0.2 setosa
iris %>% select_all(~gsub("\\s+|\\.", "_", .)) %>% select_all(tolower) %>% head(2) sepal_length sepal_width petal_length petal_width species 1 5.1 3.5 1.4 0.2 setosa 2 4.9 3.0 1.4 0.2 setosa
get.the.df <- read_excel("df.xls") %>% select("X1","X2","X3");names(get.the.df)
library(snow) library(Rmpi) cl <- makeMPIcluster(mpi.universe.size()-1) stopCluster(cl) mpi.quit()
Error: This is R 2.11.1, package In addition: Warning message:
.libPaths("/soft/R/lib/R/library") .libPaths("~/R/x86_64-pc-linux-gnu-library/2.11") print(.libPaths()) print(sessionInfo()) print(version)
> sessionInfo() R version 2.15.0 (2012-03-30) Platform: x86_64-pc-linux-gnu (64-bit) locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 LC_PAPER=C LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] graphics grDevices utils datasets stats grid methods base other attached packages: [1] ggplot2_0.9.0 reshape2_1.2.1 plyr_1.7.1 loaded via a namespace (and not attached): [1] colorspace_1.1-1 dichromat_1.2-4 digest_0.5.2 MASS_7.3-18 memoise_0.1 munsell_0.3 [7] proto_0.3-9.2 RColorBrewer_1.0-5 scales_0.2.0 stringr_0.6 >
packinfo <- installed.packages(fields = c("Package", "Version")) packinfo[,c("Package", "Version")]
packinfo["RANN",c("Package", "Version")] packinfo["graphics",c("Package", "Version")]
asNamespace(pkg)$`.__NAMESPACE__.`$spec[["version"]]
packageDescription("AppliedPredictiveModeling")$Version [1] "1.1-6"
installed.packages(fields = c ("Package", "Version"))
print(paste("R", getRversion())) print("-------------") for (package_name in sort(loadedNamespaces())) { print(paste(package_name, packageVersion(package_name))) }
[1] "R 3.2.2" [1] "-------------" [1] "AnnotationDbi 1.32.2" [1] "Biobase 2.30.0" [1] "BiocGenerics 0.16.1" [1] "BiocParallel 1.4.3" [1] "DBI 0.3.1" [1] "DESeq2 1.10.0" [1] "Formula 1.2.1" [1] "GenomeInfoDb 1.6.1" [1] "GenomicRanges 1.22.3" [1] "Hmisc 3.17.0" [1] "IRanges 2.4.6" [1] "IRdisplay 0.3" [1] "IRkernel 0.5"
mainDir <- "c:/path/to/main/dir" subDir <- "outputDirectory" if (file.exists(subDir)){ setwd(file.path(mainDir, subDir)) } else { dir.create(file.path(mainDir, subDir)) setwd(file.path(mainDir, subDir)) }
dir.create(file.path(mainDir, subDir), showWarnings = FALSE) setwd(file.path(mainDir, subDir))
dir.create(file.path(mainDir, subDir)) setwd(file.path(mainDir, subDir))
ifelse(!dir.exists(file.path(mainDir, subDir)), dir.create(file.path(mainDir, subDir)), FALSE)
mainDir <- "~" subDir <- "outputDirectory" if (file.exists(paste(mainDir, subDir, "/", sep = "/", collapse = "/"))) { cat("subDir exists in mainDir and is a directory") } else if (file.exists(paste(mainDir, subDir, sep = "/", collapse = "/"))) { cat("subDir exists in mainDir but is a file") } else { cat("subDir does not exist in mainDir - creating") dir.create(file.path(mainDir, subDir)) } if (file.exists(paste(mainDir, subDir, "/", sep = "/", collapse = "/"))) { setwd(file.path(mainDir, subDir)) } else { cat("subDir does not exist") }
mainDir = "c:/path/to/main/dir" subDir = "outputDirectory" options(someUniqueTag.mainDir = mainDir) options(someUniqueTag.subDir = "subDir") if (!file_test("-d", file.path(mainDir, subDir)){ if(file_test("-f", file.path(mainDir, subDir)) { stop("Path can } else { dir.create(file.path(mainDir, subDir)) } }
mainDir = getOption(someUniqueTag.mainDir) subDir = getOption(someUniqueTag.subDir) filename = "fileToBeCreated.txt" file.create(file.path(mainDir, subDir, filename))
mkdirs <- function(fp) { if(!file.exists(fp)) { mkdirs(dirname(fp)) dir.create(fp) } } mkdirs("H:/foo/bar")
output_dir <- file.path(main_dir, sub_dir) if (!dir.exists(output_dir)){ dir.create(output_dir) } else { print("Dir already exists!") }
file.exists("R:/data/CCAM/CCAMC160b_echam5_A2-ct-uf.-5t05N.190to240E_level1000/cache/") [1] FALSE file.exists("R:/data/CCAM/CCAMC160b_echam5_A2-ct-uf.-5t05N.190to240E_level1000/cache") [1] TRUE file.info(cacheDir)["isdir"]
df <- setNames(data.frame(as.list(1:5)), LETTERS[1:5]) df[,c("A","B","E")]
> dat <- data.frame(A=c(1,2),B=c(3,4),C=c(5,6),D=c(7,7),E=c(8,8),F=c(9,9)) > subset(dat, select=c("A", "B")) A B 1 1 3 2 2 4
> df <- data.frame(A=c(1,2),B=c(3,4),C=c(5,6),D=c(7,7),E=c(8,8),F=c(9,9)) > df A B C D E F 1 1 3 5 7 8 9 2 2 4 6 7 8 9 > df[,c(1,2,5)] A B E 1 1 3 8 2 2 4 8 > df[,c("A","B","E")] A B E 1 1 3 8 2 2 4 8
df = data.frame(a="a",b="b") identical( df[,c("a")], subset(df,select="a") ) identical( df[,c("a","b")], subset(df,select=c("a","b")) )
setClass("mynewclass", representation(myslot1="logical", myslot2="integer", myslot3="data.frame"), contains = "character" )
library(ggplot2) carrots <- data.frame(length = rnorm(500000, 10000, 10000)) cukes <- data.frame(length = rnorm(50000, 10000, 20000)) carrots$veg <- cukes$veg <- vegLengths <- rbind(carrots, cukes) ggplot(vegLengths, aes(length, fill = veg)) + geom_density(alpha = 0.2)
> nchar("foo") [1] 3 > set.seed(10) > strn <- paste(sample(LETTERS, 10), collapse = "") > strn [1] "NHKPBEFTLY" > nchar(strn) [1] 10
> stri_length(c("ala ma kota","ABC",NA)) [1] 11 3 NA
require(microbenchmark) require(stringi) require(stringr) x <- c(letters,NA,paste(sample(letters,2000,TRUE),collapse=" ")) microbenchmark(nchar(x),str_length(x),stri_length(x)) Unit: microseconds expr min lq median uq max neval nchar(x) 11.868 12.776 13.1590 13.6475 41.815 100 str_length(x) 30.715 33.159 33.6825 34.1360 173.400 100 stri_length(x) 2.653 3.281 4.0495 4.5380 19.966 100
names(x) unlist(x) x = list("a"=6, "b"=9, "c"=3) sum(unlist(x))
x = c(0.5, 0.8, 0.23, list(0.5, 0.2, 0.9), recursive=TRUE) class(x)
> complicated.list <- list("a"=1:4, "b"=1:3, "c"=matrix(1:4, nrow=2), "d"=search) > lapply(complicated.list, class) $a [1] "integer" $b [1] "integer" $c [1] "matrix" $d [1] "function"
> a <- 1:4 > class(a) [1] "integer" > b <- c("a","b","c","d") > d <- cbind(a, b) > d a b [1,] "1" "a" [2,] "2" "b" [3,] "3" "c" [4,] "4" "d" > class(d[,1]) [1] "character"
> d[,1] <- as.numeric(d[,1]) > class(d[,1]) [1] "character"
R> retList <- function() return(list(1,2,3,4)); class(retList()) [1] "list" R> notList <- function() return(c(1,2,3,4)); class(notList()) [1] "numeric" R>
R> retList <- function() return(list(1,2,3,4)); names(retList()) NULL R>
R> x <- list(1,2,3,4) R> x[1] [[1]] [1] 1 R> x[[1]] [1] 1
> x = list(1, 2, 3, 4) > x[1] [[1]] [1] 1 > x[[1]] [1] 1
> library(hash) > h <- hash( keys=c( > h[c( <hash> containing 2 key-value pairs. bar : 2 foo : 1
stuff <- c("You, me, and dupree", "You me, and dupree", "He ran away, but not very far, and not very fast") x <- strsplit(stuff, ",") xx <- unlist(strsplit(stuff, ","))
x = list(1, 2, 3, 4) x2 = list(1:4) all.equal(x,x2)
x = list(c(1,2,3,4)) x2 = list(1:4) all.equal(x,x2)
> n = numeric(10) > n [1] 0 0 0 0 0 0 0 0 0 0 > names(n) NULL > names(n) = LETTERS[1:10] > n A B C D E F G H I J 0 0 0 0 0 0 0 0 0 0
> i = integer(5) > v = c(n,i) > v A B C D E F G H I J 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 > class(v) [1] "numeric" > i = complex(5) > v = c(n,i) > class(v) [1] "complex" > v A B C D E F G H I J 0+0i 0+0i 0+0i 0+0i 0+0i 0+0i 0+0i 0+0i 0+0i 0+0i 0+0i 0+0i 0+0i 0+0i 0+0i
l <- list("aaa",5,list(1:3),LETTERS[1:4],matrix(1:9,3,3)) l[[c(5,4)]] l[[5]][4] l[[5]][1,2]
x[[2]] [1] 2 > x[[2:3]] Error in x[[2:3]] : subscript out of bounds
> head(bob) phenotype exclusion GSM399350 3- 4- 8- 25- 44+ 11b- 11c- 19- NK1.1- Gr1- TER119- GSM399351 3- 4- 8- 25- 44+ 11b- 11c- 19- NK1.1- Gr1- TER119- GSM399352 3- 4- 8- 25- 44+ 11b- 11c- 19- NK1.1- Gr1- TER119- GSM399353 3- 4- 8- 25+ 44+ 11b- 11c- 19- NK1.1- Gr1- TER119- GSM399354 3- 4- 8- 25+ 44+ 11b- 11c- 19- NK1.1- Gr1- TER119- GSM399355 3- 4- 8- 25+ 44+ 11b- 11c- 19- NK1.1- Gr1- TER119-
> as.character(head(bob)) [1] "c(3, 3, 3, 6, 6, 6)" "c(3, 3, 3, 3, 3, 3)" [3] "c(29, 29, 29, 30, 30, 30)"
bob <- data.frame(lapply(bob, as.character), stringsAsFactors=FALSE)
i <- sapply(bob, is.factor) bob[i] <- lapply(bob[i], as.character)
library(dplyr) bob %>% mutate_if(is.factor, as.character) -> bob
library(purrr) library(dplyr) bob %>% map_if(is.factor, as.character) %>% as_data_frame -> bob
> fact <- as.factor(c("a","b","a","d") > fact [1] a b a d Levels: a b d > as.numeric(fact) [1] 1 2 1 3
> fact_character <- levels(fact)[as.numeric(fact)] > fact_character [1] "a" "b" "a" "d"
> num_fact <- factor(c(1,2,3,6,5,4)) > num_fact [1] 1 2 3 6 5 4 Levels: 1 2 3 4 5 6 > num_num <- as.numeric(levels(num_fact)[as.numeric(num_fact)]) > num_num [1] 1 2 3 6 5 4
bobc <- rapply(bobf, as.character, classes="factor", how="replace")
f <- sapply(bobf, class) == "factor" bobc[,f] <- lapply(bobc[,f], factor)
unfactorize <- function(df){ for(i in which(sapply(df, class) == "factor")) df[[i]] = as.character(df[[i]]) return(df) }
bob2 <- as.data.frame(as.matrix(bob),stringsAsFactors=F)
newbob <- transform(bob, phenotype = as.character(phenotype))
newbob_char <- as.data.frame(lapply(bob[sapply(bob, is.factor)], as.character), stringsAsFactors = FALSE) newbob_rest <- bob[!(sapply(bob, is.factor))] newbob <- cbind(newbob_char, newbob_rest)
library(data.table) dt = data.table(col1 = c("a","b","c"), col2 = 1:3) sapply(dt, class)
library(data.table) dt = data.table(col1 = factor(c("a","b","c")), col2 = 1:3) sapply(dt, class) upd.cols = sapply(dt, is.factor) dt[, names(dt)[upd.cols] := lapply(.SD, as.character), .SDcols = upd.cols] sapply(dt, class)
df <- as.data.frame(lapply(df,function (y) if(class(y)=="factor" ) as.character(y) else y),stringsAsFactors=F)
anim <- c(25499,25500,25501,25502,25503,25504) sex <- c(1,2,2,1,2,1) wt <- c(0.8,1.2,1.0,2.0,1.8,1.4) data <- data.frame(anim,sex,wt) data anim sex wt anim2 1 25499 1 0.8 2 2 25500 2 1.2 2 3 25501 2 1.0 2 4 25502 1 2.0 2 5 25503 2 1.8 2 6 25504 1 1.4 2
data anim sex wt anim2 1 025499 1 0.8 2 2 025500 2 1.2 2 3 025501 2 1.0 2 4 025502 1 2.0 2 5 025503 2 1.8 2 6 025504 1 1.4 2
library(withr) with_options( c(scipen = 999), str_pad(x, 8, pad = "0") )
formatC(anim, width = 6, format = "d", flag = "0") formatC(x, width = 8, format = "d", flag = "0")
sprintf( "Animal ID %06d was a %s.", anim, sample(c("lion", "tiger"), length(anim), replace = TRUE) )
sprintf("%04d", 1) sprintf("%04d", 104) sprintf("%010d", 104)
pad_left <- function(x, len = 1 + max(nchar(x)), char = unlist(lapply(x, function(x) { paste0( paste(rep(char, len - nchar(x)), collapse = x ) })) } pad_left(1:100)
idnamer<-function(x,y){ id<-c(1:y) for (i in 1:length(id)){ if(nchar(id[i])<2){ id[i]<-paste("0",id[i],sep="") } } id<-paste(x,id,sep="") return(id) } idnamer("EF",28)
fileConn<-file("output.txt") writeLines(c("Hello","World"), fileConn) close(fileConn)
sink("outfile.txt") cat("hello") cat("\n") cat("world") sink()
> cat("Hello",file="outfile.txt",sep="\n") > cat("World",file="outfile.txt",append=TRUE)
txt <- "Hallo\nWorld" writeLines(txt, "outfile.txt")
txt <- c("Hallo", "World") writeLines(txt, "outfile.txt")
cat("hello","world",file="output.txt",sep="\n",append=TRUE)
> sink("tempsink", type="output") > writeLines("Hello\nWorld") > sink() > file.show("tempsink", delete.file=TRUE) Hello World
file <- file("test.txt") writeLines(yourObject, file) close(file)
snippet wfile file <- file(${1:filename}) writeLines(${2:yourObject}, file) close(file)
ptf <- function (txtToPrint,outFile){system(paste(paste(paste("echo
\begin{tabular}{l l} A & <%= fit$A %> \\ B & <%= fit$B %> \\ \end{tabular}
<<label=first, include=FALSE, echo=FALSE>>= library(xtable) library(plyr) cleanf <- function(x){ oldx <- c(FALSE, x[-1]==x[-length(x)]) res <- x res[oldx] <- NA return(res)}
data<-data.frame(animal=sample(c("elephant", "dog", "cat", "fish", "snake"), 100,replace=TRUE), colour=sample(c("red", "blue", "green", "yellow"), 100,replace=TRUE), size=rnorm(100,mean=500, sd=150), age=rlnorm(100, meanlog=3, sdlog=0.5)) datatable<-ddply(data, .(animal, colour), function(df) { return(data.frame(size=mean(df$size), age=mean(df$age))) })
cleandata<-datatable cleandata$animal<-cleanf(cleandata$animal) cleandata$colour<-cleanf(cleandata$colour) @
<<label=normal, results=tex, echo=FALSE>>= print( xtable( datatable ), tabular.environment= latex.environments=c("center"), floating=FALSE, include.rownames=FALSE ) @
<<label=cleandata, results=tex, echo=FALSE>>= print( xtable( cleandata ), tabular.environment= latex.environments=c("center"), floating=FALSE, include.rownames=FALSE ) @
\begin{table}[!h] \centering \caption{table using booktabs.} \label{tab:mytable} <<label=booktabs, echo=F,results=tex>>= mat <- xtable(cleandata,digits=rep(2,ncol(cleandata)+1)) foo<-0:(length(mat$animal)) bar<-foo[!is.na(mat$animal)] print(mat, sanitize.text.function = function(x){x}, floating=FALSE, include.rownames=FALSE, hline.after=NULL, add.to.row=list(pos=list(-1,bar,nrow(mat)), command=c("\\toprule ", "\\midrule ", "\\bottomrule "))) @
library(datasets) library(taRifx) library(xtable) test.by <- bytable(ChickWeight$weight, list( ChickWeight$Chick, ChickWeight$Diet) ) colnames(test.by) <- c( print(latex.table.by(test.by), include.rownames = FALSE, include.colnames = TRUE, sanitize.text.function = force)
moredata<-data.frame(Nominal=c(1:5), n=rep(5,5), MeanLinBias=signif(rnorm(5, mean=0, sd=10), digits=4), LinCI=paste("(",signif(rnorm(5,mean=-2, sd=5), digits=4), ", ", signif(rnorm(5, mean=2, sd=5), digits=4),")",sep=""), MeanQuadBias=signif(rnorm(5, mean=0, sd=10), digits=4), QuadCI=paste("(",signif(rnorm(5,mean=-2, sd=5), digits=4), ", ", signif(rnorm(5, mean=2, sd=5), digits=4),")",sep="")) names(moredata)<-c("Nominal", "n","Linear Model \nBias","Linear \nCI", "Quadratic Model \nBias", "Quadratic \nCI")
<<label=multilinetable, results=tex, echo=FALSE>>= foo<-xtable(moredata) align(foo) <- c( rep( print(foo, floating=FALSE, include.rownames=FALSE, sanitize.text.function = function(str) { str<-gsub("\n","\\\\", str, fixed=TRUE) return(str) }, sanitize.colnames.function = function(str) { str<-c("Nominal", "n","\\centering Linear Model\\\\ \\% Bias","\\centering Linear \\\\ 95\\%CI", "\\centering Quadratic Model\\\\ \\%Bias", "\\centering Quadratic \\\\ 95\\%CI \\tabularnewline") return(str) }) @
clear_fun <- function() cat(c("\033[2J","\033[0;0H")); makeActiveBinding("clear", clear_fun, baseenv())
Category Frequency First 10 First 15 First 5 Second 2 Third 14 Third 20 Second 3
aggregate(x$Frequency, by=list(Category=x$Category), FUN=sum) Category x 1 First 30 2 Second 5 3 Third 34
aggregate(cbind(x$Frequency, x$Metric2, x$Metric3) ...
tapply(x$Frequency, x$Category, FUN=sum) First Second Third 30 5 34
x <- data.frame(Category=factor(c("First", "First", "First", "Second", "Third", "Third", "Second")), Frequency=c(10,15,5,2,14,20,3))
library(dplyr) x %>% group_by(Category) %>% summarise(Frequency = sum(Frequency)) #
x %>% group_by(Category) %>% summarise_each(funs(sum))
mtcars %>% group_by(cyl, gear) %>% summarise(max_hp = max(hp), mean_mpg = mean(mpg))
library(data.table) data = data.table(Category=c("First","First","First","Second","Third", "Third", "Second"), Frequency=c(10,15,5,2,14,20,3)) data[, sum(Frequency), by = Category] system.time(data[, sum(Frequency), by = Category] )
data = data.frame(Category=c("First","First","First","Second","Third", "Third", "Second"), Frequency=c(10,15,5,2,14,20,3)) system.time(aggregate(data$Frequency, by=list(Category=data$Category), FUN=sum))
data = data.table(Category=rep(c("First", "Second", "Third"), 100000), Frequency=rnorm(100000)) system.time( data[,sum(Frequency),by=Category] ) data = data.frame(Category=rep(c("First", "Second", "Third"), 100000), Frequency=rnorm(100000)) system.time( aggregate(data$Frequency, by=list(Category=data$Category), FUN=sum) )
x2 <- by(x$Frequency, x$Category, sum) do.call(rbind,as.list(x2))
library(plyr) ddply(tbl, .(Category), summarise, sum = sum(Frequency))
require(reshape) recast(x, Category ~ ., fun.aggregate=sum)
require(doBy) summaryBy(Frequency~Category, data=yourdataframe, FUN=sum)
x <- data.frame(Category=factor(c("First", "First", "First", "Second", "Third", "Third", "Second")), Frequency=c(10,15,5,2,14,20,3)) sqldf("select Category ,sum(Frequency) as Frequency from x group by Category")
Category <- Rfast::as_integer(Category,result.sort=FALSE) result <- Rfast::group.sum(Frequency,Category) names(result) <- Rfast::Sort(unique(Category)
df <- data.frame(Category = c("First","First","First","Second","Third","Third","Second") , value = c(10,15,5,2,14,20,3)) install.packages("reshape") result<-cast(df, Category ~ . ,fun.aggregate=sum)
tally(x, Category) Category n First 30 Second 5 Third 34
DF <- data.frame(Categ1=factor(c( Categ2=factor(c( Samples=c(1,2,4,3,5,6,7), Freq=c(10,30,45,55,80,65,50)) > DF Categ1 Categ2 Samples Freq 1 A X 1 10 2 A Y 2 30 3 B X 4 45 4 B X 3 55 5 A X 5 80 6 B Y 6 65 7 A Y 7 50
DF2 <- DF[,c( DF2$GroupTotSamples <- ave(DF$Samples,DF2,FUN=sum) DF2$GroupAvgFreq <- ave(DF$Freq,DF2,FUN=mean) DF2 <- DF2[!duplicated(DF2),]
> DF2 Categ1 Categ2 GroupTotSamples GroupAvgFreq 1 A X 6 45 2 A Y 9 40 3 B X 7 50 6 B Y 6 65
fit <- lm(some ~ model) png(filename="your/file/location/name.png") plot(fit) dev.off()
X11 () plot (x,y) dev.copy(jpeg,filename="plot.jpg"); dev.off ();
pdf( plot( yourdata ) points (some_more_data) dev.off()
plotpath<- file.path(path, "PLOT_name",paste("plot_",file,".png",sep="")) png(filename=plotpath) plot(x,y, main= file) dev.off()
x = 1:10 basesave = function(expr, filename, print=T) { exten = stringr::str_match(filename, "\\.(\\w+)$")[, 2] switch(exten, png = { png(filename) eval(expr, envir = parent.frame()) dev.off() }, {stop("filetype not recognized")}) if (print) eval(expr, envir = parent.frame()) invisible(NULL) } plot(x) png("test.png") plot(x) dev.off() basesave(quote(plot(x)), "test.png") quote(plot(x)) %>% basesave("test.png")
dev.copy(png, plot(YData ~ XData, data = mydata) dev.off()
set R_Script="C:\Program Files\R-3.0.2\bin\RScript.exe" %R_Script% exmpl.R 2010-01-28 example 100 > exmpl.batch 2>&1
set R_TERM="C:\Program Files\R-3.0.2\bin\i386\Rterm.exe" %R_TERM% --no-restore --no-save --args 2010-01-28 example 100 < exmpl.R > exmpl.batch 2>&1
options(echo=TRUE) args <- commandArgs(trailingOnly = TRUE) print(args) start_date <- as.Date(args[1]) name <- args[2] n <- as.integer(args[3]) rm(args) x <- rnorm(n) png(paste(name,".png",sep="")) plot(start_date+(1L:n), x) dev.off() summary(x)
spec <- matrix(c( ),ncol=5,byrow=T) opt = getopt(spec); if (!is.null(opt$help) || is.null(opt$in)) { cat(paste(getopt(spec, usage=T),"\n")); q(); }
library(optparse) option_list <- list( make_option(c("-n", "--count_lines"), action="store_true", default=FALSE, help="Count the line numbers [default]"), make_option(c("-f", "--factor"), type="integer", default=3, help="Multiply output by this number [default %default]") ) parser <- OptionParser(usage="%prog [options] file", option_list=option_list) args <- parse_args(parser, positional_arguments = 1) opt <- args$options file <- args$args if(opt$count_lines) { print(paste(length(readLines(file)) * opt$factor)) }
Usage: script.R [options] file Options: -n, --count_lines Count the line numbers [default] -f FACTOR, --factor=FACTOR Multiply output by this number [default 3] -h, --help Show this help message and exit
$ z=10 $ echo $z 10 $ Rscript -e "args<-commandArgs(TRUE);x=args[1]:args[2];x;mean(x);sd(x)" 1 $z [1] 1 2 3 4 5 6 7 8 9 10 [1] 5.5 [1] 3.027650 $
if ("--debug" %in% args) debug.mode <- T if ("-h" %in% args || "--help" %in% args)
args <- commandArgs(TRUE) flag.details <- list( "debug" = list( def = "Print variables rather than executing function XYZ...", flag = "--debug", output = "debug.mode <- T"), "help" = list( def = "Display flag definitions", flag = c("-h","--help"), output = "cat(help.prompt)") ) flag.conditions <- lapply(flag.details, function(x) { paste0(paste0( }) flag.truth.table <- unlist(lapply(flag.conditions, function(x) { if (eval(parse(text = x))) { return(T) } else return(F) })) help.prompts <- lapply(names(flag.truth.table), function(x){ paste0(c(paste0(flag.details[x][[1]][[ flag.details[x][[1]][[ } ) help.prompt <- paste(c(unlist(help.prompts), flag.output <- unlist(lapply(names(flag.truth.table), function(x){ if (flag.truth.table[x]) return(flag.details[x][[1]][[ })) eval(parse(text = flag.output))
x <- rnorm(100) eps <- rnorm(100,0,.2) qplot(x,3*x+eps) qplot(x,2*x+eps)
qplot(displ, hwy, data=mpg, facets = . ~ year) + geom_smooth()
require(gridExtra) plot1 <- qplot(1) plot2 <- qplot(1) grid.arrange(plot1, plot2, ncol=2)
pdf("foo.pdf") grid.arrange(plot1, plot2) dev.off()
mydata <- data.frame(myGroup = c( qplot(data = mydata, x = myX, facets = ~myGroup) ggplot(data = mydata) + geom_bar(aes(myX)) + facet_wrap(~myGroup)
library(cowplot) iris1 <- ggplot(iris, aes(x = Species, y = Sepal.Length)) + geom_boxplot() + theme_bw() iris2 <- ggplot(iris, aes(x = Sepal.Length, fill = Species)) + geom_density(alpha = 0.7) + theme_bw() + theme(legend.position = c(0.8, 0.8)) plot_grid(iris1, iris2, labels = "AUTO")
p <- plot_grid(iris1, iris2, labels = "AUTO") ggsave("plot.pdf", p)
p <- plot_grid(iris1, iris2, labels = "AUTO") save_plot("plot.pdf", p, ncol = 2)
iris1 <- ggplot(iris, aes(x = Species, y = Sepal.Length)) + geom_boxplot() iris2 <- ggplot(iris, aes(x = Sepal.Length, fill = Species)) + geom_density(alpha = 0.7) + theme(legend.position = c(0.8, 0.8)) cowplot::plot_grid(iris1, iris2, labels = "AUTO")
multiplot <- function(..., plotlist=NULL, cols) { require(grid) plots <- c(list(...), plotlist) numPlots = length(plots) plotCols = cols plotRows = ceiling(numPlots/plotCols) grid.newpage() pushViewport(viewport(layout = grid.layout(plotRows, plotCols))) vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y) for (i in 1:numPlots) { curRow = ceiling(i/plotCols) curCol = (i-1) %% plotCols + 1 print(plots[[i]], vp = vplayout(curRow, curCol )) } }
X <- data.frame(x=rep(x,2), y=c(3*x+eps, 2*x+eps), case=rep(c("first","second"), each=100)) qplot(x, y, data=X, facets = . ~ case) + geom_smooth()
devtools::install_github("thomasp85/patchwork") library(ggplot2) p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp)) p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear)) library(patchwork) p1 + p2
library(ggplot2) wide <- data.frame(x = rnorm(100), eps = rnorm(100, 0, .2)) wide$first <- with(wide, 3 * x + eps) wide$second <- with(wide, 2 * x + eps) long <- melt(wide, id.vars = c("x", "eps")) ggplot(long, aes(x = x, y = value)) + geom_smooth() + geom_point() + facet_grid(.~ variable)
vp.layout <- function(x, y) viewport(layout.pos.row=x, layout.pos.col=y) arrange <- function(..., nrow=NULL, ncol=NULL, as.table=FALSE) { dots <- list(...) n <- length(dots) if(is.null(nrow) & is.null(ncol)) { nrow = floor(n/2) ; ncol = ceiling(n/nrow)} if(is.null(nrow)) { nrow = ceiling(n/ncol)} if(is.null(ncol)) { ncol = ceiling(n/nrow)} grid.newpage() pushViewport(viewport(layout=grid.layout(nrow,ncol) ) ) ii.p <- 1 for(ii.row in seq(1, nrow)){ ii.table.row <- ii.row if(as.table) {ii.table.row <- nrow - ii.table.row + 1} for(ii.col in seq(1, ncol)){ ii.table <- ii.p if(ii.p > n) break print(dots[[ii.table]], vp=vp.layout(ii.table.row, ii.col)) ii.p <- ii.p + 1 } } }
library(ggplot2) x <- rnorm(100) eps <- rnorm(100,0,.2) p1 <- qplot(x,3*x+eps) p2 <- qplot(x,2*x+eps) library(gridExtra) grid.arrange(p1, p2, ncol = 2)
library(ggplot2) theme_set(theme_bw()) q1 <- ggplot(mtcars) + geom_point(aes(mpg, disp)) q2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear)) q3 <- ggplot(mtcars) + geom_smooth(aes(disp, qsec)) q4 <- ggplot(mtcars) + geom_bar(aes(carb)) library(magrittr) library(multipanelfigure) figure1 <- multi_panel_figure(columns = 2, rows = 2, panel_label_type = "none") figure1
figure1 %<>% fill_panel(q1, column = 1, row = 1) %<>% fill_panel(q2, column = 2, row = 1) %<>% fill_panel(q3, column = 1, row = 2) %<>% fill_panel(q4, column = 2, row = 2) figure1
figure2 <- multi_panel_figure(columns = 3, rows = 3, panel_label_type = "upper-roman") figure2
figure2 %<>% fill_panel(q1, column = 1:2, row = 1) %<>% fill_panel(q2, column = 3, row = 1) %<>% fill_panel(q3, column = 1, row = 2) %<>% fill_panel(q4, column = 2:3, row = 2:3) figure2
x <- rnorm(100) eps <- rnorm(100,0,.2) df <- data.frame(x, eps) %>% mutate(p1 = 3*x+eps, p2 = 2*x+eps) %>% tidyr::gather("plot", "value", 3:4) %>% ggplot(aes(x = x , y = value))+ geom_point()+geom_smooth()+facet_wrap(~plot, ncol =2) df
plotAllCounts <- function (dt){ plots <- list(); for(i in 1:ncol(dt)) { strX = names(dt)[i] print(sprintf("%i: strX = %s", i, strX)) plots[[i]] <- ggplot(dt) + xlab(strX) + geom_point(aes_string(strX),stat="count") } columnsToPlot <- floor(sqrt(ncol(dt))) multiplot(plotlist = plots, cols = columnsToPlot) }
x <- rnorm(100) eps <- rnorm(100,0,.2) A = qplot(x,3*x+eps, geom = c("point", "smooth"))+theme_gray() B = qplot(x,2*x+eps, geom = c("point", "smooth"))+theme_gray() cowplot::plot_grid(A, B, labels = c("A", "B"), align = "v")
list.of.packages <- c("ggplot2", "Rcpp") new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])] if(length(new.packages)) install.packages(new.packages)
if (!require("pacman")) install.packages("pacman") pacman::p_load(package1, package2, package_n)
if(!require(somepackage)){ install.packages("somepackage") library(somepackage) }
dynamic_require <- function(package){ if(eval(parse(text=paste("require(",package,")")))) return True install.packages(package) return eval(parse(text=paste("require(",package,")"))) }
foo <- function(x){ for( i in x ){ if( ! require( i , character.only = TRUE ) ){ install.packages( i , dependencies = TRUE ) require( i , character.only = TRUE ) } } } foo( c("ggplot2" , "reshape2" , "data.table" ) )
InstalledPackage <- function(package) { available <- suppressMessages(suppressWarnings(sapply(package, require, quietly = TRUE, character.only = TRUE, warn.conflicts = FALSE))) missing <- package[!available] if (length(missing) > 0) return(FALSE) return(TRUE) } CRANChoosen <- function() { return(getOption("repos")["CRAN"] != "@CRAN@") } UsePackage <- function(package, defaultCRANmirror = "http: { if(!InstalledPackage(package)) { if(!CRANChoosen()) { chooseCRANmirror() if(!CRANChoosen()) { options(repos = c(CRAN = defaultCRANmirror)) } } suppressMessages(suppressWarnings(install.packages(package))) if(!InstalledPackage(package)) return(FALSE) } return(TRUE) }
libraries <- c("ReadImages", "ggplot2") for(library in libraries) { if(!UsePackage(library)) { stop("Error!", library) } }
using<-function(...) { libs<-unlist(list(...)) req<-unlist(lapply(libs,require,character.only=TRUE)) need<-libs[req==FALSE] if(length(need)>0){ install.packages(need) lapply(need,require,character.only=TRUE) } }
using<-function(...) { libs<-unlist(list(...)) req<-unlist(lapply(libs,require,character.only=TRUE)) need<-libs[req==FALSE] n<-length(need) if(n>0){ libsmsg<-if(n>2) paste(paste(need[1:(n-1)],collapse=", "),",",sep="") else need[1] print(libsmsg) if(n>1){ libsmsg<-paste(libsmsg," and ", need[n],sep="") } libsmsg<-paste("The following packages could not be found: ",libsmsg,"\n\r\n\rInstall missing packages?",collapse="") if(winDialog(type = c("yesno"), libsmsg)=="YES"){ install.packages(need) lapply(need,require,character.only=TRUE) } } }
.packages = c("ggplot2", "plyr", "rms") .inst <- .packages %in% installed.packages() if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst]) lapply(.packages, require, character.only=TRUE)
AP <- available.packages(contrib.url(repos[i,"url"]))
usePackage<-function(p){ if (!is.element(p, installed.packages()[,1])){ print(paste( install.packages(p, dep = TRUE)} print(paste( require(p, character.only = TRUE) }
install.packages.auto <- function(x) { x <- as.character(substitute(x)) if(isTRUE(x %in% .packages(all.available=TRUE))) { eval(parse(text = sprintf("require(\"%s\")", x))) } else { eval(parse(text = sprintf("install.packages(\"%s\", dependencies = TRUE)", x))) } if(isTRUE(x %in% .packages(all.available=TRUE))) { eval(parse(text = sprintf("require(\"%s\")", x))) } else { source("http: eval(parse(text = sprintf("biocLite(\"%s\")", x))) eval(parse(text = sprintf("require(\"%s\")", x))) } }
install.packages.auto(qvalue) install.packages.auto(rNMF)
unavailable <- setdiff(c("ggplot2", "Rcpp"), rownames(installed.packages())) install.packages(unavailable)
install.packages(setdiff(c("ggplot2", "Rcpp"), rownames(installed.packages())))
Install_And_Load <- function(Required_Packages) { Remaining_Packages <- Required_Packages[!(Required_Packages %in% installed.packages()[,"Package"])]; if(length(Remaining_Packages)) { install.packages(Remaining_Packages); } for(package_name in Required_Packages) { library(package_name,character.only=TRUE,quietly=TRUE); } } Required_Packages=c("ggplot2", "Rcpp"); Install_And_Load(Required_Packages);
require <- function(x) { if (!base::require(x, character.only = TRUE)) { install.packages(x, dep = TRUE) ; base::require(x, character.only = TRUE) } }
pkgs = c("pacman","data.table") if(length(new.pkgs <- setdiff(pkgs, rownames(installed.packages())))) install.packages(new.pkgs)
testin <- function(package){if (!package %in% installed.packages()) install.packages(package)} testin("packagename")
lbs <- c("plyr", "psych", "tm") req <- substitute(require(x, character.only = TRUE)) sapply(lbs, function(x) eval(req) || {install.packages(x); eval(req)}) plyr psych tm TRUE TRUE TRUE
p<-c( install_package<-function(pack) {if(!(pack %in% row.names(installed.packages()))) { update.packages(ask=F) install.packages(pack,dependencies=T) } require(pack,character.only=TRUE) } for(pack in p) {install_package(pack)} completeFun <- function(data, desiredCols) { completeVec <- complete.cases(data[, desiredCols]) return(data[completeVec, ]) }
packages <- c("dplyr", "gridBase", "gridExtra") package_loader <- function(x){ for (i in 1:length(x)){ if (!identical((x[i], installed.packages()[x[i],1])){ install.packages(x[i], dep = TRUE) } else { require(x[i], character.only = TRUE) } } } package_loader(packages)
48 lapply_install_and_load <- function (package1, ...) 49 { 50 # 51 52 # 53 packages <- c(package1, ...) 54 # 55 56 # 57 loaded <- packages %in% (.packages()) 58 names(loaded) <- packages 59 # 60 installed <- packages %in% rownames(installed.packages()) 61 names(installed) <- packages 62 # 63 64 # 65 load_it <- function (p, loaded, installed) 66 { 67 if (loaded[p]) 68 { 69 print(paste(p, "loaded")) 70 } 71 else 72 { 73 print(paste(p, "not loaded")) 74 if (installed[p]) 75 { 76 print(paste(p, "installed")) 77 do.call("library", list(p)) 78 } 79 else 80 { 81 print(paste(p, "not installed")) 82 install.packages(p) 83 do.call("library", list(p)) 84 } 85 } 86 } 87 # 88 lapply(packages, load_it, loaded, installed) 89 }
library <- function(x){ x = toString(substitute(x)) if(!require(x,character.only=TRUE)){ install.packages(x) base::library(x,character.only=TRUE) }}
source("https: if (!require("ggsci")) biocLite("ggsci")
for (p in c("VGAM", "feather")) if (!require(p, character.only=TRUE)) install.packages(p, repos="http:
if (!require(MyDesiredLibrary)) { install.packages("MyDesiredLibrary") }
> df = data.frame(matrix(rnorm(20), nrow=10)) > df X1 X2 1 0.7091409 -1.4061361 2 -1.1334614 -0.1973846 3 2.3343391 -0.4385071 4 -0.9040278 -0.6593677 5 0.4180331 -1.2592415 6 0.7572246 -0.5463655 7 -0.8996483 0.4231117 8 -1.0356774 -0.1640883 9 -0.3983045 0.7157506 10 -0.9060305 2.3234110
> df[sample(nrow(df), 3), ] X1 X2 9 -0.3983045 0.7157506 2 -1.1334614 -0.1973846 10 -0.9060305 2.3234110
randomRows = function(df,n){ return(df[sample(nrow(df),n),]) }
library(data.table) set.seed(10) mtcars <- data.table(mtcars) mtcars[sample(.N, 6)] mpg cyl disp hp drat wt qsec vs am gear carb 1: 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 2: 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 3: 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 4: 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 5: 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 6: 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2
library(devtools); install_github( library(kimisc) example(sample.data.frame) smpl..> set.seed(42) smpl..> sample(data.frame(a=c(1,2,3), b=c(4,5,6), row.names=c( a b c 3 6 c.1 3 6 a 1 4 c.2 3 6 b 2 5 b.1 2 5 c.3 3 6 a.1 1 4 b.2 2 5 c.4 3 6
install.packages( library(kimisc) example(sample.rows) smpl..> set.seed(42) smpl..> sample.rows(data.frame(a=c(1,2,3), b=c(4,5,6), row.names=c( a b c 3 6 c.1 3 6 a 1 4 c.2 3 6 b 2 5 b.1 2 5 c.3 3 6 a.1 1 4 b.2 2 5 c.4 3 6
library("tibble") a <- your_tibble[sample(1:nrow(your_tibble), 150),]
sample_of_diamonds <- diamonds[sample(nrow(diamonds),100),]
options("width"=160) options("digits.secs"=3) r <- getOption("repos") r["CRAN"] <- "http: options(repos = r) rm(r) setHook(packageEvent("grDevices", "onLoad"), function(...) grDevices::X11.options(width=8, height=8, xpos=0, pointsize=10, type="xlib")) options(prompt="R> ", digits=4, show.signif.stars=FALSE) options("pdfviewer"="okular")
s <- base::summary h <- utils::head n <- base::names
> x <- factor(c("a","b","c")) > x [1] a b c Levels: a b c > x <- c(x, "d") > x [1] "1" "2" "3" "d"
> x <- factor(c("a","b","c")) > x[1:2] <- c("c", "d") Warning message: In `[<-.factor`(`*tmp*`, 1:2, value = c("c", "d")) : invalid factor level, NAs generated
.First <- function() { library(graphics) options("repos" = c(CRAN = "http: options("device" = "quartz") } packages <- list( "describedisplay" = "~/ggobi/describedisplay", "linval" = "~/ggobi/linval", "ggplot2" = "~/documents/ggplot/ggplot", "qtpaint" = "~/documents/cranvas/qtpaint", "tourr" = "~/documents/tour/tourr", "tourrgui" = "~/documents/tour/tourr-gui", "prodplot" = "~/documents/categorical-grammar" ) l <- function(pkg) { pkg <- tolower(deparse(substitute(pkg))) if (is.null(packages[[pkg]])) { path <- file.path("~/documents", pkg, pkg) } else { path <- packages[pkg] } source(file.path(path, "load.r")) } test <- function(path) { path <- deparse(substitute(path)) source(file.path("~/documents", path, path, "test.r")) }
.Last <- function() { if (!any(commandArgs()== require(utils) try(savehistory(Sys.getenv("R_HISTFILE"))) } }
.repath <- function() { cat( x <- scan(what = "") xa <- gsub( writeClipboard(paste(xa, collapse=" ")) cat( }
getw <- function() { suppressWarnings(shell(paste("explorer", gsub( }
tryCatch( {options( width = as.integer(Sys.getenv("COLUMNS")))}, error = function(err) { write("Can .bashrc. Or something. Setting width to 120 chars", stderr()); options(width=120)} )
source("c:\\data\\rprojects\\functions\\Rfunctions.r") .First <- function(){ cat("\n Rrrr! The statistics program for Pirates !\n\n") } .Last <- function(){ cat("\n Rrrr! Avast Ye, YO HO!\n\n") } library(utils) necessary = c( if(!all(necessary %in% installed.packages()[, install.packages(c( options(IDE = options(use.DDE = T) library(svIDE) library(svIO) library(svSocket) library(R2HTML) guiDDEInstall() shell(paste("mkdir C:\\data\\rplots\\plottemp", gsub( pldir <- paste("C:\\data\\rplots\\plottemp", gsub( plot.str <-c(
f = pipe("uname") if (.Platform$GUI == "X11" && readLines(f)=="Darwin") { library("grDevices") library("CarbonEL") options(device= Sys.unsetenv("DISPLAY") } close(f); rm(f)
library(plyr) library(stringr) library(RColorBrewer) if (file.exists("~/util.r")) { source("~/util.r") }
if ( (numcol <-Sys.getenv("COLUMNS")) != "") { numcol = as.integer(numcol) options(width= numcol - 1) } else if (system("stty -a &>/dev/null") == 0) { numcol = as.integer(sub(".* ([0-9]+) column.*", "\\1", system("stty -a", intern=T)[1])) if (numcol > 0) options(width= numcol - 1 ) } rm(numcol)
.First <- function () { options(device="quartz") } .Last <- function () { if (!any(commandArgs() == require(utils) try(savehistory(Sys.getenv("R_HISTFILE"))) } } my.as.Date <- function (a, b=NULL, c=NULL, ...) { if (class(a) != "character") return (as.Date(sprintf("%d-%02d-%02d", a, b, c))) else return (as.Date(a)) } cd <- setwd pwd <- getwd lss <- dir asd <- my.as.Date last <- function (x, n=1, ...) tail(x, n=n, ...) Sys.setenv(http_proxy="http: search.path <- function(fn, paths = strsplit(chartr("\\", "/", Sys.getenv("RPATH")), split = switch(.Platform$OS.type, windows = ";", ":"))[[1]]) { for(d in paths) if (file.exists(f <- file.path(d, fn))) return(f) return(NULL) } if (Sys.getenv("RPATH") == "") { Sys.setenv(RPATH=file.path(path.expand("~"), "Library", "R", "source")) } if (interactive()) source(search.path("afazio.r")) if (Sys.getenv("R_HISTFILE") == "") { Sys.setenv(R_HISTFILE=file.path("~", ".Rhistory")) } q <- function (save="no", ...) { quit(save=save, ...) } # # .curr.env = NULL .last.env.file = file.path(path.expand("~"), ".Rlastenv") .parent.env.dir = file.path(path.expand("~"), "Analysis") if (!file.exists(.parent.env.dir)) dir.create(.parent.env.dir) load.env <- function (string, save=TRUE) { cd(file.path(.parent.env.dir, string)) for (file in lss()) { if (substr(file, nchar(file)-1, nchar(file)+1) %in% c(".r", ".R")) source(file) } .curr.env <<- string if (save == TRUE) writeLines(.curr.env, .last.env.file) print (paste(" -- in ", string, " environment -- ")) } reload <- resource <- function () { if (!is.null(.curr.env)) load.env(.curr.env, save=FALSE) else print (" -- not in environment -- ") } if (interactive() && file.exists(.last.env.file)) { load.env(readLines(.last.env.file)) }
sink(file = options(scipen=5) .ls.objects <- function (pos = 1, pattern, order.by = "Size", decreasing=TRUE, head = TRUE, n = 10) { napply <- function(names, fn) sapply(names, function(x) fn(get(x, pos = pos))) names <- ls(pos = pos, pattern = pattern) obj.class <- napply(names, function(x) as.character(class(x))[1]) obj.mode <- napply(names, mode) obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class) obj.size <- napply(names, object.size) / 10^6 obj.dim <- t(napply(names, function(x) as.numeric(dim(x))[1:2])) vec <- is.na(obj.dim)[, 1] & (obj.type != "function") obj.dim[vec, 1] <- napply(names, length)[vec] out <- data.frame(obj.type, obj.size, obj.dim) names(out) <- c("Type", "Size", "Rows", "Columns") out <- out[order(out[[order.by]], decreasing=decreasing), ] if (head) out <- head(out, n) out }
print.data.frame <- function(df) { if (nrow(df) > 10) { base::print.data.frame(head(df, 5)) cat("----\n") base::print.data.frame(tail(df, 5)) } else { base::print.data.frame(df) } }
bugon <- function() options("debug" = TRUE) bugoff <- function() options("debug" = FALSE)
Sys.setenv("PATH" = paste(Sys.getenv("PATH"),"/usr/texbin",sep=":")) last <- function(x) { tail(x, n = 1) } options( tikzMetricsDictionary=
setwd("C: library("ggplot2") library("RMySQL") library("foreign") answer <- readline("What database would you like to connect to? ") con <- dbConnect(MySQL(),user="root",password="mypass", dbname=answer)
ht <- function(d) rbind(head(d,10),tail(d,10)) hh <- function(d) d[1:5,1:5]
library(cacheSweave) assignInNamespace("RweaveLatex", cacheSweave::cacheSweaveDriver, "utils")
if(interactive()) { options(stringsAsFactors=FALSE) options(max.print=50) options(repos="http: } .db <- "~/Dropbox" options(BingMapsKey="blahblahblah") .First <- function() { if(interactive()) { require(functional) require(taRifx) require(taRifx.geo) require(ggplot2) require(foreign) require(R.utils) require(stringr) require(reshape2) require(devtools) require(codetools) require(testthat) require(utils) options(error=recover) } }
amscols<-function(x){ colnames(x) <- paste("$", colnames(x), "$", sep = "") x }
.set.width <- function() { cols <- as.integer(Sys.getenv("COLUMNS")) if (is.na(cols) || cols > 10000 || cols < 10) options(width=100) options(width=cols) } .First <- function() { options(digits.secs=3) options(max.print=1000) options("report" = c(CRAN="http: options(prompt="R> ", digits=4, show.signif.stars=FALSE) } w <- .set.width .Last <- function() { if (!any(commandArgs()== timestamp(,prefix=paste(" try(savehistory("~/.Rhistory")) } }
utils::setWindowTitle(base::getwd()) utils::assignInNamespace("setwd",function(dir) {.Internal(setwd(dir));setWindowTitle(base::getwd())},"base") options(max.print=2000)
devlib <- function(pkg) { setwd(file.path(Sys.getenv("R_USER_WORKSPACE", "."), deparse(substitute(pkg)), "dev")) sapply(list.files("R", pattern=".r$", ignore.case=TRUE, full.names=TRUE), source) invisible(NULL) } .First <- function() { setwd(Sys.getenv("R_USER_WORKSPACE", ".")) options("repos" = c(CRAN = "http: } .Last <- function() update.packages(ask="graphics")
trSamp <- data.frame(sample(trainer$index, 10000)) head(trSamp ) ncol(trSamp) class(trSamp) class(trSamp[1]) class(trSamp[,1]) colnames(trSamp)[2] <- "newname2"
library(data.table) setnames(DF, "oldName", "newName") setnames(DF, "newName") nms <- c("col1.name", "col2.name", etc...) setnames(DF, nms)
library(plyr) df <- data.frame(foo=rnorm(1000)) df <- rename(df,c(
letterid id.x id.y 1 70 2 1 2 116 6 5 3 116 6 4 4 116 6 3 5 766 14 9 6 766 14 13
letters <- rename(letters,c("id.x" = "source", "id.y" = "target")) letterid source target 1 70 2 1 2 116 6 5 3 116 6 4 4 116 6 3 5 766 14 9 6 766 14 13
require(dplyr) df = rename(df, new_col01 = old_col01, new_col02 = old_col02, ...)
library(dplyr) cars %>% rename_at("speed",~"new") %>% head cars %>% rename_at(vars(speed),~"new") %>% head cars %>% rename_at(1,~"new") %>% head
library(gdata) df <- rename.vars(df, from = "oldname", to = "newname")
df <- rename.vars(df, from = c("old1", "old2", "old3", to = c("new1", "new2", "new3"))
Table1$FieldNewName <- Table1$FieldOldName Table1$FieldOldName <- NULL
listOfDataFrames <- vector(mode = "list", length = 100) for (i in 1:100) { listOfDataFrames[[i]] <- data.frame(a=sample(letters, 500, rep=T), b=rnorm(500), c=rnorm(500)) }
bind_rows(list_of_dataframes, .id = "column_label")
> system.time({ df <- do.call("rbind", listOfDataFrames) }) user system elapsed 0.25 0.00 0.25 > system.time({ df2 <- ldply(listOfDataFrames, data.frame) }) user system elapsed 0.30 0.00 0.29 > identical(df, df2) [1] TRUE
> system.time({ df3 <- rbind.fill(listOfDataFrames) }) user system elapsed 0.24 0.00 0.23 > identical(df, df3) [1] TRUE
library(rbenchmark) benchmark( do.call = do.call("rbind", listOfDataFrames), plyr_rbind.fill = plyr::rbind.fill(listOfDataFrames), plyr_ldply = plyr::ldply(listOfDataFrames, data.frame), data.table_rbindlist = as.data.frame(data.table::rbindlist(listOfDataFrames)), replications = 100, order = "relative", columns=c( )
test replications elapsed relative 4 data.table_rbindlist 100 0.11 1.000 1 do.call 100 9.39 85.364 2 plyr_rbind.fill 100 12.08 109.818 3 plyr_ldply 100 15.14 137.636
library(microbenchmark) dflist <- vector(length=10,mode="list") for(i in 1:100) { dflist[[i]] <- data.frame(a=runif(n=260),b=runif(n=260), c=rep(LETTERS,10),d=rep(LETTERS,10)) } mb <- microbenchmark( plyr::rbind.fill(dflist), dplyr::bind_rows(dflist), data.table::rbindlist(dflist), plyr::ldply(dflist,data.frame), do.call("rbind",dflist), times=1000) ggplot2::autoplot(mb)
R version 3.3.0 (2016-05-03) Platform: x86_64-w64-mingw32/x64 (64-bit) Running under: Windows 7 x64 (build 7601) Service Pack 1 > packageVersion("plyr") [1] ‘1.8.4’ > packageVersion("dplyr") [1] ‘0.5.0’ > packageVersion("data.table") [1] ‘1.9.6’
set.seed(21) library(microbenchmark) dflist <- vector(length=10,mode="list") for(i in 1:100) { dflist[[i]] <- data.frame(a=runif(n=260),b=runif(n=260), c=rep(LETTERS,10),d=rep(LETTERS,10)) } mb <- microbenchmark( plyr::rbind.fill(dflist), dplyr::bind_rows(dflist), data.table::rbindlist(dflist), plyr::ldply(dflist,data.frame), do.call("rbind",dflist), times=1000) ggplot2::autoplot(mb)+theme_bw() R version 3.4.0 (2017-04-21) Platform: x86_64-w64-mingw32/x64 (64-bit) Running under: Windows 7 x64 (build 7601) Service Pack 1 > packageVersion("plyr") [1] ‘1.8.4’ > packageVersion("dplyr") [1] ‘0.7.2’ > packageVersion("data.table") [1] ‘1.10.4’
> system.time({ df.Base <- do.call("rbind", listOfDataFrames) }) user system elapsed 0.08 0.00 0.07 > > system.time({ df.dplyr <- as.data.frame(bind_rows(listOfDataFrames)) }) user system elapsed 0.01 0.00 0.02 > > identical(df.Base, df.dplyr) [1] TRUE
library(tidyverse) df <- listOfDataFrames %>% reduce(bind_rows)
df.dplyr.purrr <- listOfDataFrames %>% map_df(bind_rows)
df_id <- data.table::rbindlist(listOfDataFrames, idcol = TRUE)
.id a b c 1 u -0.05315128 -1.31975849 1 b -1.00404849 1.15257952 1 y 1.17478229 -0.91043925 1 q -1.65488899 0.05846295 1 c -1.43730524 0.95245909 1 b 0.56434313 0.93813197
library(microbenchmark) library(data.table) library(tidyverse) dflist <- vector(length=10,mode="list") for(i in 1:100) { dflist[[i]] <- data.frame(a=runif(n=260),b=runif(n=260), c=rep(LETTERS,10),d=rep(LETTERS,10)) } mb <- microbenchmark( dplyr::bind_rows(dflist), data.table::rbindlist(dflist), purrr::map_df(dflist, bind_rows), do.call("rbind",dflist), times=500) ggplot2::autoplot(mb)
sessionInfo() R version 3.4.1 (2017-06-30) Platform: x86_64-w64-mingw32/x64 (64-bit) Running under: Windows 7 x64 (build 7601) Service Pack 1
> packageVersion("tidyverse") [1] ‘1.1.1’ > packageVersion("data.table") [1] ‘1.10.0’
test_data <- data.frame( var0 = 100 + c(0, cumsum(runif(49, -20, 20))), var1 = 150 + c(0, cumsum(runif(49, -10, 10))), date = seq(as.Date("2002-01-01"), by="1 month", length.out=100) )
ggplot(test_data, aes(date)) + geom_line(aes(y = var0, colour = "var0")) + geom_line(aes(y = var1, colour = "var1"))
library("reshape2") library("ggplot2") test_data_long <- melt(test_data, id="date") ggplot(data=test_data_long, aes(x=date, y=value, colour=variable)) + geom_line()
library(ggplot2) library(tidyr) test_data <- data.frame( var0 = 100 + c(0, cumsum(runif(49, -20, 20))), var1 = 150 + c(0, cumsum(runif(49, -10, 10))), date = seq(as.Date("2002-01-01"), by="1 month", length.out=100) ) test_data %>% gather(key,value, var0, var1) %>% ggplot(aes(x=date, y=value, colour=key)) + geom_line()
date key value 2002-01-01 var0 100.00000 2002-02-01 var0 115.16388 ... 2007-11-01 var1 114.86302 2007-12-01 var1 119.30996
test_data <- data.frame( var0 = 100 + c(0, cumsum(runif(49, -20, 20))), var1 = 150 + c(0, cumsum(runif(49, -10, 10))), Dates = seq.Date(as.Date("2002-01-01"), by="1 month", length.out=100))
stacked <- with(test_data, data.frame(value = c(var0, var1), variable = factor(rep(c("Var0","Var1"), each = NROW(test_data))), Dates = rep(Dates, 2)))
require(ggplot2) p <- ggplot(stacked, aes(Dates, value, colour = variable)) p + geom_line()
var.out <- names(data)[!names(data) %in% c("iden", "name", "x_serv", "m_serv")]
for(i in 1:length(var.out)) { paste("data$", var.out[i], sep="") <- NULL }
R> df <- data.frame(x=1:5, y=2:6, z=3:7, u=4:8) R> df x y z u 1 1 2 3 4 2 2 3 4 5 3 3 4 5 6 4 4 5 6 7 5 5 6 7 8
R> df[ , -which(names(df) %in% c("z","u"))] x y 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6
R> subset(df, select=-c(z,u)) x y 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6
R> df[ , c("x","y")] x y 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 R> subset(df, select=c(x,y)) x y 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6
dat <- data.frame(x=1:5, y=2:6, z=3:7, u=4:8) dat[ , -which(names(dat) %in% c("z","u"))] dat[ , -which(names(dat) %in% c("foo","bar"))]
dat[ , !names(dat) %in% c("z","u")] dat[ , !names(dat) %in% c("foo","bar")]
var.out.bool <- !names(data) %in% c("iden", "name", "x_serv", "m_serv")
data <- data[,var.out.bool] data <- data[,var.out.bool, drop = FALSE]
data[c("iden", "name", "x_serv", "m_serv")] <- list(NULL)
subset( data, select = -c("iden", "name", "x_serv", "m_serv") ) subset( data, select = -c(iden, name, x_serv, m_serv) )
re_assign(dtest, drop_vec) 46.719 52.5655 54.6460 59.0400 1347.331 null_assign(dtest, drop_vec) 74.593 83.0585 86.2025 94.0035 1476.150 subset(dtest, select = !names(dtest) %in% drop_vec) 106.280 115.4810 120.3435 131.4665 65133.780 subset(dtest, select = names(dtest)[!names(dtest) %in% drop_vec]) 108.611 119.4830 124.0865 135.4270 1599.577 subset(dtest, select = -c(x, y)) 102.026 111.2680 115.7035 126.2320 1484.174
dtest <- data.frame(x=1:5, y=2:6, z = 3:7) drop_vec <- c("x", "y") null_assign <- function(df, names) { df[names] <- list(NULL) df } re_assign <- function(df, drop) { df <- df [, ! names(df) %in% drop, drop = FALSE] df } res <- microbenchmark( re_assign(dtest,drop_vec), null_assign(dtest,drop_vec), subset(dtest, select = ! names(dtest) %in% drop_vec), subset(dtest, select = names(dtest)[! names(dtest) %in% drop_vec]), subset(dtest, select = -c(x, y) ), times=5000) plt <- ggplot2::qplot(y=time, data=res[res$time < 1000000,], colour=expr) plt <- plt + ggplot2::scale_y_log10() + ggplot2::labs(colour = "expression") + ggplot2::scale_color_discrete(labels = c("re_assign", "null_assign", "subset_bool", "subset_names", "subset_drop")) + ggplot2::theme_bw(base_size=16) print(plt)
R> df <- data.frame(x=1:5, y=2:6, z=3:7, u=4:8) R> df x y z u 1 1 2 3 4 2 2 3 4 5 3 3 4 5 6 4 4 5 6 7 5 5 6 7 8 R> library(dplyr) R> dplyr::select(df2, -c(x, y)) z u 1 3 4 2 4 5 3 5 6 4 6 7 5 7 8
> X<-data.frame(A=c(1,2),B=c(3,4),C=c(5,6)) > X A B C 1 1 3 5 2 2 4 6
> X<-data.frame(A=c(1,2),B=c(3,4),C=c(5,6),D=c(7,8),E=c(9,10)) > X A B C D E 1 1 3 5 7 9 2 2 4 6 8 10
> X<-X[,-grep("B|D",colnames(X))] > X A C E 1 1 5 9 2 2 6 10
> X<-data.frame(A=c(1,2),B=c(3,4),C=c(5,6),D=c(7,8),E=c(9,10)) > X A B C D E 1 1 3 5 7 9 2 2 4 6 8 10 > X<-X[,!grepl("B|D",colnames(X))] > X A C E 1 1 5 9 2 2 6 10
> X<-X[,!grepl("G",colnames(X))] > X A C E 1 1 5 9 2 2 6 10
DF = read.table(text = " fruit state grade y1980 y1990 y2000 apples Ohio aa 500 100 55 apples Ohio bb 0 0 44 apples Ohio cc 700 0 33 apples Ohio dd 300 50 66 ", sep = "", header = TRUE, stringsAsFactors = FALSE) DF[ , !names(DF) %in% c("grade")] fruit state y1980 y1990 y2000 1 apples Ohio 500 100 55 2 apples Ohio 0 0 44 3 apples Ohio 700 0 33 4 apples Ohio 300 50 66 library( DT = as.data.table(DF) DT[ , !names(dat4) %in% c("grade")] [1] TRUE TRUE FALSE TRUE TRUE TRUE DT[ , !names(DT) %in% c("grade"), with=FALSE] fruit state y1980 y1990 y2000 1: apples Ohio 500 100 55 2: apples Ohio 0 0 44 3: apples Ohio 700 0 33 4: apples Ohio 300 50 66
df = read.table(text = " state county city region mmatrix X1 X2 X3 A1 A2 A3 B1 B2 B3 C1 C2 C3 1 1 1 1 111010 1 0 0 2 20 200 4 8 12 NA NA NA 1 2 1 1 111010 1 0 0 4 NA 400 5 9 NA NA NA NA 1 1 2 1 111010 1 0 0 6 60 NA NA 10 14 NA NA NA 1 2 2 1 111010 1 0 0 NA 80 800 7 11 15 NA NA NA 1 1 3 2 111010 0 1 0 1 2 1 2 2 2 10 20 30 1 2 3 2 111010 0 1 0 2 NA 1 2 2 NA 40 50 NA 1 1 4 2 111010 0 1 0 1 1 NA NA 2 2 70 80 90 1 2 4 2 111010 0 1 0 NA 2 1 2 2 10 100 110 120 1 1 1 3 010010 0 0 1 10 20 10 200 200 200 1 2 3 1 2 1 3 001000 0 0 1 20 NA 10 200 200 200 4 5 9 1 1 2 3 101000 0 0 1 10 10 NA 200 200 200 7 8 NA 1 2 2 3 011010 0 0 1 NA 20 10 200 200 200 10 11 12 ", sep = "", header = TRUE, stringsAsFactors = FALSE) df df2 <- df[df$region == 2, names(df) %in% c(paste("C", seq_along(1:3), sep= df2
dat<-read.dta("file.dta") var.in<-c("iden", "name", "x_serv", "m_serv") var.out<-setdiff(names(dat),var.in) dat <- dat[var.out]
for(i in 1:length(var.out)) { paste("data$", var.out[i], sep="") <- NULL }
for(i in 1:length(var.out)) { text_to_source <- paste0 ("data$", var.out[i], "<- NULL") eval (parse (text=text_to_source)) }
for(i in 1:length(var.out)) { data[var.out[i]] <- NULL }
url <- c( "http: "http: y <- mapply(readLines, con=url)
urls <- c( "http: "http: "xxxxx" ) readUrl <- function(url) { out <- tryCatch( { message("This is the readLines(con=url, warn=FALSE) }, error=function(cond) { message(paste("URL does not seem to exist:", url)) message("Here message(cond) return(NA) }, warning=function(cond) { message(paste("URL caused a warning:", url)) message("Here message(cond) return(NULL) }, finally={ message(paste("Processed URL:", url)) message("Some other message at the end") } ) return(out) }
> y <- lapply(urls, readUrl) Processed URL: http: Some other message at the end Processed URL: http: Some other message at the end URL does not seem to exist: xxxxx Here cannot open the connection Processed URL: xxxxx Some other message at the end Warning message: In file(con, "r") : cannot open file
> head(y[[1]]) [1] "<!DOCTYPE html PUBLIC \"- [2] "<html><head><title>R: Functions to Manipulate Connections</title>" [3] "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">" [4] "<link rel=\"stylesheet\" type=\"text/css\" href=\"R.css\">" [5] "</head><body>" [6] "" > length(y) [1] 3 > y[[3]] [1] NA
result = tryCatch({ expr }, warning = function(warning_condition) { warning-handler-code }, error = function(error_condition) { error-handler-code }, finally={ cleanup-code })
my_update_function <- function(x){ tryCatch( { y = x * 2 return(y) }, error=function(error_message) { message("My message is here!") message("And below is the error message from R:") message(error_message) return(NA) } ) }
irr2 <- function (x) { out <- tryCatch(irr(x), error = function(e) NULL) return(out) }
tryCatch( expr = { }, error = function(e){ }, warning = function(w){ }, finally = { } )
log_calculator <- function(x){ tryCatch( expr = { message(log(x)) message("Successfully executed the log(x) call.") }, error = function(e){ message( print(e) }, warning = function(w){ message( print(w) }, finally = { message( } ) }
Name Position 1 James Goalkeeper 2 Frank Goalkeeper 3 Jean Defense 4 Steve Defense 5 John Defense 6 Tim Striker
p <- ggplot(theTable, aes(x = Position)) + geom_bar(binwidth = 1)
theTable <- within(theTable, Position <- factor(Position, levels=names(sort(table(Position), decreasing=TRUE)))) ggplot(theTable,aes(x=Position))+geom_bar(binwidth=1)
theTable$Position <- factor(theTable$Position, levels = c(...))
ggplot(theTable, aes(x=reorder(Position,Position, function(x)-length(x)))) + geom_bar()
positions <- c("Goalkeeper", "Defense", "Striker") p <- ggplot(theTable, aes(x = Position)) + scale_x_discrete(limits = positions)
ggplot(theTable, aes(x=reorder(Position, -table(Position)[Position]))) + geom_bar()
require(forcats) ggplot(theTable, aes(fct_infreq(Position))) + geom_bar()
library(tidyverse) library(forcats) theTable <- data.frame( Name = c( Position = c( theTable %>% count(Position) %>% mutate(Position = fct_reorder(Position, n, .desc = TRUE)) %>% ggplot(aes(x = Position, y = n)) + geom_bar(stat =
library(dplyr) theTable %>% group_by(Position) %>% summarize(counts = n()) %>% arrange(-counts) %>% mutate(Position = factor(Position, Position)) %>% ggplot(aes(x=Position, y=counts)) + geom_bar(stat="identity")
theTable <- transform( theTable, Position = ordered(Position, levels = names( sort(-table(Position)))))
theTable <- data.frame( Position= c("Zoalkeeper", "Zoalkeeper", "Defense", "Defense", "Defense", "Striker"), Name=c("James", "Frank","Jean", "Steve","John", "Tim")) p1 <- ggplot(theTable, aes(x = Position)) + geom_bar() p2 <- ggplot(theTable, aes(x = fct_infreq(Position))) + geom_bar() p3 <- ggplot(theTable, aes(x = fct_rev(fct_infreq(Position)))) + geom_bar() gridExtra::grid.arrange(p1, p2, p3, nrow=3)
dplyr::count(theTable, Position) %>% arrange(-n) %>% mutate(Position = factor(Position, Position)) %>% ggplot(aes(x=Position, y=n)) + geom_bar(stat="identity")
ggplot(df, aes(x = reorder(Colors, -Qty, sum), y = Qty)) + geom_bar(stat = "identity")
df <- data.frame(Colors = c("Green","Yellow","Blue","Red","Yellow","Blue"), Qty = c(7,4,5,1,3,6) ) **Sample data:** Colors Qty 1 Green 7 2 Yellow 4 3 Blue 5 4 Red 1 5 Yellow 3 6 Blue 6
x <- sample(1:4,10,replace=TRUE) x which(x %in% c(2,4))
library(microbenchmark) microbenchmark( which("Feb" == month.abb)[[1]], which("Feb" %in% month.abb)) Unit: nanoseconds min lq mean median uq max neval 891 979.0 1098.00 1031 1135.5 3693 100 1052 1175.5 1339.74 1235 1390.0 7399 100
haystack <- c(1, 2, 4, 3, 4) needle <- 4 indices <- needle == haystack indices [1] 3 5 haystack[indices] [1] 4 4
> eval(parse(text="5+5")) [1] 10 > class("5+5") [1] "character" > class(parse(text="5+5")) [1] "expression"
> class(eval(parse(text="5+5"))) [1] "numeric" > class(eval(parse(text="gray"))) [1] "function" > class(eval(parse(text="blue"))) Error in eval(expr, envir, enclos) : object
q5 <- quote(5+5) str(q5) e5 <- expression(5+5) str(e5)
> pander::evals("5+5") [[1]] $src [1] "5 + 5" $result [1] 10 $output [1] "[1] 10" $type [1] "numeric" $msg $msg$messages NULL $msg$warnings NULL $msg$errors NULL $stdout NULL attr(,"class") [1] "evals"
/Library/Frameworks/R.framework/Versions/2.15/Resources/library
/Library/Frameworks/R.framework/Versions/3.0/Resources/library
> update.packages(checkBuilt=TRUE) class : Version 7.3-7 installed in /Library/Frameworks/R.framework/Versions/3.0/Resources/library Version 7.3-8 available at http: Update (y/N/c)? y ---etc---
if(!require(installr)) { install.packages("installr"); require(installr)} updateR()
install.packages( library(devtools) install_github( library(updateR) updateR(admin_password =
everything went smoothly open a Terminal session and run
install.packages("installr") library(installr) updateR()
lib_path <- gsub( "/", "\\\\" , Sys.getenv("R_LIBS_USER")) install.packages("installr", lib = lib_path) install.packages("stringr", lib_path) library(stringr, lib.loc = lib_path) library(installr, lib.loc = lib_path) installr::updateR()
install.packages("devtools") devtools::install_github("AndreaCirilloAC/updateR") updateR(admin_password = "PASSWORD")
i <- 0.1 i <- i + 0.05 i if(i==0.15) cat("i equals 0.15") else cat("i does not equal 0.15")
if(isTRUE(all.equal(i,0.15))) cat("i equals 0.15") else cat("i does not equal 0.15")
0.1+0.05==0.15 isTRUE(all.equal(0.1+0.05, 0.15)) 1-0.1-0.1-0.1==0.7 isTRUE(all.equal(1-0.1-0.1-0.1, 0.7)) 0.3/0.1 == 3 isTRUE(all.equal(0.3/0.1, 3)) 0.1+0.1==0.15 isTRUE(all.equal(0.1+0.1, 0.15))
sprintf("%a",0.9) sprintf("%a",1.1-0.2) sprintf("%a",1.1-0.2-0.9)
?.Machine .Machine$double.eps sprintf("%a",.Machine$double.eps)
a <- c(0.1+0.05, 1-0.1-0.1-0.1, 0.3/0.1, 0.1+0.1) b <- c(0.15, 0.7, 3, 0.15)
mapply(function(x, y) {isTRUE(all.equal(x, y))}, a, b)
elementwise.all.equal <- Vectorize(function(x, y) {isTRUE(all.equal(x, y))})
tolerance = .Machine$double.eps^0.5 abs(a - b) < tolerance
i <- 0.1 i <- i + 0.05 i if(isTRUE(all.equal(i, .15))) { cat("i equals 0.15\n") } else { cat("i does not equal 0.15\n") }
if(round(i, 10)==0.15) cat("i equals 0.15") else cat("i does not equal 0.15")
sqrt(2) ^ 2 == 2 library(dplyr) near(sqrt(2) ^ 2, 2)
somesysfunction("myfunction(with,arguments)") > Start time : 2001-01-01 00:00:00 > "Result" "of" "myfunction" > End time : 2001-01-01 00:00:10 > Total Execution time : 10 seconds
start.time <- Sys.time() ...Relevent codes... end.time <- Sys.time() time.taken <- end.time - start.time time.taken
system.time( replicate(10000, myfunction(with,arguments) ) )
> microbenchmark::microbenchmark(log10(5), log(5)/log(10), times = 10000) Unit: nanoseconds expr min lq mean median uq max neval cld log10(5) 0 0 25.5738 0 1 10265 10000 a log(5)/log(10) 0 0 28.1838 0 1 10265 10000
install.packages("tictoc") require(tictoc) tic() rnorm(1000,0,1) toc()
install.packages("tictoc") require(tictoc) tic() rnorm(1000,0,1) exectime <- toc() exectime <- exectime$toc - exectime$tic
Rprof ( tf <- "log.log", memory.profiling = TRUE ) your code must be in between Rprof ( NULL ) ; print ( summaryRprof ( tf ) )
Rcpp::cppFunction( options(width=100) for (n in c(1e3,1e4,1e5,1e6,1e7)) { x <- runif(n); print(microbenchmark::microbenchmark(x[length(x)], mylast(x), tail(x, n=1), dplyr::last(x), x[end(x)[1]], rev(x)[1]))}
Unit: nanoseconds expr min lq mean median uq max neval x[length(x)] 171 291.5 388.91 337.5 390.0 3233 100 mylast(x) 1291 1832.0 2329.11 2063.0 2276.0 19053 100 tail(x, n = 1) 7718 9589.5 11236.27 10683.0 12149.0 32711 100 dplyr::last(x) 16341 19049.5 22080.23 21673.0 23485.5 70047 100 x[end(x)[1]] 7688 10434.0 13288.05 11889.5 13166.5 78536 100 rev(x)[1] 7829 8951.5 10995.59 9883.0 10890.0 45763 100 Unit: nanoseconds expr min lq mean median uq max neval x[length(x)] 204 323.0 475.76 386.5 459.5 6029 100 mylast(x) 1469 2102.5 2708.50 2462.0 2995.0 9723 100 tail(x, n = 1) 7671 9504.5 12470.82 10986.5 12748.0 62320 100 dplyr::last(x) 15703 19933.5 26352.66 22469.5 25356.5 126314 100 x[end(x)[1]] 13766 18800.5 27137.17 21677.5 26207.5 95982 100 rev(x)[1] 52785 58624.0 78640.93 60213.0 72778.0 851113 100 Unit: nanoseconds expr min lq mean median uq max neval x[length(x)] 214 346.0 583.40 529.5 720.0 1512 100 mylast(x) 1393 2126.0 4872.60 4905.5 7338.0 9806 100 tail(x, n = 1) 8343 10384.0 19558.05 18121.0 25417.0 69608 100 dplyr::last(x) 16065 22960.0 36671.13 37212.0 48071.5 75946 100 x[end(x)[1]] 360176 404965.5 432528.84 424798.0 450996.0 710501 100 rev(x)[1] 1060547 1140149.0 1189297.38 1180997.5 1225849.0 1383479 100 Unit: nanoseconds expr min lq mean median uq max neval x[length(x)] 327 584.0 1150.75 996.5 1652.5 3974 100 mylast(x) 2060 3128.5 7541.51 8899.0 9958.0 16175 100 tail(x, n = 1) 10484 16936.0 30250.11 34030.0 39355.0 52689 100 dplyr::last(x) 19133 47444.5 55280.09 61205.5 66312.5 105851 100 x[end(x)[1]] 1110956 2298408.0 3670360.45 2334753.0 4475915.0 19235341 100 rev(x)[1] 6536063 7969103.0 11004418.46 9973664.5 12340089.5 28447454 100 Unit: nanoseconds expr min lq mean median uq max neval x[length(x)] 327 722.0 1644.16 1133.5 2055.5 13724 100 mylast(x) 1962 3727.5 9578.21 9951.5 12887.5 41773 100 tail(x, n = 1) 9829 21038.0 36623.67 43710.0 48883.0 66289 100 dplyr::last(x) 21832 35269.0 60523.40 63726.0 75539.5 200064 100 x[end(x)[1]] 21008128 23004594.5 37356132.43 30006737.0 47839917.0 105430564 100 rev(x)[1] 74317382 92985054.0 108618154.55 102328667.5 112443834.0 187925942 100
system.time( resultsByLevel$subject <- sapply(resultsByLevel$variable, function(x) { s <- strsplit(x, ".", fixed=TRUE)[[1]] s[length(s)] }) ) user system elapsed 3.722 0.000 3.594
system.time( resultsByLevel$subject <- sapply(resultsByLevel$variable, function(x) { s <- strsplit(x, ".", fixed=TRUE)[[1]] tail(s, n=1) }) ) user system elapsed 28.174 0.000 27.662
> a<-c(1:100,555) > end(a) [1] 101 1 > a[end(a)[1]] [1] 555
> pvalues_anova [1] 9.693919e-01 9.781728e-01 9.918415e-01 9.716883e-01 1.667183e-02 [6] 9.952762e-02 5.386854e-01 9.997699e-01 8.714044e-01 7.211856e-01 [11] 9.536330e-01 9.239667e-01 9.645590e-01 9.478572e-01 6.243775e-01 [16] 5.608563e-01 1.371190e-04 9.601970e-01 9.988648e-01 9.698365e-01 [21] 2.795891e-06 1.290176e-01 7.125751e-01 5.193604e-01 4.835312e-04
anovatest<- results[ - which(results$pvalues_anova < 0.8) ,]
> head(data) chr genome region 1 chr1 hg19_refGene CDS 2 chr1 hg19_refGene exon 3 chr1 hg19_refGene CDS 4 chr1 hg19_refGene exon 5 chr1 hg19_refGene CDS 6 chr1 hg19_refGene exon
> Data$genome <- NULL > head(Data) chr region 1 chr1 CDS 2 chr1 exon 3 chr1 CDS 4 chr1 exon 5 chr1 CDS 6 chr1 exon
Data[2] <- NULL Data[[2]] <- NULL Data <- Data[,-2] Data <- Data[-2]
Data <- Data[,-(2:3)] Data <- Data[,-(2:3),drop=FALSE]
library(data.table) > dt <- data.table(a = 1, b = 1, c = 1) > dt[,a:=NULL] b c [1,] 1 1
cols.dont.want <- "genome" cols.dont.want <- c("genome", "region") data <- data[, ! names(data) %in% cols.dont.want, drop = F]
sdata = c( paste(sdata[1], sdata[2], sdata[3], sep =
require(microbenchmark) test <- stri_rand_lipsum(100) microbenchmark(stri_paste(test, collapse= Unit: microseconds expr min lq mean median uq max neval stri_paste(test, collapse = "") 137.477 139.6040 155.8157 148.5810 163.5375 226.171 100 paste(test, collapse = "") 404.139 406.4100 446.0270 432.3250 442.9825 723.793 100 do.call(paste, c(as.list(test), sep = "")) 216.937 226.0265 251.6779 237.3945 264.8935 405.989 100
lappend <- function(lst, obj) { lst[[length(lst)+1]] <- obj return(lst) }
R> LL <- list(a="tom", b="dick") R> c(LL, c="harry") $a [1] "tom" $b [1] "dick" $c [1] "harry" R> class(LL) [1] "list" R>
library(microbenchmark) lPtrAppend <- function(lstptr, lab, obj) {lstptr[[deparse(substitute(lab))]] <- obj} envAppendList <- function(lstptr, obj) {lstptr$list[[length(lstptr$list)+1]] <- obj} runBenchmark <- function(n) { microbenchmark(times = 5, env_with_list_ = { listptr <- new.env(parent=globalenv()) listptr$list <- NULL for(i in 1:n) {envAppendList(listptr, i)} listptr$list }, c_ = { a <- list(0) for(i in 1:n) {a = c(a, list(i))} }, list_ = { a <- list(0) for(i in 1:n) {a <- list(a, list(i))} }, by_index = { a <- list(0) for(i in 1:n) {a[length(a) + 1] <- i} a }, append_ = { a <- list(0) for(i in 1:n) {a <- append(a, i)} a }, env_as_container_ = { listptr <- new.env(parent=globalenv()) for(i in 1:n) {lPtrAppend(listptr, i, i)} listptr } ) }
> runBenchmark(2e+3) Unit: microseconds expr min lq mean median uq max neval env_with_list_ 8712.146 9138.250 10185.533 10257.678 10761.33 12058.264 5 c_ 13407.657 13413.739 13620.976 13605.696 13790.05 13887.738 5 list_ 854.110 913.407 1064.463 914.167 1301.50 1339.132 5 by_index 11656.866 11705.140 12182.104 11997.446 12741.70 12809.363 5 append_ 15986.712 16817.635 17409.391 17458.502 17480.55 19303.560 5 env_as_container_ 19777.559 20401.702 20589.856 20606.961 20939.56 21223.502 5 > runBenchmark(2e+4) Unit: milliseconds expr min lq mean median uq max neval env_with_list_ 534.955014 550.57150 550.329366 553.5288 553.955246 558.636313 5 c_ 1448.014870 1536.78905 1527.104276 1545.6449 1546.462877 1558.609706 5 list_ 8.746356 8.79615 9.162577 8.8315 9.601226 9.837655 5 by_index 953.989076 1038.47864 1037.859367 1064.3942 1065.291678 1067.143200 5 append_ 1634.151839 1682.94746 1681.948374 1689.7598 1696.198890 1706.683874 5 env_as_container_ 204.134468 205.35348 208.011525 206.4490 208.279580 215.841129 5 >
expandingList <- function(capacity = 10) { buffer <- vector( length <- 0 methods <- list() methods$double.size <- function() { buffer <<- c(buffer, vector( capacity <<- capacity * 2 } methods$add <- function(val) { if(length == capacity) { methods$double.size() } length <<- length + 1 buffer[[length]] <<- val } methods$as.list <- function() { b <- buffer[0:length] return(b) } methods }
linkedList <- function() { head <- list(0) length <- 0 methods <- list() methods$add <- function(val) { length <<- length + 1 head <<- list(head, val) } methods$as.list <- function() { b <- vector( h <- head for(i in length:1) { b[[i]] <- head[[2]] head <- head[[1]] } return(b) } methods }
> l <- expandingList() > l$add("hello") > l$add("world") > l$add(101) > l$as.list() [[1]] [1] "hello" [[2]] [1] "world" [[3]] [1] 101
namedExpandingList <- function(capacity = 10) { buffer <- vector( names <- character(capacity) length <- 0 methods <- list() methods$double.size <- function() { buffer <<- c(buffer, vector( names <<- c(names, character(capacity)) capacity <<- capacity * 2 } methods$add <- function(name, val) { if(length == capacity) { methods$double.size() } length <<- length + 1 buffer[[length]] <<- val names[length] <<- name } methods$as.list <- function() { b <- buffer[0:length] names(b) <- names[0:length] return(b) } methods }
library(microbenchmark) lPtrAppend <- function(lstptr, lab, obj) {lstptr[[deparse(lab)]] <- obj} envAppendList <- function(lstptr, obj) {lstptr$list[[length(lstptr$list)+1]] <- obj} env2list <- function(env, len) { l <- vector( for (i in 1:len) { l[[i]] <- env[[as.character(i)]] } l } envl2list <- function(env, len) { l <- vector( for (i in 1:len) { l[[i]] <- env[[paste(as.character(i), } l } runBenchmark <- function(n) { microbenchmark(times = 5, env_with_list_ = { listptr <- new.env(parent=globalenv()) listptr$list <- NULL for(i in 1:n) {envAppendList(listptr, i)} listptr$list }, c_ = { a <- list(0) for(i in 1:n) {a = c(a, list(i))} }, list_ = { a <- list(0) for(i in 1:n) {a <- list(a, list(i))} }, by_index = { a <- list(0) for(i in 1:n) {a[length(a) + 1] <- i} a }, append_ = { a <- list(0) for(i in 1:n) {a <- append(a, i)} a }, env_as_container_ = { listptr <- new.env(hash=TRUE, parent=globalenv()) for(i in 1:n) {lPtrAppend(listptr, i, i)} envl2list(listptr, n) }, better_env_as_container = { env <- new.env(hash=TRUE, parent=globalenv()) for(i in 1:n) env[[as.character(i)]] <- i env2list(env, n) }, linkedList = { a <- linkedList() for(i in 1:n) { a$add(i) } a$as.list() }, inlineLinkedList = { a <- list() for(i in 1:n) { a <- list(a, i) } b <- vector( head <- a for(i in n:1) { b[[i]] <- head[[2]] head <- head[[1]] } }, expandingList = { a <- expandingList() for(i in 1:n) { a$add(i) } a$as.list() }, inlineExpandingList = { l <- vector( cap <- 10 len <- 0 for(i in 1:n) { if(len == cap) { l <- c(l, vector( cap <- cap*2 } len <- len + 1 l[[len]] <- i } l[1:len] } ) } expandingList <- function(capacity = 10) { buffer <- vector( length <- 0 methods <- list() methods$double.size <- function() { buffer <<- c(buffer, vector( capacity <<- capacity * 2 } methods$add <- function(val) { if(length == capacity) { methods$double.size() } length <<- length + 1 buffer[[length]] <<- val } methods$as.list <- function() { b <- buffer[0:length] return(b) } methods } linkedList <- function() { head <- list(0) length <- 0 methods <- list() methods$add <- function(val) { length <<- length + 1 head <<- list(head, val) } methods$as.list <- function() { b <- vector( h <- head for(i in length:1) { b[[i]] <- head[[2]] head <- head[[1]] } return(b) } methods } namedExpandingList <- function(capacity = 10) { buffer <- vector( names <- character(capacity) length <- 0 methods <- list() methods$double.size <- function() { buffer <<- c(buffer, vector( names <<- c(names, character(capacity)) capacity <<- capacity * 2 } methods$add <- function(name, val) { if(length == capacity) { methods$double.size() } length <<- length + 1 buffer[[length]] <<- val names[length] <<- name } methods$as.list <- function() { b <- buffer[0:length] names(b) <- names[0:length] return(b) } methods }
> runBenchmark(1000) Unit: microseconds expr min lq mean median uq max neval env_with_list_ 3128.291 3161.675 4466.726 3361.837 3362.885 9318.943 5 c_ 3308.130 3465.830 6687.985 8578.913 8627.802 9459.252 5 list_ 329.508 343.615 389.724 370.504 449.494 455.499 5 by_index 3076.679 3256.588 5480.571 3395.919 8209.738 9463.931 5 append_ 4292.321 4562.184 7911.882 10156.957 10202.773 10345.177 5 env_as_container_ 24471.511 24795.849 25541.103 25486.362 26440.591 26511.200 5 better_env_as_container 7671.338 7986.597 8118.163 8153.726 8335.659 8443.493 5 linkedList 1700.754 1755.439 1829.442 1804.746 1898.752 1987.518 5 inlineLinkedList 1109.764 1115.352 1163.751 1115.631 1206.843 1271.166 5 expandingList 1422.440 1439.970 1486.288 1519.728 1524.268 1525.036 5 inlineExpandingList 942.916 973.366 1002.461 1012.197 1017.784 1066.044 5 > runBenchmark(10000) Unit: milliseconds expr min lq mean median uq max neval env_with_list_ 357.760419 360.277117 433.810432 411.144799 479.090688 560.779139 5 c_ 685.477809 734.055635 761.689936 745.957553 778.330873 864.627811 5 list_ 3.257356 3.454166 3.505653 3.524216 3.551454 3.741071 5 by_index 445.977967 454.321797 515.453906 483.313516 560.374763 633.281485 5 append_ 610.777866 629.547539 681.145751 640.936898 760.570326 763.896124 5 env_as_container_ 281.025606 290.028380 303.885130 308.594676 314.972570 324.804419 5 better_env_as_container 83.944855 86.927458 90.098644 91.335853 92.459026 95.826030 5 linkedList 19.612576 24.032285 24.229808 25.461429 25.819151 26.223597 5 inlineLinkedList 11.126970 11.768524 12.216284 12.063529 12.392199 13.730200 5 expandingList 14.735483 15.854536 15.764204 16.073485 16.075789 16.081726 5 inlineExpandingList 10.618393 11.179351 13.275107 12.391780 14.747914 17.438096 5 > runBenchmark(20000) Unit: milliseconds expr min lq mean median uq max neval env_with_list_ 1723.899913 1915.003237 1921.23955 1938.734718 1951.649113 2076.910767 5 c_ 2759.769353 2768.992334 2810.40023 2820.129738 2832.350269 2870.759474 5 list_ 6.112919 6.399964 6.63974 6.453252 6.910916 7.321647 5 by_index 2163.585192 2194.892470 2292.61011 2209.889015 2436.620081 2458.063801 5 append_ 2832.504964 2872.559609 2983.17666 2992.634568 3004.625953 3213.558197 5 env_as_container_ 573.386166 588.448990 602.48829 597.645221 610.048314 642.912752 5 better_env_as_container 154.180531 175.254307 180.26689 177.027204 188.642219 206.230191 5 linkedList 38.401105 47.514506 46.61419 47.525192 48.677209 50.952958 5 inlineLinkedList 25.172429 26.326681 32.33312 34.403442 34.469930 41.293126 5 expandingList 30.776072 30.970438 34.45491 31.752790 38.062728 40.712542 5 inlineExpandingList 21.309278 22.709159 24.64656 24.290694 25.764816 29.158849 5
> l <- c(1) > l <- c(2, l) > l <- c(3, l) > l <- rev(l) > l [1] 1 2 3
> push <- function(l, x) { lst <- get(l, parent.frame()) lst[length(lst)+1] <- x assign(l, lst, envir=parent.frame()) } > a <- list(1,2) > push( > a [[1]] [1] 1 [[2]] [1] 2 [[3]] [1] 6
push <- function(l, x) { assign(l, append(eval(as.name(l)), x), envir=parent.frame()) }
> a <- list(1,2) > a [[1]] [1] 1 [[2]] [1] 2 > push("a", 3) > a [[1]] [1] 1 [[2]] [1] 2 [[3]] [1] 3 >
> v <- vector() > push("v", 1) > v [1] 1 > push("v", 2) > v [1] 1 2 >
n = 1e+4 library(microbenchmark) lPtrAppend <- function(lstptr, lab, obj) {lstptr[[deparse(substitute(lab))]] <- obj} envAppendList <- function(lstptr, obj) {lstptr$list[[length(lstptr$list)+1]] <- obj} microbenchmark(times = 5, env_with_list_ = { listptr <- new.env(parent=globalenv()) listptr$list <- NULL for(i in 1:n) {envAppendList(listptr, i)} listptr$list }, c_ = { a <- list(0) for(i in 1:n) {a = c(a, list(i))} }, list_ = { a <- list(0) for(i in 1:n) {a <- list(a, list(i))} }, by_index = { a <- list(0) for(i in 1:n) {a[length(a) + 1] <- i} a }, append_ = { a <- list(0) for(i in 1:n) {a <- append(a, i)} a }, env_as_container_ = { listptr <- new.env(parent=globalenv()) for(i in 1:n) {lPtrAppend(listptr, i, i)} listptr } )
Unit: milliseconds expr min lq mean median uq max neval cld env_with_list_ 188.9023 198.7560 224.57632 223.2520 229.3854 282.5859 5 a c_ 1275.3424 1869.1064 2022.20984 2191.7745 2283.1199 2491.7060 5 b list_ 17.4916 18.1142 22.56752 19.8546 20.8191 36.5581 5 a by_index 445.2970 479.9670 540.20398 576.9037 591.2366 607.6156 5 a append_ 1140.8975 1316.3031 1794.10472 1620.1212 1855.3602 3037.8416 5 b env_as_container_ 355.9655 360.1738 399.69186 376.8588 391.7945 513.6667 5 a
lappend <- function (lst, ...){ lst <- c(lst, list(...)) return(lst) }
listptr=new.env(parent=globalenv()) listptr$list=mylist lPtrAppend <- function(lstptr, obj) { lstptr$list[[length(lstptr$list)+1]] <- obj }
small_list = list() small_list$k1 = "v1" small_list$k2 = "v2" small_list$k3 = 1:10 small_list$k1 small_list["k2"]
kx = paste(LETTERS[1:5], 1:5, sep="") vx = runif(5) lx = list() cn = 1 for (itm in kx) { lx[itm] = vx[cn]; cn = cn + 1 } print(length(lx))
[[1]] [1] [[2]] [1] "foo" [[3]] [,1] [,2] [1,] 5 5 [2,] 5 5
push_back <- function(l, ...) c(l, list(...)) push_front <- function(l, ...) c(list(...), l)
Unit: milliseconds expr min lq mean median uq env_with_list_ 167.882406 175.969269 185.966143 181.817187 185.933887 c_ 485.524870 501.049836 516.781689 518.637468 537.355953 list_ 6.155772 6.258487 6.544207 6.269045 6.290925 by_index 9.290577 9.630283 9.881103 9.672359 10.219533 append_ 505.046634 543.319857 542.112303 551.001787 553.030110 env_as_container_ 153.297375 154.880337 156.198009 156.068736 156.800135
n = 1e+4 library(microbenchmark) lPtrAppend <- function(lstptr, lab, obj) {lstptr[[deparse(substitute(lab))]] <- obj} envAppendList <- function(lstptr, obj) {lstptr$list[[length(lstptr$list)+1]] <- obj} microbenchmark(times = 5, env_with_list_ = { listptr <- new.env(parent=globalenv()) listptr$list <- NULL for(i in 1:n) {envAppendList(listptr, i)} listptr$list }, c_ = { a <- list(0) for(i in 1:n) {a = c(a, list(i))} }, list_ = { a <- list(0) for(i in 1:n) {a <- list(a, list(i))} }, by_index = { a <- list(0) for(i in 1:n) {a[length(a) + 1] <- i} a }, append_ = { a <- list(0) for(i in 1:n) {a <- append(a, i)} a }, env_as_container_ = { listptr <- new.env(parent=globalenv()) for(i in 1:n) {lPtrAppend(listptr, i, i)} listptr } )
> LL<-list(1:4) > LL [[1]] [1] 1 2 3 4 > LL<-list(c(unlist(LL),5:9)) > LL [[1]] [1] 1 2 3 4 5 6 7 8 9
a_list<-list() for(i in 1:3){ a_list<-list(unlist(list(unlist(a_list,recursive = FALSE),list(rnorm(2))),recursive = FALSE)) } a_list [[1]] [[1]][[1]] [1] -0.8098202 1.1035517 [[1]][[2]] [1] 0.6804520 0.4664394 [[1]][[3]] [1] 0.15592354 0.07424637
require(rlist) LL <- list(a="Tom", b="Dick") list.append(LL,d="Pam",f=c("Joe","Ann"))
x <- "some text in a string" substrRight <- function(x, n){ substr(x, nchar(x)-n+1, nchar(x)) } substrRight(x, 6) [1] "string" substrRight(x, 8) [1] "a string"
x <- c("some text in a string", "I really need to learn how to count") substrRight(x, 6) [1] "string" " count"
x <- "some text in a string" str_sub(x,-6,-1) [1] "string"
stri_sub("abcde",1,3) [1] "abc" stri_sub("abcde",1,1) [1] "a" stri_sub("abcde",-3,-1) [1] "cde"
str = n = 7 result = substr(str,(nchar(str)+1)-n,nchar(str)) print(result) > [1] "example" >
substrRight <- function(x, n){ sapply(x, function(xx) substr(xx, (nchar(xx)-n+1), nchar(xx)) ) } > substrRight(c("12345","ABCDE"),2) 12345 ABCDE "45" "DE"
N <- 2 sapply(strsplit(x, ""), function(x, n) paste(tail(x, n), collapse = ""), N)
splits <- strsplit("Give me your food.", split = "")
> text<-"some text in a string" > n<-5 > substr(x=text,start=nchar(text)-n,stop=nchar(text))
x <- "some text in a string" n <- 5 substr(x, nchar(x)-n, nchar(x))
substr(output, nchar(stringOfInterest), nchar(stringOfInterest))
substrR <- function(x, n) { if(n > 0) substr(x, (nchar(x)-n+1), nchar(x)) else substr(x, 1, (nchar(x)+n)) } x <- "moSvmC20F.5.rda" substrR(x,-4) [1] "moSvmC20F.5"
substrL <- function(x, n){ if(n > 0) substr(x, 1, n) else substr(x, -n+1, nchar(x)) } substrL(substrR(x,-4),-2) [1] "SvmC20F.5"
substrRightRange <- function(x, m, n){substr(x, nchar(x)-m+1, nchar(x)-m+n)} value <- "REGNDATE:20170526RN" substrRightRange(value, 10, 8) [1] "20170526"
group <- data.frame(c("12357e", "12575e", "197e18", "e18947")
group group.no.e 12357e 12357 12575e 12575 197e18 19718 e18947 18947
group <- c("12357e", "12575e", "197e18", "e18947") group [1] "12357e" "12575e" "197e18" "e18947" gsub("e", "", group) [1] "12357" "12575" "19718" "18947"
R> R> group<-data.frame(group=c("12357e", "12575e", "197e18", "e18947")) ) R> group group 1 12357e 2 12575e 3 197e18 4 e18947
R> group$groupNoE <- gsub("e", "", group$group) R> group group groupNoE 1 12357e 12357 2 12575e 12575 3 197e18 19718 4 e18947 18947 R>
group<-data.frame(group=c("12357e", "12575e", "197e18", "e18947"))
group$group.no.e <- str_replace_all(group$group, "e", "")
group group.no.e 1 12357e 12357 2 12575e 12575 3 197e18 19718 4 e18947 18947
ctr_names <- c("Czech.Republic","New.Zealand","Great.Britain") gsub("[.]", " ", ctr_names)
require(stringi) group<-data.frame(c("12357e", "12575e", "197e18", "e18947")) stri_replace_all(group[,1], "", fixed="e") [1] "12357" "12575" "19718" "18947"
table <- data.frame(Time=c(1,2), In=c(2,3), Out=c(3,4), Files=c(4,5)) table
data <- data[c("A", "B", "C")] data <- data[c(1,3,2)]
mtcars %>% select(mpg:disp, hp, wt, gear:qsec, starts_with(
arrange.vars <- function(data, vars){ stopifnot(is.data.frame(data)) data.nms <- names(data) var.nr <- length(data.nms) var.nms <- names(vars) var.pos <- vars stopifnot( !any(duplicated(var.nms)), !any(duplicated(var.pos)) ) stopifnot( is.character(var.nms), is.numeric(var.pos) ) stopifnot( all(var.nms %in% data.nms) ) stopifnot( all(var.pos > 0), all(var.pos <= var.nr) ) out.vec <- character(var.nr) out.vec[var.pos] <- var.nms out.vec[-var.pos] <- data.nms[ !(data.nms %in% var.nms) ] stopifnot( length(out.vec)==var.nr ) data <- data[ , out.vec] return(data) }
table <- data.frame(Time=c(1,2), In=c(2,3), Out=c(3,4), Files=c(4,5)) table arrange.vars(table, c("Out"=2))
arrange.vars(table, c("Out"=2, "Files"=1, "Time"=4))
select(table, "Time", "Out", "In", "Files") select(table, Time, Out, In, Files)
df <- data.frame(Time=c(1,2), In=c(2,3), Out=c(3,4), Files=c(4,5)) > df Time In Out Files 1 1 2 3 4 2 2 3 4 5
out.column.name <- "Out" in.column.name <- "In" data[,c("Time", out.column.name, in.column.name, "Files")]
shuffle_columns <- function (invec, movecommand) { movecommand <- lapply(strsplit(strsplit(movecommand, ";")[[1]], ",|\\s+"), function(x) x[x != ""]) movelist <- lapply(movecommand, function(x) { Where <- x[which(x %in% c("before", "after", "first", "last")):length(x)] ToMove <- setdiff(x, Where) list(ToMove, Where) }) myVec <- invec for (i in seq_along(movelist)) { temp <- setdiff(myVec, movelist[[i]][[1]]) A <- movelist[[i]][[2]][1] if (A %in% c("before", "after")) { ba <- movelist[[i]][[2]][2] if (A == "before") { after <- match(ba, temp) - 1 } else if (A == "after") { after <- match(ba, temp) } } else if (A == "first") { after <- 0 } else if (A == "last") { after <- length(myVec) } myVec <- append(temp, values = movelist[[i]][[1]], after = after) } myVec }
new_df <- iris[shuffle_columns(names(iris), "Sepal.Width before Sepal.Length")]
d <- data.frame(char = letters[1:5], fake_char = as.character(1:5), fac = factor(1:5), char_fac = factor(letters[1:5]), num = 1:5, stringsAsFactors = FALSE)
> d char fake_char fac char_fac num 1 a 1 1 a 1 2 b 2 2 b 2 3 c 3 3 c 3 4 d 4 4 d 4 5 e 5 5 e 5
> sapply(d, mode) char fake_char fac char_fac num "character" "character" "numeric" "numeric" "numeric" > sapply(d, class) char fake_char fac char_fac num "character" "character" "factor" "factor" "integer"
> transform(d, char = as.numeric(char)) char fake_char fac char_fac num 1 NA 1 1 a 1 2 NA 2 2 b 2 3 NA 3 3 c 3 4 NA 4 4 d 4 5 NA 5 5 e 5 Warning message: In eval(expr, envir, enclos) : NAs introduced by coercion
> transform(d, fake_char = as.numeric(fake_char), char_fac = as.numeric(char_fac)) char fake_char fac char_fac num 1 a 1 1 1 1 2 b 2 2 2 2 3 c 3 3 3 3 4 d 4 4 4 4 5 e 5 5 5 5
> D <- transform(d, fake_char = as.numeric(fake_char), char_fac = as.numeric(char_fac)) > sapply(D, mode) char fake_char fac char_fac num "character" "numeric" "numeric" "numeric" "numeric" > sapply(D, class) char fake_char fac char_fac num "character" "numeric" "factor" "numeric" "integer"
> err <- c(1, "b", 3, 4, "e") > mode(err) [1] "character" > class(err) [1] "character" > char <- as.numeric(err) Warning message: NAs introduced by coercion > char [1] 1 NA 3 4 NA
> fac <- as.factor(err) > fac ??? > num <- as.numeric(fac) > num ???
data(cars) cars[, 1:2] <- sapply(cars[, 1:2], as.factor)
dat[, c(3,6:15,37)] <- sapply(dat[, c(3,6:15,37)], as.numeric)
R> df <- data.frame(a = as.character(10:15)) R> df <- data.frame(df, num = as.numeric(df$a), numchr = as.numeric(as.character(df$a))) R> df a num numchr 1 10 1 10 2 11 2 11 3 12 3 12 4 13 4 13 5 14 5 14 6 15 6 15 R> summary(df) a num numchr 10:1 Min. :1.00 Min. :10.0 11:1 1st Qu.:2.25 1st Qu.:11.2 12:1 Median :3.50 Median :12.5 13:1 Mean :3.50 Mean :12.5 14:1 3rd Qu.:4.75 3rd Qu.:13.8 15:1 Max. :6.00 Max. :15.0 R>
library(tidyverse) library(lubridate) data_df data_df %>% mutate_all(type.convert) %>% mutate_if(is.factor, as.character) %>% mutate(TIMESTAMP = as_datetime(TIMESTAMP, tz = Sys.timezone()))
convert_types <- function(x) { stopifnot(is.list(x)) x[] <- rapply(x, utils::type.convert, classes = "character", how = "replace", as.is = TRUE) return(x) } d <- data.frame(char = letters[1:5], fake_char = as.character(1:5), fac = factor(1:5), char_fac = factor(letters[1:5]), num = 1:5, stringsAsFactors = FALSE) sapply(d, class) sapply(convert_types(d), class)
data_frame$column <- as.numeric(as.character(data_frame$column))
for(i in seq_along(names(df)){ potential_numcol[i] <- all(!grepl("[a-zA-Z]",d[,i])) } d <- sapply(d[,potential_numcol],as.numeric)
dt[,2:4] <- lapply(dt[,2:4], function (x) as.factor(as.numeric(x)))
BankFinal1 <- transform(BankLoan, LoanApproval=as.factor(LoanApproval)) BankFinal1 <- transform(BankFinal1, LoanApp=as.factor(LoanApproval))
transform(BankData, LoanApp=as.numeric(LoanApproval))
Warning message: In eval(substitute(list(...)), `_data`, parent.frame()) : NAs introduced by coercion
BankFinal1 < transform(BankFinal1, LoanApp = as.numeric(LoanApp), LoanApproval = as.numeric(LoanApproval))
for (i in 1:length(data[1,])){ if(length(as.numeric(data[,i][!is.na(data[,i])])[!is.na(as.numeric(data[,i][!is.na(data[,i])]))])==0){} else { data[,i]<-as.numeric(data[,i]) } }
makenumcols<-function(df){ df<-as.data.frame(df) cond <- apply(df, 2, function(x) { x <- x[!is.na(x)] all(suppressWarnings(!is.na(as.numeric(x)))) }) numeric_cols <- names(df)[cond] df[,numeric_cols] <- apply(df[,numeric_cols],2, as.character) df[,numeric_cols] <- sapply(df[,numeric_cols], as.numeric) return(df) } df<-makenumcols(df)
df <- mtcars %>% mutate_all(as.character) %>% as_tibble() > df mpg cyl disp hp drat wt qsec vs am gear carb <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> 1 21 6 160 110 3.9 2.62 16.46 0 1 4 4 2 21 6 160 110 3.9 2.875 17.02 0 1 4 4 3 22.8 4 108 93 3.85 2.32 18.61 1 1 4 1
library(hablar) df %>% convert(int(cyl, vs), num(disp:wt), fct(gear))
mpg cyl disp hp drat wt qsec vs am gear carb <chr> <int> <dbl> <dbl> <dbl> <dbl> <chr> <int> <chr> <fct> <chr> 1 21 6 160 110 3.9 2.62 16.46 0 1 4 4 2 21 6 160 110 3.9 2.88 17.02 0 1 4 4 3 22.8 4 108 93 3.85 2.32 18.61 1 1 4 1 4 21.4 6 258 110 3.08 3.22 19.44 1 0 3 1
> is.na(ooxx) Error: object > is.finite(ooxx) Error: object
R> exists("somethingUnknown") [1] FALSE R> somethingUnknown <- 42 R> exists("somethingUnknown") [1] TRUE R>
> exists("foo") [1] FALSE > foo <- 1:10 > exists("foo") [1] TRUE
exchequer = function(x) { if(missing(x)){ message("x is missing… :-(") } } exchequer() x is missing… :-(
> exists("data", inherits = FALSE) [1] FALSE foo <- TRUE > exists("foo", inherits = FALSE) [1] TRUE
> exists("data.table") [1] FALSE require(data.table) > exists("data.table", inherits = FALSE) [1] FALSE > exists("data.table") [1] TRUE
any(sapply(1:(which(search() == "tools:rstudio") - 1L), function(pp) exists(_object_name_, where = pp, inherits = FALSE)))
is.defined <- function(sym) { sym <- deparse(substitute(sym)) env <- parent.frame() exists(sym, env) } is.defined(a) a <- 10 is.defined(a)
x <- list("a", "b", "c", "d", "e"); x[-2]; x[-c(2, 3)];
df <- data.frame(number = 1:5, name = letters[1:5]) df[df$name != "b", ]; df[df$number %% 2 == 1, ]
x <- list("a", "b", "c", "d", "e") x[length(x)] <- NULL
lst <- list(a = 1:4, b = 4:8, c = 8:10) if("b" %in% names(lst)) lst <- lst[ - which(names(lst) == "b")]
library(rlist) devs <- list( p1=list(name="Ken",age=24, interest=c("reading","music","movies"), lang=list(r=2,csharp=4,python=3)), p2=list(name="James",age=25, interest=c("sports","music"), lang=list(r=3,java=2,cpp=5)), p3=list(name="Penny",age=24, interest=c("movies","reading"), lang=list(r=1,cpp=4,python=2))) list.remove(devs, c("p1","p2"))
l <- list(a = 1, b = 2) > within(l, rm(a)) $b [1] 2
member <- function(list,names){ member..names <- names(list) index <- which(member..names %in% names) list[index] } exclude <- function(list,names){ member..names <- names(list) index <- which(!(member..names %in% names)) list[index] } aa <- structure(list(a = 1:10, b = 4:5, fruits = c("apple", "orange" )), .Names = c("a", "b", "fruits")) > aa > member(aa,"fruits") > exclude(aa,"fruits")
my_list <- list(a = 3, b = 3, c = 4, d = "Hello", e = NA) my_list
lst <- list(a = 1:4, b = 4:8, c = 8:10) toremove<-c("a","c") lstnew<-lst[-unlist(lapply(toremove, function(x) grep(x, names(lst)) ) ) ] pattern<-"a|c" lstnew<-lst[-grep(pattern, names(lst))]
> l <- list(a=1,b=2) > l[setdiff(names(l),"a")] $b [1] 2
> m <- c(1:5) > m [1] 1 2 3 4 5 > m[1:length(m)-1] [1] 1 2 3 4
initial.options <- commandArgs(trailingOnly = FALSE) file.arg.name <- "--file=" script.name <- sub(file.arg.name, "", initial.options[grep(file.arg.name, initial.options)]) script.basename <- dirname(script.name) other.name <- file.path(script.basename, "other.R") print(paste("Sourcing",other.name,"from",script.name)) source(other.name)
burner@firefighter:~$ main.R [1] "Sourcing /home/burner/bin/other.R from /home/burner/bin/main.R" [1] "hello" burner@firefighter:~$ bin/main.R [1] "Sourcing bin/other.R from bin/main.R" [1] "hello" burner@firefighter:~$ cd bin burner@firefighter:~/bin$ main.R [1] "Sourcing ./other.R from ./main.R" [1] "hello"
thisFile <- function() { cmdArgs <- commandArgs(trailingOnly = FALSE) needle <- "--file=" match <- grep(needle, cmdArgs) if (length(match) > 0) { return(normalizePath(sub(needle, "", cmdArgs[match]))) } else { return(normalizePath(sys.frames()[[1]]$ofile)) } }
frame_files <- lapply(sys.frames(), function(x) x$ofile) frame_files <- Filter(Negate(is.null), frame_files) PATH <- dirname(frame_files[[length(frame_files)]])
library(rstudioapi) rstudioapi::getActiveDocumentContext()$path
source_local <- function(fname){ argv <- commandArgs(trailingOnly = FALSE) base_dir <- dirname(substring(argv[grep("--file=", argv)], 8)) source(paste(base_dir, fname, sep="/")) }
args <- commandArgs(trailingOnly = F) scriptPath <- normalizePath(dirname(sub("^--file=", "", args[grep("^--file=", args)])))
ez.csf <- function() { cmdArgs = commandArgs(trailingOnly = FALSE) needle = "--file=" match = grep(needle, cmdArgs) if (length(match) > 0) { return(normalizePath(sub(needle, "", cmdArgs[match]))) } else { ls_vars = ls(sys.frames()[[1]]) if ("fileName" %in% ls_vars) { return(normalizePath(sys.frames()[[1]]$fileName)) } else { if (!is.null(sys.frames()[[1]]$ofile)) { return(normalizePath(sys.frames()[[1]]$ofile)) } else { pth = rstudioapi::getActiveDocumentContext()$path if (pth!= return(normalizePath(pth)) } else { tryCatch({ pth = rstudioapi::getSourceEditorContext()$path pth = normalizePath(pth) }, error = function(e) { pth = } ) return(pth) } } } } }
get_script_path <- function() { cmdArgs = commandArgs(trailingOnly = FALSE) needle = "--file=" match = grep(needle, cmdArgs) if (length(match) > 0) { return(normalizePath(sub(needle, "", cmdArgs[match]))) } else { ls_vars = ls(sys.frames()[[1]]) if ("fileName" %in% ls_vars) { return(normalizePath(sys.frames()[[1]]$fileName)) } else { return(normalizePath(sys.frames()[[1]]$ofile)) } } }
path_to_script=$(dirname $0) R --slave<<EOF source("$path_to_script/other.R") EOF
this.file <- sys.frame(tail(grep( this.dir <- dirname(this.file)
args <- commandArgs(trailingOnly=TRUE) setwd(args[1]) source(other.R)
thisScript <- (function() { lastScriptSourced <- tail(unlist(lapply(sys.frames(), function(env) env$ofile)), 1) if (is.null(lastScriptSourced)) { cmdArgs <- commandArgs(trailingOnly = FALSE) needle <- "--file=" match <- grep(needle, cmdArgs) if (length(match) > 0) { return(normalizePath(sub(needle, "", cmdArgs[match]), winslash=.Platform$file.sep, mustWork=TRUE)) } } else { return(normalizePath(lastScriptSourced, winslash=.Platform$file.sep, mustWork=TRUE)) } })()
print("Hello") programDir <- dirname(sys.frame(1)$ofile) source(paste(programDir,"other.R",sep= source(paste(programDir,"other-than-other.R",sep=
thisFile <- function() { cmdArgs <- commandArgs(trailingOnly = FALSE) needle <- "--file=" match <- grep(needle, cmdArgs) if (length(match) > 0) { path <- cmdArgs[match] path <- gsub("\\~\\+\\~", " ", path) return(normalizePath(sub(needle, "", path))) } else { return(normalizePath(sys.frames()[[1]]$ofile)) } }
write.table(c("readlink -e $0"), file="scriptpath.sh",col=F, row=F, quote=F) thisscript <- system("sh scriptpath.sh", intern = TRUE)
splitstr <- rev(strsplit(thisscript, "\\/")[[1]]) otherscript <- paste0(paste(rev(splitstr[2:length(splitstr)]),collapse="/"),"/other.R")
format(round(1.20, 2), nsmall = 2) format(round(1, 2), nsmall = 2) format(round(1.1234, 2), nsmall = 2)
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
specify_decimal(1234, 5) specify_decimal(0.1234, 5)
x = 1111111234.6547389758965789345 y = formatC(x, digits = 8, format = "f")
> > library(formattable) > x <- formattable(1.128347132904321674821, digits = 2, format = "f") > x [1] 1.13
> formattable(x, digits = 6, format = "f") [1] 1.128347
digits: controls the number of digits to print when printing numeric values.
formatDecimal <- function(x, k) format(round(x, k), trim=T, nsmall=k)
> grepl("1+2", "1+2", fixed=TRUE) [1] TRUE > grepl("1+2", "123+456", fixed=TRUE) [1] FALSE > grepl("1+2", "1+2") [1] FALSE > grepl("1+2", "123+456") [1] TRUE
> chars <- "test" > value <- "es" > grepl(value, chars) [1] TRUE > chars <- "test" > value <- "et" > grepl(value, chars) [1] FALSE
> stri_detect_fixed("test",c("et","es")) [1] FALSE TRUE
library(stringi) set.seed(123L) value <- stri_rand_strings(10000, ceiling(runif(10000, 1, 100))) head(value) chars <- "es" library(microbenchmark) microbenchmark( grepl(chars, value), grepl(chars, value, fixed=TRUE), grepl(chars, value, perl=TRUE), stri_detect_fixed(value, chars), stri_detect_regex(value, chars) )
>substring="as|at" >string_vector=c("ass","ear","eye","heat") >grepl(substring,string_vector)
> library(stringr) > chars <- "test" > value <- "es" > str_detect(chars, value) [1] TRUE > value <- c("es", "l", "est", "a", "test") > str_detect(chars, value) [1] TRUE FALSE TRUE FALSE TRUE
> grep("[", "abc[") Error in grep("[", "abc[") : invalid regular expression
grep("es", "Test") [1] 1 grep("et", "Test") integer(0)
set.seed(45) dat1 <- data.frame( name = rep(c("firstName", "secondName"), each=4), numbers = rep(1:4, 2), value = rnorm(8) ) dat1 name numbers value 1 firstName 1 0.3407997 2 firstName 2 -0.7033403 3 firstName 3 -0.3795377 4 firstName 4 -0.7460474 5 secondName 1 -0.8981073 6 secondName 2 -0.3347941 7 secondName 3 -0.5013782 8 secondName 4 -0.1745357
name 1 2 3 4 1 firstName 0.3407997 -0.7033403 -0.3795377 -0.7460474 5 secondName -0.8981073 -0.3347941 -0.5013782 -0.1745357
reshape(dat1, idvar = "name", timevar = "numbers", direction = "wide")
library(tidyr) spread(dat1, key = numbers, value = value)
library(data.table) setDT(dat1) dcast(dat1, name ~ numbers, value.var = "value")
dat1[, value2 := value * 2] dcast(dat1, name ~ numbers, value.var = c("value", "value2"))
df <- unstack(dat1, form = value ~ numbers) rownames(df) <- unique(dat1$name) df
library(sqldf) sqldf( MAX(CASE WHEN numbers = 1 THEN value ELSE NULL END) x1, MAX(CASE WHEN numbers = 2 THEN value ELSE NULL END) x2, MAX(CASE WHEN numbers = 3 THEN value ELSE NULL END) x3, MAX(CASE WHEN numbers = 4 THEN value ELSE NULL END) x4 FROM dat1 GROUP BY name
library(cdata) pivotControlTable <- buildPivotControlTableD(table = dat1, columnToTakeKeysFrom = columnToTakeValuesFrom = sep="_") dat_wide <- moveValuesToColumnsD(tallTable = dat1, keyColumns = c( controlTable = pivotControlTable ) dat_wide
df <- data.frame( year = c(rep(2000, 12), rep(2001, 12)), month = rep(1:12, 2), values = rnorm(24) ) df_wide <- reshape(df, idvar="year", timevar="month", v.names="values", direction="wide", sep="_") df_wide
df$id <- c(rep("year1", 12), rep("year2", 12)) df_wide <- reshape(df, idvar="id", timevar="month", v.names="values", direction="wide", sep="_") df_wide
> if( print(1) ) {print(2)} else {print(3)} [1] 1 [1] 2 > if(FALSE && print(1) ) {print(2)} else {print(3)} [1] 3 > if(TRUE && print(1) ) {print(2)} else {print(3)} [1] 1 [1] 2 > if(TRUE && !print(1) ) {print(2)} else {print(3)} [1] 1 [1] 3 > if(FALSE && !print(1) ) {print(2)} else {print(3)} [1] 3
merge.rec <- function(.list, ...){ if(length(.list)==1) return(.list[[1]]) Recall(c(list(merge(.list[[1]], .list[[2]], ...)), .list[-(1:2)]), ...) }
df <- merge.rec(my.list, by.x = c("var1", "var2"), by.y = c("var1", "var2"), all = T, suffixes=c("", ""))
Error in match.names(clabs, names(xi)) : names do not match previous names
library(dplyr) x <- data_frame(i = c("a","b","c"), j = 1:3) y <- data_frame(i = c("b","c","d"), k = 4:6) z <- data_frame(i = c("c","d","a"), l = 7:9)
library(tidyverse) list(x, y, z) %>% reduce(left_join, by = "i")
list(x, y, z) %>% reduce(full_join, by = "i") list(x, y, z) %>% reduce(inner_join, by = "i")
list(x,y,z) %>% Reduce(function(dtf1,dtf2) left_join(dtf1,dtf2,by="i"), .)
Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "i", all.x = TRUE), list(x,y,z))
merged.data.frame = Reduce(function(...) merge(..., all=T), list.of.data.frames)
set.seed(1) list.of.data.frames = list(data.frame(x=1:10, a=1:10), data.frame(x=5:14, b=11:20), data.frame(x=sample(20, 10), y=runif(10))) merged.data.frame = Reduce(function(...) merge(..., all=T), list.of.data.frames) tail(merged.data.frame)
merged.data.frame = Reduce(function(...) merge(..., by=match.by, all=T), my.list) merged.data.frame[, 1:12]
merge(my.list[[1]], my.list[[2]], by=match.by, all=T) merge(merge(my.list[[1]], my.list[[2]], by=match.by, all=T), my.list[[3]], by=match.by, all=T)
my.list2 = Map(function(x, i) setNames(x, ifelse(names(x) %in% match.by, names(x), sprintf(
MergeListOfDf = function( data , ... ) { if ( length( data ) == 2 ) { return( merge( data[[ 1 ]] , data[[ 2 ]] , ... ) ) } return( merge( MergeListOfDf( data[ -1 ] , ... ) , data[[ 1 ]] , ... ) ) }
x <- data_frame(i = c("a","b","c"), j = 1:3) y <- data_frame(i = c("b","c","d"), k = 4:6) z <- data_frame(i = c("c","d","a"), l = 7:9)
library(tidyverse) list(x, y, z) %>% map_df(gather, key=key, value=value, -i) %>% spread(key, value)
ex_df <- cbind(c( seq(1, 10, 1), rep("NA", 0), seq(1,10, 1) ), c( seq(1, 7, 1), rep("NA", 3), seq(1, 12, 1) ), c( seq(1, 3, 1), rep("NA", 7), seq(1, 5, 1), rep("NA", 5) )) colnames(ex_df) <- 1:dim(ex_df)[2] rownames(ex_df) <- 1:dim(ex_df)[1] list_of_df <- apply(ex_df=="NA", 2, ( table) )
rbind_null_df_lists <- function ( list_of_dfs ) { length_df <- do.call(rbind, (lapply( list_of_dfs, function(x) length(x)))) max_no <- max(length_df[,1]) max_df <- length_df[max(length_df),] name_df <- names(length_df[length_df== max_no,][1]) names_list <- names(list_of_dfs[ name_df][[1]]) df_dfs <- list() for (i in 1:max_no ) { df_dfs[[i]] <- do.call(rbind, lapply(1:length(list_of_dfs), function(x) list_of_dfs[[x]][i])) } df_cbind <- do.call( cbind, df_dfs ) rownames( df_cbind ) <- rownames (length_df) colnames( df_cbind ) <- names_list df_cbind }
carrots <- data.frame(length = rnorm(100000, 6, 2)) cukes <- data.frame(length = rnorm(50000, 7, 2.5)) carrots$veg <- cukes$veg <- vegLengths <- rbind(carrots, cukes)
ggplot(vegLengths, aes(length, fill = veg)) + geom_density(alpha = 0.2)
ggplot(vegLengths, aes(length, fill = veg)) + geom_histogram(alpha = 0.5, aes(y = ..density..), position =
set.seed(42) p1 <- hist(rnorm(500,4)) p2 <- hist(rnorm(500,6)) plot( p1, col=rgb(0,0,1,1/4), xlim=c(0,10)) plot( p2, col=rgb(1,0,0,1/4), xlim=c(0,10), add=T)
plotOverlappingHist <- function(a, b, colors=c("white","gray20","gray50"), breaks=NULL, xlim=NULL, ylim=NULL){ ahist=NULL bhist=NULL if(!(is.null(breaks))){ ahist=hist(a,breaks=breaks,plot=F) bhist=hist(b,breaks=breaks,plot=F) } else { ahist=hist(a,plot=F) bhist=hist(b,plot=F) dist = ahist$breaks[2]-ahist$breaks[1] breaks = seq(min(ahist$breaks,bhist$breaks),max(ahist$breaks,bhist$breaks),dist) ahist=hist(a,breaks=breaks,plot=F) bhist=hist(b,breaks=breaks,plot=F) } if(is.null(xlim)){ xlim = c(min(ahist$breaks,bhist$breaks),max(ahist$breaks,bhist$breaks)) } if(is.null(ylim)){ ylim = c(0,max(ahist$counts,bhist$counts)) } overlap = ahist for(i in 1:length(overlap$counts)){ if(ahist$counts[i] > 0 & bhist$counts[i] > 0){ overlap$counts[i] = min(ahist$counts[i],bhist$counts[i]) } else { overlap$counts[i] = 0 } } plot(ahist, xlim=xlim, ylim=ylim, col=colors[1]) plot(bhist, xlim=xlim, ylim=ylim, col=colors[2], add=T) plot(overlap, xlim=xlim, ylim=ylim, col=colors[3], add=T) }
a=rnorm(1000, 3, 1) b=rnorm(1000, 6, 1) hist(a, xlim=c(0,10), col="red") hist(b, add=T, col=rgb(0, 1, 0, 0.5) )
set.seed(42) hist(rnorm(500,4),xlim=c(0,10),col= hist(rnorm(500,6),add=T,col=scales::alpha(
hist2 <- function(var1, var2,name1= breaks = min(max(length(var1), length(var2)),20), main0 = "", alpha0 = 0.5,grey=0,border=F,...) { library(scales) colh <- c(rgb(0, 1, 0, alpha0), rgb(1, 0, 0, alpha0)) if(grey) colh <- c(alpha(grey(0.1,alpha0)), alpha(grey(0.9,alpha0))) max0 = max(var1, var2) min0 = min(var1, var2) den1_max <- hist(var1, breaks = breaks, plot = F)$density %>% max den2_max <- hist(var2, breaks = breaks, plot = F)$density %>% max den_max <- max(den2_max, den1_max)*1.2 var1 %>% hist0(xlim = c(min0 , max0) , breaks = breaks, freq = F, col = colh[1], ylim = c(0, den_max), main = main0,border=border,...) var2 %>% hist0(xlim = c(min0 , max0), breaks = breaks, freq = F, col = colh[2], ylim = c(0, den_max), add = T,border=border,...) legend(min0,den_max, legend = c( ifelse(nchar(name1)==0,substitute(var1) %>% deparse,name1), ifelse(nchar(name2)==0,substitute(var2) %>% deparse,name2), "Overlap"), fill = c( legend(min0,den_max, legend = c( ifelse(nchar(name1)==0,substitute(var1) %>% deparse,name1), ifelse(nchar(name2)==0,substitute(var2) %>% deparse,name2), "Overlap"), fill = c(colh, colh[2]), bty = "n", cex=1,ncol=3) }
par(mar=c(3, 4, 3, 2) + 0.1) set.seed(100) hist2(rnorm(10000,2),rnorm(10000,3),breaks = 50)
carrotLengths <- rnorm(1000,15,5) cucumberLengths <- rnorm(200,20,7) histCarrot <- hist(carrotLengths,plot = FALSE) histCucumber <- hist(cucumberLengths,plot = FALSE) xlim <- range(histCucumber$breaks,histCarrot$breaks) ylim <- range(0,histCucumber$density, histCarrot$density) plot(histCarrot,xlim = xlim, ylim = ylim, col = rgb(1,0,0,0.4),xlab = freq = FALSE, main = opar <- par(new = FALSE) plot(histCucumber,xlim = xlim, ylim = ylim, xaxt = col = rgb(0,0,1,0.4), add = TRUE, freq = FALSE) legend( fill = rgb(1:0,0,0:1,0.4), bty = border = NA) par(opar)
carrots <- rnorm(100000,5,2) cukes <- rnorm(50000,7,2.5)
densCarrot <- density(carrots) densCuke <- density(cukes) xlim <- range(densCuke$x,densCarrot$x) ylim <- range(0,densCuke$y, densCarrot$y) carrotCol <- rgb(1,0,0,0.2) cukeCol <- rgb(0,0,1,0.2) plot(densCarrot, xlim = xlim, ylim = ylim, xlab = main = panel.first = grid()) polygon(densCarrot, density = -1, col = carrotCol) polygon(densCuke, density = -1, col = cukeCol) legend( fill = c(carrotCol, cukeCol), bty = border = NA)
set.seed(42) p1 <- hist(rnorm(500,4),plot=FALSE) p2 <- hist(rnorm(500,6),plot=FALSE) plot(0,0,type="n",xlim=c(0,10),ylim=c(0,100),xlab="x",ylab="freq",main="Two histograms") plot(p1,col="green",density=10,angle=135,add=TRUE) plot(p2,col="blue",density=10,angle=45,add=TRUE)
library(plotly) p <- plotly(username="Username", key="API_KEY") x0 = rnorm(500) x1 = rnorm(500)+1 data0 = list(x=x0, name = "Carrots", type= opacity = 0.8) data1 = list(x=x1, name = "Cukes", type= opacity = 0.8) layout <- list(barmode= plot_bgcolor = response = p$plotly(data0, data1, kwargs=list(layout=layout)) url = response$url filename = response$filename browseURL(response$url)
library(ggplot2) df <- data.frame(cond = factor(rep(c("A", "B"), each = 200)), rating = c(rnorm(200), rnorm(200, mean=.8))) ggplot(df, aes(x=rating, fill=cond)) + geom_density(alpha = .3) + xlab("NEW RATING TITLE") + ylab("NEW DENSITY TITLE")
p <- ggplot(df, aes(x=rating, fill=cond)) + geom_density(alpha=.3) + xlab("NEW RATING TITLE") + ylab("NEW DENSITY TITLE") p <- p + guides(fill=guide_legend(title="New Legend Title"))
df <- data.frame(x=1:10,group=c(rep("a",5),rep("b",5))) legend_title <- "OMG My Title" ggplot(df, aes(x=x, fill=group)) + geom_density(alpha=.3) + scale_fill_manual(legend_title,values=c("orange","red"))
ggplot(...) + ... + guide_legend(title="my awesome title")
ggplot(...) + ... + guides(fill=guide_legend("my awesome title"))
qplot(…) + guides(color=guide_legend(title="sale year"))
ggplot(df, aes(x=rating, fill=cond)) + geom_density(alpha = .3) + xlab("NEW RATING TITLE") + ylab("NEW DENSITY TITLE") + labs(fill = "Your Title")
R> functionReturningTwoValues <- function() { return(c(1, 2)) } R> functionReturningTwoValues() [1] 1 2 R> a, b <- functionReturningTwoValues() Error: unexpected R> c(a, b) <- functionReturningTwoValues() Error in c(a, b) <- functionReturningTwoValues() : object
R> r <- functionReturningTwoValues() R> a <- r[1]; b <- r[2]
R> functionReturningTwoValues <- function() {return(list(first=1, second=2))} R> r <- functionReturningTwoValues() R> r$first [1] 1 R> r$second [1] 2
library(gsubfn) list[a, b] <- functionReturningTwoValues()
list[a] <- functionReturningTwoValues() list[a, ] <- functionReturningTwoValues() list[, b] <- functionReturningTwoValues()
myfun <- function() list(a = 1, b = 2) list[a, b] <- myfun() a + b with(myfun(), a + b)
frame <- parent.frame() lhs <- as.list(substitute(lhs)) if (length(lhs) > 1) lhs <- lhs[-1] if (length(lhs) == 1) { do.call(`=`, list(lhs[[1]], rhs), envir=frame) return(invisible(NULL)) } if (is.function(rhs) || is(rhs, rhs <- list(rhs) if (length(lhs) > length(rhs)) rhs <- c(rhs, rep(list(NULL), length(lhs) - length(rhs))) for (i in 1:length(lhs)) do.call(`=`, list(lhs[[i]], rhs[[i]]), envir=frame) return(invisible(NULL)) }
functionReturningTwoValues <- function() { return(list(1, matrix(0, 2, 2))) } c(a, b) := functionReturningTwoValues() a b
func2<-function(input) { a<-input+1 b<-input+2 output<-list(a,b) return(output) } output<-func2(5) for (i in output) { print(i) } [1] 6 [1] 7
functionReturningTwoValues <- function() { results <- list() results$first <- 1 results$second <-2 return(results) } a <- functionReturningTwoValues()
> r <- c(1,2) > a <- r[1] > b <- r[2] > class(r) [1] "numeric" > class(a) [1] "numeric" > a [1] 1 > a[1] [1] 1
> names(r) <- c("a","b") > names(r) [1] "a" "b" > r["a"] a 1
> r <- data.frame(a=1:4, b=5:8) > r a b 1 1 5 2 2 6 3 3 7 4 4 8 > min(r$a) [1] 1 > max(r$b) [1] 8
library(zeallot) functionReturningTwoValues <- function() { return(c(1, 2)) } c(a, b) %<-% functionReturningTwoValues() a b functionReturningListOfValues <- function() { return(list(1, 2, 3)) } c(d, e, f) %<-% functionReturningListOfValues() d e f functionReturningNestedList <- function() { return(list(1, list(2, 3))) } c(f, c(g, h)) %<-% functionReturningNestedList() f g h functionReturningTooManyValues <- function() { return(as.list(1:20)) } c(i, j, ...rest) %<-% functionReturningTooManyValues() i j rest
x = desired_return_value_1 y = desired_return_value_2 returnlist = list(x,y...) }
functionReturningTwoValues <- function(a, b) { assign(a, 1, pos=1) assign(b, 2, pos=1) }
myfun <- function(x) { a <- 1:x b <- 5:x df <- data.frame(a=a, b=b) newList <- list("my_obj1" = a, "my_obj2" = b, "myDF"=df) list2env(newList ,.GlobalEnv) } myfun(3)
> my_obj1 [1] 1 2 3 > my_obj2 [1] 5 4 3 > myDF a b 1 1 5 2 2 4 3 3 3
myfun <- function(x) { df1 <- ... df2 <- ... save(df1, file = "myfile1") save(df2, file = "myfile2") } load("myfile1") load("myfile2")
library(ggplot2) df <- data.frame(x = c(1:100)) df$y <- 2 + 3 * df$x + rnorm(100, sd = 40) p <- ggplot(data = df, aes(x = x, y = y)) + geom_smooth(method = "lm", se=FALSE, color="black", formula = y ~ x) + geom_point() p
lm_eqn <- function(df){ m <- lm(y ~ x, df); eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2, list(a = format(coef(m)[1], digits = 2), b = format(coef(m)[2], digits = 2), r2 = format(summary(m)$r.squared, digits = 3))) as.character(as.expression(eq)); } p1 <- p + geom_text(x = 25, y = 300, label = lm_eqn(df), parse = TRUE)
library(devtools) source_gist("524eade46135f6348140") df = data.frame(x = c(1:100)) df$y = 2 + 5 * df$x + rnorm(100, sd = 40) df$class = rep(1:2,50) ggplot(data = df, aes(x = x, y = y, label=y)) + stat_smooth_func(geom="text",method="lm",hjust=0,parse=TRUE) + geom_smooth(method="lm",se=FALSE) + geom_point() + facet_wrap(~class)
library(ggplot2) library(ggpmisc) df <- data.frame(x = c(1:100)) df$y <- 2 + 3 * df$x + rnorm(100, sd = 40) my.formula <- y ~ x p <- ggplot(data = df, aes(x = x, y = y)) + geom_smooth(method = "lm", se=FALSE, color="black", formula = my.formula) + stat_poly_eq(formula = my.formula, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), parse = TRUE) + geom_point() p
library(ggplot2) library(ggpmisc) df <- data.frame(x = c(1:100)) df$y <- 2 + 3 * df$x + rnorm(100, sd = 40) my.formula <- y ~ x p <- ggplot(data = df, aes(x = x, y = y)) + geom_smooth(method = "lm", se=FALSE, color="black", formula = my.formula) + stat_poly_eq(formula = my.formula, eq.with.lhs = "italic(hat(y))~`=`~", aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), parse = TRUE) + geom_point() p
p <- ggplot(data = df, aes(x = x, y = y)) + geom_smooth(method = "lm", se=FALSE, color="black", formula = my.formula) + stat_poly_eq(formula = my.formula, eq.with.lhs = "italic(h)~`=`~", eq.x.rhs = "~italic(z)", aes(label = ..eq.label..), parse = TRUE) + labs(x = expression(italic(z)), y = expression(italic(h))) + geom_point() p
p <- ggplot(data = df, aes(x = x, y = y)) + geom_smooth(method = "lm", se=FALSE, color="black", formula = my.formula) + stat_poly_eq(formula = my.formula, eq.with.lhs = "italic(hat(y))~`=`~", aes(label = paste(..eq.label.., ..rr.label.., sep = "*plain(\",\")~")), parse = TRUE) + geom_point() p
lm_eqn = function(m) { l <- list(a = format(coef(m)[1], digits = 2), b = format(abs(coef(m)[2]), digits = 2), r2 = format(summary(m)$r.squared, digits = 3)); if (coef(m)[2] >= 0) { eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,l) } else { eq <- substitute(italic(y) == a - b %.% italic(x)*","~~italic(r)^2~"="~r2,l) } as.character(as.expression(eq)); }
p1 = p + geom_text(aes(x = 25, y = 300, label = lm_eqn(lm(y ~ x, df))), parse = TRUE)
lm_eqn <- function(df, y, x){ formula = as.formula(sprintf( m <- lm(formula, data=df); eq <- substitute(italic(target) == a + b %.% italic(input)*","~~italic(r)^2~"="~r2*","~~p~"="~italic(pvalue), list(target = y, input = x, a = format(as.vector(coef(m)[1]), digits = 2), b = format(as.vector(coef(m)[2]), digits = 2), r2 = format(summary(m)$r.squared, digits = 3), pvalue = format(summary(m)$coefficients[2, ) ) as.character(as.expression(eq)); } geom_point() + ggrepel::geom_text_repel(label=rownames(mtcars)) + geom_text(x=3,y=300,label=lm_eqn(mtcars, geom_smooth(method=
> locale LANG= LC_COLLATE="C" LC_CTYPE="UTF-8" LC_MESSAGES="C" LC_MONETARY="C" LC_NUMERIC="C" LC_TIME="C" LC_ALL=
> locale LANG="en_US.UTF-8" LC_COLLATE="en_US.UTF-8" LC_CTYPE="en_US.UTF-8" LC_MESSAGES="en_US.UTF-8" LC_MONETARY="en_US.UTF-8" LC_NUMERIC="en_US.UTF-8" LC_TIME="en_US.UTF-8" LC_ALL="en_US.UTF-8"
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
open(on mac): Utilities/Terminal copy and paste defaults write org.R-project.R force.LANG en_US.UTF-8
> x <- 1:5 > save(x, file="x.Rda") > saveRDS(x, file="x.Rds") > rm(x) > new_x1 <- readRDS("x.Rds") > new_x1 [1] 1 2 3 4 5 > new_x2 <- load("x.Rda") loading in to <environment: R_GlobalEnv> > new_x2 [1] "x" > x [1] 1 2 3 4 5
mov <- subset(movies, length != "") (p0 <- ggplot(mov, aes(year, rating, colour = length, shape = mpaa)) + geom_point() )
(p2 <- ggplot(mov, aes(year, rating, colour = length, shape = mpaa)) + geom_point(show_guide = FALSE) )
(p3 <- ggplot(mov, aes(year, rating, colour = length, shape = mpaa)) + scale_colour_discrete(show_guide = FALSE) + geom_point() ) (p4 <- ggplot(mov, aes(year, rating, shape = mpaa)) + aes(colour = length, show_guide = FALSE) + geom_point() )
(p3 <- ggplot(mov, aes(year, rating, colour = length, shape = mpaa)) + scale_colour_continuous(guide = FALSE) + geom_point() )
p0 <- ggplot(mov, aes(year, rating, colour = length, shape = mpaa)) + geom_point() p0+guides(colour=FALSE)
library(ggplot2movies) data(movies) mov <- subset(movies, length != "")
ggplot(survey,aes(x=age))+stat_bin(aes(n=nrow(h3),y=..count../n), binwidth=10) +scale_y_continuous(formatter = "percent", breaks=c(0, 0.1, 0.2)) + facet_grid(hospital ~ .) + opts(panel.background = theme_blank())
> i <- iris > levels(i$Species) [1] "setosa" "versicolor" "virginica" > levels(i$Species) <- c("S", "Ve", "Vi") > ggplot(i, aes(Petal.Length)) + stat_bin() + facet_grid(Species ~ .)
hospital_labeller <- function(variable,value){ return(hospital_names[value]) } ggplot(survey,aes(x=age)) + stat_bin(aes(n=nrow(h3),y=..count../n), binwidth=10) + facet_grid(hospital ~ ., labeller=hospital_labeller) ...
plot_labeller <- function(variable,value){ if (variable== return(facet1_names[value]) } else { return(facet2_names[value]) } }
plot_labeller <- function(variable,value){ if (variable== return(facet1_names[value]) } else if (variable== return(facet2_names[value]) } else { return(as.character(value)) } }
hospital_names <- c( `Hospital `Hospital `Hospital `Hospital )
... + facet_grid(hospital ~ ., labeller = as_labeller(hospital_names))
facet_grid( yfacet~xfacet, labeller = labeller( yfacet = c(`0` = "an y label", `1` = "another y label"), xfacet = c(`10` = "an x label", `20` = "another x label") ) )
facet_grid( hospital ~ room, labeller = labeller(hospital = as_labeller(hospital_names)))
facet_grid( hospital ~ room, labeller = labeller(hospital = as_labeller(hospital_names), room = as_labeller(room_names)))
library(ggplot2) labeli <- function(variable, value){ names_li <- list("versicolor"="versi", "virginica"="virg") return(names_li[value]) } dat <- subset(iris,Species!="setosa") ggplot(dat, aes(Petal.Length)) + stat_bin() + facet_grid(Species ~ ., labeller=labeli)
labeli2 <- function(variable, value){ value <- droplevels(value) names_li <- list("versicolor"="versi", "virginica"="virg") return(names_li[value]) } dat <- subset(iris,Species!="setosa") ggplot(dat, aes(Petal.Length)) + stat_bin() + facet_grid(Species ~ ., labeller=labeli2)
library(ggplot2) xy <- data.frame(hospital = rep(paste("Hospital value = rnorm(90)) shortener <- function(string) { abb <- substr(string, start = 1, stop = 4) num <- gsub("^.*(\\d{1})$", "\\1", string) out <- paste(abb, num) out } ggplot(xy, aes(x = value)) + theme_bw() + geom_histogram() + facet_grid(hospital ~ ., labeller = labeller(hospital = shortener))
facet_wrap(~ifelse(variable, "Label if true", "Label if false"))
libary(latex2exp) library(ggplot2) arr <- list( mylabel <- function(val) { return(lapply(val, function(x) arr[x])) } ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_line() + facet_wrap(~Species, labeller=mylabel)
plot_labeller <- function(variable,value, facetVar1= { if (variable==facetVar1) { value <- as.character(value) return(var1NamesMapping[value]) } else if (variable==facetVar2) { value <- as.character(value) return(var2NamesMapping[value]) } else { return(as.character(value)) } }
plot_labeller <- function(variable,value, facetVar1=
ggplot() + facet_grid(clusteringDistance ~ . , labeller=plot_labeller)
ggplot(transform(survey, survey = factor(survey, labels = c("Hosp 1", "Hosp 2", "Hosp 3", "Hosp 4"))), aes(x = age)) + stat_bin(aes(n = nrow(h3),y=..count../n), binwidth = 10) + scale_y_continuous(formatter = "percent", breaks = c(0, 0.1, 0.2)) + facet_grid(hospital ~ .) + opts(panel.background = theme_blank())
i <- iris levels(i$Species) [1] "setosa" "versicolor" "virginica" new_names <- c( rep("Bristle-pointed iris", 50), rep("Poison flag iris",50), rep("Virginia iris", 50)) i %>% mutate(Species=new_names) %>% ggplot(aes(Petal.Length))+ stat_bin()+ facet_grid(Species ~ .)
levels(survey$hospital)[levels(survey$hospital) == "Hospital levels(survey$hospital)[levels(survey$hospital) == "Hospital levels(survey$hospital)[levels(survey$hospital) == "Hospital
df = data.frame(date=c("2012-02-01", "2012-02-01", "2012-02-02"))
date day 2012-02-01 Wednesday 2012-02-01 Wednesday 2012-02-02 Thursday
df = data.frame(date=c("2012-02-01", "2012-02-01", "2012-02-02")) df$day <- weekdays(as.Date(df$date)) df
c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")[as.POSIXlt(df$date)$wday + 1]
library(lubridate) df$date <- as.Date(df$date) wday(df$date, label=TRUE) [1] Wed Wed Thurs Levels: Sun < Mon < Tues < Wed < Thurs < Fri < Sat
require(lubridate) df$day = ifelse(wday(df$time)==1,6,wday(df$time)-2)
df$day = ifelse(wday(df$time)==1,7,wday(df$time)-1)
df = data.frame(date=c("2012-02-01", "2012-02-01", "2012-02-02")) dow <- function(x) format(as.Date(x), "%A") df$day <- dow(df$date) df date day 1 2012-02-01 Wednesday 2 2012-02-01 Wednesday 3 2012-02-02 Thursday
start = as.POSIXct("2017-09-01") end = as.POSIXct("2017-09-06") dat = data.frame(Date = seq.POSIXt(from = start, to = end, by = "DSTday")) dat$weekday1 = as.numeric(format(dat$Date, format = "%u")) dat$weekday2 = format(dat$Date, format = "%a") dat$weekday3 = format(dat$Date, format = "%A") dat Date weekday1 weekday2 weekday3 1 2017-09-01 5 Fri Friday 2 2017-09-02 6 Sat Saturday 3 2017-09-03 7 Sun Sunday 4 2017-09-04 1 Mon Monday 5 2017-09-05 2 Tue Tuesday 6 2017-09-06 3 Wed Wednesday
% \documentclass[compress]{beamer} \usepackage{Sweave} \usetheme{PaloAlto} \begin{document} \title{test report} \author{john doe} \date{September 3, 2009} \maketitle \begin{frame}[fragile]\frametitle{Page 1: chart} <<echo=FALSE,fig=TRUE,height=4, width=7>>= library(quantmod) getSymbols("PFE", from="2009-06-01") chartSeries(PFE) @ \end{frame} \begin{frame}[fragile]\frametitle{Page 2: table} <<echo=FALSE,results=tex>>= library(xtable) xtable(PFE[1:10,1:4], caption = "PFE") @ \end{frame} \end{document}
library(tools) library(brew) brew("population.brew", "population.tex") texi2dvi("population.tex", pdf = TRUE)
x <- 1:10 n <- 3 chunk <- function(x,n) split(x, factor(sort(rank(x)%%n))) chunk(x,n) $`0` [1] 1 2 3 $`1` [1] 4 5 6 7 $`2` [1] 8 9 10
> d <- rpois(73,5) > d [1] 3 1 11 4 1 2 3 2 4 10 10 2 7 4 6 6 2 1 1 2 3 8 3 10 7 4 [27] 3 4 4 1 1 7 2 4 6 0 5 7 4 6 8 4 7 12 4 6 8 4 2 7 6 5 [53] 4 5 4 5 5 8 7 7 7 6 2 4 3 3 8 11 6 6 1 8 4 > max <- 20 > x <- seq_along(d) > d1 <- split(d, ceiling(x/max)) > d1 $`1` [1] 3 1 11 4 1 2 3 2 4 10 10 2 7 4 6 6 2 1 1 2 $`2` [1] 3 8 3 10 7 4 3 4 4 1 1 7 2 4 6 0 5 7 4 6 $`3` [1] 8 4 7 12 4 6 8 4 2 7 6 5 4 5 4 5 5 8 7 7 $`4` [1] 7 6 2 4 3 3 8 11 6 6 1 8 4
chunk2 <- function(x,n) split(x, cut(seq_along(x), n, labels = FALSE))
chunk.2 <- function(x, n, force.number.of.groups = TRUE, len = length(x), groups = trunc(len/n), overflow = len%%n) { if(force.number.of.groups) { f1 <- as.character(sort(rep(1:n, groups))) f <- as.character(c(f1, rep(n, overflow))) } else { f1 <- as.character(sort(rep(1:groups, n))) f <- as.character(c(f1, rep("overflow", overflow))) } g <- split(x, f) if(force.number.of.groups) { g.names <- names(g) g.names.ordered <- as.character(sort(as.numeric(g.names))) } else { g.names <- names(g[-length(g)]) g.names.ordered <- as.character(sort(as.numeric(g.names))) g.names.ordered <- c(g.names.ordered, "overflow") } return(g[g.names.ordered]) }
> x <- 1:10; n <- 3 > chunk.2(x, n, force.number.of.groups = FALSE) $`1` [1] 1 2 3 $`2` [1] 4 5 6 $`3` [1] 7 8 9 $overflow [1] 10 > chunk.2(x, n, force.number.of.groups = TRUE) $`1` [1] 1 2 3 $`2` [1] 4 5 6 $`3` [1] 7 8 9 10
> system.time(chunk(x, n)) user system elapsed 29.500 0.620 30.125 > system.time(chunk.2(x, n, force.number.of.groups = TRUE)) user system elapsed 5.360 0.300 5.663
library(ggplot2) x <- 1:10 n <- 3 cut_number(x, n) split(x, cut_number(x, n))
> chunk <- function(x, n) split(x, sort(rank(x) %% n)) > chunk(x,n) $`0` [1] 1 2 3 $`1` [1] 4 5 6 7 $`2` [1] 8 9 10
> my.chunk <- function(x, n) split(x, sort(rep(letters[1:n], each=n, len=length(x)))) > my.chunk(x, n) $a [1] 1 2 3 4 $b [1] 5 6 7 $c [1] 8 9 10
> my.other.chunk <- function(x, n) split(x, sort(rep(c("tom", "dick", "harry"), each=n, len=length(x)))) > my.other.chunk(x, n) $dick [1] 1 2 3 $harry [1] 4 5 6 $tom [1] 7 8 9 10
split(x,cut(x,quantile(x,(0:n)/n), include.lowest=TRUE, labels=FALSE))
chunk <- function(x,n) { f <- sort(rep(1:(trunc(length(x)/n)+1),n))[1:length(x)] return(split(x,f)) } n<-c(1,2,3,4,5,6,7,8,9,10,11) c<-chunk(n,5) q<-lapply(c, function(r) cat(r,sep=",",collapse="|") ) 1,2,3,4,5,|6,7,8,9,10,|11,|
chunk <- function(x,n){ numOfVectors <- floor(length(x)/n) elementsPerVector <- c(rep(n,numOfVectors-1),n+length(x) %% n) elemDistPerVector <- rep(1:numOfVectors,elementsPerVector) split(x,factor(elemDistPerVector)) } set.seed(1) x <- rnorm(10) n <- 3 chunk(x,n) $`1` [1] -0.6264538 0.1836433 -0.8356286 $`2` [1] 1.5952808 0.3295078 -0.8204684 $`3` [1] 0.4874291 0.7383247 0.5757814 -0.3053884
vsplit <- function(v, n) { l = length(v) r = l/n return(lapply(1:n, function(i) { s = max(1, round(r*(i-1))+1) e = min(l, round(r*i)) return(v[s:e]) })) }
chunk <- function(x, n) (mapply(function(a, b) (x[a:b]), seq.int(from=1, to=length(x), by=n), pmin(seq.int(from=1, to=length(x), by=n)+(n-1), length(x)), SIMPLIFY=FALSE))
chunk <- function(x,y){ split(x, factor(sort(rank(row.names(x))%%y))) }
chunk <- function(x, n) { if((length(x)%%n)==0) {return(matrix(x, nrow=n))} else {return(matrix(append(x, rep(NA, n-(length(x)%%n))), nrow=n))} }
library(data.table) split_dt <- function(x,y) { for(i in seq(from=1,to=nrow(get(x)),by=y)) {df_ <<- get(x)[i:(i + y)]; assign(paste0("df_",i),df_,inherits=TRUE)} rm(df_,inherits=TRUE) }
> testVector <- c(1:10) > VectorList <- split(testVector, 1:5) > VectorList $`1` [1] 1 6 $`2` [1] 2 7 $`3` [1] 3 8 $`4` [1] 4 9 $`5` [1] 5 10
[[1]] [1] 1 2 3 4 5 6 7 [[2]] [1] 8 9 10 11 12 13 [[3]] [1] 14 15 16 17 18 19 20
require(magrittr) create.chunks <- function(x, elements.per.chunk){ x %>% seq_along %>% rep(., each = elements.per.chunk) %>% extract(seq_along(x)) %>% split(x, .) } create.chunks(letters[1:10], 3) $`1` [1] "a" "b" "c" $`2` [1] "d" "e" "f" $`3` [1] "g" "h" "i" $`4` [1] "j"
dayloop2 <- function(temp){ for (i in 1:nrow(temp)){ temp[i,10] <- i if (i > 1) { if ((temp[i,6] == temp[i-1,6]) & (temp[i,3] == temp[i-1,3])) { temp[i,10] <- temp[i,9] + temp[i-1,10] } else { temp[i,10] <- temp[i,9] } } else { temp[i,10] <- temp[i,9] } } names(temp)[names(temp) == "V10"] <- "Kumm." return(temp) }
dayloop2_A <- function(temp){ res <- numeric(nrow(temp)) for (i in 1:nrow(temp)){ res[i] <- i if (i > 1) { if ((temp[i,6] == temp[i-1,6]) & (temp[i,3] == temp[i-1,3])) { res[i] <- temp[i,9] + res[i-1] } else { res[i] <- temp[i,9] } } else { res[i] <- temp[i,9] } } temp$`Kumm.` <- res return(temp) }
X <- as.data.frame(matrix(sample(1:10, n*9, TRUE), n, 9)) system.time(dayloop2(X))
dayloop2_B <- function(temp){ cond <- c(FALSE, (temp[-nrow(temp),6] == temp[-1,6]) & (temp[-nrow(temp),3] == temp[-1,3])) res <- temp[,9] for (i in 1:nrow(temp)) { if (cond[i]) res[i] <- temp[i,9] + res[i-1] } temp$`Kumm.` <- res return(temp) }
dayloop2_D <- function(temp){ cond <- c(FALSE, (temp[-nrow(temp),6] == temp[-1,6]) & (temp[-nrow(temp),3] == temp[-1,3])) res <- temp[,9] for (i in (1:nrow(temp))[cond]) { res[i] <- res[i] + res[i-1] } temp$`Kumm.` <- res return(temp) }
while (any(cond)) { indx <- c(FALSE, cond[-1] & !cond[-n]) res[indx] <- res[indx] + res[which(indx)-1] cond[indx] <- FALSE }
system.time({ a <- NULL for(i in 1:1e5)a[i] <- i }) user system elapsed 28.36 0.07 28.61
system.time({ a <- rep(1, 1e5) for(i in 1:1e5)a[i] <- i }) user system elapsed 0.30 0.00 0.29
idx <- 1:nrow(temp) temp[,10] <- idx idx1 <- c(FALSE, (temp[-nrow(temp),6] == temp[-1,6]) & (temp[-nrow(temp),3] == temp[-1,3])) temp[idx1,10] <- temp[idx1,9] + temp[which(idx1)-1,10] temp[!idx1,10] <- temp[!idx1,9] temp[1,10] <- temp[1,9] names(temp)[names(temp) == "V10"] <- "Kumm."
body <- int nrtemp = Rccp::as<int>(nrt); for (int i = 0; i < nrtemp; ++i) { temp(i, 9) = i if (i > 1) { if ((temp(i, 5) == temp(i - 1, 5) && temp(i, 2) == temp(i - 1, 2) { temp(i, 9) = temp(i, 8) + temp(i - 1, 9) } else { temp(i, 9) = temp(i, 8) } } else { temp(i, 9) = temp(i, 8) } return Rcpp::wrap(nm); ' settings <- getPlugin("Rcpp") dayloop <- cxxfunction(signature(nrt="numeric", temp="numeric"), body-body, plugin="Rcpp", settings=settings, cppargs="-I/usr/include") dayloop2 <- function(temp) { nc <- ncol(temp) nm <- dayloop(nc, temp) names(temp)[names(temp) == "V10"] <- "Kumm." return(temp) }
nrow=function(x){ if(class(x)== length(x[[names(x)[1]]]) }else{ base::nrow(x) } } system.time({ d=data.frame(seq=1:10000,r=rnorm(10000)) d$foo=d$r d$seq=1:5 mark=NA for(i in 1:nrow(d)){ if(d$seq[i]==1) mark=d$r[i] d$foo[i]=mark } }) system.time({ d=data.frame(seq=1:10000,r=rnorm(10000)) d$foo=d$r d$seq=1:5 d=as.list(d) mark=NA for(i in 1:nrow(d)){ if(d$seq[i]==1) mark=d$r[i] d$foo[i]=mark } d=as.data.frame(d) })
system.time({ d=data.frame(seq=1:10000,r=rnorm(10000)) d$foo=d$r d$seq=1:5 class(d)= mark=NA for(i in 1:nrow(d)){ if(d$seq[i]==1) mark=d$r[i] d$foo[i]=mark } class(d)= }) head(d)
dayloop2 <- function(temp){ for (i in 1:nrow(temp)){ cat(round(i/nrow(temp)*100,2),"% \r") } return(blah) }
dayloop2 <- function(temp){ temp <- lapply(1:nrow(temp), function(i) { cat(round(i/nrow(temp)*100,2),"% \r") }) return(temp) }
dayloop2 <- function(temp){ for (i in 1:nrow(temp)){ if(i %% 100 == 0) cat(round(i/nrow(temp)*100,2),"% \r") } return(temp) }
temp[1:nrow(temp), 10] <- temp[1:nrow(temp), 9] + temp[0:(nrow(temp)-1), 10]
cond.i <- (temp[i, 6] == temp[i-1, 6]) & (temp[i, 3] == temp[i-1, 3]) temp[cond.i, 10] <- temp[cond.i, 9]
n <- 1000000 df <- as.data.frame(matrix(sample(1:10, n*9, TRUE), n, 9)) colnames(df) <- paste("col", 1:9, sep = "") library(data.table) dayloop2.dt <- function(df) { dt <- data.table(df) dt[, Kumm. := { res <- .I; ifelse (res > 1, ifelse ((col6 == shift(col6, fill = 0)) & (col3 == shift(col3, fill = 0)) , res <- col9 + shift(res) , res <- col9 ) , res <- col9 ) } ,] res <- data.frame(dt) return (res) } res <- dayloop2.dt(df) m <- microbenchmark(dayloop2.dt(df), times = 100)
before = data.frame(attr = c(1,30,4,6), type=c( attr type 1 1 foo_and_bar 2 30 foo_and_bar_2 3 4 foo_and_bar 4 6 foo_and_bar_2
attr type_1 type_2 1 1 foo bar 2 30 foo bar_2 3 4 foo bar 4 6 foo bar_2
> strsplit(as.character(before$type), [[1]] [1] "foo" "bar" [[2]] [1] "foo" "bar_2" [[3]] [1] "foo" "bar" [[4]] [1] "foo" "bar_2"
library(stringr) str_split_fixed(before$type, "_and_", 2)
library(dplyr) library(tidyr) before <- data.frame( attr = c(1, 30 ,4 ,6 ), type = c( ) before %>% separate(type, c("foo", "bar"), "_and_")
library(data.table) setDT(before)[, paste0("type", 1:2) := tstrsplit(type, "_and_")] before
setDT(before)[, paste0("type", 1:2) := tstrsplit(type, "_and_", type.convert = TRUE, fixed = TRUE)]
before <- data.frame(attr = c(1,30,4,6), type=c( out <- strsplit(as.character(before$type), do.call(rbind, out) [,1] [,2] [1,] "foo" "bar" [2,] "foo" "bar_2" [3,] "foo" "bar" [4,] "foo" "bar_2"
before$type_1 <- sapply(strsplit(as.character(before$type), before$type_2 <- sapply(strsplit(as.character(before$type), before$type <- NULL
before$type_1 <- gsub("_and_.+$", "", before$type) before$type_2 <- gsub("^.+_and_", "", before$type) before$type <- NULL
library(splitstackshape) cSplit(before, "type", "_and_")
before <- data.frame(attr = c(1,30,4,6), type=c( out <- strsplit(as.character(before$type),
> data.frame(t(sapply(out, `[`))) X1 X2 1 foo bar 2 foo bar_2 3 foo bar 4 foo bar_2
after <- with(before, data.frame(attr = attr)) after <- cbind(after, data.frame(t(sapply(out, `[`)))) names(after)[2:3] <- paste("type", 1:2, sep = "_")
> after attr type_1 type_2 1 1 foo bar 2 30 foo bar_2 3 4 foo bar 4 6 foo bar_2
out <- setNames(data.frame(before$attr, do.call(rbind, strsplit(as.character(before$type), split="_and_"))), c("attr", paste0("type_", 1:2))) out attr type_1 type_2 1 1 foo bar 2 30 foo bar_2 3 4 foo bar 4 6 foo bar_2
before = data.frame(attr = c(1,30,4,6), type=c( attr type 1 1 foo_and_bar 2 30 foo_and_bar_2 3 4 foo_and_bar_2_and_bar_3 4 6 foo_and_bar
split_into_multiple <- function(column, pattern = ", ", into_prefix){ cols <- str_split_fixed(column, pattern, n = Inf) cols[which(cols == "")] <- NA cols <- as.tibble(cols) m <- dim(cols)[2] names(cols) <- paste(into_prefix, 1:m, sep = "_") return(cols) }
after <- before %>% bind_cols(split_into_multiple(.$type, "_and_", "type")) %>% select(attr, starts_with("type_")) >after attr type_1 type_2 type_3 1 1 foo bar <NA> 2 30 foo bar_2 <NA> 3 4 foo bar_2 bar_3 4 6 foo bar <NA>
after %>% gather(key, val, -attr, na.rm = T) attr key val 1 1 type_1 foo 2 30 type_1 foo 3 4 type_1 foo 4 6 type_1 foo 5 1 type_2 bar 6 30 type_2 bar_2 7 4 type_2 bar_2 8 6 type_2 bar 11 4 type_3 bar_3
tmp <- matrix(unlist(strsplit(as.character(before$type), byrow=TRUE) after <- cbind(before$attr, as.data.frame(tmp)) names(after) <- c("attr", "type_1", "type_2")
out <- strcapture( "(.*)_and_(.*)", as.character(before$type), data.frame(type_1 = character(), type_2 = character()) ) cbind(before["attr"], out)
library(reshape2) before = data.frame(attr = c(1,30,4,6), type=c( newColNames <- c("type1", "type2") newCols <- colsplit(before$type, "_and_", newColNames) after <- cbind(before, newCols) after$type <- NULL after
n <- 1 for(i in strsplit(as.character(before$type), before[n, before[n, n <- n + 1 }
tp <- c("a-c","d-e-f","g-h-i","m-n") temp = strsplit(as.character(tp), x=c(); y=c(); z=c(); for(i in 1:length(temp) ) { l = length(temp[[i]]); if(l==2) { x=c(x,temp[[i]][1]); y=c(y,"NA") z=c(z,temp[[i]][2]); df= as.data.frame(cbind(x,y,z)) }else { x=c(x,temp[[i]][1]); y=c(y,temp[[i]][2]); z=c(z,temp[[i]][3]); df= as.data.frame(cbind(x,y,z)) } }
function (x, table) match(x, table, nomatch = 0L) > 0L
`%not in%` <- function (x, table) is.na(match(x, table, nomatch=NA_integer_))
function (x, table) match(x, table, nomatch = 0L) == 0L
D1 = c("A",..., "Z") ; D0 = c("B","N","T") D2 = setdiff(D1, D0)
R> ran2 <- c(1.810032e+09, 4) R> options("scipen"=-100, "digits"=4) R> ran2 [1] 1.81e+09 4.00e+00 R> options("scipen"=100, "digits"=4) R> ran2 [1] 1810032000 4
stock <- "MSFT" start.date <- "2006-01-12" end.date <- Sys.Date() quote <- paste("http: stock, "&a=", substr(start.date,6,7), "&b=", substr(start.date, 9, 10), "&c=", substr(start.date, 1,4), "&d=", substr(end.date,6,7), "&e=", substr(end.date, 9, 10), "&f=", substr(end.date, 1,4), "&g=d&ignore=.csv", sep="") stock.data <- read.csv(quote, as.is=TRUE) stock.data <- transform(stock.data, week = as.POSIXlt(Date)$yday %/% 7 + 1, wday = as.POSIXlt(Date)$wday, year = as.POSIXlt(Date)$year + 1900) library(ggplot2) ggplot(stock.data, aes(week, wday, fill = Adj.Close)) + geom_tile(colour = "white") + scale_fill_gradientn(colours = c(" facet_wrap(~ year, ncol = 1)
data = c(35, 78, 34, 25, 21, 17, 22, 19, 25, 18, 25, 21, 16, 20, 26, 19, 24, 18, 23, 25, 24, 25, 71, 27) three_palettes = c(brewer.pal(12, "Set3"), brewer.pal(8, "Accent"), brewer.pal(9, "Set1")) rose.diag(data, bins=24, main="Daily Site Traffic by Hour", col=three_palettes)
library(mlbench) n <- 1e5 p <- mlbench.smiley(n,sd1 = 0.4, sd2 = 0.4) x <- p$x[,1]; y <- p$x[,2] par(mfrow = c(1,2)) plot(x,y) smoothScatter(x,y)
library(lattice) library(taRifx) compareplot(~weight | Diet * Time * Chick, data.frame=cw , main = "Chick Weights", box.show.mean=FALSE, box.show.whiskers=FALSE, box.show.box=FALSE )
boxplot(count ~ spray, data = InsectSprays, col = "lightgray")
ggplot(mpg, aes(displ, hwy)) + geom_point() + scale_y_continuous( "mpg (US)", sec.axis = sec_axis(~ . * 1.20, name = "mpg (UK)") )
df <- data.frame(item=LETTERS[1:n], y1=c(-0.8684, 4.2242, -0.3181, 0.5797, -0.4875), y2=c(-5.719, 205.184, 4.781, 41.952, 9.911 )) > df item y1 y2 1 A -0.8684 -19.154567 2 B 4.2242 219.092499 3 C -0.3181 18.849686 4 D 0.5797 46.945161 5 E -0.4875 -4.721973
ggplot(data=df, aes(label=item)) + theme_bw() + geom_segment(aes(x= geom_text(aes(x= geom_text(aes(x= theme(legend.position=
CalcFudgeAxis = function( y1, y2=y1) { Cast2To1 = function(x) ((ylim1[2]-ylim1[1])/(ylim2[2]-ylim2[1])*x) ylim1 <- c(min(y1),max(y1)) ylim2 <- c(min(y2),max(y2)) yf <- Cast2To1(y2) labelsyf <- pretty(y2) return(list( yf=yf, labels=labelsyf, breaks=Cast2To1(labelsyf) )) }
> FudgeAxis <- CalcFudgeAxis( df$y1, df$y2 ) > FudgeAxis $yf [1] -0.4094344 4.6831656 0.4029175 1.0034664 -0.1009335 $labels [1] -50 0 50 100 150 200 250 $breaks [1] -1.068764 0.000000 1.068764 2.137529 3.206293 4.275058 5.343822 > cbind(df, FudgeAxis$yf) item y1 y2 FudgeAxis$yf 1 A -0.8684 -19.154567 -0.4094344 2 B 4.2242 219.092499 4.6831656 3 C -0.3181 18.849686 0.4029175 4 D 0.5797 46.945161 1.0034664 5 E -0.4875 -4.721973 -0.1009335
library(gtable) library(grid) PlotWithFudgeAxis = function( plot1, FudgeAxis) { plot2 <- plot1 + with(FudgeAxis, scale_y_continuous( breaks=breaks, labels=labels)) g1<-ggplot_gtable(ggplot_build(plot1)) g2<-ggplot_gtable(ggplot_build(plot2)) pp<-c(subset(g1$layout, name=="panel", se=t:r)) g<-gtable_add_grob(g1, g2$grobs[[which(g2$layout$name=="panel")]], pp$t, pp$l, pp$b,pp$l) ia <- which(g2$layout$name == "axis-l") ga <- g2$grobs[[ia]] ax <- ga$children[[2]] ax$widths <- rev(ax$widths) ax$grobs <- rev(ax$grobs) ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm") g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1) g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b) grid.draw(g) }
FudgeAxis <- CalcFudgeAxis( df$y1, df$y2 ) tmpPlot <- ggplot(data=df, aes(label=item)) + theme_bw() + geom_segment(aes(x= geom_text(aes(x= geom_text(aes(x= theme(legend.position= PlotWithFudgeAxis(tmpPlot, FudgeAxis)
png(...) PlotWithFudgeAxis(tmpPlot, FudgeAxis) dev.off()
when numinter prod 1 2018-03-20 1 0.95 2 2018-03-21 5 0.50 3 2018-03-23 4 0.70 4 2018-03-24 3 0.75 5 2018-03-25 4 0.60
ggplot() + geom_bar(mapping = aes(x = dt$when, y = dt$numinter), stat = "identity", fill = "grey") + geom_line(mapping = aes(x = dt$when, y = dt$prod*5), size = 2, color = "blue") + scale_x_date(name = "Day", labels = NULL) + scale_y_continuous(name = "Interruptions/day", sec.axis = sec_axis(~./5, name = "Productivity % of best", labels = function(b) { paste0(round(b * 100, 0), "%")})) + theme( axis.title.y = element_text(color = "grey"), axis.title.y.right = element_text(color = "blue"))
p1 <- ggplot() + aes(mns)+ geom_histogram(aes(y=..density..), binwidth=0.01, colour="black", fill="white") + geom_vline(aes(xintercept=mean(mns, na.rm=T)), color="red", linetype="dashed", size=1) + geom_density(alpha=.2) p2 <- ggplot() + aes(mns)+ geom_histogram( binwidth=0.01, colour="black", fill="white") + geom_vline(aes(xintercept=mean(mns, na.rm=T)), color="red", linetype="dashed", size=1) multiplot(p1,p2,cols=2)
> dput(combined_80_8192 %>% filter (time > 270, time < 280)) structure(list(run = c(268L, 268L, 268L, 268L, 268L, 268L, 268L, 268L, 268L, 268L, 263L, 263L, 263L, 263L, 263L, 263L, 263L, 263L, 263L, 263L, 269L, 269L, 269L, 269L, 269L, 269L, 269L, 269L, 269L, 269L, 261L, 261L, 261L, 261L, 261L, 261L, 261L, 261L, 261L, 261L, 267L, 267L, 267L, 267L, 267L, 267L, 267L, 267L, 267L, 267L, 265L, 265L, 265L, 265L, 265L, 265L, 265L, 265L, 265L, 265L, 266L, 266L, 266L, 266L, 266L, 266L, 266L, 266L, 266L, 266L, 262L, 262L, 262L, 262L, 262L, 262L, 262L, 262L, 262L, 262L, 264L, 264L, 264L, 264L, 264L, 264L, 264L, 264L, 264L, 264L, 260L, 260L, 260L, 260L, 260L, 260L, 260L, 260L, 260L, 260L), repetition = c(8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L ), module = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = "scenario.node[0].nicVLCTail.phyVLC", class = "factor"), configname = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = "Road-Vlc", class = "factor"), packetByteLength = cnumVehicles = c(2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L ), dDistance = c(80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L, 80L), time = c(270.166006903445, 271.173853699836, 272.175873251122, 273.177524313334, 274.182946177105, 275.188959464989, 276.189675339937, 277.198250244799, 278.204619457189, 279.212562800009, 270.164199199177, 271.168527215152, 272.173072994958, 273.179210429715, 274.184351047337, 275.18980754378, 276.194816792995, 277.198598277809, 278.202398083519, 279.210634593917, 270.210674322891, 271.212395107473, 272.218871923292, 273.219060500457, 274.220486359614, 275.22401452372, 276.229646658839, 277.231060448138, 278.240407241942, 279.2437126347, 270.283554249858, 271.293168593832, 272.298574288769, 273.304413221348, 274.306272082517, 275.309023049011, 276.317805897347, 277.324403550028, 278.332855848701, 279.334046374594, 270.118608539613, 271.127947700074, 272.133887145863, 273.135726000491, 274.135994529981, 275.136563912708, 276.140120735361, 277.144298344151, 278.146885137621, 279.147552358659, 270.206015567272, 271.214618077209, 272.216566814903, 273.225435592582, 274.234014573683, 275.242949179958, 276.248417809711, 277.248800670023, 278.249750333404, 279.252926560188, 270.217182684494, 271.218357511397, 272.224698488895, 273.231112784327, 274.238740508457, 275.242715184122, 276.249053562718, 277.250325509798, 278.258488063493, 279.261141590137, 270.282904173953, 271.284689544638, 272.294220723234, 273.299749415592, 274.30628880553, 275.312075103126, 276.31579134717, 277.321905523606, 278.326305136748, 279.333056502253, 270.258991527456, 271.260224091407, 272.270076810133, 273.27052037648, 274.274119348094, 275.280808254502, 276.286353887245, 277.287064312339, 278.294444793276, 279.296772014594, 270.333066283904, 271.33877455992, 272.345842319903, 273.350858180493, 274.353972278505, 275.360454510107, 276.365088896161, 277.369166956941, 278.372571708911, 279.38017503079), distanceToTx = c(80.255266401689, 80.156059067023, 79.98823695539, 79.826647129071, 79.76678667135, 79.788239825292, 79.734539327997, 79.74766421514, 79.801243848241, 79.765920888341, 80.255266401689, 80.15850240049, 79.98823695539, 79.826647129071, 79.76678667135, 79.788239825292, 79.735078924078, 79.74766421514, 79.801243848241, 79.764622734914, 80.251248121732, 80.146436869316, 79.984682320466, 79.82292012342, 79.761908518748, 79.796988776281, 79.736920997657, 79.745038376718, 79.802638836686, 79.770029970452, 80.243475525691, 80.127918207499, 79.978303140866, 79.816259117883, 79.749322030693, 79.809916018889, 79.744456560867, 79.738655068783, 79.788697533211, 79.784288359619, 80.260412958482, 80.168426829066, 79.992034911214, 79.830845773284, 79.7756751763, 79.778156038931, 79.732399593756, 79.752769548846, 79.799967731078, 79.757585110481, 80.251248121732, 80.146436869316, 79.984682320466, 79.822062073459, 79.75884601899, 79.801590491435, 79.738335109094, 79.74347007248, 79.803215965043, 79.771471198955, 80.250257298678, 80.146436869316, 79.983831684476, 79.822062073459, 79.75884601899, 79.801590491435, 79.738335109094, 79.74347007248, 79.803849157574, 79.771471198955, 80.243475525691, 80.130180105198, 79.978303140866, 79.816881283718, 79.749322030693, 79.80984572883, 79.744456560867, 79.738655068783, 79.790548644175, 79.784288359619, 80.246349000313, 80.137056554491, 79.980581246037, 79.818924707937, 79.753176142361, 79.808777040341, 79.741609845588, 79.740770913572, 79.796316397253, 79.777593733292, 80.238796415443, 80.119021911134, 79.974810568944, 79.814065350562, 79.743657315504, 79.810146783217, 79.749945098869, 79.737122584544, 79.781650522348, 79.791554933936), headerNoError = c(0.99999999989702, 0.9999999999981, 0.99999999999946, 0.9999999928026, 0.99999873265475, 0.77080141574964, 0.99007491438593, 0.99994396605059, 0.45588747062284, 0.93484381262491, 0.99999999989702, 0.99999999999816, 0.99999999999946, 0.9999999928026, 0.99999873265475, 0.77080141574964, 0.99008458785106, 0.99994396605059, 0.45588747062284, 0.93480223051707, 0.99999999989735, 0.99999999999789, 0.99999999999946, 0.99999999287551, 0.99999876302649, 0.46903147501117, 0.98835168988253, 0.99994427085086, 0.45235035271542, 0.93496741877335, 0.99999999989803, 0.99999999999781, 0.99999999999948, 0.99999999318224, 0.99994254156311, 0.46891362282273, 0.93382613917348, 0.99994594904099, 0.93002915596843, 0.93569767251247, 0.99999999989658, 0.99999999998074, 0.99999999999946, 0.99999999272802, 0.99999871586781, 0.76935240919896, 0.99002587758346, 0.99999881589732, 0.46179415706093, 0.93417422376389, 0.99999999989735, 0.99999999999789, 0.99999999999946, 0.99999999289347, 0.99999876940486, 0.46930769326427, 0.98837353639905, 0.99994447154714, 0.16313586712094, 0.93500824170148, 0.99999999989744, 0.99999999999789, 0.99999999999946, 0.99999999289347, 0.99999876940486, 0.46930769326427, 0.98837353639905, 0.99994447154714, 0.16330039178981, 0.93500824170148, 0.99999999989803, 0.99999999999781, 0.99999999999948, 0.99999999316541, 0.99994254156311, 0.46794586553266, 0.93382613917348, 0.99994594904099, 0.9303627789484, 0.93569767251247, 0.99999999989778, 0.9999999999978, 0.99999999999948, 0.99999999311433, 0.99999878195152, 0.47101897739483, 0.93368891853679, 0.99994556595217, 0.7571113417265, 0.93553999975802, 0.99999999998191, 0.99999999999784, 0.99999999999971, 0.99999891129658, 0.99994309267792, 0.46510628979591, 0.93442584181035, 0.99894450514543, 0.99890078483692, 0.76933812306423), receivedPower_dbm = c(-93.023492290586, -92.388378035287, -92.205716340607, -93.816400586752, -95.023489422885, -100.86308557253, -98.464763536915, -96.175707680373, -102.06189538385, -99.716653422746, -93.023492290586, -92.384760627397, -92.205716340607, -93.816400586752, -95.023489422885, -100.86308557253, -98.464201120719, -96.175707680373, -102.06189538385, -99.717150021506, -93.022927803442, -92.404017215549, -92.204561341714, -93.814319484729, -95.016990717792, -102.01669022332, -98.558088145955, -96.173817001483, -102.07406915124, -99.71517574876, -93.021813165972, -92.409586309743, -92.20229160243, -93.805335867418, -96.184419849593, -102.01709540787, -99.728735187547, -96.163233028048, -99.772547164798, -99.706399753853, -93.024204617071, -92.745813384859, -92.206884754512, -93.818508150122, -95.027018807793, -100.87000577258, -98.467607232407, -95.005311380324, -102.04157607608, -99.724619517, -93.022927803442, -92.404017215549, -92.204561341714, -93.813803344588, -95.015606885523, -102.0157405687, -98.556982278361, -96.172566862738, -103.21871579865, -99.714687230796, -93.022787428238, -92.404017215549, -92.204274688493, -93.813803344588, -95.015606885523, -102.0157405687, -98.556982278361, -96.172566862738, -103.21784988098, -99.714687230796, -93.021813165972, -92.409950613665, -92.20229160243, -93.805838770576, -96.184419849593, -102.02042267497, -99.728735187547, -96.163233028048, -99.768774335378, -99.706399753853, -93.022228914406, -92.411048503835, -92.203136463155, -93.807357409082, -95.012865008237, -102.00985717796, -99.730352912911, -96.165675535906, -100.92744056572, -99.708301333236, -92.735781110993, -92.408137395049, -92.119533319039, -94.982938427575, -96.181073124017, -102.03018610927, -99.721633629806, -97.32940323644, -97.347613268692, -100.87007386786), snr = c(49.848348091678, 57.698190927109, 60.17669971462, 41.529809724535, 31.452202106925, 8.1976890851341, 14.240447804094, 24.122884195464, 6.2202875499406, 10.674183333671, 49.848348091678, 57.746270018264, 60.17669971462, 41.529809724535, 31.452202106925, 8.1976890851341, 14.242292077376, 24.122884195464, 6.2202875499406, 10.672962852322, 49.854827699773, 57.49079026127, 60.192705735317, 41.549715223147, 31.499301851462, 6.2853718719014, 13.937702343688, 24.133388256416, 6.2028757927148, 10.677815810561, 49.867624820879, 57.417115267867, 60.224172277442, 41.635752021705, 24.074540962859, 6.2847854917092, 10.644529778044, 24.19227425387, 10.537686730745, 10.699414795917, 49.84017267426, 53.139646558768, 60.160512118809, 41.509660845114, 31.42665220053, 8.1846370024428, 14.231126423354, 31.584125885363, 6.2494585568733, 10.654622041348, 49.854827699773, 57.49079026127, 60.192705735317, 41.55465351989, 31.509340361646, 6.2867464196657, 13.941251828322, 24.140336174865, 4.765718874642, 10.679016976694, 49.856439162736, 57.49079026127, 60.196678846453, 41.55465351989, 31.509340361646, 6.2867464196657, 13.941251828322, 24.140336174865, 4.7666691818074, 10.679016976694, 49.867624820879, 57.412299088098, 60.224172277442, 41.630930975211, 24.074540962859, 6.279972363168, 10.644529778044, 24.19227425387, 10.546845071479, 10.699414795917, 49.862851240855, 57.397787176282, 60.212457625018, 41.61637603957, 31.529239767749, 6.2952688513108, 10.640565481982, 24.178672145334, 8.0771089950663, 10.694731030907, 53.262541905639, 57.43627424514, 61.382796189332, 31.747253311549, 24.093100244121, 6.2658701281075, 10.661949889074, 18.495227442305, 18.417839037171, 8.1845086722809), frameId = c(15051, 15106, 15165, 15220, 15279, 15330, 15385, 15452, 15511, 15566, 15019, 15074, 15129, 15184, 15239, 15298, 15353, 15412, 15471, 15526, 14947, 14994, 15057, 15112, 15171, 15226, 15281, 15332, 15391, 15442, 14971, 15030, 15085, 15144, 15203, 15262, 15321, 15380, 15435, 15490, 14915, 14978, 15033, 15092, 15147, 15198, 15257, 15312, 15371, 15430, 14975, 15034, 15089, 15140, 15195, 15254, 15313, 15368, 15427, 15478, 14987, 15046, 15105, 15160, 15215, 15274, 15329, 15384, 15447, 15506, 14943, 15002, 15061, 15116, 15171, 15230, 15285, 15344, 15399, 15454, 14971, 15026, 15081, 15136, 15195, 15258, 15313, 15368, 15423, 15478, 15039, 15094, 15149, 15204, 15263, 15314, 15369, 15428, 15487, 15546 ), packetOkSinr = c(0.99999999314881, 0.9999999998736, 0.99999999996428, 0.99999952114066, 0.99991568416005, 3.00628034688444e-08, 0.51497487795954, 0.99627877136019, 0, 0.011303253101957, 0.99999999314881, 0.99999999987726, 0.99999999996428, 0.99999952114066, 0.99991568416005, 3.00628034688444e-08, 0.51530974419663, 0.99627877136019, 0, 0.011269851265775, 0.9999999931708, 0.99999999985986, 0.99999999996428, 0.99999952599145, 0.99991770469509, 0, 0.45861812482641, 0.99629897628155, 0, 0.011403119534097, 0.99999999321568, 0.99999999985437, 0.99999999996519, 0.99999954639936, 0.99618434878558, 0, 0.010513119213425, 0.99641022914441, 0.00801687746446111, 0.012011103529927, 0.9999999931195, 0.99999999871861, 0.99999999996428, 0.99999951617905, 0.99991456738049, 2.6525298291169e-08, 0.51328066587104, 0.9999212220316, 0, 0.010777054258914, 0.9999999931708, 0.99999999985986, 0.99999999996428, 0.99999952718674, 0.99991812902805, 0, 0.45929307038653, 0.99631228046814, 0, 0.011436292559188, 0.99999999317629, 0.99999999985986, 0.99999999996428, 0.99999952718674, 0.99991812902805, 0, 0.45929307038653, 0.99631228046814, 0, 0.011436292559188, 0.99999999321568, 0.99999999985437, 0.99999999996519, 0.99999954527918, 0.99618434878558, 0, 0.010513119213425, 0.99641022914441, 0.00821047996950475, 0.012011103529927, 0.99999999319919, 0.99999999985345, 0.99999999996519, 0.99999954188106, 0.99991896371849, 0, 0.010410830482692, 0.996384831822, 9.12484388049251e-09, 0.011877185067536, 0.99999999879646, 0.9999999998562, 0.99999999998077, 0.99992756868677, 0.9962208785486, 0, 0.010971897073662, 0.93214999078663, 0.92943956665979, 2.64925478221656e-08), snir = c(49.848348091678, 57.698190927109, 60.17669971462, 41.529809724535, 31.452202106925, 8.1976890851341, 14.240447804094, 24.122884195464, 6.2202875499406, 10.674183333671, 49.848348091678, 57.746270018264, 60.17669971462, 41.529809724535, 31.452202106925, 8.1976890851341, 14.242292077376, 24.122884195464, 6.2202875499406, 10.672962852322, 49.854827699773, 57.49079026127, 60.192705735317, 41.549715223147, 31.499301851462, 6.2853718719014, 13.937702343688, 24.133388256416, 6.2028757927148, 10.677815810561, 49.867624820879, 57.417115267867, 60.224172277442, 41.635752021705, 24.074540962859, 6.2847854917092, 10.644529778044, 24.19227425387, 10.537686730745, 10.699414795917, 49.84017267426, 53.139646558768, 60.160512118809, 41.509660845114, 31.42665220053, 8.1846370024428, 14.231126423354, 31.584125885363, 6.2494585568733, 10.654622041348, 49.854827699773, 57.49079026127, 60.192705735317, 41.55465351989, 31.509340361646, 6.2867464196657, 13.941251828322, 24.140336174865, 4.765718874642, 10.679016976694, 49.856439162736, 57.49079026127, 60.196678846453, 41.55465351989, 31.509340361646, 6.2867464196657, 13.941251828322, 24.140336174865, 4.7666691818074, 10.679016976694, 49.867624820879, 57.412299088098, 60.224172277442, 41.630930975211, 24.074540962859, 6.279972363168, 10.644529778044, 24.19227425387, 10.546845071479, 10.699414795917, 49.862851240855, 57.397787176282, 60.212457625018, 41.61637603957, 31.529239767749, 6.2952688513108, 10.640565481982, 24.178672145334, 8.0771089950663, 10.694731030907, 53.262541905639, 57.43627424514, 61.382796189332, 31.747253311549, 24.093100244121, 6.2658701281075, 10.661949889074, 18.495227442305, 18.417839037171, 8.1845086722809), ookSnirBer = c(8.8808636558081e-24, 3.2219795637026e-27, 2.6468895519653e-28, 3.9807779074715e-20, 1.0849324265615e-15, 2.5705217057696e-05, 4.7313805615763e-08, 1.8800438086075e-12, 0.00021005320203921, 1.9147343768384e-06, 8.8808636558081e-24, 3.0694773489537e-27, 2.6468895519653e-28, 3.9807779074715e-20, 1.0849324265615e-15, 2.5705217057696e-05, 4.7223753038869e-08, 1.8800438086075e-12, 0.00021005320203921, 1.9171738578051e-06, 8.8229427230445e-24, 3.9715925056443e-27, 2.6045198111088e-28, 3.9014083702734e-20, 1.0342658440386e-15, 0.00019591630514278, 6.4692014108683e-08, 1.8600094209271e-12, 0.0002140067535655, 1.9074922485477e-06, 8.7096574467175e-24, 4.2779443633862e-27, 2.5231916788231e-28, 3.5761615214425e-20, 1.9750692814982e-12, 0.0001960392878411, 1.9748966344895e-06, 1.7515881895994e-12, 2.2078334799411e-06, 1.8649940680806e-06, 8.954486301678e-24, 3.2021085732779e-25, 2.690441113724e-28, 4.0627628846548e-20, 1.1134484878561e-15, 2.6061691733331e-05, 4.777159157954e-08, 9.4891388749738e-16, 0.00020359398491544, 1.9542110660398e-06, 8.8229427230445e-24, 3.9715925056443e-27, 2.6045198111088e-28, 3.8819641115984e-20, 1.0237769828158e-15, 0.00019562832342849, 6.4455095380046e-08, 1.8468752030971e-12, 0.0010099091367628, 1.9051035165106e-06, 8.8085966897635e-24, 3.9715925056443e-27, 2.594108048185e-28, 3.8819641115984e-20, 1.0237769828158e-15, 0.00019562832342849, 6.4455095380046e-08, 1.8468752030971e-12, 0.0010088638355194, 1.9051035165106e-06, 8.7096574467175e-24, 4.2987746909572e-27, 2.5231916788231e-28, 3.593647329558e-20, 1.9750692814982e-12, 0.00019705170257492, 1.9748966344895e-06, 1.7515881895994e-12, 2.1868296425817e-06, 1.8649940680806e-06, 8.7517439682173e-24, 4.3621551072316e-27, 2.553168170837e-28, 3.6469582463164e-20, 1.0032983660212e-15, 0.00019385229409318, 1.9830820164805e-06, 1.7760568361323e-12, 2.919419915209e-05, 1.8741284335866e-06, 2.8285944348148e-25, 4.1960751547207e-27, 7.8468215407139e-29, 8.0407329049747e-16, 1.9380328071065e-12, 0.00020004849911333, 1.9393279417733e-06, 5.9354475879597e-10, 6.4258355913627e-10, 2.6065221215415e-05), ookSnrBer = c(8.8808636558081e-24, 3.2219795637026e-27, 2.6468895519653e-28, 3.9807779074715e-20, 1.0849324265615e-15, 2.5705217057696e-05, 4.7313805615763e-08, 1.8800438086075e-12, 0.00021005320203921, 1.9147343768384e-06, 8.8808636558081e-24, 3.0694773489537e-27, 2.6468895519653e-28, 3.9807779074715e-20, 1.0849324265615e-15, 2.5705217057696e-05, 4.7223753038869e-08, 1.8800438086075e-12, 0.00021005320203921, 1.9171738578051e-06, 8.8229427230445e-24, 3.9715925056443e-27, 2.6045198111088e-28, 3.9014083702734e-20, 1.0342658440386e-15, 0.00019591630514278, 6.4692014108683e-08, 1.8600094209271e-12, 0.0002140067535655, 1.9074922485477e-06, 8.7096574467175e-24, 4.2779443633862e-27, 2.5231916788231e-28, 3.5761615214425e-20, 1.9750692814982e-12, 0.0001960392878411, 1.9748966344895e-06, 1.7515881895994e-12, 2.2078334799411e-06, 1.8649940680806e-06, 8.954486301678e-24, 3.2021085732779e-25, 2.690441113724e-28, 4.0627628846548e-20, 1.1134484878561e-15, 2.6061691733331e-05, 4.777159157954e-08, 9.4891388749738e-16, 0.00020359398491544, 1.9542110660398e-06, 8.8229427230445e-24, 3.9715925056443e-27, 2.6045198111088e-28, 3.8819641115984e-20, 1.0237769828158e-15, 0.00019562832342849, 6.4455095380046e-08, 1.8468752030971e-12, 0.0010099091367628, 1.9051035165106e-06, 8.8085966897635e-24, 3.9715925056443e-27, 2.594108048185e-28, 3.8819641115984e-20, 1.0237769828158e-15, 0.00019562832342849, 6.4455095380046e-08, 1.8468752030971e-12, 0.0010088638355194, 1.9051035165106e-06, 8.7096574467175e-24, 4.2987746909572e-27, 2.5231916788231e-28, 3.593647329558e-20, 1.9750692814982e-12, 0.00019705170257492, 1.9748966344895e-06, 1.7515881895994e-12, 2.1868296425817e-06, 1.8649940680806e-06, 8.7517439682173e-24, 4.3621551072316e-27, 2.553168170837e-28, 3.6469582463164e-20, 1.0032983660212e-15, 0.00019385229409318, 1.9830820164805e-06, 1.7760568361323e-12, 2.919419915209e-05, 1.8741284335866e-06, 2.8285944348148e-25, 4.1960751547207e-27, 7.8468215407139e-29, 8.0407329049747e-16, 1.9380328071065e-12, 0.00020004849911333, 1.9393279417733e-06, 5.9354475879597e-10, 6.4258355913627e-10, 2.6065221215415e-05 )), class = "data.frame", row.names = c(NA, -100L), .Names = c("run", "repetition", "module", "configname", "packetByteLength", "numVehicles", "dDistance", "time", "distanceToTx", "headerNoError", "receivedPower_dbm", "snr", "frameId", "packetOkSinr", "snir", "ookSnirBer", "ookSnrBer" ))
ggplot(data=combined_80_8192 %>% filter (time > 270, time < 280), aes(x=time) ) + stat_summary(aes(y=receivedPower_dbm ), fun.y=mean, geom="line", colour="black") + stat_summary(aes(y=packetOkSinr*40 - 110 ), fun.y=mean, geom="line", colour="black", position = position_dodge(width=10)) + scale_x_continuous() + scale_y_continuous(breaks = seq(-0,-110,-10), "y_first", sec.axis=sec_axis(~.*0.025+2.75, name="y_second") )
df <- data.frame(x = seq(1, 1000, 1), y1 = sample.int(100, 1000, replace=T), y2 = sample(50, 1000, replace = T)) with(df, plot(y1 ~ x, col = "red")) par(new = T) with(df, plot(y2 ~ x, type = "l", xaxt = "n", yaxt = "n", xlab = "", ylab = "")) axis(4) with(df, mtext("y2", side = 4))
climate <- tibble( Month = 1:12, Temp = c(-4,-4,0,5,11,15,16,15,11,6,1,-3), Precip = c(49,36,47,41,53,65,81,89,90,84,73,55) )
b <- diff(ylim.prim)/diff(ylim.sec) a <- b*(ylim.prim[1] - ylim.sec[1]) ggplot(climate, aes(Month, Precip)) + geom_col() + geom_line(aes(y = a + Temp*b), color = "red") + scale_y_continuous("Precipitation", sec.axis = sec_axis(~ (. - a)/b, name = "Temperature")) + scale_x_continuous("Month", breaks = 1:12) + ggtitle("Climatogram for Oslo (1961-1990)")
ggplot(climate, aes(Month, Precip)) + geom_col() + geom_line(aes(y = a + Temp*b), color = "red") + scale_y_continuous("Precipitation", sec.axis = sec_axis(~ (. - a)/b, name = "Temperature")) + scale_x_continuous("Month", breaks = 1:12) + theme(axis.line.y.right = element_line(color = "red"), axis.ticks.y.right = element_line(color = "red"), axis.text.y.right = element_text(color = "red"), axis.title.y.right = element_text(color = "red") ) + ggtitle("Climatogram for Oslo (1961-1990)")
library(tidyverse) df.wide %>% select(date, column1, column2, column3) %>% mutate(id = n()) %>% gather(type, value, -id, -date) %>% ggplot(aes(x = date, y = value)) + geom_line() + facet_grid(type~., scales = "free")
library(ggplot2) scaleFactor <- max(mtcars$cyl) / max(mtcars$hp) ggplot(mtcars, aes(x=disp)) + geom_smooth(aes(y=cyl), method="loess", col="blue") + geom_smooth(aes(y=hp * scaleFactor), method="loess", col="red") + scale_y_continuous(name="cyl", sec.axis=sec_axis(~./scaleFactor, name="hp")) + theme( axis.title.y.left=element_text(color="blue"), axis.text.y.left=element_text(color="blue"), axis.title.y.right=element_text(color="red"), axis.text.y.right=element_text(color="red") )
Years<-c("1998","1999","2000","2001","2002","2003","2004") Persons.Involved<-c(281,248,301,276,295,231,311) Fatalities<-c(20,17,24,16,34,18,35) rate=100*Fatalities/Persons.Involved df<-data.frame(Years=Years,Persons.Involved=Persons.Involved,Fatalities=Fatalities,rate=rate) print(df,row.names = FALSE) Years Persons.Involved Fatalities rate 1998 281 20 7.117438 1999 248 17 6.854839 2000 301 24 7.973422 2001 276 16 5.797101 2002 295 34 11.525424 2003 231 18 7.792208 2004 311 35 11.254019
df2<-df df2$Persons.Involved <- 100*df$Persons.Involved/df$Persons.Involved[1] df2$rate <- 100*df$rate/df$rate[1] plot(ggplot(df2)+ geom_bar(aes(x=Years,weight=Persons.Involved))+ geom_line(aes(x=Years,y=rate,group=1))+ theme(text = element_text(size=30)) )
--- title: "Sample Document" output: html_document: toc: true theme: united date: `r format(Sys.time(), "%d %B, %Y")` author: baptiste --- Error in yaml::yaml.load(front_matter) : Scanner error: while scanning for the next token at line 6, column 7 found character that cannot start any token at line 6, column 7 Calls: <Anonymous> ... output_format_from_yaml_front_matter -> parse_yaml_front_matter -> <Anonymous> -> .Call
--- title: "Sample Document" output: html_document: toc: true theme: united date: author: baptiste ---
--- title: "Sample Document" output: html_document: toc: true theme: united date: <%= format(Sys.time(), "%d %B, %Y") %> author: baptiste ---
brew_n_render <- function(input, ...){ output_file <- gsub("\\.[R|r]md$", ".html", input) brew::brew(input, rmarkdown::render( }
params: reportDate: input: date label: value: as.POSIXct(Sys.Date())
--- title: "bla bla" author: "My name" date: \`r format(Sys.Date(), "%B %d, %Y")`\ output: html_document ---
--- title: "bla bla" author: "My name" date: \`r format(Sys.Date(), "%m %d,%Y")`\ output: html_document ---
foo = function() { if(a) { return(a) } else { return(b) } }
bench_nor2 <- function(x,repeats) { system.time(rep( (function(x) vector(length=x,mode="numeric"))(x) ,repeats)) } bench_ret2 <- function(x,repeats) { system.time(rep( (function(x) return(vector(length=x,mode="numeric")))(x) ,repeats)) } maxlen <- 1000 reps <- 10000 along <- seq(from=1,to=maxlen,by=5) ret <- sapply(along,FUN=bench_ret2,repeats=reps) nor <- sapply(along,FUN=bench_nor2,repeats=reps) res <- data.frame(N=along,ELAPSED_RET=ret["elapsed",],ELAPSED_NOR=nor["elapsed",])
> (function() {10;20;30;40})() [1] 40 > (function() {10;20;30;40;return(40)})() [1] 40 > (function() {10;20;return();30;40})() NULL > (function() {10;20;return(25);30;40})() [1] 25 >
foo = function() { if(a) { return(a) } else { return(b) } }
foo = function() { if(a) { output <- a } else { output <- b } output }
bar <- function() { while (a) { do_stuff for (b) { do_stuff if (c) return(1) for (d) { do_stuff if (e) return(2) } } } return(3) }
library(rbenchmark) x <- 1 foo <- function(value) { return(value) } fuu <- function(value) { value } benchmark(foo(x),fuu(x),replications=1e7) test replications elapsed relative user.self sys.self user.child sys.child 1 foo(x) 10000000 51.36 1.185322 51.11 0.11 0 0 2 fuu(x) 10000000 43.33 1.000000 42.97 0.05 0 0
e_func <- function() do_stuff d_func <- function() ifelse(any(sapply(seq(d),e_func)),2,3) b_func <- function() { do_stuff ifelse(c,1,sapply(seq(b),d_func)) } bar <- function () { do_stuff sapply(seq(a),b_func) }
allOdd = function(x) { for (i in x) if (length(i) %% 2 == 0) return (FALSE) return (TRUE) } allOdd = function(x) all(length(x) %% 2 == 1)
foo = function(a) { if(a) { return(a) } else { return(b) } }
foo <- function() { return( dosomething() ) dosomething2() }
foo <- function() { dosomething2() return( dosomething() ) }
local({ 1 2 3 }) eval(expression({ 1 2 3 })) (function() { 1 2 3 })()
ugly <- function(species, x, y){ if(length(species)>1) stop("First argument is too long.") if(species=="Mickey Mouse") return("You if(grepl("mouse", species)) { if(species=="Dormouse") return(paste0("You return(paste0("You } return("The end") }
getout <- TRUE EXP <- eval(expression({ 1 2 if(getout) return("OUTTA HERE") 3 })) LOC <- local({ 1 2 if(getout) return("OUTTA HERE") 3 }) FUN <- (function(){ 1 2 if(getout) return("OUTTA HERE") 3 })() identical(EXP,LOC) identical(EXP,FUN)
Ubuntu version: 16.04 R studio version: Version 0.99.896 R version: 3.3.2 GGPLOT2 version: 2.2.0
dat <- data.frame( time = factor(c("Lunch","Dinner"), levels=c("Lunch","Dinner")), total_bill = c(14.89, 17.23) ) ggplot(data=dat, aes(x=time, y=total_bill, fill=time)) + geom_bar(colour="black", fill=" guides(fill=FALSE) + xlab("Time of day") + ylab("Total bill") + ggtitle("Average bill for 2 people")
ggplot() + ggtitle("Default in 2.2.0 is left-aligned")
ggplot() + ggtitle("Use theme(plot.title = element_text(hjust = 0.5)) to center") + theme(plot.title = element_text(hjust = 0.5))
theme_update(plot.title = element_text(hjust = 0.5))
theme_update(plot.title = element_text(hjust = 0.5)) ggplot() + ggtitle("Default is now set to centered")
A B C D 1. 5 4 4 4 2. 5 4 4 4 3. 5 4 4 4 4. 5 4 4 4 5. 5 4 4 4 6. 5 4 4 4 7. 5 4 4 4
A B C D 1. 5 4 4 4 3. 5 4 4 4 5. 5 4 4 4 7. 5 4 4 4
row_to_keep = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE) myData = myData[row_to_keep,]
myData = myData[myData$A > 4,] myData = myData[!myData$A > 4,]
updated_myData <- subset(myData, id!= 6) print (updated_myData) updated_myData <- subset(myData, id %in% c(1, 3, 5, 7)) print (updated_myData)
library(gtools) df1 <- data.frame(a = c(1:5), b = c(6:10)) df2 <- data.frame(a = c(11:15), b = c(16:20), c = LETTERS[1:5]) smartbind(df1, df2) a b c 1.1 1 6 <NA> 1.2 2 7 <NA> 1.3 3 8 <NA> 1.4 4 9 <NA> 1.5 5 10 <NA> 2.1 11 16 A 2.2 12 17 B 2.3 13 18 C 2.4 14 19 D 2.5 15 20 E
library(data.table) df1 = data.frame(a = c(1:5), b = c(6:10)) df2 = data.frame(a = c(11:15), b = c(16:20), c = LETTERS[1:5]) rbindlist(list(df1, df2), fill = TRUE)
> cols <- intersect(colnames(df1), colnames(df2)) > rbind(df1[,cols], df2[,cols])
df1 = data.frame(a=1:5, b=6:10, d=month.name[1:5]) df2 = data.frame(a=6:10, b=16:20, c = letters[8:12])
df1[setdiff(names(df2), names(df1))] <- NA df2[setdiff(names(df1), names(df2))] <- NA
rbind(df1, df2) a b d c 1 1 6 January <NA> 2 2 7 February <NA> 3 3 8 March <NA> 4 4 9 April <NA> 5 5 10 May <NA> 6 6 16 <NA> h 7 7 17 <NA> i 8 8 18 <NA> j 9 9 19 <NA> k 10 10 20 <NA> l
rbind( data.frame(c(df1, sapply(setdiff(names(df2), names(df1)), function(x) NA))), data.frame(c(df2, sapply(setdiff(names(df1), names(df2)), function(x) NA))) )
mydflist <- mget(ls(pattern="df\\d+") allNms <- unique(unlist(lapply(mydflist, names))) do.call(rbind, lapply(mydflist, function(x) data.frame(c(x, sapply(setdiff(allNms, names(x)), function(y) NA)))))
do.call(rbind, c(lapply(mydflist, function(x) data.frame(c(x, sapply(setdiff(allNms, names(x)), function(y) NA)))), make.row.names=FALSE))
combineByName <- function(A,B) { a.names <- names(A) b.names <- names(B) all.names <- union(a.names,b.names) print(paste("Number of columns:",length(all.names))) a.type <- NULL for (i in 1:ncol(A)) { a.type[i] <- typeof(A[,i]) } b.type <- NULL for (i in 1:ncol(B)) { b.type[i] <- typeof(B[,i]) } a_b.names <- names(A)[!names(A)%in%names(B)] b_a.names <- names(B)[!names(B)%in%names(A)] if (length(a_b.names)>0 | length(b_a.names)>0){ print("Columns in data frame A but not in data frame B:") print(a_b.names) print("Columns in data frame B but not in data frame A:") print(b_a.names) } else if(a.names==b.names & a.type==b.type){ C <- rbind(A,B) return(C) } C <- list() for(i in 1:length(all.names)) { l.a <- all.names[i]%in%a.names pos.a <- match(all.names[i],a.names) typ.a <- a.type[pos.a] l.b <- all.names[i]%in%b.names pos.b <- match(all.names[i],b.names) typ.b <- b.type[pos.b] if(l.a & l.b) { if(typ.a==typ.b) { vec <- c(A[,pos.a],B[,pos.b]) } else { warning(c("Type mismatch in variable named: ",all.names[i],"\n")) vec <- try(c(A[,pos.a],B[,pos.b])) } } else if (l.a) { vec <- c(A[,pos.a],rep(NA,nrow(B))) } else { vec <- c(rep(NA,nrow(A)),B[,pos.b]) } C[[i]] <- vec } names(C) <- all.names C <- as.data.frame(C) return(C) }
sbind = function(x, y, fill=NA) { sbind.fill = function(d, cols){ for(c in cols) d[[c]] = fill d } x = sbind.fill(x, setdiff(names(y),names(x))) y = sbind.fill(y, setdiff(names(x),names(y))) rbind(x, y) }
library(sjmisc) library(dplyr) data(efc) x1 <- efc %>% select(1:5) %>% slice(1:10) x2 <- efc %>% select(3:7) %>% slice(11:20) str(x1) bind_rows(x1, x1) %>% frq(e42dep) add_rows(x1, x1) %>% frq(e42dep)
rbind.ordered=function(x,y){ diffCol = setdiff(colnames(x),colnames(y)) if (length(diffCol)>0){ cols=colnames(y) for (i in 1:length(diffCol)) y=cbind(y,NA) colnames(y)=c(cols,diffCol) } diffCol = setdiff(colnames(y),colnames(x)) if (length(diffCol)>0){ cols=colnames(x) for (i in 1:length(diffCol)) x=cbind(x,NA) colnames(x)=c(cols,diffCol) } return(rbind(x, y[, colnames(x)])) }
> .libPaths() [1] "/Library/Frameworks/R.framework/Resources/library"
R> .libPaths() [1] "/usr/local/lib/R/site-library" "/usr/lib/R/site-library" [3] "/usr/lib/R/library" R>
x <- 1 y <- 2 z <- 3 ls() [1] "x" "y" "z" rm(list=setdiff(ls(), "x")) ls() [1] "x"
> ls() [1] "a" "b" "c" library(gdata) > keep(a) [1] "b" "c" > keep(a, sure = TRUE) > ls() [1] "a"
to.remove <- ls() to.remove <- c(to.remove[!grepl("^obj", to.remove)], "to.remove") rm(list=to.remove)
> foo1 <- "junk"; foo2 <- "rubbish"; foo3 <- "trash"; x <- "gold" > ls() [1] "foo1" "foo2" "foo3" "x" > > ls(pattern = "foo") [1] "foo1" "foo2" "foo3" > rm(list = ls(pattern = "foo")) > ls() [1] "x"
require(gdata) keep(object_1,...,object_n,sure=TRUE) ls()
initialize <- function(country.name) { if (length(setdiff(ls(pos = .GlobalEnv), "initialize")) > 0) { rm(list=setdiff(ls(pos = .GlobalEnv), "initialize"), pos = .GlobalEnv) } }
rme <- function(except=NULL){ except = ifelse(is.character(except), except, deparse(substitute(except))) rm(list=setdiff(ls(envir=.GlobalEnv), c(except,"rme")), envir=.GlobalEnv) }
df <- data.frame(id = 1:100, foo = rnorm(100)) df2 <- df[-grep( df3 <- data.table(df) df3[-grep(
df3[,foo:=NULL] df3[, c("foo","bar"):=NULL] myVar = "foo" df3[, (myVar):=NULL] df3[, grep("^foo$", colnames(df3)):=NULL] df3[, which(grepl("^foo$", colnames(df3))):=NULL]
df3[, -grep("^foo$", colnames(df3)), with=FALSE] df3[, !grepl("^foo$", colnames(df3)), with=FALSE]
dt <- data.table( a=letters, b=LETTERS, c=seq(26), d=letters, e=letters ) set( dt, j=c(1L,3L,5L), value=NULL ) > dt[1:5] b d 1: A a 2: B b 3: C c 4: D d 5: E e
vx <- as.character(bquote(c(col1, col2, col3, coln)))[-1] DT[, paste0(vx):=NULL]
for (myNm in toDeleteColNames) train <- train [,(myNm):=NULL,with=F] return (train)
DT[,c("col1", "col1", "col2", "col2")] <- NULL ^ |---- Notice the extra comma if DT is a data.table
DT$col1 <- NULL DT$col2 <- NULL DT$col3 <- NULL DT$col4 <- NULL
DF[c("col1", "col1", "col2", "col2")] <- NULL ^ |---- Notice the missing comma if DF is a data.frame
library(ggplot2) ggplot(data = mtcars, aes(x = mpg, y = disp, group = gear)) + geom_point(aes(color = vs)) + geom_point(aes(shape = factor(cyl))) + geom_line(aes(linetype = factor(gear))) + geom_smooth(aes(fill = factor(gear), color = gear)) + theme_bw()
library(ggplot2) p <- ggplot(data = mtcars, aes(x = mpg, y = disp, group = gear)) + geom_point(aes(color = vs)) + geom_point(aes(shape = factor(cyl))) + geom_line(aes(linetype = factor(gear))) + geom_smooth(aes(fill = factor(gear), color = gear)) + theme_bw()
p + guides(fill = FALSE, color = FALSE, linetype = FALSE, shape = FALSE)
ggplot(data = mtcars, aes(x = mpg, y = disp, group = gear)) + geom_point(aes(color = vs), show.legend = FALSE) + geom_point(aes(shape = factor(cyl)), show.legend = FALSE) + geom_line(aes(linetype = factor(gear)), show.legend = FALSE) + geom_smooth(aes(fill = factor(gear), color = gear), show.legend = FALSE) + theme_bw()
p + guides(fill = guide_legend(override.aes = list(color = NA)), color = FALSE, shape = FALSE)
library(data.table) DT <- data.table(a=c(1,2), b=c(11,12)) print(DT) newDT <- DT newDT[1, a := 100] print(DT)
DT = data.table(a=c(1,2), b=c(11,12)) newDT <- DT newDT$b[2] <- 200 newDT[1, a := 100] print(DT)
DT <- data.table(a = c(1, 2), b = c(11, 12)) newDT <- DT .Internal(inspect(DT)) .Internal(inspect(newDT)) tracemem(newDT) newDT$b[2] <- 200 .Internal(inspect(DT)) .Internal(inspect(newDT))
f <- function(X){ X[,new2:=2L] return("something else") } f(DT) DT2 <- DT f(DT)
> data.frame(letters=c("a", "b", "c"), numbers=c(1,2,3), notes=c("do", "re", "mi")) letters numbers notes 1 a 1 do 2 b 2 re 3 c 3 mi
function (..., row.names = NULL, check.rows = FALSE, check.names = TRUE, stringsAsFactors = default.stringsAsFactors()) { [FUNCTION DEFINITION HERE] }
my_ellipsis_function(...) { input_list <- get_list_from_ellipsis(...) output_list <- lapply(X=input_list, FUN=do_something_interesting) return(output_list) } my_ellipsis_function(a=1:10,b=11:20,c=21:30)
object <- as.list(substitute(list(...)))[-1L] mrn <- is.null(row.names) x <- list(...)
List of 4 $ : symbol list $ a: language 1:10 $ b: language 11:20 $ c: language 21:30
my_ellipsis_function <- function(...) { input_list <- as.list(substitute(list(...))) str(input_list) NULL } my_ellipsis_function(a=1:10,b=11:20,c=21:30)
my_ellipsis_function <- function(...) { input_list <- list(...) output_list <- lapply(X=input_list, function(x) {str(x);summary(x)}) return(output_list) } my_ellipsis_function(a=1:10,b=11:20,c=21:30) int [1:10] 1 2 3 4 5 6 7 8 9 10 int [1:10] 11 12 13 14 15 16 17 18 19 20 int [1:10] 21 22 23 24 25 26 27 28 29 30 $a Min. 1st Qu. Median Mean 3rd Qu. Max. 1.00 3.25 5.50 5.50 7.75 10.00 $b Min. 1st Qu. Median Mean 3rd Qu. Max. 11.0 13.2 15.5 15.5 17.8 20.0 $c Min. 1st Qu. Median Mean 3rd Qu. Max. 21.0 23.2 25.5 25.5 27.8 30.0
my_ellipsis_function <- function(...) { input_list <- as.list(substitute(list(...))) output_list <- lapply(X=input_list, function(x) {str(x);summary(x)}) return(output_list) } my_ellipsis_function(a=1:10,b=11:20,c=21:30) symbol list language 1:10 language 11:20 language 21:30 [[1]] Length Class Mode 1 name name $a Length Class Mode 3 call call $b Length Class Mode 3 call call $c Length Class Mode 3 call call
> test.func <- function(...) { lapply(list(...), class) } > test.func(a="b", b=1) $a [1] "character" $b [1] "numeric"
get_list_from_ellipsis1 <- function(...) { list(...) } get_list_from_ellipsis1(a = 1:10, b = 2:20) $a [1] 1 2 3 4 5 6 7 8 9 10 $b [1] 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
get_list_from_ellipsis2 <- function(...) { as.list(substitute(list(...)))[-1L] } get_list_from_ellipsis2(a = 1:10, b = 2:20) $a 1:10 $b 2:20
R> my_ellipsis_function <- function(...) { + input_list <- as.list(substitute(list(...))) + } R> print(my_ellipsis_function(a=1:10, b=2:20)) [[1]] list $a 1:10 $b 11:20 R>
> talk <- function(func, msg, ...){ + func(msg, ...); + } > talk(cat, c("this", "is", "a","message."), sep=":") this:is:a:message. >
> talk <- function(func, msg=c("Hello","World!"), ...){ + func(msg, ...); + } > talk(cat,sep=":") Hello:World! > talk(cat,sep=",", fill=1) Hello, World! >
cx <- c(0,cumsum(x)) rsum <- (cx[(n+1):length(cx)] - cx[1:(length(cx) - n)]) / n
cx <- c(0, cumsum(ifelse(is.na(x), 0, x))) cn <- c(0, cumsum(ifelse(is.na(x), 0, 1))) rx <- cx[(n+1):length(cx)] - cx[1:(length(cx) - n)] rn <- cn[(n+1):length(cx)] - cx[1:(length(cx) - n)] rsum <- rx / rn
ma <- function(arr, n=15){ res = arr for(i in n:length(arr)){ res[i] = mean(arr[(i-n):i]) } res }
ma <- function(arr, n=15){ res = arr for(i in n:length(arr)){ res[i] = mean(arr[(i-n+1):i]) } res }
ma <- function(x, n=2,parcial=TRUE){ res = x if (parcial==TRUE){ for(i in 1:length(x)){ t<-max(i-n+1,1) res[i] = mean(x[t:i]) } res }else{ for(i in 1:length(x)){ t<-max(i-n+1,1) res[i] = mean(x[t:i]) } res[-c(seq(1,n-1,1))] } }
moving_fun <- function(x, w, FUN, ...) { if (w < 1) { stop("The length of the window } output <- x for (i in 1:length(x)) { lower_bound <- i - w + 1 if (lower_bound < 1) { output[i] <- NA_real_ } else { output[i] <- FUN(x[lower_bound:i, ...]) } } output } v <- seq(1:10) moving_fun(v, 2, mean) moving_fun(v, 2, sum)
library(data.table) d = as.data.table(list(1:6/2, 3:8/4)) frollmean(d[, V1], 3) frollmean(d, 3) frollmean(d[, .(V1)], c(3, 4)) frollmean(d, c(3, 4))
R> sample(LETTERS, 5) [1] "K" "N" "R" "Z" "G" R> sample(LETTERS, 5) [1] "L" "P" "J" "E" "D"
R> set.seed(42); sample(LETTERS, 5) [1] "X" "Z" "G" "T" "O" R> set.seed(42); sample(LETTERS, 5) [1] "X" "Z" "G" "T" "O" R>
simllh <- function(sd,y,Ns){ simdist <- density(rnorm(Ns,mean=0,sd=sd)) llh <- sapply(y,function(x){simdist$y[which.min((x-simdist$x)^2)]}) return(-sum(log(llh))) } simllh.fix.seed <- function(sd,y,Ns){ set.seed(48) simdist <- density(rnorm(Ns,mean=0,sd=sd)) llh <- sapply(y,function(x){simdist$y[which.min((x-simdist$x)^2)]}) return(-sum(log(llh))) }
N <- 20; sd <- 2 est1 <- rep(NA,1000); est2 <- rep(NA,1000) for(i in 1:1000){ as.numeric(Sys.time())-> t; set.seed((t - floor(t)) * 1e8 -> seed) y <- rnorm(N,sd=sd) est1[i] <- optim(1,simllh,y=y,Ns=1000,lower=0.01)$par est2[i] <- optim(1,simllh.fix.seed,y=y,Ns=1000,lower=0.01)$par } hist(est1) hist(est2)
vec <- 1:1000 vec[runif(200, 1, 1000)] <- NA max(vec) max( na.omit(vec) )
newrow = c(1:4) existingDF = rbind(existingDF,newrow)
existingDF <- as.data.frame(matrix(seq(20),nrow=5,ncol=4)) r <- 3 newrow <- seq(4) insertRow <- function(existingDF, newrow, r) { existingDF[seq(r+1,nrow(existingDF)+1),] <- existingDF[seq(r,nrow(existingDF)),] existingDF[r,] <- newrow existingDF } > insertRow(existingDF, newrow, r) V1 V2 V3 V4 1 1 6 11 16 2 2 7 12 17 3 1 2 3 4 4 3 8 13 18 5 4 9 14 19 6 5 10 15 20
existingDF <- rbind(existingDF[1:r,],newrow,existingDF[-(1:r),]) > existingDF V1 V2 V3 V4 1 1 6 11 16 2 2 7 12 17 3 3 8 13 18 4 1 2 3 4 41 4 9 14 19 5 5 10 15 20
library(microbenchmark) microbenchmark( rbind(existingDF[1:r,],newrow,existingDF[-(1:r),]), insertRow(existingDF,newrow,r) ) Unit: microseconds expr min lq median uq max 1 insertRow(existingDF, newrow, r) 660.131 678.3675 695.5515 725.2775 928.299 2 rbind(existingDF[1:r, ], newrow, existingDF[-(1:r), ]) 801.161 831.7730 854.6320 881.6560 10641.417
benchmarkInsertionSolutions <- function(nrow=5,ncol=4) { existingDF <- as.data.frame(matrix(seq(nrow*ncol),nrow=nrow,ncol=ncol)) r <- 3 newrow <- seq(ncol) m <- microbenchmark( rbind(existingDF[1:r,],newrow,existingDF[-(1:r),]), insertRow(existingDF,newrow,r), insertRow2(existingDF,newrow,r) ) mediansBy <- by(m$time,m$expr, FUN=median) res <- as.numeric(mediansBy) names(res) <- names(mediansBy) res } nrows <- 5*10^(0:5) benchmarks <- sapply(nrows,benchmarkInsertionSolutions) colnames(benchmarks) <- as.character(nrows) ggplot( melt(benchmarks), aes(x=Var2,y=value,colour=Var1) ) + geom_line() + scale_x_log10() + scale_y_log10()
5 50 500 5000 50000 5e+05 insertRow2(existingDF, newrow, r) 549861.5 579579.0 789452 2512926 46994560 414790214 insertRow(existingDF, newrow, r) 895401.0 905318.5 1168201 2603926 39765358 392904851 rbind(existingDF[1:r, ], newrow, existingDF[-(1:r), ]) 787218.0 814979.0 1263886 5591880 63351247 829650894
insertRow2 <- function(existingDF, newrow, r) { existingDF <- rbind(existingDF,newrow) existingDF <- existingDF[order(c(1:(nrow(existingDF)-1),r-0.5)),] row.names(existingDF) <- 1:nrow(existingDF) return(existingDF) } insertRow2(existingDF,newrow,r) V1 V2 V3 V4 1 1 6 11 16 2 2 7 12 17 3 1 2 3 4 4 3 8 13 18 5 4 9 14 19 6 5 10 15 20 microbenchmark( + rbind(existingDF[1:r,],newrow,existingDF[-(1:r),]), + insertRow(existingDF,newrow,r), + insertRow2(existingDF,newrow,r) + ) Unit: microseconds expr min lq median uq max 1 insertRow(existingDF, newrow, r) 513.157 525.6730 531.8715 544.4575 1409.553 2 insertRow2(existingDF, newrow, r) 430.664 443.9010 450.0570 461.3415 499.988 3 rbind(existingDF[1:r, ], newrow, existingDF[-(1:r), ]) 606.822 625.2485 633.3710 653.1500 1489.216
library(dplyr) a <- data.frame(A = c(1, 2, 3, 4), B = c(11, 12, 13, 14)) system.time({ for (i in 50:1000) { b <- data.frame(A = i, B = i * i) a <- bind_rows(a, b) } })
a <- data.frame(A = c(1, 2, 3, 4), B = c(11, 12, 13, 14)) system.time({ for (i in 50:1000) { b <- data.frame(A = i, B = i * i) a <- rbind(a, b) } })
paste(scan("foo.txt", what="character", sep=" "),collapse=" ")
fileName <- readChar(fileName, file.info(fileName)$size)
install.packages("readr") library(readr) mystring <- read_file("path/to/myfile.txt")
singleString <- paste(readLines("foo.txt"), collapse=" ")
install.packages("readr") library(readr) mystring <- read_file("path/to/myfile.txt")
read.text = function(pathname) { return (paste(readLines(pathname), collapse="\n")) }
con <- file("/Users/YourtextFile.txt", "r", blocking = FALSE) singleString <- readLines(con) singleString <- paste(singleString, sep = " ", collapse = " ") close(con)
no visible binding for global variable [variable name]
JitteredResponsesByContrast <- function (data) { return( geom_point( aes( x = x.values, y = y.values ), data = data, position = position_jitter(height = 0, width = GetDegreeOfJitter(jj)) ) ) }
granovagg.contr : JitteredResponsesByContrast: no visible binding for global variable granovagg.contr : JitteredResponsesByContrast: no visible binding for global variable
library(ggplot2) p <- ggplot(aes(x = hwy, y = cty), data = mpg) p + geom_point()
JitteredResponsesByContrast <- function (data) { x.values <- y.values <- NULL return( geom_point( aes( x = x.values, y = y.values ), data = data, position = position_jitter(height = 0, width = GetDegreeOfJitter(jj)) ) ) }
JitteredResponsesByContrast <- function (data) { with(data, { geom_point( aes( x = x.values, y = y.values ), data = data, position = position_jitter(height = 0, width = GetDegreeOfJitter(jj)) ) } ) }
library(ggplot2) p <- ggplot() p <- p + with(mpg, geom_point(aes(x = hwy, y = cty))) p
utils::suppressForeignCheck(c("x.values", "y.values"))
+ FALSE Loading required package: ggplot2 + FALSE Loading required package: gridExtra + FALSE Loading required package: grid + FALSE Loading required package: VGAM + FALSE Loading required package: splines + FALSE Loading required package: stats4 + FALSE Attaching package: + FALSE The following object(s) are masked from
```{r echo=FALSE, cache=FALSE, results=FALSE, warning=FALSE, comment=FALSE, warning=FALSE} source("C:/Rscripts/source.R"); ```
```{r include=FALSE} source("C:/Rscripts/source.R") ```
```{r message=FALSE} source("C:/Rscripts/source.R") ```
```{r results= library(RJSONIO) library(AnotherPackage) ```
{r results= knitr::opts_chunk$set(echo = TRUE, warning=FALSE) library(xtable) library(dplyr) library(stringi)
```{r echo=FALSE} suppressWarnings(suppressMessages(suppressPackageStartupMessages({ source("C:/Rscripts/source.R") }) ```
> mod <- prcomp(USArrests, scale = TRUE) > plot.prcomp(mod) Error: could not find function "plot.prcomp"
> getAnywhere(plot.prcomp) A single object matching ‘plot.prcomp’ was found It was found in the following places registered S3 method for plot from namespace stats namespace:stats with value function (x, main = deparse(substitute(x)), ...) screeplot.default(x, main = main, ...) <environment: namespace:stats>
.myHiddenFunction <- function(x) cat("my hidden function")
parallelStart(mode = "<your mode here>", N, level = "<task.level>") parallelExport("<myfun>", level = "<task.level>")
comparison.cloud(colors = c("red", "green"), max.words = 100)
wordcloud::comparison.cloud(colors = c("red", "green"), max.words = 100)
plot(1:3, rnorm(3), pch = 1, lty = 1, type = "o", ylim=c(-2,2)) lines(1:3, rnorm(3), pch = 2, lty = 2, type="o") legend(1,-1,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
set.seed(1) par(xpd=FALSE) plot(1:3, rnorm(3), pch = 1, lty = 1, type = "o", ylim=c(-2,2), bty= legend(2.8,0,c("group A", "group B"), pch = c(1,2), lty = c(1,2)) par(xpd=TRUE) legend(2.8,-1,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
A <- data.frame(x=rnorm(100, 20, 2), y=rnorm(100, 20, 2)) B <- data.frame(x=rnorm(100, 21, 1), y=rnorm(100, 21, 1)) par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE) plot(y ~ x, A, ylim=range(c(A$y, B$y)), xlim=range(c(A$x, B$x)), pch=1, main="Scatter plot of two groups") points(y ~ x, B, pch=3) legend("topright", inset=c(-0.2,0), legend=c("A","B"), pch=c(1,3), title="Group")
par(fig=c(0, 1, 0, 1), oma=c(0, 0, 0, 0), mar=c(0, 0, 0, 0), new=TRUE)
add_legend <- function(...) { opar <- par(fig=c(0, 1, 0, 1), oma=c(0, 0, 0, 0), mar=c(0, 0, 0, 0), new=TRUE) on.exit(par(opar)) plot(0, 0, type= legend(...) }
par(mar = c(5, 4, 1.4, 0.2)) plot(rnorm(50), rnorm(50), col=c("steelblue", "indianred"), pch=20)
add_legend("topright", legend=c("Foo", "Bar"), pch=20, col=c("steelblue", "indianred"), horiz=TRUE, bty=
par(xpd=T, mar=par()$mar+c(0,0,0,6)) plot(1:3, rnorm(3), pch = 1, lty = 1, type = "o", ylim=c(-2,2)) lines(1:3, rnorm(3), pch = 2, lty = 2, type="o") legend(3.2,1,c("group A", "group B"), pch = c(1,2), lty = c(1,2)) par(mar=c(5, 4, 4, 2) + 0.1)
par(oma=c(0, 0, 0, 5)) plot(1:3, rnorm(3), pch=1, lty=1, type="o", ylim=c(-2,2)) lines(1:3, rnorm(3), pch=2, lty=2, type="o") legend(par( c("group A", "group B"), pch=c(1, 2), lty=c(1,2))
dev.off() par(mar=c(par( plot.new() l <- legend(0, 0, bty= plot=FALSE, pch=c(1, 2), lty=c(1, 2)) w <- grconvertX(l$rect$w, to= par(omd=c(0, 1-w, 0, 1)) plot(1:3, rnorm(3), pch=1, lty=1, type="o", ylim=c(-2, 2)) lines(1:3, rnorm(3), pch=2, lty=2, type="o") legend(par( c("group A", "group B"), pch=c(1, 2), lty=c(1, 2))
layout(matrix(c(1,2), nrow = 1), widths = c(0.7, 0.3)) par(mar = c(5, 4, 4, 2) + 0.1) plot(1:3, rnorm(3), pch = 1, lty = 1, type = "o", ylim=c(-2,2)) lines(1:3, rnorm(3), pch = 2, lty = 2, type="o") par(mar = c(5, 0, 4, 2) + 0.1) plot(1:3, rnorm(3), pch = 1, lty = 1, ylim=c(-2,2), type = "n", axes = FALSE, ann = FALSE) legend(1, 1, c("group A", "group B"), pch = c(1,2), lty = c(1,2))
plot(1:3, rnorm(3), pch = 1, lty = 1, type = "o", ylim=c(-2,2)) lines(1:3, rnorm(3), pch = 2, lty = 2, type="o")
legend(locator(1),c("group A", "group B"), pch = c(1,2), lty = c(1,2))
x = c(0,1,2,3,4,5,6,7,8) y = c(0,3,6,4,5,2,3,5,4) x2 = c(0,1,2,3,4,5,6,7,8) y2 = c(0,4,7,8,3,6,3,3,4)
legendstyle = list("x"=100, "y"=1) layoutstyle = list(legend=legendstyle)
plot(1:3, rnorm(3), pch = 1, lty = 1, type = "o", ylim=c(-2,2)) lines(1:3, rnorm(3), pch = 2, lty = 2, type="o")
legend("bottomright", c("group A", "group B"), pch=c(1,2), lty=c(1,2), inset=c(0,1), xpd=TRUE, horiz=TRUE, bty="n" )
par(mar=c(5,4,2,6)) plot(1:3, rnorm(3), pch = 1, lty = 1, type = "o", ylim=c(-2,2)) lines(1:3, rnorm(3), pch = 2, lty = 2, type="o") legend("topleft", c("group A", "group B"), pch=c(1,2), lty=c(1,2), inset=c(1,0), xpd=TRUE, bty="n" )
> install.packages("zoo") Installing package(s) into ‘C:/Program Files/R/R-2.15.2/library’ (as ‘lib’ is unspecified) Warning in install.packages :
install.packages("zoo", lib="C:/software/Rpackages")
> .libPaths() [1] "C:/Program Files/R/R-2.15.2/library" "C:/Program Files/RStudio/R/library"
.libPaths("C:/software/Rpackages") > .libPaths() [1] "C:/software/Rpackages" "C:/Program Files/R/R-2.15.2/library"
> .libPaths() [1] "/Library/Frameworks/R.framework/Versions/2.15/Resources/library" [2] "/Users/davidwinsemius/userLibrary"
Variable name: R_LIBS_USER Variable value: C:/software/Rpackages
> .libPaths() [1] "C:/software/Rpackages" "C:/Program Files/R/R-2.15.2/library" [3] "C:/Program Files/RStudio/R/library"
.First <- function(){ .libPaths("your path here") }
.libPaths(new="C:/Users/..../software/My R studio")
> a <- 1 > x <- if(a==1) 1 else 2 > x [1] 1 > x <- if(a==2) 1 else 2 > x [1] 2
> a <- c(1, 2, 1) > x <- ifelse(a==1, 1, 2) > x [1] 1 2 1 > x <- ifelse(a==2, 1, 2) > x [1] 2 1 2
`?` <- function(x, y) eval( sapply( strsplit( deparse(substitute(y)), ":" ), function(e) parse(text = e) )[[2 - as.logical(x)]])
> 1 ? 2*3 : 4 [1] 6 > 0 ? 2*3 : 4 [1] 4 > TRUE ? x*2 : 0 [1] 2 > FALSE ? x*2 : 0 [1] 0
> y <- 1 ? 2*3 : 4 [1] 6 > y [1] 1 > y <- (1 ? 2*3 : 4) > y [1] 6
`?` <- function(x, y) { xs <- as.list(substitute(x)) if (xs[[1]] == as.name("<-")) x <- eval(xs[[3]]) r <- eval(sapply(strsplit(deparse(substitute(y)), ":"), function(e) parse(text = e))[[2 - as.logical(x)]]) if (xs[[1]] == as.name("<-")) { xs[[3]] <- r eval.parent(as.call(xs)) } else { r } }
> y <- 1 ? 2*3 : 4 > y [1] 6 > y <- 0 ? 2*3 : 4 > y [1] 4 > 1 ? 2*3 : 4 [1] 6 > 0 ? 2*3 : 4 [1] 4
`%?%` <- function(x, y) list(x = x, y = y) `%:%` <- function(xy, z) if(xy$x) xy$y else z TRUE %?% rnorm(5) %:% month.abb FALSE %?% rnorm(5) %:% month.abb condition %?% value1 %:% value2
`?` <- function(x, y) if(x) y[[1]] else y[[2]] `:` <- function(y, z) list(y, z) TRUE ? rnorm(5) : month.abb FALSE ? rnorm(5) : month.abb
`?` <- function(x, y) { y <-substitute(y); if(x) eval(y[[2]], parent.frame()) else eval(y[[3]], parent.frame()) } x <- 1:3 length(x) ? (x*2) : 0 x <- numeric(0) length(x) ? (x*2) : 0 for(i in 1:5) cat(i, (i %% 2) ? "Odd\n" : "Even\n")
> x <- 1 > if(x < 2) print("Less than") else print("Greater than") [1] "Less than"
> x <- 1:3 > ifelse(x<=2, "Less than or equal", "Greater than") [1] "Less than or equal" "Less than or equal" "Greater than"
set.seed(21) y <- 1:10 z <- rnorm(10) condition1 <- TRUE x1 <- if(condition1) y else z
condition2 <- sample(c(TRUE,FALSE),10,TRUE) x2 <- ifelse(condition2, y, z)
> cars$speed > 20 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE TRUE TRUE TRUE [49] TRUE TRUE > ifelse(cars$speed > 20, [1] "slow" "slow" "slow" "slow" "slow" "slow" "slow" "slow" "slow" "slow" [11] "slow" "slow" "slow" "slow" "slow" "slow" "slow" "slow" "slow" "slow" [21] "slow" "slow" "slow" "slow" "slow" "slow" "slow" "slow" "slow" "slow" [31] "slow" "slow" "slow" "slow" "slow" "slow" "slow" "slow" "slow" "slow" [41] "slow" "slow" "slow" "fast" "fast" "fast" "fast" "fast" "fast" "fast"
ifelse(TRUE, c(1,2), c(3,4)) [1] 1 `if`(TRUE, c(1,2), c(3,4)) [1] 1 2
util = new.env() util$bgrep = function [...] util$timeit = function [...] while("util" %in% search()) detach("util") attach(util)
if( length(grep("^myfuncs$",search()))==0 ) attach("myfuncs",pos=2) for( f in list.files("functions","\\.r$",full=TRUE) ) sys.source(f,pos.to.env(grep("^myfuncs$",search())))
evalq(f <- function(x) x * 2, pos.to.env(grep("^myfuncs$",search())))
cat(sprintf("Current working dir: %s\n", wd)) message(sprintf("Current working dir: %s\n", wd))
> paste("Today is", date()) [1] "Today is Sat Feb 21 15:25:18 2015"
> paste0("Today is", date()) [1] "Today isSat Feb 21 15:30:46 2015"
> paste0("Today is ", date()) [1] "Today is Sat Feb 21 15:32:17 2015"
> print(paste("This is", date())) [1] "This is Sat Feb 21 15:34:23 2015"
> print(paste0("This is ", date())) [1] "This is Sat Feb 21 15:34:56 2015"
dat <- data.frame(x = rnorm(10, 30, .2), y = runif(10, 3, 5)) scaled.dat <- scale(dat) colMeans(scaled.dat) apply(scaled.dat, 2, sd)
library(dplyr) set.seed(1234) dat <- data.frame(x = rnorm(10, 30, .2), y = runif(10, 3, 5), z = runif(10, 10, 20)) dat dat2 <- dat %>% mutate_each_(funs(scale(.) %>% as.vector), vars=c("y","z")) dat2
> dat x y z 1 29.75859 3.633225 14.56091 2 30.05549 3.605387 12.65187 3 30.21689 3.318092 13.04672 4 29.53086 3.079992 15.07307 5 30.08582 3.437599 11.81096 6 30.10121 4.621197 17.59671 7 29.88505 4.051395 12.01248 8 29.89067 4.829316 12.58810 9 29.88711 4.662690 19.92150 10 29.82199 3.091541 18.07352
> dat2 <- dat %>% mutate_each_(funs(scale(.) %>% as.vector), > vars=c("y","z")) > dat2 x y z 1 29.75859 -0.3004815 -0.06016029 2 30.05549 -0.3423437 -0.72529604 3 30.21689 -0.7743696 -0.58772361 4 29.53086 -1.1324181 0.11828039 5 30.08582 -0.5946582 -1.01827752 6 30.10121 1.1852038 0.99754666 7 29.88505 0.3283513 -0.94806607 8 29.89067 1.4981677 -0.74751378 9 29.88711 1.2475998 1.80753470 10 29.82199 -1.1150515 1.16367556
library(caret) preObj <- preProcess(data[, -10], method=c("center", "scale")) newData <- predict(preObj, data[, -10])
data.Normalization (x,type="n0",normalization="column")
normFunc <- function(x){(x-mean(x, na.rm = T))/sd(x, na.rm = T)}
x<-rnorm(10,14,2) y<-rnorm(10,7,3) z<-rnorm(10,18,5) df<-data.frame(x,y,z) df[2:3] <- apply(df[2:3], 2, normFunc)
library(dplyr) library(tibble) set.seed(1234) dat <- tibble(x = rnorm(10, 30, .2), y = runif(10, 3, 5), z = runif(10, 10, 20)) dat %>% mutate_all(scale)
trainingSet[, 3:7] = scale(trainingSet[, 3:7]) trainingSet[, 8] = scale(trainingSet[, 8])
for(i in 1:length(colnames(df))) { if(class(df[,i]) == "numeric" || class(df[,i]) == "integer") { df[,i] <- as.vector(scale(df[,i])) } }
m <- matrix(sample(c(NA,0:5),50, replace=TRUE, prob=c(.5,rep(.5/6,6))),nrow=5, ncol=10, dimnames = list(users=paste( r <- as(m, "realRatingMatrix") r_n1 <- normalize(r) r_n2 <- normalize(r, method="Z-score") r r_n1 r_n2 image(r, main="Raw Data") image(r_n1, main="Centered") image(r_n2, main="Z-Score Normalization")
dt = data.table(a = runif(3500), b = runif(3500), c = runif(3500)) dt = data.table(dt %>% mutate_at(vars("a", "c"), scale)) > apply(dt, 2, mean) a b c 1.783137e-16 5.064855e-01 -5.245395e-17 > apply(dt, 2, sd) a b c 1.0000000 0.2906622 1.0000000
dt = data.table(a = runif(3500), b = runif(3500), c = runif(3500)) dt = data.table(dt %>% mutate_all(scale)) > apply(dt, 2, mean) a b c -1.728266e-16 9.291994e-17 1.683551e-16 > apply(dt, 2, sd) a b c 1 1 1
simpleCap <- function(x) { s <- strsplit(x, " ")[[1]] paste(toupper(substring(s, 1,1)), substring(s, 2), sep="", collapse=" ") } name <- c("zip code", "state", "final count") sapply(name, simpleCap) zip code state final count "Zip Code" "State" "Final Count"
simpleCap("I like pizza a lot") [1] "I Like Pizza A Lot"
library(tools) toTitleCase("demonstrating the title case")
gsub("(^|[[:space:]])([[:alpha:]])", "\\1\\U\\2", name, perl=TRUE)
stri_trans_totitle(c("zip code", "state", "final count")) stri_trans_totitle("i like pizza very much")
library(stringr) a = c("capitalise this", "and this") a [1] "capitalise this" "and this" str_to_title(a) [1] "Capitalise This" "And This"
require(Hmisc) sapply(name, function(x) { paste(sapply(strsplit(x, })
.simpleCap <- function(x) { s <- strsplit(x, " ")[[1]] paste(toupper(substring(s, 1,1)), substring(s, 2), sep="", collapse=" ") } > sapply(name, .simpleCap) zip code state final count "Zip Code" "State" "Final Count"
library("BBmisc") capitalizeStrings(c("the taIl", "wags The dOg", "That Looks fuNny!") , all.words = TRUE, lower.back = TRUE) [1] "The Tail" "Wags The Dog" "That Looks Funny!"
substring(name, 1) <- toupper(substring(name, 1, 1)) pos <- regexpr(" ", name, perl=TRUE) + 1 substring(name, pos) <- toupper(substring(name, pos, pos))
install.packages("snakecase") library(snakecase) name <- c("zip code", "state", "final count") to_upper_camel_case(name, sep_out = " ")
library(lettercase) xString = str_title_case(xString)
temp = list.files(pattern="*.csv") myfiles = lapply(temp, read.delim)
temp = list.files(pattern="*.csv") for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
temp = list.files(pattern="*.csv") list2env( lapply(setNames(temp, make.names(gsub("*.csv$", "", temp))), read.csv), envir = .GlobalEnv)
files = list.files(pattern="*.csv") myfiles = do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE)))
library(data.table) DT = do.call(rbind, lapply(files, fread)) DT = rbindlist(lapply(files, fread))
library(readr) library(dplyr) tbl = lapply(files, read_csv) %>% bind_rows()
tbl <- list.files(pattern = "*.csv") %>% map_df(~read_csv(.))
library(data.table) tbl_fread <- list.files(pattern = "*.csv") %>% map_df(~fread(., stringsAsFactors = FALSE))
tbl <- list.files(pattern = "*.csv") %>% map_df(~read_csv(., col_types = cols(.default = "c")))
tbl <- list.files(path = "./subdirectory/", pattern = "*.csv", full.names = T) %>% map_df(~read_csv(., col_types = cols(.default = "c")))
read_plus <- function(flnm) { read_csv(flnm) %>% mutate(filename = flnm) } tbl_with_sources <- list.files(pattern = "*.csv", full.names = T) %>% map_df(~read_plus(.))
library(tidyverse) library(data.table) library(microbenchmark) do.call_rbind_read.csv <- function(path, pattern = "*.csv") { files = list.files(path, pattern, full.names = TRUE) do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE))) } map_df_read.csv <- function(path, pattern = "*.csv") { list.files(path, pattern, full.names = TRUE) %>% map_df(~read.csv(., stringsAsFactors = FALSE)) } lapply_read_csv_bind_rows <- function(path, pattern = "*.csv") { files = list.files(path, pattern, full.names = TRUE) lapply(files, read_csv) %>% bind_rows() } map_df_read_csv <- function(path, pattern = "*.csv") { list.files(path, pattern, full.names = TRUE) %>% map_df(~read_csv(., col_types = cols(.default = "c"))) } map_df_fread <- function(path, pattern = "*.csv") { list.files(path, pattern, full.names = TRUE) %>% map_df(~fread(., stringsAsFactors = FALSE)) } rbindlist_fread <- function(path, pattern = "*.csv") { files = list.files(path, pattern, full.names = TRUE) rbindlist(lapply(files, function(x) fread(x, stringsAsFactors = FALSE))) } do.call_rbind_fread <- function(path, pattern = "*.csv") { files = list.files(path, pattern, full.names = TRUE) do.call(rbind, lapply(files, function(x) fread(x, stringsAsFactors = FALSE))) } read_results <- function(dir_size){ microbenchmark( do.call_rbind_read.csv = do.call_rbind_read.csv(dir_size), map_df_read.csv = map_df_read.csv(dir_size), lapply_read_csv_bind_rows = lapply_read_csv_bind_rows(dir_size), map_df_read_csv = map_df_read_csv(dir_size), rbindlist_fread = rbindlist_fread(dir_size), do.call_rbind_fread = do.call_rbind_fread(dir_size), map_df_fread = map_df_fread(dir_size), times = 10L) } read_results_lrg_mid_mid <- read_results( print(read_results_lrg_mid_mid, digits = 3) read_results_sml_mic_mny <- read_results( read_results_sml_tny_mod <- read_results( read_results_sml_sml_few <- read_results( read_results_med_sml_mny <- read_results( read_results_med_sml_mod <- read_results( read_results_med_med_few <- read_results( read_results_lrg_sml_mny <- read_results( read_results_lrg_med_mod <- read_results( read_results_lrg_lrg_few <- read_results( read_results_xlg_lrg_mod <- read_results( print(read_results_sml_mic_mny, digits = 3) print(read_results_sml_tny_mod, digits = 3) print(read_results_sml_sml_few, digits = 3) print(read_results_med_sml_mny, digits = 3) print(read_results_med_sml_mod, digits = 3) print(read_results_med_med_few, digits = 3) print(read_results_lrg_sml_mny, digits = 3) print(read_results_lrg_med_mod, digits = 3) print(read_results_lrg_lrg_few, digits = 3) print(read_results_xlg_lrg_mod, digits = 3) par(oma = c(0,0,0,0)) par(mfcol = c(1,1)) par(mar = c(12,5,1,1) + 0.1) boxplot(read_results_lrg_mid_mid, las = 2, xlab = "", ylab = "Duration (seconds)", main = "40 files @ 12.5MB (500MB)") boxplot(read_results_xlg_lrg_mod, las = 2, xlab = "", ylab = "Duration (seconds)", main = "100 files @ 50MB (5GB)") par(oma = c(12,1,1,1)) par(mfcol = c(3,3)) par(mar = c(1,4,2,1)) boxplot(read_results_sml_mic_mny, las = 2, xlab = "", ylab = "Duration (seconds)", main = "1000 files @ 5KB (5MB)", xaxt = boxplot(read_results_sml_tny_mod, las = 2, xlab = "", ylab = "Duration (milliseconds)", main = "100 files @ 50KB (5MB)", xaxt = boxplot(read_results_sml_sml_few, las = 2, xlab = "", ylab = "Duration (milliseconds)", main = "10 files @ 500KB (5MB)",) boxplot(read_results_med_sml_mny, las = 2, xlab = "", ylab = "Duration (microseconds) ", main = "1000 files @ 50KB (50MB)", xaxt = boxplot(read_results_med_sml_mod, las = 2, xlab = "", ylab = "Duration (microseconds)", main = "100 files @ 500KB (50MB)", xaxt = boxplot(read_results_med_med_few, las = 2, xlab = "", ylab = "Duration (seconds)", main = "10 files @ 5MB (50MB)") boxplot(read_results_lrg_sml_mny, las = 2, xlab = "", ylab = "Duration (seconds)", main = "1000 files @ 500KB (500MB)", xaxt = boxplot(read_results_lrg_med_mod, las = 2, xlab = "", ylab = "Duration (seconds)", main = "100 files @ 5MB (500MB)", xaxt = boxplot(read_results_lrg_lrg_few, las = 2, xlab = "", ylab = "Duration (seconds)", main = "10 files @ 50MB (500MB)")
for ((i=1; i<=$2; i++)); do cp "$1" "${1:0:8}_${i}.csv"; done
path <- "C:/Users/cfees/My Box Files/Fitness/" files <- list.files(path=path, pattern="*.csv") for(file in files) { perpos <- which(strsplit(file, "")[[1]]==".") assign( gsub(" ","",substr(file, 1, perpos-1)), read.csv(paste(path,file,sep=""))) }
library(plyr) library(data.table) library(doSNOW) csv.list <- list.files(path="t:/data", pattern=".csv$", full.names=TRUE) cl <- makeCluster(4) registerDoSNOW(cl) pb <- txtProgressBar(max=length(csv.list), style=3) pbu <- function(i) setTxtProgressBar(pb, i) dt <- setDT(ldply(csv.list, fread, .parallel=TRUE, .paropts=list(.options.snow=list(progress=pbu)))) stopCluster(cl)
library(rio) my_data <- import_list(dir("path_to_directory", pattern = ".csv", rbind = TRUE))
library(readr) library(stringr) List_of_file_paths <- list.files(path ="C:/Users/Anon/Documents/Folder_with_csv_files/", pattern = ".csv", all.files = TRUE, full.names = TRUE)
for(f in 1:length(List_of_filepaths)) { file_name <- str_sub(string = List_of_filepaths[f], start = 46, end = -5) file_df <- read_csv(List_of_filepaths[f]) assign( x = file_name, value = file_df, envir = .GlobalEnv) }
for(f in 1:length(List_of_filepaths)) { file_name <- str_sub(string = List_of_filepaths[f], start = 46, end = -5) file_df <- read_csv(List_of_filepaths[f]) file_df <- file_df[,1:3] assign( x = file_name, value = file_df, envir = .GlobalEnv) }
(path_csv <- tor_example("csv")) dir(path_csv) list_any(path_csv, read.csv)
path_csv %>% list_any(readr::read_csv, skip = 1) path_csv %>% list_any(~read.csv(., stringsAsFactors = FALSE)) %>% map(as_tibble)
xlist<-list.files(pattern = "*.csv") for(i in xlist) { x <- read.csv((i)) assign(i, x) }
temp <- list.files(pattern="*.csv") for (i in 1:length(temp)) { temp2 = read.csv(temp[i], header = TRUE) x <- rbind(x,temp2) }
library(sparklyr) library(dplyr) sc <- spark_connect(master = "local", version = "2.0.2") df <- spark_read_csv(sc, "dummy", "file: collect()
files <- list.files(pattern=".csv$") for(i in files) { X <- read.table(i, header=TRUE) SN<-X$A/X$B X<-cbind(X,SN) ds<-paste("data_",i, sep="") ds<-substr(ds, 1, nchar(ds)-4) assign(ds, X) }
gg_color_hue <- function(n) { hues = seq(15, 375, length = n + 1) hcl(h = hues, l = 65, c = 100)[1:n] }
n = 4 cols = gg_color_hue(n) dev.new(width = 4, height = 4) plot(1:n, pch = 16, cex = 2, col = cols)
p <- ggplot(mpg,aes(x=class,fill=class)) + geom_bar() ggplot_build(p)$data [[1]] fill y count x ndensity ncount density PANEL group ymin ymax xmin xmax 1 2 3 4 5 6 7
ggplotColours <- function(n = 6, h = c(0, 360) + 15){ if ((diff(h) %% 360) < 1) h[2] <- h[2] - 360/n hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65) }
x = cumsum(c(0, runif(100, -1, +1))) y = cumsum(c(0, runif(100, -1, +1))) fit = lm(y ~ x) summary(fit)
lmp <- function (modelobject) { if (class(modelobject) != "lm") stop("Not an object of class f <- summary(modelobject)$fstatistic p <- pf(f[1],f[2],f[3],lower.tail=F) attributes(p) <- NULL return(p) } > lmp(fit) [1] 1.622665e-05
summary(fit)$coefficients[,4] summary(fit)$r.squared
rSquared <- summary(fit)$r.squared pVal <- anova(fit)$
x = cumsum(c(0, runif(100, -1, +1))) y = cumsum(c(0, runif(100, -1, +1))) fit = lm(y ~ x) require(broom) glance(fit)
>> glance(fit) r.squared adj.r.squared sigma statistic p.value df logLik AIC BIC deviance df.residual 1 0.5442762 0.5396729 1.502943 118.2368 1.3719e-18 2 -183.4527 372.9055 380.7508 223.6251 99
summary(fit)$coefficients[,4] summary(fit)$r.squared
summary(fit)$coefficients[1,4] summary(fit)$tTable[1,4]
summary(fit)$coefficients[1,"Pr(>|t|)"] summary(fit)$tTable[1,"p-value"]
Ex<-structure(list(X1 = c(-36.8598, -37.1726, -36.4343, -36.8644, -37.0599, -34.8818, -31.9907, -37.8304, -34.3367, -31.2984, -33.5731 ), X2 = c(64.26, 63.085, 66.36, 61.08, 61.57, 65.04, 72.69, 63.83, 67.555, 76.06, 68.61), Y1 = c(493.81544, 493.81544, 494.54173, 494.61364, 494.61381, 494.38717, 494.64122, 493.73265, 494.04246, 494.92989, 494.98384), Y2 = c(489.704166, 489.704166, 490.710962, 490.653212, 490.710612, 489.822928, 488.160904, 489.747776, 490.600579, 488.946738, 490.398958), Y3 = c(-19L, -19L, -19L, -23L, -30L, -43L, -43L, -2L, -58L, -47L, -61L)), .Names = c("X1", "X2", "Y1", "Y2", "Y3"), row.names = c(NA, 11L), class = "data.frame") library(reshape2) library(ggplot2) Ex2<-melt(Ex,id=c("X1","X2")) colnames(Ex2)[3:4]<-c("Y","Yvalue") Ex3<-melt(Ex2,id=c("Y","Yvalue")) colnames(Ex3)[3:4]<-c("X","Xvalue") ggplot(Ex3,aes(Xvalue,Yvalue))+ geom_smooth(method="lm",alpha=0.2,size=1,color="grey")+ geom_point(size=2)+ facet_grid(Y~X,scales= lmp <- function (modelobject) { if (class(modelobject) != "lm") stop("Not an object of class f <- summary(modelobject)$fstatistic p <- pf(f[1],f[2],f[3],lower.tail=F) attributes(p) <- NULL return(p) } lmtable<-function (var1,var2,data,signi=NULL){ if (class(data) != "data.frame") stop("Not an object of class Tabtemp<-data.frame(matrix(NA,ncol=6,nrow=length(var1)*length(var2))) for (i in 1:length(var2)) { Tabtemp[((length(var1)*i)-(length(var1)-1)):(length(var1)*i),1]<-var1 Tabtemp[((length(var1)*i)-(length(var1)-1)):(length(var1)*i),2]<-var2[i] colnames(Tabtemp)<-c("Var.y","Var.x","p-value","a","b","r^2") for (n in 1:length(var1)) { Tabtemp[(((length(var1)*i)-(length(var1)-1))+n-1),3]<-lmp(lm(data[,var1[n]]~data[,var2[i]],data)) Tabtemp[(((length(var1)*i)-(length(var1)-1))+n-1),4]<-coef(lm(data[,var1[n]]~data[,var2[i]],data))[1] Tabtemp[(((length(var1)*i)-(length(var1)-1))+n-1),5]<-coef(lm(data[,var1[n]]~data[,var2[i]],data))[2] Tabtemp[(((length(var1)*i)-(length(var1)-1))+n-1),6]<-summary(lm(data[,var1[n]]~data[,var2[i]],data))$r.squared } } signi2<-data.frame(matrix(NA,ncol=3,nrow=nrow(Tabtemp))) signi2[,1]<-ifelse(Tabtemp[,3]<0.001,paste0("***"),ifelse(Tabtemp[,3]<0.01,paste0("**"),ifelse(Tabtemp[,3]<0.05,paste0("*"),paste0("")))) signi2[,2]<-round(Tabtemp[,3],2) signi2[,3]<-paste0(format(signi2[,2],digits=2),signi2[,1]) for (l in 1:nrow(Tabtemp)) { Tabtemp$"p-value"[l]<-ifelse(is.null(signi), Tabtemp$"p-value"[l], ifelse(isTRUE(signi), paste0(signi2[,3][l]), Tabtemp$"p-value"[l])) } Tabtemp } lmtable("Y1","X1",Ex) lmtable(c("Y1","Y2","Y3"),c("X1","X2"),Ex) lmtable(c("Y1","Y2","Y3"),c("X1","X2"),Ex,signi=TRUE)
x = cumsum(c(0, runif(100, -1, +1))) y = cumsum(c(0, runif(100, -1, +1))) fit = lm(y ~ x) > names(summary(fit)) [1] "call" "terms" [3] "residuals" "coefficients" [5] "aliased" "sigma" [7] "df" "r.squared" [9] "adj.r.squared" "fstatistic" [11] "cov.unscaled" summary(fit)$r.squared
> x <- c(44.4, 45.9, 41.9, 53.3, 44.7, 44.1, 50.7, 45.2, 60.1) > y <- c( 2.6, 3.1, 2.5, 5.0, 3.6, 4.0, 5.2, 2.8, 3.8) > mycor = cor.test(x,y) > mylm = lm(x~y) > cor.test(x,y)$estimate ** 2 cor 0.3262484 > summary(lm(x~y))$r.squared [1] 0.3262484 > lmp(lm(x~y)) [1] 0.1081731 > cor.test(x,y)$p.value [1] 0.1081731
for (well in dataFrame) { wellName <- well$name plateName <- well$plate wellID <- getWellID(wellName, plateName) cat(paste(wellID, well$value1, well$value2, sep=","), file=outputFile) }
> d name plate value1 value2 1 A P1 1 100 2 B P2 2 200 3 C P3 3 300 > f <- function(x, output) { wellName <- x[1] plateName <- x[2] wellID <- 1 print(paste(wellID, x[3], x[4], sep=",")) cat(paste(wellID, x[3], x[4], sep=","), file= output, append = T, fill = T) } > apply(d, 1, f, output =
by(dataFrame, 1:nrow(dataFrame), function(row) dostuff)
write.csv(data.frame(wellid=getWellID(well$name, well$plate), value1=well$value1, value2=well$value2), file=outputFile)
for(i in 1:nrow(dataFrame)) { row <- dataFrame[i,] }
library(foreach) d <- data.frame(x=1:10, y=rnorm(10)) s <- foreach(d=iter(d, by=
rows = function(tab) lapply( seq_len(nrow(tab)), function(i) unclass(tab[i,,drop=F]) )
rows = function(x) lapply(seq_len(nrow(x)), function(i) lapply(x,"[",i))
tab = data.frame(x = 1:3, y=2:4, z=3:5) for (A in rows(tab)) { print(A$x + A$y * A$z) }
for (well in rows(dataFrame)) { wellName <- well$name plateName <- well$plate wellID <- getWellID(wellName, plateName) cat(paste(wellID, well$value1, well$value2, sep=","), file=outputFile) }
f <- function(x, output) { wellName <- x[1] plateName <- x[2] wellID <- 1 print(paste(wellID, x[3], x[4], sep=",")) cat(paste(wellID, x[3], x[4], sep=","), file= output, append = T, fill = T) }
n = 100; d <- data.frame( name = LETTERS[ sample.int( 25, n, replace=T ) ], plate = paste0( "P", 1:n ), value1 = 1:n, value2 = (1:n)*10 )
library("ggplot2") library( "microbenchmark" ) library( foreach ) library( iterators ) tm <- microbenchmark(S1 = apply(d, 1, f, output = S2 = for(i in 1:nrow(d)) { row <- d[i,] f(row, }, S3 = foreach(d1=iter(d, by= S4= { print( paste(wellID=rep(1,n), d[,3], d[,4], sep=",") ) cat( paste(wellID=rep(1,n), d[,3], d[,4], sep=","), file= }, S5 = { print( (paste(wellID=rep(1,n), d[,3], d[,4], sep=",")) ) write.table(data.frame(rep(1,n), d[,3], d[,4]), file= }, times=100L) autoplot(tm)
myfn <- function(row) { } purrrlyr::by_row(df, myfn)
> myDf <- head(iris) > myDf Sepal.Length Sepal.Width Petal.Length Petal.Width Species 1 5.1 3.5 1.4 0.2 setosa 2 4.9 3.0 1.4 0.2 setosa 3 4.7 3.2 1.3 0.2 setosa 4 4.6 3.1 1.5 0.2 setosa 5 5.0 3.6 1.4 0.2 setosa 6 5.4 3.9 1.7 0.4 setosa > nRowsDf <- nrow(myDf) > for(i in 1:nRowsDf){ + print(myDf[i,4]) + } [1] 0.2 [1] 0.2 [1] 0.2 [1] 0.2 [1] 0.2 [1] 0.4
--- Please select a CRAN mirror for use in this session ---
local({r <- getOption("repos") r["CRAN"] <- "http: options(repos=r) })
install.packages("package", repo="<your.nearest.mirror>")
local({r <- getOption("repos") r["CRAN"] <- "mirror_site" options(repos=r) options(BioC_mirror="bioc_mirror_site") })
library(ggplot2) dat <- data.frame(x = rnorm(100), y = rnorm(100)) ggplot(dat, aes(x,y)) + geom_point()
ggplot(dat, aes(x,y)) + geom_point() + scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 0.5),1)) + scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 0.5),1))
ggplot(dat, aes(x,y)) + geom_point() + scale_x_continuous(breaks = pretty(dat$x, n = 10)) + scale_y_continuous(breaks = pretty(dat$y, n = 10))
ggplot(dat, aes(x,y)) + geom_point() + scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) + scale_y_continuous(breaks = scales::pretty_breaks(n = 10))
library(ggplot2) dat <- data.frame(x = rnorm(100), y = rnorm(100)) number_ticks <- function(n) {function(limits) pretty(limits, n)} ggplot(dat, aes(x,y)) + geom_point() + scale_x_continuous(breaks=number_ticks(10)) + scale_y_continuous(breaks=number_ticks(10))
ggplot(dat, aes(x,y)) + geom_point() + scale_x_continuous(breaks = seq(min(dat$x), max(dat$x), by = 0.05))
my.data.frame <- data[(data$V1 > 2) & (data$V2 < 4), ]
new.data <- data[ which( data$V1 > 2 | data$V2 < 4) , ]
new.data <- data[ !is.na(data$V1 | data$V2) & ( data$V1 > 2 | data$V2 < 4) , ]
my.data.frame <- data[(data$V1 > 2) | (data$V2 < 4), ]
set.seed(1) df <- data.frame(v1 = runif(10), v2 = letters[1:10])
df[df[1] < 0.5 | df[2] == "g", ] df[df[[1]] < 0.5 | df[[2]] == "g", ] df[df["v1"] < 0.5 | df["v2"] == "g", ]
library(sqldf) sqldf( FROM df WHERE v1 < 0.5 OR v2 = "g"
v1 v2 1 0.26550866 a 2 0.37212390 b 3 0.20168193 e 4 0.94467527 g 5 0.06178627 j
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
oldform <- as.character(myFormula) myFormula <- as.formula( paste( oldform[2], "Sepal.Length", sep="~" ) )
d1 <- data.frame(y1 = c(1, 2, 3), y2 = c(4, 5, 6)) d2 <- data.frame(y1 = c(3, 2, 1), y2 = c(6, 5, 4))
d1 <- data.frame(y1 <- c(1, 2, 3), y2 <- c(4, 5, 6)) y1 y2
d1 <- data.frame(y1 = c(1, 2, 3), y2 = c(4, 5, 6)) d2 <- data.frame(y1 = c(3, 2, 1), y2 = c(6, 5, 4)) my.list <- list(d1, d2)
my_data <- list() for (i in seq_along(my_files)) { my_data[[i]] <- read.csv(file = my_files[i]) }
names(my_data) <- gsub("\\.csv$", "", my_files) names(my_data) <- stringr::str_replace(my_files, pattern = ".csv", replacement = "")
groups = sample(c("train", "test", "validate"), size = nrow(mtcars), replace = TRUE) mt_split = split(mtcars, f = groups)
my_sim_data = data.frame(x = rnorm(50), y = rnorm(50))
sim_list = replicate(n = 10, expr = {data.frame(x = rnorm(50), y = rnorm(50))}, simplify = F)
mylist <- list() mylist[[1]] <- mtcars mylist[[2]] <- data.frame(a = rnorm(50), b = runif(50)) ...
df_list = mget(ls(pattern = "df[0-9]")) ls(pattern = "df[0-9]")
big_data = do.call(what = rbind, args = df_list) big_data = data.table::rbindlist(df_list) big_data = dplyr::bind_rows(df_list)
ldf <- list(d1 = d1, d2 = d2) lapply(ldf, "[", 1) #
d1 <- data.frame(y1=c(1,2,3), y2=c(4,5,6)) d2 <- data.frame(y1=c(3,2,1), y2=c(6,5,4)) d3 <- data.frame(y1=c(6,5,4), y2=c(3,2,1)) d4 <- data.frame(y1=c(9,9,9), y2=c(8,8,8)) my.list <- list(d1, d2, d3, d4) my.list my.list2 <- lapply(paste( my.list2
[[1]] y1 y2 1 3 6 2 2 5 3 1 4 [[2]] y1 y2 1 6 3 2 5 2 3 4 1 [[3]] y1 y2 1 9 8 2 9 8 3 9 8
list.function <- function() { d1 <- data.frame(y1=c(1,2,3), y2=c(4,5,6)) d2 <- data.frame(y1=c(3,2,1), y2=c(6,5,4)) d3 <- data.frame(y1=c(6,5,4), y2=c(3,2,1)) d4 <- data.frame(y1=c(9,9,9), y2=c(8,8,8)) sapply(paste( } my.list3 <- list.function() my.list3
> my.list3 $d2 y1 y2 1 3 6 2 2 5 3 1 4 $d3 y1 y2 1 6 3 2 5 2 3 4 1 $d4 y1 y2 1 9 8 2 9 8 3 9 8 > str(my.list3) List of 3 $ d2: ..$ y1: num [1:3] 3 2 1 ..$ y2: num [1:3] 6 5 4 $ d3: ..$ y1: num [1:3] 6 5 4 ..$ y2: num [1:3] 3 2 1 $ d4: ..$ y1: num [1:3] 9 9 9 ..$ y2: num [1:3] 8 8 8 > my.list3[[1]] y1 y2 1 3 6 2 2 5 3 1 4 > my.list3$d4 y1 y2 1 9 8 2 9 8 3 9 8
my.list $d1 y1 y2 1 1 4 2 2 5 3 3 6 $d2 y1 y2 1 3 6 2 2 5 3 1 4
d1 <- data.frame(y1 = c(1,2,3),y2 = c(4,5,6)) d2 <- data.frame(y1 = c(3,2,1),y2 = c(6,5,4))
D1 <- data.frame(Y1=c(1,2,3), Y2=c(4,5,6)) D2 <- data.frame(Y1=c(3,2,1), Y2=c(6,5,4)) D3 <- data.frame(Y1=c(6,5,4), Y2=c(3,2,1)) D4 <- data.frame(Y1=c(9,9,9), Y2=c(8,8,8))
GETDF_FROMLIST <- function(DF_LIST, ITEM_LOC){ DF_SELECTED <- DF_LIST[[ITEM_LOC]] return(DF_SELECTED) }
D1 <- GETDF_FROMLIST(mylist, 1) D2 <- GETDF_FROMLIST(mylist, 2) D3 <- GETDF_FROMLIST(mylist, 3) D4 <- GETDF_FROMLIST(mylist, 4)
ls()[sapply(ls(), function(x) is.data.frame(get(x)))]
qplot(mydataf) + stat_bin(aes(n = nrow(mydataf), y = ..count../n)) + scale_y_continuous(formatter = "percent")
mydata <- c ("aa", "bb", NULL, "bb", "cc", "aa", "aa", "aa", "ee", NULL, "cc"); mydataf <- factor(mydata); qplot (mydataf);
ggplot(mydataf, aes(y = (..count..)/sum(..count..))) + scale_y_continuous(formatter = ggplot(mydataf, aes(y = (..count..)/sum(..count..))) + scale_y_continuous(formatter = ggplot(mydataf, aes(x = levels(mydataf), y = (..count..)/sum(..count..))) + scale_y_continuous(formatter = ggplot(mydataf, aes(x = levels(mydataf), y = (..count..)/sum(..count..))) + scale_y_continuous(formatter =
ggplot (data=mydataf, aes(levels(mydataf))) + geom_bar()
require(ggplot2) require(scales) p <- ggplot(mydataf, aes(x = foo)) + geom_bar(aes(y = (..count..)/sum(..count..))) + scale_y_continuous(labels=percent)
ggplot(mtcars, aes(x = factor(hp))) + geom_bar(aes(y = (..count..)/sum(..count..))) + scale_y_continuous(labels = percent)
p = ggplot(mydataf, aes(x = foo)) + geom_bar(aes(y = (..count..)/sum(..count..))) + scale_y_continuous(formatter =
ggplot(mydataf) + stat_count(mapping = aes(x=foo, y=..prop.., group=1))
library(ggplot2) library(scales) ggplot(mtcars, aes(x = as.factor(am))) + geom_bar(aes(y = (..count..)/sum(..count..))) + geom_text(aes(y = ((..count..)/sum(..count..)), label = scales::percent((..count..)/sum(..count..))), stat = "count", vjust = -0.25) + scale_y_continuous(labels = percent) + labs(title = "Manual vs. Automatic Frequency", y = "Percent", x = "Automatic Transmission")
theme( axis.text.y=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank() )
library(scales) perbar=function(xx){ q=ggplot(data=data.frame(xx),aes(x=xx))+ geom_bar(aes(y = (..count..)),fill="orange") q=q+ geom_text(aes(y = (..count..),label = scales::percent((..count..)/sum(..count..))), stat="bin",colour="darkgreen") q } perbar(mtcars$disp)
library(ggplot2) library(scales) library(magrittr) library(dplyr) binwidth <- 30 mtcars.stats <- mtcars %>% group_by(cyl) %>% mutate(bin = cut(hp, breaks=seq(0,400, binwidth), labels= seq(0+binwidth,400, binwidth)-(binwidth/2)), n = n()) %>% group_by(cyl, bin) %>% summarise(p = n()/n[1]) %>% ungroup() %>% mutate(bin = as.numeric(as.character(bin))) ggplot(mtcars.stats, aes(x = bin, y= p)) + geom_col() + scale_y_continuous(labels = percent) + facet_grid(cyl~.)
df <- data.frame(V1 = rnorm(100)) ggplot(df, aes(x = V1)) + geom_histogram(aes(y = (..count..)/sum(..count..))) ggplot(df, aes(x = factor(V1))) + geom_bar(aes(y = (..count..)/sum(..count..)))
m = matrix(1:4, 2, 2) d = as.data.frame(m) object.size(m) object.size(d)
> head(as.matrix(data.frame(a = factor(letters), B = factor(LETTERS)))) a B [1,] "a" "A" [2,] "b" "B" [3,] "c" "C" [4,] "d" "D" [5,] "e" "E" [6,] "f" "F" > head(data.matrix(data.frame(a = factor(letters), B = factor(LETTERS)))) a B [1,] 1 1 [2,] 2 2 [3,] 3 3 [4,] 4 4 [5,] 5 5 [6,] 6 6
m <- matrix(1:400000, 200000, 2) d <- data.frame(m) object.size(m) object.size(d)
m <- matrix(1:400000, 2, 200000) d <- data.frame(m) object.size(m) object.size(d)
M <- list(3.14,TRUE,5L,c(2,3,5),"dog",1i) dim(M) <- c(2,3) print(M) DF <- data.frame(M) print(DF) M <- matrix(c(1,1,1,1,2,3,1,3,6),3) DF <- data.frame(M) solve(M) solve(DF) det(M) det(DF)
x <- c(12.45,34,4,0,-234,45.6,4) max( x[x!=max(x)] ) min( x[x!=min(x)] )
maxN <- function(x, N=2){ len <- length(x) if(N>len){ warning( N <- length(x) } sort(x,partial=len-N+1)[len-N+1] } maxN(1:10)
N = 10000 x = rnorm(N) maxN <- function(x, N=2){ len <- length(x) if(N>len){ warning( N <- length(x) } sort(x,partial=len-N+1)[len-N+1] } microbenchmark::microbenchmark( Rfast = Rfast::nth(x,5,descending = T), maxn = maxN(x,5), order = x[order(x, decreasing = T)[5]] ) Unit: microseconds expr min lq mean median uq max neval Rfast 160.364 179.607 202.8024 194.575 210.1830 351.517 100 maxN 396.419 423.360 559.2707 446.452 487.0775 4949.452 100 order 1288.466 1343.417 1746.7627 1433.221 1500.7865 13768.148 100
N = 1e6 x = rnorm(N) microbenchmark::microbenchmark( Rfast = Rfast::nth(x,5,descending = T), maxN = maxN(x,5), order = x[order(x, decreasing = T)[5]] ) Unit: milliseconds expr min lq mean median uq max neval Rfast 89.7722 93.63674 114.9893 104.6325 120.5767 204.8839 100 maxN 150.2822 207.03922 235.3037 241.7604 259.7476 336.7051 100 order 930.8924 968.54785 1005.5487 991.7995 1031.0290 1164.9129 100
system.time({a=runif(1000000);m=max(a);i=which.max(a);b=a[-i];max(b)}) user system elapsed 0.092 0.000 0.659 system.time({a=runif(1000000);n=length(a);sort(a,partial=n-1)[n-1]}) user system elapsed 0.096 0.000 0.653
topMaxUsingFullSort <- function(x, N) { sort(x, decreasing = TRUE)[1:min(N, length(x))] }
topMaxUsingWhichMax <- function(x, N) { vals <- c() for(i in 1:min(N, length(x))) { idx <- which.max(x) vals <- c(vals, x[idx]) x[idx] <- -Inf } vals }
topMaxUsingPartialSort <- function(x, N) { N <- min(N, length(x)) x[x >= -sort(-x, partial=N)[N]][1:N] }
topn = function(vector, n){ maxs=c() ind=c() for (i in 1:n){ biggest=match(max(vector), vector) ind[i]=biggest maxs[i]=max(vector) vector=vector[-biggest] } mat=cbind(maxs, ind) return(mat) }
FindIndicesBottomTopN <- function(x=c(4,-2,5,-77,99),N=1,bottom=FALSE) { k1 <- rank(x) if(bottom==TRUE){ Nindex <- which(k1==N) Nindex <- Nindex[1] } if(bottom==FALSE){ Nindex <- which(k1==(length(x)+1-N)) Nindex <- Nindex[1] } return(Nindex) }
v <- c(4,6,3,2,-5,6,8,12,16) cummax(v) will give us the vector 4 6 6 6 6 6 8 12 16
c <- c(4,2,44,2,1,45,34,2,4,22,244) sort(unique(c), decreasing = TRUE)[1:5]
> fibo <- function(n) { + if ( n < 2 ) n + else fibo(n-1) + fibo(n-2) + } > system.time(for(i in 0:26) fibo(i)) user system elapsed 7.48 0.00 7.52 > system.time(sapply(0:26, fibo)) user system elapsed 7.50 0.00 7.54 > system.time(lapply(0:26, fibo)) user system elapsed 7.48 0.04 7.54 > library(plyr) > system.time(ldply(0:26, fibo)) user system elapsed 7.52 0.00 7.58
library(snow) cl <- makeSOCKcluster(c("localhost","localhost")) parSapply(cl, 1:20, get("+"), 3)
parLapply(cl, x, fun, ...) parSapply(cl, X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE) parApply(cl, X, MARGIN, FUN, ...) parRapply(cl, x, fun, ...) parCapply(cl, x, fun, ...)
> df <- 1:10 > > lapply(2:3, function(i) df <- df * i) > df [1] 1 2 3 4 5 6 7 8 9 10 > > for(i in 2:3) df <- df * i > df [1] 6 12 18 24 30 36 42 48 54 60
set.seed(1) X <- rnorm(100000) Y <- as.factor(sample(letters[1:5],100000,replace=T)) Z <- as.factor(sample(letters[1:10],100000,replace=T)) forloop <- function(x,y,z){ ylev <- levels(y) zlev <- levels(z) n <- length(ylev) p <- length(zlev) out <- matrix(NA,ncol=p,nrow=n) for(i in 1:n){ for(j in 1:p){ out[i,j] <- (mean(x[y==ylev[i] & z==zlev[j]])) } } rownames(out) <- ylev colnames(out) <- zlev return(out) } forloop(X,Y,Z) tapply(X,list(Y,Z),mean)
> system.time(forloop(X,Y,Z)) user system elapsed 0.94 0.02 0.95 > system.time(tapply(X,list(Y,Z),mean)) user system elapsed 0.06 0.00 0.06
> system.time({z <- numeric(1e6); for(i in y) z[i] <- foo(i)}) user system elapsed 3.54 0.00 3.53 > system.time(z <- lapply(y, foo)) user system elapsed 2.89 0.00 2.91 > system.time(z <- vapply(y, foo, numeric(1))) user system elapsed 1.35 0.00 1.36
foo <- function(x) { x <- x+1 } y <- numeric(1e6) system.time({z <- numeric(1e6); for(i in y) z[i] <- foo(i)}) system.time(z <- sapply(y, foo)) system.time(z <- lapply(y, foo))
set.seed(1) X <- rnorm(100000) Y <- as.factor(sample(letters[1:5],100000,replace=T)) Z <- as.factor(sample(letters[1:10],100000,replace=T)) YZ <- interaction(Y, Z) XS <- split(X, YZ) m <- vapply(XS, mean, numeric(1)) m <- matrix(m, nrow = length(levels(Y))) rownames(m) <- levels(Y) colnames(m) <- levels(Z) m
df <- data.frame(id = rep(letters[1:10], 100000), value = rnorm(1000000)) f1 <- function(x) tapply(x$value, x$id, sum) f2 <- function(x){ res <- 0 for(i in seq_along(l <- unique(x$id))) res[i] <- sum(x$value[x$id == l[i]]) names(res) <- l res } library(microbenchmark) > microbenchmark(f1(df), f2(df), times=100) Unit: milliseconds expr min lq median uq max neval f1(df) 28.02612 28.28589 28.46822 29.20458 32.54656 100 f2(df) 38.02241 41.42277 41.80008 42.05954 45.94273 100
mat <- matrix(rnorm(1000000), nrow=1000) f3 <- function(x) apply(x, 2, sum) f4 <- function(x){ res <- 0 for(i in 1:ncol(x)) res[i] <- sum(x[,i]) res } > microbenchmark(f3(mat), f4(mat), times=100) Unit: milliseconds expr min lq median uq max neval f3(mat) 14.87594 15.44183 15.87897 17.93040 19.14975 100 f4(mat) 12.01614 12.19718 12.40003 15.00919 40.59100 100
f5 <- function(x) colSums(x) > microbenchmark(f5(mat), times=100) Unit: milliseconds expr min lq median uq max neval f5(mat) 1.362388 1.405203 1.413702 1.434388 1.992909 100
plot1 <- ggplot(data, aes(xData, yData,color=categoricaldData)) + geom_line()
plot2 <- ggplot(data.subset, aes(xData.subset, yData.subset, color=categoricaldData.subset)) + geom_line()
dat <- data.frame(x=runif(10),y=runif(10), grp = rep(LETTERS[1:5],each = 2),stringsAsFactors = TRUE) library(RColorBrewer) myColors <- brewer.pal(5,"Set1") names(myColors) <- levels(dat$grp) colScale <- scale_colour_manual(name = "grp",values = myColors)
p <- ggplot(dat,aes(x,y,colour = grp)) + geom_point() p1 <- p + colScale p2 <- p %+% droplevels(subset(dat[4:10,])) + colScale
png("figure_%d.png") set.seed(2014) library(ggplot2) dataset <- data.frame(category = rep(LETTERS[1:5], 100), x = rnorm(500, mean = rep(1:5, 100)), y = rnorm(500, mean = rep(1:5, 100))) dataset$fCategory <- factor(dataset$category) subdata <- subset(dataset, category %in% c("A", "D", "E")) ggplot(dataset, aes(x = x, y = y, colour = fCategory)) + geom_point() ggplot(subdata, aes(x = x, y = y, colour = fCategory)) + geom_point()
ggplot(subdata, aes(x = x, y = y, colour = fCategory)) + geom_point() + scale_colour_discrete(drop=TRUE, limits = levels(dataset$fCategory))
R version 3.0.2 (2013-09-25) Platform: x86_64-pc-linux-gnu (64-bit) locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] methods stats graphics grDevices utils datasets base other attached packages: [1] ggplot2_0.9.3.1 loaded via a namespace (and not attached): [1] colorspace_1.2-4 dichromat_2.0-0 digest_0.6.4 grid_3.0.2 [5] gtable_0.1.2 labeling_0.2 MASS_7.3-29 munsell_0.4.2 [9] plyr_1.8 proto_0.3-10 RColorBrewer_1.0-5 reshape2_1.2.2 [13] scales_0.2.3 stringr_0.6.2
library(ggplot2) dataset <- data.frame(category = rep(LETTERS[1:5], 100), x = rnorm(500, mean = rep(1:5, 100)), y = rnorm(500, mean = rep(1:5, 100))) dataset$fCategory <- factor(dataset$category) subdata <- subset(dataset, category %in% c("A", "D", "E"))
ggplot(dataset, aes(x = x, y = y, colour = category)) + geom_point() ggplot(subdata, aes(x = x, y = y, colour = category)) + geom_point()
ggplot(dataset, aes(x = x, y = y, colour = fCategory)) + geom_point() ggplot(subdata, aes(x = x, y = y, colour = fCategory)) + geom_point()
boolColors <- as.character(c("TRUE"=" boolScale <- scale_colour_manual(name="myboolean", values=boolColors) ggplot(myDataFrame, aes(date, duration)) + geom_point(aes(colour = myboolean)) + boolScale
x<-c("plyr", "psych", "tm") require(x) lapply(x, require) do.call("require", x)
lapply(x, FUN = function(X) { do.call("require", list(X)) })
ipak <- function(pkg){ new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])] if (length(new.pkg)) install.packages(new.pkg, dependencies = TRUE) sapply(pkg, require, character.only = TRUE) } packages <- c("ggplot2", "plyr", "reshape2", "RColorBrewer", "scales", "grid") ipak(packages)
library(devtools) install_github("espanta/lubripack")
mLoad <- function(...) { sapply(sapply(match.call(), as.character)[-1], require, character.only = TRUE) } mLoad(plyr, dplyr, data.table)
mrip <- function(..., install = TRUE){ reqFun <- function(pack) { if(!suppressWarnings(suppressMessages(require(pack, character.only = TRUE)))) { message(paste0("unable to load package ", pack, ": attempting to download & then load")) install.packages(pack) require(pack, character.only = TRUE) } } lapply(..., reqFun) }
library("rjson") json_file <- "http: json_data <- fromJSON(paste(readLines(json_file), collapse=""))
> library(jsonlite) > winners <- fromJSON("winners.json", flatten=TRUE) > colnames(winners) [1] "winner" "votes" "startPrice" "lastVote.timestamp" "lastVote.user.name" "lastVote.user.user_id" > winners[,c("winner","startPrice","lastVote.user.name")] winner startPrice lastVote.user.name 1 68694999 0 Lamur > winners[,c("votes")] [[1]] ts user.name user.user_id 1 Thu Mar 25 03:13:01 UTC 2010 Lamur 68694999 2 Thu Mar 25 03:13:08 UTC 2010 Lamur 68694999
l <- fromJSON( {"ts":"Thu Mar 25 03:13:01 UTC 2010", "user":{"name":"Lamur","user_id":"68694999"}}, {"ts":"Thu Mar 25 03:13:08 UTC 2010", "user":{"name":"Lamur","user_id":"68694999"}}], "lastVote":{"timestamp":1269486788526,"user": {"name":"Lamur","user_id":"68694999"}},"startPrice":0}]' ) m <- lapply( l[[1]]$votes, function(x) c(x$user[ ) m <- do.call(rbind, m)
Token <- "245432532532" source <- "http: header_type <- "applcation/json" full_token <- paste0("Bearer ", Token) response <- GET(n_source, add_headers(Authorization = full_token, Accept = h_type), timeout(120), verbose()) text_json <- content(response, type = jfile <- fromJSON(text_json) df <- as.data.frame(jfile)
> install.packages("devtools", dependencies = TRUE) .... > library(devtools) Error in library(devtools) : there is no package called ‘devtools’
> install.packages("devtools", dependencies = TRUE) Installing package into ‘/home/evanaad/R/x86_64-pc-linux-gnu-library/3.0’ (as ‘lib’ is unspecified) --- Please select a CRAN mirror for use in this session --- Warning: dependencies ‘roxygen2’, ‘BiocInstaller’, ‘rstudio’ are not available also installing the dependencies ‘httr’, ‘RCurl’ trying URL Content type opened URL ================================================== downloaded 49 Kb trying URL Content type opened URL ================================================== downloaded 850 Kb trying URL Content type opened URL ================================================== downloaded 102 Kb * installing *source* package ‘RCurl’ ... ** package ‘RCurl’ successfully unpacked and MD5 sums checked checking for curl-config... no Cannot find curl-config ERROR: configuration failed for package ‘RCurl’ * removing ‘/home/evanaad/R/x86_64-pc-linux-gnu-library/3.0/RCurl’ ERROR: dependency ‘RCurl’ is not available for package ‘httr’ * removing ‘/home/evanaad/R/x86_64-pc-linux-gnu-library/3.0/httr’ ERROR: dependencies ‘httr’, ‘RCurl’ are not available for package ‘devtools’ * removing ‘/home/evanaad/R/x86_64-pc-linux-gnu-library/3.0/devtools’ The downloaded source packages are in ‘/tmp/RtmptvmTrA/downloaded_packages’ Warning messages: 1: In install.packages("devtools", dependencies = TRUE) : installation of package ‘RCurl’ had non-zero exit status 2: In install.packages("devtools", dependencies = TRUE) : installation of package ‘httr’ had non-zero exit status 3: In install.packages("devtools", dependencies = TRUE) : installation of package ‘devtools’ had non-zero exit status
apt-get -y build-dep libcurl4-gnutls-dev apt-get -y install libcurl4-gnutls-dev
sudo apt-get install libcurl4-openssl-dev libssl-dev
$ sudo apt-get -y install libcurl4-gnutls-dev $ sudo apt-get -y install libssl-dev
R .libPaths("~/R/lib") install.packages("devtools")
Installing package(s) into ‘C:/Users/djq/Documents/R/win-library/2.13’ (as ‘lib’ is unspecified) trying URL Content type opened URL downloaded 639 Kb package The downloaded packages are in C:\TEMP\RtmpW2eAUw\downloaded_packages
Error : .onLoad failed in loadNamespace() for call: inDL(x, as.logical(local), as.logical(now), ...) error: unable to load shared object LoadLibrary failure: %1 is not a valid Win32 application. Error: package/namespace load failed for
> R.Version() $platform [1] "x86_64-pc-mingw32" $arch [1] "x86_64" $os [1] "mingw32" $system [1] "x86_64, mingw32" $status [1] "" $major [1] "2" $minor [1] "13.1" $year [1] "2011" $month [1] "07" $day [1] "08" $`svn rev` [1] "56322" $language [1] "R" $version.string [1] "R version 2.13.1 (2011-07-08)"
if (Sys.getenv("JAVA_HOME")!="") Sys.setenv(JAVA_HOME="") library(rJava)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre7\\")
options(java.home="C:\\Program Files\\Java\\jre7\\") library(rJava)
Sys.setenv(JAVA_HOME=paste(Sys.getenv("JAVA_HOME"), "jre", sep="\\"))
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jre1.8.0_31/")
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jre1.8.0_x/")
install.packages("SqlRender",INSTALL_opts="--no-multiarch")
setx PATH "C:\Program Files\Java\jre1.8.0_102\bin\server;%PATH%"
SystemRequirements: Java JDK 1.2 or higher (for JRI/REngine JDK 1.4 or higher), GNU make
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.8.0_201")
DT = data.table(x=rep(c("a","b","c"),each=2), y=c(1,3), v=1:6) setkey(DT, y) DT
DT[ , .SD[ , paste(x, v, sep="", collapse="_")], by=y]
library(data.table) library(magrittr) library(Lahman) Teams = as.data.table(Teams) Teams Pitching = as.data.table(Pitching) Pitching = Pitching[ , .(playerID, yearID, teamID, W, L, G, ERA)] Pitching
fkt = c( Teams[ , sapply(.SD, is.character), .SDcols = fkt]
setDF(Teams) sapply(Teams[ , fkt], is.character) setDT(Teams)
Teams[ , (fkt) := lapply(.SD, factor), .SDcols = fkt]
fkt_idx = which(sapply(Teams, is.factor)) Teams[ , (fkt_idx) := lapply(.SD, as.character), .SDcols = fkt_idx]
team_idx = grep( Teams[ , (team_idx) := lapply(.SD, factor), .SDcols = team_idx]
extra_var = c( models = lapply(0L:length(extra_var), combn, x = extra_var, simplify = FALSE) %>% unlist(recursive = FALSE) col16 = c( par(oma = c(2, 0, 0, 0)) sapply(models, function(rhs) { Pitching[ , coef(lm(ERA ~ ., data = .SD))[ }) %>% barplot(names.arg = sapply(models, paste, collapse = main = col = col16, las = 2L, cex.names = .8)
Pitching[G > 5, rank_in_team := frank(ERA), by = .(teamID, yearID)] Pitching[rank_in_team == 1, team_performance := Teams[copy(.SD), Rank, .(teamID, yearID)]]
Pitching[ , if (.N > 20) .(w_coef = coef(lm(ERA ~ W))[ ][ , hist(w_coef, 20, xlab = ylab = main =
nodata <- data.frame(x= numeric(0), y= integer(0), z = character(0)) str(nodata)
nodata <- as.data.frame(setNames(replicate(5,numeric(0), simplify = F), letters[1:5]))
> data.frame(aname=NA, bname=NA)[numeric(0), ] [1] aname bname <0 rows> (or 0-length row.names)
options(tibble.print_max = 50, tibble.print_min = 50)
z <- sample(c(TRUE, FALSE), 1000, rep = TRUE) sum(z) table(z)["TRUE"]
z <- c(TRUE, FALSE, NA) sum(z) table(z)["TRUE"] length(z[z == TRUE])
z <- sample(c(TRUE,FALSE),1000000,rep=TRUE) system.time(sum(z)) user system elapsed 0.03 0.00 0.03 system.time(length(z[z==TRUE])) user system elapsed 0.75 0.07 0.83 system.time(length(which(z))) user system elapsed 1.34 0.28 1.64 system.time(table(z)["TRUE"]) user system elapsed 10.62 0.52 11.19
> which(c(T, F, NA, NULL, T, F)) [1] 1 4 > which(!c(T, F, NA, NULL, T, F)) [1] 2 5
set.seed(100) x <- round(runif(100, 0, 1)) x <- x == 1 x[seq(1, length(x), 7)] <- NA
> summary(hival) Mode FALSE TRUE NA logical 4367 53 2076 >
fscore <- function(x, sol, output = if (ncol(x) != length(sol)) { stop( } else { inc <- matrix(ncol=ncol(x), nrow=nrow(x)) for (i in 1:ncol(x)) { inc[,i] <- x[,i] == sol[i] } if (output == res <- rowSums(inc) } else if (output == res <- data.frame(x, result = rowSums(inc)) } else { stop( } } return(res) }
set.seed(100) d <- as.data.frame(matrix(round(runif(200,1,5)), 10)) sol <- round(runif(20, 1, 5))
length(grep(TRUE, (gene.rep.matrix[i,1:6] > 1))) > 5
n = names(mylist) lapply(mylist, function(list.elem) { cat("What is the name of this list element?\n" })
x <- list(a=11,b=12,c=13) lapply(seq_along(x), function(y, n, i) { paste(n[[i]], y[[i]]) }, y=x, n=names(x))
lapply(seq_along(x), function(i) paste(names(x)[[i]], x[[i]]))
> x <- list(a=11, b=12, c=13) > Map(function(x, i) paste(i, x), x, names(x)) $a [1] "a 11" $b [1] "b 12" $c [1] "c 13
> mapply(function(x, i) paste(i, x), x, names(x)) a b c "a 11" "b 12" "c 13"
> lapply(list(a=10,b=20), function(x){parent.frame()$i[]}) $a [1] 1 $b [1] 2
> lapply(list(a=10,b=20), function(x){parent.frame()$i}) $a [1] 2 $b [1] 2
> x <- as.list(seq_len(1e6)) > system.time( y <- lapply(x, function(x){parent.frame()$i[]}) ) user system elapsed 2.38 0.00 2.37 > system.time( y <- lapply(x, function(x){parent.frame()$i[]}) ) user system elapsed 2.45 0.00 2.45 > system.time( y <- lapply(x, function(x){parent.frame()$i[]}) ) user system elapsed 2.41 0.00 2.41 > y[[2]] [1] 2 > system.time( y <- lapply(x, function(x){parent.frame()$i}) ) user system elapsed 1.92 0.00 1.93 > system.time( y <- lapply(x, function(x){parent.frame()$i}) ) user system elapsed 2.07 0.00 2.09 > system.time( y <- lapply(x, function(x){parent.frame()$i}) ) user system elapsed 1.89 0.00 1.89 > y[[2]] [1] 1000000
> lapply(list(a=10,b=10,c=10), function(x)substitute(x)[[3]])
L <- list(a=10,b=10,c=10) n <- names(L) lapply(L, function(x)n[substitute(x)[[3]]])
lapply(list(a=10,b=10,c=10), function(x)names(eval(sys.call(1)[[2]]))[substitute(x)[[3]]])
lapply(list(a=10,b=10,c=10), function(x)eval.parent(quote(names(X)))[substitute(x)[[3]]])
n = names(mylist) mapply(function(list.elem, names) { }, list.elem = mylist, names = n)
sapply(names(mylist), function(n) { doSomething(mylist[[n]]) cat(n, }
library(purrr) myList <- list(a=11,b=12,c=13) imap(myList, function(x, y) paste(x, y))
x <- list(a=11,b=12,c=13) lapply(x, function(z) { attributes(deparse(substitute(z)))$names } ) $a NULL $b NULL $c NULL names( lapply(x, function(z) { attributes(deparse(substitute(z)))$names } )) what_is_my_name <- function(ZZZ) return(deparse(substitute(ZZZ))) what_is_my_name(X) what_is_my_name(ZZZ=this) exists("this")
lapply(seq(3), function(i, y=list(a=14,b=15,c=16)) { paste(names(y)[[i]], y[[i]]) })
lapply(seq(3), function(i, y) { paste(names(y)[[i]], y[[i]]) }, y=list(a=14,b=15,c=16))
names(r) [1] "todos" "random" r[[1]][1] $F0 $F0$rst1 algo rst prec rorac prPo pos 1 Mean 56.4 0.450 25.872 91.2 239 6 gbm1 41.8 0.438 22.595 77.4 239 4 GAM2 37.2 0.512 43.256 50.0 172 7 gbm2 36.8 0.422 18.039 85.4 239 11 ran2 35.0 0.442 23.810 61.5 239 2 nai1 29.8 0.544 52.281 33.1 172 5 GAM3 28.8 0.403 12.743 94.6 239 3 GAM1 21.8 0.405 13.374 68.2 239 10 ran1 19.4 0.406 13.566 59.8 239 9 svm2 14.0 0.385 7.692 76.2 239 8 svm1 0.8 0.359 0.471 71.1 239 $F0$rst5 algo rst prec rorac prPo pos 1 Mean 52.4 0.441 23.604 92.9 239 7 gbm2 46.4 0.440 23.200 83.7 239 6 gbm1 31.2 0.416 16.421 79.5 239 5 GAM3 28.8 0.403 12.743 94.6 239 4 GAM2 28.2 0.481 34.815 47.1 172 11 ran2 26.6 0.422 18.095 61.5 239 2 nai1 23.6 0.519 45.385 30.2 172 3 GAM1 20.6 0.398 11.381 75.7 239 9 svm2 14.4 0.386 8.182 73.6 239 10 ran1 14.0 0.390 9.091 64.4 239 8 svm1 6.2 0.370 3.584 72.4 239
r=unlist(unlist(r,F),F) names(r) [1] "todos.F0.rst1" "todos.F0.rst5" "todos.T0.rst1" "todos.T0.rst5" "random.F0.rst1" "random.F0.rst5" [7] "random.T0.rst1" "random.T0.rst5"
ra=Reduce(rbind,Map(function(x,y) cbind(case=x,y),names(r),r))
head(ra) case algo rst prec rorac prPo pos 1 todos.F0.rst1 Mean 56.4 0.450 25.872 91.2 239 6 todos.F0.rst1 gbm1 41.8 0.438 22.595 77.4 239 4 todos.F0.rst1 GAM2 37.2 0.512 43.256 50.0 172 7 todos.F0.rst1 gbm2 36.8 0.422 18.039 85.4 239 11 todos.F0.rst1 ran2 35.0 0.442 23.810 61.5 239 2 todos.F0.rst1 nai1 29.8 0.544 52.281 33.1 172
structure(list(F0 = structure(list(rst1 = structure(list(algo = c("Mean", "gbm1", "GAM2", "gbm2", "ran2", "nai1", "GAM3", "GAM1", "ran1", "svm2", "svm1"), rst = c(56.4, 41.8, 37.2, 36.8, 35, 29.8, 28.8, 21.8, 19.4, 14, 0.8), prec = c(0.45, 0.438, 0.512, 0.422, 0.442, 0.544, 0.403, 0.405, 0.406, 0.385, 0.359), rorac = c(25.872, 22.595, 43.256, 18.039, 23.81, 52.281, 12.743, 13.374, 13.566, 7.692, 0.471), prPo = c(91.2, 77.4, 50, 85.4, 61.5, 33.1, 94.6, 68.2, 59.8, 76.2, 71.1), pos = c(239L, 239L, 172L, 239L, 239L, 172L, 239L, 239L, 239L, 239L, 239L)), .Names = c("algo", "rst", "prec", "rorac", "prPo", "pos"), row.names = c(1L, 6L, 4L, 7L, 11L, 2L, 5L, 3L, 10L, 9L, 8L), class = "data.frame"), rst5 = structure(list( algo = c("Mean", "gbm2", "gbm1", "GAM3", "GAM2", "ran2", "nai1", "GAM1", "svm2", "ran1", "svm1"), rst = c(52.4, 46.4, 31.2, 28.8, 28.2, 26.6, 23.6, 20.6, 14.4, 14, 6.2), prec = c(0.441, 0.44, 0.416, 0.403, 0.481, 0.422, 0.519, 0.398, 0.386, 0.39, 0.37), rorac = c(23.604, 23.2, 16.421, 12.743, 34.815, 18.095, 45.385, 11.381, 8.182, 9.091, 3.584), prPo = c(92.9, 83.7, 79.5, 94.6, 47.1, 61.5, 30.2, 75.7, 73.6, 64.4, 72.4), pos = c(239L, 239L, 239L, 239L, 172L, 239L, 172L, 239L, 239L, 239L, 239L )), .Names = c("algo", "rst", "prec", "rorac", "prPo", "pos" ), row.names = c(1L, 7L, 6L, 5L, 4L, 11L, 2L, 3L, 9L, 10L, 8L ), class = "data.frame")), .Names = c("rst1", "rst5")), T0 = structure(list( rst1 = structure(list(algo = c("Mean", "ran1", "GAM1", "GAM2", "gbm1", "svm1", "nai1", "gbm2", "svm2", "ran2"), rst = c(22.6, 19.4, 13.6, 10.2, 9.6, 8, 5.6, 3.4, -0.4, -0.6), prec = c(0.478, 0.452, 0.5, 0.421, 0.423, 0.833, 0.429, 0.373, 0.355, 0.356 ), rorac = c(33.731, 26.575, 40, 17.895, 18.462, 133.333, 20, 4.533, -0.526, -0.368), prPo = c(34.4, 52.1, 24.3, 40.7, 37.1, 3.1, 14.4, 53.6, 54.3, 116.4), pos = c(195L, 140L, 140L, 140L, 140L, 195L, 195L, 140L, 140L, 140L)), .Names = c("algo", "rst", "prec", "rorac", "prPo", "pos"), row.names = c(1L, 9L, 3L, 4L, 5L, 7L, 2L, 6L, 8L, 10L), class = "data.frame"), rst5 = structure(list(algo = c("gbm1", "ran1", "Mean", "GAM1", "GAM2", "svm1", "nai1", "svm2", "gbm2", "ran2"), rst = c(17.6, 16.4, 15, 12.8, 9, 6.2, 5.8, -2.6, -3, -9.2), prec = c(0.466, 0.434, 0.435, 0.5, 0.41, 0.8, 0.44, 0.346, 0.345, 0.337), rorac = c(30.345, 21.579, 21.739, 40, 14.754, 124, 23.2, -3.21, -3.448, -5.542), prPo = c(41.4, 54.3, 35.4, 22.9, 43.6, 2.6, 12.8, 57.9, 62.1, 118.6), pos = c(140L, 140L, 195L, 140L, 140L, 195L, 195L, 140L, 140L, 140L)), .Names = c("algo", "rst", "prec", "rorac", "prPo", "pos"), row.names = c(5L, 9L, 1L, 3L, 4L, 7L, 2L, 8L, 6L, 10L), class = "data.frame")), .Names = c("rst1", "rst5"))), .Names = c("F0", "T0"))
lapply2 <- function(X, FUN){ if( length(formals(FUN)) == 1 ){ R = lapply(X, FUN) }else{ R = lapply(seq_along(X), FUN=function(i){ FUN(X[[i]], i) }) } names(R) = names(X) return(R) }
setwd("C:/Temp/") packages <- installed.packages()[,"Package"] save(packages, file="Rpackages")
setwd("C:/Temp/") load("Rpackages") for (p in setdiff(packages, installed.packages()[,"Package"])) install.packages(p)
install.packages("thepackage",lib="/path/to/directory/with/libraries")
library(utils) load("G:\Setinfo\R\packagelist.RData") installed <- pkgs %in% installed.packages()[, if (length(pkgs[!installed]) >=1){ install.packages(pkgs[!installed]) }
.Last <- function(){ pkgs <- installed.packages()[,1] if (length(pkgs) > length(installed)){ save(pkgs,file="G:\Setinfo\R\packagelist.RData") } }
install.packages("installr") require(installr) updateR()
old.packages <- list.files("/Library/Frameworks/R.framework/Versions/3.2/Resources/library") for (p in old.packages) { if (!(p %in% installed.packages()[,"Package"])) { install.packages(p) } }
OLD=$(ls -d /Library/Frameworks/R.framework/Versions/*.* |tail -n 2 | head -n 1)Resources/library/ echo "packages = c(\"`ls $OLD | tail +4| paste -s -d
for (p in setdiff(packages, installed.packages()[,"Package"])) install.packages(p, dependencies=TRUE, quiet=TRUE, ask=FALSE)
rm(list = grep("^paper", ls(), value = TRUE, invert = TRUE))
0->data 1->data_1 2->data_2 3->data_3 ls() rm(list=setdiff(ls(), "data")) ls() list=setdiff(ls(), "data") rm(list) ls()
paste0("data_",seq(1,3,1)) rm(list=paste0("data_",seq(1,3,1))
require(grDevices) tN <- table(Ni <- stats::rpois(100, lambda=5)) r <- barplot(tN, col=rainbow(20), las=1)
las numeric in {0,1,2,3}; the style of axis labels. 0: always parallel to the axis [default], 1: always horizontal, 2: always perpendicular to the axis, 3: always vertical.
ggplot(...)+...+ theme(axis.text.x = element_text(angle=60, hjust=1))
H <- c(1.964138757, 1.729143013, 1.713273714, 1.706771799, 1.67977205) M <- c("SP105", "SP30", "SP244", "SP31", "SP147")
png(file = "Bargraph.jpeg", width = 500, height = 300)
barplot(H,names.arg=M,ylab="Degree ", col= rainbow(5), las=2, border = 0, cex.lab=1, cex.axis=1, font=1,col.axis="black") title(xlab="Service Providers", line=4, cex.lab=1)
data(diamonds) ggplot(data = diamonds, mapping = aes(x = clarity)) + geom_bar(aes(fill = cut))
ggplot(data = diamonds, mapping = aes(x = clarity)) + geom_bar(aes(fill = cut))+ theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
x <- 1:20 y <- runif(20) plot(x, y, axes=FALSE, frame.plot=TRUE) Axis(side=1, labels=FALSE) Axis(side=2, labels=FALSE)
library(lattice) xyplot(y ~ x, scales=list(alternating=0))
x <- 1:20 y <- runif(20) plot(x,y,xaxt = "n") axis(side = 1, at = x, labels = FALSE, tck = -0.01)
d <- data.frame(x=gl(10, 1, 10, labels=paste("long text label ", letters[1:10])), y=rnorm(10)) ggplot(d, aes(x=x, y=y)) + geom_point() + theme(text = element_text(size=20), axis.text.x = element_text(angle=90, hjust=1))
ggplot(mtcars, aes(x = factor(cyl), y = mpg))+ geom_point()+ theme(axis.text.x = element_text(color = "grey20", size = 20, angle = 90, hjust = .5, vjust = .5, face = "plain"), axis.text.y = element_text(color = "grey20", size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain"), axis.title.x = element_text(color = "grey20", size = 12, angle = 0, hjust = .5, vjust = 0, face = "plain"), axis.title.y = element_text(color = "grey20", size = 12, angle = 90, hjust = .5, vjust = .5, face = "plain"))
d <- data.frame(x=gl(10, 1, 10, labels=paste("long text label ", letters[1:10])), y=rnorm(10)) ggplot(d, aes(x=x, y=y)) + geom_point() + theme(text = element_text(size=20))
ggplot(mtcars, aes(disp, mpg)) + geom_point() + theme_bw() + theme(axis.text.x=element_text(size=rel(0.5), angle=90))
ggplot(data=df_subset,aes(x=Part,y=Removal_Frequency,fill=Part))+geom_bar(stat="identity")+theme(axis.text.x = element_blank())
table [1:3, 1:4] 0.166 0.319 0.457 0.261 0.248 ... - attr(*, "dimnames")=List of 2 ..$ x: chr [1:3] "Metro >=1 million" "Metro <1 million" "Non-Metro Counties" ..$ y: chr [1:4] "q1" "q2" "q3" "q4"
y x q1 q2 q3 q4 Metro >=1 million 0.1663567 0.2612212 0.2670441 0.3053781 Metro <1 million 0.3192857 0.2480012 0.2341030 0.1986102 Non-Metro Counties 0.4570341 0.2044960 0.2121102 0.1263597
x y Freq 1 Metro >=1 million q1 0.1663567 2 Metro <1 million q1 0.3192857 3 Non-Metro Counties q1 0.4570341 4 Metro >=1 million q2 0.2612212 5 Metro <1 million q2 0.2480012 6 Non-Metro Counties q2 0.2044960 7 Metro >=1 million q3 0.2670441 8 Metro <1 million q3 0.2341030 9 Non-Metro Counties q3 0.2121102 10 Metro >=1 million q4 0.3053781 11 Metro <1 million q4 0.1986102 12 Non-Metro Counties q4 0.1263597
> freq_t = table(cyl = mtcars$cyl, gear = mtcars$gear) > freq_t gear cyl 3 4 5 4 1 8 2 6 2 4 1 8 12 0 2 > is.matrix(freq_t) [1] TRUE > as.data.frame(freq_t) cyl gear Freq 1 4 3 1 2 6 3 2 3 8 3 12 4 4 4 8 5 6 4 4 6 8 4 0 7 4 5 2 8 6 5 1 9 8 5 2 > as.data.frame.matrix(freq_t) 3 4 5 4 1 8 2 6 2 4 1 8 12 0 2
> freq_t = table(cyl = mtcars$cyl, gear = mtcars$gear) > freq_t gear cyl 3 4 5 4 1 8 2 6 2 4 1 8 12 0 2 > data.frame(rbind(freq_t)) X3 X4 X5 4 1 8 2 6 2 4 1 8 12 0 2
pandoc -V geometry:margin=1in -o output.pdf input.md
pandoc -V geometry:paperwidth=4in -V geometry:paperheight=6in -V geometry:margin=.5in -o output.pdf input.md
--- title: Pandoc nice margins example author: naught101 geometry: margin=3cm --- body text of document
library(data.table) dt <- data.table(a = 1, b = 2, c = 3) dt[, 2] dt[, 2:3] dt[, "a"] dt[, c("a", "b")]
b<-data.table(a=1,b=2,c=3,d=4) b[,.SD,.SDcols=c(1:2)]
library(data.table) dt <- data.table(a = 1:2, b = 2:3, c = 3:4) dt[ , .(b, c)]
dt <- data.table(a=1:2, b=2:3, c=3:4) keep_cols = c("a", "c") dt[, ..keep_cols]
library(data.table) dt <- data.table(a=1:2, b=2:3, c=3:4) dt[,.SD,.SDcols=-2] dt[,.SD,.SDcols=c(1,3)]
brew tap homebrew/science brew install Caskroom/cask/xquartz brew install r
==> Installing dependencies for r: gmp, mpfr, libmpc, isl, gcc
--with-java Build with java support --with-openblas Build with openblas support
brew install cask brew cask install xquartz brew tap homebrew/science brew install r
brew install cask brew tap homebrew/science brew install r
brew install cask brew install Caskroom/cask/xquartz brew install r
brew tap homebrew/science brew install Caskroom/cask/xquartz brew install r
If you meant "r" specifically: It was migrated from homebrew/science to homebrew/core.
brew tap homebrew/core brew install Caskroom/cask/xquartz brew install r
data = data.frame( asihckhdoydkhxiydfgfTgdsx = sample(LETTERS[1:3], 100, replace=TRUE), a30mvxigxkghc5cdsvxvyv0ja = sample(LETTERS[1:3], 100, replace=TRUE), value = rnorm(100) ) columns = names(data)[-3] ddply(data, columns, summarize, value=mean(value)) data %.% group_by(columns) %.% summarise(Value = mean(value))
data = data.frame( asihckhdoydkhxiydfgfTgdsx = sample(LETTERS[1:3], 100, replace=TRUE), a30mvxigxkghc5cdsvxvyv0ja = sample(LETTERS[1:3], 100, replace=TRUE), value = rnorm(100) ) columns = names(data)[-3] library(dplyr) df1 <- data %>% group_by_at(vars(one_of(columns))) %>% summarize(Value = mean(value)) df2 <- plyr::ddply(data, columns, plyr::summarize, value=mean(value)) table(df1 == df2, useNA =
asihckhdoydkhxiydfgfTgdsx a30mvxigxkghc5cdsvxvyv0ja Value <fctr> <fctr> <dbl> 1 A A 0.04095002 2 A B 0.24943935 3 A C -0.25783892 4 B A 0.15161805 5 B B 0.27189974 6 B C 0.20858897 7 C A 0.19502221 8 C B 0.56837548 9 C C -0.22682998
library(dplyr) df <- data.frame( asihckhdoydk = sample(LETTERS[1:3], 100, replace=TRUE), a30mvxigxkgh = sample(LETTERS[1:3], 100, replace=TRUE), value = rnorm(100) ) grp_cols <- names(df)[-3] dots <- lapply(grp_cols, as.symbol) df %>% group_by_(.dots=dots) %>% summarise(n = n())
Source: local data frame [9 x 3] Groups: asihckhdoydk asihckhdoydk a30mvxigxkgh n 1 A A 10 2 A B 10 3 A C 13 4 B A 14 5 B B 10 6 B C 12 7 C A 9 8 C B 12 9 C C 10
df %.% group_by(.groups = c("asdfgfTgdsx", "asdfk30v0ja"))
library(dplyr) df <- data.frame( asihckhdoydk = sample(LETTERS[1:3], 100, replace=TRUE), a30mvxigxkgh = sample(LETTERS[1:3], 100, replace=TRUE), value = rnorm(100) ) df %.% regroup(list(quote(asihckhdoydk), quote(a30mvxigxkgh))) %.% summarise(n = n())
vars <- setdiff(names(df), "value") vars2 <- lapply(vars, as.symbol) df %.% regroup(vars2) %.% summarise(n = n())
data %>% group_by_(.dots = columns) %>% summarise(Value = mean(value))
cols = c("cyl","gear") mtcars %.% s_group_by(cols) %.% s_summarise("avdisp=mean(disp), max(disp)") %.% arrange(avdisp)
df %.% group_by(asdfgfTgdsx, asdfk30v0ja) %.% summarise(Value = mean(value)) > df %.% + group_by(asdfgfTgdsx, asdfk30v0ja) %.% + summarise(Value = mean(value)) Source: local data frame [9 x 3] Groups: asdfgfTgdsx asdfgfTgdsx asdfk30v0ja Value 1 A C 0.046538002 2 C B -0.286359899 3 B A -0.305159419 4 C A -0.004741504 5 B B 0.520126476 6 C C 0.086805492 7 B C -0.052613078 8 A A 0.368410146 9 A B 0.088462212
...: variables to group by. All tbls accept variable names, some will also accept functons of variables. Duplicated groups will be silently dropped.
df %.% group_by("asdfgfTgdsx", "asdfk30v0ja") %.% summarise(Value = mean(value))
data = data.frame( my.a = sample(LETTERS[1:3], 100, replace=TRUE), my.b = sample(LETTERS[1:3], 100, replace=TRUE), value = rnorm(100) ) group_by(data,newcol=paste(my.a,my.b,sep="_")) %>% summarise(Value=mean(value))
library(wakefield) df_foo = r_series(rnorm, 10, 1000) df_foo %>% mutate_each( funs(Quantized = . > 0) ) %>% group_by_( .dots = grep("Quantized", names(.), value = TRUE) ) %>% summarize_each( funs(sum(., na.rm = TRUE)), contains("X_") )
iris %>% group_by(.dots ="Species") %>% summarise(meanpetallength = mean(Petal.Length))
iris %>% group_by(.dots = names(iris)[5]) %>% summarise_at("Petal.Length", mean)
data %>% group_by(.dots =names(data)[-3]) %>% summarise_at("value", mean)
> df <- data.frame(x=c(1,2), y=c(3,4), z=c(5,6)) > df x y z 1 1 3 5 2 2 4 6 > testFunc <- function(a, b) a + b
> df[,c( x z 1 1 5 2 2 6 > lapply(df[,c( Error in a + b :
df = data.frame( delta=c(delta_values), power=c(power_values), sig.level=c(sig.level_values) ) lapply(df, power.t.test(delta_from_each_row_of_df, power_from_each_row_of_df, sig.level_from_each_row_of_df ))
dat <- data.frame(x=c(1,2), y=c(3,4), z=c(5,6)) apply(dat[,c(
> df <- data.frame(x=c(1,2), y=c(3,4), z=c(5,6)) > df x y z 1 1 3 5 2 2 4 6 > mapply(function(x,y) x+y, df$x, df$z) [1] 6 8 > cbind(df,f = mapply(function(x,y) x+y, df$x, df$z) ) x y z f 1 1 3 5 6 2 2 4 6 8
> library(dplyr) > myf <- function(tens, ones) { 10 * tens + ones } > x <- data.frame(hundreds = 7:9, tens = 1:3, ones = 4:6) > mutate(x, value = myf(tens, ones)) hundreds tens ones value 1 7 1 4 14 2 8 2 5 25 3 9 3 6 36
> library(plyr) > x <- data.frame(tens = 1:3, ones = 4:6) > mdply(x, function(tens, ones) { 10 * tens + ones }) tens ones V1 1 1 4 14 2 2 5 25 3 3 6 36
> library(plyr) > x <- data.frame(hundreds = 7:9, tens = 1:3, ones = 4:6) > mdply(x, function(tens, ones) { 10 * tens + ones }) Error in (function (tens, ones) : unused argument (hundreds = 7)
for (row in 1:nrow(df)) { df$newvar[row] <- testFunc(df$x[row], df$z[row]) }
tdf<-as.data.frame(t(df)) as.data.frame(lapply(tdf, myFunctionForRow()))
newdf <- as.data.frame(lapply(df, function(x) {sapply(x, myFunctionForEachCell()}))
powvalues <- list(power=0.9,delta=2) do.call(power.t.test,powvalues)
df <- data.frame(delta=c(1,1,2,2), power=c(.90,.85,.75,.45))
result <- lapply( split(df,1:nrow(df)), function(x) do.call(power.t.test,x) ) > str(result) List of 4 $ 1:List of 8 ..$ n : num 22 ..$ delta : num 1 ..$ sd : num 1 ..$ sig.level : num 0.05 ..$ power : num 0.9 ..$ alternative: chr "two.sided" ..$ note : chr "n is number in *each* group" ..$ method : chr "Two-sample t test power calculation" ..- attr(*, "class")= chr "power.htest" $ 2:List of 8 ..$ n : num 19 ..$ delta : num 1 ..$ sd : num 1 ..$ sig.level : num 0.05 ..$ power : num 0.85 ... ...
library(data.table) sample_fxn = function(x,y,z){ return((x+y)*z) } df = data.table(A = 1:5,B=seq(2,10,2),C = 6:10) > df A B C 1: 1 2 6 2: 2 4 7 3: 3 6 8 4: 4 8 9 5: 5 10 10
df[,new_column := sample_fxn(A,B,C)] > df A B C new_column 1: 1 2 6 18 2: 2 4 7 42 3: 3 6 8 72 4: 4 8 9 108 5: 5 10 10 150
df[,new_column2 := sample_fxn(A,B,2)] > df A B C new_column new_column2 1: 1 2 6 18 6 2: 2 4 7 42 12 3: 3 6 8 72 18 4: 4 8 9 108 24 5: 5 10 10 150 30
mean.height = list(BOY=69.5, GIRL=64.0) subjects = data.frame(gender = factor(c("BOY", "GIRL", "GIRL", "BOY")) , height = c(71.0, 59.3, 62.1, 62.1)) apply(height, 1, function(x) x[2] - mean.height[[x[1]]])
apply(subjects, 1, function(x) as.numeric(x[2]) - mean.height[[x[1]]])
mapply(function(x,y) y - mean.height[[x]], subjects$gender, subjects$height)
subjects$height - unlist(mean.height[subjects$gender])
x <- data.frame(v1=1:20,v2=1:20,v3=1:20,v4=letters[1:20])
library(microbenchmark) microbenchmark( dplyr::select_if(mtcars, is.numeric), Filter(is.numeric, mtcars) )
categorical<-select_if(df,is.factor) str(categorical)
install.packages("PCAmixdata") library(PCAmixdata) split <- splitmix(YourDataframe) X1 <- split$X.quanti(Gives numerical columns in the dataset) X2 <- split$X.quali (Gives categorical columns in the dataset)
numeric_cols <- sapply(dataframe, is.numeric) %>% which %>% names %>% setdiff(., c("id_variable", "dep_var")) dataframe %<>% dplyr::mutate_at(numeric_cols, function(x) your_function(x))
df <- data.frame( a = sample(1:5, n, replace = TRUE), b = sample(1:5, n, replace = TRUE), c = sample(1:5, n, replace = TRUE), d = sample(1:5, n, replace = TRUE), grp = sample(1:3, n, replace = TRUE) ) df %>% group_by(grp) %>% summarise(mean(a))
library(dplyr) library(purrrlyr) library(data.table) library(benchr) n <- 10000 df <- data.frame( a = sample(1:5, n, replace = TRUE), b = sample(1:5, n, replace = TRUE), c = sample(1:5, n, replace = TRUE), d = sample(1:5, n, replace = TRUE), grp = sample(1:3, n, replace = TRUE) ) dt <- setDT(df) benchmark( dplyr = df %>% group_by(grp) %>% summarise_all(funs(mean)), purrrlyr = df %>% slice_rows("grp") %>% dmap(mean), data.table = dt[, lapply(.SD, mean), by = grp] )
options(scipen = 100, dplyr.width = Inf, dplyr.print_max = Inf) library(dplyr) packageVersion("dplyr") set.seed(123) df <- data_frame( a = sample(1:5, 10, replace=T), b = sample(1:5, 10, replace=T), c = sample(1:5, 10, replace=T), d = sample(1:5, 10, replace=T), grp = as.character(sample(1:3, 10, replace=T)) ) df %>% group_by(grp) %>% summarise_each(.vars = letters[1:4], .funs = c(mean="mean"))
df %>% group_by(grp) %>% summarise_at(.vars = letters[1:4], .funs = c(mean="mean")) df %>% group_by(grp) %>% summarise_at(.vars = names(.)[1:4], .funs = c(mean="mean")) df %>% group_by(grp) %>% summarise_at(.vars = vars(a,b,c,d), .funs = c(mean="mean")) df %>% group_by(grp) %>% summarise_all(.funs = c(mean="mean")) df %>% group_by(grp) %>% summarise_if(.predicate = function(x) is.numeric(x), .funs = funs(mean="mean"))
df %>% group_by(grp) %>% summarise_at(.vars = letters[1:2], .funs = c(Mean="mean", Sd="sd"))
df %>% group_by(grp) %>% summarise(mean(a), mean(b), mean(c), mean(d))
grp mean(a) mean(b) mean(c) mean(d) 1 1 2.500000 3.500000 2.000000 3.0 2 2 3.800000 3.200000 3.200000 2.8 3 3 3.666667 3.333333 2.333333 3.0
> ddply(df, .(grp), colwise(mean)) grp a b c d 1 1 4.333333 4.00 1.000000 2.000000 2 2 2.000000 2.75 2.750000 2.750000 3 3 3.000000 4.00 4.333333 3.666667
> microbenchmark(ddply(df, .(grp), colwise(mean)), df %>% group_by(grp) %>% summarise_each(funs(mean))) Unit: milliseconds expr min lq mean ddply(df, .(grp), colwise(mean)) 3.278002 3.331744 3.533835 df %>% group_by(grp) %>% summarise_each(funs(mean)) 1.001789 1.031528 1.109337 median uq max neval 3.353633 3.378089 7.592209 100 1.121954 1.133428 2.292216 100
library(tidyverse) set.seed(101) df <- tibble(a = sample(1:5, 10, replace=T), b = sample(1:5, 10, replace=T), c = sample(1:5, 10, replace=T), d = sample(1:5, 10, replace=T), grp = sample(1:3, 10, replace=T)) df %>% gather(key = variable, value = value, a:d) %>% group_by(grp, variable) %>% summarize(mean = mean(value)) %>% spread(variable, mean)
a1 <- data.frame(a = 1:5, b=letters[1:5]) a2 <- data.frame(a = 1:3, b=letters[1:3])
a1 <- data.frame(a = 1:5, b=letters[1:5]) a2 <- data.frame(a = 1:3, b=letters[1:3]) rows.in.a1.that.are.not.in.a2 <- function(a1,a2) { a1.vec <- apply(a1, 1, paste, collapse = "") a2.vec <- apply(a2, 1, paste, collapse = "") a1.without.a2.rows <- a1[!a1.vec %in% a2.vec,] return(a1.without.a2.rows) } rows.in.a1.that.are.not.in.a2(a1,a2)
library(compare) a1 <- data.frame(a = 1:5, b = letters[1:5]) a2 <- data.frame(a = 1:3, b = letters[1:3]) comparison <- compare(a1,a2,allowAll=TRUE) comparison$tM
difference <- data.frame(lapply(1:ncol(a1),function(i)setdiff(a1[,i],comparison$tM[,i]))) colnames(difference) <- colnames(a1) difference
a1 <- data.frame(a = 1:5, b=letters[1:5]) a2 <- data.frame(a = 1:3, b=letters[1:3]) require(sqldf) a1NotIna2 <- sqldf(
> a1 a b 1 1 a 2 2 b 3 3 c 4 4 d 5 5 e > a2 a b 1 1 a 2 2 b 3 3 c > setdiff(a1,a2) a b 1 4 d 2 5 e
a1$included_a1 <- TRUE a2$included_a2 <- TRUE res <- merge(a1, a2, all=TRUE)
> df1 <- data.frame(a = 1:5, b=letters[1:5], row = 1:5) > df2 <- data.frame(a = 1:3, b=letters[1:3], row = 1:3) > df_compare = compare_df(df1, df2, "row") > df_compare$comparison_df row chng_type a b 1 4 + 4 d 2 5 + 5 e
library(compareDF) df1 = data.frame(id1 = c("Mazda RX4", "Mazda RX4 Wag", "Datsun 710", "Hornet 4 Drive", "Duster 360", "Merc 240D"), id2 = c("Maz", "Maz", "Dat", "Hor", "Dus", "Mer"), hp = c(110, 110, 181, 110, 245, 62), cyl = c(6, 6, 4, 6, 8, 4), qsec = c(16.46, 17.02, 33.00, 19.44, 15.84, 20.00)) df2 = data.frame(id1 = c("Mazda RX4", "Mazda RX4 Wag", "Datsun 710", "Hornet 4 Drive", " Hornet Sportabout", "Valiant"), id2 = c("Maz", "Maz", "Dat", "Hor", "Dus", "Val"), hp = c(110, 110, 93, 110, 175, 105), cyl = c(6, 6, 4, 6, 8, 6), qsec = c(16.46, 17.02, 18.61, 19.44, 17.02, 20.22)) > df_compare$comparison_df grp chng_type id1 id2 hp cyl qsec 1 1 - Hornet Sportabout Dus 175 8 17.02 2 2 + Datsun 710 Dat 181 4 33.00 3 2 - Datsun 710 Dat 93 4 18.61 4 3 + Duster 360 Dus 245 8 15.84 5 7 + Merc 240D Mer 62 4 20.00 6 8 - Valiant Val 105 6 20.22
Daff Comparison: ‘a2’ vs. ‘a1’ First 6 and last 6 patch lines: @@ a b 1 ... ... ... 2 3 c 3 +++ 4 d 4 +++ 5 e 5 ... ... ... 6 ... ... ... 7 3 c 8 +++ 4 d 9 +++ 5 e
# # # XinY <- function(x, y, by = intersect(names(x), names(y)), by.x = by, by.y = by, notin = FALSE, incomparables = NULL, ...) { fix.by <- function(by, df) { if(is.null(by)) by <- numeric(0L) by <- as.vector(by) nc <- ncol(df) if(is.character(by)) by <- match(by, c("row.names", names(df))) - 1L else if(is.numeric(by)) { if(any(by < 0L) || any(by > nc)) stop(" } else if(is.logical(by)) { if(length(by) != nc) stop(" by <- seq_along(by)[by] } else stop(" if(any(is.na(by))) stop(" unique(by) } nx <- nrow(x <- as.data.frame(x)); ny <- nrow(y <- as.data.frame(y)) by.x <- fix.by(by.x, x) by.y <- fix.by(by.y, y) if((l.b <- length(by.x)) != length(by.y)) stop(" if(l.b == 0L) { x } else { if(any(by.x == 0L)) { x <- cbind(Row.names = I(row.names(x)), x) by.x <- by.x + 1L } if(any(by.y == 0L)) { y <- cbind(Row.names = I(row.names(y)), y) by.y <- by.y + 1L } if(l.b == 1L) { bx <- x[, by.x]; if(is.factor(bx)) bx <- as.character(bx) by <- y[, by.y]; if(is.factor(by)) by <- as.character(by) } else { bx <- x[, by.x, drop=FALSE]; by <- y[, by.y, drop=FALSE] names(bx) <- names(by) <- paste("V", seq_len(ncol(bx)), sep="") bz <- do.call("paste", c(rbind(bx, by), sep = "\r")) bx <- bz[seq_len(nx)] by <- bz[nx + seq_len(ny)] } comm <- match(bx, by, 0L) if (notin) { res <- x[comm == 0,] } else { res <- x[comm > 0,] } } attr(res, "row.names") <- .set_row_names(nrow(res)) res } XnotinY <- function(x, y, by = intersect(names(x), names(y)), by.x = by, by.y = by, notin = TRUE, incomparables = NULL, ...) { XinY(x,y,by,by.x,by.y,notin,incomparables) }
a1 <- data.frame(a = 1:5, b=letters[1:5]) a2 <- data.frame(a = 1:3, b=letters[1:3]) rows.in.a1.that.are.not.in.a2 <- function(a1,a2) { a1.vec <- apply(a1, 1, paste, collapse = "") a2.vec <- apply(a2, 1, paste, collapse = "") a1.without.a2.rows <- a1[!a1.vec %in% a2.vec,] return(a1.without.a2.rows) } library(data.table) setDT(a1) setDT(a2) r <- fsetdiff(a1, a2) all.equal(r, rows.in.a1.that.are.not.in.a2(a1,a2)) a1 <- rbind(a1, a1, a1) a2 <- rbind(a2, a2, a2) r <- fsetdiff(a1, a2, all = TRUE) all.equal(r, rows.in.a1.that.are.not.in.a2(a1,a2))
a1 <- data.frame(a = 1:5, b = letters[1:5]) a2 <- data.frame(a = 1:3, b = letters[1:3]) different.names <- (!a1$a %in% a2$a) not.in.a2 <- a1[different.names,]
match_df <- function (x, y, on = NULL) { if (is.null(on)) { on <- intersect(names(x), names(y)) message("Matching on: ", paste(on, collapse = ", ")) } keys <- join.keys(x, y, on) x[keys$x %in% keys$y, , drop = FALSE] }
library(plyr) negate_match_df <- function (x, y, on = NULL) { if (is.null(on)) { on <- intersect(names(x), names(y)) message("Matching on: ", paste(on, collapse = ", ")) } keys <- join.keys(x, y, on) x[!(keys$x %in% keys$y), , drop = FALSE] }
DT = data.table(x = rep(c("a", "b", "c"), each = 3), y = c(1, 3, 6), v = 1:9)
DELETE FROM table_name WHERE some_column=some_value
DT = data.table(col1 = 1:1e6) cols = paste0( for (col in cols){ DT[, (col) := 1:1e6] } keep.idxs = sample(1e6, 9e5, FALSE) DT.subset = data.table(col1 = DT[[ for (col in cols){ DT.subset[, (col) := DT[[col]][keep.idxs]] DT[, (col) := NULL] }
delete <- function(DT, del.idxs) { keep.idxs <- setdiff(DT[, .I], del.idxs); cols = names(DT); DT.subset <- data.table(DT[[1]][keep.idxs]); setnames(DT.subset, cols[1]); for (col in cols[2:length(cols)]) { DT.subset[, (col) := DT[[col]][keep.idxs]]; DT[, (col) := NULL]; } return(DT.subset); }
> dim(dat) [1] 1419393 25 > system.time(dat <- delete(dat,del.idxs)) user system elapsed 0.23 0.02 0.25 > dim(dat) [1] 1404715 25 >
delete <- function(DT, del.idxs) { varname = deparse(substitute(DT)) keep.idxs <- setdiff(DT[, .I], del.idxs) cols = names(DT); DT.subset <- data.table(DT[[1]][keep.idxs]) setnames(DT.subset, cols[1]) for (col in cols[2:length(cols)]) { DT.subset[, (col) := DT[[col]][keep.idxs]] DT[, (col) := NULL]; } assign(varname, DT.subset, envir = globalenv()) return(invisible()) } DT = data.table(x = rep(c("a", "b", "c"), each = 3), y = c(1, 3, 6), v = 1:9) delete(DT, 3)
data(iris) iris <- data.table(iris) iris[3] iris[-3] You can also use .SD to select or remove rows: iris[,.SD[3]] iris[,.SD[3:6],by=,.(Species)] iris[,.SD[-3]] iris[,.SD[-3:-6],by=,.(Species)]
iris[order(-Sepal.Length)][Sepal.Length > 3,.SD[1:3],by=,.(Species)]
m_iris <- data.table(t(iris))[,V3:=NULL] d_iris <- data.table(t(iris))[,V3:=V2]
m_iris <- data.table(t(d_iris)); setnames(d_iris,names(iris)) d_iris <- data.table(t(m_iris)); setnames(m_iris,names(iris))
d_iris[,Key:=paste0(Sepal.Length,Sepal.Width,Petal.Length,Petal.Width,Species)] d_iris[!duplicated(Key),] d_iris[!duplicated(paste0(Sepal.Length,Sepal.Width,Petal.Length,Petal.Width,Species)),]
d_iris[,I:=.I,] d_iris[,Key:=paste0(Sepal.Length,Sepal.Width,Petal.Length,Petal.Width,Species)] for(i in d_iris[duplicated(Key),I]) {print(i)} for(i in d_iris[duplicated(Key),I]) {d_iris <- d_iris[!I == i,]}
X x v foo 1: c 8 4 2: b 7 2 X[1] <- c(0) X x v foo 1: 0 0 0 2: b 7 2 X[2] <- c(NA) X x v foo 1: 0 0 0 2: NA NA NA X <- X[x != 0,] X <- X[!is.na(x),]
oldw <- getOption("warn") options(warn = -1) [your "silenced" code] options(warn = oldw)
structure(list(a = c(1, 3, 4, 6, 3, 2, 5, 1), b = c(1, 3, 4, 2, 6, 7, 2, 6), c = c(6, 3, 6, 5, 3, 6, 5, 3), d = c(6, 2, 4, 5, 3, 7, 2, 6), e = c(1, 2, 4, 5, 6, 7, 6, 3), f = c(2, 3, 4, 2, 2, 7, 5, 2)), .Names = c("a", "b", "c", "d", "e", "f"), row.names = c(NA, 8L), class = "data.frame") a b c d e f 1 1 1 6 6 1 2 2 3 3 3 2 2 3 3 4 4 6 4 4 4 4 6 2 5 5 5 2 5 3 6 3 3 6 2 6 2 7 6 7 7 7 7 5 2 5 2 6 5 8 1 6 3 6 3 2
library(dplyr) df <- mutate(df, if (a == 2 | a == 5 | a == 7 | (a == 1 & b == 4)){g = 2}, if (a == 0 | a == 1 | a == 4 | a == 3 | c == 4) {g = 3})
a b c d e f g 1 1 1 6 6 1 2 3 2 3 3 3 2 2 3 3 3 4 4 6 4 4 4 3 4 6 2 5 5 5 2 NA 5 3 6 3 3 6 2 NA 6 2 7 6 7 7 7 2 7 5 2 5 2 6 5 2 8 1 6 3 6 3 2 3
df %>% mutate(g = ifelse(a == 2 | a == 5 | a == 7 | (a == 1 & b == 4), 2, ifelse(a == 0 | a == 1 | a == 4 | a == 3 | c == 4, 3, NA)))
df %>% mutate(g = if_else(a == 2 | a == 5 | a == 7 | (a == 1 & b == 4), 2, if_else(a == 0 | a == 1 | a == 4 | a == 3 | c == 4, 3, NA_real_)))
df %>% mutate(g = case_when(a == 2 | a == 5 | a == 7 | (a == 1 & b == 4) ~ 2, a == 0 | a == 1 | a == 4 | a == 3 | c == 4 ~ 3, TRUE ~ NA_real_))
require(data.table) setDT(df) df[a %in% c(0,1,3,4) | c == 4, g := 3L] df[a %in% c(2,5,7) | (a==1 & b==4), g := 2L]
require(data.table) require(dplyr) DT <- setDT(lapply(1:6, function(x) sample(7, 1e7, TRUE))) setnames(DT, letters[1:6]) DF <- as.data.frame(DT) DT_fun <- function(DT) { DT[(a %in% c(0,1,3,4) | c == 4), g := 3L] DT[a %in% c(2,5,7) | (a==1 & b==4), g := 2L] } DPLYR_fun <- function(DF) { mutate(DF, g = ifelse(a %in% c(2,5,7) | (a==1 & b==4), 2L, ifelse(a %in% c(0,1,3,4) | c==4, 3L, NA_integer_))) } BASE_fun <- function(DF) { transform(DF, g = ifelse(a %in% c(2,5,7) | (a==1 & b==4), 2L, ifelse(a %in% c(0,1,3,4) | c==4, 3L, NA_integer_))) } system.time(ans1 <- DT_fun(DT)) system.time(ans2 <- DPLYR_fun(DF)) system.time(ans3 <- BASE_fun(DF)) identical(as.data.frame(ans1), as.data.frame(ans2)) identical(as.data.frame(ans1), as.data.frame(ans3))
df %>% mutate(g = case_when(a %in% c(2,5,7) | (a==1 & b==4) ~ 2L, a %in% c(0,1,3,4) | c == 4 ~ 3L, TRUE~as.integer(NA)))
require(data.table) require(mosaic) require(dplyr) require(microbenchmark) DT <- setDT(lapply(1:6, function(x) sample(7, 10000, TRUE))) setnames(DT, letters[1:6]) DF <- as.data.frame(DT) DPLYR_case_when <- function(DF) { DF %>% mutate(g = case_when(a %in% c(2,5,7) | (a==1 & b==4) ~ 2L, a %in% c(0,1,3,4) | c==4 ~ 3L, TRUE~as.integer(NA))) } DT_fun <- function(DT) { DT[(a %in% c(0,1,3,4) | c == 4), g := 3L] DT[a %in% c(2,5,7) | (a==1 & b==4), g := 2L] } DPLYR_fun <- function(DF) { mutate(DF, g = ifelse(a %in% c(2,5,7) | (a==1 & b==4), 2L, ifelse(a %in% c(0,1,3,4) | c==4, 3L, NA_integer_))) } mosa_fun <- function(DF) { mutate(DF, g = derivedFactor( "2" = (a == 2 | a == 5 | a == 7 | (a == 1 & b == 4)), "3" = (a == 0 | a == 1 | a == 4 | a == 3 | c == 4), .method = "first", .default = NA )) } microbenchmark( DT_fun(DT), DPLYR_fun(DF), DPLYR_case_when(DF), mosa_fun(DF), times=20 )
expr min lq mean median uq max neval DT_fun(DT) 1.503589 1.626971 2.054825 1.755860 2.292157 3.426192 20 DPLYR_fun(DF) 2.420798 2.596476 3.617092 3.484567 4.184260 6.235367 20 DPLYR_case_when(DF) 2.153481 2.252134 6.124249 2.365763 3.119575 72.344114 20 mosa_fun(DF) 396.344113 407.649356 413.743179 412.412634 416.515742 459.974969 20
library(dplyr) library(mosaic) df <- mutate(df, g = derivedFactor( "2" = (a == 2 | a == 5 | a == 7 | (a == 1 & b == 4)), "3" = (a == 0 | a == 1 | a == 4 | a == 3 | c == 4), .method = "first", .default = NA ))
structure(list(a = c(1, 3, 4, 6, 3, 2, 5, 1), b = c(1, 3, 4, 2, 6, 7, 2, 6), c = c(6, 3, 6, 5, 3, 6, 5, 3), d = c(6, 2, 4, 5, 3, 7, 2, 6), e = c(1, 2, 4, 5, 6, 7, 6, 3), f = c(2, 3, 4, 2, 2, 7, 5, 2)), .Names = c("a", "b", "c", "d", "e", "f"), row.names = c(NA, 8L), class = "data.frame") -> df df %>% mutate( g = case_when( a == 2 | a == 5 | a == 7 | (a == 1 & b == 4 ) ~ 2, a == 0 | a == 1 | a == 4 | a == 3 | c == 4 ~ 3 ))
fooBar <- function(x,y=NULL){ if(!is.null(y)) x <- x+y return(x) } fooBar(3) fooBar(3,1.5)
fooBar <- function(x,...){ z <- list(...) if(!is.null(z$y)) x <- x+z$y return(x) } fooBar(3) fooBar(3,y=1.5)
fooBar <- function(x,y){ if(missing(y)) { x } else { x + y } } fooBar(3,1.5) fooBar(3)
i <- function(a, b) { c(missing(a), missing(b)) } i() i(a = 1) i(b = 2) i(1, 2)
fun <- function(x,levels=levels(x)){ blah blah blah }
fun <- function(x,levels){ if(missing(levels)){ [calculate levels here] } blah blah blah }
fun <- function(...) UseMethod(...) fun.character <- function(x,y,z){ blah blah blah } fun.numeric <- function(x,a,b){ blah blah blah } fun.default <- function(x,m,n){ blah blah blah }
fun <- (x,...){ params <- list(...) optionalParamNames <- letters unusedParams <- setdiff(names(params),optionalParamNames) if(length(unusedParams)) stop( blah blah blah }
foo <- function(x,y=length(x)){ x <- x[1:10] print(y) } foo(1:20)
foo <- function(x,y=length(x)){ print(y) x <- x[1:10] } foo(1:20)
> sink function (file = NULL, append = FALSE, type = c("output", "message"), split = FALSE) { type <- match.arg(type) if (type == "message") { if (is.null(file)) file <- stderr() else if (!inherits(file, "connection") || !isOpen(file)) stop(" if (split) stop("cannot split the message connection") .Internal(sink(file, FALSE, TRUE, FALSE)) } else { closeOnExit <- FALSE if (is.null(file)) file <- -1L else if (is.character(file)) { file <- file(file, ifelse(append, "a", "w")) closeOnExit <- TRUE } else if (!inherits(file, "connection")) stop(" .Internal(sink(file, closeOnExit, FALSE, split)) } }
fun <- function(x, ...){ y=NULL parms=list(...) for (name in names(parms) ) { assign(name, parms[[name]]) } print(is.null(y)) }
Name Month Rate1 Rate2 Aira 1 12 23 Aira 2 18 73 Aira 3 19 45 Ben 1 53 19 Ben 2 22 87 Ben 3 19 45 Cat 1 22 87 Cat 2 67 43 Cat 3 45 32
Name Rate1 Rate2 Aira 23.21 12.2 Ben 45.23 43.9 Cat 33.22 32.2
d <- read.table(text= Aira 1 12 23 Aira 2 18 73 Aira 3 19 45 Ben 1 53 19 Ben 2 22 87 Ben 3 19 45 Cat 1 22 87 Cat 2 67 43 Cat 3 45 32 aggregate(d[, 3:4], list(d$Name), mean) Group.1 Rate1 Rate2 1 Aira 16.33333 47.00000 2 Ben 31.33333 50.33333 3 Cat 44.66667 54.00000
library(dplyr) d %>% group_by(Name) %>% summarise_at(vars(-Month), funs(mean(., na.rm=TRUE))) Name Rate1 Rate2 <fct> <dbl> <dbl> 1 Aira 16.3 47.0 2 Ben 31.3 50.3 3 Cat 44.7 54.0
library(plyr) ddply(d, .(Name), summarize, Rate1=mean(Rate1), Rate2=mean(Rate2)) Name Rate1 Rate2 1 Aira 16.33333 47.00000 2 Ben 31.33333 50.33333 3 Cat 44.66667 54.00000
library(data.table) mydt <- structure(list(Name = c("Aira", "Aira", "Aira", "Ben", "Ben", "Ben", "Cat", "Cat", "Cat"), Month = c(1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L), Rate1 = c(15.6396600443877, 2.15649279424609, 6.24692918928743, 2.37658797276116, 34.7500663272292, 3.28750138697048, 29.3265553981065, 17.9821839334431, 10.8639802575958), Rate2 = c(17.1680489538369, 5.84231656330206, 8.54330866437461, 5.88415184986176, 3.02064294862551, 17.2053351400752, 16.9552950199166, 2.56058000170089, 15.7496228048122)), .Names = c("Name", "Month", "Rate1", "Rate2"), row.names = c(NA, -9L), class = c("data.table", "data.frame"))
mydt.mean <- mydt[,lapply(.SD,mean,na.rm=TRUE),by=Name,.SDcols=colstoavg] mydt.mean Name Rate1 Rate2 1: Aira 8.014361 10.517891 2: Ben 13.471385 8.703377 3: Cat 19.390907 11.755166
d <- structure(list(Name = structure(c(1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L), .Label = c("Aira", "Ben", "Cat"), class = "factor"), Month = c(1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L), Rate1 = c(12L, 18L, 19L, 53L, 22L, 19L, 22L, 67L, 45L), Rate2 = c(23L, 73L, 45L, 19L, 87L, 45L, 87L, 43L, 32L)), .Names = c("Name", "Month", "Rate1", "Rate2"), class = "data.frame", row.names = c(NA, -9L )) head(d) Name Month Rate1 Rate2 1 Aira 1 12 23 2 Aira 2 18 73 3 Aira 3 19 45 4 Ben 1 53 19 5 Ben 2 22 87 6 Ben 3 19 45 library("reshape2") mym <- melt(d, id = c("Name")) res <- dcast(mym, Name ~ variable, mean) res
setDT(d) d[, .(Rate1 = mean(Rate1), Rate2 = mean(Rate2)), by = .(Name)]
d[, lapply(.SD, mean), by = .(Name), .SDcols = 3:4]
my.data <- read.table(text = ' Name Month Rate1 Rate2 Aira 1 12 23 Aira 2 18 73 Aira 3 19 45 Ben 1 53 19 Ben 2 22 87 Ben 3 19 45 Cat 1 22 87 Cat 2 67 43 Cat 3 45 32 Rate1.mean <- with(my.data, ave(Rate1, Month, FUN = function(x) mean(x, na.rm = TRUE))) Rate2.mean <- with(my.data, ave(Rate2, Month, FUN = function(x) mean(x, na.rm = TRUE))) my.data <- data.frame(my.data, Rate1.mean, Rate2.mean) my.data
my.data <- read.table(text = ' Name Month Rate1 Rate2 Aira 1 12 23 Aira 2 18 73 Aira 3 19 45 Ben 1 53 19 Ben 2 22 87 Ben 3 19 45 Cat 1 22 87 Cat 2 67 43 Cat 3 45 32 by.month <- as.data.frame(do.call("rbind", by(my.data, my.data$Month, FUN = function(x) colMeans(x[,3:4])))) colnames(by.month) <- c( by.month <- cbind(Month = rownames(by.month), by.month) my.data <- merge(my.data, by.month, by = my.data
my.data <- read.table(text = ' Name Month Rate1 Rate2 Aira 1 12 23 Aira 2 18 73 Aira 3 19 45 Ben 1 53 19 Ben 2 22 87 Ben 3 19 45 Cat 1 22 87 Cat 2 67 43 Cat 3 45 32 ly.mean <- lapply(split(my.data, my.data$Month), function(x) c(Mean = colMeans(x[,3:4]))) ly.mean <- as.data.frame(do.call("rbind", ly.mean)) ly.mean <- cbind(Month = rownames(ly.mean), ly.mean) my.data <- merge(my.data, ly.mean, by = my.data
my.data <- read.table(text = ' Name Month Rate1 Rate2 Aira 1 12 23 Aira 2 18 73 Aira 3 19 45 Ben 1 53 19 Ben 2 22 87 Ben 3 19 45 Cat 1 22 87 Cat 2 67 43 Cat 3 45 32 my.data sy.mean <- t(sapply(split(my.data, my.data$Month), function(x) colMeans(x[,3:4]))) colnames(sy.mean) <- c( sy.mean <- data.frame(Month = rownames(sy.mean), sy.mean, stringsAsFactors = FALSE) my.data <- merge(my.data, sy.mean, by = my.data
my.data <- read.table(text = ' Name Month Rate1 Rate2 Aira 1 12 23 Aira 2 18 73 Aira 3 19 45 Ben 1 53 19 Ben 2 22 87 Ben 3 19 45 Cat 1 22 87 Cat 2 67 43 Cat 3 45 32 my.summary <- with(my.data, aggregate(list(Rate1, Rate2), by = list(Month), FUN = function(x) { mon.mean = mean(x, na.rm = TRUE) } )) my.summary <- do.call(data.frame, my.summary) colnames(my.summary) <- c( my.summary my.data <- merge(my.data, my.summary, by = my.data
cbind(lm(d$Rate1~-1+d$Name)$coef,lm(d$Rate2~-1+d$Name)$coef) > [,1] [,2] >d$NameAira 16.33333 47.00000 >d$NameBen 31.33333 50.33333 >d$NameCat 44.66667 54.00000
library(sqldf) x <- read.table(text= Aira 1 12 23 Aira 2 18 73 Aira 3 19 45 Ben 1 53 19 Ben 2 22 87 Ben 3 19 45 Cat 1 22 87 Cat 2 67 43 Cat 3 45 32 sqldf(" select Name ,avg(Rate1) as Rate1_float ,avg(Rate2) as Rate2_float ,avg(Rate1) as Rate1 ,avg(Rate2) as Rate2 from x group by Name ")
grep("for", capture.output(getAnywhere("apply")), value = TRUE)
m <- as.data.frame(matrix(1:1e7, ncol = 1e5)) system.time(colMeans(m)) system.time(sapply(m, mean)) system.time(apply(m, 2, mean)) system.time(for(i in 1:ncol(m)) mean(m[, i]))
system.time(as.matrix(m)) system.time(for(i in 1:ncol(m)) m[, i])
mm = as.matrix(m) system.time(colMeans(mm)) system.time(apply(mm, 2, mean)) system.time(for(i in 1:ncol(mm)) mean(mm[, i]))
double oppC(double x) { return(ISNAN(x) ? NA_REAL : -x); } SEXP sapply_oppC(SEXP x) { SEXP ans = PROTECT(allocVector(REALSXP, LENGTH(x))); for(int i = 0; i < LENGTH(x); i++) REAL(ans)[i] = oppC(REAL(VECTOR_ELT(x, i))[0]); UNPROTECT(1); return(ans); } /* call an R function inside a C function; * will be used with SEXP sapply_oppR(SEXP x, SEXP f) { SEXP call = PROTECT(allocVector(LANGSXP, 2)); SETCAR(call, install(CHAR(STRING_ELT(f, 0)))); SEXP ans = PROTECT(allocVector(REALSXP, LENGTH(x))); for(int i = 0; i < LENGTH(x); i++) { SETCADR(call, VECTOR_ELT(x, i)); REAL(ans)[i] = REAL(eval(call, R_GlobalEnv))[0]; } UNPROTECT(2); return(ans); }
system("R CMD SHLIB /home/~/tmp.c") dyn.load("/home/~/tmp.so")
set.seed(007) myls = rep_len(as.list(c(NA, runif(3))), 1e7) oppR = function(x) -x for_oppR = compiler::cmpfun(function(x, f) { f = match.fun(f) ans = numeric(length(x)) for(i in seq_along(x)) ans[[i]] = f(x[[i]]) return(ans) })
system.time({ sapplyC = .Call("sapply_oppC", myls) }) system.time({ sapplyRC = .Call("sapply_oppR", myls, "oppR") }) system.time({ sapplyRCprim = .Call("sapply_oppR", myls, "-") }) system.time({ forR = for_oppR(myls, "oppR") }) system.time({ forRprim = for_oppR(myls, "-") }) system.time({ sapplyR = unlist(lapply(myls, oppR)) }) system.time({ sapplyRprim = unlist(lapply(myls, `-`)) }) all.equal(sapplyR, sapplyRprim) all.equal(sapplyR, sapplyC) all.equal(sapplyR, sapplyRC) all.equal(sapplyR, sapplyRCprim) all.equal(sapplyR, forR) all.equal(sapplyR, forRprim)
all_C = inline::cfunction(sig = c(R_ls = "list"), body = ' SEXP tmp, ans; PROTECT(ans = allocVector(REALSXP, LENGTH(R_ls))); double *ptmp, *pans = REAL(ans); for(int i = 0; i < LENGTH(R_ls); i++) { pans[i] = 0.0; PROTECT(tmp = coerceVector(VECTOR_ELT(R_ls, i), REALSXP)); ptmp = REAL(tmp); for(int j = 0; j < LENGTH(tmp); j++) pans[i] += ptmp[j]; pans[i] /= LENGTH(tmp); UNPROTECT(1); } UNPROTECT(1); return(ans); C_and_R = inline::cfunction(sig = c(R_ls = "list"), body = ' SEXP call, ans, ret; PROTECT(call = allocList(2)); SET_TYPEOF(call, LANGSXP); SETCAR(call, install("mean")); PROTECT(ans = allocVector(VECSXP, LENGTH(R_ls))); PROTECT(ret = allocVector(REALSXP, LENGTH(ans))); for(int i = 0; i < LENGTH(R_ls); i++) { SETCADR(call, VECTOR_ELT(R_ls, i)); SET_VECTOR_ELT(ans, i, eval(call, R_GlobalEnv)); } double *pret = REAL(ret); for(int i = 0; i < LENGTH(ans); i++) pret[i] = REAL(VECTOR_ELT(ans, i))[0]; UNPROTECT(3); return(ret); R_lapply = function(x) unlist(lapply(x, mean)) R_loop = function(x) { ans = numeric(length(x)) for(i in seq_along(x)) ans[i] = mean(x[[i]]) return(ans) } R_loopcmp = compiler::cmpfun(R_loop) set.seed(007); myls = replicate(1e4, runif(1e3), simplify = FALSE) all.equal(all_C(myls), C_and_R(myls)) all.equal(all_C(myls), R_lapply(myls)) all.equal(all_C(myls), R_loop(myls)) all.equal(all_C(myls), R_loopcmp(myls)) microbenchmark::microbenchmark(all_C(myls), C_and_R(myls), R_lapply(myls), R_loop(myls), R_loopcmp(myls), times = 15)
means <- numeric(length(mtcars)) for (i in seq_along(mtcars)) { means[i] <- mean(mtcars[[i]]) } sds <- numeric(length(mtcars)) for (i in seq_along(mtcars)) { sds[i] <- sd(mtcars[[i]]) }
means <- vapply(mtcars, mean, numeric(1)) sds <- vapply(mtcars, sd, numeric(1))
x = sample(100L, 500e6L, TRUE) y = sample(100L, 500e6L, TRUE) z = vector("integer", 500e6L) system.time(.Call("Csum", x, y, z)) system.time(.Call("Csum", x, y, z))
x = sample(100L, 500e6L, TRUE) y = sample(100L, 500e6L, TRUE) z = vector("integer", 500e6L) system.time(.Call("Cvecsum", x, y, z))
for(R_xlen_t i = 0; i < n; i++) { if (realIndx) REAL(ind)[0] = (double)(i + 1); else INTEGER(ind)[0] = (int)(i + 1); tmp = eval(R_fcall, rho); if (MAYBE_REFERENCED(tmp)) tmp = lazy_duplicate(tmp); SET_VECTOR_ELT(ans, i, tmp); }
ffR = function(x) { ans = vector("list", length(x)) for(i in seq_along(x)) ans[[i]] = x[[i]] ans } ffC = inline::cfunction(sig = c(R_x = "data.frame"), body = ' SEXP ans; PROTECT(ans = allocVector(VECSXP, LENGTH(R_x))); for(int i = 0; i < LENGTH(R_x); i++) SET_VECTOR_ELT(ans, i, VECTOR_ELT(R_x, i)); UNPROTECT(1); return(ans); set.seed(007) myls = replicate(1e3, runif(1e3), simplify = FALSE) mydf = as.data.frame(myls) all.equal(ffR(myls), ffC(myls)) all.equal(ffR(mydf), ffC(mydf)) microbenchmark::microbenchmark(ffR(myls), ffC(myls), ffR(mydf), ffC(mydf), times = 30)
nbaplot <- ggplot(nba, aes(x= MIN, y= PTS, colour="green", label=Name)) + geom_point()
ggplot(nba, aes(x= MIN, y= PTS, colour="green", label=Name))+ geom_point() +geom_text(aes(label=Name),hjust=0, vjust=0)
ggplot(nba, aes(x= MIN, y= PTS, colour="green", label=Name))+ geom_point() + geom_text(aes(label=ifelse(PTS>24,as.character(Name),
library(ggplot2) library(ggrepel) nba <- read.csv("http: nbaplot <- ggplot(nba, aes(x= MIN, y = PTS)) + geom_point(color = "blue", size = 3) nbaplot + geom_label_repel(aes(label = Name), box.padding = 0.35, point.padding = 0.5, segment.color = theme_classic()
ggplot(nba, aes(x= MIN, y = PTS, label = Name)) + geom_point(color = ifelse(nba$PTS > 25, "red", "blue"), size = 3) + geom_text_repel(data = subset(nba, PTS > 25), nudge_y = 32 - subset(nba, PTS > 25)$PTS, segment.size = 0.2, segment.color = "grey50", direction = "x") + scale_x_continuous(expand = c(0.05, 0.05)) + scale_y_continuous(limits = c(NA, 33)) + theme_classic(base_size = 12)
xlimit <- 36 ylimit <- 24 ggplot(myData)+geom_point(aes(myX,myY))+ geom_label(data=myData[myData$myX > xlimit & myData$myY> ylimit,], aes(myX,myY,myLabel))
File f = new File ("C:/some_dir/a") f.getName() f.getFullAbsolutePath()
basename("C:/some_dir/a.ext") dirname("C:/some_dir/a.ext")
td <- expand.grid( hjust=c(0, 0.5, 1), vjust=c(0, 0.5, 1), angle=c(0, 45, 90), text="text" ) ggplot(td, aes(x=hjust, y=vjust)) + geom_point() + geom_text(aes(label=text, angle=angle, hjust=hjust, vjust=vjust)) + facet_grid(~angle) + scale_x_continuous(breaks=c(0, 0.5, 1), expand=c(0, 0.2)) + scale_y_continuous(breaks=c(0, 0.5, 1), expand=c(0, 0.2))
DF <- data.frame(x=LETTERS[1:3],y=1:3) p <- ggplot(DF, aes(x,y)) + geom_point() + ylab("Very long label for y") + opts(axis.title.y=theme_text(angle=0)) p1 <- p + opts(axis.title.x=theme_text(hjust=0)) + xlab("X-axis at hjust=0") p2 <- p + opts(axis.title.x=theme_text(hjust=0.5)) + xlab("X-axis at hjust=0.5") p3 <- p + opts(axis.title.x=theme_text(hjust=1)) + xlab("X-axis at hjust=1") library(ggExtra) align.plots(p1, p2, p3)
DF <- data.frame(x=c("a\na","b","cdefghijk","l"),y=1:4) p <- ggplot(DF, aes(x,y)) + geom_point() p1 <- p + opts(axis.text.x=theme_text(vjust=0, colour="red")) + xlab("X-axis labels aligned with vjust=0") p2 <- p + opts(axis.text.x=theme_text(vjust=0.5, colour="red")) + xlab("X-axis labels aligned with vjust=0.5") p3 <- p + opts(axis.text.x=theme_text(vjust=1, colour="red")) + xlab("X-axis labels aligned with vjust=1") library(ggExtra) align.plots(p1, p2, p3)
DF <- data.frame(x=c("a","b","cdefghijk","l"),y=1:4) p <- ggplot(DF, aes(x,y)) + geom_point() p + opts(axis.text.x=theme_text(vjust=0)) p + opts(axis.text.x=theme_text(vjust=1)) p + opts(axis.text.x=theme_text(vjust=2))
p + opts(axis.text.x=theme_text(hjust=0, angle=90)) p + opts(axis.text.x=theme_text(hjust=0.5 angle=90)) p + opts(axis.text.x=theme_text(hjust=1, angle=90)) p + opts(axis.text.x=theme_text(hjust=2, angle=90))
x <- 1:100 typeof(x) y <- x+1 typeof(y) object.size(y) z <- x+1L typeof(z) object.size(z)
library(lubridate) days = 365*2 date = seq(as.Date("2000-01-01"), length = days, by = "day") year = year(date) month = month(date) x1 = cumsum(rnorm(days, 0.05)) x2 = cumsum(rnorm(days, 0.05)) df1 = data.frame(date, year, month, x1, x2)
df2=aggregate(x1 ~ year+month, data=df1, sum, na.rm=TRUE) head(df2)
require(reshape2) df_melt <- melt(df1, id = c("date", "year", "month")) dcast(df_melt, year + month ~ variable, sum) 1 2000 1 -80.83405 -224.9540159 2 2000 2 -223.76331 -288.2418017 3 2000 3 -188.83930 -481.5601913 4 2000 4 -197.47797 -473.7137420 5 2000 5 -259.07928 -372.4563522
aggregate(cbind(x1, x2) ~ year + month, data = df1, sum, na.rm = TRUE) year month x1 x2 1 2000 1 7.862002 -7.469298 2 2001 1 276.758209 474.384252 3 2000 2 13.122369 -128.122613 ... 23 2000 12 63.436507 449.794454 24 2001 12 999.472226 922.726589
library(data.table) df2 <- setDT(df1)[, lapply(.SD, sum), by=.(year, month), .SDcols=c("x1","x2")] setDF(df2)
require(plyr) df2 <- ddply(df1, c("year", "month"), function(x) colSums(x[c("x1", "x2")]))
detach(package:plyr) require(Hmisc) df2 <- with(df1, summarize( cbind(x1, x2), by=llist(year, month), FUN=colSums))
library(dplyr) df2 <- df1 %>% group_by(year, month) %>% summarise_all(sum) df2 <- df1 %>% group_by(year, month) %>% summarise_at(vars(x1, x2), sum) df2 <- df1 %>% group_by(year, month) %>% summarise_at(vars(-date), sum) df2 <- df1 %>% group_by(year, month) %>% summarise_if(is.numeric, sum)
year month x1 x2 <dbl> <dbl> <dbl> <dbl> 1 2000 1 -73.58134 -92.78595 2 2000 2 -57.81334 -152.36983 3 2000 3 122.68758 153.55243 4 2000 4 450.24980 285.56374 5 2000 5 678.37867 384.42888 6 2000 6 792.68696 530.28694 7 2000 7 908.58795 452.31222 8 2000 8 710.69928 719.35225 9 2000 9 725.06079 914.93687 10 2000 10 770.60304 863.39337
library(reshape2) recast(df1, year + month ~ variable, sum, id.var = c("date", "year", "month"))
aggregate( x = df1[c("x1", "x2")], by = df1[c("year", "month")], FUN = sum, na.rm = TRUE )
colsToAggregate <- c("x1") aggregateBy <- c("year", "month") dummyaggfun <- function(v, na.rm = TRUE) { c(sum = sum(v, na.rm = na.rm), mean = mean(v, na.rm = na.rm)) } aggregate(df1[colsToAggregate], by = df1[aggregateBy], FUN = dummyaggfun)
dir("\\.csv$") %>% set_names() %>% map(read.csv) %>% imap(~ transform(.x, filename = .y))
library(purrr) n <- 1e4 x <- 1:n f <- function(x) NULL mb <- microbenchmark::microbenchmark( lapply = lapply(x, f), map = map(x, f) ) summary(mb, unit = "ns")$median / n
library(repurrrsive) library(purrr) library(microbenchmark) library(ggplot2) mbm <- microbenchmark( lapply = lapply(got_chars[1:4], function(x) x[[2]]), lapply_2 = lapply(got_chars[1:4], `[[`, 2), map_shortcut = map(got_chars[1:4], 2), map = map(got_chars[1:4], function(x) x[[2]]), times = 100 ) autoplot(mbm)
a <- c(1,3,5,7,9) b <- c(3,6,8,9,10) c <- c(2,3,4,5,7,9)
tst <- c(unique(a),unique(b),unique(c)) tst <- tst[duplicated(tst)] tst[duplicated(tst)]
intersect_all <- function(a,b,...){ all_data <- c(a,b,...) require(plyr) count_data<- length(list(a,b,...)) freq_dist <- count(all_data) intersect_data <- freq_dist[which(freq_dist$freq==count_data),"x"] intersect_data } intersect_all(a,b,c)
intersect_all <- function(a,b,...){ Reduce(intersect, list(a,b,...)) } intersect_all(a,b,c)
x <- rnorm(100) hist(x, xlim=range(x), xlab= "Variable Label", ylab="density", main="Title of plot", prob=TRUE, ps=30)
hist(x, xlim=range(x), xlab= "Variable Lable", ylab="density", main="Title of plot", prob=TRUE) hist(x, xlim=range(x), xlab= "Variable Lable", ylab="density", main="Title of plot", prob=TRUE, cex=1.5)
hist(x, xlim=range(x), xlab= "Variable Lable", ylab="density", main="Title of plot", prob=TRUE, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
library(cluster) data(votes.repub) agn1 <- agnes(votes.repub, metric = "manhattan", stand = TRUE) plot(agn1, which.plots=2)
bp=hist(values, labels = FALSE, main= xlab= text(x=bp$mids, y=bp$counts, labels=bp$counts ,cex=2,pos=3)
do.call(rbind, list(data.frame(a = 1:2, b = 2:3), data.frame(b = 1:2, a = 2:3))) rbindlist(list(data.frame(a = 1:5, b = 2:6), data.frame(b = 1:5, a = 2:6)))
library(data.table) library(dplyr) set.seed(1L) names = paste0("V", 1:500) cols = 500L foo <- function() { data = as.data.frame(setDT(lapply(1:cols, function(x) sample(10)))) setnames(data, sample(names)) } n = 10e3L ll = vector("list", n) for (i in 1:n) { .Call("Csetlistelt", ll, i, foo()) } system.time(ans1 <- rbindlist(ll)) system.time(ans2 <- rbindlist(ll, use.names=TRUE)) system.time(ans3 <- do.call("rbind", ll)) system.time(ans4 <- bind_rows(ll)) identical(ans2, setDT(ans3)) identical(ans2, setDT(ans4))
require(dplyr) db <- src_sqlite(tempfile(), create = TRUE) iris2 <- copy_to(db, iris) iris2$Species
library("dplyr") db <- src_sqlite(tempfile(), create = TRUE) iris2 <- copy_to(db, iris) vec <- pull(iris2, Species) head(vec)
pull <- function(x,y) {x[,if(is.name(substitute(y))) deparse(substitute(y)) else y, drop = FALSE][[1]]}
iris2 %>% pull( iris2 %>% pull(Species) iris2 %>% pull(5)
[1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 15.0 21.4
> mtcars %>% pull(5) [1] 3.90 3.90 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 3.92 3.07 3.07 3.07 2.93 3.00 3.23 4.08 4.93 4.22 3.70 2.76 3.15 3.73 3.08 4.08 4.43 [28] 3.77 4.22 3.62 3.54 4.11
iris2 %>% select(Species) %>% collect %>% .[["Species"]]
iris2 %>% select(Species) %>% unlist(use.names = FALSE)
library(magrittr) library(dplyr) iris2 %>% select(Species) %>% extract2(1)
iris2 %>% select(Species) %>% collect() %$% Species
expr_value cell_type 1 5.345618 bj fibroblast 2 5.195871 bj fibroblast 3 5.247274 bj fibroblast 4 5.929771 hesc 5 5.873096 hesc 6 5.665857 hesc 7 6.791656 hips 8 7.133673 hips 9 7.574058 hips 10 7.208041 hips 11 7.402100 hips 12 7.167792 hips 13 7.156971 hips 14 7.197543 hips 15 7.035404 hips 16 7.269474 hips 17 6.715059 hips 18 7.434339 hips 19 6.997586 hips 20 7.619770 hips 21 7.490749 hips
expr_value cell_type 1 5.929771 hesc 2 5.873096 hesc 3 5.665857 hesc
expr_value cell_type 1 5.345618 bj fibroblast 2 5.195871 bj fibroblast 3 5.247274 bj fibroblast 4 5.929771 hesc 5 5.873096 hesc 6 5.665857 hesc
expr[expr$cell_type %in% c("hesc", "bj fibroblast"), ]
subset(expr, cell_type == "hesc") subset(expr, cell_type %in% c("bj fibroblast", "hesc"))
filter(expr, cell_type %in% c("bj fibroblast", "hesc"))
> expr[expr[2] == expr_value cell_type 4 5.929771 hesc 5 5.873096 hesc 6 5.665857 hesc
library(dplyr) filter(expr, cell_type == "hesc") filter(expr, cell_type == "hesc" | cell_type == "bj fibroblast")
columnNameToFilter = "cell_type" expr[expr[[columnNameToFilter]] == "hesc", ]
expr[grepl("hesc",expr$cell_type),] expr[grepl("bj fibroblast|hesc",expr$cell_type),]
library(data.table) expr <- data.table(expr) expr[cell_type == "hesc"] expr[cell_type %in% c("hesc","fibroblast")]
expr[cell_type %like% "hesc"|cell_type %like% "fibroblast"]
library(JuliaCall) julia <- julia_setup() julia_command("a = sqrt(2)"); julia_eval("a") julia_eval("sqrt(2)") julia_call("sqrt", 2) julia_eval("sqrt")(2)
data(mtcars) smp_size <- floor(0.75 * nrow(mtcars)) set.seed(123) train_ind <- sample(seq_len(nrow(mtcars)), size = smp_size) train <- mtcars[train_ind, ] test <- mtcars[-train_ind, ]
set.seed(101) sample <- sample.int(n = nrow(data), size = floor(.75*nrow(data)), replace = F) train <- data[sample, ] test <- data[-sample, ]
require(caTools) set.seed(101) sample = sample.split(data$anycolumn, SplitRatio = .75) train = subset(data, sample == TRUE) test = subset(data, sample == FALSE)
bound <- floor((nrow(df)/4)*3) df <- df[sample(nrow(df)), ] df.train <- df[1:bound, ] df.test <- df[(bound+1):nrow(df), ]
mtcars$id <- 1:nrow(mtcars) train <- mtcars %>% dplyr::sample_frac(.75) test <- dplyr::anti_join(mtcars, train, by =
a library(dplyr) train<-sample_frac(a, 0.7) sid<-as.numeric(rownames(train)) test<-a[-sid,]
library(caret) intrain<-createDataPartition(y=sub_train$classe,p=0.7,list=FALSE) training<-m_train[intrain,] testing<-m_train[-intrain,]
data(mtcars) n = nrow(mtcars) trainIndex = sample(1:n, size = round(0.7*n), replace=FALSE) train = mtcars[trainIndex ,] test = mtcars[-trainIndex ,]
data <- data.frame(matrix(rnorm(400), nrow=100)) splitdata <- split(data[1:nrow(data),],sample(rep(1:4,as.integer(nrow(data)/4)))) test <- splitdata[[1]] train <- rbind(splitdata[[1]],splitdata[[2]],splitdata[[3]])
library(dplyr) set.seed(275) data.train <- sample_frac(Default, 0.7) train_index <- as.numeric(rownames(data.train)) data.test <- Default[-train.index, ]
row_count <- nrow(orders_pivotted) shuffled_rows <- sample(row_count) train <- orders_pivotted[head(shuffled_rows,floor(row_count*0.75)),] test <- orders_pivotted[tail(shuffled_rows,floor(row_count*0.25)),]
df_split <- function (df, number){ sizedf <- length(df[,1]) bound <- sizedf/number list <- list() for (i in 1:number){ list[i] <- list(df[((i*bound+1)-bound):(i*bound),]) } return(list) }
x <- matrix(c(1:10), ncol=1) x x.split <- df_split(x,5) x.split
data split = sample.split(data$DependentcoloumnName, SplitRatio = 0.6) training_set = subset(data, split == TRUE) test_set = subset(data, split == FALSE)
data(mtcars) set.seed(123) train.size<-.7 train.ind<-runif(nrow(mtcars))<train.size train.df<-mtcars[train.ind,] test.df<-mtcars[!train.ind,]
require(caTools) set.seed(101) split1=sample.split(data$anycol,SplitRatio=2/3) train=subset(data,split1==TRUE) test=subset(data,split1==FALSE)
data_split <- initial_split(data, prop = .75) data_train <- training(data_split) data_test <- testing(data_split)
all <- 1:nrow(df) train_i <- sort(sample(all, round(nrow(df)*0.75,digits = 0),replace=FALSE)) test_i <- all[-train_i]
require(openssl) require(data.table) set.seed(1) population <- as.character(1e5:(1e6-1)) N <- 1e4 sample1 <- data.table(id = sort(sample(population, N))) sample2 <- sample1[-sample(N, 1)] sample1 sample2 nrow(merge(sample1, sample2))
test <- sample(N-1, N/2, replace = F) test1 <- sample1[test, .(id)] test2 <- sample2[test, .(id)] nrow(test1)
md5_bit_mod <- function(x, m = 2L) { as.integer(as.hexmode(substr(openssl::md5(x), 1, 1)) %% m) } test1a <- sample1[md5_bit_mod(id) == 0L, .(id)] test2a <- sample2[md5_bit_mod(id) == 0L, .(id)] nrow(merge(test1a, test2a))
set.seed(123) llwork<-sample(1:length(mydata),round(0.75*length(mydata),digits=0)) wmydata<-mydata[llwork, ] tmydata<-mydata[-llwork, ]
d.del <- df %.% group_by(TrackingPixel) %.% summarise(MonthDelivery = as.integer(sum(Revenue))) %.% arrange(desc(MonthDelivery))
mtcars$type <- rownames(mtcars) dplyr::filter(mtcars, grepl( mpg cyl disp hp drat wt qsec vs am gear carb type 1 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 Mazda RX4 2 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 Mazda RX4 Wag 3 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 Toyota Corolla 4 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 Toyota Corona
library(tidyverse) mtcars$type <- rownames(mtcars) mtcars %>% filter(str_detect(type,
object <- "stringr" stringr::str_count(object) stringr::str_sub(object, 1, 3) stringr::str_detect(object, "str") stringr::str_replace(object, "str", "") base::nchar(object) base::substr(object, 1, 3) base::grepl("str", object) base::sub("str", "", object)
library(rbenchmark) library(tidyverse) df <- read_csv("Downloads/2008.csv") print(dim(df)) benchmark( "str_detect" = {df %>% filter(str_detect(Dest, "grepl" = {df %>% filter(grepl( replications = 10, columns = c("test", "replications", "elapsed", "relative", "user.self", "sys.self"))
library(tidyverse) mtcars %>% rownames_to_column("type") %>% filter(str_detect(type,
vector = [] values = [ for i in range(0,len(values)): vector.append(values[i])
> vector = c() > values = c( > for (i in 1:length(values)) +
for (i in 1:length(values)) vector[i] <- values[i] for (i in 1:length(values)) vector <- c(vector, values[i]) for (v in values) vector <- c(vector, v)
set.seed(21) values <- sample(letters, 1e4, TRUE) vector <- character(0) system.time( for (i in 1:length(values)) vector[i] <- values[i] ) vector <- character(length(values)) system.time( for (i in 1:length(values)) vector[i] <- values[i] )
c(vector, values) append(vector, values) vector[(length(vector) + 1):(length(vector) + length(values))] <- values
a=numeric(0) b=1 system.time( { while(b<=1e5){ b=b+1 a<-c(a,pi) } } ) a=numeric(0) b=1 system.time( { while(b<=1e5){ b=b+1 a<-append(a,pi) } } )
a=numeric(0) system.time( { while(length(a)<1e7){ a[length(a)+1]=pi } } )
a=numeric(0) system.time( { while(length(a)<1e7){ a[[length(a)+1]]=pi } } )
a=numeric(0) b=1 system.time( { while(b<=1e7){ a[[b]]=pi b=b+1 } } )
a=rep(NaN,2*1e7) b=1 system.time( { while(b<=1e7){ a[[b]]=pi b=b+1 } a=a[!is.na(a)] } )
a=numeric(0) b=0 step_count=0 step=1e6 system.time( { repeat{ a_step=rep(NaN,step) for(i in seq_len(step)){ b=b+1 a_step[[i]]=pi if(b>=1e7){ a_step=a_step[1:i] break } } a[(step_count*step+1):b]=a_step if(b>=1e7) break step_count=step_count+1 } } )
X = NULL X values = letters[1:10] values X = append(X,values) X X = append(X,letters[23:26]) X
> vec <- c(letters[1:3]) > values<- c(1,2,3) > for (i in 1:length(values)){ print(paste("length of vec", length(vec))); vec[length(vec)+1] <- values[i] } [1] "length of vec 3" [1] "length of vec 4" [1] "length of vec 5" > vec [1] "a" "b" "c" "1" "2" "3"
library(ggplot2) require(RCurl) link<-getURL("https: datos<- read.csv(textConnection(link),header=TRUE,sep=";") datos$fecha <- as.POSIXct(datos[,1], format="%d/%m/%Y") temp = ggplot(data=datos,aes(x=fecha, y=TempMax,colour="1")) + geom_line(colour="red") + opts(title="TITULO") + ylab("Temperatura (C)") + xlab(" ") + scale_y_continuous(limits = c(-10,40)) + geom_line(aes(x=fecha, y=TempMedia,colour="2"),colour="green") + geom_line(aes(x=fecha, y=TempMin,colour="2"),colour="blue") + scale_colour_manual(values=c("red","green","blue")) temp
"date","Tmax","Tmin","Tmed","Precip.diaria","Wmax","Wmed" 2000-07-31 00:00:00,-1.7,-1.7,-1.7,-99.9,20.4,20.4 2000-08-01 00:00:00,22.9,19,21.11,-99.9,6.3,2.83 2000-08-03 00:00:00,24.8,12.3,19.23,-99.9,6.8,3.87 2000-08-04 00:00:00,20.3,9.4,14.4,-99.9,8.3,5.29 2000-08-08 00:00:00,25.7,14.4,19.5,-99.9,7.9,3.22 2000-08-09 00:00:00,29.8,16.2,22.14,-99.9,8.5,3.27 2000-08-10 00:00:00,30,17.8,23.5,-99.9,7.7,3.61 2000-08-11 00:00:00,27.5,17,22.68,-99.9,8.8,3.85 2000-08-12 00:00:00,24,13.3,17.32,-99.9,8.4,3.49
dd_sub = datos[,c(20, 2,3,5)] library(reshape2) dd = melt(dd_sub, id=c("fecha"))
ggplot(dd) + geom_line(aes(x=fecha, y=value, colour=variable)) + scale_colour_manual(values=c("red","green","blue"))
datos <- structure(list(fecha = structure(c(1317452400, 1317538800, 1317625200, 1317711600, 1317798000, 1317884400, 1317970800, 1318057200, 1318143600, 1318230000, 1318316400, 1318402800, 1318489200, 1318575600, 1318662000, 1318748400, 1318834800, 1318921200, 1319007600, 1319094000), class = c("POSIXct", "POSIXt"), tzone = ""), TempMax = c(26.58, 27.78, 27.9, 27.44, 30.9, 30.44, 27.57, 25.71, 25.98, 26.84, 33.58, 30.7, 31.3, 27.18, 26.58, 26.18, 25.19, 24.19, 27.65, 23.92), TempMedia = c(22.88, 22.87, 22.41, 21.63, 22.43, 22.29, 21.89, 20.52, 19.71, 20.73, 23.51, 23.13, 22.95, 21.95, 21.91, 20.72, 20.45, 19.42, 19.97, 19.61), TempMin = c(19.34, 19.14, 18.34, 17.49, 16.75, 16.75, 16.88, 16.82, 14.82, 16.01, 16.88, 17.55, 16.75, 17.22, 19.01, 16.95, 17.55, 15.21, 14.22, 16.42)), .Names = c("fecha", "TempMax", "TempMedia", "TempMin"), row.names = c(NA, 20L), class = "data.frame")
ggplot(data = datos, aes(x = fecha)) + geom_line(aes(y = TempMax, colour = "TempMax")) + geom_line(aes(y = TempMedia, colour = "TempMedia")) + geom_line(aes(y = TempMin, colour = "TempMin")) + scale_colour_manual("", breaks = c("TempMax", "TempMedia", "TempMin"), values = c("red", "green", "blue")) + xlab(" ") + scale_y_continuous("Temperatura (C)", limits = c(-10,40)) + labs(title="TITULO")
ggplot(data = datos, aes(x = fecha)) + geom_line(aes(y = TempMax, colour = "TempMax")) + geom_line(aes(y = TempMedia, colour = "TempMedia")) + geom_line(aes(y = TempMin, colour = "TempMin")) + scale_colour_manual("", values = c("TempMedia"="green", "TempMax"="red", "TempMin"="blue")) + xlab(" ") + scale_y_continuous("Temperatura (C)", limits = c(-10,40)) + labs(title="TITULO")
ggplot(data = datos, aes(x = fecha)) + geom_line(aes(y = TempMax, colour = "TempMax")) + geom_line(aes(y = TempMedia, colour = "TempMedia")) + geom_line(aes(y = TempMin, colour = "TempMin")) + scale_colour_manual("", breaks = c("TempMedia", "TempMax", "TempMin"), values = c("TempMedia"="green", "TempMax"="red", "TempMin"="blue")) + xlab(" ") + scale_y_continuous("Temperatura (C)", limits = c(-10,40)) + labs(title="TITULO")
data <- structure(list(month = structure(c(1317452400, 1317538800, 1317625200, 1317711600, 1317798000, 1317884400, 1317970800, 1318057200, 1318143600, 1318230000, 1318316400, 1318402800, 1318489200, 1318575600, 1318662000, 1318748400, 1318834800, 1318921200, 1319007600, 1319094000), class = c("POSIXct", "POSIXt"), tzone = ""), TempMax = c(26.58, 27.78, 27.9, 27.44, 30.9, 30.44, 27.57, 25.71, 25.98, 26.84, 33.58, 30.7, 31.3, 27.18, 26.58, 26.18, 25.19, 24.19, 27.65, 23.92), TempMed = c(22.88, 22.87, 22.41, 21.63, 22.43, 22.29, 21.89, 20.52, 19.71, 20.73, 23.51, 23.13, 22.95, 21.95, 21.91, 20.72, 20.45, 19.42, 19.97, 19.61), TempMin = c(19.34, 19.14, 18.34, 17.49, 16.75, 16.75, 16.88, 16.82, 14.82, 16.01, 16.88, 17.55, 16.75, 17.22, 19.01, 16.95, 17.55, 15.21, 14.22, 16.42)), .Names = c("month", "TempMax", "TempMed", "TempMin"), row.names = c(NA, 20L), class = "data.frame")
my.cols <- heat.colors(3, alpha=1) my.names <- c("TempMin", "TempMed", "TempMax") names(my.cols) <- my.names
p <- ggplot(data, aes(x = month)) for (i in 1:3){ p <- p + geom_line(aes_(y = as.name(names(data[i+1])), colour = colnames(data[i+1]))) } p + scale_colour_manual("", breaks = as.character(my.names), values = my.cols) p
df <- data.frame(name = letters[1:4], value = c(rep(TRUE, 2), rep(FALSE, 2))) df target <- c("b", "c", "a", "d")
idx <- sapply(target, function(x) { which(df$name == x) }) df <- df[idx,] rownames(df) <- NULL df
df <- data.frame(name=letters[1:4], value=c(rep(TRUE, 2), rep(FALSE, 2))) target <- c("b", "c", "a", "d") df[match(target, df$name),] name value 2 b TRUE 3 c FALSE 1 a TRUE 4 d FALSE
match returns a vector of the positions of (first) matches of its first argument in its second.
df <- data.frame(name=letters[1:4], value=c(rep(TRUE, 2), rep(FALSE, 2))) target <- c("b", "c", "a", "d") require(gdata) df$name <- reorder.factor(df$name, new.order=target)
require(dplyr) df %>% arrange(name) name value 1 b TRUE 2 c FALSE 3 a TRUE 4 d FALSE
base_df <- data.frame(id = c(1:3), name = c("mary", "jill","steve")) base_df$age[base_df$name == "mary"] <- 47
library(tibble) tibble_df <- tibble(id = c(1:3), name = c("mary", "jill","steve")) tibble_df$age[tibble_df$name == "mary"] <- 47 Warning message: Unknown column
tibble_df$age <- NA tibble_df$age[tibble_df$name == "mary"] <- 47
library(dplyr) df <- data.frame(id = c(1,1:3), name = c("mary", "jo", "jill","steve")) dfTbl <- df %>% group_by(id) %>% summarize (n = n()) class(dfTbl) dfTbl = as.data.frame(dfTbl) class(dfTbl)
library(dplyr) df <- data.frame(id = c(1,1:3), name = c("mary", "jo", "jill","steve")) t <- df %>% group_by(id) %>% summarize (n = n()) t str(t) t$newvar[t$id==1] <- 0
require(ggplot2) x<-rnorm(300) y<-rt(300,df=2) xy<-data.frame(x,y) xhist <- qplot(x, geom="histogram") + scale_x_continuous(limits=c(min(x),max(x))) + opts(axis.text.x = theme_blank(), axis.title.x=theme_blank(), axis.ticks = theme_blank(), aspect.ratio = 5/16, axis.text.y = theme_blank(), axis.title.y=theme_blank(), background.colour="white") yhist <- qplot(y, geom="histogram") + coord_flip() + opts(background.fill = "white", background.color ="black") yhist <- yhist + scale_x_continuous(limits=c(min(x),max(x))) + opts(axis.text.x = theme_blank(), axis.title.x=theme_blank(), axis.ticks = theme_blank(), aspect.ratio = 16/5, axis.text.y = theme_blank(), axis.title.y=theme_blank() ) scatter <- qplot(x,y, data=xy) + scale_x_continuous(limits=c(min(x),max(x))) + scale_y_continuous(limits=c(min(y),max(y))) none <- qplot(x,y, data=xy) + geom_blank()
hist_top <- ggplot()+geom_histogram(aes(rnorm(100))) empty <- ggplot()+geom_point(aes(1,1), colour="white")+ theme(axis.ticks=element_blank(), panel.background=element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank()) scatter <- ggplot()+geom_point(aes(rnorm(100), rnorm(100))) hist_right <- ggplot()+geom_histogram(aes(rnorm(100)))+coord_flip()
grid.arrange(hist_top, empty, scatter, hist_right, ncol=2, nrow=2, widths=c(4, 1), heights=c(1, 4))
scatter <- qplot(x,y, data=xy) + scale_x_continuous(limits=c(min(x),max(x))) + scale_y_continuous(limits=c(min(y),max(y))) + geom_rug(col=rgb(.5,0,0,alpha=.2)) scatter
library(ggplot2) df <- data.frame(x = rnorm(1000, 50, 10), y = rnorm(1000, 50, 10)) p <- ggplot(df, aes(x, y)) + geom_point() + theme_classic() ggExtra::ggMarginal(p, type = "histogram")
+theme(legend.position = "none", axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank(), plot.margin = unit(c(3,-5.5,4,3), "mm"))
+scale_x_continuous(breaks = 0:6, limits = c(0,6), expand = c(.05,.05))
x<-rnorm(300) y<-rt(300,df=10) xy<-data.frame(x,y) require(ggplot2); require(grid) ggplot(xy, aes(x, y)) + scale_x_continuous(limit=c(min(x), max(x)), breaks=round(fivenum(x),1)) + scale_y_continuous(limit=c(min(y), max(y)), breaks=round(fivenum(y),1)) + geom_point() + geom_rug(size=0.1) + theme_set(theme_minimal(base_size = 18))
marginal_plot(x = iris$Sepal.Width, y = iris$Sepal.Length)
marginal_plot(x = Sepal.Width, y = Sepal.Length, group = Species, data = iris, bw = "nrd", lm_formula = NULL, xlab = "Sepal width", ylab = "Sepal length", pch = 15, cex = 0.5)
if(!require(devtools)) install.packages("devtools") devtools::install_github("kassambara/ggpubr")
sp <- ggscatter(iris, x = "Sepal.Length", y = "Sepal.Width", color = "Species", palette = "jco", size = 3, alpha = 0.6)+ border() xplot <- ggdensity(iris, "Sepal.Length", fill = "Species", palette = "jco") yplot <- ggdensity(iris, "Sepal.Width", fill = "Species", palette = "jco")+ rotate() sp <- sp + rremove("legend") yplot <- yplot + clean_theme() + rremove("legend") xplot <- xplot + clean_theme() + rremove("legend") library(cowplot) plot_grid(xplot, NULL, sp, yplot, ncol = 2, align = "hv", rel_widths = c(2, 1), rel_heights = c(1, 2))
data(iris) library(ggstatsplot) ggscatterstats( data = iris, x = Sepal.Length, y = Sepal.Width, xlab = "Sepal Length", ylab = "Sepal Width", marginal = TRUE, marginal.type = "histogram", centrality.para = "mean", margins = "both", title = "Relationship between Sepal Length and Sepal Width", messages = FALSE )
devtools::install_github("kassambara/ggpubr") library(ggpubr) ggscatterhist( iris, x = "Sepal.Length", y = "Sepal.Width", color = "Species", margin.plot = "histogram", margin.params = list(fill = "Species", color = "black", size = 0.2) )
Error in if (condition) { : missing value where TRUE/FALSE needed
Error in while (condition) { : missing value where TRUE/FALSE needed
if (NULL) {} if ("not logical") {} if (c(TRUE, FALSE)) {}
foo <- 12 bar <- c("a", "b", "e") newList <- list("integer" = foo, "names" = bar)
setClass(Class="Person", representation( height="numeric", age="numeric" ) )
myFunction = function(age=28, height=176){ return(new("Person", age=age, height=height)) }
x1 = function(x){ mu = mean(x) l1 = list(s1=table(x),std=sd(x)) return(list(l1,mu)) } library(Ecdat) data(Fair) x1(Fair$age)
for(i in 1:6) { nam <- paste("r", i, sep = ".") assign(nam, 1:i)
t <- data.frame(v = 5:1, v2 = 9:5) write.csv(t, "t.csv")
row.names: either a logical value indicating whether the row names of ‘x’ are to be written along with ‘x’, or a character vector of row names to be written.
require(data.table) require(gdata) set.seed(1) dt1 = create_dt(2e5, 200, 0.1) dim(dt1) [1] 200000 200 f_andrie = function(dt) remove_na(dt) f_gdata = function(dt, un = 0) gdata::NAToUnknown(dt, un) f_dowle = function(dt) { na.replace = function(v,value=0) { v[is.na(v)] = value; v } for (i in names(dt)) eval(parse(text=paste("dt[,",i,":=na.replace(",i,")]"))) } system.time(a_gdata = f_gdata(dt1)) user system elapsed 18.805 12.301 134.985 system.time(a_andrie = f_andrie(dt1)) Error: cannot allocate vector of size 305.2 Mb Timing stopped at: 14.541 7.764 68.285 system.time(f_dowle(dt1)) user system elapsed 7.452 4.144 19.590 identical(a_gdata, dt1) [1] TRUE
Rprof() f_dowle(dt1) Rprof(NULL) summaryRprof() $by.self self.time self.pct total.time total.pct "na.replace" 5.10 49.71 6.62 64.52 "[.data.table" 2.48 24.17 9.86 96.10 "is.na" 1.52 14.81 1.52 14.81 "gc" 0.22 2.14 0.22 2.14 "unique" 0.14 1.36 0.16 1.56 ... snip ...
f_dowle2 = function(DT) { for (i in names(DT)) DT[is.na(get(i)), (i):=0] } system.time(f_dowle2(dt1)) user system elapsed 6.468 0.760 7.250 identical(a_gdata, dt1) [1] TRUE
f_dowle3 = function(DT) { for (j in names(DT)) set(DT,which(is.na(DT[[j]])),j,0) for (j in seq_len(ncol(DT))) set(DT,which(is.na(DT[[j]])),j,0) }
dt1 = create_dt(2e5, 200, 0.1) f_gdata = function(dt, un = 0) gdata::NAToUnknown(dt, un) f_Andrie = function(dt) remove_na(dt) system.time(a_gdata <- f_gdata(dt1)) user system elapsed 4.224 2.962 7.388 system.time(a_andrie <- f_Andrie(dt1)) user system elapsed 4.635 4.730 20.060 identical(a_gdata, g_andrie) TRUE
library(data.table) DT = data.table(a=c(1,"A",NA),b=c(4,NA,"B")) DT a b 1: 1 4 2: A NA 3: NA B DT[,lapply(.SD,function(x){ifelse(is.na(x),0,x)})] a b 1: 1 4 2: A 0 3: 0 B
f_rep <- function(dt) { dt[is.na(dt)] <- 0 return(dt) }
set.seed(1) dt1 <- create_dt(2e5, 200, 0.1) dt2 <- dt1 dt3 <- dt1 system.time(res1 <- f_gdata(dt1)) User System verstrichen 3.62 0.22 3.84 system.time(res2 <- f_andrie(dt1)) User System verstrichen 2.95 0.33 3.28 system.time(f_dowle2(dt2)) User System verstrichen 0.78 0.00 0.78 system.time(f_dowle3(dt3)) User System verstrichen 0.17 0.00 0.17 system.time(res3 <- f_unknown(dt1)) User System verstrichen 6.71 0.84 7.55 system.time(res4 <- f_rep(dt1)) User System verstrichen 0.32 0.00 0.32 identical(res1, res2) & identical(res2, res3) & identical(res3, res4) & identical(res4, dt2) & identical(dt2, dt3) [1] TRUE
remove_na <- function(x){ dm <- data.matrix(x) dm[is.na(dm)] <- 0 data.table(dm) }
create_dt <- function(nrow=5, ncol=5, propNA = 0.5){ v <- runif(nrow * ncol) v[sample(seq_len(nrow*ncol), propNA * nrow*ncol)] <- NA data.table(matrix(v, ncol=ncol)) }
library(data.table) set.seed(1) dt <- create_dt(5, 5, 0.5) dt V1 V2 V3 V4 V5 [1,] NA 0.8983897 NA 0.4976992 0.9347052 [2,] 0.3721239 0.9446753 NA 0.7176185 0.2121425 [3,] 0.5728534 NA 0.6870228 0.9919061 NA [4,] NA NA NA NA 0.1255551 [5,] 0.2016819 NA 0.7698414 NA NA remove_na(dt) V1 V2 V3 V4 V5 [1,] 0.0000000 0.8983897 0.0000000 0.4976992 0.9347052 [2,] 0.3721239 0.9446753 0.0000000 0.7176185 0.2121425 [3,] 0.5728534 0.0000000 0.6870228 0.9919061 0.0000000 [4,] 0.0000000 0.0000000 0.0000000 0.0000000 0.1255551 [5,] 0.2016819 0.0000000 0.7698414 0.0000000 0.0000000
> DT = data.table(a=LETTERS[c(1,1:3,4:7)],b=sample(c(15,51,NA,12,21),8,T),key="a") > DT a b 1: A 12 2: A NA 3: B 15 4: C NA 5: D 51 6: E NA 7: F 15 8: G 51 > DT[is.na(b),b:=0] > DT a b 1: A 12 2: A 0 3: B 15 4: C 0 5: D 51 6: E 0 7: F 15 8: G 51 >
beep <- function(n = 3){ for(i in seq(n)){ system("rundll32 user32.dll,MessageBeep -1") Sys.sleep(.5) } }
theTitle <- "A Title" theMsg <- "A message here" cmd <- paste("osascript -e ", " system(cmd)
notify <- function(msgString= cmd <- paste( system(cmd) if (speakIt) { system(paste( } }
notify("R is done", "Message from R", speakIt=TRUE)
system("aplay -t wav /usr/share/sounds/phone.wav") system("zenity --title=\"R script info\" --text=\"Script has finished with zero exit status\" --info")
work_complete <- function() { cat("Work complete. Press esc to sound the fanfare!!!\n") on.exit(beepr::beep(3)) while (TRUE) { beepr::beep(4) Sys.sleep(1) } }
system("notify-send \"R script finished running\"")
alarm2 <- function(){ while(TRUE){ system("cmd.exe",input="C:/Windows/WinSxS/amd64_microsoft-windows-shell-sounds_31bf3856ad364e35_10.0.17134.1_none_fc93088a1eb3fd11/tada.wav") Sys.sleep(1) } }
alarm3 <- function(){ system("cmd.exe",input="C:/Windows/WinSxS/amd64_microsoft-windows-shell-sounds_31bf3856ad364e35_10.0.17134.1_none_fc93088a1eb3fd11/tada.wav") Sys.sleep(1) }
Warning messages: 1: glm.fit: algorithm did not converge 2: glm.fit: algorithm did not converge
‘warn’: sets the handling of warning messages. If ‘warn’ is negative all warnings are ignored. If ‘warn’ is zero (the default) warnings are stored until the top-level function returns. If fewer than 10 warnings were signalled they will be printed otherwise a message saying how many (max 50) were signalled. An object called ‘last.warning’ is created and can be printed through the function ‘warnings’. If ‘warn’ is one, warnings are printed as they occur. If ‘warn’ is two or larger all warnings are turned into errors.
> options(warn = 2) > foo <- function(x) bar(x + 2) > bar <- function(y) warning("don > foo(1) Error in bar(x + 2) : (converted from warning) don > traceback() 7: doWithOneRestart(return(expr), restart) 6: withOneRestart(expr, restarts[[1L]]) 5: withRestarts({ .Internal(.signalCondition(simpleWarning(msg, call), msg, call)) .Internal(.dfltWarn(msg, call)) }, muffleWarning = function() NULL) 4: .signalSimpleWarning("don 2))) 3: warning("don 2: bar(x + 2) 1: foo(1)
> options(error = recover) > foo(1) Error in bar(x + 2) : (converted from warning) don Enter a frame number, or 0 to exit 1: foo(1) 2: bar(x + 2) 3: warning("don 4: .signalSimpleWarning("don 5: withRestarts({ 6: withOneRestart(expr, restarts[[1]]) 7: doWithOneRestart(return(expr), restart) Selection:
library(debug); mtrace(myfunction); myfunction(a,b); qqq(); mtrace.off();
> source(<my filename>) Error in plot.window(...) : need finite In addition: Warning messages: 1: In xy.coords(x, y, xlabel, ylabel, log) : NAs introduced by coercion 2: In min(x) : no non-missing arguments to min; returning Inf 3: In max(x) : no non-missing arguments to max; returning -Inf Enter a frame number, or 0 to exit 1: source(<my filename>) 2: eval.with.vis(ei, envir) 3: eval.with.vis(expr, envir, enclos) 4: LinearParamSearch(data = dataset, y = data.frame(LGD = dataset$LGD10), data.names = data 5: LinearParamSearch.R 6: LinearParamSearch.R 7: LinearParamSearch.R 8: LinearParamSearch.R Selection:
Selection: 4 Called from: stop(gettextf("replacement has %d rows, data has %d", N, n), domain = NA) Browse[1]>
a1 = c(1, 2, 3, 4, 5) a2 = c(6, 7, 8, 9, 10) a3 = c(11, 12, 13, 14, 15) aframe = data.frame(a1, a2, a3)
avector <- as.vector(aframe[ class(avector) [1] "data.frame"
class(aframe[ [1] "data.frame" avector = c() for(atmp in aframe[ class(avector) [1] "numeric"
avector <- as.vector(aframe[ class(avector) avector <- aframe[[ class(avector) avector <- aframe[,2] class(avector)
R> aframe <- data.frame(a1=c1:5, a2=6:10, a3=11:15) R> aframe a1 a2 a3 1 1 6 11 2 2 7 12 3 3 8 13 4 4 9 14 5 5 10 15 R> avector <- aframe[, "a2"] R> avector [1] 6 7 8 9 10 R> avector <- aframe[, "a2", drop=FALSE] R> avector a2 1 6 2 7 3 8 4 9 5 10 R>
> a1 = c(1, 2, 3, 4, 5) > a2 = c(6, 7, 8, 9, 10) > a3 = c(11, 12, 13, 14, 15) > aframe = data.frame(a1, a2, a3) > aframe[, [1] 6 7 8 9 10 > class(aframe[, [1] "numeric"
a1 = c(1, 2, 3, 4, 5) a2 = c(6, 7, 8, 9, 10) a3 = c(11, 12, 13, 14, 15) aframe = data.frame(a1, a2, a3) avector <- as.vector(aframe[ avector<-unlist(avector)
list <- c() for(i in 1:nrow(df)){ list <- append(list, df[i,1]) } View(list)
cit <- read.csv("citations.CSV", row.names = NULL, comment.char = "", header = TRUE, stringsAsFactors = FALSE, colClasses= "character", encoding= "utf-8") Warning message: In scan(file, what, nmax, sep, dec, quote, skip, nlines, na.strings, : EOF within quoted string
rl <- readLines(file("citations.CSV", encoding = "utf-8")) length(rl) [1] 112545
write.table(rl, "rl.txt", quote = FALSE, row.names = FALSE) rl_in <- read.csv("rl.txt", skip = 1, row.names = NULL) Warning message: In scan(file, what, nmax, sep, dec, quote, skip, nlines, na.strings, : EOF within quoted string
require(sqldf) cit_sql <- read.csv.sql("citations.CSV", sql = "select * from file") require(data.table) cit_dt <- fread("citations.CSV") require(ff) cit_ff <- read.csv.ffdf(file="citations.CSV")
R version 3.0.1 (2013-05-16) Platform: x86_64-w64-mingw32/x64 (64-bit) locale: [1] LC_COLLATE=English_United States.1252 LC_CTYPE=English_United States.1252 [3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C [5] LC_TIME=English_United States.1252 attached base packages: [1] tools tcltk stats graphics grDevices utils datasets methods base other attached packages: [1] ff_2.2-11 bit_1.1-10 data.table_1.8.8 sqldf_0.4-6.4 [5] RSQLite.extfuns_0.0.1 RSQLite_0.11.4 chron_2.3-43 gsubfn_0.6-5 [9] proto_0.3-10 DBI_0.2-7
cit <- read.csv("citations.CSV", quote = "", row.names = NULL, stringsAsFactors = FALSE) str(cit)
readLines("citations.CSV")[82] [1] "10.2307/3642839,10.2307/3642839\t,\"Thorn\" and \"Minus\" in Hieroglyphic Luvian Orthography\t,H. Craig Melchert\t,Anatolian Studies\t,38\t,\t,1988-01-01T00:00:00Z\t,pp. 29-42\t,British Institute at Ankara\t,fla\t,\t,"
> iproscan.53A.neg = read.csv("interproscan.53A.neg.n.csv", + colClasses=c(pb.id = "character", + genLoc = "character", + icode = "character", + length = "character", + proteinDB = "character", + protein.id = "character", + prot.desc = "character", + start = "character", + end = "character", + evalue = "character", + tchar = "character", + date = "character", + ipro.id = "character", + prot.name = "character", + go.cat = "character", + reactome.id= "character"), + as.is=T,header=F) Warning message: In scan(file, what, nmax, sep, dec, quote, skip, nlines, na.strings, : EOF within quoted string > dim(iproscan.53A.neg) [1] 69383 16
> iproscan.53A.neg = read.csv("interproscan.53A.neg.n.csv", + colClasses=c(pb.id = "character", + genLoc = "character", + icode = "character", + length = "character", + proteinDB = "character", + protein.id = "character", + prot.desc = "character", + start = "character", + end = "character", + evalue = "character", + tchar = "character", + date = "character", + ipro.id = "character", + prot.name = "character", + go.cat = "character", + reactome.id= "character"), + as.is=T,header=F,**quote=""**) > > dim(iproscan.53A.neg) [1] 76002 16
dat <- data.frame(x=runif(10),y=runif(10)) p <- ggplot(dat, aes(x=x, y=y)) + geom_point() + scale_x_continuous(expand=c(0,0)) + scale_y_continuous(expand=c(0,0)) p + theme(axis.line=element_blank(),axis.text.x=element_blank(), axis.text.y=element_blank(),axis.ticks=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank(),legend.position="none", panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(), panel.grid.minor=element_blank(),plot.background=element_blank())
theme(axis.line=element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(), axis.ticks=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank(), legend.position="none", panel.background=element_blank(), panel.border=element_blank(), panel.grid.major=element_blank(), panel.grid.minor=element_blank(), plot.background=element_blank())
data(diamonds) ggplot(data = diamonds, mapping = aes(x = clarity)) + geom_bar(aes(fill = cut)) + theme_void() + theme(legend.position="none")
ggplot(data = diamonds, mapping = aes(x = clarity)) + geom_bar(aes(fill = cut)) + labs(x="", y="")
xy <- data.frame(x=1:10, y=10:1) plot <- ggplot(data = xy)+geom_point(aes(x = x, y = y)) plot panel = grid.get("panel-3-3") grid.newpage() pushViewport(viewport(w=1, h=1, name="layout")) pushViewport(viewport(w=1, h=1, name="panel-3-3")) upViewport(1) upViewport(1) grid.draw(panel)
p <- ggplot(myData, aes(foo, bar)) + geom_whateverGeomYouWant(more = options) + p + scale_x_continuous(expand=c(0,0)) + scale_y_continuous(expand=c(0,0)) + opts(legend.position = "none")
lapply(iris, class) $Sepal.Length [1] "numeric" $Sepal.Width [1] "numeric" $Petal.Length [1] "numeric" $Petal.Width [1] "numeric" $Species [1] "factor"
Map(class, iris) $Sepal.Length [1] "numeric" $Sepal.Width [1] "numeric" $Petal.Length [1] "numeric" $Petal.Width [1] "numeric" $Species [1] "factor"
x <- lapply(iris, class) do.call(c, x) Sepal.Length Sepal.Width Petal.Length Petal.Width Species "numeric" "numeric" "numeric" "numeric" "factor"
> lapply(X,mean) [[1]] [1] 2 [[2]] [1] 5 [[3]] [1] 8
> do.call(rbind,X) [,1] [,2] [,3] [1,] 1 2 3 [2,] 4 5 6 [3,] 7 8 9
> lapply(X,rbind) [[1]] [,1] [,2] [,3] [1,] 1 2 3 [[2]] [,1] [,2] [,3] [1,] 4 5 6 [[3]] [,1] [,2] [,3] [1,] 7 8 9
> fixed <- data.frame("Type" = character(3), "Amount" = numeric(3)) > fixed[1, ] <- c("lunch", 100) Warning message: In `[<-.factor`(`*tmp*`, iseq, value = "lunch") : invalid factor level, NA generated > fixed Type Amount 1 <NA> 100 2 0 3 0
> fixed <- data.frame("Type" = character(3), "Amount" = numeric(3)) > str(fixed) $ Type : Factor w/ 1 level "": NA 1 1 $ Amount: chr "100" "0" "0" > > fixed <- data.frame("Type" = character(3), "Amount" = numeric(3),stringsAsFactors=FALSE) > fixed[1, ] <- c("lunch", 100) > str(fixed) $ Type : chr "lunch" "" "" $ Amount: chr "100" "0" "0"
myDataFrame <- read.csv("path/to/file.csv", header = TRUE, stringsAsFactors = FALSE)
fixed <- data.frame("Type" = character(3), "Amount" = numeric(3)) fixed$Type <- as.character(fixed$Type) fixed[1, ] <- c("lunch", 100) fixed$Type <- as.factor(fixed$Type)
> levels(data$Fireplace.Qu) [1] "Ex" "Fa" "Gd" "Po" "TA" > levels(data$Fireplace.Qu) = c("Ex", "Fa", "Gd", "Po", "TA", "None") [1] "Ex" "Fa" "Gd" "Po" " TA" "None"
sort( sapply(ls(),function(x){object.size(get(x))}))
for (itm in ls()) { print(formatC(c(itm, object.size(get(itm))), format="d", big.mark=",", width=30), quote=F) }
memory.profile() NULL symbol pairlist closure environment promise language 1 9434 183964 4125 1359 6963 49425 special builtin char logical integer double complex 173 1562 20652 7383 13212 4137 1
R> a <- rnorm(100) R> b <- LETTERS R> lsos() Type Size Rows Columns b character 1496 26 NA a numeric 840 100 NA R>
library(gdata) ll() subset(ll(), KB > 1000) ll()[order(ll()$KB),]
a <- seq(1,101,25) b <- paste("name", 1:length(a), sep = "_")
"name_001" "name_026" "name_051" "name_076" "name_101"
a <- seq(1,101,25) sprintf("name_%03d", a) [1] "name_001" "name_026" "name_051" "name_076" "name_101"
paste("name", formatC(a, width=3, flag="0"), sep="_") [1] "name_001" "name_026" "name_051" "name_076" "name_101"
mtcars str(mtcars) mtcars$am <- as.factor(mtcars$am) mtcars[, str(mtcars)
df[] <- lapply( df, factor) col_names <- names(df) df[col_names] <- lapply(df[col_names] , factor)
cols.to.factor <- sapply( df, function(col) length(unique(col)) < log10(length(col)) ) df[ cols.to.factor] <- lapply(df[ cols.to.factor] , factor)
character_vars <- lapply(dat, class) == "character" dat[, character_vars] <- lapply(dat[, character_vars], as.factor)
dat <- data.frame(var1 = c("a", "b"), var2 = c("hi", "low"), var3 = c(0, 0.1), stringsAsFactors = FALSE )
library(dplyr) df <- mutate_if(df, is.character, as.factor) df <- mutate_at(df, vars(char1, char2), as.factor)
for (i in 1:ncol(data)){ if(is.character(data[,i])){ data[,i]=factor(data[,i]) } }
f <- function(a, b){ if (a == 0){ stop("error message") } }
> try(throw("Division by zero.")); print("It Error: [2009-10-22 10:24:07] Exception: Division by zero. [1] "It
df <- data.frame(a = numeric(), b = numeric()) stopifnot(!is.null(df$c))
pkgTest <- function(x) { if (!require(x,character.only = TRUE)) { install.packages(x,dep=TRUE) if(!require(x,character.only = TRUE)) stop("Package not found") } }
packages <- c("ggplot2", "dplyr", "Hmisc", "lme4", "arm", "lattice", "lavaan") if (length(setdiff(packages, rownames(installed.packages()))) > 0) { install.packages(setdiff(packages, rownames(installed.packages()))) }
is.installed <- function(mypkg){ is.element(mypkg, installed.packages()[,1]) } if (!is.installed("hydroGOF")){ install.packages("hydroGOF") }
packages<-function(x){ x<-as.character(match.call()[[2]]) if (!require(x,character.only=TRUE)){ install.packages(pkgs=x,repos="http: require(x,character.only=TRUE) } } packages(ggplot2) packages(reshape2) packages(plyr)
is_inst <- function(pkg) { nzchar(system.file(package = pkg)) } is_inst2 <- function(pkg) { pkg %in% rownames(installed.packages()) } library(microbenchmark) microbenchmark(is_inst("aaa"), is_inst2("aaa")) microbenchmark(is_inst("ggplot2"), is_inst2("ggplot2"))
requiredPackages = c( for(p in requiredPackages){ if(!require(p,character.only = TRUE)) install.packages(p) library(p,character.only = TRUE) }
Install_And_Load <- function(Required_Packages) { Remaining_Packages <- Required_Packages[!(Required_Packages %in% installed.packages()[,"Package"])]; if(length(Remaining_Packages)) { install.packages(Remaining_Packages); } for(package_name in Required_Packages) { library(package_name,character.only=TRUE,quietly=TRUE); } } Required_Packages=c("ggplot2", "Rcpp"); Install_And_Load(Required_Packages);
glibrary <- function(..., lib.loc = NULL, quietly = FALSE, warn.conflicts = TRUE, pickmirror = FALSE, countrycode = "us") { warningHandle <- function(w) { if (grepl("there is no package called",w$message,fixed=TRUE)) { return(FALSE) } else { return(TRUE) } } character.only <- TRUE librarynames <- unlist(lapply(as.list(substitute(.(...)))[-1],as.character)) si.res <- sessionInfo() cur.loaded <- c(si.res$basePkgs,names(si.res$otherPkgs)) librarynames <- librarynames[librarynames %!in% cur.loaded] success <- vector("logical", length(librarynames)) if (length(success)==0) {return(invisible(TRUE))} alreadyInstalled <- installed.packages()[,"Package"] needToInstall <- !librarynames %in% alreadyInstalled if (any(needToInstall)) { if (pickmirror) {chooseCRANmirror()} if (getOption("repos")[["CRAN"]] == "@CRAN@") { m <- getCRANmirrors(all = FALSE, local.only = FALSE) URL <- m[grepl("Cloud",m$Name),"URL"][1] if (is.na(URL)) { message("\nIn repsych:glibrary: Now randomly selecting a CRAN mirror. You may reselect your CRAN mirror with chooseCRANmirror().\n") getCRANmirrors.res <- getCRANmirrors() foundone <- FALSE if (!countrycode %in% getCRANmirrors.res$CountryCode) { stop("In repsych::glibrary: Invalid countrycode argument") } ticker <- 0 while (!foundone) { ticker <- ticker + 1 URL <- getCRANmirrors.res$URL[sample(grep(countrycode, getCRANmirrors.res$CountryCode), 1)] host.list <- strsplit(URL, "/") host.clean <- unlist(lapply(host.list, FUN = function(x) {return(x[3])})) if (nrow(available.packages(contrib.url(URL)))!=0) {foundone <- TRUE} if (ticker > 5) {stop("In repsych::glibrary: Unable to access valid repository. Is the internet connection working?")} } } repos <- getOption("repos") repos["CRAN"] <- gsub("/$", "", URL[1L]) options(repos = repos) } installResults <- sapply(librarynames[needToInstall],install.packages) needToInstall <- !librarynames %in% installed.packages()[,"Package"] if (any(needToInstall)) { stop(paste("In repsych::glibrary: Could not download and/or install: ",paste(librarynames[needToInstall],collapse=", "),"... glibrary stopped.",sep="")) } } success <- sapply(librarynames,require, lib.loc = lib.loc, quietly = FALSE, warn.conflicts = warn.conflicts, character.only = TRUE) if(length(success) != length(librarynames)) {stop("A package failed to return a success in glibrary.")} if (all(success)) { return(invisible(TRUE)) } else { stop(paste("\nIn repsych::glibrary, unable to load: ", paste(librarynames[!success]), collapse = " ")) } stop("A problem occured in glibrary") } NULL
instalaPacotes <- function(pacote) { if (!pacote %in% installed.packages()) install.packages(pacote) }
if(!is.element( {install.packages( }else {print("pROC library already installed")}
required.packages <- "data.table" new.packages <- required.packages[!(required.packages %in% installed.packages()[,"Package"])] if(length(new.packages)) install.packages(new.packages)
installpkg <- function(x){ if(x %in% rownames(installed.packages())==FALSE) { if(x %in% rownames(available.packages())==FALSE) { paste(x,"is not a valid package - please check again...") } else { install.packages(x) } } else { paste(x,"package already installed...") } } required_packages <- c("sqldf","car") lapply(required_packages,installpkg)
assign("installP", function(pckgs){ ins <- function(pckg, mc){ add <- paste(c(" ", rep("-", mc+1-nchar(pckg)), " "), collapse = ""); if( !require(pckg,character.only=TRUE) ){ reps <- c("http: for (r in reps) try(utils::install.packages(pckg, repos=r), silent=TRUE); if(!require(pckg,character.only = TRUE)){ cat("Package: ",pckg,add,"not found.\n",sep=""); }else{ cat("Package: ",pckg,add,"installed.\n",sep="");} }else{ cat("Package: ",pckg,add,"is loaded.\n",sep=""); } } invisible(suppressMessages(suppressWarnings(lapply(pckgs,ins, mc=max(nchar(pckgs)))))); cat("\n"); }, envir=as.environment("dg_base")) installP(c("base","a","TFX")) Package: base ------------------- is loaded. Package: a ---------------------- not found. Package: TFX -------------------- installed.
R> setwd(paste("~/a/very/long/path/here", "/and/then/some/more", "/and/then/some/more", "/and/then/some/more", sep=""))
x <- "This is a very long string over two lines." x cat(x)
long_string <- "this is a long string with whitespace"
File <- file.path("~", "a", "very", "long", "path", "here", "that", "goes", "beyond", "80", "characters", "and", "then", "some", "more") setwd(File)
mat <- matrix(c(1:3,7:9,4:6), byrow = T, nc = 3) mat [,1] [,2] [,3] [1,] 1 2 3 [2,] 7 8 9 [3,] 4 5 6
> memory.limit(4000) > a = matrix(NA, 1500000, 60) > a = matrix(NA, 2500000, 60) > a = matrix(NA, 3500000, 60) Error: cannot allocate vector of size 801.1 Mb > a = matrix(NA, 2500000, 60) Error: cannot allocate vector of size 572.2 Mb > rm(list=ls(all=TRUE)) > a = matrix(NA, 3500000, 60) > b = matrix(NA, 3500000, 60) Error: cannot allocate vector of size 801.1 Mb
> sessionInfo() R version 2.12.0 (2010-10-15) Platform: i386-pc-mingw32/i386 (32-bit) locale: [1] LC_COLLATE=English_Caribbean.1252 LC_CTYPE=English_Caribbean.1252 [3] LC_MONETARY=English_Caribbean.1252 LC_NUMERIC=C [5] LC_TIME=English_Caribbean.1252 attached base packages: [1] stats graphics grDevices utils datasets methods base
bsub -q server_name -R "rusage[mem=requested_memory]" "Rscript script_name.R"
save.image(file="temp.RData") rm(list=ls()) load(file="temp.RData")
>memory.limit() [1] 1535.875 > memory.limit(size=1800)
platform_external_dbus 202 16 google 1 platform_external_dbus 202 16 space-ghost.verbum 1 platform_external_dbus 202 16 localhost 1 platform_external_dbus 202 16 users.sourceforge 8 platform_external_dbus 202 16 hughsie 1
a <- c(rep("A", 3), rep("B", 3), rep("C",2)) b <- c(1,1,2,4,1,1,2,2) df <-data.frame(a,b) duplicated(df) [1] FALSE TRUE FALSE FALSE FALSE TRUE FALSE TRUE > df[duplicated(df), ] a b 2 A 1 6 B 1 8 C 2 > df[!duplicated(df), ] a b 1 A 1 3 A 2 4 B 4 5 B 1 7 C 2
dat <- data.frame(a = rep(c(1,2),4), b = rep(LETTERS[1:4],2))
library(dplyr) dat %>% distinct(a, .keep_all = TRUE) a b 1 1 A 2 2 B
library(data.table) DT <- data.table(id = c(1,1,1,2,2,2), val = c(10,20,30,10,20,30)) unique(DT, by = "id") duplicated(DT, by = "id")
library(microbenchmark) library(data.table) set.seed(123) DF <- as.data.frame(matrix(sample(1e8, 1e5, replace = TRUE), ncol = 10)) DT <- copy(DF) setDT(DT) microbenchmark(unique(DF), unique(DT)) microbenchmark(duplicated(DF), duplicated(DT))
a <- c(rep("A", 3), rep("B", 3), rep("C",2)) b <- c(1,1,2,4,1,1,2,2) df <-data.frame(a,b)
df <- data.frame(rbind(c(2,9,6),c(4,6,7),c(4,6,7),c(4,6,7),c(2,9,6)))) new_df <- df[-which(duplicated(df)), ]
power <- function(exponent) { function(x) x ^ exponent } square <- power(2) square(2) square(4) cube <- power(3) cube(2) cube(4)
new_counter <- function() { i <- 0 function() { i <<- i + 1 i } }
counter_one <- new_counter() counter_two <- new_counter() counter_one() counter_one() counter_two()
f <- function(n, x0) {x <- x0; replicate(n, (function(){x <<- x+rnorm(1)})())} plot(f(1000,0),typ="l")
myRFclass <- setRefClass(Class = "RF", fields = list(A = "numeric", B = "numeric", C = function() A + B)) myRFclass$methods(show = function() cat("A =", A, "B =", B, "C =",C)) myRFclass$methods(changeA = function() A <<- A*B) obj1 <- myRFclass(A = 2, B = 3) obj1 obj1$changeA() obj1
fortest <- function() { mySum <- 0 for (i in c(1, 2, 3)) { mySum <<- mySum + i } mySum }
one two three four [1,] 1 6 11 16 [2,] 2 7 12 17 [3,] 3 8 11 18 [4,] 4 9 11 19 [5,] 5 10 15 20
one two three four [1,] 1 6 11 16 [3,] 3 8 11 18 [4,] 4 9 11 19
m <- matrix(1:20, ncol = 4) colnames(m) <- letters[1:4]
aux = which(Mat[, aux = aux[which(Mat[aux, aux = aux[which(Mat[aux, Mat[aux, ]
f <- function(x, T) { 10 * sin(0.3 * x) * sin(1.3 * x ^ 2) + 0.001 * x ^ 3 + 0.2 * x + 80 } g <- function(x, T, f=f) { exp(-f(x) / T) } test <- function(g=g, T=1) { g(1, T) }
f <- function(x, T) { 10 * sin(0.3 * x) * sin(1.3 * x^2) + 0.001 * x^3 + 0.2 * x + 80 } g <- function(x, T, f. = f) { exp(-f.(x)/T) } test<- function(g. = g, T = 1) { g.(1,T) } test()
f1=function(df1,tr=tr){ print(tail(tr)) } df1=data.frame() f1(df1) Error in tail(tr) : promise already under evaluation: recursive default argument reference or earlier problems?
f1(df1,tr) nu_pregao cd_papel true_range pc_true_range mdTr13 sdTr13 mdTr21 sdTr21 70315 1781 AGRO3 0.25 0.019 0.01492308 0.005880215 0.01628571 0.006709269 70316 1781 AELP3 0.47 0.157 0.04223077 0.041219239 0.06061905 0.055112137 70317 1781 ADHM3 0.05 0.026 0.03469231 0.014912996 0.02976190 0.014542712 70318 1781 ABEV3 0.52 0.022 0.02176923 0.006610016 0.02204762 0.008639885 70319 1781 ABCB4 0.69 0.037 0.02838462 0.010444604 0.02585714 0.009456668 70320 1781 AALR3 0.71 0.042 0.02700000 0.010885771 0.02466667 0.010184956
f2=function(df1,tr1=tr){ print(tail(tr1)) } f2(df1) nu_pregao cd_papel true_range pc_true_range mdTr13 sdTr13 mdTr21 sdTr21 70315 1781 AGRO3 0.25 0.019 0.01492308 0.005880215 0.01628571 0.006709269 70316 1781 AELP3 0.47 0.157 0.04223077 0.041219239 0.06061905 0.055112137 70317 1781 ADHM3 0.05 0.026 0.03469231 0.014912996 0.02976190 0.014542712 70318 1781 ABEV3 0.52 0.022 0.02176923 0.006610016 0.02204762 0.008639885 70319 1781 ABCB4 0.69 0.037 0.02838462 0.010444604 0.02585714 0.009456668 70320 1781 AALR3 0.71 0.042 0.02700000 0.010885771 0.02466667 0.010184956
`%+=%` = function(e1,e2) eval.parent(substitute(e1 <- e1 + e2)) x = 1 x %+=% 2 ; x
inc <- function(x) { eval.parent(substitute(x <- x + 1)) }
install.packages( require(roperators) x <- 1:3 x %+=% 1; x x %-=% 3; x y <- c( y %+=% y %-=%
grid.arrange(sgcir1,sgcir2,sgcir3,ncol=2,nrow=2) ggsave("sgcirNIR.jpg")
jpeg("sgcirNIR.jpg") grid.arrange(sgcir1,sgcir2,sgcir3,ncol=2,nrow=2) dev.off()
require(grid) require(gridExtra) p <- arrangeGrob(qplot(1,1), textGrob("test")) grid.draw(p) ggsave("saving.pdf", p)
library(ggplot2) library(gridExtra) dsamp <- diamonds[sample(nrow(diamonds), 1000), ] p1 <- qplot(carat, price, data=dsamp, colour=clarity) p2 <- qplot(carat, price, data=dsamp, colour=clarity, geom="path") g_legend<-function(a.gplot){ tmp <- ggplot_gtable(ggplot_build(a.gplot)) leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box") legend <- tmp$grobs[[leg]] return(legend)} legend <- g_legend(p1) lwidth <- sum(legend$width) grid.arrange(arrangeGrob(p1 + theme(legend.position="none"), p2 + theme(legend.position="none"), main ="this is a title", left = "This is my global Y-axis title"), legend, widths=unit.c(unit(1, "npc") - lwidth, lwidth), nrow=1)
plot1 <- ggplot(...) plot2 <- ggplot(...) plot3 <- ggplot(...) grid.arrange(plot1, plot2, plot3, nrow=3) g <- arrangeGrob(plot1, plot2, plot3, nrow=3) ggsave(file="whatever.pdf", g)
pdf("filename.pdf", width = 8, height = 12) grid.arrange(plot1, plot2, plot3, nrow=3) dev.off()
plot1 <- ggplot(...) plot2 <- ggplot(...) plot3 <- ggplot(...) grid.arrange(plot1, plot2, plot3, nrow=3) ggsave <- ggplot2::ggsave; body(ggsave) <- body(ggplot2::ggsave)[-2]
g <- arrangeGrob(plot1, plot2, plot3, nrow=3) ggsave(file="whatever.pdf", g)
dates <- as.Date(c( dates <- ifelse(dates == str(dates)
library(dplyr) dates <- if_else(dates == str(dates)
safe.ifelse <- function(cond, yes, no){ class.y <- class(yes) X <- ifelse(cond, yes, no) class(X) <- class.y; return(X)} safe.ifelse(dates ==
dates <- as.Date(c( dates <- ifelse(dates== str(dates) class(dates)<- "Date" str(dates)
safe.ifelse <- function(cond, yes, no) { class.y <- class(yes) if (class.y == "factor") { levels.y = levels(yes) } X <- ifelse(cond,yes,no) if (class.y == "factor") { X = as.factor(X) levels(X) = levels.y } else { class(X) <- class.y } return(X) }
safe.ifelse <- function(cond, yes, no) { class.y <- class(yes) if ("factor" %in% class.y) { levels.y = levels(yes) } X <- ifelse(cond,yes,no) if ("factor" %in% class.y) { X = as.factor(X) levels(X) = levels.y } else { class(X) <- class.y } return(X) }
safe_ifelse <- function(cond, yes, no, preserved_attributes = "yes") { preserved <- switch(EXPR = preserved_attributes, "cond" = cond, "yes" = yes, "no" = no); preserved_class <- class(preserved); preserved_levels <- levels(preserved); preserved_is_factor <- "factor" %in% preserved_class; return_obj <- ifelse(cond, yes, no); if (preserved_is_factor) { return_obj <- as.factor(return_obj); levels(return_obj) <- preserved_levels; if (length(preserved_class) > 1) { class(return_obj) <- preserved_class; } } else { class(return_obj) <- preserved_class; } return(return_obj); }
dates <- as.Date(c( dates_new <- dates - 1 dates <- as.Date(ifelse(dates ==
q <- qplot(cty, hwy, data = mpg, colour = displ) q + xlab(expression(beta +frac(miles, gallon)))
x <- seq(0, 4, length.out=100) alpha <- 1:5 plot(x, xlim=c(0, 4), ylim=c(0, 10), xlab= x^\\alpha\\text{, where }\\alpha \\in \\text{1:5} for (a in alpha) lines(x, a*x^a, col=a) legend(
library(reshape2) library(plyr) library(ggplot2) library(systemfit) library(xtable) require(graphics) require(tikzDevice) setwd("~/DataFolder/") Lab5p9 <- read.csv (file="~/DataFolder/Lab5part9.csv", comment.char=" AR <- subset(Lab5p9,Region == "Forward.Active") colnames(AR) <- c("$V_{BB}[V]$", "$V_{RB}[V]$" , "$V_{RC}[V]$" , "$I_B[\\mu A]$" , "IC" , "$V_{BE}[V]$" , "$V_{CE}[V]$" , "beta" , "$I_E[mA]$") setwd("~/TexImageFolder/") tikz( par(mar=c(3,5,3,5)) ggplot(AR, aes(x=IC, y=beta)) + geom_point(colour=" geom_smooth(method=loess,span=2) + theme_bw() + xlab("$I_C[mA]$") + ylab ("$\\beta$") + theme(axis.title.y=element_text(angle=0)) + theme(axis.title.x=element_text(vjust=-0.5)) + theme(axis.title.y=element_text(hjust=-0.5)) + theme(panel.grid.major=element_line(colour="grey80", size=0.5)) + theme(panel.grid.minor=element_line(colour="grey95", size=0.4)) + scale_x_continuous(minor_breaks=seq(0,9.5,by=0.5)) + scale_y_continuous(minor_breaks=seq(170,185,by=0.5)) + theme(panel.border=element_rect(colour="black",size=.75)) dev.off()
express <- function(char.expressions){ return(parse(text=paste(char.expressions,collapse=";"))) } par(mar=c(6,6,1,1)) plot(0,0,xlim=sym(),ylim=sym(),xaxt="n",yaxt="n",mgp=c(4,0.2,0), xlab="axis(1,(-9:9)/10,tick.labels,las=2,cex.axis=0.8)", ylab="axis(2,(-9:9)/10,express(tick.labels),las=1,cex.axis=0.8)") tick.labels <- paste("x >=",(-9:9)/10) axis(1,(-9:9)/10,tick.labels,las=2,cex.axis=0.8) axis(2,(-9:9)/10,express(tick.labels),las=1,cex.axis=0.8)
require(zoo) date1 <- as.yearmon("Mar 2012", "%b %Y") class(date1)
> format(date1, "%b") [1] "Mar" > format(date1, "%Y") [1] "2012" > format(date1, "%m") [1] "03"
> as.numeric(format(date1, "%m")) [1] 3 > as.numeric(format(date1, "%Y")) [1] 2012
> require(lubridate) > month(date1) [1] 3 > year(date1) [1] 2012
date_1 <- as.Date("1990-01-01") as.numeric(format(date_1, "%Y")) as.numeric(format(date_1, "%m"))
library(zoo) x <- as.yearmon(Sys.time()) format(x,"%b") [1] "Mar" format(x,"%Y") [1] "2012"
y = as.POSIXlt(date1)$year + 1900 m = as.POSIXlt(date1)$mon + 1
Year Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec 2009 -41 -27 -25 -31 -31 -39 -25 -15 -30 -27 -21 -25 2010 -41 -27 -25 -31 -31 -39 -25 -15 -30 -27 -21 -25 2011 -21 -27 -2 -6 -10 -32 -13 -12 -27 -30 -38 -29
> read.table("data.txt", colClasses = c(rep("integer", 7), rep("NULL", 6)), + header = TRUE) Year Jan Feb Mar Apr May Jun 1 2009 -41 -27 -25 -31 -31 -39 2 2010 -41 -27 -25 -31 -31 -39 3 2011 -21 -27 -2 -6 -10 -32
$ cat data.txt "Year" "Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct" "Nov" "Dec" 2009 -41 -27 -25 -31 -31 -39 -25 -15 -30 -27 -21 -25 2010 -41 -27 -25 -31 -31 -39 -25 -15 -30 -27 -21 -25 2011 -21 -27 -2 -6 -10 -32 -13 -12 -27 -30 -38 -29
write.table(dat, file = "data.txt", row.names = FALSE)
dat <- structure(list(Year = 2009:2011, Jan = c(-41L, -41L, -21L), Feb = c(-27L, -27L, -27L), Mar = c(-25L, -25L, -2L), Apr = c(-31L, -31L, -6L ), May = c(-31L, -31L, -10L), Jun = c(-39L, -39L, -32L), Jul = c(-25L, -25L, -13L), Aug = c(-15L, -15L, -12L), Sep = c(-30L, -30L, -27L ), Oct = c(-27L, -27L, -30L), Nov = c(-21L, -21L, -38L), Dec = c(-25L, -25L, -29L)), .Names = c("Year", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"), class = "data.frame", row.names = c(NA, -3L))
count.fields("data.txt", sep = "\t") max(count.fields("data.txt", sep = "\t"))
library(data.table) dat <- fread("data.txt", select = c("Year","Jan","Feb","Mar","Apr","May","Jun")) dat <- fread("data.txt", select = c(1:7))
dat <- fread("data.txt", drop = c("Jul","Aug","Sep","Oct","Nov","Dec")) dat <- fread("data.txt", drop = c(8:13))
> data Year Jan Feb Mar Apr May Jun 1 2009 -41 -27 -25 -31 -31 -39 2 2010 -41 -27 -25 -31 -31 -39 3 2011 -21 -27 -2 -6 -10 -32
library(sqldf) dat <- read.csv.sql("data.txt", sql = "select Year,Jan,Feb,Mar,Apr,May,Jun from file", sep = "\t")
library(readr) dat <- read_table("data.txt", col_types = cols_only(Year = Apr = dat <- read_table("data.txt", col_types = list(Jul = col_skip(), Aug = col_skip(), Sep = col_skip(), Oct = col_skip(), Nov = col_skip(), Dec = col_skip())) dat <- read_table("data.txt", col_types =
write.table(x=mtcars, file="mtcars.csv", sep=",", row.names=F, col.names=T)
> library(RJDBC) > path.to.jdbc.driver <- "jdbc > drv <- JDBC("org.relique.jdbc.csv.CsvDriver", path.to.jdbc.driver) > conn <- dbConnect(drv, sprintf("jdbc:relique:csv:%s", getwd())) > head(dbGetQuery(conn, "select * from mtcars"), 3) mpg cyl disp hp drat wt qsec vs am gear carb 1 21 6 160 110 3.9 2.62 16.46 0 1 4 4 2 21 6 160 110 3.9 2.875 17.02 0 1 4 4 3 22.8 4 108 93 3.85 2.32 18.61 1 1 4 1 > head(dbGetQuery(conn, "select mpg, gear from mtcars"), 3) MPG GEAR 1 21 4 2 21 4 3 22.8 4
df <- data.frame(x = rnorm(5000),y=rnorm(5000)) ggplot(df,aes(x=x,y=y)) + geom_point(alpha = 0.3)
library(ggplot2) library(ggsubplot) set.seed(955) dat <- data.frame(cond = rep(c("A", "B"), each=5000), xvar = c(rep(1:20,250) + rnorm(5000,sd=5),rep(16:35,250) + rnorm(5000,sd=5)), yvar = c(rep(1:20,250) + rnorm(5000,sd=5),rep(16:35,250) + rnorm(5000,sd=5))) ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1) + geom_subplot2d(aes(xvar, yvar, subplot = geom_bar(aes(rep("dummy", length(xvar)), ..count..))), bins = c(15,15), ref = NULL, width = rel(0.8), ply.aes = FALSE)
ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1, aes(color = factor(cond))) + geom_subplot2d(aes(xvar, yvar, subplot = geom_bar(aes(cond, ..count.., fill = cond))), bins = c(15,15), ref = NULL, width = rel(0.8), ply.aes = FALSE)
df <- data.frame(x = rnorm(5000),y=rnorm(5000)) with(df, plot(x, y, col="
df <- data.frame(x = rnorm(15000),y=rnorm(15000)) ggplot(df,aes(x=x,y=y)) + geom_point() + geom_density2d()
ggplot(df,aes(x=x,y=y)) + geom_point(colour="blue", alpha=0.2) + geom_density2d(colour="black")
library(ggplot2) x <- rnorm(n = 10000) y <- rnorm(n = 10000, sd=2) + x df <- data.frame(x, y)
o1 <- ggplot(df, aes(x, y)) + geom_point(alpha = 0.05)
o2 <- ggplot(df, aes(x, y)) + geom_point(alpha = 0.05) + geom_density_2d()
o3 <- ggplot(df, aes(x, y)) + stat_density_2d(aes(fill = ..level..), geom = scale_fill_viridis_c(name = "density") + geom_point(shape =
o4 <- ggplot(df, aes(x, y)) + stat_density_2d(aes(fill = ..density..), geom = scale_fill_viridis_c() + coord_cartesian(expand = FALSE) + geom_point(shape =
o5 <- ggplot(df, aes(x, y)) + geom_hex() + scale_fill_viridis_c() + geom_point(shape =
o6 <- ggplot(df, aes(x, y)) + geom_point(alpha = 0.1) + geom_rug(alpha = 0.01)
cowplot::plot_grid(o1, o2, o3, o4, o5, o6, ncol = 2, labels =
library(hexbin) mixdata <- data.frame(x = c(rnorm(5000),rnorm(5000,4,1.5)), y = c(rnorm(5000),rnorm(5000,2,3)), a = gl(2, 5000)) hexbinplot(y ~ x | a, mixdata)
whitespace <- " \t\n\r\v\f" x <- c( " x y ", " \u2190 \u2192 ", paste0( whitespace, "x", whitespace, "y", whitespace, collapse = "" ), NA )
gsub("[[:space:]]", "", x) gsub("\\s", "", x) library(regex) gsub(space(), "", x)
library(stringr) str_replace_all(x, fixed(" "), "") str_replace_all(x, space(), "")
str_trim(x) str_trim(x, "left") str_trim(x, "right")
library(stringi) stri_replace_all_fixed(x, " ", "") stri_replace_all_charclass(x, "\\p{WHITE_SPACE}", "")
stri_trim(x) stri_trim_both(x) stri_trim(x, "left") stri_trim_left(x) stri_trim(x, "right") stri_trim_right(x)
a <- " xx yy 11 22 33 " str_replace_all(string=a, pattern=" ", repl="") [1] "xxyy112233"
library(stringi) stri_replace_all_charclass(" ala \t ma \n kota ", "\\p{WHITE_SPACE}", "")
library(dplyr) library(stringr) df <- data.frame(a = c(" aZe aze s", "wxc s aze "), b = c(" 12 12 ", "34e e4 "), stringsAsFactors = FALSE) df <- df %>% rowwise() %>% mutate_all(funs(str_squish(.))) %>% ungroup() df a b <chr> <chr> 1 aZe aze s 12 12 2 wxc s aze 34e e4
tmp <- data.frame(x=gl(2,3, labels=letters[24:25]), y=gl(3,1,6, labels=letters[1:3]), z=c(1,2,3,3,3,2))
with(tmp, { out <- matrix(nrow=nlevels(x), ncol=nlevels(y), dimnames=list(levels(x), levels(y))) out[cbind(x, y)] <- z out })
with(tmp, sparseMatrix(i = as.numeric(x), j=as.numeric(y), x=z, dimnames=list(levels(x), levels(y))))
reshape(tmp, idvar="x", timevar="y", direction="wide")
data.frame2matrix = function(data, rowtitle, coltitle, datatitle, rowdecreasing = FALSE, coldecreasing = FALSE, default_value = NA) { if ( (!(rowtitle%in%names(data))) || (!(coltitle%in%names(data))) || (!(datatitle%in%names(data))) ) { stop( } ndata = dim(data)[1] rownames = sort(unique(data[[rowtitle]]), decreasing = rowdecreasing) nrows = length(rownames) colnames = sort(unique(data[[coltitle]]), decreasing = coldecreasing) ncols = length(colnames) out_matrix = matrix(NA, nrow = nrows, ncol = ncols, dimnames=list(rownames, colnames)) for (i1 in 1:ndata) { iR = which(rownames==data[[rowtitle]][i1]) iC = which(colnames==data[[coltitle]][i1]) if (!is.na(out_matrix[iR, iC])) stop( out_matrix[iR, iC] = data[[datatitle]][i1] } out_matrix[is.na(out_matrix)] = default_value return(out_matrix) }
myData = as.data.frame(list( myMatrix = data.frame2matrix(myData, myMatrix > a b c > x 1 2 3 > y 3 3 2
df<-structure(list(V1 = structure(c(1L, 1L, 1L, 2L, 2L, 2L), .Label = c("x", "y"), class = "factor"), V2 = structure(c(1L, 2L, 3L, 1L, 2L, 3L), .Label = c("a", "b", "c"), class = "factor"), V3 = c(1L, 2L, 3L, 3L, 3L, 2L)), .Names = c("V1", "V2", "V3"), class = "data.frame", row.names = c(NA, -6L))
a <- "old" test <- function () { assign("a", "new", envir = .GlobalEnv) } test() a
invisible(readline(prompt="Press [enter] to continue"))
cat ("Press [enter] to continue") line <- readline()
readkey <- function() { cat ("Press [enter] to continue") line <- readline() }
print ("Press [enter] to continue") number <- scan(n=1)
readkey <- function() { cat("[press [enter] to continue]") number <- scan(n=1) }
readkeygraph <- function(prompt) { getGraphicsEvent(prompt = prompt, onMouseDown = NULL, onMouseMove = NULL, onMouseUp = NULL, onKeybd = onKeybd, consolePrompt = "[click on graph then follow top prompt to continue]") Sys.sleep(0.01) return(keyPressed) } onKeybd <- function(key) { keyPressed <<- key } xaxis=c(1:10) yaxis=runif(10,min=0,max=1) plot(xaxis,yaxis) for (i in xaxis) { points(i,yaxis[i],col="red", pch=19) keyPressed = readkeygraph("[press any key to continue]") }
library(tcltk) mywait <- function() { tt <- tktoplevel() tkpack( tkbutton(tt, text= side= tkbind(tt, tkwait.window(tt) }
$ Rscript t.R Solution to everything? > 42 Read 1 item
cat("Press Enter to continue...") invisible(scan("stdin", character(), nlines = 1, quiet = TRUE))
library(data.table) X <- data.table(t = 1:4, a = (1:4)^2) setkey(X, t) X Y <- data.table(t = 3:6, b = (3:6)^2) setkey(Y, t) Y X[Y] X[Y, nomatch = NA] merge(X, Y, by = "t", all.y = TRUE) identical(X[Y], merge(X, Y, by = "t", all.y = TRUE)) X[Y, nomatch = 0] merge(X, Y, by = "t") merge(X, Y, by = "t", all = FALSE) identical( X[Y, nomatch = 0], merge(X, Y, by = "t", all = FALSE) ) merge(X, Y, by = "t", all.x = TRUE) merge(X, Y, by = "t", all = TRUE)
le <- Y[X] mallx <- merge(X, Y, all.x = T) setcolorder(le, names(mallx)) identical(le, mallx)
unique_keys <- unique(c(X[,t], Y[,t])) Y[X[J(unique_keys)]] X[Y[J(unique_keys)]]
library(ggplot2) ggplot(mtcars, aes(factor(cyl))) + geom_bar()
cyl_table <- table(mtcars$cyl) cyl_levels <- names(cyl_table)[order(cyl_table)] mtcars$cyl2 <- factor(mtcars$cyl, levels = cyl_levels) ggplot(mtcars, aes(cyl2)) + geom_bar()
mtcars$cyl3 <- with(mtcars, reorder(cyl, cyl, function(x) -length(x))) ggplot(mtcars, aes(cyl3)) + geom_bar()
ggplot(mtcars, aes(factor(cyl))) + geom_bar() + scale_x_discrete(limits=c(8,4,6))
qplot(reorder(factor(cyl),factor(cyl),length),data=mtcars,geom="bar")
qplot(reorder(factor(cyl),factor(cyl),function(x) length(x)*-1), data=mtcars,geom="bar")
library(ggplot2) library(forcats) ggplot(mtcars, aes(fct_infreq(factor(cyl)))) + geom_bar() + labs(x = "cyl")
ggplot(mtcars, aes(fct_rev(fct_infreq(factor(cyl))))) + geom_bar() + labs(x = "cyl")
order_axis<-function(data, axis, column) { arguments <- as.list(match.call()) col <- eval(arguments$column, data) ax <- eval(arguments$axis, data) a<-reorder(with(data, ax), with(data, col)) df<-cbind.data.frame(data) within(df, do.call("<-",list(paste0(as.character(arguments$axis),"_o"), a))) }
ggplot(order_axis(df, AXIS_X, COLUMN_Y), aes(x = AXIS_X_o, y = COLUMN_Y)) + geom_bar(stat = "identity")
test.env <- new.env() assign( test.env$var <- 100 get( get(
bar <- "global" foo <- function(){ bar <- "in foo" baz <- function(){ bar <- "in baz - before <<-" bar <<- "in baz - after <<-" print(bar) } print(bar) baz() print(bar) } > bar [1] "global" > foo() [1] "in foo" [1] "in baz - before <<-" [1] "in baz - after <<-" > bar [1] "global"
bar <- "global" foo <- function(){ bar <- "in foo" baz <- function(){ assign("bar", "in baz", envir = .GlobalEnv) } print(bar) baz() print(bar) } bar foo() bar
bar <- "global" local({ bar <- "local" print(bar) }) bar
attrs <- {} attrs.a <- 1 f <- function(d) { attrs.a <- d } f(20) print(attrs.a)
attrs <- {} attrs.a <- 1 f <- function(d) { attrs.a <<- d } f(20) print(attrs.a)
typeof(obj) class(obj) sapply(obj, class) sapply(obj, attributes) attributes(obj) names(obj)
obj <- data.frame(a=1:26, b=letters) obj <- list(a=1:26, b=letters, c=list(d=1:26, e=letters)) data(cars) obj <- lm(dist ~ speed, data=cars)
library(data.table) DT = data.table(x=rep(c("b","a","c"),each=3), y=c(1,3,6), v=1:9)
x y v 1: c 1 7 2: c 3 8 3: c 6 9 4: b 1 1 5: b 3 2 6: b 6 3 7: a 1 4 8: a 3 5 9: a 6 6
DT[order(x,-v,decreasing=TRUE),] x y v [1,] c 1 7 [2,] c 3 8 [3,] c 6 9 [4,] b 1 1 [5,] b 3 2 [6,] b 6 3 [7,] a 1 4 [8,] a 3 5 [9,] a 6 6
SEXP foobar(){ SEXP ab; PROTECT(ab = allocVector(STRSXP, 2)); SET_STRING_ELT( ab, 0, mkChar("foo") ); SET_STRING_ELT( ab, 1, mkChar("bar") ); UNPROTECT(1); }
SEXP foobar(){ return Rcpp::CharacterVector::create( "foo", "bar" ) ; }
SEXP foobar(){ Rcpp::CharacterVector res(2) ; res[0] = "foo" ; res[1] = "bar" ; return res ; }
SEXP foo( SEXP x_) { Rcpp::NumericVector x( x_ ) ; ... }
Rcpp::NumericVector x = Rcpp::NumericVector::create( 1.0, 2.0, 3.0 ) ; Rcpp::NumericVector x = Rcpp::NumericVector::create( _["a"] = 1.0, _["b"] = 2.0, _["c"] = 3 ) ;
Rcpp::NumericVector x( 10 ) ; Rcpp::NumericVector x( 10, 2.0 ) ;
SEXP sum( SEXP x_ ){ Rcpp::NumericVector x(x_) ; double res = 0.0 ; for( int i=0; i<x.size(), i++){ res += x[i] ; } return Rcpp::wrap( res ) ; }
using namespace Rcpp ; SEXP sum( SEXP x_ ){ NumericVector x(x_) ; double res = sum( x ) ; return wrap( res ) ; }
a<-10 b<-"Hello world" c<-data.frame() myGlobals<-objects() for(i in myGlobals){ print(typeof(i)) }
x <- 1L typeof(ls()) [1] "character" typeof(get(ls())) [1] "integer"
eapply(.GlobalEnv,typeof) $x [1] "integer" $a [1] "double" $b [1] "character" $c [1] "list"
a <- 10 myGlobals <- objects() for(i in myGlobals){ typeof(i) typeof(get(i)) }
library(tibble) typeof(TRUE) typeof(1L) typeof("foobar") typeof(1) typeof(list(5,6,7)) typeof(2i) typeof(5 + 5L) typeof(c()) typeof(!5) typeof(Inf) typeof(c(5,6,7)) typeof(c(c(TRUE))) typeof(matrix(1:10)) typeof(substr("abc",2,2)) typeof(c(5L,6L,7L)) typeof(c(NA,NA,NA)) typeof(data.frame()) typeof(data.frame(c(3))) typeof(c("foobar")) typeof(pi) typeof(1.66) typeof(1.66L) typeof(c("foobar")) typeof(c(5L, 6L)) typeof(c(1.5, 2.5)) typeof(c(1.5, 2.5)) typeof(c(TRUE, FALSE)) typeof(factor()) typeof(factor(3.14)) typeof(factor(T, F)) typeof(Sys.Date()) typeof(hms::hms(3600)) typeof(c(T, F)) typeof(1:10) typeof(NA) typeof(c(list(T))) typeof(list(c(T))) typeof(c(T, 3.14)) typeof(c(3.14, "foo")) typeof(c("foo",list(T))) typeof(list("foo",c(T))) typeof(TRUE + 5L) typeof(c(TRUE, 5L)[1]) typeof(c(c(2i), TRUE)[1]) typeof(c(NaN, typeof(5 && 4) typeof(8 < typeof(list(4, T)[[1]]) typeof(list(4, T)[[2]]) typeof(2 ** 5) typeof(0E0) typeof(0x3fade) typeof(paste(3, typeof(3 + 四) typeof(iconv("a", "latin1", "UTF-8")) typeof(5 == 5)
library(tibble) class(matrix(1:10)) class(factor("hi")) class(TRUE) class(1L) class("foobar") class(1) class(list(5,6,7)) class(2i) class(data.frame()) class(Sys.Date()) class(sapply) class(charToRaw("hi")) class(array("hi")) class(5 + 5L) class(c()) class(!5) class(Inf) class(c(5,6,7)) class(c(c(TRUE))) class(substr("abc",2,2)) class(c(5L,6L,7L)) class(c(NA,NA,NA)) class(data.frame(c(3))) class(c("foobar")) class(pi) class(1.66) class(1.66L) class(c("foobar")) class(c(5L, 6L)) class(c(1.5, 2.5)) class(c(TRUE, FALSE)) class(factor()) class(factor(3.14)) class(factor(T, F)) class(hms::hms(3600)) class(c(T, F)) class(1:10) class(NA) class(c(list(T))) class(list(c(T))) class(c(T, 3.14)) class(c(3.14, "foo")) class(c("foo",list(T))) class(list("foo",c(T))) class(TRUE + 5L) class(c(TRUE, 5L)[1]) class(c(c(2i), TRUE)[1]) class(c(NaN, class(5 && 4) class(8 < class(list(4, T)[[1]]) class(list(4, T)[[2]]) class(2 ** 5) class(0E0) class(0x3fade) class(paste(3, class(3 + 四) class(iconv("a", "latin1", "UTF-8")) class(5 == 5)
> mtcars %>% + summarise_all(typeof) %>% + gather key value 1 mpg double 2 cyl double 3 disp double 4 hp double 5 drat double 6 wt double 7 qsec double 8 vs double 9 am double 10 gear double 11 carb double
lstype<-function(type= inlist<-ls(.GlobalEnv) if (type== typelist<-sapply(sapply(inlist,get),typeof) return(names(typelist[typelist==type])) }
y = c(1,4,6) d = data.frame(x1 = c(4,-1,3), x2 = c(3,9,8), x3 = c(4,-4,-2))
y <- c(1,4,6) d <- data.frame(y = y, x1 = c(4,-1,3), x2 = c(3,9,8), x3 = c(4,-4,-2)) mod <- lm(y ~ ., data = d)
xnam <- paste("x", 1:25, sep="") fmla <- as.formula(paste("y ~ ", paste(xnam, collapse= "+")))
R> fmla y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 + x20 + x21 + x22 + x23 + x24 + x25
d2<-data.frame(y,d) > d2 y x1 x2 x3 1 1 4 3 4 2 4 -1 9 -4 3 6 3 8 -2 > lm(d2) Call: lm(formula = d2) Coefficients: (Intercept) x1 x2 x3 -5.6316 0.7895 1.1579 NA
xnam <- paste("x", 1:25, sep="") reformulate(xnam, "y") y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 + x20 + x21 + x22 + x23 + x24 + x25
d <- cbind(y, d) reformulate(names(d)[-1], names(d[1])) y ~ x1 + x2 + x3
mod <- lm(reformulate(names(d)[-1], names(d[1])), data=d)
add_backticks = function(x) { paste0("`", x, "`") } x_lm_formula = function(x) { paste(add_backticks(x), collapse = " + ") } build_lm_formula = function(x, y){ if (length(y)>1){ stop("y needs to be just one variable") } as.formula( paste0("`",y,"`", " ~ ", x_lm_formula(x)) ) } df <- data.frame( y = c(1,4,6), x1 = c(4,-1,3), x2 = c(3,9,8), x3 = c(4,-4,-2) ) columns = colnames(df) y_cols = columns[1] x_cols = columns[2:length(columns)] formula = build_lm_formula(x_cols, y_cols) formula lm(formula = formula, data = df) Call: lm(formula = formula, data = df) Coefficients: (Intercept) x1 x2 x3 -5.6316 0.7895 1.1579 NA
Code Country 1950 1951 1952 1953 1954 AFG Afghanistan 20,249 21,352 22,532 23,557 24,555 ALB Albania 8,097 8,986 10,058 11,123 12,246
Code Country Year Value AFG Afghanistan 1950 20,249 AFG Afghanistan 1951 21,352 AFG Afghanistan 1952 22,532 AFG Afghanistan 1953 23,557 AFG Afghanistan 1954 24,555 ALB Albania 1950 8,097 ALB Albania 1951 8,986 ALB Albania 1952 10,058 ALB Albania 1953 11,123 ALB Albania 1954 12,246
reshape(d, direction = "long", varying = list(names(d)[3:7]), v.names = "Value", idvar = c("Code","Country"), timevar = "Year", times = 1950:1954)
library(reshape2) long <- melt(wide, id.vars = c("Code", "Country"))
Code Country variable value 1 AFG Afghanistan 1950 20,249 2 ALB Albania 1950 8,097 3 AFG Afghanistan 1951 21,352 4 ALB Albania 1951 8,986 5 AFG Afghanistan 1952 22,532 6 ALB Albania 1952 10,058 7 AFG Afghanistan 1953 23,557 8 ALB Albania 1953 11,123 9 AFG Afghanistan 1954 24,555 10 ALB Albania 1954 12,246
melt(wide, id.vars = 1:2) melt(wide, measure.vars = 3:7) melt(wide, measure.vars = as.character(1950:1954))
library(data.table) long <- melt(setDT(wide), id.vars = c("Code","Country"), variable.name = "year")
melt(setDT(wide), id.vars = 1:2, variable.name = "year") melt(setDT(wide), measure.vars = 3:7, variable.name = "year") melt(setDT(wide), measure.vars = as.character(1950:1954), variable.name = "year")
library(tidyr) long <- wide %>% gather(year, value, -c(Code, Country))
wide %>% gather(year, value, -Code, -Country) wide %>% gather(year, value, -1:-2) wide %>% gather(year, value, -(1:2)) wide %>% gather(year, value, -1, -2) wide %>% gather(year, value, 3:7) wide %>% gather(year, value, `1950`:`1954`)
long$value <- as.numeric(gsub(",", "", long$value))
long <- melt(setDT(wide), id.vars = c("Code","Country"), variable.name = "year")[, value := as.numeric(gsub(",", "", value))] long <- wide %>% gather(year, value, -c(Code,Country)) %>% mutate(value = as.numeric(gsub(",", "", value)))
wide <- read.table(text="Code Country 1950 1951 1952 1953 1954 AFG Afghanistan 20,249 21,352 22,532 23,557 24,555 ALB Albania 8,097 8,986 10,058 11,123 12,246", header=TRUE, check.names=FALSE)
x <- read.table(textConnection( "Code Country 1950 1951 1952 1953 1954 AFG Afghanistan 20,249 21,352 22,532 23,557 24,555 ALB Albania 8,097 8,986 10,058 11,123 12,246"), header=TRUE) library(reshape) x2 <- melt(x, id = c("Code", "Country"), variable_name = "Year") x2[,"Year"] <- as.numeric(gsub("X", "" , x2[,"Year"]))
cbind(wide[1:2], stack(lapply(wide[-c(1, 2)], as.character)))
wide %>% gather(Year, Value, -Code, -Country) %>% mutate(Year = parse_number(Year) , Value = parse_number(Value))
Code Country Year Value 1 AFG Afghanistan 1950 20249 2 ALB Albania 1950 8097 3 AFG Afghanistan 1951 21352 4 ALB Albania 1951 8986 5 AFG Afghanistan 1952 22532 6 ALB Albania 1952 10058 7 AFG Afghanistan 1953 23557 8 ALB Albania 1953 11123 9 AFG Afghanistan 1954 24555 10 ALB Albania 1954 12246
dat <- structure(list(product = c(11L, 11L, 9L, 9L, 6L, 1L, 11L, 5L, 7L, 11L, 5L, 11L, 4L, 3L, 10L, 7L, 10L, 5L, 9L, 8L)), .Names = "product", row.names = c(NA, -20L), class = "data.frame") `levels<-`( factor(dat$product), list(Tylenol=1:3, Advil=4:6, Bayer=7:9, Generic=10:12) )
[1] Generic Generic Bayer Bayer Advil Tylenol Generic Advil Bayer Generic Advil Generic Advil Tylenol [15] Generic Bayer Generic Advil Bayer Bayer
res <- `levels<-`( factor(dat$product), list(Tylenol=1:3, Advil=4:6, Bayer=7:9, Generic=10:12) )
x <- factor(dat$product) levels(x) <- list(Tylenol=1:3, Advil=4:6, Bayer=7:9, Generic=10:12) x levels(factor(dat$product)) <- list(Tylenol=1:3, Advil=4:6, Bayer=7:9, Generic=10:12) `levels<-`( factor(dat$product), list(Tylenol=1:3, Advil=4:6, Bayer=7:9, Generic=10:12) )
`<-` `[<-` `[<-.data.frame` `dimnames<-` `attributes<-`
Data <- data.frame(x=1:10, y=10:1) names(Data)[1] <- "HI"
dat2 <- within(dat, product <- factor(product)) dat3 <- within(dat2, levels(product) <- list(Tylenol=1:3, Advil=4:6, Bayer=7:9, Generic=10:12))
> head(dat3) product 1 Generic 2 Generic 3 Bayer 4 Bayer 5 Advil 6 Tylenol > str(dat3) $ product: Factor w/ 4 levels "Tylenol","Advil",..: 4 4 3 3 2 1 4 2 3 4 ...
library(Sleuth2) library(ggplot2) discharge<-ex1221new$Discharge area<-ex1221new$Area nitrogen<-ex1221new$NO3 p <- ggplot(ex1221new, aes(discharge, area), main="Point") p + geom_point(aes(size= nitrogen)) + scale_area() + opts(title = expression("Weighted Scatterplot of Watershed Area vs. Discharge and Nitrogen Levels (PPM)"), subtitle="n=41")
library("Sleuth2") library("ggplot2") ggplot(ex1221, aes(Discharge, Area)) + geom_point(aes(size=NO3)) + scale_size_area() + xlab("My x label") + ylab("My y label") + ggtitle("Weighted Scatterplot of Watershed Area vs. Discharge and Nitrogen Levels (PPM)")
ggplot(ex1221, aes(Discharge, Area)) + geom_point(aes(size=NO3)) + scale_size_area("Nitrogen") + scale_x_continuous("My x label") + scale_y_continuous("My y label") + ggtitle("Weighted Scatterplot of Watershed Area vs. Discharge and Nitrogen Levels (PPM)")
ggplot(ex1221, aes(Discharge, Area)) + geom_point(aes(size=NO3)) + scale_size_area() + labs(size= "Nitrogen", x = "My x label", y = "My y label", title = "Weighted Scatterplot of Watershed Area vs. Discharge and Nitrogen Levels (PPM)")
sapply(df$col, function(x) sum(length(which(is.na(x)))))
na_count <-sapply(x, function(y) sum(length(which(is.na(y)))))
---------------------- | row.names | na_count ------------------------ | column_1 | count
df <- data.frame(x = c(1,2,NA), y = rep(NA, 3)) colSums(is.na(df))
library(tidyverse) library(purrr) df %>% map_df(function(x) sum(is.na(x))) %>% gather(feature, num_nulls) %>% print(n = 100)
na_count <-function (x) sapply(x, function(y) sum(is.na(y)))
apply(<name of dataFrame>, 2<for getting column stats>, function(x) {sum(is.na(x))})
sum(is.na(df[, c(columnName)]) sum(!is.na(df[, c(columnName)])
```{r fig.width=1, fig.height=10,echo=FALSE} library(png) library(grid) img <- readPNG("path/to/your/image") grid.raster(img) ```
```{r, out.width = "400px"} knitr::include_graphics("path/to/image.png") ```
```{r generate_figures, fig.show = "hide"} library(knitr) plot(1:10, col = "green") plot(1:10, col = "red") ``` ```{r} include_graphics(sprintf("%sgenerate_figures-2.png", opts_current$get("fig.path"))) ```
<div style="width:300px; height:200px"> ![Image](path/to/image) </div>
--- title: test output: html_document css: test.css --- ![Image](path/to/image)
<img src="path/to/image" height="400px" width="300px" />
```{r} knitr::include_graphics("path/to/image.png", dpi = 100) ```
y = c(.01, .02, .03, .04, .05, .06, .07, .08, .09, .5, -.6) qplot(1, y, geom="boxplot")
df = data.frame(y = c(-100, rnorm(100), 100)) p0 = ggplot(df, aes(y = y)) + geom_boxplot(aes(x = factor(1))) ylim1 = boxplot.stats(df$y)$stats[c(1, 5)] p1 = p0 + coord_cartesian(ylim = ylim1*1.05)
n <- 1e4L dfr <- data.frame( y = exp(rlnorm(n)), f = gl(2, n / 2) ) p <- ggplot(dfr, aes(f, y)) + geom_boxplot() p p2 <- ggplot(dfr, aes(f, y)) + geom_boxplot(outlier.shape = NA) + scale_y_continuous(limits = quantile(dfr$y, c(0.1, 0.9))) p2
coord_cartesian(ylim = quantile(dfr$y, c(0.1, 0.9)))
library(ggplot2) data <- rnorm(100) stats <- boxplot.stats(data)$stats df <- data.frame(x="label1", ymin=stats[1], lower=stats[2], middle=stats[3], upper=stats[4], ymax=stats[5]) p <- ggplot(df, aes(x=x, lower=lower, upper=upper, middle=middle, ymin=ymin, ymax=ymax)) + geom_boxplot(stat="identity") p
library(ggplot2) df = data.frame(x=1, y = c(-10, rnorm(100), 10)) ggplot(df, aes(x, y)) + geom_boxplot(coef=1e30)
library(ggplot2) df = data.frame(y = c(-100, rnorm(100), 100)) p0 = ggplot(df, aes(y = y)) + geom_boxplot(aes(x = factor(1))) p1 = ggplot(df, aes(y = y)) + geom_boxplot(aes(x = factor(1)), coef = 500)
for( i in match(rownames(TT),rownames(data))){ File=paste( Name<-unlist(lapply(colnames(data),function(x) unlist(strsplit(x,"-TCGA"))[1])) type<-unlist(lapply(Name,function(x) unlist(strsplit(x,"-"))[2])) input<-data.frame(lncRNA=as.numeric(as.character(data[i,])),Name,type) p<-ggplot(input,aes(Name,lncRNA,fill=factor(type))) p<-p+geom_boxplot(outlier.shape=NA) max<-max(tapply(input$lncRNA,input$Name,function(x) quantile(x,0.975))) min<-min(tapply(input$lncRNA,input$Name,function(x) quantile(x,0))) p<-p+coord_flip(ylim = c(min, max)) p ggsave(File) }
files <- list.files() dbf.files <- files[-grep(".xml", files, fixed=T)]
packageurl <- "http: install.packages(packageurl, repos=NULL, type="source")
(new-object System.Net.WebClient).DownloadFile("http:
require(devtools) install_version("ggplot2", version = "0.9.1", repos = "http:
Names <- c("e1071", "gtools") Vers <- c("1.6", "2.6.1") InstallOldPackages(pkgs = Names, versions = Vers)
foo <- 1:120 i <- 1 foo[1:(i+6)==(i+6)] [1] 7 14 21 28 35 42 49 56 63 70 77 84 91 98 105 112 119 i <- 10 foo[1:(i+6)==(i+6)] [1] 16 32 48 64 80 96 112
numbers <- 1:4 letters <- factor(c("a", "b", "c", "d")) df <- data.frame(numbers, letters) df
df <- data.frame(f = 1:4, g = letters[1:4]) df levels(df$g) df$g <- factor(df$g, levels = letters[4:1]) df
df$letters <- reorder(df$letters, new.order=letters[4:1]) library(gdata) df$letters <- reorder.factor(df$letters, letters[4:1])
df$letters = factor(df$letters, labels=c("d", "c", "b", "a"))
> numbers = 1:4 > letters = factor(letters[1:4]) > dtf <- data.frame(numbers, letters) > dtf numbers letters 1 1 a 2 2 b 3 3 c 4 4 d > sapply(dtf, class) numbers letters "integer" "factor"
1> with(dtf, as.numeric(letters)) [1] 1 2 3 4 1> levels(dtf$letters) <- letters[4:1] 1> dtf numbers letters 1 1 d 2 2 c 3 3 b 4 4 a 1> with(dtf, as.numeric(letters)) [1] 1 2 3 4
> dtf <- data.frame(f = 1:4, g = factor(letters[1:4])) > dtf f g 1 1 a 2 2 b 3 3 c 4 4 d > with(dtf, as.numeric(g)) [1] 1 2 3 4 > dtf$g <- factor(dtf$g, levels = letters[4:1]) > dtf f g 1 1 a 2 2 b 3 3 c 4 4 d > with(dtf, as.numeric(g)) [1] 4 3 2 1
df <- data.frame(x = c("15-25", "0-4", "5-10", "11-14", "100+"))
library(gtools) df$x <- factor(df$x, levels = mixedsort(df$x)) df$x as.numeric(df$x)
reorderFactors <- function(df, column = "my_column_name", desired_level_order = c("fac1", "fac2", "fac3")) { x = df[[column]] lvls_src = levels(x) idxs_target <- vector(mode="numeric", length=0) for (target in desired_level_order) { idxs_target <- c(idxs_target, which(lvls_src == target)) } x_new <- factor(x,levels(x)[idxs_target]) df[[column]] <- x_new return (df) }
z <- data.frame(x=1:10, y=1:10) test <- function(a){ mean.x <- mean(a$x) print(foo(a)) return(mean.x)} test(z)
test <- function(a="z"){ mean.x <- mean(get(a)$x) print(a) return(mean.x)} test("z")
a<-data.frame(x=1:10,y=1:10) test<-function(z){ mean.x<-mean(z$x) nm <-deparse(substitute(z)) print(nm) return(mean.x)} test(a)
> lapply( list(a=4,b=5), function(x) {nm <- deparse(substitute(x)); strsplit(nm, $a $a[[1]] [1] "X" "" "1L]]" $b $b[[1]] [1] "X" "" "2L]]" > lapply( c(a=4,b=5), function(x) {nm <- deparse(substitute(x)); strsplit(nm, $a $a[[1]] [1] "structure(c(4, 5), .Names = c(\"a\", \"b\"))" "" [3] "1L]]" $b $b[[1]] [1] "structure(c(4, 5), .Names = c(\"a\", \"b\"))" "" [3] "2L]]"
print.foo=function(x){ print(deparse(substitute(x))) } test = list(a=1, b=2) class(test)="foo" print(test) test
lstype<-function(type= inlist<-ls(.GlobalEnv) if (type== typelist<-sapply(sapply(inlist,get),typeof) return(names(typelist[typelist==type])) }
list.objects <- function(env = .GlobalEnv) { if(!is.environment(env)){ env <- deparse(substitute(env)) stop(sprintf( } obj.type <- function(x) class(get(x, envir = env)) foo <- sapply(ls(envir = env), obj.type) object.name <- names(foo) names(foo) <- seq(length(foo)) dd <- data.frame(CLASS = foo, OBJECT = object.name, stringsAsFactors = FALSE) dd[order(dd$CLASS),] } > x <- 1:5 > d <- data.frame(x) > list.objects() > list.objects(env = x)
FirstName Letter Alex A1 Alex A6 Alex A7 Bob A1 Chris A9 Chris A6
matches <- unique ( grep("A1| A9 | A6", myfile$Letter, value=TRUE, fixed=TRUE) )
matches <- unique (grep(paste(toMatch,collapse="|"), myfile$Letter, value=TRUE))
patterns <- c("A1", "A9", "A6") >your_df FirstName Letter 1 Alex A1 2 Alex A6 3 Alex A7 4 Bob A1 5 Chris A9 6 Chris A6 result <- filter(your_df, grepl(paste(patterns, collapse="|"), Letter)) >result FirstName Letter 1 Alex A1 2 Alex A6 3 Bob A1 4 Chris A9 5 Chris A6
exclude <- function (theList, toMatch){ return(setdiff(theList,include(theList,toMatch))) } include <- function (theList, toMatch){ matches <- unique (grep(paste(toMatch,collapse="|"), theList, value=TRUE)) return(matches) }
toMatch <- myfile$Letter matches <- myfile[grepl(paste(toMatch, collapse="|"), myfile$Letter), ] matches Letter Firstname 1 A1 Alex 2 A6 Alex 4 A1 Bob 5 A9 Chris 6 A6 Chris
matches <- unique(grep("A1|A9|A6", myfile$Letter, value=TRUE, fixed=TRUE))
patterns <- c("A1", "A9", "A6") df <- data.frame(name=c("A","Ale","Al","lex","x"),Letters=c("A1","A2","A9","A1","A9")) name Letters 1 A A1 2 Ale A2 3 Al A9 4 lex A1 5 x A9 df[unlist(sapply(patterns, grep, df$Letters, USE.NAMES = F)), ] name Letters 1 A A1 4 lex A1 3 Al A9 5 x A9
grep *A6* "Alex A1 Alex A6 Alex A7 Bob A1 Chris A9 Chris A6"; grep *A7* "Alex A1 Alex A6 Alex A7 Bob A1 Chris A9 Chris A6"; grep *A8* "Alex A1 Alex A6 Alex A7 Bob A1 Chris A9 Chris A6";
$stingtomatch = "${1}"; grep *A6* "${stingtomatch}"; grep *A7* "${stingtomatch}"; grep *A8* "${stingtomatch}";
is.na(dat) <- !dat dat x y 1 NA 2 2 1 2 3 1 1 4 2 1 5 NA NA
set.seed(1) dat <- data.frame(x = sample(0:2, 5, TRUE), y = sample(0:2, 5, TRUE)) x y 1 0 2 2 1 2 3 1 1 4 2 1 5 0 0 dat[dat==0] <- NA x y 1 NA 2 2 1 2 3 1 1 4 2 1 5 NA NA
library("data.table") status = as.data.table(occupationalStatus) head(status, 10) origin destination N 1: 1 1 50 2: 2 1 16 3: 3 1 12 4: 4 1 11 5: 5 1 2 6: 6 1 12 7: 7 1 0 8: 8 1 0 9: 1 2 19 10: 2 2 40 status[N == 0, N := NA] head(status, 10) origin destination N 1: 1 1 50 2: 2 1 16 3: 3 1 12 4: 4 1 11 5: 5 1 2 6: 6 1 12 7: 7 1 NA 8: 8 1 NA 9: 1 2 19 10: 2 2 40
library(dplyr) df <- data_frame(col1 = c(1, 2, 3, 0), col2 = c(0, 2, 3, 4), col3 = c(1, 0, 3, 0), col4 = c( na_if(df, 0) col1 col2 col3 col4 <dbl> <dbl> <dbl> <chr> 1 1 NA 1 a 2 2 2 NA b 3 3 3 3 c 4 NA 4 NA d
changetoNA <- function(colnum,df) { col <- df[,colnum] if (is.numeric(col)) { col[col == -1 & is.numeric(col)] <- NA } return(col) } df <- data.frame(sapply(1:5, changetoNA, df))
set.seed(3221) my.data <- data.frame(y=rnorm(5), x1=c(1:5), x2=c(TRUE, TRUE, FALSE, FALSE, FALSE), X3=letters[1:5])
sapply(my.data, class) y x1 x2 X3 "numeric" "integer" "logical" "factor"
str(my.data) $ y : num 1.03 1.599 -0.818 0.872 -2.682 $ x1: int 1 2 3 4 5 $ x2: logi TRUE TRUE FALSE FALSE FALSE $ X3: Factor w/ 5 levels "a","b","c","d",..: 1 2 3 4 5
sapply(my.data, typeof) y x1 x2 X3 "double" "integer" "logical" "integer"
data_types <- function(frame) { res <- lapply(frame, class) res_frame <- data.frame(unlist(res)) barplot(table(res_frame), main="Data Types", col="steelblue", ylab="Number of Features") }
dta <- data.frame(a = c(1,2,3), b = c(4,5,6), c = c(TRUE, FALSE, TRUE))
install.package( library(devtools) install_github( library(helpRFunctions) my.data <- data.frame(y=rnorm(5), x1=c(1:5), x2=c(TRUE, TRUE, FALSE, FALSE, FALSE), X3=letters[1:5]) t <- list.df.var.types(my.data) t$factor t$integer t$logical t$numeric
summary.default(mtcars) Length Class Mode mpg 32 -none- numeric cyl 32 -none- numeric disp 32 -none- numeric hp 32 -none- numeric drat 32 -none- numeric wt 32 -none- numeric qsec 32 -none- numeric vs 32 -none- numeric am 32 -none- numeric gear 32 -none- numeric carb 32 -none- numeric
mpg cyl disp hp drat wt qsec vs am gear carb * <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> 1 21 6 160 110 3.9 2.62 16.5 0 1 4 4 2 21 6 160 110 3.9 2.88 17.0 0 1 4 4 3 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1
Observations: 32 Variables: 11 $ mpg <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8, 16.4, 17.... $ cyl <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8, 8, 8, 8, ... $ disp <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 167.6, 167.6... $ hp <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180, 205, 215... $ drat <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92, 3.07, 3.0... $ wt <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.440, 3.440... $ qsec <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18.30, 18.90... $ vs <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, ... $ am <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, ... $ gear <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3, 3, 3, ... $ carb <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2, 2, 4, 2, ...
$mpg [1] "numeric" $cyl [1] "numeric" $disp [1] "numeric" $hp [1] "numeric"
library(hablar) mtcars %>% convert(chr(mpg, am), int(carb))
mpg cyl disp hp drat wt qsec vs am gear carb <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr> <dbl> <int> 1 21 6 160 110 3.9 2.62 16.5 0 1 4 4 2 21 6 160 110 3.9 2.88 17.0 0 1 4 4 3 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1 4 21.4 6 258 110 3.08 3.22 19.4 1 0 3 1
df.expanded var1 var2 1 a d 2 b e 3 b e 4 c f 5 c f 6 c f
df.expanded <- df[rep(row.names(df), df$freq), 1:2]
var1 var2 1 a d 2 b e 2.1 b e 3 c f 3.1 c f 3.2 c f
var1 var2 1 a d 2 b e 2.1 b e 3 c f 3.1 c f 3.2 c f
library(tidyr) df <- data.frame(var1=c( df %>% uncount(freq) var1 var2 1 a d 2 b e 2.1 b e 3 c f 3.1 c f 3.2 c f
df.expanded <- df[rep(seq(nrow(df)), df$freq), 1:2]
setDT(df) df.expanded <- df[rep(seq(.N), freq), !"freq"]
library(data.table) dt <- data.table(df) dt.expanded <- dt[ ,list(freq=rep(1,freq)),by=c("var1","var2")] dt.expanded[ ,freq := NULL] dt.expanded
df <- data.frame(var1=1:2e3, var2=1:2e3, freq=1:2e3) system.time(df.exp <- df[rep(row.names(df), df$freq), 1:2]) dt <- data.table(df) system.time(dt.expanded <- dt[ ,list(freq=rep(1,freq)),by=c("var1","var2")])
y <- c("1,200","20,000","100","12,111") as.numeric(gsub(",", "", y))
setClass("num.with.commas") setAs("character", "num.with.commas", function(from) as.numeric(gsub(",", "", from) ) )
x <- read.csv("file.csv",header=TRUE,colClasses="character") col2cvt <- 15:41 x[,col2cvt] <- lapply(x[,col2cvt],function(x){as.numeric(gsub(",", "", x))})
library(readr) read_csv("numbers\n800\n\"1,800\"\n\"3500\"\n6.5", col_types = list(col_numeric()) )
> read_csv("numbers\n800\n\"1,800\"\n\"3500\"\n6.5") Source: local data frame [4 x 1] numbers (chr) 1 800 2 1,800 3 3500 4 6.5
> set.seed(1) > tmp <- as.character(sample(c(1:10), 100, replace=TRUE)) > tmp <- c(tmp, "1,003") > tmp <- paste(tmp, collapse="\"\n\"")
> tail(read_csv(tmp)) Source: local data frame [6 x 1] 3" (dbl) 1 8.000 2 5.000 3 5.000 4 9.000 5 7.000 6 1.003 Warning message: 1 problems parsing literal data. See problems(...) for more details.
lines <- "www, rrr, 1,234, ttt \n rrr,zzz, 1,234,567,987, rrr"
> dft Source: local data frame [11 x 5] Bureau.Name Account.Code X2014 X2015 X2016 1 Senate 110 158,000 211,000 186,000 2 Senate 115 0 0 0 3 Senate 123 15,000 71,000 21,000 4 Senate 126 6,000 14,000 8,000 5 Senate 127 110,000 234,000 134,000 6 Senate 128 120,000 159,000 134,000 7 Senate 129 0 0 0 8 Senate 130 368,000 465,000 441,000 9 Senate 132 0 0 0 10 Senate 140 0 0 0 11 Senate 140 0 0 0
dft %>% mutate_each(funs(as.character(.)), X2014:X2016) %>% mutate_each(funs(gsub(",", "", .)), X2014:X2016) %>% mutate_each(funs(as.numeric(.)), X2014:X2016)
"1,234","123","1,234" "234","123","1,234" 123,456,789
txt <- 1,Bagamoyo,1,"136,227","8,514,187,500.000000000000000","352,678.813105723350000" 2,Bariadi,2,"88,350","5,521,875,000.000000000000000","526,307.288878142830000" 3,Chunya,3,"483,059","30,191,187,500.000000000000000","352,444.699742995200000"' require(readr) read_csv(txt)
OBJECTID District_N ZONE_CODE COUNT AREA SUM <int> <chr> <int> <dbl> <dbl> <dbl> 1 1 Bagamoyo 1 136227 8514187500 352678.8 2 2 Bariadi 2 88350 5521875000 526307.3 3 3 Chunya 3 483059 30191187500 352444.7
y <- c("1,200","20,000","100","12,111") as.numeric(unlist(lapply( strsplit(y,","),paste, collapse="")))
locale = locale(decimal_mark = ",") read_delim("filetoread.csv",
> mtcars2 <- select( mtcars, disp2 = disp ) > head( mtcars2 ) disp2 Mazda RX4 160 Mazda RX4 Wag 160 Datsun 710 108 Hornet 4 Drive 258 Hornet Sportabout 360 Valiant 225 > changes( mtcars, mtcars2 ) Changed variables: old new disp 0x105500400 disp2 0x105500400 Changed attributes: old new names 0x106d2cf50 0x106d28a98
library( library( DF = data.frame(var=1:5) DF %>% rename(c( mutate(x.sq=x^2)
rename <- function(dat, oldnames, newnames) { datnames <- colnames(dat) datnames[which(datnames %in% oldnames)] <- newnames colnames(dat) <- datnames dat } dat <- rename(mtcars,c("mpg","cyl"), c("mympg","mycyl")) head(dat) mympg mycyl disp hp drat wt qsec vs am gear carb Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1
> dplyr:::changes(mtcars, dat) Changed variables: old new disp 0x108b4b0e0 0x108b4e370 hp 0x108b4b210 0x108b4e4a0 drat 0x108b4b340 0x108b4e5d0 wt 0x108b4b470 0x108b4e700 qsec 0x108b4b5a0 0x108b4e830 vs 0x108b4b6d0 0x108b4e960 am 0x108b4b800 0x108b4ea90 gear 0x108b4b930 0x108b4ebc0 carb 0x108b4ba60 0x108b4ecf0 mpg 0x1033ee7c0 cyl 0x10331d3d0 mympg 0x108b4e110 mycyl 0x108b4e240 Changed attributes: old new names 0x10c100558 0x10c2ea3f0 row.names 0x108b4bb90 0x108b4ee20 class 0x103bd8988 0x103bd8f58
iris %>% select_all(~gsub("\\s+|\\.", "_", .)) %>% select_all(tolower) %>% head(2) sepal_length sepal_width petal_length petal_width species 1 5.1 3.5 1.4 0.2 setosa 2 4.9 3.0 1.4 0.2 setosa
occ_5d <- dplyr::rename(occ_5d, rowname= Error: Unknown column `code_5d` Call `rlang::last_error()` to see a backtrace
fileName <- "http: con1 <- unz(fileName, filename="a1.dat", open = "r")
temp <- tempfile() download.file("http: data <- read.table(unz(temp, "a1.dat")) unlink(temp)
temp <- tempfile() download.file("http: con <- unz(temp, "a1.dat") data <- matrix(scan(con),ncol=4,byrow=TRUE) unlink(temp)
download(url, dest="dataset.zip", mode="wb") unzip ("dataset.zip", exdir = "./")
unzip(zipfile="<directory and filename>", exdir="<directory where the content will be extracted>")
library(data.table) temp <- tempfile() download.file("https: timeUse <- fread(unzip(temp, files = "atusact_0315.dat")) rm(temp)
url <-"https: temp <- tempfile() temp2 <- tempfile() download.file(url, temp) unzip(zipfile = temp, exdir = temp2) data <- read_xls(file.path(temp2, "fire station x_y.xls")) unlink(c(temp, temp2))
library(RColorBrewer) n <- 60 qual_col_pals = brewer.pal.info[brewer.pal.info$category == col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))) pie(rep(1,n), col=sample(col_vector, n))
palette(rainbow(6)) (palette(gray(seq(0,.9,len = 25))))
palette(c(rgb(170,93,152, maxColorValue=255), rgb(103,143,57, maxColorValue=255), rgb(196,95,46, maxColorValue=255), rgb(79,134,165, maxColorValue=255), rgb(205,71,103, maxColorValue=255), rgb(203,77,202, maxColorValue=255), rgb(115,113,206, maxColorValue=255)))
library(randomcoloR) n <- 20 palette <- distinctColorPalette(n)
n <- 50 palette <- distinctColorPalette(n) pie(rep(1, n), col=palette)
install.packages("viridis") library(viridis) viridis_pal(option = "D")(n)
y1 <- rnorm(10, 100, 20) y2 <- rnorm(10, 1, 1) x <- 1:10 plot(y1 ~ x, ylim = c(-1, 150)) points(y2 ~ x, pch = 2)
set.seed(101) x <- 1:10 y <- rnorm(10) z <- runif(10, min=1000, max=10000) par(mar = c(5, 4, 4, 4) + 0.3) plot(x, y) par(new = TRUE) plot(x, z, type = "l", axes = FALSE, bty = "n", xlab = "", ylab = "") axis(side=4, at = pretty(range(z))) mtext("z", side=4, line=3)
time <- seq(0,72,12) betagal.abs <- c(0.05,0.18,0.25,0.31,0.32,0.34,0.35) cell.density <- c(0,1000,2000,3000,4000,5000,6000) par(mar=c(5, 4, 4, 6) + 0.1) plot(time, betagal.abs, pch=16, axes=FALSE, ylim=c(0,1), xlab="", ylab="", type="b",col="black", main="Mike axis(2, ylim=c(0,1),col="black",las=1) mtext("Beta Gal Absorbance",side=2,line=2.5) box() par(new=TRUE) plot(time, cell.density, pch=15, xlab="", ylab="", ylim=c(0,7000), axes=FALSE, type="b", col="red") mtext("Cell Density",side=4,col="red",line=4) axis(4, ylim=c(0,7000), col="red",col.axis="red",las=1) axis(1,pretty(range(time),10)) mtext("Time (Hours)",side=1,col="black",line=2.5) legend("topleft",legend=c("Beta Gal","Cell Density"), text.col=c("black","red"),pch=c(16,15),col=c("black","red"))
dat <- data.frame(x = c(rnorm(100), rnorm(100, 10, 2)) , y = c(rnorm(100), rlnorm(100, 9, 2)) , index = rep(1:2, each = 100) ) require(ggplot2) ggplot(dat, aes(x,y)) + geom_point() + facet_wrap(~ index, scales = "free_y")
rescale <- function(vec, lims=range(vec), clip=c(0, 1)) { slope <- (1 - 0) / (lims[2] - lims[1]) intercept <- - slope * lims[1] xformed <- slope * vec + intercept xformed[xformed < 0] <- clip[1] xformed[xformed > 1] <- clip[2] xformed }
ggplot(d, aes(position)) + geom_line(aes(y = rescale(fst))) + geom_line(aes(y = rescale(coverage))) + facet_wrap(~chrom)
data<-read.table(text= "e0AL fxAL e0CO fxCO e0BR fxBR anos 51.8 5.9 50.6 6.8 51.0 6.2 1955 54.7 5.9 55.2 6.8 53.5 6.2 1960 57.1 6.0 57.9 6.8 55.9 6.2 1965 59.1 5.6 60.1 6.2 57.9 5.4 1970 61.2 5.1 61.8 5.0 59.8 4.7 1975 63.4 4.5 64.0 4.3 61.8 4.3 1980 65.4 3.9 66.9 3.7 63.5 3.8 1985 67.3 3.4 68.0 3.2 65.5 3.1 1990 69.1 3.0 68.7 3.0 67.5 2.6 1995 70.9 2.8 70.3 2.8 69.5 2.5 2000 72.4 2.5 71.7 2.6 71.1 2.3 2005 73.3 2.3 72.9 2.5 72.1 1.9 2010 74.3 2.2 73.8 2.4 73.2 1.8 2015 75.2 2.0 74.6 2.3 74.2 1.7 2020 76.0 2.0 75.4 2.2 75.2 1.6 2025 76.8 1.9 76.2 2.1 76.1 1.6 2030 77.6 1.9 76.9 2.1 77.1 1.6 2035 78.4 1.9 77.6 2.0 77.9 1.7 2040 79.1 1.8 78.3 1.9 78.7 1.7 2045 79.8 1.8 79.0 1.9 79.5 1.7 2050 80.5 1.8 79.7 1.9 80.3 1.7 2055 81.1 1.8 80.3 1.8 80.9 1.8 2060 81.7 1.8 80.9 1.8 81.6 1.8 2065 82.3 1.8 81.4 1.8 82.2 1.8 2070 82.8 1.8 82.0 1.7 82.8 1.8 2075 83.3 1.8 82.5 1.7 83.4 1.9 2080 83.8 1.8 83.0 1.7 83.9 1.9 2085 84.3 1.9 83.5 1.8 84.4 1.9 2090 84.7 1.9 83.9 1.8 84.9 1.9 2095 85.1 1.9 84.3 1.8 85.4 1.9 2100", header=T) require(plotrix) twoord.stackplot(lx=data$anos, rx=data$anos, ldata=cbind(data$e0AL, data$e0BR, data$e0CO), rdata=cbind(data$fxAL, data$fxBR, data$fxCO), lcol=c("black","red", "blue"), rcol=c("black","red", "blue"), ltype=c("l","o","b"), rtype=c("l","o","b"), lylab="Años de Vida", rylab="Hijos x Mujer", xlab="Tiempo", main="Mortalidad/Fecundidad:1950–2100", border="grey80") legend("bottomright", c(paste("Proy:", c("A. Latina", "Brasil", "Colombia"))), cex=1, col=c("black","red", "blue"), lwd=2, bty="n", lty=c(1,1,2), pch=c(NA,1,1) )
x <- 1:10 y1 <- rnorm(10, 100, 20) y2 <- rnorm(10, 1, 1)
par(mar=c(5,5,5,5)+0.1, las=1) plot.new() plot.window(xlim=range(x), ylim=range(y1)) points(x, y1, col="red", pch=19) axis(1) axis(2, col.axis="red") box() plot.window(xlim=range(x), ylim=range(y2)) points(x, y2, col="limegreen", pch=19) axis(4, col.axis="limegreen")
last <- function (x){ x[length(x)] } fill.NAs <- function(isNA){ if (isNA[1] == 1) { isNA[1:max({which(isNA==0)[1]-1},1)] <- 0 } isNA.neg <- isNA.pos <- isNA.diff <- diff(isNA) isNA.pos[isNA.diff < 0] <- 0 isNA.neg[isNA.diff > 0] <- 0 which.isNA.neg <- which(as.logical(isNA.neg)) if (length(which.isNA.neg)==0) return(NULL) which.isNA.pos <- which(as.logical(isNA.pos)) which.isNA <- which(as.logical(isNA)) if (length(which.isNA.neg)==length(which.isNA.pos)){ replacement <- rep(which.isNA.pos[2:length(which.isNA.neg)], which.isNA.neg[2:max(length(which.isNA.neg)-1,2)] - which.isNA.pos[1:max(length(which.isNA.neg)-1,1)]) replacement <- c(replacement, rep(last(which.isNA.pos), last(which.isNA) - last(which.isNA.pos))) } else { replacement <- rep(which.isNA.pos[1:length(which.isNA.neg)], which.isNA.neg - which.isNA.pos[1:length(which.isNA.neg)]) replacement <- c(replacement, rep(last(which.isNA.pos), last(which.isNA) - last(which.isNA.pos))) } replacement }
y <- c(NA, 2, 2, NA, NA, 3, NA, 4, NA, NA) isNA <- as.numeric(is.na(y)) replacement <- fill.NAs(isNA) if (length(replacement)){ which.isNA <- which(as.logical(isNA)) to.replace <- which.isNA[which(isNA==0)[1]:length(which.isNA)] y[to.replace] <- y[replacement] }
> example(na.locf) na.lcf> az <- zoo(1:6) na.lcf> bz <- zoo(c(2,NA,1,4,5,2)) na.lcf> na.locf(bz) 1 2 3 4 5 6 2 2 1 4 5 2 na.lcf> na.locf(bz, fromLast = TRUE) 1 2 3 4 5 6 2 1 1 4 5 2 na.lcf> cz <- zoo(c(NA,9,3,2,3,2)) na.lcf> na.locf(cz) 2 3 4 5 6 9 3 2 3 2
repeat.before = function(x) { ind = which(!is.na(x)) if(is.na(x[1])) ind = c(1,ind) rep(x[ind], times = diff( c(ind, length(x) + 1) )) } x = c(NA,NA, xx = rep(x, 1000000) system.time({ yzoo = na.locf(xx,na.rm=F)}) system.time({ yrep = repeat.before(xx)})
repeat_last = function(x, forward = TRUE, maxgap = Inf, na.rm = FALSE) { if (!forward) x = rev(x) ind = which(!is.na(x)) if (is.na(x[1]) && !na.rm) ind = c(1,ind) rep_times = diff( c(ind, length(x) + 1) ) if (maxgap < Inf) { exceed = rep_times - 1 > maxgap if (any(exceed)) { ind = sort(c(ind[exceed] + 1, ind)) rep_times = diff(c(ind, length(x) + 1) ) } } x = rep(x[ind], times = rep_times) if (!forward) x = rev(x) x }
require(data.table) replaceNaWithLatest <- function( dfIn, nameColNa = names(dfIn)[1] ){ dtTest <- data.table(dfIn) setnames(dtTest, nameColNa, "colNa") dtTest[, segment := cumsum(!is.na(colNa))] dtTest[, colNa := colNa[1], by = "segment"] dtTest[, segment := NULL] setnames(dtTest, "colNa", nameColNa) return(dtTest) }
library(Rcpp) cppFunction( int n = x.size(); for(int i = 0; i<n; i++) { if((i > 0) && (x[i] == NA_INTEGER) & (x[i-1] != NA_INTEGER)) { x[i] = x[i-1]; } } return x; }
x <- sample(c(1,2,3,4,NA)) bench_em <- function(x,count = 10) { x <- sample(x,count,replace = TRUE) print(microbenchmark( na_locf(x), replace_na_with_last(x), na.lomf(x), na.locf(x), repeat.before(x) ), order = "mean", digits = 1) }
bench_em(x,1e6) Unit: microseconds expr min lq mean median uq max neval na_locf(x) 697 798 821 814 821 1e+03 100 na.lomf(x) 3511 4137 5002 4214 4330 1e+04 100 replace_na_with_last(x) 4482 5224 6473 5342 5801 2e+04 100 repeat.before(x) 4793 5044 6622 5097 5520 1e+04 100 na.locf(x) 12017 12658 17076 13545 19193 2e+05 100
all.equal( na_locf(x), replace_na_with_last(x), na.lomf(x), na.locf(x), repeat.before(x) ) [1] TRUE
NumericVector na_locf_numeric(NumericVector x) { int n = x.size(); LogicalVector ina = is_na(x); for(int i = 1; i<n; i++) { if((ina[i] == TRUE) & (ina[i-1] != TRUE)) { x[i] = x[i-1]; } } return x; }
na.lomf <- function(x) { na.lomf.0 <- function(x) { non.na.idx <- which(!is.na(x)) if (is.na(x[1L])) { non.na.idx <- c(1L, non.na.idx) } rep.int(x[non.na.idx], diff(c(non.na.idx, length(x) + 1L))) } dim.len <- length(dim(x)) if (dim.len == 0L) { na.lomf.0(x) } else { apply(x, dim.len, na.lomf.0) } }
> > na.lomf(c(1, NA,2, NA, NA)) [1] 1 1 2 2 2 > > > na.lomf(matrix(c(1, NA, NA, 2, NA, NA), ncol = 2)) [,1] [,2] [1,] 1 2 [2,] 1 2 [3,] 1 2
replace_na_with_last<-function(x,a=!is.na(x)){ x[which(a)[c(1,1:sum(a))][cumsum(a)+1]] } > replace_na_with_last(c(1,NA,NA,NA,3,4,5,NA,5,5,5,NA,NA,NA)) [1] 1 1 1 1 3 4 5 5 5 5 5 5 5 5 > replace_na_with_last(c(NA,"aa",NA,"ccc",NA)) [1] "aa" "aa" "aa" "ccc" "ccc"
> system.time(replace_na_with_last(sample(c(1,2,3,NA),1e6,replace=TRUE))) user system elapsed 0.072 0.000 0.071
> dt <- data.table(y = c(NA, 2, 2, NA, NA, 3, NA, 4, NA, NA)) > dt[, y_forward_fill := y[1], .(cumsum(!is.na(y)))] > dt y y_forward_fill 1: NA NA 2: 2 2 3: 2 2 4: NA 2 5: NA 2 6: 3 3 7: NA 3 8: 4 4 9: NA 4 10: NA 4
> dt <- data.table(y = c(0, 2, -2, 0, 0, 3, 0, -4, 0, 0)) > dt[, y_forward_fill := y[1], .(cumsum(y != 0))] > dt y y_forward_fill 1: 0 0 2: 2 2 3: -2 -2 4: 0 -2 5: 0 -2 6: 3 3 7: 0 3 8: -4 -4 9: 0 -4 10: 0 -4
library(Rcpp) cppFunction( R_xlen_t n = x.size(); for(R_xlen_t i = 0; i<n; i++) { if(i > 0 && !R_finite(x[i]) && R_finite(x[i-1])) { x[i] = x[i-1]; } } return x; }
cppFunction( R_xlen_t n = x.size(); for(R_xlen_t i = 0; i<n; i++) { if(i > 0 && x[i] == NA_STRING && x[i-1] != NA_STRING) { x[i] = x[i-1]; } } return x; }
nullIdx <- as.array(which(is.na(masterData$RequiredColumn))) masterData$RequiredColumn[nullIdx] = masterData$RequiredColumn[nullIdx-1]
rollForward <- function(x){ curr <- 0 for (i in 1:length(x)){ if (is.na(x[i])){ x[i] <- curr } else{ curr <- x[i] } } return(x) }
z <- !is.na(y) z <- z | !cumsum(z) y <- y[z][cumsum(z)]
year pollution 1 1999 346.82000 2 2002 134.30882 3 2005 130.43038 4 2008 88.27546
plot5 <- ggplot(df, aes(year, pollution)) + geom_point() + geom_line() + labs(x = "Year", y = "Particulate matter emissions (tons)", title = "Motor vehicle emissions in Baltimore")
$ year : num 1 2 3 4 $ pollution: num [1:4(1d)] 346.8 134.3 130.4 88.3 ..- attr(*, "dimnames")=List of 1 .. ..$ : chr "1999" "2002" "2005" "2008" structure(list(year = c(1, 2, 3, 4), pollution = structure(c(346.82, 134.308821199349, 130.430379885892, 88.275457392443), .Dim = 4L, .Dimnames = list( c("1999", "2002", "2005", "2008")))), .Names = c("year", "pollution"), row.names = c(NA, -4L), class = "data.frame")
plot5 <- ggplot(df, aes(year, pollution, group = 1)) + geom_point() + geom_line() + labs(x = "Year", y = "Particulate matter emissions (tons)", title = "Motor vehicle emissions in Baltimore")
library(ggplot2) df <- structure(list(year = c(1, 2, 3, 4), pollution = structure(c(346.82, 134.308821199349, 130.430379885892, 88.275457392443), .Dim = 4L, .Dimnames = list( c("1999", "2002", "2005", "2008")))), .Names = c("year", "pollution"), row.names = c(NA, -4L), class = "data.frame") df[] <- lapply(df, as.numeric) ggplot(df, aes(year, pollution)) + geom_point() + geom_line() + labs(x = "Year", y = "Particulate matter emissions (tons)", title = "Motor vehicle emissions in Baltimore")
set.seed(100) df <- data.frame(cat = c(rep("aaa", 5), rep("bbb", 5), rep("ccc", 5)), val = runif(15)) df <- df[order(df$cat, df$val), ] df cat val 1 aaa 0.05638315 2 aaa 0.25767250 3 aaa 0.30776611 4 aaa 0.46854928 5 aaa 0.55232243 6 bbb 0.17026205 7 bbb 0.37032054 8 bbb 0.48377074 9 bbb 0.54655860 10 bbb 0.81240262 11 ccc 0.28035384 12 ccc 0.39848790 13 ccc 0.62499648 14 ccc 0.76255108 15 ccc 0.88216552
df$num <- 1 for (i in 2:(length(df[,1]))) { if (df[i,"cat"]==df[(i-1),"cat"]) { df[i,"num"]<-df[i-1,"num"]+1 } } df cat val num 1 aaa 0.05638315 1 2 aaa 0.25767250 2 3 aaa 0.30776611 3 4 aaa 0.46854928 4 5 aaa 0.55232243 5 6 bbb 0.17026205 1 7 bbb 0.37032054 2 8 bbb 0.48377074 3 9 bbb 0.54655860 4 10 bbb 0.81240262 5 11 ccc 0.28035384 1 12 ccc 0.39848790 2 13 ccc 0.62499648 3 14 ccc 0.76255108 4 15 ccc 0.88216552 5
library(plyr) ddply(df, .(cat), mutate, id = seq_along(val))
library(dplyr) df %>% group_by(cat) %>% mutate(id = row_number())
library(data.table) DT <- data.table(df) DT[, id := seq_len(.N), by = cat] DT[, id := rowid(cat)]
> df cat val num 4 aaa 0.05638315 1 2 aaa 0.25767250 2 1 aaa 0.30776611 3 5 aaa 0.46854928 4 3 aaa 0.55232243 5 10 bbb 0.17026205 1 8 bbb 0.37032054 2 6 bbb 0.48377074 3 9 bbb 0.54655860 4 7 bbb 0.81240262 5 13 ccc 0.28035384 1 14 ccc 0.39848790 2 11 ccc 0.62499648 3 15 ccc 0.76255108 4 12 ccc 0.88216552 5
df$num <- sequence(rle(as.character(df$cat))$lengths)
for (i in unique(df$cat)) df$num[df$cat == i] <- seq_len(sum(df$cat == i))
library(data.table) dt <- data.table(df) dt[, .( val , num = rank(val)) , by = list(cat)][order(cat, num),] cat val num 1: aaa 0.05638315 1 2: aaa 0.25767250 2 3: aaa 0.30776611 3 4: aaa 0.46854928 4 5: aaa 0.55232243 5 6: bbb 0.17026205 1 7: bbb 0.37032054 2 8: bbb 0.48377074 3 9: bbb 0.54655860 4 10: bbb 0.81240262 5 11: ccc 0.28035384 1 12: ccc 0.39848790 2 13: ccc 0.62499648 3 14: ccc 0.76255108 4 dt[, .( val , num = rank(-val)) , by = list(cat)][order(cat, num),]
set.seed(100) df <- data.frame( cat = c(rep("aaa", 5), rep("ccc", 5), rep("bbb", 5)), val = runif(15)) df %>% arrange(cat, val) %>% group_by(cat) %>% mutate(id = row_number())
dfx = data.frame(ev1=1:10, ev2=sample(10:99, 10), ev3=10:1) with(dfx, symbols(x=ev1, y=ev2, circles=ev3, inches=1/3, ann=F, bg="steelblue2", fg=NULL))
plot(mpg ~ hp, data = mtcars, pch = 16, cex = .9) qplot(mpg, hp, data = mtcars, size = I(2)) ggplot(mtcars, aes(mpg, hp), size = 2) + geom_point() ggplot(mtcars, aes(mpg, hp)) + geom_point(size = 2)
setClass("myClass", representation(label = "character", x = "numeric", y = "numeric"))
h_no h_freq h_freqsq 1 0.09091 0.008264628 1 2 0.00000 0.000000000 1 3 0.04545 0.002065702 1 4 0.00000 0.000000000 1 1 0.13636 0.018594050 2 2 0.00000 0.000000000 2 3 0.00000 0.000000000 2 4 0.04545 0.002065702 2 5 0.31818 0.101238512 2 6 0.00000 0.000000000 2 7 0.50000 0.250000000 2 1 0.13636 0.018594050 3 2 0.09091 0.008264628 3 3 0.40909 0.167354628 3 4 0.04545 0.002065702 3
my.dataframe["new.col"] <- a.vector my.dataframe[["new.col"]] <- a.vector
your.df <- data.frame(no = c(1:4, 1:7, 1:5), h_freq = runif(16), h_freqsq = runif(16)) from <- which(your.df$no == 1) to <- c((from-1)[-1], nrow(your.df)) get.seq <- mapply(from, to, 1:length(from), FUN = function(x, y, z) { len <- length(seq(from = x[1], to = y[1])) return(rep(z, times = len)) }) your.df$group <- unlist(get.seq) your.df$group <- as.factor(your.df$group) no h_freq h_freqsq group 1 1 0.40998238 0.06463876 1 2 2 0.98086928 0.33093795 1 3 3 0.28908651 0.74077119 1 4 4 0.10476768 0.56784786 1 5 1 0.75478995 0.60479945 2 6 2 0.26974011 0.95231761 2 7 3 0.53676266 0.74370154 2 8 4 0.99784066 0.37499294 2 9 5 0.89771767 0.83467805 2 10 6 0.05363139 0.32066178 2 11 7 0.71741529 0.84572717 2 12 1 0.10654430 0.32917711 3 13 2 0.41971959 0.87155514 3 14 3 0.32432646 0.65789294 3 15 4 0.77896780 0.27599187 3 16 5 0.06100008 0.55399326 3
> d.h_no <- diff(h_no) > d.h_no [1] 1 1 1 -3 1 1 1 1 1 1 -6 1 1 1
> nonpos <- d.h_no <= 0 > nonpos [1] FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE [13] FALSE FALSE
> classes <- c(1, 1 + cumsum(nonpos)) > classes [1] 1 1 1 1 2 2 2 2 2 2 2 3 3 3 3
classify <- function(data) { cbind(data, class=c(1, 1 + cumsum(diff(data$h_no) <= 0))) }
classify <- function(data) { cbind(data, class=factor(c(1, 1 + cumsum(diff(data$h_no) <= 0)))) }
> classified <- classify(data) > data <- classify(data)
index <<- 0 new_column = sapply(df$h_no, function(x) { if(x == 1) index = index + 1 return(index) })
myDf = data.frame(index=seq(1,10,1), Val=seq(1,10,1)) newCol= seq(2,20,2) myDf = cbind(myDf,newCol)
mytb<-read.table(text="h_no h_freq h_freqsq group 1 0.09091 0.008264628 1 2 0.00000 0.000000000 1 3 0.04545 0.002065702 1 4 0.00000 0.000000000 1 1 0.13636 0.018594050 2 2 0.00000 0.000000000 2 3 0.00000 0.000000000 2 4 0.04545 0.002065702 2 5 0.31818 0.101238512 2 6 0.00000 0.000000000 2 7 0.50000 0.250000000 2 1 0.13636 0.018594050 3 2 0.09091 0.008264628 3 3 0.40909 0.167354628 3 4 0.04545 0.002065702 3", header=T, stringsAsFactors=F) mytb$group<-NULL positionsof1s<-grep(1,mytb$h_no) mytb$newgroup<-unlist(mapply(function(x,y) rep(x,y), x= 1:length(positionsof1s), y= c( diff(positionsof1s), nrow(mytb)- (positionsof1s[length(positionsof1s )]-1 ) ) ) ) mytb
f <- function(x) {c("hi", "hello")} x <- data.table(id = 1:10)
x[ , col_names := another_f(), by = "id", with = FALSE]
x <- data.table(a = 1:3, b = 1:6) f <- function(x) {list("hi", "hello")} x[ , c("col1", "col2") := f(), by = a][] x[ , c("mean", "sum") := list(mean(b), sum(b)), by = a][] mynames = c("Name1", "Longer%") x[ , (mynames) := list(mean(b) * 4, sum(b) * 3), by = a]
x[ , mynames := list(mean(b) * 4, sum(b) * 3), by = a, with = FALSE][] x[ , get("mynames") := list(mean(b) * 4, sum(b) * 3), by = a][] x[ , eval(mynames) := list(mean(b) * 4, sum(b) * 3), by = a][]
dt[,`:=`(avg=mean(mpg), med=median(mpg), min=min(mpg)), by=cyl]
testit <- function(x) { p1 <- proc.time() Sys.sleep(x) proc.time() - p1 } testit(3.7)
> testit(3.7) user system elapsed 0.000 0.000 3.704
for (i in 1:1000) { print(i) date_time<-Sys.time() while((as.numeric(Sys.time()) - as.numeric(date_time))<2.5){} }
Error in .Call.graphics(C_palette2, .Call(C_palette2, NULL)) : invalid graphics state
date trt var val 1/8/2008 cc sw5 0.2684138 1/8/2008 cc sw15 0.2897586 1/8/2008 cc sw5 0.2822414 2/8/2008 cc sw5 0.2494583 2/8/2008 cc sw5 0.2692917 2/8/2008 cc sw15 0.2619167 2/8/2008 cc sw5 0.204375 3/8/2008 cc sw5 0.2430625 3/8/2008 cc sw5 0.2654375 3/8/2008 cc sw5 0.2509583 3/8/2008 cc sw5 0.2055625 1/8/2008 ccw sw15 0.2212414 1/8/2008 ccw sw5 0.3613448 1/8/2008 ccw sw5 0.2607586 2/8/2008 ccw sw5 0.2087917 2/8/2008 ccw sw15 0.3390417 2/8/2008 ccw sw5 0.2436458 2/8/2008 ccw sw5 0.290875 3/8/2008 ccw sw5 0.20175 3/8/2008 ccw sw15 0.328875 3/8/2008 ccw sw5 0.2328958 3/8/2008 ccw sw5 0.2868958
df<-df[order(as.Date(df$date,format="%d/%m/%Y")),,drop=FALSE]
ggplot(data = df,aes(x = date,y = val)) + geom_point(aes(group = trt))
library(dplyr) data(mtcars) mtcars <- tbl_df(mtcars) mtcars %>% group_by(am, gear) %>% summarise(n = n())
am gear n rel.freq 0 3 15 0.7894737 0 4 4 0.2105263 1 4 8 0.6153846 1 5 5 0.3846154
mtcars %>% group_by(am, gear) %>% summarise (n = n()) %>% mutate(freq = n / sum(n))
mtcars %>% count(am, gear) %>% group_by(am) %>% mutate(freq = n / sum(n))
mtcars %>% count(am, gear) %>% mutate(freq = n / sum(n))
mtcars %>% group_by (am, gear) %>% summarise (n=n()) %>% mutate(rel.freq = paste0(round(100 * n/sum(n), 0), "%"))
as.rel_freq <- function(x, rel_freq_col = "rel.freq", ...) { class(x) <- c("rel_freq", class(x)) attributes(x)[["rel_freq_col"]] <- rel_freq_col x } print.rel_freq <- function(x, ...) { freq_col <- attributes(x)[["rel_freq_col"]] x[[freq_col]] <- paste0(round(100 * x[[freq_col]], 0), "%") class(x) <- class(x)[!class(x)%in% "rel_freq"] print(x) } mtcars %>% group_by (am, gear) %>% summarise (n=n()) %>% mutate(rel.freq = n/sum(n)) %>% as.rel_freq()
freq_table <- function(x, group_var, prop_var) { group_var <- enquo(group_var) prop_var <- enquo(prop_var) x %>% group_by(!!group_var, !!prop_var) %>% summarise(n = n()) %>% mutate(freq = n /sum(n)) %>% ungroup }
getOption("scipen") options("scipen"=10) mtcars %>% count(am, gear) %>% mutate(freq = (n / sum(n)) * 100)
data(iris) library(plyr) head( adply(iris, 1, transform , Max.Len= max(Sepal.Length,Petal.Length)) ) Sepal.Length Sepal.Width Petal.Length Petal.Width Species Max.Len 1 5.1 3.5 1.4 0.2 setosa 5.1 2 4.9 3.0 1.4 0.2 setosa 4.9 3 4.7 3.2 1.3 0.2 setosa 4.7 4 4.6 3.1 1.5 0.2 setosa 4.6 5 5.0 3.6 1.4 0.2 setosa 5.0 6 5.4 3.9 1.7 0.4 setosa 5.4
library(dplyr) head( mutate(iris, Max.Len= max(Sepal.Length,Petal.Length)) ) Sepal.Length Sepal.Width Petal.Length Petal.Width Species Max.Len 1 5.1 3.5 1.4 0.2 setosa 7.9 2 4.9 3.0 1.4 0.2 setosa 7.9 3 4.7 3.2 1.3 0.2 setosa 7.9 4 4.6 3.1 1.5 0.2 setosa 7.9 5 5.0 3.6 1.4 0.2 setosa 7.9 6 5.4 3.9 1.7 0.4 setosa 7.9
iris %>% rowwise() %>% mutate(Max.Len= max(Sepal.Length,Petal.Length))
iris %>% group_by(1:n()) %>% mutate(Max.Len= max(Sepal.Length,Petal.Length))
library(dplyr) iris %>% mutate(max.len = pmax(Sepal.Length, Petal.Length)) coalesce <- function(a,b) {r <- c(a[1],b[1]); r[!is.na(r)][1]} Coalesce <- Vectorize(coalesce, vectorize.args = c( df <- data.frame(a = c(1:5,NA,7:10), b = c(1:3,NA,NA,6,NA,10:8)) df %>% mutate(ab =Coalesce(a,b))
library(tidyverse) iris %>% by_row(..f = function(this_row) { browser() })
Called from: ..f(.d[[i]], ...) Browse[1]> this_row Sepal.Length Sepal.Width Petal.Length Petal.Width Species <dbl> <dbl> <dbl> <dbl> <fctr> 1 5.1 3.5 1.4 0.2 setosa Browse[1]> Q
iris %>% by_row(..f = function(this_row) { this_row[1:4] %>% unlist %>% mean })
Sepal.Length Sepal.Width Petal.Length Petal.Width Species .out <dbl> <dbl> <dbl> <dbl> <fctr> <list> 1 5.1 3.5 1.4 0.2 setosa <dbl [1]> 2 4.9 3.0 1.4 0.2 setosa <dbl [1]> 3 4.7 3.2 1.3 0.2 setosa <dbl [1]> 4 4.6 3.1 1.5 0.2 setosa <dbl [1]> 5 5.0 3.6 1.4 0.2 setosa <dbl [1]> 6 5.4 3.9 1.7 0.4 setosa <dbl [1]> 7 4.6 3.4 1.4 0.3 setosa <dbl [1]> 8 5.0 3.4 1.5 0.2 setosa <dbl [1]> 9 4.4 2.9 1.4 0.2 setosa <dbl [1]> 10 4.9 3.1 1.5 0.1 setosa <dbl [1]>
iris %>% by_row( ..f = function(this_row) { data.frame( new_col_mean = this_row[1:4] %>% unlist %>% mean, new_col_median = this_row[1:4] %>% unlist %>% median ) })
Sepal.Length Sepal.Width Petal.Length Petal.Width Species .out <dbl> <dbl> <dbl> <dbl> <fctr> <list> 1 5.1 3.5 1.4 0.2 setosa <data.frame [1 × 2]> 2 4.9 3.0 1.4 0.2 setosa <data.frame [1 × 2]> 3 4.7 3.2 1.3 0.2 setosa <data.frame [1 × 2]> 4 4.6 3.1 1.5 0.2 setosa <data.frame [1 × 2]> 5 5.0 3.6 1.4 0.2 setosa <data.frame [1 × 2]> 6 5.4 3.9 1.7 0.4 setosa <data.frame [1 × 2]> 7 4.6 3.4 1.4 0.3 setosa <data.frame [1 × 2]> 8 5.0 3.4 1.5 0.2 setosa <data.frame [1 × 2]> 9 4.4 2.9 1.4 0.2 setosa <data.frame [1 × 2]> 10 4.9 3.1 1.5 0.1 setosa <data.frame [1 × 2]>
iris %>% by_row(.collate = "cols", ..f = function(this_row) { this_row[1:4] %>% unlist %>% mean }) iris %>% by_row(.collate = "rows", ..f = function(this_row) { this_row[1:4] %>% unlist %>% mean })
Sepal.Length Sepal.Width Petal.Length Petal.Width Species .out <dbl> <dbl> <dbl> <dbl> <fctr> <dbl> 1 5.1 3.5 1.4 0.2 setosa 2.550 2 4.9 3.0 1.4 0.2 setosa 2.375 3 4.7 3.2 1.3 0.2 setosa 2.350 4 4.6 3.1 1.5 0.2 setosa 2.350 5 5.0 3.6 1.4 0.2 setosa 2.550 6 5.4 3.9 1.7 0.4 setosa 2.850 7 4.6 3.4 1.4 0.3 setosa 2.425 8 5.0 3.4 1.5 0.2 setosa 2.525 9 4.4 2.9 1.4 0.2 setosa 2.225 10 4.9 3.1 1.5 0.1 setosa 2.400
iris %>% by_row(.collate = "cols", ..f = function(this_row) { data.frame( new_col_mean = this_row[1:4] %>% unlist %>% mean, new_col_median = this_row[1:4] %>% unlist %>% median ) }) iris %>% by_row(.collate = "rows", ..f = function(this_row) { data.frame( new_col_mean = this_row[1:4] %>% unlist %>% mean, new_col_median = this_row[1:4] %>% unlist %>% median ) })
Sepal.Length Sepal.Width Petal.Length Petal.Width Species .row new_col_mean new_col_median <dbl> <dbl> <dbl> <dbl> <fctr> <int> <dbl> <dbl> 1 5.1 3.5 1.4 0.2 setosa 1 2.550 2.45 2 4.9 3.0 1.4 0.2 setosa 2 2.375 2.20 3 4.7 3.2 1.3 0.2 setosa 3 2.350 2.25 4 4.6 3.1 1.5 0.2 setosa 4 2.350 2.30 5 5.0 3.6 1.4 0.2 setosa 5 2.550 2.50 6 5.4 3.9 1.7 0.4 setosa 6 2.850 2.80 7 4.6 3.4 1.4 0.3 setosa 7 2.425 2.40 8 5.0 3.4 1.5 0.2 setosa 8 2.525 2.45 9 4.4 2.9 1.4 0.2 setosa 9 2.225 2.15 10 4.9 3.1 1.5 0.1 setosa 10 2.400 2.30
mtcars[1:2] %>% by_row(function(x) 1:5) mtcars[1:2] %>% by_row(function(x) 1:5, .collate = "rows") mtcars[1:2] %>% by_row(function(x) 1:5, .collate = "cols")
mpg cyl .out <dbl> <dbl> <list> 1 21.0 6 <int [5]> 2 21.0 6 <int [5]> 3 22.8 4 <int [5]> 4 21.4 6 <int [5]> 5 18.7 8 <int [5]> 6 18.1 6 <int [5]> 7 14.3 8 <int [5]> 8 24.4 4 <int [5]> 9 22.8 4 <int [5]> 10 19.2 6 <int [5]> mpg cyl .row .out <dbl> <dbl> <int> <int> 1 21 6 1 1 2 21 6 1 2 3 21 6 1 3 4 21 6 1 4 5 21 6 1 5 6 21 6 2 1 7 21 6 2 2 8 21 6 2 3 9 21 6 2 4 10 21 6 2 5 mpg cyl .out1 .out2 .out3 .out4 .out5 <dbl> <dbl> <int> <int> <int> <int> <int> 1 21.0 6 1 2 3 4 5 2 21.0 6 1 2 3 4 5 3 22.8 4 1 2 3 4 5 4 21.4 6 1 2 3 4 5 5 18.7 8 1 2 3 4 5 6 18.1 6 1 2 3 4 5 7 14.3 8 1 2 3 4 5 8 24.4 4 1 2 3 4 5 9 22.8 4 1 2 3 4 5 10 19.2 6 1 2 3 4 5
iris %>% group_by(1:nrow(iris)) %>% do(do_fn) %>% rbind_all()
library(plyr) library(dplyr) library(purrr) library(microbenchmark) d1_count <- 1000 d2_count <- 10 d1 <- data.frame(a=runif(d1_count)) do_fn <- function(row){data.frame(a=row$a, b=runif(d2_count))} do_fn2 <- function(a){data.frame(a=a, b=runif(d2_count))} op <- microbenchmark( plyr_version = plyr::adply(d1, 1, do_fn), dplyr_version = d1 %>% dplyr::group_by(1:nrow(d1)) %>% dplyr::do(do_fn(.)) %>% dplyr::bind_rows(), purrr_version = d1 %>% purrr::pmap_dfr(do_fn2), times=50)
Unit: milliseconds expr min lq mean median uq max neval plyr_version 1227.2589 1275.1363 1317.3431 1293.5759 1314.4266 1616.5449 50 dplyr_version 977.3025 1012.6340 1035.9436 1025.6267 1040.5882 1449.0978 50 purrr_version 609.5790 629.7565 643.8498 644.2505 656.1959 686.8128 50
iris$Max.Len <- pmax(iris$Sepal.Length, iris$Petal.Length)
dummyData = rep(c(1,2, 2, 2), 25) table(dummyData) as.data.frame(table(dummyData))
> aggregate(data.frame(count = v), list(value = v), length) value count 1 1 25 2 2 75
library("dplyr") data %>% group_by(factor1, factor2) %>% summarize(count=n())
library(data.table) DT<-data.table(x=sample(1:10,1E7,TRUE)) DT[,.N,by=x]
dummyData = rep(c(1, 2, 2, 2), 25) c(table(dummyData)) 1 2 25 75 str(c(table(dummyData)) ) Named int [1:2] 25 75 - attr(*, "names")= chr [1:2] "1" "2"
data_frame <- data.frame(v = rep(c(1,2, 2, 2), 25)) library("plyr") data_frame <- ddply(data_frame, .(v), transform, n = length(v))
> v = rep(as.factor(c(1,2, 2, 2)), 25) > summary(v) 1 2 25 75
library(tidyverse) dummyData %>% as.tibble() %>% count(value) value n <dbl> <int> 1 1 25 2 2 75
unique.count = function(train.data, all.numeric=FALSE) { train.data.str = apply(train.data, 1, function(x) paste(x, collapse= train.data.str.t = table(train.data.str) train.data.str.uniq = row.names(train.data.str.t) weight = as.numeric(train.data.str.t) if (all.numeric) { train.data.uniq = as.data.frame(t(apply(cbind(train.data.str.uniq), 1, function(x) as.numeric(unlist(strsplit(x, split=",")))))) } else { train.data.uniq = as.data.frame(t(apply(cbind(train.data.str.uniq), 1, function(x) unlist(strsplit(x, split=","))))) } names(train.data.uniq) = names(train.data) list(data=train.data.uniq, weight=weight) }
count_unique_words <-function(wlist) { ucountlist = list() unamelist = c() for (i in wlist) { if (is.element(i, unamelist)) ucountlist[[i]] <- ucountlist[[i]] +1 else { listlen <- length(ucountlist) ucountlist[[i]] <- 1 unamelist <- c(unamelist, i) } } ucountlist } expt_counts <- count_unique_words(population) for(i in names(expt_counts)) cat(i, expt_counts[[i]], "\n")
is.integer0 <- function(x) { is.integer(x) && length(x) == 0L }
is.integer0(integer(0)) is.integer0(0L) is.integer0(numeric(0))
library(assertive) x <- integer(0) assert_is_integer(x) assert_is_empty(x) x <- 0L assert_is_integer(x) assert_is_empty(x) x <- numeric(0) assert_is_integer(x) assert_is_empty(x)
if ( length(a <- which(1:3 == 5) ) ) print(a) else print("nothing returned for
if ( any(a <- which(1:3 == 5) ) ) print(a) else print("nothing returned for if ( any(a <- 1:3 == 5 ) ) print(a) else print("nothing returned for
attr(a,"foo")<-"bar" > identical(1L,c(a,1L)) [1] TRUE
is.empty <- function(x, mode=NULL){ if (is.null(mode)) mode <- class(x) identical(vector(mode,1),c(x,vector(class(x),1))) } b <- numeric(0) > is.empty(a) [1] TRUE > is.empty(a,"numeric") [1] FALSE > is.empty(b) [1] TRUE > is.empty(b,"integer") [1] FALSE
R.exe --no-environ --no-save < "c:\temp\R\test.R" > "c:\temp\R\out.txt" 2>&1
R.exe CMD BATCH --no-environ --no-save "c:\temp\R\test.R" "c:\temp\R\out.txt"
set.seed(123) df = data.frame(x=sample(0:1,10,replace=T),y=sample(0:1,10,replace=T),z=1:10) > df x y z 1 0 1 1 2 1 0 2 3 0 1 3 4 1 1 4 5 1 0 5 6 0 1 6 7 1 0 7 8 1 0 8 9 1 0 9 10 0 1 10
df[!duplicated(df[,1:2]),] x y z 1 0 1 1 2 1 0 2 4 1 1 4
library(dplyr) set.seed(123) df <- data.frame( x = sample(0:1, 10, replace = T), y = sample(0:1, 10, replace = T), z = 1:10 )
df %>% group_by(x, y) %>% filter(row_number(z) == 1)
library(dplyr) set.seed(123) df <- data.frame( x = sample(0:1, 10, replace = T), y = sample(0:1, 10, replace = T), z = 1:10 ) > df %>% distinct(x, y) x y z 1 0 1 1 2 1 0 2 3 1 1 4
distinct(mtcars, cyl, hp); summarise(group_by(mtcars, cyl, hp));
df <- data.frame(id=c(1,1,1,2,2,2,3,3,3), stopId=c("a","b","c","a","b","c","a","b","c"), stopSequence=c(1,2,3,3,1,4,3,1,2))
firstStop <- df %>% group_by(id) %>% arrange(stopSequence) %>% slice(1) %>% ungroup lastStop <- df %>% group_by(id) %>% arrange(stopSequence) %>% slice(n()) %>% ungroup
df %>% group_by(id) %>% arrange(stopSequence) %>% filter(row_number()==1 | row_number()==n())
df %>% arrange(stopSequence) %>% group_by(id) %>% slice(c(1,n()))
id stopId stopSequence 1 1 a 1 2 1 c 3 3 2 b 1 4 2 c 4 5 3 b 1 6 3 a 3
library(data.table) setDT(df) df[ df[order(id, stopSequence), .I[c(1L,.N)], by=id]$V1 ]
first_last = df[order(id, stopSequence), .(row_num = .I[c(1L,.N)]), by=id] idx = first_last$row_num df[idx]
library(dplyr) df <- data.frame(id=c(1,1,1,2,2,2,3,3,3), stopId=c("a","b","c","a","b","c","a","b","c"), stopSequence=c(1,2,3,3,1,4,3,1,2)) first_last <- function(x) { bind_rows(slice(x, 1), slice(x, n())) } df %>% group_by(id) %>% arrange(stopSequence) %>% do(first_last(.)) %>% ungroup
df <- df[with(df, order(id, stopSequence, stopId)), ] merge(df[!duplicated(df$id), ], df[!duplicated(df$id, fromLast = TRUE), ], all = TRUE)
df <- setDT(df) df[order(id, stopSequence)][, .SD[c(1,.N)], by=id]
library(sqldf) min <- sqldf("SELECT id, stopId, min(stopSequence) AS StopSequence FROM df GROUP BY id ORDER BY id, StopSequence, stopId") max <- sqldf("SELECT id, stopId, max(stopSequence) AS StopSequence FROM df GROUP BY id ORDER BY id, StopSequence, stopId") sqldf("SELECT * FROM min UNION SELECT * FROM max")
sqldf("SELECT * FROM (SELECT id, stopId, min(stopSequence) AS StopSequence FROM df GROUP BY id ORDER BY id, StopSequence, stopId) UNION SELECT * FROM (SELECT id, stopId, max(stopSequence) AS StopSequence FROM df GROUP BY id ORDER BY id, StopSequence, stopId)")
id stopId StopSequence 1 1 a 1 2 1 c 3 3 2 b 1 4 2 c 4 5 3 a 3 6 3 b 1
setDT(df) df[order(stopSequence)][, .SD[c(1, .N)], by = id] id stopId stopSequence 1: 1 a 1 2: 1 c 3 3: 2 b 1 4: 2 c 4 5: 3 b 1 6: 3 a 3
lapply(c(first, last), function(x) df %>% group_by(id) %>% summarize_all(funs(x))) %>% bind_rows()
lapply(c(first, last, max("stopSequence")), function(x) df %>% group_by(id) %>% summarize_all(funs(x))) %>% bind_rows()
a <- c(1:10) b <- c(10:1) df <- data.frame(a,b) library(ggplot2) g = ggplot(data=df) + geom_point(aes(x=a, y=b)) + xlab("x axis") g
g+theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"))
set.seed(1) m <- runif(5) paste(round(100*m, 2), "%", sep="") [1] "26.55%" "37.21%" "57.29%" "90.82%" "20.17%" sprintf("%1.2f%%", 100*m) [1] "26.55%" "37.21%" "57.29%" "90.82%" "20.17%"
percent <- function(x, digits = 2, format = "f", ...) { paste0(formatC(100 * x, format = format, digits = digits, ...), "%") }
percent((1:10) / 1000) percent((1:10) / 100000) percent(sqrt(seq(0, 1, by=0.1))) percent(seq(0, 0.1, by=0.01) ** 2)
library(formattable) x <- c(0.23, 0.95, 0.3) percent(x) [1] 23.00% 95.00% 30.00%
library(microbenchmark) x = runif(1e5) microbenchmark(times = 100L, andrie1(), andrie2(), richie(), krlmlr())
library(roxygen) printpct <- Compose(function(x) x*100, Curry(sprintf,fmt="%1.2f%%"))
library(microbenchmark) library(scales) library(formattable) x<-runif(1e5) lilip <- function() formattable::percent(x,2) krlmlr <- function() scales::percent(x) andrie1 <- function() paste0(round(x,4) * 100, microbenchmark(times=100L,lilip(), krlmlr(), andrie1())
Unit: microseconds expr min lq mean median uq max neval lilip() 194.562 373.7335 772.5663 889.7045 950.4035 1611.537 100 krlmlr() 226270.845 237985.6560 260194.9269 251581.0235 280704.2320 373022.180 100 andrie1() 87916.021 90437.4820 92791.8923 92636.8420 94448.7040 102543.252 100
try this~ data_format <- function(data,digit=2,type= if(type== type = digit = 0; } switch(type, cat(type, "is not a recognized type\n") ) sprintf(format, num * data) }
percent.colmns = function(base, columnas = 1:ncol(base), filas = 1:nrow(base)){ base2 = base for(j in columnas){ suma.c = sum(base[,j]) for(i in filas){ base2[i,j] = base[i,j]*100/suma.c } } return(base2) }
bivariate.density(x = c(0, 0), mu = c(0, 0), sigma = c(1, 1), rho = 0){ exp(-1/(2*(1-rho^2))*(x[1]^2/sigma[1]^2+x[2]^2/sigma[2]^2-2*rho*x[1]*x[2]/(sigma[1]*sigma[2]))) * 1/(2*pi*sigma[1]*sigma[2]*sqrt(1-rho^2)) } out <- rbind(c(1, 2), c(3, 4), c(5, 6))
R> M <- matrix(1:6, nrow=3, byrow=TRUE) R> M [,1] [,2] [1,] 1 2 [2,] 3 4 [3,] 5 6 R> apply(M, 1, function(x) 2*x[1]+x[2]) [1] 4 10 16 R>
set.seed(1) m <- matrix(round(runif(20, 1, 5)), ncol=4) diag(m) <- NA m [,1] [,2] [,3] [,4] [1,] NA 5 2 3 [2,] 2 NA 2 4 [3,] 3 4 NA 5 [4,] 5 4 3 NA [5,] 2 1 4 4
apply(m, 1, quantile, probs=c(.25,.5, .75), na.rm=TRUE) [,1] [,2] [,3] [,4] [,5] 25% 2.5 2 3.5 3.5 1.75 50% 3.0 2 4.0 4.0 3.00 75% 4.0 3 4.5 4.5 4.00
A <- matrix(c( 0, 1, 1, 2, 0, 0, 1, 3, 0, 0, 1, 3 ), nrow = 3, byrow = TRUE) t(apply(A, 1, function(x) x / sum(x) ))
[,1] [,2] [,3] [,4] [1,] 0 0.25 0.25 0.50 [2,] 0 0.00 0.25 0.75 [3,] 0 0.00 0.25 0.75
bvnormdens <- function(x=c(0,0),mu=c(0,0), sigma=c(1,1), rho=0){ exp(-1/(2*(1-rho^2))*(x[1]^2/sigma[1]^2+ x[2]^2/sigma[2]^2- 2*rho*x[1]*x[2]/(sigma[1]*sigma[2]))) * 1/(2*pi*sigma[1]*sigma[2]*sqrt(1-rho^2)) } out=rbind(c(1,2),c(3,4),c(5,6)); bvout<-matrix(NA, ncol=1, nrow=3) bvout[] <-apply(out, 1, bvnormdens) bvout [,1] [1,] 1.306423e-02 [2,] 5.931153e-07 [3,] 9.033134e-15
bvout[] <-apply(out, 1, FUN=bvnormdens, mu=c(-1,1), rho=0.6)
a = data.frame(t(iris[1:10,1:3])) vapply(a, prod, 0) sapply(a, prod)
a = data.frame(t(iris[1:10,1:3])) b = iris[1:10,1:3] microbenchmark::microbenchmark( apply(b, 1 , prod), vapply(a, prod, 0), sapply(a, prod) , apply(iris[1:10,1:3], 1 , prod), vapply(data.frame(t(iris[1:10,1:3])), prod, 0), sapply(data.frame(t(iris[1:10,1:3])), prod) , b %>% rowwise() %>% summarise(p = prod(Sepal.Length,Sepal.Width,Petal.Length)) )
multipetal <- function(df, n) { varname <- paste("petal", n , sep=".") df <- mutate(df, varname = Petal.Width * n) df }
multipetal <- function(df, n) { varname <- paste("petal", n , sep=".") df[[varname]] <- with(df, Petal.Width * n) df }
multipetal <- function(df, n) { varname <- paste("petal", n , sep=".") mutate(df, !!varname := Petal.Width * n) }
multipetal <- function(df, n) { varname <- paste("petal", n , sep=".") varval <- lazyeval::interp(~Petal.Width * n, n=n) mutate_(df, .dots= setNames(list(varval), varname)) }
multipetal <- function(df, n) { varname <- paste("petal", n , sep=".") pp <- c(quote(df), setNames(list(quote(Petal.Width * n)), varname)) do.call("mutate", pp) }
library(dplyr) multipetalN <- function(df, n){ varname <- paste0("petal.", n) df %>% mutate(!!varname := Petal.Width * n) } data(iris) iris1 <- tbl_df(iris) iris2 <- tbl_df(iris) for(i in 2:5) { iris2 <- multipetalN(df=iris2, n=i) }
multipetal <- function(df, n) { varname <- paste("petal", n, sep=".") df<-mutate_(df, .dots=setNames(paste0("Petal.Width*",n), varname)) df } for(i in 2:5) { iris <- multipetal(df=iris, n=i) } > head(iris) Sepal.Length Sepal.Width Petal.Length Petal.Width Species petal.2 petal.3 petal.4 petal.5 1 5.1 3.5 1.4 0.2 setosa 0.4 0.6 0.8 1 2 4.9 3.0 1.4 0.2 setosa 0.4 0.6 0.8 1 3 4.7 3.2 1.3 0.2 setosa 0.4 0.6 0.8 1 4 4.6 3.1 1.5 0.2 setosa 0.4 0.6 0.8 1 5 5.0 3.6 1.4 0.2 setosa 0.4 0.6 0.8 1 6 5.4 3.9 1.7 0.4 setosa 0.8 1.2 1.6 2
mutate_values <- function(new_name, name1, name2){ mtcars %>% mutate(UQ(rlang::sym(new_name)) := UQ(rlang::sym(name1)) + UQ(rlang::sym(name2))) } mutate_values(
filter_values <- function(name, value){ mtcars %>% filter(UQ(rlang::sym(name)) != value) } filter_values(
arrange_values <- function(name, transform){ mtcars %>% arrange(UQ(rlang::sym(name)) %>% UQ(rlang::sym(transform))) } arrange_values(
select_name <- function(name){ mtcars %>% select(!!name) } select_name(
library(dplyr) dat <- data.frame(a="leave alone", dt="2015-08-03 00:00:00", dt2="2015-01-20 00:00:00") convertSelectDates <- function(df, dtnames=character(0)) { for (col in dtnames) { varval <- sprintf("as.Date(%s)", col) df <- df %>% mutate_(.dots= setNames(list(varval), col)) } return(df) } dat <- convertSelectDates(dat, c("dt", "dt2")) dat %>% str
multipetal <- function(df, n) { for (i in 1:n){ varname <- paste("petal", i , sep=".") df[[varname]] <- with(df, Petal.Width * i) } df } multipetal(iris, 3)
multipetal <- function(df, n) { varname <- paste("petal", n , sep=".") df <- mutate(df, !!treat_string_as_col(varname) := Petal.Width * n) df } for(i in 2:5) { iris <- multipetal(df=iris, n=i) }
axis1 axis2 group1 -0.212201 0.358867 group2 -0.279756 -0.126194 group3 0.186860 -0.203273 group4 0.417117 -0.002592 group1 -0.212201 0.358867 group2 -0.279756 -0.126194 group3 0.186860 -0.203273 group4 0.186860 -0.203273 axis1 axis2 group1 0.211826 -0.306214 group2 -0.072626 0.104988 group3 -0.072626 0.104988 group4 -0.072626 0.104988 group1 0.211826 -0.306214 group2 -0.072626 0.104988 group3 -0.072626 0.104988 group4 -0.072626 0.104988 library(ggplot2) library(gridExtra) groups=c( x1=data1[,1] y1=data1[,2] x2=data2[,1] y2=data2[,2] p1=ggplot(data1, aes(x=x1, y=y1,colour=groups)) + geom_point(position=position_jitter(w=0.04,h=0.02),size=1.8) p2=ggplot(data2, aes(x=x2, y=y2,colour=groups)) + geom_point(position=position_jitter(w=0.04,h=0.02),size=1.8) p3=grid.arrange( p1 + theme(legend.position="none"), p2+ theme(legend.position="none"), nrow=1, widths = unit(c(10.,10), "cm"), heights = unit(rep(8, 1), "cm")))
df1 <- read.table(text="group x y group1 -0.212201 0.358867 group2 -0.279756 -0.126194 group3 0.186860 -0.203273 group4 0.417117 -0.002592 group1 -0.212201 0.358867 group2 -0.279756 -0.126194 group3 0.186860 -0.203273 group4 0.186860 -0.203273",header=TRUE) df2 <- read.table(text="group x y group1 0.211826 -0.306214 group2 -0.072626 0.104988 group3 -0.072626 0.104988 group4 -0.072626 0.104988 group1 0.211826 -0.306214 group2 -0.072626 0.104988 group3 -0.072626 0.104988 group4 -0.072626 0.104988",header=TRUE) library(ggplot2) library(gridExtra) p1 <- ggplot(df1, aes(x=x, y=y,colour=group)) + geom_point(position=position_jitter(w=0.04,h=0.02),size=1.8) + theme(legend.position="bottom") p2 <- ggplot(df2, aes(x=x, y=y,colour=group)) + geom_point(position=position_jitter(w=0.04,h=0.02),size=1.8) g_legend<-function(a.gplot){ tmp <- ggplot_gtable(ggplot_build(a.gplot)) leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box") legend <- tmp$grobs[[leg]] return(legend)} mylegend<-g_legend(p1) p3 <- grid.arrange(arrangeGrob(p1 + theme(legend.position="none"), p2 + theme(legend.position="none"), nrow=1), mylegend, nrow=2,heights=c(10, 1))
library(ggplot2) library(gridExtra) library(grid) grid_arrange_shared_legend <- function(...) { plots <- list(...) g <- ggplotGrob(plots[[1]] + theme(legend.position="bottom"))$grobs legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]] lheight <- sum(legend$height) grid.arrange( do.call(arrangeGrob, lapply(plots, function(x) x + theme(legend.position="none"))), legend, ncol = 1, heights = unit.c(unit(1, "npc") - lheight, lheight)) } dsamp <- diamonds[sample(nrow(diamonds), 1000), ] p1 <- qplot(carat, price, data=dsamp, colour=clarity) p2 <- qplot(cut, price, data=dsamp, colour=clarity) p3 <- qplot(color, price, data=dsamp, colour=clarity) p4 <- qplot(depth, price, data=dsamp, colour=clarity) grid_arrange_shared_legend(p1, p2, p3, p4)
library(ggpubr) dsamp <- diamonds[sample(nrow(diamonds), 1000), ] p1 <- qplot(carat, price, data = dsamp, colour = clarity) p2 <- qplot(cut, price, data = dsamp, colour = clarity) p3 <- qplot(color, price, data = dsamp, colour = clarity) p4 <- qplot(depth, price, data = dsamp, colour = clarity) ggarrange(p1, p2, p3, p4, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
library(cowplot) dsamp <- diamonds[sample(nrow(diamonds), 1000), ] p1 <- qplot(carat, price, data=dsamp, colour=clarity) + theme(plot.margin = unit(c(6,0,6,0), "pt")) p2 <- qplot(depth, price, data=dsamp, colour=clarity) + theme(plot.margin = unit(c(6,0,6,0), "pt")) + ylab("") p3 <- qplot(color, price, data=dsamp, colour=clarity) + theme(plot.margin = unit(c(6,0,6,0), "pt")) + ylab("") prow <- plot_grid( p1 + theme(legend.position="none"), p2 + theme(legend.position="none"), p3 + theme(legend.position="none"), align = labels = c("A", "B", "C"), hjust = -1, nrow = 1 ) legend_b <- get_legend(p1 + theme(legend.position="bottom")) p <- plot_grid( prow, legend_b, ncol = 1, rel_heights = c(1, .2)) p
library(ggplot2) library(gridExtra) library(grid) grid_arrange_shared_legend <- function(..., nrow = 1, ncol = length(list(...)), position = c("bottom", "right")) { plots <- list(...) position <- match.arg(position) g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]] lheight <- sum(legend$height) lwidth <- sum(legend$width) gl <- lapply(plots, function(x) x + theme(legend.position = "none")) gl <- c(gl, nrow = nrow, ncol = ncol) combined <- switch(position, "bottom" = arrangeGrob(do.call(arrangeGrob, gl), legend, ncol = 1, heights = unit.c(unit(1, "npc") - lheight, lheight)), "right" = arrangeGrob(do.call(arrangeGrob, gl), legend, ncol = 2, widths = unit.c(unit(1, "npc") - lwidth, lwidth))) grid.newpage() grid.draw(combined) }
dsamp <- diamonds[sample(nrow(diamonds), 1000), ] p1 <- qplot(carat, price, data = dsamp, colour = clarity) p2 <- qplot(cut, price, data = dsamp, colour = clarity) p3 <- qplot(color, price, data = dsamp, colour = clarity) p4 <- qplot(depth, price, data = dsamp, colour = clarity) grid_arrange_shared_legend(p1, p2, p3, p4, nrow = 1, ncol = 4) grid_arrange_shared_legend(p1, p2, p3, p4, nrow = 2, ncol = 2)
big_df <- rbind(df1,df2) big_df <- data.frame(big_df,Df = rep(c("df1","df2"), times=c(nrow(df1),nrow(df2)))) ggplot(big_df,aes(x=x, y=y,colour=group)) + geom_point(position=position_jitter(w=0.04,h=0.02),size=1.8) + facet_wrap(~Df)
diamonds_reshaped <- data.frame(price = diamonds$price, independent.variable = c(diamonds$carat,diamonds$cut,diamonds$color,diamonds$depth), Clarity = rep(diamonds$clarity,times=4), Variable.name = rep(c("Carat","Cut","Color","Depth"),each=nrow(diamonds))) ggplot(diamonds_reshaped,aes(independent.variable,price,colour=Clarity)) + geom_point(size=2) + facet_wrap(~Variable.name,scales="free_x") + xlab("")
plots <- list(p1, p2) g <- ggplotGrob(plots[[1]] + theme(legend.position="bottom"))$grobs legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]] lheight <- sum(legend$height) tmp <- arrangeGrob(p1 + theme(legend.position = "none"), p2 + theme(legend.position = "none"), layout_matrix = matrix(c(1, 2), nrow = 1)) grid.arrange(tmp, legend, ncol = 1, heights = unit.c(unit(1, "npc") - lheight, lheight))
p <- ggplot(valids, aes(x=Test, y=Values)) + geom_point(position="jitter") + facet_grid(. ~ Facet) + scale_y_continuous(name="Fluorescent intensity/arbitrary units") + scale_x_discrete(name="Test repeat") + stat_summary(fun.ymin=median, fun.ymax=median, fun.y=median, geom="crossbar")
scale_y_continuous(name="Fluorescent intensity/arbitrary units", labels = comma)
scale_y_continuous(name="Fluorescent intensity/arbitrary units", labels = scales::comma)
fancy_scientific <- function(l) { l <- format(l, scientific = TRUE) l <- gsub("^(.*)e", " l <- gsub("e", "%*%10^", l) parse(text=l) }
ggplot(data=df, aes(x=x, y=y)) + geom_point() + scale_y_continuous(labels=fancy_scientific)
x <- rnorm(10) * 100000 y <- seq(0, 1, length = 10) p <- qplot(x, y) library(scales) p + scale_x_continuous(labels = comma)
NotFancy <- function(l) { l <- format(l, scientific = FALSE) parse(text=l) } ggplot(data = data.frame(x = 1:100, y = seq(from=0.00005,to = 0.0000000000001,length.out=100) + runif(n=100,-0.0000005,0.0000005)), aes(x=x, y=y)) + geom_point() + scale_y_continuous(labels=NotFancy)
library(ggplot2) p <- ggplot(mtcars, aes(mpg, wt)) + geom_point() p <- p + facet_grid(. ~ cyl) p <- p + annotate("text", label = "Test", size = 4, x = 15, y = 5) print(p)
ann_text <- data.frame(mpg = 15,wt = 5,lab = "Text", cyl = factor(8,levels = c("4","6","8"))) p + geom_text(data = ann_text,label = "Text")
library(ggplot2) p <- ggplot(mtcars, aes(mpg, wt)) + geom_point() + facet_grid(. ~ cyl) + theme(panel.spacing = unit(1, "lines")) p
dat_text <- data.frame( label = c("4 cylinders", "6 cylinders", "8 cylinders"), cyl = c(4, 6, 8) ) p + geom_text( data = dat_text, mapping = aes(x = -Inf, y = -Inf, label = label), hjust = -0.1, vjust = -1 )
dat_text <- data.frame( label = c("4 cylinders", "6 cylinders", "8 cylinders"), cyl = c(4, 6, 8), x = c(20, 27.5, 25), y = c(4, 4, 4.5) ) p + geom_text( data = dat_text, mapping = aes(x = x, y = y, label = label) )
dat_text <- data.frame( cyl = c(4, 6, 8, 4, 6, 8), am = c(0, 0, 0, 1, 1, 1) ) dat_text$label <- sprintf( "%s, %s cylinders", ifelse(dat_text$am == 0, "automatic", "manual"), dat_text$cyl ) p + facet_grid(am ~ cyl) + geom_text( size = 5, data = dat_text, mapping = aes(x = Inf, y = Inf, label = label), hjust = 1.05, vjust = 1.5 )
ann_text <- data.frame(mpg = 15,wt = 5, cyl = factor(8,levels = c("4","6","8"))) p + geom_text(data = ann_text,label = "Text" )
ann_text <- data.frame(mpg = c(14,15),wt = c(4,5),lab=c("text1","text2"), cyl = factor(c(6,8),levels = c("4","6","8"))) p + geom_text(data = ann_text,aes(label =lab) )
library(ggplot2) p <- ggplot(mtcars, aes(mpg, wt)) + geom_point() p <- p + facet_grid(. ~ cyl) + theme_bw(base_size = 12) library(egg) tag_facet(p)
> centre <- function(x, type) { + switch(type, + mean = mean(x), + median = median(x), + trimmed = mean(x, trim = .1)) + } > x <- rcauchy(10) > centre(x, "mean") [1] 0.8760325 > centre(x, "median") [1] 0.5360891 > centre(x, "trimmed") [1] 0.6086504
test1 <- function(type) { switch(type, mean = 1, median = 2, trimmed = 3) } test2 <- function(type) { if (type == "mean") 1 else if (type == "median") 2 else if (type == "trimmed") 3 } system.time( for(i in 1:1e6) test1( system.time( for(i in 1:1e6) test2( system.time( for(i in 1:1e6) test1( system.time( for(i in 1:1e6) test2(
> library(microbenchmark) > microbenchmark(test1( Unit: nanoseconds expr min lq median uq max 1 test1("mean") 709 771 864 951 16122411 2 test2("mean") 1007 1073 1147 1223 8012202 > microbenchmark(test1( Unit: nanoseconds expr min lq median uq max 1 test1("trimmed") 733 792 843 944 60440833 2 test2("trimmed") 2022 2133 2203 2309 60814430
library(gplots) r.cor <- cor(r) layout(matrix(c(1,1,1,1,1,1,1,1,2,2), 5, 2, byrow = TRUE)) par(oma=c(5,7,1,1)) cx <- rev(colorpanel(25,"yellow","black","blue")) leg <- seq(min(r.cor,na.rm=T),max(r.cor,na.rm=T),length=10) image(r.cor,main="Correlation plot Normal/Tumor data",axes=F,col=cx) axis(1, at=seq(0,1,length=ncol(r.cor)), labels=dimnames(r.cor)[[2]], cex.axis=0.9,las=2) axis(2,at=seq(0,1,length=ncol(r.cor)), labels=dimnames(r.cor)[[2]], cex.axis=0.9,las=2) image(as.matrix(leg),col=cx,axes=T)
tmp <- round(leg,2) axis(1,at=seq(0,1,length=length(leg)), labels=tmp,cex.axis=1)
```{r} grid <- par(mfrow=c(4, 5)) plot(faithful, main="Faithful eruptions") plot(large.islands, main="Islands", ylab="Area") ... par(grid) ```
jpeg("method1_test.jpg", width=900, height=900, res=40)
jpeg("method1_test.jpg", width=1900, height=1900, res=40)
lowf0 <-read.csv (....) mediumf0 <-read.csv (....) highf0 <-read.csv(....) lowf0$utt<- mediumf0$utt<- highf0$utt<- histogram<-rbind(lowf0,mediumf0,highf0) ggplot(histogram, aes(f0, fill = utt)) + geom_histogram(alpha = 0.2)
ggplot(histogram, aes(f0, fill = utt)) + geom_histogram(alpha = 0.2)
ggplot(histogram, aes(f0)) + geom_histogram(data = lowf0, fill = "red", alpha = 0.2) + geom_histogram(data = mediumf0, fill = "blue", alpha = 0.2) + geom_histogram(data = highf0, fill = "green", alpha = 0.2) +
dat <- data.frame(xx = c(runif(100,20,50),runif(100,40,80),runif(100,0,30)),yy = rep(letters[1:3],each = 100)) ggplot(dat,aes(x=xx)) + geom_histogram(data=subset(dat,yy == geom_histogram(data=subset(dat,yy == geom_histogram(data=subset(dat,yy ==
ggplot(dat, aes(x=xx, fill=yy)) + geom_histogram(alpha=0.2, position="identity")
plot_histogram <- function(df, feature) { plt <- ggplot(df, aes(x=eval(parse(text=feature)))) + geom_histogram(aes(y = ..density..), alpha=0.7, fill=" geom_density(alpha=0.3, fill="red") + geom_vline(aes(xintercept=mean(eval(parse(text=feature)))), color="black", linetype="dashed", size=1) + labs(x=feature, y = "Density") print(plt) }
plot_multi_histogram <- function(df, feature, label_column) { plt <- ggplot(df, aes(x=eval(parse(text=feature)), fill=eval(parse(text=label_column)))) + geom_histogram(alpha=0.7, position="identity", aes(y = ..density..), color="black") + geom_density(alpha=0.7) + geom_vline(aes(xintercept=mean(eval(parse(text=feature)))), color="black", linetype="dashed", size=1) + labs(x=feature, y = "Density") plt + guides(fill=guide_legend(title=label_column)) }
a <-data.frame(n=rnorm(1000, mean = 1), category=rep( b <-data.frame(n=rnorm(1000, mean = 2), category=rep( c <-data.frame(n=rnorm(1000, mean = 3), category=rep( d <-data.frame(n=rnorm(1000, mean = 4), category=rep( e <-data.frame(n=rnorm(1000, mean = 5), category=rep( f <-data.frame(n=rnorm(1000, mean = 6), category=rep( many_distros <- do.call(
options(repr.plot.width = 20, repr.plot.height = 8) plot_multi_histogram(many_distros,
> a <- sample (1 : 10) > remove <- c (2, 3, 5) > a [1] 10 5 2 7 1 6 3 4 8 9 > a %in% remove [1] FALSE TRUE TRUE FALSE FALSE FALSE TRUE FALSE FALSE FALSE > a [! a %in% remove] [1] 10 7 1 6 4 8 9
> a [1] 10 8 9 1 3 4 6 7 2 5 > setdiff(a, remove) [1] 10 8 9 1 4 6 7
x <- list("a", "b", "c", "d", "e"); x[-2]; x[-c(2, 3, 5)];
> x<-c(2, 4, 6, 9, 10) > y<-c(4, 9, 10) > idx = which(x %in% y ) > idx [1] 2 4 5 > x = x[-idx] > x [1] 2 6
x <- 1:10 remove <- c(2,3,5) x <- x[ x %ni% remove ]
full_vector[!full_vector %in% searched_vector | duplicated(full_vector)]
exclude_val<-function(full_vector,searched_vector){ found=c() for(i in full_vector){ if(any(is.element(searched_vector,i))){ searched_vector[(which(searched_vector==i))[1]]=NA } else{ found=c(found,i) } } return(found) }
q <- c(1,1,2,2,3,3,3,4,4,5,5,7,7) rm <- q[11] remove(rm) q q[13] = NaN q q %in% 7
a <- sample(1:10) bad <- c(2, 3, 5) > subset(a, !(a %in% bad)) [1] 9 7 10 6 8 1 4
library(data.table) DT <- as.data.table(df) DT[,which(unlist(lapply(DT, function(x)!all(is.na(x))))),with=F]
big_data <- replicate(10, data.frame(rep(NA, 1e6), sample(c(1:8,NA),1e6,T), sample(250,1e6,T)),simplify=F) bd <- do.call(data.frame,big_data) names(bd) <- paste0( DT <- as.data.table(bd) system.time({df1 <- bd[,colSums(is.na(bd) < nrow(bd))]}) system.time({df2 <- bd[, !apply(is.na(bd), 2, all)]}) system.time({df3 <- Filter(function(x)!all(is.na(x)), bd)}) system.time({DT1 <- DT[,which(unlist(lapply(DT, function(x)!all(is.na(x))))),with=F]})
df <- data.frame (var1 = c(1:7,NA), var2 = c(1,2,1,3,4,NA,NA,9), var3 = c(NA) )
> !apply (is.na(df), 2, all) var1 var2 var3 TRUE TRUE FALSE > df[, !apply(is.na(df), 2, all)] var1 var2 1 1 1 2 2 2 3 3 1 4 4 3 5 5 4 6 6 NA 7 7 NA 8 NA 9
library(dplyr) temp <- data.frame(x = 1:5, y = c(1,2,NA,4, 5), z = rep(NA, 5)) not_all_na <- function(x) any(!is.na(x)) not_any_na <- function(x) all(!is.na(x)) > temp x y z 1 1 1 NA 2 2 2 NA 3 3 NA NA 4 4 4 NA 5 5 5 NA > temp %>% select_if(not_all_na) x y 1 1 1 2 2 2 3 3 NA 4 4 4 5 5 5 > temp %>% select_if(not_any_na) x 1 1 2 2 3 3 4 4 5 5
gpg --keyserver keyserver.ubuntu.com --recv-key E084DAB9
" Here " a <- 10 rocknroll.lm <- lm(blah blah blah) ...
Comment <- function(`@Comments`) {invisible()} Comment( ` api_idea <- function() { return TRUE } print( api_idea ) `) foo <- function() { print( "The above did not evaluate!") } foo()
invisible( expression( ` { <= put the brace here to reset the auto indenting... Base <- function() { <^~~~~~~~~~~~~~~~ Use the function as a header and nesting marker for the comments that show up in the jump-menu. --->8--- } External <- function() { If we used a function similar to: api_idea <- function() { some_api_example <- function( nested ) { stopifnot( some required check here ) } print("Cut and paste this into RStudio to see the code-chunk quick-jump structure.") return converted object } ^~~~~~~~~~~~~~~~~~~~~~~~~~ <= Notice that this comment section isnt in the jump menu! Putting an apostrophe in isn and needs to be matched prior to nested structure working again. api_idea2 <- function() { } api_idea3 <- function() { } } print( api_idea ) }`) ) foo <- function() { print( "The above did not evaluate and cause an error!") } foo()
anything=" first comment line second comment line "
library(data.table) x <- data.table(a = 1:3, b = 3:1, c = runif(3)) neworder <- c("c", "b", "a")
library(data.table) x <- data.table(a = 1:3, b = 3:1, c = runif(3)) x setcolorder(x, c("c", "b", "a")) x
> x <- data.table(a = 1:3, b = 3:1, c = runif(3)) > x a b c [1,] 1 3 0.2880365 [2,] 2 2 0.7785115 [3,] 3 1 0.3297416 > setcolorder(x, c(3,2,1)) > x c b a [1,] 0.2880365 3 1 [2,] 0.7785115 2 2 [3,] 0.3297416 1 3
N <- 1e4 DF <- data.frame(num=rep(NA, N), txt=rep("", N), stringsAsFactors=FALSE)
df<-NULL for(e in 1:10) rbind(df,data.frame(x=e,square=e^2,even=factor(e%%2==0)))->df print(df)
> DF <- do.call(rbind,Map(function(x) data.frame(a=x,b=x+1),x=1:3)) > DF x y 1 1 2 2 2 3 3 3 4 > class(DF) [1] "data.frame"
row1<-list("a",1,FALSE) row2<-list("b",2,TRUE) df<-data.frame(row1,stringsAsFactors = F) df<-rbind(d,row2)
dummydata1=c(2002,10,1,12.00,101,426340.0,4411238.0,3598.0,0.92,57.77,4.80,238.29,-9.9) dummydata2=c(2002,10,2,12.00,101,426340.0,4411238.0,3598.0,-3.02,78.77,-9999.00,-99.0,-9.9) dummydata3=c(2002,10,8,12.00,101,426340.0,4411238.0,3598.0,-5.02,88.77,-9999.00,-99.0,-9.9)
dummyset=c(dummydata1,dummydata2,dummydata3) col.len=length(dummydata1) dummytable=data.frame(matrix(data=dummyset,ncol=col.len,byrow=TRUE))
df <- data.frame(ID=c(rep("A", 5), rep("B",5)), Quarter=c(1:5, 1:5), value=rnorm(10)) df <- data.frame(lapply(df, as.character), stringsAsFactors=FALSE) df[, "value"] <- as.numeric(df[, "value"]) library(data.table) dt <- data.table(ID=c(rep("A", 5), rep("B",5)), Quarter=c(1:5, 1:5), value=rnorm(10)) dt <- data.table(lapply(dt, as.character), stringsAsFactors=FALSE) dt[, "ID", with=FALSE] <- as.character(dt[, "ID", with=FALSE])
classes <- as.character(sapply(df, class)) colClasses <- which(classes=="factor") df[, colClasses] <- sapply(df[, colClasses], as.character)
locale: [1] C attached base packages: [1] stats graphics grDevices utils datasets methods base other attached packages: [1] data.table_1.6.6 loaded via a namespace (and not attached): [1] tools_2.13.1
dtnew <- dt[, Quarter:=as.character(Quarter)] str(dtnew) Classes ‘data.table’ and $ ID : Factor w/ 2 levels "A","B": 1 1 1 1 1 2 2 2 2 2 $ Quarter: chr "1" "2" "3" "4" ... $ value : num -0.838 0.146 -1.059 -1.197 0.282 ...
dtnew <- dt[, lapply(.SD, as.character), by=ID] str(dtnew) Classes ‘data.table’ and $ ID : Factor w/ 2 levels "A","B": 1 1 1 1 1 2 2 2 2 2 $ Quarter: chr "1" "2" "3" "4" ... $ value : chr "1.487145280568" "-0.827845218358881" "0.028977182770002" "1.35392750102305" ...
DT <- data.table(X1 = c("a", "b"), X2 = c(1,2), X3 = c("hello", "you")) changeCols <- colnames(DT)[which(as.vector(DT[,lapply(.SD, class)]) == "character")] DT[,(changeCols):= lapply(.SD, as.factor), .SDcols = changeCols]
library(data.table) dt <- data.table(ID = c(rep("A", 5), rep("B",5)), fac1 = c(1:5, 1:5), fac2 = c(1:5, 1:5) * 2, val1 = rnorm(10), val2 = rnorm(10)) names_factors = c( names_values = c( for (col in names_factors){ e = substitute(X := as.factor(X), list(X = as.symbol(col))) dt[ , eval(e)] } for (col in names_values){ e = substitute(X := as.numeric(X), list(X = as.symbol(col))) dt[ , eval(e)] } str(dt)
Classes ‘data.table’ and $ ID : chr "A" "A" "A" "A" ... $ fac1: Factor w/ 5 levels "1","2","3","4",..: 1 2 3 4 5 1 2 3 4 5 $ fac2: Factor w/ 5 levels "2","4","6","8",..: 1 2 3 4 5 1 2 3 4 5 $ val1: num 0.0459 2.0113 0.5186 -0.8348 -0.2185 ... $ val2: num -0.0688 0.6544 0.267 -0.1322 -0.4893 ... - attr(*, ".internal.selfref")=<externalptr>
data.table(ID = c(rep("A", 5), rep("B",5)), Quarter = c(1:5, 1:5), value = rnorm(10)) -> df1 df1 %<>% dplyr::mutate(ID = as.factor(ID), Quarter = as.character(Quarter)) dplyr::glimpse(df1)
list(ID = as.factor(c(rep("A", 5), rep("B",5))), Quarter = as.character(c(1:5, 1:5)), value = rnorm(10)) %>% setDT(list.df) -> df2 class(df2)
".." <- function (x) { stopifnot(inherits(x, "character")) stopifnot(length(x) == 1) get(x, parent.frame(4)) } set_colclass <- function(x, class){ stopifnot(all(class %in% c("integer", "numeric", "double","factor","character"))) for(i in intersect(names(class), names(x))){ f <- get(paste0("as.", class[i])) x[, (..("i")):=..("f")(get(..("i")))] } invisible(x) }
dt <- data.table(i=1:3,f=3:1) set_colclass(dt, c(i="character")) class(dt$i)
convert_to_character <- c("Quarter", "value") dt[, convert_to_character] <- dt[, lapply(.SD, as.character), .SDcols = convert_to_character]
dt <- data.table(A = c(1:5), B= c(11:15)) x <- ncol(dt) for(i in 1:x) { dt[[i]] <- as.character(dt[[i]]) }
junk <- data.frame(x <- rep(LETTERS[1:4], 3), y <- letters[1:12]) colnames(junk) <- c("nm", "val")
nm val 1 A a 2 B b 3 C c 4 D d 5 A e 6 B f 7 C g 8 D h 9 A i 10 B j 11 C k 12 D l
junk$nm <- as.character(junk$nm) junk$nm[junk$nm == "B"] <- "b"
library(plyr) junk$nm <- revalue(junk$nm, c("B"="b"))
> lev <- with(junk, levels(nm)) > lev[lev == "B"] <- "b" > junk2 <- within(junk, levels(nm) <- lev) > junk2 nm val 1 A a 2 b b 3 C c 4 D d 5 A e 6 b f 7 C g 8 D h 9 A i 10 b j 11 C k 12 D l
junk <- data.frame(x = rep(LETTERS[1:4], 3), y =letters[1:12], stringsAsFactors=FALSE) junk$nm[junk$nm == "B"] <- "b"
levels(junk$nm) <- c(levels(junk$nm), "b") junk$nm[junk$nm == "B"] <- "b" junk
junk <- data.frame(x <- rep(LETTERS[1:4], 3), y <- letters[1:12], stringsAsFactors = FALSE) colnames(junk) <- c("nm", "val") junk$nm <- replace(junk$nm, junk$nm == "B", "b") junk
checking Java support in R... present: interpreter : archiver : compiler : header prep.: cpp flags : java libs : checking whether JNI programs can be compiled... yes checking JNI data types... configure: error: One or more JNI types differ from the corresponding native type. You may need to use non-standard compiler flags or a different compiler in order to fix this. ERROR: configuration failed for package ‘rJava’
$ java -version java version "1.6.0_20" Java(TM) SE Runtime Environment (build 1.6.0_20-b02)
export JAVA_HOME=/usr/lib/jvm/java-6-sun export PATH=$PATH:$JAVA_HOME/bin
export JAVA_HOME=/usr/lib/jvm/java-6-sun/jre export PATH=$PATH:$JAVA_HOME/bin
export JAVA_LIBS="$JAVA_LIBS -ldl" R CMD javareconf
sudo R CMD javareconf JAVA_CPPFLAGS=-I/usr/lib/jvm/java-6-sun-1.6.0.26/include
/usr/lib/jvm/java-8-oracle/jre/lib/amd64 /usr/lib/jvm/java-8-oracle/jre/lib/amd64/server
sudo apt-get install openjdk-7-* RESTART after installing java, then try to install package "rJava" in R
sudo apt-get install default-jre sudo apt-get install default-jdk sudo R CMD javareconf
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.8.0_201")
mylist <- list(a=1,b=2,c=3) myfxn <- function(var1,var2){ var1*var2 } var2 <- 2 sapply(mylist,myfxn,var2=var2)
vars1<-c(1,2,3) vars2<-c(10,20,30) mult_one<-function(var1,var2) { var1*var2 } mapply(mult_one,vars1,vars2)
df <- data.frame(x = 1:5, y = 1:5) p <- ggplot(df, aes(x, y)) + geom_point() p <- p + expand_limits(x = 0, y = 0) p
p + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0))
require(data.table) DT <- data.table(x=rep(1:5, each=2), y=1:10) DT[, mean(y), by=x]
setkey(X, a) setkey(Y, a) X[Y] X[Y, on="a"] X[Y, on=c("x_a" = "y_a")]
setkey(X, a, b) X[Y, col := i.val] X[Y, col := i.val, on=c("a", "b")]
setkey(ZIP,zipcode) setkey(PPL,zipcode) full.info <- PPL[ZIP, nomatch=F]
x<-1:10 y<-rnorm(10) qplot(x,y, geom="line") ggplot(data.frame(x,y), aes(x,y)) + geom_line() d <- data.frame(x, y) qplot(x, y, data=d, geom="line") ggplot(d, aes(x,y)) + geom_line()
a <- c(1,2,3) b <- c(2,3,4) x <- qplot(a,b) y <- ggplot(data.frame(a,b), aes(a,b)) +geom_line()
x <- rnorm(10) qplot(x, geom="histogram") ggplot(data.frame(x), aes(x)) + geom_histogram()
vari <- 1 tryCatch(print("passes"), error = function(e) print(vari), finally=print("finished")) tryCatch(stop("fails"), error = function(e) print(vari), finally=print("finished"))
for(i in 1:16){ result <- try(nonlinear_modeling(i)); if(class(result) == "try-error") next; }
for (i in 1:20) withRestarts(tryCatch( if((a <- runif(1))>0.5) print(a) else stop(a), finally = print("loop body finished!")), abort = function(){})
low_level_ABS <- function(x){ if(x<0){ negative_value_error <- structure( class = c("negative_value","error", "condition"), list(message = "Not Sure what to with a negative value", call = sys.call(), x=x)) stop(negative_value_error) } cat("Returning from low_level_ABS()\n") return(x) }
mid_level_ABS <- function(y){ abs_y <- withRestarts(low_level_ABS(y), negative_value_restart=function(z){-z}) cat("Returning from mid_level_ABS()\n") return(abs_y) }
high_level_ABS <- function(z){ abs_z <- withCallingHandlers( mid_level_ABS(z) , error = function(err){ if(inherits(err,"negative_value")){ invokeRestart( err$x) }else{ stop(err) } }) cat("Returning from high_level_ABS()\n") return(abs_z) }
> high_level_ABS(3) Returning from low_level_ABS() Returning from mid_level_ABS() Returning from high_level_ABS() [1] 3 > high_level_ABS(-3) Returning from mid_level_ABS() Returning from high_level_ABS() [1] 3
this.dir <- dirname(parent.frame(2)$ofile) setwd(this.dir)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
File <- "filename" Files <- list.files(path=file.path("~"),recursive=T,include.dirs=T) Path.file <- names(unlist(sapply(Files,grep,pattern=File))[1]) Dir.wd <- dirname(Path.file)
Dirname <- "subdir_name" Dirs <- list.dirs(path=file.path("~"),recursive=T) dir_wd <- names(unlist(sapply(Dirs,grep,pattern=Dirname))[1])
dirname(rstudioapi::getActiveDocumentContext()$path)
filename = "your_file.R" filepath = file.choose() dir = substr(filepath, 1, nchar(filepath)-nchar(filename)) setwd(dir)
library(rstudioapi) current_path = rstudioapi::getActiveDocumentContext()$path setwd(dirname(current_path )) print( getwd() )
extractRootDir <- function(x) { abs <- suppressWarnings(system(paste("find ./ -name",x), wait=T, intern=T, ignore.stderr=T))[1]; path <- paste("~",substr(abs, 3, length(strsplit(abs,"")[[1]])),sep=""); ret <- gsub(x, "", path); return(ret); } setwd(extractRootDir("myScript.R"));
system("pwd=`pwd`; $pwd 2> dummyfile.txt") dir <- fread("dummyfile.txt") n<- colnames(dir)[2] n2 <- substr(n, 1, nchar(n)-1) setwd(n2)
dirname(rstudioapi::getActiveDocumentContext()$path)
path <- rstudioapi::getActiveDocumentContext()$path Encoding(path) <- "UTF-8" setwd(dirname(path))
library(ggplot2) data(mtcars) plotmatrix(mtcars[,1:3])
library(GGally) ggpairs(iris, aes(colour = Species, alpha = 0.4))
require(ggplot2) require(dplyr) require(tidyr) gatherpairs <- function(data, ..., xkey = ykey = na.rm = FALSE, convert = FALSE, factor_key = FALSE) { vars <- quos(...) xkey <- enquo(xkey) xvalue <- enquo(xvalue) ykey <- enquo(ykey) yvalue <- enquo(yvalue) data %>% { cbind(gather(., key = !!xkey, value = !!xvalue, !!!vars, na.rm = na.rm, convert = convert, factor_key = factor_key), select(., !!!vars)) } %>% gather(., key = !!ykey, value = !!yvalue, !!!vars, na.rm = na.rm, convert = convert, factor_key = factor_key) } iris %>% gatherpairs(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) %>% { ggplot(., aes(x = .xvalue, y = .yvalue, color = Species)) + geom_point() + geom_smooth(method = facet_wrap(.xkey ~ .ykey, ncol = length(unique(.$.ykey)), scales = scale_color_brewer(type = }
> library(knitr) > kable(head(iris[,1:3]), format = "markdown") | Sepal.Length| Sepal.Width| Petal.Length| |-------------:|------------:|-------------:| | 5,1| 3,5| 1,4| | 4,9| 3,0| 1,4| | 4,7| 3,2| 1,3| | 4,6| 3,1| 1,5| | 5,0| 3,6| 1,4| | 5,4| 3,9| 1,7|
library(ascii) print(ascii(head(iris[,1:3])), type = **Sepal.Length** **Sepal.Width** **Petal.Length** --- ------------------ ----------------- ------------------ 1 5.10 3.50 1.40 2 4.90 3.00 1.40 3 4.70 3.20 1.30 4 4.60 3.10 1.50 5 5.00 3.60 1.40 6 5.40 3.90 1.70 --- ------------------ ----------------- ------------------
FILE: file_knit.r library(knitr) library(markdown) knit("file.Rmd") markdownToHTML("file.md","file.html",stylesheet="~/custom.css")
FILE: file.Rmd Report of Fruit vs. Animal Choices ================================== This is a report of fruit vs. animal choices. ```{r echo=FALSE,results= library(hwriter) set.seed(9850104) my.df <- data.frame(Var1=sample(x=c("Apple","Orange","Banana"),size=40,replace=TRUE), Var2=sample(x=c("Dog","Cat","Bunny"),size=40,replace=TRUE)) tbl1 <- table(my.df$Var1,my.df$Var2) tbl1 <- cbind(tbl1,rowSums(tbl1)) tbl1 <- rbind(tbl1,colSums(tbl1)) colnames(tbl1)[4] <- "TOTAL" rownames(tbl1)[4] <- "TOTAL" cat(hwrite(tbl1, border=NA, table.class="t1", row.class=list(c("header col_first","header col","header col","header col", "header col_last"), c("col_first","col","col","col","col_last"), c("col_first","col","col","col","col_last"), c("col_first","col","col","col","col_last"), c("footer col_first","footer col","footer col","footer col","footer col_last")))) ```
FILE: custom.css body { font-family: sans-serif; background-color: white; font-size: 12px; margin: 20px; } h1 {font-size:1.5em;} table { border: solid; border-color: black; border-width: 2px; border-collapse: collapse; margin-bottom: 20px; text-align: center; padding: 0px; } .t1 .header { color: white; background-color: black; border-bottom: solid; border-color: black; border-width: 2px; font-weight: bold; } .t1 .footer { border-top: solid; border-color: black; border-width: 2px; } .t1 .col_first { border-right: solid; border-color: black; border-width: 2px; text-align: left; font-weight: bold; width: 75px; } .t1 .col { width: 50px; } .t1 .col_last { width: 50px; border-left: solid; border-color: black; border-width: 2px; }
> library(pander) > pandoc.table(head(iris)[, 1:3]) ------------------------------------------- Sepal.Length Sepal.Width Petal.Length -------------- ------------- -------------- 5.1 3.5 1.4 4.9 3 1.4 4.7 3.2 1.3 4.6 3.1 1.5 5 3.6 1.4 5.4 3.9 1.7 -------------------------------------------
rmarkdownTable <- function(df){ cat(paste(names(df), collapse = "|")) cat("\n") cat(paste(rep("-", ncol(df)), collapse = "|")) cat("\n") for(i in 1:nrow(df)){ cat(paste(df[i,], collapse = "|")) cat("\n") } invisible(NULL) }
```{r, results = rmarkdownTable <- function(df){ cat(paste(names(df), collapse = "|")) cat("\n") cat(paste(rep("-", ncol(df)), collapse = "|")) cat("\n") for(i in 1:nrow(df)){ cat(paste(df[i,], collapse = "|")) cat("\n") } invisible(NULL) } rmarkdownTable(head(iris)) ```
kable(head(mtcars[,1:4]),format="markdown") kable(head(mtcars[,1:4]),format="pandoc",caption="Title of the table")
data(tli) fm1 <- aov(tlimth ~ sex + ethnicty + grade + disadvg, data=tli) kable(xtable(fm1), caption = "Annova table")
dataImport <- read.csv("data.csv", colClasses = c("factor","factor","Date"))
data <- structure(list(func_loc = structure(c(1L, 2L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 5L), .Label = c("3076WAG0003", "3076WAG0004", "3076WAG0007", "3076WAG0009", "3076WAG0010"), class = "factor"), order_type = structure(c(3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 3L, 1L), .Label = c("PM01", "PM02", "PM03"), class = "factor"), actual_finish = structure(c(4L, 6L, 1L, 2L, 3L, 7L, 1L, 8L, 1L, 5L), .Label = c("", "11/03/2008", "14/08/2008", "15/07/2008", "17/03/2008", "19/01/2009", "22/09/2008", "6/09/2007"), class = "factor")), .Names = c("func_loc", "order_type", "actual_finish"), row.names = c(NA, 10L), class = "data.frame") write.csv(data,"data.csv", row.names = F) dataImport <- read.csv("data.csv") str(dataImport) dataImport dataImport <- read.csv("data.csv", colClasses = c("factor","factor","Date")) str(dataImport) dataImport
setAs("character","myDate", function(from) as.Date(from, format="%d/%m/%Y") ) tmp <- c("1, 15/08/2008", "2, 23/05/2010") con <- textConnection(tmp) tmp2 <- read.csv(con, colClasses=c( str(tmp2)
library(Defaults) setDefaults( dataImport <- read.csv("data.csv", colClasses = c("factor","factor","Date")) str(dataImport)
setClass( setAs("character","yyyymmdd-hhmmss", function(from) as.POSIXct(from, format="%Y%m%d-%H%M%S")) d <- read.table(colClasses="yyyymmdd-hhmmss", text="20150711-130153") str(d)
fname <- "https: df <- read.csv(fname, header=TRUE, sep="," , skip=7) df <- df[1:(length(df$MKTHOUR)-5),] df$MWh <- as.numeric(df$MWh) df$Datetime <- strptime(df$MKTHOUR, "%m/%d/%y %I:%M %p") df$Date <- as.Date(df$Datetime) df$HrEnd <- df$Datetime$hour+1 last.obs <- range(df$Date)[2] df.recent <- subset(df, Date %in% seq(last.obs-30, last.obs-2, by=1)) df.last <- subset(df, Date %in% seq(last.obs-2, last.obs, by=1)) p <- ggplot(df.recent, aes(HrEnd, MWh, group=factor(Date))) + geom_line(color="grey") + scale_y_continuous(labels = comma) + scale_x_continuous(breaks = seq(1,24,1)) + labs(y="MWh") + labs(x="Hour Ending") + labs(title="Hourly Wind Generation") p p <- p + geom_line(df.last, aes(HrEnd, MWh, group=factor(Date)), color="red") p
p + geom_line(data=df.last, aes(HrEnd, MWh, group=factor(Date)), color="red")
p + geom_line(aes(HrEnd, MWh, group=factor(Date)), df.last, color="red")
RIGHT: ggplot(data=df[df$var7== WRONG: ggplot(aes(data=df[df$var7==
qplot(data=..., x=...,y=..., ...) ggplot(data=..., aes(x=...,y=...,...))
theme_set(theme_gray(base_size = 18)) qplot(1:10, 1:10)
qplot(1:10, 1:10) + theme_grey(base_size = 18) ggplot(mtcars, aes(x = mpg, y = cyl)) + geom_point() + theme_grey(base_size = 18)
pheasant<-read.table(file.choose(),header=TRUE,sep=",")
> Data <- read.table("test.csv",header=T,sep=",") > Data <- read.table("test.xlsx",header=T,sep=",") Warning message: In read.table("test.xlsx", header = T, sep = ",") : incomplete final line found by readTableHeader on
> read.table(testfile,header=T,sep=",") Test1 Test2 Test3 1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 NA 5 5 5 NA 6 NA 6 NA
pheasant <- read.table( text = readLines(file.choose(), warn = FALSE), header = TRUE, sep = "," )
for (i in 1:10) { df$x = rbind(df$x, i) df$y = rbind(df$y, toString(i)) }
f3 <- function(n){ df <- data.frame(x = numeric(n), y = character(n), stringsAsFactors = FALSE) for(i in 1:n){ df$x[i] <- i df$y[i] <- toString(i) } df }
f4 <- function(n) { x <- numeric(n) y <- character(n) for (i in 1:n) { x[i] <- i y[i] <- i } data.frame(x, y, stringsAsFactors=FALSE) }
library(microbenchmark) microbenchmark(f1(1000), f3(1000), f4(1000), times = 5)
for (i in 1:10) { df <- rbind(df, data.frame(x = i, y = toString(i))) }
f1 <- function(n){ df <- data.frame(x = numeric(), y = character()) for(i in 1:n){ df <- rbind(df, data.frame(x = i, y = toString(i))) } df } f2 <- function(n){ df <- data.frame(x = numeric(), y = character(), stringsAsFactors = FALSE) for(i in 1:n){ df[i,] <- list(i, toString(i)) } df } f3 <- function(n){ df <- data.frame(x = numeric(1000), y = character(1000), stringsAsFactors = FALSE) for(i in 1:n){ df$x[i] <- i df$y[i] <- toString(i) } df } system.time(f1(1000)) system.time(f2(1000)) system.time(f3(1000))
create.1<-function(elems) { return(as.data.table(elems)) } append.1<-function(dt, elems) { return(rbindlist(list(dt, elems),use.names = TRUE)) } access.1<-function(dt) { return(dt) }
create.2<-function(elems) { return(as.data.table(elems)) } append.2<-function(dt, elems) { n<-attr(dt, if (is.null(n)) n<-nrow(dt) if (n==nrow(dt)) { tmp<-elems[1] tmp[[1]]<-rep(NA,n) dt<-rbindlist(list(dt, tmp), fill=TRUE, use.names=TRUE) setattr(dt, } pos<-as.integer(match(names(elems), colnames(dt))) for (j in seq_along(pos)) { set(dt, i=as.integer(n+1), pos[[j]], elems[[j]]) } setattr(dt, return(dt) } access.2<-function(elems) { n<-attr(elems, return(as.data.table(elems[1:n,])) }
create.3<-function(elems) { con <- RSQLite::dbConnect(RSQLite::SQLite(), ":memory:") RSQLite::dbWriteTable(con, return(con) } append.3<-function(con, elems) { RSQLite::dbWriteTable(con, return(con) } access.3<-function(con) { return(RSQLite::dbReadTable(con, "t", row.names=NULL)) }
create.4<-function(elems) { env<-new.env() env$dt<-as.data.frame(elems) return(env) } append.4<-function(env, elems) { env$dt[nrow(env$dt)+1,]<-elems return(env) } access.4<-function(env) { return(env$dt) }
test<-function(id, n=1000) { n<-n-1 el<-list(a=1,b=2,c=3,d=4) o<-do.call(paste0( s<-paste0( for (i in 1:n) { o<-do.call(s,list(o,el)) } return(do.call(paste0( }
r<-microbenchmark(test(0,n=10), test(1,n=10),test(2,n=10),test(3,n=10), test(4,n=10)) autoplot(r)
nr function time 4 data.frame 228.251 3 sqlite 133.716 2 data.table 3.059 1 rbindlist 169.998 0 placebo 0.202
extendDf <- function (df, n) { withFactors <- sum(sapply (df, function(X) (is.factor(X)) )) > 0 nr <- nrow (df) colNames <- names(df) for (c in 1:length(colNames)) { if (is.factor(df[,c])) { col <- vector (mode= col[1:nr] <- as.character(df[,c]) col[(nr+1):(n+nr)]<- rep(col[1], n) col <- as.factor(col) } else { col <- vector (mode=mode(df[1,c]), length = nr+n) class(col) <- class (df[1,c]) col[1:nr] <- df[,c] } if (c==1) { newDf <- data.frame (col ,stringsAsFactors=withFactors) } else { newDf[,c] <- col } } names(newDf) <- colNames newDf }
aDf <- data.frame (l=TRUE, i=1L, n=1, c= extendDf (aDf, 2) system.time (eDf <- extendDf (aDf, 100000)) system.time (eDf <- extendDf (eDf, 100000))
x <- c(2, 2, 3, 4, 1, 4, 4, 3, 3) y <- c(4, 2, 1, 3)
order(y) order(y)[x] sort(order(y)[x]) y[sort(order(y)[x])]
x.factor <- factor(x, levels = y, ordered=TRUE) sort(x) sort(x.factor)
y <- data.frame(index=1:length(y), x=y) x <- data.frame(x=x) x <- merge(x,y) x <- x[order(x$index),"x"] x [1] 4 4 4 2 2 1 3 3 3
a <- ordered(x, levels = y) [1] 2 2 3 4 1 4 4 3 3 Levels: 4 < 2 < 1 < 3 b <- order(a) [1] 4 6 7 1 2 5 3 8 9 x[b] [1] 4 4 4 2 2 1 3 3 3
x <- c(2, 2, 3, 4, 1, 4, 4, 3, 3) y <- c(4, 2, 1, 3) for(i in y) { z <- c(z, rep(i, sum(x==i))) }
require(ggplot2);require(gridExtra) A <- ggplot(CO2, aes(x=Plant)) + geom_bar() +coord_flip() B <- ggplot(CO2, aes(x=Type)) + geom_bar() +coord_flip() grid.arrange(A, B, ncol=1)
gA <- ggplotGrob(A) gB <- ggplotGrob(B) maxWidth = grid::unit.pmax(gA$widths[2:5], gB$widths[2:5]) gA$widths[2:5] <- as.list(maxWidth) gB$widths[2:5] <- as.list(maxWidth) grid.arrange(gA, gB, ncol=1)
gA <- ggplotGrob(A) gB <- ggplotGrob(B) grid::grid.newpage() grid::grid.draw(rbind(gA, gB))
plots <- list(A, B, C, D) grobs <- list() widths <- list()
for (i in 1:length(plots)){ grobs[[i]] <- ggplotGrob(plots[[i]]) widths[[i]] <- grobs[[i]]$widths[2:5] }
for (i in 1:length(grobs)){ grobs[[i]]$widths[2:5] <- as.list(maxwidth) }
A <- ggplot(CO2, aes(x=Plant)) + geom_bar() +coord_flip() B <- ggplot(CO2, aes(x=Type)) + geom_bar() +coord_flip() library(cowplot) plot_grid(A, B, ncol=1, align="v")
require(ggplot2);require(gridExtra) A <- ggplot(CO2, aes(x=Plant)) + geom_bar() +coord_flip() B <- ggplot(CO2, aes(x=Type)) + geom_bar() +coord_flip() grid.draw(rbind(ggplotGrob(A), ggplotGrob(B), size="first"))
require(ggplot2);require(gridExtra) A <- ggplot(CO2, aes(x=Plant)) + geom_bar() +coord_flip() B <- ggplot(CO2, aes(x=Type)) + geom_bar() +coord_flip() C <- ggplot(CO2, aes(x=conc)) + geom_bar() +coord_flip() D <- ggplot(CO2, aes(x=uptake)) + geom_bar() +coord_flip() grid.draw(cbind( rbind(ggplotGrob(A), ggplotGrob(B), size="first"), rbind(ggplotGrob(C), ggplotGrob(D), size="first"), size=
library(ggplot2) library(reshape2) dat = CO2[, c(1, 2)] dat$id = seq(nrow(dat)) mdat = melt(dat, id.vars="id") head(mdat) plot_1 = ggplot(mdat, aes(x=value)) + geom_bar() + coord_flip() + facet_wrap(~ variable, nrow=2, scales="free", drop=TRUE) ggsave(plot=plot_1, filename="plot_1.png", height=4, width=6)
library(egg) library(ggplot2) p1 <- ggplot(mtcars, aes(mpg, wt, colour = factor(cyl))) + geom_point() p2 <- ggplot(mtcars, aes(mpg, wt, colour = factor(cyl))) + geom_point() + facet_wrap( ~ cyl, ncol=2, scales = "free") + guides(colour="none") + theme() ggarrange(p1, p2)
library(wq) layOut(list(A, 1, 2:16), list(B, 2:3, 1:16))
library(purrr) list(A, B) %>% map(ggplotGrob) %>% do.call(gridExtra::gtable_rbind, .) %>% grid::grid.draw()
df.original <-data.frame(eggs = c("foo", "foo", "bar", "bar"), ham = c(1,2,3,4))
df.desired <- data.frame(foo = c(1,1,0,0), bar=c(0,0,1,1), ham=c(1,2,3,4))
R> library(ade4) R> df <-data.frame(eggs = c("foo", "foo", "bar", "bar"), ham = c("red","blue","green","red")) R> acm.disjonctif(df) eggs.bar eggs.foo ham.blue ham.green ham.red 1 0 1 0 0 1 2 0 1 1 0 0 3 1 0 0 1 0 4 1 0 0 0 1
require(reshape2) > dcast(df.original, ham ~ eggs, length) Using ham as value column: use value_var to override. ham bar foo 1 1 0 1 2 2 0 1 3 3 1 0 4 4 1 0
> with(df.original, data.frame(model.matrix(~eggs+0), ham)) eggsbar eggsfoo ham 1 0 1 1 2 0 1 2 3 1 0 3 4 1 0 4
library(nnet) with(df.original, data.frame(class.ind(eggs), ham)) bar foo ham 1 0 1 1 2 0 1 2 3 1 0 3 4 1 0 4
dummy <- function(df) { NUM <- function(dataframe)dataframe[,sapply(dataframe,is.numeric)] FAC <- function(dataframe)dataframe[,sapply(dataframe,is.factor)] require(ade4) if (is.null(ncol(NUM(df)))) { DF <- data.frame(NUM(df), acm.disjonctif(FAC(df))) names(DF)[1] <- colnames(df)[which(sapply(df, is.numeric))] } else { DF <- data.frame(NUM(df), acm.disjonctif(FAC(df))) } return(DF) }
df <-data.frame(eggs = c("foo", "foo", "bar", "bar"), ham = c("red","blue","green","red"), x=rnorm(4)) dummy(df) df2 <-data.frame(eggs = c("foo", "foo", "bar", "bar"), ham = c("red","blue","green","red")) dummy(df2)
df.original <-data.frame(eggs = c("foo", "foo", "bar", "bar"), ham = c(1,2,3,4)) df.original > mm <- model.matrix(~eggs-1, df.original) > mm colnames(mm) <- gsub("eggs","",colnames(mm)) mm result <- cbind(df.original, mm) result
explode_factors <- function(data, values = c(-0.8, 0.8), max_factor_level_fraction = 0.2) { exploders <- colnames(data)[sapply(data, function(col){ is.factor(col) && nlevels(col) <= max_factor_level_fraction * length(col) })] if (length(exploders) > 0) { exploded <- lapply(exploders, function(exp){ col <- data[, exp] n <- length(col) dummies <- matrix(values[1], n, length(levels(col))) dummies[(1:n) + n * (unclass(col) - 1)] <- values[2] colnames(dummies) <- paste(exp, levels(col), sep = dummies }) data <- data[sapply(data, is.numeric)] data <- cbind(data, exploded) } return(data) }
aaa <- vector("list", 3) is.list(aaa) is.vector(aaa)
x <- list(values=sin(1:3), ids=letters[1:3], sub=list(foo=42,bar=13)) x x$values x[["ids"]] x$sub$foo x[[c(3,2)]] str(x)
d <- data.frame(a=11:13, b=21:23) is.list(d) str(d) m <- lm(a ~ b, data=d) is.list(m) str(m)
scores <- c(20,30,40,50) student <- c("A","B","C","D") sc_log <- c(TRUE,FALSE,FALSE,TRUE)
mylist <- list(scores,student,sc_log) str(mylist) [1] list of 3 [1] $:num [1:4] 20 30 40 50 [2] $:chr [1:4] "A""B""C""D" [3] $:log [1:4] TRUE FALSE FALSE TRUE
if(!exists("foo", mode="function")) source("util.R")
if(identical(length(ls(pattern = "^foo$")), 0)) source("util.R")
if(exists("foo", mode = "function")) source("util.R")
> exists("foo", mode = "function") [1] FALSE > foo <- function(x) x > exists("foo", mode = "function") [1] TRUE > rm(foo) > foo <- 1:10 > exists("foo", mode = "function") [1] FALSE
include <- function(file, env) { if(missing(file) || missing(env)) stop(" if(!is.character(file) || !is.character(env)) stop(" if(env %in% search()) { ENV <- get(env) files <- get(".files",ENV) if(!(file %in% files)) { sys.source(file, ENV) assign(".files", c(file, files), envir=ENV) } } else { ENV <- attach(NULL, name=env) sys.source(file, ENV) assign(".files", file, envir=ENV) } }
warning("overriding source with my own function FYI") source <- function(path, .force=FALSE, ...) { library(tools) path <- tryCatch(normalizePath(path), error=function(e) path) m<-md5sum(path) go<-TRUE if (!is.vector(.GlobalEnv$sourced)) { .GlobalEnv$sourced <- list() } if(! is.null(.GlobalEnv$sourced[[path]])) { if(m == .GlobalEnv$sourced[[path]]) { message(sprintf("Not re-sourcing %s. Override with:\n source( go<-FALSE } else { message(sprintf( go<-TRUE } } if(.force) { go<-TRUE message(" ...forcing.") } if(go) { message(sprintf("sourcing %s", path)) .GlobalEnv$sourced[path] <- m base::source(path, ...) } }
d <- rnorm(100) png( boxplot(d) dev.off() df <- data.frame(y=d,x=1) p <- ggplot(df) + stat_boxplot(aes(x = x,y=y)) p <- p + opts( panel.background = theme_rect(fill = "transparent",colour = NA), panel.grid.minor = theme_blank(), panel.grid.major = theme_blank() ) png( p dev.off()
df <- data.frame(y = d, x = 1, group = rep(c("gr1", "gr2"), 50)) p <- ggplot(df) + stat_boxplot(aes(x = x, y = y, color = group) , fill = "transparent" )
p <- p + theme( rect = element_rect(fill = "transparent") ) p
p <- p + theme( panel.background = element_rect(fill = "transparent") , plot.background = element_rect(fill = "transparent", color = NA) , panel.grid.major = element_blank() , panel.grid.minor = element_blank() , legend.background = element_rect(fill = "transparent") , legend.box.background = element_rect(fill = "transparent") ) p
ggsave(p, filename = "tr_tst2.png", bg = "transparent")
df <- data.frame(y=d,x=1) p <- ggplot(df) + stat_boxplot(aes(x = x,y=y)) p <- p + opts( panel.background = theme_rect(fill = "transparent",colour = NA), panel.grid.minor = theme_blank(), panel.grid.major = theme_blank(), plot.background = theme_rect(fill = "transparent",colour = NA) ) png( print(p) dev.off()
MyTheme_transparent <- theme( panel.background = element_rect(fill = "transparent"), plot.background = element_rect(fill = "transparent", color = NA), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.background = element_rect(fill = "transparent"), legend.box.background = element_rect(fill = "transparent"), legend.key = element_rect(fill = "transparent", colour = NA), axis.line = element_line(colour = "black") )
data <- read.csv("test.csv", comment.char="" , colClasses=c(time="character", "numeric"), strip.white=FALSE)
Warning messages: 1: In read.table(file = file, header = header, sep = sep, quote = quote, : not all columns named in 2: In tmp[i[i > 0L]] <- colClasses : number of items to replace is not a multiple of replacement length
fname <- "test.csv" headset <- read.csv(fname, header = TRUE, nrows = 10) classes <- sapply(headset, class) classes[names(classes) %in% c("time")] <- "character" dataset <- read.csv(fname, header = TRUE, colClasses = classes)
data<-read.csv("test.csv", head=FALSE, colClasses=c("V36"="character","V38"="character"))
read_csv ("test.csv", col_names=FALSE, col_types = cols (.default = "c", time = "i"))
data <- read.csv("test.csv", head = F, colClasses = c(V36 = "character", V38 = "character"))
x = c(0.8846, 1.1554, 0.9317, 0.9703, 0.9053, 0.9454, 1.0146, 0.9012, 0.9055, 1.3307) y = c(0.9828, 1.0329, 0.931, 1.3794, 0.9273, 0.9605, 1.0259, 0.9542, 0.9717, 0.9357) ShortSci = c("MotAlb", "PruMod", "EriRub", "LusMeg", "PhoOch", "PhoPho", "SaxRub", "TurMer", "TurPil", "TurPhi") plot(x, y, asp=1) abline(h = 1, col = "green") abline(v = 1, col = "green")
text(x, y, labels = ShortSci, cex= 0.7, offset = 10)
require(maptools) pointLabel(x, y, labels = paste(" ", ShortSci, " ", sep=""), cex=0.7)
require(plotrix) thigmophobe.labels(x, y, labels = ShortSci, cex=0.7, offset=0.5)
require(calibrate) textxy(x, y, labs=ShortSci, cx=0.7)
x = c(0.8846, 1.1554, 0.9317, 0.9703, 0.9053, 0.9454, 1.0146, 0.9012, 0.9055, 1.3307) y = c(0.9828, 1.0329, 0.931, 1.3794, 0.9273, 0.9605, 1.0259, 0.9542, 0.9717, 0.9357) ShortSci = c("MotAlb", "PruMod", "EriRub", "LusMeg", "PhoOch", "PhoPho", "SaxRub", "TurMer", "TurPil", "TurPhi") df <- data.frame(x = x, y = y, z = ShortSci) library(ggplot2) library(ggrepel) ggplot(data = df, aes(x = x, y = y)) + theme_bw() + geom_text_repel(aes(label = z), box.padding = unit(0.45, "lines")) + geom_point(colour = "green", size = 3)
df <- data.frame(x = x, y = y, z = ShortSci) library("ggplot2") ggplot(data = df, aes(x = x, y = y, label = z)) + theme_bw() + geom_point(shape = 1, colour = "green", size = 5) + geom_text(data = within(df, c(y <- y+.01, x <- x-.01)), hjust = 0, vjust = 0)
install.packages("devtools") library("devtools") install_github("JosephCrispell/addTextLabels")
library(addTextLabels) x = c(0.8846, 1.1554, 0.9317, 0.9703, 0.9053, 0.9454, 1.0146, 0.9012, 0.9055, 1.3307) y = c(0.9828, 1.0329, 0.931, 1.3794, 0.9273, 0.9605, 1.0259, 0.9542, 0.9717, 0.9357) ShortSci = c("MotAlb", "PruMod", "EriRub", "LusMeg", "PhoOch", "PhoPho", "SaxRub", "TurMer", "TurPil", "TurPhi") plot(x, y, asp=1) abline(h = 1, col = "green") abline(v = 1, col = "green") addTextLabels(x, y, ShortSci, cex=0.9, col.background=rgb(0,0,0, 0.75), col.label="white")
setEPS() postscript("whatever.eps") plot(rnorm(100), main="Hey Some Data") dev.off()
postscript("foo.eps", horizontal = FALSE, onefile = FALSE, paper = "special") plot(1:10) dev.off()
R> val <- 1352068320 R> as.POSIXct(val, origin="1970-01-01") [1] "2012-11-04 22:32:00 CST" R> as.Date(as.POSIXct(val, origin="1970-01-01")) [1] "2012-11-05" R>
R> library(anytime) R> anytime(1352068320) [1] "2012-11-04 16:32:00 CST" R> anydate(1352068320) [1] "2012-11-04" R>
> a <- list() > for (i in 1:10) a[[i]] <- c(i,1:5) > a [[1]] [1] 1 1 2 3 4 5 [[2]] [1] 2 1 2 3 4 5 [[3]] [1] 3 1 2 3 4 5 [[4]] [1] 4 1 2 3 4 5 [[5]] [1] 5 1 2 3 4 5 [[6]] [1] 6 1 2 3 4 5 [[7]] [1] 7 1 2 3 4 5 [[8]] [1] 8 1 2 3 4 5 [[9]] [1] 9 1 2 3 4 5 [[10]] [1] 10 1 2 3 4 5
[,1] [,2] [,3] [,4] [,5] [,6] [1,] 1 1 2 3 4 5 [2,] 2 1 2 3 4 5 [3,] 3 1 2 3 4 5 [4,] 4 1 2 3 4 5 [5,] 5 1 2 3 4 5 [6,] 6 1 2 3 4 5 [7,] 7 1 2 3 4 5 [8,] 8 1 2 3 4 5 [9,] 9 1 2 3 4 5 [10,] 10 1 2 3 4 5
> do.call(rbind, a) [,1] [,2] [,3] [,4] [,5] [,6] [1,] 1 1 2 3 4 5 [2,] 2 1 2 3 4 5 [3,] 3 1 2 3 4 5 [4,] 4 1 2 3 4 5 [5,] 5 1 2 3 4 5 [6,] 6 1 2 3 4 5 [7,] 7 1 2 3 4 5 [8,] 8 1 2 3 4 5 [9,] 9 1 2 3 4 5 [10,] 10 1 2 3 4 5
> t(simplify2array(a)) [,1] [,2] [,3] [,4] [,5] [,6] [1,] 1 1 2 3 4 5 [2,] 2 1 2 3 4 5 [3,] 3 1 2 3 4 5 [4,] 4 1 2 3 4 5 [5,] 5 1 2 3 4 5 [6,] 6 1 2 3 4 5 [7,] 7 1 2 3 4 5 [8,] 8 1 2 3 4 5 [9,] 9 1 2 3 4 5 [10,] 10 1 2 3 4 5
> t(sapply(a, unlist)) [,1] [,2] [,3] [,4] [,5] [,6] [1,] 1 1 2 3 4 5 [2,] 2 1 2 3 4 5 [3,] 3 1 2 3 4 5 [4,] 4 1 2 3 4 5 [5,] 5 1 2 3 4 5 [6,] 6 1 2 3 4 5 [7,] 7 1 2 3 4 5 [8,] 8 1 2 3 4 5 [9,] 9 1 2 3 4 5 [10,] 10 1 2 3 4 5
> matrix(unlist(a), byrow=TRUE, nrow=length(a) ) [,1] [,2] [,3] [,4] [,5] [,6] [1,] 1 1 2 3 4 5 [2,] 2 1 2 3 4 5 [3,] 3 1 2 3 4 5 [4,] 4 1 2 3 4 5 [5,] 5 1 2 3 4 5 [6,] 6 1 2 3 4 5 [7,] 7 1 2 3 4 5 [8,] 8 1 2 3 4 5 [9,] 9 1 2 3 4 5 [10,] 10 1 2 3 4 5
> library(plyr) > as.matrix(ldply(a)) V1 V2 V3 V4 V5 V6 [1,] 1 1 2 3 4 5 [2,] 2 1 2 3 4 5 [3,] 3 1 2 3 4 5 [4,] 4 1 2 3 4 5 [5,] 5 1 2 3 4 5 [6,] 6 1 2 3 4 5 [7,] 7 1 2 3 4 5 [8,] 8 1 2 3 4 5 [9,] 9 1 2 3 4 5 [10,] 10 1 2 3 4 5
print("File not supplied.\nUsage: ./program F=filename",quote=0)
> writeLines("File not supplied.\nUsage: ./program F=filename") File not supplied. Usage: ./program F=filename >
> cat("File not supplied.\nUsage: ./program F=filename") File not supplied. Usage: ./program F=filename>
> cat("File not supplied.\nUsage: ./program F=filename","\n") File not supplied. Usage: ./program F=filename >
cat("File not supplied.\nUsage: ./program F=filename\n")
writeLines(c("File not supplied.","Usage: ./program F=filename",[additional text for third line]))
Examples require(stats); require(graphics) ** library(MASS) with(anorexia, { anorex.1 <- glm(Postwt ~ Prewt + Treat + offset(Prewt), family = gaussian) summary(anorex.1) })
Command example help R CMD check \dontrun{} x \dontshow{} x x \donttest{} x x
plot5 <- grid.arrange(plot4, plot1, heights=c(3/4, 1/4), ncol=1, nrow=2)
<<label=fig5plot, echo=F, results=hide>>= plot5<-grid.arrange(plot4, arrangeGrob(plot1, plot2, plot3, ncol=1), ncol=2, widths=c(1,1.2)) @ \begin{figure}[] \begin{center} <<label=fig5,fig=TRUE,echo=T, width=10,height=12>>= <<fig5plot>> @ \end{center} \caption{Combined plots using the `arrangeGrob \label{fig:five} \end{figure}
p = rectGrob() grid.arrange(p, arrangeGrob(p,p,p, heights=c(3/4, 1/4, 1/4), ncol=1), ncol=2)
grid.arrange(p,p,p,p, layout_matrix = cbind(c(1,1,1), c(2,3,4)))
p1 <- qplot(mpg, wt, data=mtcars) layOut(list(p1, 1:3, 1), list(p1, 1, 2), list(p1, 2,2), list(p1, 3,2))
p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp)) + facet_grid(rows = vars(gear)) p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear)) p3 <- ggplot(mtcars) + geom_smooth(aes(disp, qsec)) p4 <- ggplot(mtcars) + geom_bar(aes(carb))
library(ggplot2) theme_set(theme_bw()) q1 <- ggplot(mtcars) + geom_point(aes(mpg, disp)) q2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear)) q3 <- ggplot(mtcars) + geom_smooth(aes(disp, qsec)) q4 <- ggplot(mtcars) + geom_bar(aes(carb)) library(magrittr) library(multipanelfigure) figure1 <- multi_panel_figure(columns = 2, rows = 3, panel_label_type = "upper-roman") figure1 %<>% fill_panel(q1, column = 1, row = 1:3) %<>% fill_panel(q2, column = 2, row = 1) %<>% fill_panel(q3, column = 2, row = 2) %<>% fill_panel(q4, column = 2, row = 3) figure1
library(ggplot2) library(gridExtra) x <- qplot(mpg, disp, data = mtcars) y <- qplot(hp, wt, data = mtcars) z <- qplot(qsec, wt, data = mtcars) grid.arrange(x, y, z) grid.arrange(x, y, z, nrow = 2, ncol = 2) plot.list <- list(x, y, z) do.call(grid.arrange, plot.list) args.list <- c(plot.list, "nrow = 2", "ncol = 2") do.call(grid.arrange, args.list)
args.list <- c(plot.list, 2,2) names(args.list) <- c("x", "y", "z", "nrow", "ncol")
require(ggplot2) require(gridExtra) plots <- lapply(1:11, function(.x) qplot(1:10,rnorm(10), main=paste("plot",.x))) params <- list(nrow=2, ncol=2) n <- with(params, nrow*ncol) pages <- length(plots) %/% n + as.logical(length(plots) %% n) groups <- split(seq_along(plots), gl(pages, n, length(plots))) pl <- lapply(names(groups), function(g) { do.call(arrangeGrob, c(plots[groups[[g]]], params, list(main=paste("page", g, "of", pages)))) }) class(pl) <- c("arrangelist", "ggplot", class(pl)) print.arrangelist = function(x, ...) lapply(x, function(.x) { if(dev.interactive()) dev.new() else grid.newpage() grid.draw(.x) }, ...) pl ggsave("multipage.pdf", pl)
# # # multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) { require(grid) plots <- c(list(...), plotlist) numPlots = length(plots) if (is.null(layout)) { layout <- matrix(seq(1, cols * ceiling(numPlots/cols)), ncol = cols, nrow = ceiling(numPlots/cols)) } if (numPlots==1) { print(plots[[1]]) } else { grid.newpage() pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout)))) for (i in 1:numPlots) { matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE)) print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col)) } } }
llama <- function(notused){ return("LLAMA LLAMA LLAMA") }
\name{llama} \alias{llama} \title{Llama llama llama} \usage{ llama(notused) } \arguments{ \item{notused}{A parameter that isn } \description{ More about llamas } \section{Llamas}{ Are they ungulates? } \section{Not llamas}{ This section is not about llamas. It is not very interesting. }
library(rgdal) Error in library(rgdal) : there is no package called ‘rgdal’
.... configure: error: proj_api.h not found in standard or given locations. ERROR: configuration failed for package ‘rgdal’ * removing ‘/home/eualin/R/i686-pc-linux-gnu-library/2.15/rgdal’ Warning in install.packages : installation of package ‘/home/eualin/Downloads/rgdal_0.8-5.tar.gz’ had non-zero exit status
configure: error: proj_api.h not found in standard or given locations.
$ apt-file search proj_api.h libproj-dev: /usr/include/proj_api.h
yum install gdal.x86_64 gdal-devel.x86_64 gdal-libs.x86_64 yum install proj.x86_64 proj-devel.x86_64 yum install proj-epsg.x86_64 proj-nad.x86_64
yum install gdal gdal-devel yum install proj yum install proj-nad yum install proj-epsg
R info: R version 3.0.2 (2013-09-25) -- "Frisbee Sailing" Linux info: Linux francois-K53SV 3.13.0-34-lowlatency
sudo apt-get install libudunits2-dev libgdal-dev libgeos-dev libproj-dev
sudo add-apt-repository -y ppa:ubuntugis/ubuntugis-unstable sudo apt update sudo apt install gdal-bin python-gdal python3-gdal libgdal1-dev
sudo apt-get install libudunits2-dev libgdal-dev libgeos-dev libproj-dev
foo <- list(a=1) exists( TRUE exists( FALSE foo$a [1] 1
foo <- list(a=42, b=NULL) foo is.null(foo[["a"]]) is.null(foo[["b"]]) is.null(foo[["c"]]) "a" %in% names(foo) "b" %in% names(foo) "c" %in% names(foo)
foo <- list(a=42, b=NULL) "bar$a" <- 42 ls() exists("foo$a") exists("bar$a")
> foo <- sapply(letters, function(x){runif(5)}, simplify = FALSE) > microbenchmark::microbenchmark( is.null(foo[[ exists( Unit: nanoseconds expr min lq mean median uq max neval cld "k" %in% names(foo) 467 933 1064.31 934 934 10730 100 a is.null(foo[["k"]]) 0 0 168.50 1 467 3266 100 a exists("k", where = foo) 6532 6998 7940.78 7232 7465 56917 100 b
x <- list(4, -1, NULL, NA, Inf, -Inf, NaN, T, x = 0, y = "", z = c(1,2,3)) lapply(x, function(el) print(length(el))) [1] 1 [1] 1 [1] 0 [1] 1 [1] 1 [1] 1 [1] 1 [1] 1 [1] 1 [1] 1 [1] 3
element.exists <- function(var, element) { tryCatch({ if(length(var[[element]]) > -1) return(T) }, error = function(e) { return(F) }) }
Element_Exists_Check = function( full_index_path ){ tryCatch({ len_element = length(full_index_path) exists_indicator = ifelse(len_element > 0, T, F) return(exists_indicator) }, error = function(e) { return(F) }) }
--- title: " " author: " " date: "2014" output: pdf_document: includes: in_header: naglowek.tex highlight: pygments toc: true toc_depth: 3 number_sections: true keep_tex: true ---
hello world \newpage ```{r, echo=FALSE} 1+1 ``` \pagebreak ```{r, echo=FALSE} plot(1:10) ```
mdtf <- melt(mtcars, id.vars = c("am", "cyl"), measure.vars = c("mpg", "hp", "wt")) ( res <- cast(mdtf, am + cyl ~ variable, mean) ) am cyl mpg hp wt 1 0 4 22.90000 84.66667 2.935000 2 0 6 19.12500 115.25000 3.388750 3 0 8 15.05000 194.16667 4.104083 4 1 4 28.07500 81.87500 2.042250 5 1 6 20.56667 131.66667 2.755000 6 1 8 15.40000 299.50000 3.370000
xtable(res) % latex table generated in R 2.13.0 by xtable 1.5-6 package % Fri Mar 25 09:40:12 2011 \begin{table}[ht] \begin{center} \begin{tabular}{rrrrrr} \hline & am & cyl & mpg & hp & wt \\ \hline 1 & 0.00 & 4.00 & 22.90 & 84.67 & 2.94 \\ 2 & 0.00 & 6.00 & 19.12 & 115.25 & 3.39 \\ 3 & 0.00 & 8.00 & 15.05 & 194.17 & 4.10 \\ 4 & 1.00 & 4.00 & 28.07 & 81.88 & 2.04 \\ 5 & 1.00 & 6.00 & 20.57 & 131.67 & 2.75 \\ 6 & 1.00 & 8.00 & 15.40 & 299.50 & 3.37 \\ \hline \end{tabular} \end{center} \end{table}
R> print(xtable(res), include.rownames=FALSE) % latex table generated in R 2.12.2 by xtable 1.5-6 package % Fri Mar 25 10:06:08 2011 \begin{table}[ht] \begin{center} \begin{tabular}{rrrrr} \hline am & cyl & mpg & hp & wt \\ \hline 0.00 & 4.00 & 22.90 & 84.67 & 2.94 \\ 0.00 & 6.00 & 19.12 & 115.25 & 3.39 \\ 0.00 & 8.00 & 15.05 & 194.17 & 4.10 \\ 1.00 & 4.00 & 28.07 & 81.88 & 2.04 \\ 1.00 & 6.00 & 20.57 & 131.67 & 2.75 \\ 1.00 & 8.00 & 15.40 & 299.50 & 3.37 \\ \hline \end{tabular} \end{center} \end{table}
lm(Petal.Length ~ -1 + Species, data=iris) iris.alt <- iris iris.alt$Species <- as.character(iris.alt$Species) lm(Petal.Length ~ -1 + Species, data=iris.alt)
x <- subset(iris, Species == levels(x$Species) x <- droplevels(x) levels(x$Species)
d <- data.frame(x = rnorm(20), f = sample(c("apples", "oranges", "grapes"), 20, replace = TRUE, prob = c(0.5, 0.25, 0.25))) d$f <- ordered(d$f, c("apples", "grapes", "oranges")) d[d$f >= "grapes", ]
library(dplyr) d <- tibble(x = sample(letters[1:10], 20, replace = TRUE)) id <- tibble(x_u = sort(unique(d$x))) %>% mutate(x_i = row_number()) di <- tibble(x_i = as.integer(factor(d$x))) d2 <- inner_join(di, id) %>% transmute(x = x_u) identical(d, d2)
> data(diamonds, package="ggplot2") > head(dm) Carat Cut Clarity Price Color 1 0.23 Ideal SI2 326 E 2 0.21 Premium SI1 326 E 3 0.23 Good VS1 327 E > tx = with(diamonds, tapply(X=Price, INDEX=list(Cut=Cut, Color=Color), FUN=mean)) > a = sort(1:diamonds(tx)[2], decreasing=T) > tx[,a] Color Cut J I H G F E D Fair 4976 4685 5136 4239 3827 3682 4291 Good 4574 5079 4276 4123 3496 3424 3405 Very Good 5104 5256 4535 3873 3779 3215 3470 Premium 6295 5946 5217 4501 4325 3539 3631 Ideal 4918 4452 3889 3721 3375 2598 2629
DF <- data.frame(x = c(1, 2, 3), y = c(0, 10, NA), z=c(NA, 33, 22))
DF <- data.frame(x = c(1, 2, 3,NA), y = c(1,0, 10, NA), z=c(43,NA, 33, NA))
DF <- data.frame(x = c(1, 2, 3), y = c(0, 10, NA), z=c(NA, 33, 22)) completeFun <- function(data, desiredCols) { completeVec <- complete.cases(data[, desiredCols]) return(data[completeVec, ]) } completeFun(DF, "y") completeFun(DF, c("y", "z"))
DF <- data.frame(x = c(1, 2, 3), y = c(0, 10, NA), z=c(NA, 33, 22)) DF[!is.na(DF$y),]
library(tidyr) DF %>% drop_na(y) x y z 1 1 0 NA 2 2 10 33
DF <- data.frame(x = c(1, 2, 3), y = c(0, 10, NA), z=c(NA, 33, 22)) subset(DF, !is.na(y))
library(readxl) read_excel("my-old-spreadsheet.xls") read_excel("my-new-spreadsheet.xlsx") read_excel("my-spreadsheet.xls", sheet = "data") read_excel("my-spreadsheet.xls", sheet = 2) read_excel("my-spreadsheet.xls", na = "NA")
coln <- function(x){y <- rbind(seq(1,ncol(x))); colnames(y) <- colnames(x) rownames(y) <- "col.number"; return(y)} data <- read.xlsx2("filename.xlsx", 1) coln(data) x <- 3 data <- read.xlsx2("filename.xlsx", 1, colClasses= c(rep("character", x), rep("numeric", ncol(data)-x+1)))
set.seed(51423) data.frame( str1 = sample(sprintf("%010d", 1:NN)), str2 = sample(sprintf("%09d", 1:NN)), str3 = replicate(NN, paste0(sample(LETTERS, sample(10:30, 1L), TRUE), collapse = "")), str4 = sprintf("%05d", sample(sample(1e5, 50L), NN, TRUE)), str5 = sample(replicate(17L, paste0(sample(LETTERS, sample(15:25, 1L), TRUE), collapse = "")), NN, TRUE), num1 = round(exp(rnorm(NN, mean = 6.5, sd = 1.5)), 2L), str6 = sample(c("Y","N"), NN, TRUE), str7 = sample(c("M","F"), NN, TRUE), str8 = sample(c("B","W"), NN, TRUE), int1 = ceiling(rexp(NN)), dat1 = sample(seq(from = as.Date("2005-12-31"), to = as.Date("2015-12-31"), by = "month"), NN, TRUE), dat2 = sample(seq(from = as.Date("2005-12-31"), to = as.Date("2015-12-31"), by = "month"), NN, TRUE), num2 = round(exp(rnorm(NN, mean = 6, sd = 1.5)), 2L), dat3 = sample(seq(from = as.Date("2015-06-01"), to = as.Date("2015-07-15"), by = "day"), NN, TRUE), num3 = (-1) ^ sample(2, NN, TRUE) * round(exp(rnorm(NN, mean = 6, sd = 1.5)), 2L) )
benchmark1k <- microbenchmark(times = 100L, xlsx = {xlsx::read.xlsx2(fl, sheetIndex=1); invisible(gc())}, openxlsx = {openxlsx::read.xlsx(fl); invisible(gc())}, readxl = {readxl::read_excel(fl); invisible(gc())}, gdata = {gdata::read.xls(fl); invisible(gc())})
library(RODBC) file.name <- "file.xls" sheet.name <- "Sheet Name" excel.connect <- odbcConnectExcel(file.name) dat <- sqlFetch(excel.connect, sheet.name, na.strings=c("","-")) odbcClose(excel.connect)
df.temp <- read.xlsx("filename.xlsx", 1, startRow=1, endRow=50) df.real <- read.xlsx2("filename.xlsx", 1, colClasses=as.vector(sapply(df.temp, mode)))
my_data <- read.table(file = "xxxxxx.xls", sep = "\t", header=TRUE)
library("readxl") my_data <- read_excel("xxxxx.xls") my_data <- read_excel("xxxxx.xlsx")
> a a b c 1 -0.2246894 -1.48167912 -1.65099363 2 0.5559320 -0.87898575 -0.15634590 3 1.8469466 -0.01487524 -0.53098215 4 -0.6875051 0.23880967 0.01824621 5 -0.6735163 0.75485292 0.44154092 > b a c 1 0.4287284 -0.3295925 2 0.5201492 0.3341251 3 -2.6355570 1.7916780 4 -1.3645337 1.3642276 5 -0.4954542 -0.6660001
> new a b c 1 -0.2246894 -1.48167912106676 -1.65099363 2 0.5559320 -0.878985746842256 -0.15634590 3 1.8469466 -0.0148752354840942 -0.53098215 4 -0.6875051 0.238809666690982 0.01824621 5 -0.6735163 0.754852923524198 0.44154092 6 0.4287284 NA -0.32959248 7 0.5201492 NA 0.33412510 8 -2.6355570 NA 1.79167801 9 -1.3645337 NA 1.36422764 10 -0.4954542 NA -0.66600006
> a <- data.frame(a=c(0,1,2), b=c(3,4,5), c=c(6,7,8)) > a a b c 1 0 3 6 2 1 4 7 3 2 5 8 > b <- data.frame(a=c(9,10,11), c=c(12,13,14)) > b a c 1 9 12 2 10 13 3 11 14 > b$b <- NA > b a c b 1 9 12 NA 2 10 13 NA 3 11 14 NA > new <- rbind(a,b) > new a b c 1 0 3 6 2 1 4 7 3 2 5 8 4 9 NA 12 5 10 NA 13 6 11 NA 14
fastmerge <- function(d1, d2) { d1.names <- names(d1) d2.names <- names(d2) d2.add <- setdiff(d1.names, d2.names) d1.add <- setdiff(d2.names, d1.names) if(length(d2.add) > 0) { for(i in 1:length(d2.add)) { d2[d2.add[i]] <- NA } } if(length(d1.add) > 0) { for(i in 1:length(d1.add)) { d1[d1.add[i]] <- NA } } return(rbind(d1, d2)) }
x <- structure(list(A = c(5, 3.5, 3.25, 4.25, 1.5 ), B = c(4.25, 4, 4, 4.5, 4.5 ), C = c(4.5, 2.5, 4, 2.25, 3 ) ), .Names = c("A", "B", "C"), class = "data.frame", row.names = c(NA, -5L) ) y<-c(A=5, B=4.25, C=4.5) x[1,]==y
> d <- data.frame(a=1:3, b=4:6, c=7:9) > d a b c 1 1 4 7 2 2 5 8 3 3 6 9 > d[1, ] a b c 1 1 4 7 > d[1, ][ a 1 1
x <- structure(list(A = c(5, 3.5, 3.25, 4.25, 1.5 ), B = c(4.25, 4, 4, 4.5, 4.5 ), C = c(4.5, 2.5, 4, 2.25, 3 ) ), .Names = c("A", "B", "C"), class = "data.frame", row.names = c(NA, -5L) ) subset(x, A ==5 & B==4.25 & C==4.5)
library(XML) library(plyr) names <- c("George Clooney", "Kevin Costner", "George Bush", "Amar Shanghavi") for(i in 1:length(names)) { url[i] = paste( }
library(shiny) reactive_df <- reactive({ data.frame(col1 = c(1,2,3), col2 = c(4,5,6)) })
isolate({ print(reactive_df()) print(reactive_df()$col1) }) col1 col2 1 1 4 2 2 5 3 3 6 [1] 1 2 3
isolate( reactive_df$col1 ) Error in reactive_df$col1 : object of type
N <- 1e6 d1 <- data.frame(x=sample(N,N), y1=rnorm(N)) d2 <- data.frame(x=sample(N,N), y2=rnorm(N))
d <- merge(d1,d2) library(plyr) d <- join(d1,d2) library(data.table) dt1 <- data.table(d1, key="x") dt2 <- data.table(d2, key="x") d <- data.frame( dt1[dt2,list(x,y1,y2=dt2$y2)] ) library(sqldf) sqldf() sqldf("create index ix1 on d1(x)") sqldf("create index ix2 on d2(x)") d <- sqldf("select * from d1 inner join d2 on d1.x=d2.x") sqldf()
DF1 = data.frame(a = c(1, 1, 2, 2), b = 1:4) DF2 = data.frame(b = c(1, 2, 3, 3, 4), c = letters[1:5]) merge(DF1, DF2) b a c 1 1 1 a 2 2 1 b 3 3 2 c 4 3 2 d 5 4 2 e DF1$c = DF2$c[match(DF1$b, DF2$b)] DF1$c [1] a b c e Levels: a b c d e > DF1 a b c 1 1 1 a 2 1 2 b 3 2 3 c 4 2 4 e
library(plyr) library(data.table) library(sqldf) set.seed(123) N <- 1e5 d1 <- data.frame(x=sample(N,N), y1=rnorm(N)) d2 <- data.frame(x=sample(N,N), y2=rnorm(N)) g1 <- sample(1:1000, N, replace = TRUE) g2<- sample(1:1000, N, replace = TRUE) d <- data.frame(d1, g1, g2) library(rbenchmark) benchmark(replications = 1, order = "elapsed", merge = merge(d1, d2), plyr = join(d1, d2), data.table = { dt1 <- data.table(d1, key = "x") dt2 <- data.table(d2, key = "x") data.frame( dt1[dt2,list(x,y1,y2=dt2$y2)] ) }, sqldf = sqldf(c("create index ix1 on d1(x)", "select * from main.d1 join d2 using(x)")) ) set.seed(123) N <- 1e5 g1 <- sample(1:1000, N, replace = TRUE) g2<- sample(1:1000, N, replace = TRUE) d <- data.frame(x=sample(N,N), y=rnorm(N), g1, g2) benchmark(replications = 1, order = "elapsed", aggregate = aggregate(d[c("x", "y")], d[c("g1", "g2")], mean), data.table = { dt <- data.table(d, key = "g1,g2") dt[, colMeans(cbind(x, y)), by = "g1,g2"] }, plyr = ddply(d, .(g1, g2), summarise, avx = mean(x), avy=mean(y)), sqldf = sqldf(c("create index ix on d(g1, g2)", "select g1, g2, avg(x), avg(y) from main.d group by g1, g2")) )
Joining by: x test replications elapsed relative user.self sys.self user.child sys.child 3 data.table 1 0.34 1.000000 0.31 0.01 NA NA 2 plyr 1 0.44 1.294118 0.39 0.02 NA NA 1 merge 1 1.17 3.441176 1.10 0.04 NA NA 4 sqldf 1 3.34 9.823529 3.24 0.04 NA NA
test replications elapsed relative user.self sys.self user.child sys.child 4 sqldf 1 2.81 1.000000 2.73 0.02 NA NA 1 aggregate 1 14.89 5.298932 14.89 0.00 NA NA 2 data.table 1 132.46 47.138790 131.70 0.08 NA NA 3 plyr 1 212.69 75.690391 211.57 0.56 NA NA
benchmark(replications = 1, order = "elapsed", aggregate = aggregate(d[c("x", "y")], d[c("g1", "g2")], mean), data.tableBad = { dt <- data.table(d, key = "g1,g2") dt[, colMeans(cbind(x, y)), by = "g1,g2"] }, data.tableGood = { dt <- data.table(d, key = "g1,g2") dt[, list(mean(x),mean(y)), by = "g1,g2"] }, plyr = ddply(d, .(g1, g2), summarise, avx = mean(x), avy=mean(y)), sqldf = sqldf(c("create index ix on d(g1, g2)", "select g1, g2, avg(x), avg(y) from main.d group by g1, g2")) ) test replications elapsed relative user.self sys.self 3 data.tableGood 1 0.15 1.000 0.16 0.00 5 sqldf 1 1.01 6.733 1.01 0.00 2 data.tableBad 1 1.63 10.867 1.61 0.01 1 aggregate 1 6.40 42.667 6.38 0.00 4 plyr 1 317.97 2119.800 265.12 51.05 packageVersion("data.table") packageVersion("plyr") packageVersion("sqldf") R.version.string
test replications elapsed relative user.self sys.self 4 data.tableBest 1 0.532 1.000000 0.488 0.020 7 sqldf 1 2.059 3.870301 2.041 0.008 3 data.tableBetter 1 9.580 18.007519 9.213 0.220 1 aggregate 1 14.864 27.939850 13.937 0.316 2 data.tableWorst 1 152.046 285.800752 150.173 0.556 6 plyrwithInternal 1 198.283 372.712406 189.391 7.665 5 plyr 1 225.726 424.296992 208.013 8.004
system.time({ d <- d1 d$y2 <- d2$y2[match(d1$x,d2$x)] })
test replications elapsed relative user.self sys.self 5 dplyr 1 0.25 1.00 0.25 0.00 3 data.tableGood 1 0.28 1.12 0.27 0.00 6 sqldf 1 0.58 2.32 0.57 0.00 2 data.tableBad 1 1.10 4.40 1.09 0.01 1 aggregate 1 4.79 19.16 4.73 0.02 4 plyr 1 186.70 746.80 152.11 30.27 packageVersion("data.table") [1] ‘1.8.10’ packageVersion("plyr") [1] ‘1.8’ packageVersion("sqldf") [1] ‘0.4.7’ packageVersion("dplyr") [1] ‘0.1.2’ R.version.string [1] "R version 3.0.2 (2013-09-25)"
dplyr = summarise(dt_dt, avx = mean(x), avy = mean(y))
test replications elapsed relative user.self sys.self 2 data.tableGood 1 0.02 1.0 0.02 0.00 3 dplyr 1 0.04 2.0 0.04 0.00 4 sqldf 1 0.46 23.0 0.46 0.00 1 aggregate 1 6.11 305.5 6.10 0.02
test replications elapsed relative user.self sys.self 2 data.tableGood 1 0.02 1 0.02 0.00 3 dplyr 1 0.02 1 0.02 0.00 4 sqldf 1 0.44 22 0.43 0.02 1 aggregate 1 6.14 307 6.10 0.01 packageVersion("data.table") [1] packageVersion("dplyr") [1]
test replications elapsed relative user.self sys.self 5 dplyr 1 0.01 1 0.02 0.00 3 data.tableGood 1 0.02 2 0.01 0.00 6 sqldf 1 0.47 47 0.46 0.00 1 aggregate 1 6.16 616 6.16 0.00 2 data.tableBad 1 15.45 1545 15.38 0.01 4 plyr 1 110.23 11023 90.46 19.52
N <- 1e8 g1 <- sample(1:50000, N, replace = TRUE) g2<- sample(1:50000, N, replace = TRUE) d <- data.frame(x=sample(N,N), y=rnorm(N), g1, g2)
test replications elapsed relative user.self sys.self 1 dplyr 1 14.88 1 6.24 7.52 2 data.tableGood 1 28.41 1 18.55 9.4
require(data.table) require(dplyr) require(rbenchmark) N <- 1e8 g1 <- sample(1:50000, N, replace = TRUE) g2 <- sample(1:50000, N, replace = TRUE) d <- data.frame(x=sample(N,N), y=rnorm(N), g1, g2) benchmark(replications = 5, order = "elapsed", data.table = { dt <- as.data.table(d) dt[, lapply(.SD, mean), by = "g1,g2"] }, dplyr_DF = d %.% group_by(g1, g2) %.% summarise(avx = mean(x), avy=mean(y)) )
test replications elapsed relative user.self sys.self 1 data.table 5 15.35 1.00 13.77 1.57 2 dplyr_DF 5 137.84 8.98 136.31 1.44
Outer join: merge(x = df1, y = df2, by = "CustomerId", all = TRUE) Left outer: merge(x = df1, y = df2, by = "CustomerId", all.x = TRUE) Right outer: merge(x = df1, y = df2, by = "CustomerId", all.y = TRUE) Cross join: merge(x = df1, y = df2, by = NULL)
library(lattice) hor <- c("214", "215", "216", "224", "211", "212", "213", "223", "226", "225") ver <- paste("DM1-", hor, sep="") nrowcol <- length(ver) cor <- matrix(runif(nrowcol*nrowcol, min=0.4), nrow=nrowcol, ncol=nrowcol, dimnames = list(hor, ver)) for (i in 1:nrowcol) cor[i,i] = 1 rgb.palette <- colorRampPalette(c("blue", "yellow"), space = "rgb") levelplot(cor, main="stage 12-14 array correlation matrix", xlab="", ylab="", col.regions=rgb.palette(120), cuts=100, at=seq(0,1,0.01))
library(ggplot2) library(reshape) z <- cor(mtcars) z.m <- melt(z) ggplot(z.m, aes(X1, X2, fill = value)) + geom_tile() + scale_fill_gradient(low = "blue", high = "yellow")
ggplot(z.m, aes(X1, X2, fill = value)) + geom_tile() + scale_fill_gradient2(low = "blue", high = "yellow")
library(corrplot) data(mtcars) M <- cor(mtcars) col1 <- colorRampPalette(c(" "cyan", " col2 <- colorRampPalette(c(" " col3 <- colorRampPalette(c("red", "white", "blue")) col4 <- colorRampPalette(c(" "cyan", " wb <- c("white","black") par(ask = TRUE) corrplot(M, method="number", col="black", addcolorlabel="no") corrplot(M, method="number") corrplot(M) corrplot(M, order ="AOE") corrplot(M, order ="AOE", addCoef.col="grey") corrplot(M, order="AOE", col=col1(20), cl.length=21,addCoef.col="grey") corrplot(M, order="AOE", col=col1(10),addCoef.col="grey") corrplot(M, order="AOE", col=col2(200)) corrplot(M, order="AOE", col=col2(200),addCoef.col="grey") corrplot(M, order="AOE", col=col2(20), cl.length=21,addCoef.col="grey") corrplot(M, order="AOE", col=col2(10),addCoef.col="grey") corrplot(M, order="AOE", col=col3(100)) corrplot(M, order="AOE", col=col3(10)) corrplot(M, method="color", col=col1(20), cl.length=21,order = "AOE", addCoef.col="grey") if(TRUE){ corrplot(M, method="square", col=col2(200),order = "AOE") corrplot(M, method="ellipse", col=col1(200),order = "AOE") corrplot(M, method="shade", col=col3(20),order = "AOE") corrplot(M, method="pie", order = "AOE") corrplot(M, col = wb, order="AOE", outline=TRUE, addcolorlabel="no") corrplot(M, col = wb, bg="gold2", order="AOE", addcolorlabel="no") }
library(plotrix) library(seriation) library(MASS) plotcor(cor(mtcars), mar=c(0.1, 4, 4, 0.1))
install.packages("corrr") library(corrr) mtcars %>% correlate() %>% rplot()
mtcars %>% correlate() %>% rearrange() %>% rplot(shape = 15)
mtcars %>% correlate() %>% rearrange() %>% shave() %>% rplot(shape = 15)
mtcars %>% correlate() %>% rearrange(absolute = FALSE) %>% rplot(shape = 15)
library(corrplot) M<-cor(mtcars) corrplot(M, method="circle")
install.packages("qtlcharts") library(qtlcharts) iplotCorr(mat=mtcars, group=mtcars$cyl, reorder=TRUE)
corr.mtcars <- cor(mtcars) ord <- order(corr.mtcars[1,]) xc <- corr.mtcars[ord, ord] colors <- c(" " plotcorr(xc, col=colors[5*xc + 6])
read.table(text = string, sep = ":", as.is = TRUE)$V2
library(gsubfn) strapplyc(string, ":(.*)", simplify = TRUE)
string <- c("G1:E001", "G2:E002", "G3:E003") stringr::str_extract(string = string, pattern = "E[0-9]+")
tstrsplit(string, ":")[[2]] [1] "E001" "E002" "E003"
Less_Than_8 = function(x) return(x < 8) for (i in 1:10) { print(i) stopifnot(Less_Than_8(i)) }
if(something == FALSE){ stop("error message to print) }
if(something == FALSE){ warning("error message to print) }
df <- data.frame(ID=11:13, FOO=c( foo <- data.frame(do.call(
require(reshape) > df <- data.frame(ID=11:13, FOO=c( > df ID FOO 1 11 a|b 2 12 b|c 3 13 x|y > df = transform(df, FOO = colsplit(FOO, split = "\\|", names = c( > df ID FOO.a FOO.b 1 11 a b 2 12 b c 3 13 x y
df <- data.frame(ID=11:13, FOO=c( separate(data = df, col = FOO, into = c("left", "right"), sep = "\\|") ID left right 1 11 a b 2 12 b c 3 13 x y
separate(data = df, col = FOO, into = c("left", "right"))
df <- data.frame(ID=11:13, FOO=c( library(splitstackshape) cSplit(df, "FOO", "|")
df <- data.frame(ID=11:13, FOO=c( BAR = c("A*B", "B*C", "C*D")) cSplit(df, c("FOO", "BAR"), c("|", "*"))
df <- data.frame(ID=11:13, FOO=c( cbind(df, read.table(text = as.character(df$FOO), sep = "|")) ID FOO V1 V2 1 11 a|b a b 2 12 b|c b c 3 13 x|y x y
> df = data.frame( + id=1:3, foo=c( + bar=c( > transform(df, test=do.call(rbind, strsplit(foo, id foo bar test.1 test.2 1 1 a|b p|q a b 2 2 b|c r|s b c 3 3 c|d s|t c d
> transform(df, lapply(list(foo,bar), + function(x)do.call(rbind, strsplit(x, id foo bar X1 X2 X1.1 X2.1 1 1 a|b p|q a b p q 2 2 b|c r|s b c r s 3 3 c|d s|t c d s t
> transform(df, lapply({l<-list(foo,bar);names(l)=c( + function(x)do.call(rbind, strsplit(x, id foo bar foo.1 foo.2 bar.1 bar.2 1 1 a|b p|q a b p q 2 2 b|c r|s b c r s 3 3 c|d s|t c d s t
set.seed(1) draws <- rnorm(100)^2 dens <- density(draws) plot(dens)
q75 <- quantile(draws, .75) q95 <- quantile(draws, .95)
x1 <- min(which(dens$x >= q75)) x2 <- max(which(dens$x < q95)) with(dens, polygon(x=c(x[c(x1,x1:x2,x2)]), y= c(0, y[x1:x2], 0), col="gray"))
dd <- with(dens,data.frame(x,y)) library(ggplot2) qplot(x,y,data=dd,geom="line")+ geom_ribbon(data=subset(dd,x>q75 & x<q95),aes(ymax=y),ymin=0, fill="red",colour=NA,alpha=0.5)
set.seed(1) draws <- rnorm(100)^2 dens <- density(draws) plot(dens) q2 <- 2 q65 <- 6.5 qn08 <- -0.8 qn02 <- -0.2 x1 <- min(which(dens$x >= q2)) x2 <- max(which(dens$x < q65)) x3 <- min(which(dens$x >= qn08)) x4 <- max(which(dens$x < qn02)) with(dens, polygon(x=c(x[c(x1,x1:x2,x2)]), y= c(0, y[x1:x2], 0), col="gray")) with(dens, polygon(x=c(x[c(x3,x3:x4,x4)]), y= c(0, y[x3:x4], 0), col="gray"))
set.seed(1) draws <- rnorm(100)^2 dens <- density(draws) d <- data.frame(x = dens$x, y = dens$y) shadePanel <- function(x,y,shadeLims){ panel.lines(x,y) m1 <- min(which(x >= shadeLims[1])) m2 <- max(which(x <= shadeLims[2])) tmp <- data.frame(x1 = x[c(m1,m1:m2,m2)], y1 = c(0,y[m1:m2],0)) panel.polygon(tmp$x1,tmp$y1,col = "blue") } xyplot(y~x,data = d, panel = shadePanel, shadeLims = c(1,3))
approxdens <- function(x) { dens <- density(x) f <- with(dens, approxfun(x, y)) f(x) }
library(tidyverse) library(RColorBrewer) set.seed(1) n <- 1e2 dt <- tibble(value = rnorm(n)^2) approxdens <- function(x) { dens <- density(x) f <- with(dens, approxfun(x, y)) f(x) } probs <- c(0.75, 0.95) dt <- dt %>% mutate(dy = approxdens(value), p = percent_rank(value), pcat = as.factor(cut(p, breaks = probs, include.lowest = TRUE))) ggplot(dt, aes(value, dy)) + geom_ribbon(aes(ymin = 0, ymax = dy, fill = pcat)) + geom_line() + scale_fill_brewer(guide = "none") + theme_bw() dt2 <- tibble(category = c(rep("A", n), rep("B", n)), value = c(rnorm(n)^2, rnorm(n, mean = 2))) dt2 <- dt2 %>% group_by(category) %>% mutate(dy = approxdens(value), p = percent_rank(value), pcat = as.factor(cut(p, breaks = probs, include.lowest = TRUE))) ggplot(dt2, aes(value, dy)) + geom_ribbon(aes(ymin = 0, ymax = dy, fill = pcat)) + geom_line() + facet_wrap(~ category, nrow = 2, scales = "fixed") + scale_fill_brewer(guide = "none") + theme_bw()
ccfsisims <- read.csv(file = "F:/Purdue University/RA_Position/PhD_ResearchandDissert/PhD_Draft/GTAP-CGE/GTAP_NewAggDatabase/NewFiles/GTAP_ConsIndex.csv", header=TRUE, sep=",", na.string="NA", dec=".", strip.white=TRUE) ccfsirsts <- as.data.frame(ccfsisims) ccfsirsts[6:24] <- sapply(ccfsirsts[6:24],as.numeric) ccfsirsts <- droplevels(ccfsirsts) ccfsirsts <- transform(ccfsirsts,sres=factor(sres,levels=unique(sres))) library(ggplot2) datamortur <- melt(ccfsirsts[ccfsirsts$region %in% c("TUR","MAR"), ]) datamortur1 <- datamortur[datamortur$variable %in% c("pFSI2"), ] datamortur2 <- datamortur1[datamortur1$sector %in% c("wht","gro","VegtFrut","osd","OthCrop","VegtOil","XPrFood"), ] datamortur3 <- subset(datamortur2, tradlib !="BASEDATA") allfsi.f <- datamortur3 fsi.wht <- allfsi.f[allfsi.f$sector %in% c("wht"), ] Figure29 <- ggplot(data=fsi.wht, aes(x=factor(sres),y=value,colour=factor(tradlib))) Figure29 + geom_line(aes(group=factor(tradlib),size=2)) + facet_grid(regionsFull~., scales="free_y", labeller=reg_labeller) + scale_colour_brewer(type = "div") + theme(axis.text.x = element_text(colour = ylab("FSI (%Change)") + theme(axis.text.y = element_text(colour = theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust = 0.5, face =
Figure29 + geom_line(aes(group=factor(tradlib)),size=1) + facet_grid(regionsFull~., scales="free_y") + scale_colour_brewer(type = "div") + theme(axis.text.x = element_text( colour = hjust = 0.5, vjust = 0.5),axis.title.x=element_blank()) + ylab("FSI (%Change)") + theme(axis.text.y = element_text(colour = axis.title.y = element_text(size = 12, hjust = 0.5, vjust = 0.2)) + theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust = 0.5, face =
Figure29 + geom_line(aes(group=factor(tradlib)),size=2) + facet_grid(regionsFull~., scales="free_y") + scale_colour_brewer(type = "div") + theme(axis.text.x = element_text(colour = size = 13, hjust = 0.5, vjust = 0.5),axis.title.x=element_blank()) + ylab("FSI (%Change)") + theme(axis.text.y = element_text(colour = axis.title.y = element_text(size = 12, hjust = 0.5, vjust = 0.2)) + theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust = 0.5, face =
df<-data.frame(x=rnorm(100),y=rnorm(100)) ggplot(df,aes(x=x,y=y))+geom_line(size=2)
ifelse(TRUE,c(1,2),c(3,4)) ifelse(FALSE,c(1,2),c(3,4))
> if(TRUE) c(1,2) else c(3,4) [1] 1 2 > if(FALSE) c(1,2) else c(3,4) [1] 3 4
ifelse(TRUE, a <- c(1,2), a <- c(3,4)) a ifelse(FALSE, a <- c(1,2), a <- c(3,4)) a
condition <- TRUE switch(2-condition, c(1, 2), c(3, 4))
a <- c(1,2) b <- c(3,4) get(ifelse(TRUE, "a", "b"))
R> data(iris) R> dput(iris$Petal.Length) c(1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.6, 1.4, 1.1, 1.2, 1.5, 1.3, 1.4, 1.7, 1.5, 1.7, 1.5, 1, 1.7, 1.9, 1.6, 1.6, 1.5, 1.4, 1.6, 1.6, 1.5, 1.5, 1.4, 1.5, 1.2, 1.3, 1.4, 1.3, 1.5, 1.3, 1.3, 1.3, 1.6, 1.9, 1.4, 1.6, 1.4, 1.5, 1.4, 4.7, 4.5, 4.9, 4, 4.6, 4.5, 4.7, 3.3, 4.6, 3.9, 3.5, 4.2, 4, 4.7, 3.6, 4.4, 4.5, 4.1, 4.5, 3.9, 4.8, 4, 4.9, 4.7, 4.3, 4.4, 4.8, 5, 4.5, 3.5, 3.8, 3.7, 3.9, 5.1, 4.5, 4.5, 4.7, 4.4, 4.1, 4, 4.4, 4.6, 4, 3.3, 4.2, 4.2, 4.2, 4.3, 3, 4.1, 6, 5.1, 5.9, 5.6, 5.8, 6.6, 4.5, 6.3, 5.8, 6.1, 5.1, 5.3, 5.5, 5, 5.1, 5.3, 5.5, 6.7, 6.9, 5, 5.7, 4.9, 6.7, 4.9, 5.7, 6, 4.8, 4.9, 5.6, 5.8, 6.1, 6.4, 5.6, 5.1, 5.6, 6.1, 5.6, 5.5, 4.8, 5.4, 5.6, 5.1, 5.1, 5.9, 5.7, 5.2, 5, 5.2, 5.4, 5.1) R> dput(levels(iris$Species)) c("setosa", "versicolor", "virginica")
R> site <- "http: R> query <- "num=10&min=100&max=200&col=2&base=10&format=plain&rnd=new" R> txt <- paste(site, query, sep="?") R> nums <- read.table(file=txt) R> nums V1 V2 1 165 143 2 107 118 3 103 132 4 191 100 5 138 185 R>
> df <- data.frame(A = runif(10), B = rnorm(10)) > A <- 1:10 > with(df, A + B) [1] 0.04334784 -0.40444686 1.99368816 0.13871605 -1.17734837 [6] 0.42473812 2.33014226 1.61690799 1.41901860 0.8699079
> df <- within(df, C <- rpois(10, lambda = 2)) > head(df) A B C 1 0.62635571 -0.5830079 1 2 0.04810539 -0.4525522 1 3 0.39706979 1.5966184 3 4 0.95802501 -0.8193090 2 5 0.76772541 -1.9450738 2 6 0.21335006 0.2113881 4
library(RGoogleDocs) ps <-readline(prompt="get the password in ") auth = getGoogleAuth("me@gmail.com", ps, service="wise") sheets.con <- getGoogleDocsConnection(auth) ts2=getWorksheets("Data Collection Repos",sheets.con) names(ts2) init.consent <-sheetAsMatrix(ts2$Sheet1,header=TRUE, as.data.frame=TRUE, trim=TRUE)
> df <- data.frame(x=rnorm(5),y=runif(5)) > names(df) <- 1:2 > df 1 2 1 -1.2035003 0.6989573 2 -1.2146266 0.8272276 3 0.3563335 0.0947696 4 -0.4372646 0.9765767 5 -0.9952423 0.6477714 > df$1 Error: unexpected numeric constant in "df$1" > df$`1` [1] -1.2035003 -1.2146266 0.3563335 -0.4372646 -0.9952423
> lm(`2`~`1`,data=df) Call: lm(formula = `2` ~ `1`, data = df) Coefficients: (Intercept) `1` 0.4087 -0.3440
> library(reshape) > df$z <- c(1,1,2,2,2) > recast(df,z~.,id.var="z") Aggregation requires fun.aggregate: length used as default z (all) 1 1 4 2 2 6 > recast(df,z~.,id.var="z")$(all) Error: unexpected > recast(df,z~.,id.var="z")$`(all)` Aggregation requires fun.aggregate: length used as default [1] 4 6
zz <- new.env() zz$foo <- c(1,2,3,4,5) changer <- function(blah) { blah$foo <- 5 } changer(zz) zz$foo
list_powers <- foreach(i = 1:100) %do% { lp <- x[i]^i return (lp) }
sales <- expand.grid(country = c( product = c(1, 2, 3)) sales$revenue <- rnorm(dim(sales)[1], mean=100, sd=10) > sales country product revenue 1 USA 1 108.45965 2 UK 1 97.07981 3 FR 1 99.66225 4 USA 2 100.34754 5 UK 2 87.12262 6 FR 2 112.86084 7 USA 3 95.87880 8 UK 3 96.43581 9 FR 3 94.59259
usd2eur <- 1.434 transform(sales, euro = revenue * usd2eur) > country product revenue euro 1 USA 1 108.45965 155.5311 2 UK 1 97.07981 139.2125 3 FR 1 99.66225 142.9157 ...
subset(sales, country == select = c( > product revenue 1 1 108.4597 4 2 100.3475
sqldf( WHERE country = "USA" \ AND product IN (1,2) > product revenue 1 1 108.4597 2 2 100.3475
sqldf( FROM sales \ GROUP BY country > country revenue 1 FR 307.1157 2 UK 280.6382 3 USA 304.6860
for(i in 1:nrow(df)){ if (df$column[i] == x) { df$column2[i] <- y or any other similiar code } }
foo <- list() foo[[1]] <- data.frame(a=1:5, b=11:15) foo[[2]] <- data.frame(a=101:105, b=111:115) foo[[3]] <- data.frame(a=200:210, b=300:310) do.call(rbind, foo)
> sapply(rnorm(100, 0, 1), round) [1] 1 1 0 1 1 -1 -2 0 2 2 -2 -1 0 1 -1 0 1 -1 0 -1 0 0 0 0 0 [26] 2 0 -1 -2 0 0 1 -1 1 5 1 -1 0 1 1 1 2 0 -1 1 -1 1 0 -1 1 [51] 2 1 1 -2 -1 0 -1 2 -1 1 -1 1 -1 0 -1 -2 1 1 0 -1 -1 1 1 2 0 [76] 0 0 0 -2 -1 1 1 -2 1 -1 1 1 1 0 0 0 -1 -3 0 -1 0 0 0 1 1 > sapply(rnorm(100, 0, 1), round(x, 2)) Error in match.fun(FUN) : object > sapply(rnorm(100, 0, 1), function(x) {round(x, 2)}) [1] -0.05 -1.74 -0.09 -1.23 0.69 -1.43 0.76 0.55 0.96 -0.47 -0.81 -0.47 [13] 0.27 0.32 0.47 -1.28 -1.44 -1.93 0.51 -0.82 -0.06 -1.41 1.23 -0.26 [25] 0.22 -0.04 -2.17 0.60 -0.10 -0.92 0.13 2.62 1.03 -1.33 -1.73 -0.08 [37] 0.45 -0.93 0.40 0.05 1.09 -1.23 -0.35 0.62 0.01 -1.08 1.70 -1.27 [49] 0.55 0.60 -1.46 1.08 -1.88 -0.15 0.21 0.06 0.53 -1.16 -2.13 -0.03 [61] 0.33 -1.07 0.98 0.62 -0.01 -0.53 -1.17 -0.28 -0.95 0.71 -0.58 -0.03 [73] -1.47 -0.75 -0.54 0.42 -1.63 0.05 -1.90 0.40 -0.01 0.14 -1.58 1.37 [85] -1.00 -0.90 1.69 -0.11 -2.19 -0.74 1.34 -0.75 -0.51 -0.99 -0.36 -1.63 [97] -0.98 0.61 1.01 0.55 > function() {print( function() {print( > a = function() {print( > a function() {print( > a() [1] "hello
N = 10000 l = numeric() for (i in seq(1:N)) { sim <- rnorm(1, 0, 1) l <- rbind(l, sim) }
N = 10000 l = numeric(N) for (i in seq(1:N)) { sim <- rnorm(1, 0, 1) l[i] <- sim }
> A X1 X2 X3 X4 y 1 0.96852363 0.33827107 0.261332257 0.62817021 1.6425326 2 0.08012755 0.69159828 0.087994158 0.93780481 0.9801304 3 0.10167545 0.38119304 0.865209832 0.16501662 0.4830873 4 0.06699458 0.41756415 0.258071616 0.34027775 0.7508766 ... > (f=paste("y ~",paste(names(A)[1:4],collapse=" + "))) [1] "y ~ X1 + X2 + X3 + X4" > lm(formula(f),data=A) Call: lm(formula = formula(f), data = A) Coefficients: (Intercept) X1 X2 X3 X4 0.78236 0.95406 -0.06738 -0.43686 -0.06644
condition <- runif(1) > 0.5 if(condition) x <- 1 else x <- 2
old.var <- as.numeric(levels(old.var))[as.numeric(old.var)]
> irisSL <- iris$Sepal.Length > str(irisSL) num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... > cut(irisSL, 10) [1] (5.02,5.38] (4.66,5.02] (4.66,5.02] (4.3,4.66] (4.66,5.02] (5.38,5.74] (4.3,4.66] (4.66,5.02] (4.3,4.66] (4.66,5.02] [11] (5.38,5.74] (4.66,5.02] (4.66,5.02] (4.3,4.66] (5.74,6.1] (5.38,5.74] (5.38,5.74] (5.02,5.38] (5.38,5.74] (5.02,5.38] [21] (5.38,5.74] (5.02,5.38] (4.3,4.66] (5.02,5.38] (4.66,5.02] (4.66,5.02] (4.66,5.02] (5.02,5.38] (5.02,5.38] (4.66,5.02] [31] (4.66,5.02] (5.38,5.74] (5.02,5.38] (5.38,5.74] (4.66,5.02] (4.66,5.02] (5.38,5.74] (4.66,5.02] (4.3,4.66] (5.02,5.38] [41] (4.66,5.02] (4.3,4.66] (4.3,4.66] (4.66,5.02] (5.02,5.38] (4.66,5.02] (5.02,5.38] (4.3,4.66] (5.02,5.38] (4.66,5.02] [51] (6.82,7.18] (6.1,6.46] (6.82,7.18] (5.38,5.74] (6.46,6.82] (5.38,5.74] (6.1,6.46] (4.66,5.02] (6.46,6.82] (5.02,5.38] [61] (4.66,5.02] (5.74,6.1] (5.74,6.1] (5.74,6.1] (5.38,5.74] (6.46,6.82] (5.38,5.74] (5.74,6.1] (6.1,6.46] (5.38,5.74] [71] (5.74,6.1] (5.74,6.1] (6.1,6.46] (5.74,6.1] (6.1,6.46] (6.46,6.82] (6.46,6.82] (6.46,6.82] (5.74,6.1] (5.38,5.74] [81] (5.38,5.74] (5.38,5.74] (5.74,6.1] (5.74,6.1] (5.38,5.74] (5.74,6.1] (6.46,6.82] (6.1,6.46] (5.38,5.74] (5.38,5.74] [91] (5.38,5.74] (5.74,6.1] (5.74,6.1] (4.66,5.02] (5.38,5.74] (5.38,5.74] (5.38,5.74] (6.1,6.46] (5.02,5.38] (5.38,5.74] [101] (6.1,6.46] (5.74,6.1] (6.82,7.18] (6.1,6.46] (6.46,6.82] (7.54,7.9] (4.66,5.02] (7.18,7.54] (6.46,6.82] (7.18,7.54] [111] (6.46,6.82] (6.1,6.46] (6.46,6.82] (5.38,5.74] (5.74,6.1] (6.1,6.46] (6.46,6.82] (7.54,7.9] (7.54,7.9] (5.74,6.1] [121] (6.82,7.18] (5.38,5.74] (7.54,7.9] (6.1,6.46] (6.46,6.82] (7.18,7.54] (6.1,6.46] (5.74,6.1] (6.1,6.46] (7.18,7.54] [131] (7.18,7.54] (7.54,7.9] (6.1,6.46] (6.1,6.46] (5.74,6.1] (7.54,7.9] (6.1,6.46] (6.1,6.46] (5.74,6.1] (6.82,7.18] [141] (6.46,6.82] (6.82,7.18] (5.74,6.1] (6.46,6.82] (6.46,6.82] (6.46,6.82] (6.1,6.46] (6.46,6.82] (6.1,6.46] (5.74,6.1] 10 Levels: (4.3,4.66] (4.66,5.02] (5.02,5.38] (5.38,5.74] (5.74,6.1] (6.1,6.46] (6.46,6.82] (6.82,7.18] ... (7.54,7.9]
interArray=function(X){ n=ncol(X) ind=expand.grid(1:n,1:n) return(X[,ind[,1]]*X[,ind[,2]]) } > X X1 X2 1 0.96852363 0.33827107 2 0.08012755 0.69159828 3 0.10167545 0.38119304 4 0.06699458 0.41756415 5 0.08187816 0.09805104 > interArray(X) X1 X2 X1.1 X2.1 1 0.938038022 0.327623524 0.327623524 0.114427316 2 0.006420424 0.055416073 0.055416073 0.478308177 3 0.010337897 0.038757974 0.038757974 0.145308137 4 0.004488274 0.027974536 0.027974536 0.174359821 5 0.006704033 0.008028239 0.008028239 0.009614007
NY.Capital <- state <- parameter <- eval(parse(text=paste(state, parameter, sep= [1] "Albany"
> set.seed(123) > rnorm(1) [1] -0.5604756 > rnorm(1) [1] -0.2301775 > set.seed(123) > rnorm(1) [1] -0.5604756
> .Internal(inspect(quote(a+2))) @867dc28 06 LANGSXP g0c0 [] @8436998 01 SYMSXP g1c0 [MARK,gp=0x4000] "+" @85768b0 01 SYMSXP g1c0 [MARK,NAM(2)] "a" @8d7bf48 14 REALSXP g0c1 [] (len=1, tl=0) 2
get.vars<-function(vars,data){ nl <- as.list(1L:ncol(data)) names(nl) <- names(data) vars <- eval(substitute(vars), nl, parent.frame()) data[,vars] } get.vars(c(cyl:hwy,class),mpg)
temp1=names(df) temp2=seq(1,length(temp1)) temp3=data.frame(temp1,temp2) names(temp3)=c("VAR","COL") return(temp3) rm(temp1,temp2,temp3)
theme(plot.title = element_text(size = 12, face = "bold"), legend.title=element_text(size=10), legend.text=element_text(size=9))
ggplot(mtcars, aes(disp, mpg, col=as.factor(cyl))) + geom_point() + theme_bw() + theme(legend.text=element_text(size=rel(0.5)))
suppressWarnings(as.numeric(c("1", "2", "X"))) [1] 1 2 NA
> library(taRifx) > x <- as.numeric(c("1", "2", "X")) Warning message: NAs introduced by coercion > y <- destring(c("1", "2", "X")) > y [1] 1 2 NA > x [1] 1 2 NA
as.num = function(x, na.strings = "NA") { stopifnot(is.character(x)) na = x %in% na.strings x[na] = 0 x = as.numeric(x) x[na] = NA_real_ x } as.num(c("1", "2", "X"), na.strings="X")
library(tidyverse) library(stringr) c("1", "2", "X") %>% stringr::str_extract_all("\\(?[0-9,.]+\\)?") %>% as.numeric()
df <- data.frame( g = rep(letters[1:2], 5), x = rnorm(10), y = rnorm(10) ) library(ggplot2) ggplot(df, aes(x, y, colour=g)) + geom_line(stat="identity") + theme(legend.position="bottom")
ggplot(df, aes(x, y, colour=g)) + geom_line(stat="identity") + theme(legend.position="bottom") + theme(legend.title=element_blank())
ggplot(df, aes(x, y, colour=g)) + geom_line(stat="identity") + theme(legend.position="bottom") + scale_color_discrete(name="")
ggplot(data = iris, aes(x = Sepal.Length, y=Sepal.Width, shape = Species, colour = Species)) + geom_point() + geom_text(aes(label = Species))
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species, shape = Species, label = Species)) + geom_point() + geom_text(show.legend = FALSE)
ggplot( data=iris, aes(x=Sepal.Length, y=Sepal.Width , colour = Species , shape = Species, label = Species ) , size=20 ) + geom_point()+ geom_text( show_guide = F )
.. geom_text(aes(label=Species), show_guide = F) + ..
[1] "3.1415926535897931159979634685441851615905761718750000000000000000000000000000000000000000000000000000"
x1 <- rnorm(50, 1, 1e-15) y1 <- rnorm(50, 1 + 1e-15, 1e-15) t.test(x1, y1) x2 <- rnorm(50, 0, 1e-15) y2 <- rnorm(50, 1e-15, 1e-15) t.test(x2, y2)
mpfr("3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825")
xy.df <- data.frame(x = runif(10), y = runif(10)) xy.list <- vector("list", nrow(xy.df)) for (i in 1:nrow(xy.df)) { xy.list[[i]] <- xy.df[i,] }
xy.list <- setNames(split(xy.df, seq(nrow(xy.df))), rownames(xy.df))
> df = data.frame(x=c( > df x y 1 a 3 2 b 2 3 c 1 ldf = lapply(as.list(1:dim(df)[1]), function(x) df[x[1],]) > ldf [[1]] x y 1 a 3 [[2]] x y 2 b 2 [[3]] x y 3 c 1 > ldf[[2]]$y [1] 2
by_row(x, function(v) list(v)[[1L]], .collate = "list")$.out
data("Batting", package = "Lahman") x <- Batting[1:10000, 1:10] library(benchr) library(purrr) benchmark( split = split(x, seq_len(.row_names_info(x, 2L))), mapply = .mapply(function(...) structure(list(...), class = "data.frame", row.names = 1L), x, NULL), purrr = by_row(x, function(v) list(v)[[1L]], .collate = "list")$.out )
Benchmark summary: Time units : milliseconds expr n.eval min lw.qu median mean up.qu max total relative split 100 983.0 1060.0 1130.0 1130.0 1180.0 1450 113000 34.3 mapply 100 826.0 894.0 963.0 972.0 1030.0 1320 97200 29.3 purrr 100 24.1 28.6 32.9 44.9 40.5 183 4490 1.0
using namespace Rcpp; List df2list(const DataFrame& x) { std::size_t nrows = x.rows(); std::size_t ncols = x.cols(); CharacterVector nms = x.names(); List res(no_init(nrows)); for (std::size_t i = 0; i < nrows; ++i) { List tmp(no_init(ncols)); for (std::size_t j = 0; j < ncols; ++j) { switch(TYPEOF(x[j])) { case INTSXP: { if (Rf_isFactor(x[j])) { IntegerVector t = as<IntegerVector>(x[j]); RObject t2 = wrap(t[i]); t2.attr("class") = "factor"; t2.attr("levels") = t.attr("levels"); tmp[j] = t2; } else { tmp[j] = as<IntegerVector>(x[j])[i]; } break; } case LGLSXP: { tmp[j] = as<LogicalVector>(x[j])[i]; break; } case CPLXSXP: { tmp[j] = as<ComplexVector>(x[j])[i]; break; } case REALSXP: { tmp[j] = as<NumericVector>(x[j])[i]; break; } case STRSXP: { tmp[j] = as<std::string>(as<CharacterVector>(x[j])[i]); break; } default: stop("Unsupported type } } tmp.attr("class") = "data.frame"; tmp.attr("row.names") = 1; tmp.attr("names") = nms; res[i] = tmp; } res.attr("names") = x.attr("row.names"); return res; }
benchmark( purrr = by_row(x, function(v) list(v)[[1L]], .collate = "list")$.out, rcpp = df2list(x) )
Benchmark summary: Time units : milliseconds expr n.eval min lw.qu median mean up.qu max total relative purrr 100 25.2 29.8 37.5 43.4 44.2 159.0 4340 1.1 rcpp 100 19.0 27.9 34.3 35.8 37.2 93.8 3580 1.0
library(data.table) library(microbenchmark) microbenchmark( split={dat1 <- split(dat, seq_len(nrow(dat)))}, setDF={dat2 <- lapply(seq_len(nrow(dat)), function(i) setDF(lapply(dat, "[", i)))}, attrDT={dat3 <- lapply(seq_len(nrow(dat)), function(i) { tmp <- lapply(dat, "[", i) attr(tmp, "class") <- c("data.table", "data.frame") setDF(tmp) })}, datList = {datL <- lapply(seq_len(nrow(dat)), function(i) lapply(dat, "[", i))}, times=20 )
Unit: milliseconds expr min lq mean median uq max neval split 861.8126 889.1849 973.5294 943.2288 1041.7206 1250.6150 20 setDF 459.0577 466.3432 511.2656 482.1943 500.6958 750.6635 20 attrDT 399.1999 409.6316 461.6454 422.5436 490.5620 717.6355 20 datList 192.1175 201.9896 241.4726 208.4535 246.4299 411.2097 20
dat <- vector("list", 50) for(i in 1:50) dat[[i]] <- iris dat <- setDF(rbindlist(dat))
flatten(by_row(xy.df, ..f = function(x) flatten_chr(x), .labels = FALSE))
Var1<-c("X1",X2","X3") Var2<-c("X1",X2","X3") Var3<-c("X1",X2","X3") Data<-cbind(Var1,Var2,Var3) ID Var1 Var2 Var3 1 X1 X2 X3 2 X4 X5 X6 3 X7 X8 X9
library(BBmisc) data$lists<-convertRowsToList(data[,2:4])
ID Var1 Var2 Var3 lists 1 X1 X2 X3 list("X1", "X2", X3") 2 X4 X5 X6 list("X4","X5", "X6") 3 X7 X8 X9 list("X7,"X8,"X9)
myfn <- function(row) { l <- as.list(row) return(l) } list_of_lists <- purrrlyr::by_row(df, myfn, .labels=FALSE)$.out
NewList2 <- lapply(NewList, function(x) x[,!is.na(x)])
library(dplyr) by_vs_am <- group_by(mtcars, vs, am) by_vs <- summarise(by_vs_am, n = n())
delay <- dplyr::summarise(by_tailnum, count = n(), dist = mean(distance, na.rm = TRUE), delay = mean(arr_delay, na.rm = TRUE))
library(dplyr) library(lazyeval) df <- data_frame(group = c(1, 2, 2, 3, 3, 3)) g <- "group" df %>% group_by_(g) %>% summarise_( n = n(), sum = interp(~sum(col, na.rm = TRUE), col = as.name(g)) )
df %>% group_by_(g) %>% summarise_( n = "n()", sum = interp(~sum(col, na.rm = TRUE), col = as.name(g)) )
Master_Data_AutoCorrelations<-Master_Data_lags %>% gather(key = "lag", value = "lag_value", -c(Stock,Date, Close)) %>% mutate(lag = str_sub(lag, start = 5) %>% as.numeric) %>% group_by(Stock, lag) %>% summarize( cor = cor(x = Close, y = lag_value, use = "pairwise.complete.obs"), cutoff_upper = 2/(n())^0.5, cutoff_lower = -2/(n())^0.5 )
x=1:7 y=1:7 df = data.frame(x=x,y=y) ggplot(df,aes(x,y))+geom_point()
for (i in 1:5) { ggplot(df,aes(x,y))+geom_point() }
for (i in 1:5) { print(ggplot(df,aes(x,y))+geom_point()) }
C:\R\R-2.10.1\bin\Rcmd.exe BATCH D:\mydocuments\mytest.r
SCHTASKS /Create /SC ONSTART /TN MyProgram /TR "R CMD BATCH --vanilla d:\path\to\script.R"
options(error = quote({dump.frames(to.file=TRUE); q()}))
I debugging. findLineNum() finds which line of which function corresponds to a particular line of source code; setBreakpoint() takes the output of findLineNum, and calls trace() to set a breakpoint there. These rely on having source reference debug information in the code. This is the default for code read by source(), but not for packages. To get the source references in package code, set the environment variable R_KEEP_PKG_SOURCE=yes, or within R, set options(keep.source.pkgs=TRUE), then install the package from source code. Read ?findLineNum for details on how to tell it to search within packages, rather than limiting the search to the global environment. For example, x <- " f <- function(a, b) { if (a > b) { a } else { b } }" eval(parse(text=x)) findLineNum("<text> This will print f step 2,3,2 in <environment: R_GlobalEnv> and you can use setBreakpoint("<text> to set a breakpoint there. There are still some limitations (and probably bugs) in the code; I be fixing thos
options(error = quote({ setwd( dump.frames("errorDump", to.file=TRUE, include.GlobalEnv=TRUE); sink(file="error.log"); dump.frames(); cat(attr(last.dump,"error.message")); cat( cat( traceback(2); sink(); q()}))
Error in callNonExistFunc() : could not find function "callNonExistFunc" Calls: test_multi_commodity_flow_cmd -> getExtendedConfigDF -> extendConfigDF Traceback: 3: extendConfigDF(info_df, data_dir = user_dir, dlevel = dlevel) at test_multi_commodity_flow.R 2: getExtendedConfigDF(config_file_path, out_dir, dlevel) at test_multi_commodity_flow.R 1: test_multi_commodity_flow_cmd(config_file_path = config_file_path, spot_file_path = spot_file_path, forward_file_path = forward_file_path, data_dir = "../", user_dir = "Output", sim_type = "spot", sim_scheme = "shape", sim_gran = "hourly", sim_adjust = "raw", nsim = 5, start_date = "2017-07-01", end_date = "2017-12-31", compute_averages = opt$compute_averages, compute_shapes = opt$compute_shapes, overwrite = opt$overwrite, nmonths = opt$nmonths, forward_regime = opt$fregime, ltfv_ratio = opt$ltfv_ratio, method = opt$method, dlevel = 0)
> mylist <- list(1:10, rnorm(25), letters[1:3]) > length (mylist) [1] 3
> df <- data.frame (matrix(0, ncol = 30, nrow = 2)) > typeof (df) [1] "list"
> mylist <- list(record1=c(1:10),record2=c(1:5),record3=c(1:2))
length(mylist[[1]]) [1] 10 length(mylist[["record1"]] [1] 10
> mylist <- list(A = c(1:3), B = c(4:6), C = c(7:9)) > mylist $A [1] 1 2 3 $B [1] 4 5 6 $C [1] 7 8 9 > unlist(mylist) A1 A2 A3 B1 B2 B3 C1 C2 C3 1 2 3 4 5 6 7 8 9 > length(unlist(mylist)) [1] 9
> sum(mylist) Error in sum(mylist) : invalid > sum(unlist(mylist)) [1] 45
set.seed(123) x <- rnorm(100) DF <- data.frame(x = x, y = 4 + (1.5*x) + rnorm(100, sd = 2), b = gl(5, 20)) head(DF) str(DF) m1 <- lm(y ~ x + b, data = DF) summary(m1)
DF <- within(DF, b <- relevel(b, ref = 3)) m2 <- lm(y ~ x + b, data = DF) summary(m2)
> coef(m1) (Intercept) x b2 b3 b4 b5 3.2903239 1.4358520 0.6296896 0.3698343 1.0357633 0.4666219 > coef(m2) (Intercept) x b1 b2 b4 b5 3.66015826 1.43585196 -0.36983433 0.25985529 0.66592898 0.09678759
lm( Sepal.Width ~ C(Species,contr.treatment(3, base=2)), data=iris )
contrasts(df$factorcol) <- contr.treatment(levels(df$factorcol), base=which(levels(df$factorcol) ==
numeric() logical() character() integer() double() raw() complex() vector( vector( vector( vector( vector( vector(
> v<-c(4,7,8) > v [1] 4 7 8 > x<-v[0] > length(x) [1] 0
Year <- c(rep(c("2006-07", "2007-08", "2008-09", "2009-10"), each = 4)) Category <- c(rep(c("A", "B", "C", "D"), times = 4)) Frequency <- c(168, 259, 226, 340, 216, 431, 319, 368, 423, 645, 234, 685, 166, 467, 274, 251) Data <- data.frame(Year, Category, Frequency) library(ggplot2) p <- qplot(Year, Frequency, data = Data, geom = "bar", fill = Category, theme_set(theme_bw())) p + geom_text(aes(label = Frequency), size = 3, hjust = 0.5, vjust = 3, position = "stack")
ggplot(Data, aes(x = Year, y = Frequency, fill = Category, label = Frequency)) + geom_bar(stat = "identity") + geom_text(size = 3, position = position_stack(vjust = 0.5))
library(ggplot2) library(plyr) Data <- ddply(Data, .(Year), transform, pos = cumsum(Frequency) - (0.5 * Frequency) ) p <- ggplot(Data, aes(x = Year, y = Frequency)) + geom_bar(aes(fill = Category), stat="identity") + geom_text(aes(label = Frequency, y = pos), size = 3)
library(grid) library(gridExtra) library(plyr) prop <- function(x) x/sum(x) Data <- ddply(Data,"Year",transform,Share=prop(Frequency)) totals <- ggplot(Data,aes(Year,Frequency)) + geom_bar(fill="darkseagreen",stat="identity") + xlab("") + labs(title = "Frequency totals in given Year") proportion <- ggplot(Data, aes(x=Year,y=Share, group=Category, colour=Category)) + geom_line() + scale_y_continuous(label=percent_format())+ theme(legend.position = "bottom") + labs(title = "Proportion of total Frequency accounted by each Category in given Year") grid.arrange(totals,proportion)
args <- commandArgs(trailingOnly = TRUE) rnorm(n=as.numeric(args[1]), mean=as.numeric(args[2]))
> Rscript myScript.R 5 100 [1] 98.46435 100.04626 99.44937 98.52910 100.78853
args <- commandArgs(TRUE) srcFile <- args[1] outFile <- paste0(make.names(date()), ".Rout") args <- args[-1] sink(outFile, split = TRUE) source(srcFile, echo = TRUE)
Rscript RscriptEcho.R myScript.R 5 100 [1] 98.46435 100.04626 99.44937 98.52910 100.78853
args=(commandArgs(TRUE)) if(length(args)==0){ print("No arguments supplied.") a = 1 b = c(1,1,1) }else{ for(i in 1:length(args)){ eval(parse(text=args[[i]])) } } print(a*2) print(b*3)
args <- commandArgs(trailingOnly = F) myargument <- args[length(args)] myargument <- sub("-","",myargument) print(myargument) q(save="no")
cat test.Rout > args <- commandArgs(trailingOnly = F) > myargument <- args[length(args)] > myargument <- sub("-","",myargument) > print(myargument) [1] "4" > q(save="no") > proc.time() user system elapsed 0.222 0.022 0.236
$ R CMD BATCH --help Usage: R CMD BATCH [options] infile [outfile] Run R non-interactively with input from infile and place output (stdout and stderr) to another file. If not given, the name of the output file is the one of the input file, with a possible and Options: -h, --help print short help message and exit -v, --version print version info and exit --no-timing do not report the timings -- end processing of options Further arguments starting with a as by default is started with See also help(
eval(parse(text=paste(commandArgs(trailingOnly = TRUE), collapse=";")))
defaults <- list(a=1, b=c(1,1,1)) for (arg in commandArgs(TRUE)) eval(parse(text=arg)) for (nm in names(defaults)) assign(nm, mget(nm, ifnotfound=list(defaults[[nm]]))[[1]]) print(a) print(b)
parseCommandArgs <- function(defaults=NULL, envir=globalenv()) { for (arg in commandArgs(TRUE)) eval(parse(text=arg), envir=envir) for (nm in names(defaults)) assign(nm, mget(nm, ifnotfound=list(defaults[[nm]]), envir=envir)[[1]], pos=envir) } parseCommandArgs(list(a=1, b=c(1,1,1)))
pichman <- read.csv(file="picman.txt", header=TRUE, sep="/t") hist <- as.numeric(pichman$WS)
table(pichman$WS) ws <- pichman$WS[pichman$WS!="Down" & pichman$WS!="NoData"]
> x = factor(4:8) > x [1] 4 5 6 7 8 Levels: 4 5 6 7 8 > as.numeric(x) [1] 1 2 3 4 5 > as.numeric(as.character(x)) [1] 4 5 6 7 8
> x <- factor(sample(4:8,10,replace=T)) > x [1] 6 4 8 6 7 6 8 5 8 4 Levels: 4 5 6 7 8 > as.numeric(levels(x))[x] [1] 6 4 8 6 7 6 8 5 8 4
> x <- factor(sample(4:8,500000,replace=T)) > system.time(as.numeric(as.character(x))) user system elapsed 0.11 0.00 0.11 > system.time(as.numeric(levels(x))[x]) user system elapsed 0 0 0
A <- c( B <- c(1,0,1,1,0) d <- data.frame(A, B) r <- with(d, which(B==0, arr.ind=TRUE)) newd <- d[-r, ]
ggplot(mpg, aes(cty, hwy)) + geom_point()+ theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)))
ggplot(mpg, aes(cty, hwy)) + geom_point() + xlab("\nYour_x_Label") + ylab("Your_y_Label\n")
output <- myfunc(foo) myfunc <- function(v1) { # return () }
myfunc <- function(v1) { deparse(substitute(v1)) } myfunc(foo) [1] "foo"
df.aree <- t(df.aree) df.aree <- as.data.frame(df.aree)
df.aree[c(1:5),c(1:5)] 10428 10760 12148 11865 name M231T3 M961T5 M960T6 M231T19 GS04.A 5.847557e+03 0.000000e+00 3.165891e+04 2.119232e+04 GS16.A 5.248690e+04 4.047780e+03 3.763850e+04 1.187454e+04 GS20.A 5.370910e+03 9.518396e+03 3.552036e+04 1.497956e+04 GS40.A 3.640794e+03 1.084391e+04 4.651735e+04 4.120606e+04
df.aree[c(1:5),c(1:5)] M231T3 M961T5 M960T6 M231T19 GS04.A 5.847557e+03 0.000000e+00 3.165891e+04 2.119232e+04 GS16.A 5.248690e+04 4.047780e+03 3.763850e+04 1.187454e+04 GS20.A 5.370910e+03 9.518396e+03 3.552036e+04 1.497956e+04 GS40.A 3.640794e+03 1.084391e+04 4.651735e+04 4.120606e+04 GS44.A 1.225938e+04 2.681887e+03 1.154924e+04 4.202394e+04
n <- df.aree$name df.aree <- as.data.frame(t(df.aree[,-1])) colnames(df.aree) <- n df.aree$myfactor <- factor(row.names(df.aree)) str(df.aree)
df.aree <- as.data.frame(t(df.aree)) colnames(df.aree) <- df.aree[1, ] df.aree <- df.aree[-1, ] df.aree$myfactor <- factor(row.names(df.aree))
library(data.table) data("mtcars") t_mtcars <- transpose(mtcars) colnames(t_mtcars) <- rownames(mtcars) rownames(t_mtcars) <- colnames(mtcars)
gm_mean = function(x, na.rm=TRUE){ exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x)) }
gm_mean = function(x, na.rm=TRUE, zero.propagate = FALSE){ if(any(x < 0, na.rm = TRUE)){ return(NaN) } if(zero.propagate){ if(any(x == 0, na.rm = TRUE)){ return(0) } exp(mean(log(x), na.rm = na.rm)) } else { exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x)) } }
geo_mean <- function(data) { log_data <- log(data) gm <- exp(mean(log_data[is.finite(log_data)])) return(gm) }
> Sys.setenv(LANG = "fr") > 2 + x Erreur : objet > Sys.setenv(LANG = "en") > 2 + x Error: object
defaults write org.R-project.R force.LANG en_US.UTF-8
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
> Sys.setlocale(locale = "ru_RU.utf8") [1] "LC_CTYPE=ru_RU.utf8;LC_NUMERIC=C;LC_TIME=ru_RU.utf8;LC_COLLATE=ru_RU.utf8;LC_MONETARY=ru_RU.utf8;LC_MESSAGES=en_IE.utf8;LC_PAPER=en_IE.utf8;LC_NAME=en_IE.utf8;LC_ADDRESS=en_IE.utf8;LC_TELEPHONE=en_IE.utf8;LC_MEASUREMENT=en_IE.utf8;LC_IDENTIFICATION=en_IE.utf8"
> Sys.setlocale("LC_MESSAGES", "en_US.utf8") [1] "en_US.utf8" > x[3] Error: object
> sessionInfo() R version 3.4.1 (2017-06-30) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 16.04.2 LTS
gg <- ggplot(data=mydata,aes(y=somevalues,x=datefield,color=category)) + layer(geom="line") gg + geom_vline(xintercept=mydata$datefield[120],linetype=4)
gg + geom_vline(xintercept=as.numeric(mydata$datefield[120]), linetype=4)
library("ggplot2") tmp <- data.frame(x=rep(seq(as.Date(0, origin="1970-01-01"), length=36, by="1 month"), 2), y=rnorm(72), category=gl(2,36)) p <- ggplot(tmp, aes(x, y, colour=category)) + layer(geom="line") + geom_vline(aes(xintercept=as.numeric(x[c(13, 24)])), linetype=4, colour="black") print(p)
qplot (Happiness.Level, Number.of.Answers, data=mydata, geom="histogram") + facet_grid (Location ~ .)
library(grid) p + theme(panel.spacing = unit(2, "lines"))
T999 <- runif(10, 100, 200) T888 <- runif(10, 200, 300) TY <- runif(10, 20, 30) df <- data.frame(T999, T888, TY) ggplot(data = df, aes(x=T999, y=TY, pointtype="T999")) + geom_point(size = 15, colour = "darkblue") + geom_point(data = df, aes(x=T888, y=TY), colour = theme(axis.text.x = element_text(size = 20), axis.title.x =element_text(size = 20), axis.text.y = element_text(size = 20)) + xlab("Txxx") + ylab("TY [°C]") + labs(title="temperatures", size = 15) + scale_colour_manual(labels = c("T999", "T888"), values = c("darkblue", "red")) + theme(legend.position="topright")
library(reshape2) dfm <- melt(df, id = "TY") ggplot(data = dfm, aes(x = TY, y = value, color = variable)) + geom_point(size=5) + labs(title = "Temperatures\n", x = "TY [°C]", y = "Txxx", color = "Legend Title\n") + scale_color_manual(labels = c("T999", "T888"), values = c("blue", "red")) + theme_bw() + theme(axis.text.x = element_text(size = 14), axis.title.x = element_text(size = 16), axis.text.y = element_text(size = 14), axis.title.x = element_text(size = 16), plot.title = element_text(size = 20, face = "bold", color = "darkgreen"))
ggplot(mtcars, aes(x=mpg, y=disp, size=hp, col=as.factor(cyl), shape=as.factor(gear))) + geom_point() + labs(x="miles per gallon", y="displacement", size="horsepower", col="
require(reshape2) dfm <- melt(df, id="TY") ggplot(data = dfm, aes(x=TY, y=value, color=variable)) + geom_point(size=5) + labs(title="Temperatures\n", x="TY [°C]", y="Txxx") + scale_color_manual(labels = c("T999", "T888"), values = c("blue", "red")) + theme_bw() + guides(color=guide_legend("my title"))
plot(1,1, main=expression( plot(1,1, main=expression(
plot(1:10,main=expression("This is a subscript "[2]))
a <- 10 plot(c(0,1), c(0,1), type = text(0.2, 0.6, cex = 1.5, bquote(paste(
title(xlab=expression("Nitrate Loading in kg ha"^-1*"yr"^-1))
> grep("[0-9]+", "aaa12xxx", value=TRUE) [1] "aaa12xxx"
> sub("[0-9]+", "ARGH!", "aaa12xxx") [1] "aaaARGH!xxx"
library(stringr) str_locate("aaa12xxx", "[0-9]+") str_extract("aaa12xxx", "[0-9]+")
txt <- "aaa12xxx" regmatches(txt,regexpr("[0-9]+",txt))
> sub(".*?([0-9]+).*", "\\1", "aaa12xx99",perl=TRUE) [1] "12"
substr("aaa12456xxx",test,test+attr(test,"match.length")-1)
library(gsubfn) x <- c("xy13", "ab 12 cd 34 xy") strapply(x, "\\d+", as.numeric)
temp = regexpr( substr("aaa12xxx", temp[1], temp[1]+attr(temp,"match.length")[1])
> txt <- c("aaa12xxx","xyz") > regmatches(txt,regexpr("[0-9]+",txt)) [1] "12" > gsub("[^0-9]", "", txt) [1] "12" "" > str_extract(txt, "[0-9]+") [1] "12" NA
extern "C" { __declspec(dllexport) void regex_match( const char **first, char **regexStr, int *_bool) { std::cmatch _cmatch; const char *last = *first + strlen(*first); std::regex rx(*regexStr); bool found = false; found = std::regex_match(*first,last,_cmatch, rx); *_bool = found; } __declspec(dllexport) void regex_search_results( const char **str, const char **regexStr, int *N, char **out ) { std::string s(*str); std::regex rgx(*regexStr); std::smatch m; int i=0; while(std::regex_search(s,m,rgx) && i < *N) { strcpy(out[i],m[0].str().c_str()); i++; s = m.suffix().str(); } } };
dyn.load("C:\\YourPath\\RegTest.dll") regex_match <- function(str,regstr) { .C("regex_match",x=as.character(str),y=as.character(regstr),z=as.logical(1))$z } regex_match("abc","a(b)c") regex_search_results <- function(x,y,n) { .C("regex_search_results",x=as.character(x),y=as.character(y),i=as.integer(n),z=character(n))$z } regex_search_results("aaa12aa34xxx", "[0-9]+", 5)
df2 <- aggregate(x ~ Year + Month, data = df1, sum)
df2 <- aggregate(x ~ Year + Month, data = df1, count)
set.seed(2) df1 <- data.frame(x = 1:20, Year = sample(2012:2014, 20, replace = TRUE), Month = sample(month.abb[1:3], 20, replace = TRUE))
aggregate(x ~ Year + Month, data = df, FUN = length)
df <- data.frame(x = rep(1:6, rep(c(1, 2, 3), 2)), year = 1993:2004, month = c(1, 1:11))
library(dplyr) count(df, year, month) df %>% count(year, month)
df %>% group_by(year, month) %>% summarise(number = n())
library(data.table) DT <- data.table(df) DT[, .N, by = list(year, month)]
df2 <- aggregate(df1[c("Count")], by=list(year=df1$year, month=df1$month), FUN=sum, na.rm=TRUE)
df<-data.frame(x=rep(1:6,rep(c(1,2,3),2)),year=1993:2004,month=c(1,1:11)) myAns<-as.data.frame(table(df[,c("year","month")]))
agg.mean <- aggregate(columnToMean ~ columnToAggregateOn1*columnToAggregateOn2, yourDataFrame, FUN="mean") agg.count <- aggregate(columnToMean ~ columnToAggregateOn1*columnToAggregateOn2, yourDataFrame, FUN="length") aggcount <- agg.count$columnToMean agg <- cbind(aggcount, agg.mean)
library(sqldf) sqldf("SELECT Year, Month, COUNT(*) as Freq FROM df1 GROUP BY Year, Month")
aggregate(paste(Year, Month) ~ Year + Month, data = df1, FUN = NROW)
aggregate(paste(Year, Month, Day) ~ Year + Month + Day, data = df1, FUN = NROW)
df1$Month: Feb x freq 1 2012 1 2 2013 1 3 2014 5 --------------------------------------------------------------- df1$Month: Jan x freq 1 2012 5 2 2013 2 --------------------------------------------------------------- df1$Month: Mar x freq 1 2012 1 2 2013 3 3 2014 2 >
lw<- function(){length(which(df$variable==someValue))} agg<- aggregate(Var1~Var2+Var3, data=df, FUN=lw) names(agg)<- c("Some", "Pretty", "Names", "Here") View(agg)
colfunc <- colorRampPalette(c("black", "white")) colfunc(10)
colfunc<-colorRampPalette(c("red","yellow","springgreen","royalblue")) plot(rep(1,50),col=(colfunc(50)), pch=19,cex=2)
color.gradient <- function(x, colors=c("red","yellow","green"), colsteps=100) { return( colorRampPalette(colors) (colsteps) [ findInterval(x, seq(min(x),max(x), length.out=colsteps)) ] ) } x <- c((1:100)^2, (100:1)^2) plot(x,col=color.gradient(x), pch=19,cex=2)
palette(gray.colors(10, 0.9, 0.4)) plot(rep(1,10),col=1:10,pch=19,cex=3))
fun1 <- function(x, column){ do.call("max", list(substitute(x[a], list(a = column)))) } fun2 <- function(x, column){ max(eval((substitute(x[a], list(a = column))))) } df <- data.frame(B = rnorm(10)) fun1(df, "B") fun2(df, "B")
df <- data.frame(A=1:10, B=2:11, C=3:12) fun1 <- function(x, column){ max(x[,column]) } fun1(df, "B") fun1(df, c("B","A"))
fun1 <- function(x, column, fn) { fn(x[,column]) } fun1(df, "B", max)
df <- data.frame(A=1:10, B=2:11, C=3:12) fun1 <- function(x, column){ max(x[[column]]) } fun1(df, "B")
foo <- function(df,col_name,col1,col2){ df$col_name <- df$col1 + df$col2 df } foo(dat,z,x,y)
new_column1 <- function(df,col_name,col1,col2){ df[[col_name]] <- df[[col1]] + df[[col2]] df } > new_column1(dat,"z","x","y") x y z 1 1 5 6 2 2 6 8 3 3 7 10 4 4 8 12
new_column2 <- function(df,col_name,col1,col2){ col_name <- deparse(substitute(col_name)) col1 <- deparse(substitute(col1)) col2 <- deparse(substitute(col2)) df[[col_name]] <- df[[col1]] + df[[col2]] df } > new_column2(dat,z,x,y) x y z 1 1 5 6 2 2 6 8 3 3 7 10 4 4 8 12
new_column3 <- function(df,col_name,expr){ col_name <- deparse(substitute(col_name)) df[[col_name]] <- eval(substitute(expr),df,parent.frame()) df }
> new_column3(dat,z,x+y) x y z 1 1 5 6 2 2 6 8 3 3 7 10 4 4 8 12 > new_column3(dat,z,x-y) x y z 1 1 5 -4 2 2 6 -4 3 3 7 -4 4 4 8 -4 > new_column3(dat,z,x*y) x y z 1 1 5 5 2 2 6 12 3 3 7 21 4 4 8 32
get.max <- function(column,data=NULL){ column<-eval(substitute(column),data, parent.frame()) max(column) }
> get.max(mpg,mtcars) [1] 33.9 > get.max(c(1,2,3,4,5)) [1] 5
df <- data.frame(A = 1:10, B = 2:11) fun <- function(x, column){ arg <- match.call() max(x[[arg$column]]) } fun(df, A) fun(df, B)
fun <- function(x, column) max(x[[match.call()$column]]) fun(df, typo) fun <- function(x, column){ arg <- match.call() if (is.null(x[[arg$column]])) stop("Wrong column name") max(x[[arg$column]]) } fun(df, typo) fun(df, A)
parameter <- c("market_value_LOCAL", "ep", "book_price", "sales_price", "dividend_yield", "beta", "TOTAL_RATING_SCORE", "ENVIRONMENT", "SOCIAL", "GOVERNANCE")
Q1_R1000_parameter <- Q1_R1000[order(Q1_R1000$parameter[X]), ]
set.seed(123) df <- data.frame( col1 = sample(5,10,repl=T) , col2 = sample(5,10,repl=T) , col3 = sample(5,10,repl=T) ) sort_list <- c("col3","col1") df[ do.call( order , df[ , match( sort_list , names(df) ) ] ) , ] col1 col2 col3 10 3 5 1 9 3 2 2 7 3 2 3 8 5 1 3 6 1 5 4 3 3 4 4 2 4 3 4 5 5 1 4 1 2 5 5 4 5 3 5
set.seed(1) dat <- data.frame(var1=round(rnorm(10)), var2=round(rnorm(10)), var3=round(rnorm(10))) param <- paste0("var",1:3) dat for(p in rev(param)){ dat <- dat[order(dat[,p]),] } dat
sort_list <- c("gear", "desc(mpg)") mtcars %>% arrange_(.dots = sort_list)
ChooseCorrectColumnName <- function(tbl, names) { for(n in names) { if (n %in% colnames(tbl)) { return(n) } } return(null) } then... cptcodefieldname = ChooseCorrectColumnName(file, c("CPT", "CPT.Code")) icdcodefieldname = ChooseCorrectColumnName(file, c("ICD.10.CM.Code", "ICD10.Code")) if (is.null(cptcodefieldname) || is.null(icdcodefieldname)) { print("Bad file column name") } file[cptcodefieldname] = as.character(file[cptcodefieldname]) file[icdcodefieldname] = as.character(file[icdcodefieldname]) for (i in 1:length(file[cptcodefieldname])) { cpt_valid_icds[file[cptcodefieldname][i]] <<- unique(c(cpt_valid_icds[[file[cptcodefieldname][i]]], file[icdcodefieldname][i])) }
A=mtcars[,which(conames(mtcars)==cols[1])] colnames(mtcars)[A]=cols[1]
> cols <- c("cyl", "am") > get(cols[1], mtcars) [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4
County; State; Year; Quarter; Segment; Sub-Segment; Sub-Sub-Segment; GDP; ... Ada County;NC;2009;4;FIRE;Financial;Banks;80.1; ... Ada County;NC;2010;1;FIRE;Financial;Banks;82.5; ... NC [Malformed row] [8.5 Mill rows]
County; State; Year; Quarter; Segment; GDP; ... Ada County;NC;2009;4;FIRE;80.1; ... Ada County;NC;2010;1;FIRE;82.5; ... [~200,000 rows]
file.in <- file( file.out <- file( line <- readLines(file.in, n=1) line.split <- strsplit(line, cat(line.split[[1]][1:5], line.split[[1]][8], sep = line <- readLines(file.in, n=1) while (length(line)) { line.split <- strsplit(line, if (length(line.split[[1]]) > 1) { if (line.split[[1]][3] == cat(line.split[[1]][1:5], line.split[[1]][8], sep = } } line<- readLines(file.in, n=1) } close(file.in) close(file.out)
file_in <- file("in.csv","r") file_out <- file("out.csv","a") x <- readLines(file_in, n=1) writeLines(x, file_out) B <- 300000 while(length(x)) { ind <- grep("^[^;]*;[^;]*; 20(09|10)", x) if (length(ind)) writeLines(x[ind], file_out) x <- readLines(file_in, n=B) } close(file_in) close(file_out)
County; State; Year; Quarter; Segment; Sub-Segment; Sub-Sub-Segment; GDP Ada County;NC;2009;4;FIRE;Financial;Banks;80.1 Ada County;NC;2010;1;FIRE;Financial;Banks;82.5 lol Ada County;NC;2013;1;FIRE;Financial;Banks;82.5
require(readr) f <- function(x, pos) subset(x, Year %in% c(2009, 2010)) read_csv2_chunked("testfile.csv", DataFrameCallback$new(f), chunk_size = 1)
County State Year Quarter Segment `Sub-Segment` `Sub-Sub-Segment` GDP * <chr> <chr> <int> <int> <chr> <chr> <chr> <dbl> 1 Ada County NC 2009 4 FIRE Financial Banks 801 2 Ada County NC 2010 1 FIRE Financial Banks 825
library(dplyr) filter(studentdata, Drink == "water")
Weight Response 1 Control 59 0.0 2 Treatment 90 0.8 3 Treatment 47 0.1 4 Treamment 106 0.1 5 Control 85 0.7 6 Treatment 73 0.6 7 Control 61 0.2
dnow <- data.frame(x=rnorm(100), y=runif(100)) head(dnow,4)
>data <- data <- read.csv("./data.csv", sep = ";", header=TRUE) >data LungCap Age Height Smoke Gender Caesarean 1 6.475 6 62.1 no male no 2 10.125 18 74.7 yes female no 3 9.550 16 69.7 no female yes 4 11.125 14 71.0 no male no 5 4.800 5 56.9 no male no 6 6.225 11 58.7 no female no 7 4.950 8 63.3 no male yes 8 7.325 11 70.4 no male no 9 8.875 15 70.5 no male no 10 6.800 11 59.2 no male no 11 6.900 12 59.3 no male no 12 6.100 13 59.4 no male no 13 6.110 14 59.5 no male no 14 6.120 15 59.6 no male no 15 6.130 16 59.7 no male no
> data[1:10,] LungCap Age Height Smoke Gender Caesarean 1 6.475 6 62.1 no male no 2 10.125 18 74.7 yes female no 3 9.550 16 69.7 no female yes 4 11.125 14 71.0 no male no 5 4.800 5 56.9 no male no 6 6.225 11 58.7 no female no 7 4.950 8 63.3 no male yes 8 7.325 11 70.4 no male no 9 8.875 15 70.5 no male no 10 6.800 11 59.2 no male no
> data[1:19,] LungCap Age Height Smoke Gender Caesarean 1 6.475 6 62.1 no male no 2 10.125 18 74.7 yes female no 3 9.550 16 69.7 no female yes 4 11.125 14 71.0 no male no 5 4.800 5 56.9 no male no 6 6.225 11 58.7 no female no 7 4.950 8 63.3 no male yes 8 7.325 11 70.4 no male no 9 8.875 15 70.5 no male no 10 6.800 11 59.2 no male no 11 6.900 12 59.3 no male no 12 6.100 13 59.4 no male no 13 6.110 14 59.5 no male no 14 6.120 15 59.6 no male no 15 6.130 16 59.7 no male no NA NA NA NA <NA> <NA> <NA> NA.1 NA NA NA <NA> <NA> <NA> NA.2 NA NA NA <NA> <NA> <NA> NA.3 NA NA NA <NA> <NA> <NA>
> head(data, 19) LungCap Age Height Smoke Gender Caesarean 1 6.475 6 62.1 no male no 2 10.125 18 74.7 yes female no 3 9.550 16 69.7 no female yes 4 11.125 14 71.0 no male no 5 4.800 5 56.9 no male no 6 6.225 11 58.7 no female no 7 4.950 8 63.3 no male yes 8 7.325 11 70.4 no male no 9 8.875 15 70.5 no male no 10 6.800 11 59.2 no male no 11 6.900 12 59.3 no male no 12 6.100 13 59.4 no male no 13 6.110 14 59.5 no male no 14 6.120 15 59.6 no male no 15 6.130 16 59.7 no male no
plot(1, type="n", xlab="", ylab="", xlim=c(0, 10), ylim=c(0, 10))
plot(NULL, xlim=c(0,1), ylim=c(0,1), ylab="y label", xlab="x lablel")
plot.new( ) plot.window( xlim=c(-5,5), ylim=c(-5,5) ) points( rnorm(100), rnorm(100) ) axis( side=1 )
plot(1:10, 1:10,xaxt="n",yaxt="n",bty="n",pch="",ylab="",xlab="", main="", sub="") mtext("eee", side = 3, line = -0.3, adj = 0.5) text(5, 10.4, "ddd") text(5, 7, "ccc")
R> qplot(hwy, cty, data = mpg) + facet_grid(. ~ manufacturer) + theme(strip.text.x = element_text(size = 8, colour = "orange", angle = 90))
vec <- c("a", "b", "c","c","c") vec[duplicated(vec) | duplicated(vec, fromLast=TRUE)]
> vec <- c("a", "b", "c","c","c") > vec[ duplicated(vec)] [1] "c" "c" > unique(vec[ duplicated(vec)]) [1] "c" > vec %in% unique(vec[ duplicated(vec)]) [1] FALSE FALSE TRUE TRUE TRUE
df <- data.frame(v=c(1,2,3),f=c( str(df) $ v: num 1 2 3 $ f: Factor w/ 3 levels "a","b","c": 1 2 3 df$f <- factor(df$f, levels=c( labels=c( levels(df$f) [1] "Treatment A: XYZ" "Treatment B: YZX" "Treatment C: ZYX"
> df <- data.frame(v=c(1,2,3),f=c( > attributes(df$f) $levels [1] "a" "b" "c" $class [1] "factor" > df$f <- factor(df$f, levels=c( + labels=c( > attributes(df$f) $levels [1] "Treatment A: XYZ" "Treatment B: YZX" "Treatment C: ZYX" $class [1] "factor"
install.packages("lfactors") require(lfactors) flips <- lfactor(c(0,1,1,0,0,1), levels=0:1, labels=c("Tails", "Heads")) flips == "Tails" flips == 0
options(repos=structure(c(CRAN="YOUR FAVORITE MIRROR")))
library(stargazer) N <- 200 df <- data.frame(x=runif(N, 0, 50)) df$y <- 10 + 2 * df$x + 4 * rt(N, 4) plot(df$x, df$y) model1 <- lm(y ~ x, data=df) stargazer(model1, title="A Model") ll <- function(params) { params <- as.list(params) return(sum(dt((df$y - params$const - params$beta*df$x) / params$scale, df=params$degrees.freedom, log=TRUE) - log(params$scale))) } model2 <- optim(par=c(const=5, beta=1, scale=3, degrees.freedom=5), lower=c(-Inf, -Inf, 0.1, 0.1), fn=ll, method="L-BFGS-B", control=list(fnscale=-1), hessian=TRUE) model2.coefs <- data.frame(coefficient=names(model2$par), value=as.numeric(model2$par), se=as.numeric(sqrt(diag(solve(-model2$hessian))))) stargazer(model2.coefs, title="Another Model", summary=FALSE)
model2.lm <- list() class(model2.lm) <- c(class(model2.lm), "lm") model2.lm$rank <- model1$rank model2.lm$coefficients <- model2$par names(model2.lm$coefficients)[1:2] <- names(model1$coefficients) model2.lm$fitted.values <- model2$par["const"] + model2$par["beta"]*df$x model2.lm$residuals <- df$y - model2.lm$fitted.values model2.lm$model <- df model2.lm$terms <- model1$terms summary(model2.lm)
stargazer(regressions, ... coef = list(... list of coefs...), se = list(... list of standard errors...), omit = c(sequence), covariate.labels = c("new names"), dep.var.labels.include = FALSE, notes.append=FALSE), file="")
model2.lm = lm(y ~ ., data.frame(y=runif(5), beta=runif(5), scale=runif(5), degrees.freedom=runif(5))) model2.lm$coefficients <- model2$par model2.lm$fitted.values <- model2$par["const"] + model2$par["beta"]*df$x model2.lm$residuals <- df$y - model2.lm$fitted.values stargazer(model2.lm, se = list(model2.coefs$se), summary=FALSE, type=
library(broom) library(xtable) xtable(tidy(model1)) xtable(tidy(model2))
Weekly SST data starts week centered on 3Jan1990 Nino1+2 Nino3 Nino34 Nino4 Week SST SSTA SST SSTA SST SSTA SST SSTA 03JAN1990 23.4-0.4 25.1-0.3 26.6 0.0 28.6 0.3 10JAN1990 23.4-0.8 25.2-0.3 26.6 0.1 28.6 0.3 17JAN1990 24.2-0.3 25.3-0.3 26.5-0.1 28.6 0.3
x <- read.fwf( file=url("http: skip=4, widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4)) head(x) V1 V2 V3 V4 V5 V6 V7 V8 V9 1 03JAN1990 23.4 -0.4 25.1 -0.3 26.6 0.0 28.6 0.3 2 10JAN1990 23.4 -0.8 25.2 -0.3 26.6 0.1 28.6 0.3 3 17JAN1990 24.2 -0.3 25.3 -0.3 26.5 -0.1 28.6 0.3 4 24JAN1990 24.4 -0.5 25.5 -0.4 26.5 -0.1 28.4 0.2 5 31JAN1990 25.1 -0.2 25.8 -0.2 26.7 0.1 28.4 0.2 6 07FEB1990 25.8 0.2 26.1 -0.1 26.8 0.1 28.4 0.3
library(readr) x <- read_fwf( file="http: skip=4, fwf_widths(c(12, 7, 4, 9, 4, 9, 4, 9, 4)))
df <- read.fwf( file=url("http: widths=c(-1, 9, -5, 4, 4, -5, 4, 4, -5, 4, 4, -5, 4, 4), skip=4 )
x <- readLines(con=url("http: x <- x[-(1:4)] mydata <- data.frame(var1 = substr(x, 1, 10), var2 = substr(x, 16, 19), var3 = substr(x, 20, 23), var4 = substr(x, 29, 32) )
library(data.table) library(stringi) col_ends <- list(beg = c(1, 10, 15, 19, 23, 28, 32, 36, 41, 45, 49, 54, 58), end = c(9, 14, 18, 22, 27, 31, 35, 40, 44, 48, 53, 57, 61)) data = fread( "http: header = FALSE, skip = 4L, sep = NULL )[, lapply(1:(length(col_ends$beg)), function(ii) stri_sub(V1, col_ends$beg[ii], col_ends$end[ii])) ][ , paste0("V", c(2, 5, 8, 11)) := NULL]
ww <- c(9, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4, 4) nd <- cumsum(ww) col_ends <- list(beg = c(1, nd[-length(nd)]+1L), end = nd)
col_ends <- list(beg = c(1, -10, 15, 19, -23, 28, 32, -36, 41, 45, -49, 54, 58), end = c(9, 14, 18, 22, 27, 31, 35, 40, 44, 48, 53, 57, 61))
cols <- gsub("\\s", "", sapply(1:(length(col_ends$beg)), function(ii) stri_sub(readLines(URL, n = 4L)[4L], col_ends$beg[ii]+1L, col_ends$end[ii]+1L))) cols <- cols[cols != ""]
\s[0-9]{2}[A-Z]{3}[0-9]{4}(\s{5}[0-9]+\.[0-9]+[ -][0-9]+\.[0-9]+){4}
j <- function() { for (i in 1:3) { cat(i, "\n") as.numeric(c("1", "NA")) }} j() options(warn=2) j()
x <- tryCatch({ warning("oops") }, warning=function(w) { message("handling warning: ", conditionMessage(w)) NA })
x <- tryCatch({ warning("oops") }, warning=function(w) { stop("converted from warning: ", conditionMessage(w)) })
withCallingHandlers({ warning("oops") 1 }, warning=function(w) { message("handled warning: ", conditionMessage(w)) invokeRestart("muffleWarning") })
df <- data.frame( id = 1:10, time = as.Date( Q3.2.1. = rnorm(10, 0, 1), Q3.2.2. = rnorm(10, 0, 1), Q3.2.3. = rnorm(10, 0, 1), Q3.3.1. = rnorm(10, 0, 1), Q3.3.2. = rnorm(10, 0, 1), Q3.3.3. = rnorm(10, 0, 1) ) id time Q3.2.1. Q3.2.2. Q3.2.3. Q3.3.1. Q3.3.2. Q3.3.3. 1 1 2009-01-01 -0.2059165 -0.29177677 -0.7107192 1.52718069 -0.4484351 -1.21550600 2 2 2009-01-02 -0.1981136 -1.19813815 1.1750200 -0.40380049 -1.8376094 1.03588482 3 3 2009-01-03 0.3514795 -0.27425539 1.1171712 -1.02641801 -2.0646661 -0.35353058 ...
id time loop_number Q3.2 Q3.3 1 1 2009-01-01 1 -0.20591649 1.52718069 2 2 2009-01-02 1 -0.19811357 -0.40380049 3 3 2009-01-03 1 0.35147949 -1.02641801 ... 11 1 2009-01-01 2 -0.29177677 -0.4484351 12 2 2009-01-02 2 -1.19813815 -1.8376094 13 3 2009-01-03 2 -0.27425539 -2.0646661 ... 21 1 2009-01-01 3 -0.71071921 -1.21550600 22 2 2009-01-02 3 1.17501999 1.03588482 23 3 2009-01-03 3 1.11717121 -0.35353058 ...
library(dplyr) library(tidyr) library(stringr) df %>% gather(loop_number, Q3.2, starts_with("Q3.2")) %>% mutate(loop_number = str_sub(loop_number,-2,-2)) %>% select(id, time, loop_number, Q3.2) id time loop_number Q3.2 1 1 2009-01-01 1 -0.20591649 2 2 2009-01-02 1 -0.19811357 3 3 2009-01-03 1 0.35147949 ... 29 9 2009-01-09 3 -0.58581232 30 10 2009-01-10 3 -2.33393981
df %>% gather(loop_number, Q3.2, starts_with("Q3.2")) %>% gather(loop_number, Q3.3, starts_with("Q3.3")) %>% mutate(loop_number = str_sub(loop_number,-2,-2)) id time loop_number Q3.2 Q3.3 1 1 2009-01-01 1 -0.20591649 1.52718069 2 2 2009-01-02 1 -0.19811357 -0.40380049 3 3 2009-01-03 1 0.35147949 -1.02641801 ... 89 9 2009-01-09 3 -0.58581232 -0.13187024 90 10 2009-01-10 3 -2.33393981 -0.48502131
df %>% gather(key, value, -id, -time) %>% extract(key, c("question", "loop_number"), "(Q.\\..)\\.(.)") %>% spread(question, value)
colnames(df) <- gsub("\\.(.{2})$", "_\\1", colnames(df)) colnames(df)[2] <- "Date" res <- reshape(df, idvar=c("id", "Date"), varying=3:8, direction="long", sep="_") row.names(res) <- 1:nrow(res) head(res)
library(tidyr) library(dplyr) colnames(df) <- gsub("\\.(.{2})$", "_\\1", colnames(df)) df %>% gather(loop_number, "Q3", starts_with("Q3")) %>% separate(loop_number,c("L1", "L2"), sep="_") %>% spread(L1, Q3) %>% select(-L2) %>% head()
require(data.table) melt(setDT(df), id=1:2, measure=patterns("^Q3.2", "^Q3.3"), value.name=c("Q3.2", "Q3.3"), variable.name="loop_number")
library(splitstackshape) merged.stack(df, id.vars = c("id", "time"), var.stubs = c("Q3.2.", "Q3.3."), sep = "var.stubs")
df %>% gather(question_number, value, starts_with("Q3.")) %>% mutate(loop_number = str_sub(question_number,-2,-2), question_number = str_sub(question_number,1,4)) %>% select(id, time, loop_number, question_number, value) %>% spread(key = question_number, value = value)
> head(corr.m) miRNA variable value 1 mmu-miR-532-3p pos 7 2 mmu-miR-1983 pos 75 3 mmu-miR-301a-3p pos 70 4 mmu-miR-96-5p pos 5 5 mmu-miR-139-5p pos 10 6 mmu-miR-5097 pos 47 ggplot(corr.m, aes(x=reorder(miRNA, value), y=value, fill=variable)) + geom_bar(stat="identity")
ggplot(corr.m, aes(x = reorder(miRNA, -value), y = value, fill = variable)) + geom_bar(stat = "identity")
> df <- data.frame(a=c(1,2,4,2),b=c(2,6,2,1),c=c(2.6,8.2,7.5,3)) > df a b c 1 1 2 2.6 2 2 6 8.2 3 4 2 7.5 4 2 1 3.0
unlist(df[1,]) a b c 1.0 2.0 2.6 is.vector(unlist(df[1,])) [1] TRUE
df_1 = data.frame(V1 = factor(11:15), V2 = 21:25) df_1[1,] %>% as.numeric() [1] 1 21
df_2 = data.frame(V1 = letters[1:5], V2 = 1:5) df_2[3,] %>% as.numeric() [1] 3 3 df_2[3,] %>% as.character() [1] "3" "3"
df_1$V1 = df_1$V1 %>% as.character() %>% as.numeric() df_2$V1 = df_2$V1 %>% as.character() df_1[1,] %>% as.numeric() [1] 11 21 df_2[3,] %>% as.character() [1] "c" "3"
PopStringFactory <- setRefClass( "PopString", fields = list( x = "character" ), methods = list( initialize = function(x) { x <<- x }, pop = function(n = 1) { if(nchar(x) == 0) { warning("Nothing to pop.") return("") } first <- substring(x, 1, n) x <<- substring(x, n + 1) first } ) ) x <- PopStringFactory$new("hello stackoverflow") x replicate(nchar(x$x), x$pop())
x <- str_sub(x, 2) str_sub(x, 2, str_length(x)) [1] "ello stackoverflow"
myStrings [[1]] [1] "hello stackoverflow" "h" "ello stackoverflow"
myStrings [[1]] [1] "hello stackoverflow" "h" "ello stackoverflow" [[2]] [1] "right back" "r" "ight back" [[3]] [1] "at yah" "a" "t yah"
myFirstStrings <- sapply(myStrings, "[", 2) myFirstStrings [1] "h" "r" "a" mySecondStrings <- sapply(myStrings, "[", 3) mySecondStrings [1] "ello stackoverflow" "ight back" "t yah"
sunPosition <- function(year, month, day, hour=12, min=0, sec=0, lat=46.5, long=6.5) { twopi <- 2 * pi deg2rad <- pi / 180 month.days <- c(0,31,28,31,30,31,30,31,31,30,31,30) day <- day + cumsum(month.days)[month] leapdays <- year %% 4 == 0 & (year %% 400 == 0 | year %% 100 != 0) & day >= 60 day[leapdays] <- day[leapdays] + 1 hour <- hour + min / 60 + sec / 3600 delta <- year - 1949 leap <- trunc(delta / 4) jd <- 32916.5 + delta * 365 + leap + day + hour / 24 time <- jd - 51545. mnlong <- 280.460 + .9856474 * time mnlong <- mnlong %% 360 mnlong[mnlong < 0] <- mnlong[mnlong < 0] + 360 mnanom <- 357.528 + .9856003 * time mnanom <- mnanom %% 360 mnanom[mnanom < 0] <- mnanom[mnanom < 0] + 360 mnanom <- mnanom * deg2rad eclong <- mnlong + 1.915 * sin(mnanom) + 0.020 * sin(2 * mnanom) eclong <- eclong %% 360 eclong[eclong < 0] <- eclong[eclong < 0] + 360 oblqec <- 23.429 - 0.0000004 * time eclong <- eclong * deg2rad oblqec <- oblqec * deg2rad num <- cos(oblqec) * sin(eclong) den <- cos(eclong) ra <- atan(num / den) ra[den < 0] <- ra[den < 0] + pi ra[den >= 0 & num < 0] <- ra[den >= 0 & num < 0] + twopi dec <- asin(sin(oblqec) * sin(eclong)) gmst <- 6.697375 + .0657098242 * time + hour gmst <- gmst %% 24 gmst[gmst < 0] <- gmst[gmst < 0] + 24. lmst <- gmst + long / 15. lmst <- lmst %% 24. lmst[lmst < 0] <- lmst[lmst < 0] + 24. lmst <- lmst * 15. * deg2rad ha <- lmst - ra ha[ha < -pi] <- ha[ha < -pi] + twopi ha[ha > pi] <- ha[ha > pi] - twopi lat <- lat * deg2rad el <- asin(sin(dec) * sin(lat) + cos(dec) * cos(lat) * cos(ha)) az <- asin(-cos(dec) * sin(ha) / cos(el)) elc <- asin(sin(dec) / sin(lat)) az[el >= elc] <- pi - az[el >= elc] az[el <= elc & ha > 0] <- az[el <= elc & ha > 0] + twopi el <- el / deg2rad az <- az / deg2rad lat <- lat / deg2rad return(list(elevation=el, azimuth=az)) }
> sunPosition(2012,12,22,12,0,0,-41,0) $elevation [1] 72.42113 $azimuth [1] 180.9211 > sunPosition(2012,12,22,12,0,0,-3,0) $elevation [1] 69.57493 $azimuth [1] -0.79713 Warning message: In asin(sin(dec)/sin(lat)) : NaNs produced > sunPosition(2012,12,22,12,0,0,3,0) $elevation [1] 63.57538 $azimuth [1] -0.6250971 Warning message: In asin(sin(dec)/sin(lat)) : NaNs produced > sunPosition(2012,12,22,12,0,0,41,0) $elevation [1] 25.57642 $azimuth [1] 180.3084
el <- asin(sin(dec) * sin(lat) + cos(dec) * cos(lat) * cos(ha)) az <- asin(-cos(dec) * sin(ha) / cos(el)) elc <- asin(sin(dec) / sin(lat)) az[el >= elc] <- pi - az[el >= elc] az[el <= elc & ha > 0] <- az[el <= elc & ha > 0] + twopi
az <- atan(sin(ha) / (cos(ha) * sin(lat) - tan(dec) * cos(lat)))
elc <- asin(sin(dec) / sin(lat)) az[el >= elc] <- pi - az[el >= elc] az[el <= elc & ha > 0] <- az[el <= elc & ha > 0] + twopi
cosAzPos <- (0 <= sin(dec) - sin(el) * sin(lat)) sinAzNeg <- (sin(az) < 0) az[cosAzPos & sinAzNeg] <- az[cosAzPos & sinAzNeg] + twopi az[!cosAzPos] <- pi - az[!cosAzPos]
testPts <- data.frame(lat = c(-41,-3,3, 41), long = c(0, 0, 0, 0)) NOAA <- data.frame(elevNOAA = c(72.44, 69.57, 63.57, 25.6), azNOAA = c(359.09, 180.79, 180.62, 180.3)) sunPos <- sunPosition(year = 2012, month = 12, day = 22, hour = 12, min = 0, sec = 0, lat = testPts$lat, long = testPts$long) cbind(testPts, NOAA, sunPos)
leapdays <- year %% 4 == 0 & (year %% 400 == 0 | year %% 100 != 0) & day >= 60 & !(month==2 & day==60) oblqec <- 23.439 - 0.0000004 * time
sunPosition <- function(year, month, day, hour=12, min=0, sec=0, lat=46.5, long=6.5) { twopi <- 2 * pi deg2rad <- pi / 180 month.days <- c(0,31,28,31,30,31,30,31,31,30,31,30) day <- day + cumsum(month.days)[month] leapdays <- year %% 4 == 0 & (year %% 400 == 0 | year %% 100 != 0) & day >= 60 & !(month==2 & day==60) day[leapdays] <- day[leapdays] + 1 hour <- hour + min / 60 + sec / 3600 delta <- year - 1949 leap <- trunc(delta / 4) jd <- 32916.5 + delta * 365 + leap + day + hour / 24 time <- jd - 51545. mnlong <- 280.460 + .9856474 * time mnlong <- mnlong %% 360 mnlong[mnlong < 0] <- mnlong[mnlong < 0] + 360 mnanom <- 357.528 + .9856003 * time mnanom <- mnanom %% 360 mnanom[mnanom < 0] <- mnanom[mnanom < 0] + 360 mnanom <- mnanom * deg2rad eclong <- mnlong + 1.915 * sin(mnanom) + 0.020 * sin(2 * mnanom) eclong <- eclong %% 360 eclong[eclong < 0] <- eclong[eclong < 0] + 360 oblqec <- 23.439 - 0.0000004 * time eclong <- eclong * deg2rad oblqec <- oblqec * deg2rad num <- cos(oblqec) * sin(eclong) den <- cos(eclong) ra <- atan(num / den) ra[den < 0] <- ra[den < 0] + pi ra[den >= 0 & num < 0] <- ra[den >= 0 & num < 0] + twopi dec <- asin(sin(oblqec) * sin(eclong)) gmst <- 6.697375 + .0657098242 * time + hour gmst <- gmst %% 24 gmst[gmst < 0] <- gmst[gmst < 0] + 24. lmst <- gmst + long / 15. lmst <- lmst %% 24. lmst[lmst < 0] <- lmst[lmst < 0] + 24. lmst <- lmst * 15. * deg2rad ha <- lmst - ra ha[ha < -pi] <- ha[ha < -pi] + twopi ha[ha > pi] <- ha[ha > pi] - twopi lat <- lat * deg2rad el <- asin(sin(dec) * sin(lat) + cos(dec) * cos(lat) * cos(ha)) az <- asin(-cos(dec) * sin(ha) / cos(el)) cosAzPos <- (0 <= sin(dec) - sin(el) * sin(lat)) sinAzNeg <- (sin(az) < 0) az[cosAzPos & sinAzNeg] <- az[cosAzPos & sinAzNeg] + twopi az[!cosAzPos] <- pi - az[!cosAzPos] el <- el / deg2rad az <- az / deg2rad lat <- lat / deg2rad return(list(elevation=el, azimuth=az)) }
zenithAngle <- acos(sin(lat) * sin(dec) + cos(lat) * cos(dec) * cos(ha)) az <- acos(((sin(lat) * cos(zenithAngle)) - sin(dec)) / (cos(lat) * sin(zenithAngle))) rm(zenithAngle) el <- asin(sin(dec) * sin(lat) + cos(dec) * cos(lat) * cos(ha)) el <- el / deg2rad az <- az / deg2rad lat <- lat / deg2rad if (ha > 0) az <- az + 180 else az <- 540 - az az <- az %% 360 return(list(elevation=el, azimuth=az))
hour <- seq(from = 0, to = 23, by = 0.5) azimuth <- data.frame(hour = hour) az41S <- apply(azimuth, 1, function(x) sunPosition(2012,12,22,x,0,0,-41,0)$azimuth) az03S <- apply(azimuth, 1, function(x) sunPosition(2012,12,22,x,0,0,-03,0)$azimuth) az03N <- apply(azimuth, 1, function(x) sunPosition(2012,12,22,x,0,0,03,0)$azimuth) az41N <- apply(azimuth, 1, function(x) sunPosition(2012,12,22,x,0,0,41,0)$azimuth) azimuth <- cbind(azimuth, az41S, az03S, az41N, az03N) rm(az41S, az03S, az41N, az03N) library(ggplot2) azimuth.plot <- melt(data = azimuth, id.vars = "hour") ggplot(aes(x = hour, y = value, color = variable), data = azimuth.plot) + geom_line(size = 2) + geom_vline(xintercept = 12) + facet_wrap(~ variable)
astronomersAlmanacTime <- function(x) { origin <- as.POSIXct("2000-01-01 12:00:00") as.numeric(difftime(x, origin, units = "days")) } hourOfDay <- function(x) { x <- as.POSIXlt(x) with(x, hour + min / 60 + sec / 3600) } degreesToRadians <- function(degrees) { degrees * pi / 180 } radiansToDegrees <- function(radians) { radians * 180 / pi } meanLongitudeDegrees <- function(time) { (280.460 + 0.9856474 * time) %% 360 } meanAnomalyRadians <- function(time) { degreesToRadians((357.528 + 0.9856003 * time) %% 360) } eclipticLongitudeRadians <- function(mnlong, mnanom) { degreesToRadians( (mnlong + 1.915 * sin(mnanom) + 0.020 * sin(2 * mnanom)) %% 360 ) } eclipticObliquityRadians <- function(time) { degreesToRadians(23.439 - 0.0000004 * time) } rightAscensionRadians <- function(oblqec, eclong) { num <- cos(oblqec) * sin(eclong) den <- cos(eclong) ra <- atan(num / den) ra[den < 0] <- ra[den < 0] + pi ra[den >= 0 & num < 0] <- ra[den >= 0 & num < 0] + 2 * pi ra } rightDeclinationRadians <- function(oblqec, eclong) { asin(sin(oblqec) * sin(eclong)) } greenwichMeanSiderealTimeHours <- function(time, hour) { (6.697375 + 0.0657098242 * time + hour) %% 24 } localMeanSiderealTimeRadians <- function(gmst, long) { degreesToRadians(15 * ((gmst + long / 15) %% 24)) } hourAngleRadians <- function(lmst, ra) { ((lmst - ra + pi) %% (2 * pi)) - pi } elevationRadians <- function(lat, dec, ha) { asin(sin(dec) * sin(lat) + cos(dec) * cos(lat) * cos(ha)) } solarAzimuthRadiansJosh <- function(lat, dec, ha, el) { az <- asin(-cos(dec) * sin(ha) / cos(el)) cosAzPos <- (0 <= sin(dec) - sin(el) * sin(lat)) sinAzNeg <- (sin(az) < 0) az[cosAzPos & sinAzNeg] <- az[cosAzPos & sinAzNeg] + 2 * pi az[!cosAzPos] <- pi - az[!cosAzPos] az } solarAzimuthRadiansCharlie <- function(lat, dec, ha) { zenithAngle <- acos(sin(lat) * sin(dec) + cos(lat) * cos(dec) * cos(ha)) az <- acos((sin(lat) * cos(zenithAngle) - sin(dec)) / (cos(lat) * sin(zenithAngle))) ifelse(ha > 0, az + pi, 3 * pi - az) %% (2 * pi) } sunPosition <- function(when = Sys.time(), format, lat = 46.5, long = 6.5) { if(is.character(when)) when <- strptime(when, format) when <- lubridate::with_tz(when, "UTC") time <- astronomersAlmanacTime(when) hour <- hourOfDay(when) mnlong <- meanLongitudeDegrees(time) mnanom <- meanAnomalyRadians(time) eclong <- eclipticLongitudeRadians(mnlong, mnanom) oblqec <- eclipticObliquityRadians(time) ra <- rightAscensionRadians(oblqec, eclong) dec <- rightDeclinationRadians(oblqec, eclong) gmst <- greenwichMeanSiderealTimeHours(time, hour) lmst <- localMeanSiderealTimeRadians(gmst, long) ha <- hourAngleRadians(lmst, ra) lat <- degreesToRadians(lat) el <- elevationRadians(lat, dec, ha) azJ <- solarAzimuthRadiansJosh(lat, dec, ha, el) azC <- solarAzimuthRadiansCharlie(lat, dec, ha) data.frame( elevation = radiansToDegrees(el), azimuthJ = radiansToDegrees(azJ), azimuthC = radiansToDegrees(azC) ) }
astronomers_almanac_time <- function(x) { origin <- as.POSIXct("2000-01-01 12:00:00") as.numeric(difftime(x, origin, units = "days")) } hour_of_day <- function(x) { x <- as.POSIXlt(x) with(x, hour + min / 60 + sec / 3600) }
sunPosition <- function(when = Sys.time(), format, lat=46.5, long=6.5) { twopi <- 2 * pi deg2rad <- pi / 180 if(is.character(when)) when <- strptime(when, format) time <- astronomers_almanac_time(when) hour <- hour_of_day(when)
def sunPosition(lat=46.5, long=6.5): lat_rad = math.radians(lat) day = time.gmtime().tm_yday hour = time.gmtime().tm_hour + \ time.gmtime().tm_min/60.0 + \ time.gmtime().tm_sec/3600.0 delta = time.gmtime().tm_year - 1949 leap = delta / 4 jd = 32916.5 + delta * 365 + leap + day + hour / 24 t = jd - 51545 mnlong_deg = (280.460 + .9856474 * t) % 360 mnanom_rad = math.radians((357.528 + .9856003 * t) % 360) eclong = math.radians((mnlong_deg + 1.915 * math.sin(mnanom_rad) + 0.020 * math.sin(2 * mnanom_rad) ) % 360) oblqec_rad = math.radians(23.439 - 0.0000004 * t) num = math.cos(oblqec_rad) * math.sin(eclong) den = math.cos(eclong) ra_rad = math.atan(num / den) if den < 0: ra_rad = ra_rad + math.pi elif num < 0: ra_rad = ra_rad + 2 * math.pi dec_rad = math.asin(math.sin(oblqec_rad) * math.sin(eclong)) gmst = (6.697375 + .0657098242 * t + hour) % 24 lmst = (gmst + long / 15) % 24 lmst_rad = math.radians(15 * lmst) ha_rad = (lmst_rad - ra_rad) % (2 * math.pi) el_rad = math.asin( math.sin(dec_rad) * math.sin(lat_rad) + \ math.cos(dec_rad) * math.cos(lat_rad) * math.cos(ha_rad)) az_rad = math.asin( - math.cos(dec_rad) * math.sin(ha_rad) / math.cos(el_rad)) if (math.sin(dec_rad) - math.sin(el_rad) * math.sin(lat_rad) < 0): az_rad = math.pi - az_rad elif (math.sin(az_rad) < 0): az_rad += 2 * math.pi return el_rad, az_rad
longitude= 176.0433687000000020361767383292317390441894531250 latitude= -39.173830619999996827118593500927090644836425781250 event_time = as.POSIXct("2013-10-24 12:00:00", format="%Y-%m-%d %H:%M:%S", tz = "UTC") sunPosition(when=event_time, lat = latitude, long = longitude) elevation azimuthJ azimuthC 1 -38.92275 180 NaN Warning message: In acos((sin(lat) * cos(zenithAngle) - sin(dec))/(cos(lat) * sin(zenithAngle))) : NaNs produced
library(reshape2) df <- melt(outer(1:4, 1:4), varnames = c("X1", "X2")) p1 <- ggplot(df, aes(X1, X2)) + geom_tile(aes(fill = value)) p1 + scale_fill_continuous(guide = guide_legend())
library(reshape2) df <- melt(outer(1:4, 1:4), varnames = c("X1", "X2")) p1 <- ggplot(df, aes(X1, X2)) + geom_tile(aes(fill = value)) p1 + scale_fill_continuous(guide = guide_legend()) + theme(legend.position="bottom")
+theme(legend.position="bottom",legend.direction="vertical")
utils::assignInNamespace( "q", function(save = "no", status = 0, runLast = TRUE) { .Internal(quit(save, status, runLast)) }, "base" )
exit <- structure(list(), class = "exit_command") print.exit_command <- function(...) { q("no") }
library(dplyr) df = data.frame(a=rep(1:3,4), b=rep(1:2,6)) df$b = factor(df$b, levels=1:3) plyr::ddply(df, "b", summarise, count_a=length(a), .drop=FALSE) b count_a 1 1 6 2 2 6 3 3 0 df %.% group_by(b) %.% summarise(count_a=length(a), .drop=FALSE) b count_a .drop 1 1 6 FALSE 2 2 6 FALSE
library(tidyr) df %>% group_by(b) %>% summarise(count_a=length(a)) %>% complete(b)
df %>% group_by(b) %>% summarise(count_a=length(a)) %>% complete(b, fill = list(count_a = 0))
expanded_res <- left_join(expand.grid(b = levels(df$b)),res)
final_counts <- expanded_res[is.na(expanded_res)] <- 0
attr(by_b, "indices")[[3]] <- rep(NA,oob_val) attr(by_b, "group_sizes")[3] <- 0 attr(by_b, "labels")[3,] <- 3
> res Source: local data frame [3 x 2] b count_a 1 1 6 2 2 6 3 3 0
sourc.https <- function(url, ...) { if (match( install.packages(c("RCurl"), dependencies = TRUE) require(RCurl) } else require(RCurl) sapply(c(url, ...), function(u) { eval(parse(text = getURL(u, followlocation = TRUE, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))), envir = .GlobalEnv) } ) } sourc.https("https: inputs = c(6, 144) losses = c(6,47,14,7, 7, 35, 34) unit = "n =" labels = c("Transfers", "Referrals\n", "Unable to Engage", "Consultation only", "Did not complete the intake", "Did not engage in Treatment", "Discontinued Mid-Treatment", "Completed Treatment", "Active in \nTreatment") SankeyR(inputs,losses,unit,labels) rm("inputs", "labels", "losses", "SankeyR", "sourc.https", "unit")
library(networkD3) URL <- paste0( "https: "master/JSONdata/energy.json") Energy <- jsonlite::fromJSON(URL) sankeyNetwork(Links = Energy$links, Nodes = Energy$nodes, Source = "source", Target = "target", Value = "value", NodeID = "name", units = "TWh", fontSize = 12, nodeWidth = 30)
fontsize = max(0.5,frInputs[j]*1.5) text(txtX, txtY, fullLabel, cex=fontsize, pos=4, srt=90, offset=0.1)
require(alluvial) tit <- as.data.frame(Titanic) alluvial( tit[,1:4], freq=tit$Freq, border=NA, hide = tit$Freq < quantile(tit$Freq, .50), col=ifelse( tit$Class == "3rd" & tit$Sex == "Male", "red", "gray") )
library(ggalluvial) titanic_wide <- data.frame(Titanic) ggplot(data = titanic_wide, aes(axis1 = Class, axis2 = Sex, axis3 = Age, y = Freq)) + scale_x_discrete(limits = c("Class", "Sex", "Age"), expand = c(.1, .05)) + xlab("Demographic") + geom_alluvium(aes(fill = Survived)) + geom_stratum() + geom_text(stat = "stratum", label.strata = TRUE) + theme_minimal() + ggtitle("passengers on the maiden voyage of the Titanic", "stratified by demographics and survival") + theme(legend.position =
ggplot(titanic_wide, aes(y = Freq, axis1 = Survived, axis2 = Sex, axis3 = Class)) + geom_alluvium(aes(fill = Class), width = 0, knot.pos = 0, reverse = FALSE) + guides(fill = FALSE) + geom_stratum(width = 1/8, reverse = FALSE) + geom_text(stat = "stratum", label.strata = TRUE, reverse = FALSE) + scale_x_continuous(expand = c(0, 0), breaks = 1:3, labels = c("Survived", "Sex", "Class")) + scale_y_discrete(expand = c(0, 0)) + coord_flip() + ggtitle("Titanic survival by class and sex")
p + guides(fill=guide_legend( keywidth=0.1, keyheight=0.1, default.unit="inch") )
scale_fill_manual(values=c("red","blue","white"), labels=c("Label of category 1 ", "Label of category 2 ", "Label of category 3"))
library(grid) ... + theme(legend.key.height=unit(3,"line")) ... + theme(legend.key.width=unit(3,"line"))
library(ggplot2) ggplot(mtcars, aes(factor(cyl), fill = factor(cyl))) + geom_bar() + coord_flip() + scale_fill_viridis_d("Cyl") + theme(legend.position = legend.spacing.x = unit(1.0,
ggplot(mtcars, aes(factor(cyl), fill = factor(cyl))) + geom_bar() + coord_flip() + scale_fill_viridis_d("Cyl") + theme(legend.position = legend.spacing.x = unit(1.0, legend.text = element_text(margin = margin(t = 10))) + guides(fill = guide_legend(title = "Cyl", label.position = "bottom", title.position = "left", title.vjust = 1))
ggplot(mtcars, aes(mpg, wt)) + geom_point(aes(fill = hp), pch = I(21), size = 5)+ scale_fill_viridis_c(guide = FALSE) + theme(legend.position = legend.spacing.x = unit(0.5, legend.text = element_text(margin = margin(t = 10))) + guides(fill = guide_colorbar(title = "HP", label.position = "bottom", title.position = "left", title.vjust = 1, frame.colour = "black", barwidth = 15, barheight = 1.5))
ggplot(mtcars) + aes(fill = factor(cyl), x = cyl) + geom_bar() + theme(legend.key.size = unit(1, "cm"))
draw_key_polygon3 <- function(data, params, size) { lwd <- min(data$size, min(size) / 4) grid::rectGrob( width = grid::unit(0.6, "npc"), height = grid::unit(0.6, "npc"), gp = grid::gpar( col = data$colour, fill = alpha(data$fill, data$alpha), lty = data$linetype, lwd = lwd * .pt, linejoin = "mitre" )) } GeomBar$draw_key = draw_key_polygon3 ggplot(mtcars) + aes(fill = factor(cyl), x = cyl) + geom_bar() + theme(legend.key = element_rect(color = NA, fill = NA), legend.key.size = unit(1.5, "cm"))
p + theme(legend.text = element_text( margin = margin(r = 30, unit = "pt")))
p + theme(legend.text = element_text( margin = margin(l = 30, unit = "pt")))
... + theme(legend.key.height=unit(3,"line")) ... + theme(legend.key.width=unit(3,"line"))
library(ggplot2) library(gridExtra) gp <- ggplot(data = mtcars, aes(mpg, cyl, colour = factor(cyl))) + geom_point()
gpbw <- gp + theme_bw() g1bw <- gpbw + theme(legend.key.size = unit(0, g2bw <- gpbw + theme(legend.key.size = unit(1.5, g3bw <- gpbw + theme(legend.key.size = unit(3, grid.arrange(g1bw,g2bw,g3bw,nrow=3)
g1 <- gp + theme(legend.key.size = unit(0, g2 <- gp + theme(legend.key.size = unit(1.5, g3 <- gp + theme(legend.key.size = unit(3, grid.arrange(g1,g2,g3,nrow=3) gp2 <- g3 g4 <- gp2 + theme(legend.key = element_rect(size = 1)) g5 <- gp2 + theme(legend.key = element_rect(size = 3)) g6 <- gp2 + theme(legend.key = element_rect(size = 10)) grid.arrange(g4,g5,g6,nrow=3)
gt <- gp2 + theme(legend.key = element_rect(size = 10,color =
legend.spacing = unit(1,"cm") legend.spacing.x = unit(1,"cm") legend.spacing.y = unit(1,"cm")
By default the data frames are merged on the columns with names they both have, but separate specifications of the columns can be given by by.x and by.y.
x <- data.frame(k1=c(NA,NA,3,4,5), k2=c(1,NA,NA,4,5), data=1:5) y <- data.frame(k1=c(NA,2,NA,4,5), k2=c(NA,NA,3,4,5), data=1:5) merge(x, y, by=c("k1","k2"))
df1 = data.frame(CustomerId=c(1:10), Hobby = c(rep("sing", 4), rep("pingpong", 3), rep("hiking", 3)), Product=c(rep("Toaster",3),rep("Phone", 2), rep("Radio",3), rep("Stereo", 2))) df2 = data.frame(CustomerId=c(2,4,6, 8, 10),State=c(rep("Alabama",2),rep("Ohio",1), rep("Cal", 2)), like=c("sing", df3 = merge(df1, df2, by.x=c("CustomerId", "Hobby"), by.y=c("CustomerId", "like"))
new_dataset <- dataset1 %>% right_join(dataset2, by=c("column1","column2"))
library(ggplot2) myplot<-ggplot(data=data.frame(a=c(1,2,3), b=c(2,3,4)), aes(x=a, y=b)) + geom_line() myplot
myplot + theme(panel.background = element_rect(fill =
myplot + theme(plot.background = element_rect(fill =
myplot + theme(panel.background = element_rect(fill=
theme_jack <- function (base_size = 12, base_family = "") { theme_gray(base_size = base_size, base_family = base_family) %+replace% theme( axis.text = element_text(colour = "white"), axis.title.x = element_text(colour = "pink", size=rel(3)), axis.title.y = element_text(colour = "blue", angle=45), panel.background = element_rect(fill="green"), panel.grid.minor.y = element_line(size=3), panel.grid.major = element_line(colour = "orange"), plot.background = element_rect(fill="red") ) }
theme_update(plot.background = element_rect(fill="pink"), axis.title.x = element_text(colour = "red"))
theme_nogrid <- function (base_size = 12, base_family = "") { theme_bw(base_size = base_size, base_family = base_family) %+replace% theme( panel.grid = element_blank() ) }
theme_map <- function (base_size = 12, base_family = "") { theme_gray(base_size = base_size, base_family = base_family) %+replace% theme( axis.line=element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(), axis.ticks=element_blank(), axis.ticks.length=unit(0.3, "lines"), axis.ticks.margin=unit(0.5, "lines"), axis.title.x=element_blank(), axis.title.y=element_blank(), legend.background=element_rect(fill="white", colour=NA), legend.key=element_rect(colour="white"), legend.key.size=unit(1.2, "lines"), legend.position="right", legend.text=element_text(size=rel(0.8)), legend.title=element_text(size=rel(0.8), face="bold", hjust=0), panel.background=element_blank(), panel.border=element_blank(), panel.grid.major=element_blank(), panel.grid.minor=element_blank(), panel.margin=unit(0, "lines"), plot.background=element_blank(), plot.margin=unit(c(1, 1, 0.5, 0.5), "lines"), plot.title=element_text(size=rel(1.2)), strip.background=element_rect(fill="grey90", colour="grey50"), strip.text.x=element_text(size=rel(0.8)), strip.text.y=element_text(size=rel(0.8), angle=-90) ) }
target of assignment expands to non-language object
list_name = list( head(iris), head(swiss), head(airquality) ) names(list_name) <- paste("orca", seq_along(list_name), sep="") attach(list_name) orca1
list_name<-list() for(i in 1:100){ paste("orca",i,sep="")->list_name[[i]] }
sweep(x, MARGIN, STATS, FUN="-", check.margin=T, ...)
M = matrix( 1:12, ncol=3) dx = colMeans(M) sweep(M, 2, dx, FUN="-") [,1] [,2] [,3] [1,] -1.5 -1.5 -1.5 [2,] -0.5 -0.5 -0.5 [3,] 0.5 0.5 0.5 [4,] 1.5 1.5 1.5
> print(size) Weight Waist Height [1,] 130 26 140 [2,] 110 24 155 [3,] 118 25 142 [4,] 112 25 175 [5,] 128 26 170 > sweep(size, 2, c(10, 20, 30), "+") Weight Waist Height [1,] 140 46 170 [2,] 120 44 185 [3,] 128 45 172 [4,] 122 45 205 [5,] 138 46 200
x <- sqrt(wt) * sweep(x, 2, center, check.margin = FALSE)
set.seed(1) a1 <- array(as.integer(rnorm(8, 10, 5)), dim=c(2, 2, 2)) rowSums(a1, dims=2) w1 <- c(3, 4) a1 <- sweep(a1, MARGIN=3, STATS=w1, FUN="*") rowSums(a1, dims=2)
df=matrix(sample.int(150, size = 100, replace = FALSE),5,5) df_means=t(apply(df,2,mean)) df_sds=t(apply(df,2,sd)) df_T=sweep(sweep(df,2,df_means,"-"),2,df_sds,"/")*10+50
> df [,1] [,2] [,3] [,4] [,5] [1,] 109 8 89 69 15 [2,] 85 13 25 150 26 [3,] 30 79 48 1 125 [4,] 56 74 23 140 100 [5,] 136 110 112 12 43 > df_T [,1] [,2] [,3] [,4] [,5] [1,] 56.15561 39.03218 57.46965 49.22319 40.28305 [2,] 50.42946 40.15594 41.31905 60.87539 42.56695 [3,] 37.30704 54.98946 47.12317 39.44109 63.12203 [4,] 43.51037 53.86571 40.81435 59.43685 57.93136 [5,] 62.59752 61.95672 63.27377 41.02349 46.09661
m = matrix(1,nrow=100000,ncol=100) DF = as.data.frame(m) DT = as.data.table(m) system.time(for (i in 1:1000) DF[i,1] <- i) user system elapsed 287.062 302.627 591.984 system.time(for (i in 1:1000) DT[i,V1:=i]) user system elapsed 1.148 0.000 1.158 ( 511 times faster )
system.time(for (i in 1:1000) set(DT,i,"V1",i)) user system elapsed 0.016 0.000 0.018
remove_outliers <- function(x, na.rm = TRUE, ...) { qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...) H <- 1.5 * IQR(x, na.rm = na.rm) y <- x y[x < (qnt[1] - H)] <- NA y[x > (qnt[2] + H)] <- NA y }
set.seed(1) x <- rnorm(100) x <- c(-10, x, 10) y <- remove_outliers(x) par(mfrow = c(1, 2)) boxplot(x) boxplot(y)
> m <- c(rnorm(10),5,10) > bp <- boxplot(m, outline = FALSE)
bstats <- boxplot(count ~ spray, data = InsectSprays, col = "lightgray") bstats$out <- NULL bstats$group <- NULL bxp(bstats)
x<-quantile(retentiondata$sum_dec_incr,c(0.01,0.99)) data_clean <- data[data$attribute >=x[1] & data$attribute<=x[2],]
rm.outlier(x, fill = FALSE, median = FALSE, opposite = FALSE)
newdata <- subset(mydata,!(mydata$var > quantile(mydata$var, probs=c(.01, .99))[2] | mydata$var < quantile(mydata$var, probs=c(.01, .99))[1]) )
z <- df[df$x > quantile(df$x, .25) - 1.5*IQR(df$x) & df$x < quantile(df$x, .75) + 1.5*IQR(df$x), ]
> m=matrix(1:12,3,4) > m [,1] [,2] [,3] [,4] [1,] 1 4 7 10 [2,] 2 5 8 11 [3,] 3 6 9 12 > as.vector(m) [1] 1 2 3 4 5 6 7 8 9 10 11 12 > as.vector(t(m)) [1] 1 4 7 10 2 5 8 11 3 6 9 12
x = matrix(1:9, ncol = 3) x [,1] [,2] [,3] [1,] 1 4 7 [2,] 2 5 8 [3,] 3 6 9 c(x) [1] 1 2 3 4 5 6 7 8 9
Elts_int <- as.matrix(tmp_int) dim(Elts_int) <- (maxrow_int*maxcol_int,1)
library(gdata) vector_data<- unmatrix(yourdata,byrow=T))
library(microbenchmark) x=matrix(runif(1e4),100,100) microbenchmark(y<-as.vector(x),y<-x[1:length(x)],y<-array(x),y<-c(x),times=1e4)
> microbenchmark( y<-as.vector(x), y<-x[1:length(x)], y<-array(x), y<-c(x), times=1e4) Unit: microseconds expr min lq mean median uq max neval y <- as.vector(x) 8.251 13.1640 29.02656 14.4865 15.7900 69933.707 10000 y <- x[1:length(x)] 59.709 70.8865 97.45981 73.5775 77.0910 75042.933 10000 y <- array(x) 9.940 15.8895 26.24500 17.2330 18.4705 2106.090 10000 y <- c(x) 22.406 33.8815 47.74805 40.7300 45.5955 1622.115 10000
z <- 1 counter <- 1 for(y in 1:48) { for (x in 1:32) { z[counter] <- tmp_int[x,y] counter <- 1 + counter } }
a <- seq(1,20) b <- a^0.25 plot(a,b, bty = "l") library(ggplot2) df <- as.data.frame(cbind(a,b)) ggplot(df, aes(x = a, y = b)) + geom_point() ggplot(df, aes(x = a, y = b)) + geom_point() + opts(panel.background = theme_rect(fill= none <- theme_blank() ggplot(df, aes(x = a, y = b)) + geom_point() + opts(panel.background = theme_rect(fill= ggplot(df, aes(x = a, y = b)) + geom_point() + opts(panel.background = theme_rect(fill= ggplot(df, aes(x = a, y = b)) + geom_point() + opts(panel.background = theme_rect(fill= ggplot(df, aes(x = a, y = b)) + geom_point() + opts(panel.background = theme_rect(fill= # # theme_L_border <- function(colour = "black", size = 1, linetype = 1) { structure( function(x = 0, y = 0, width = 1, height = 1, ...) { polylineGrob( x=c(x+width, x, x), y=c(y,y,y+height), ..., default.units = "npc", gp=gpar(lwd=size, col=colour, lty=linetype), ) }, class = "theme", type = "box", call = match.call() ) } ggplot(df, aes(x = a, y = b)) + geom_point() + opts(panel.background = theme_rect(fill=
library(ggplot2) a <- seq(1,20) b <- a^0.25 df <- as.data.frame(cbind(a,b)) ggplot(df, aes(x = a, y = b)) + geom_point() + theme_bw() + theme(axis.line = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.border = element_blank(), panel.background = element_blank())
library(ggplot2) library(grid) a <- seq(1,20) b <- a^0.25 df <- as.data.frame(cbind(a,b)) p = ggplot(df, aes(x = a, y = b)) + geom_point() + scale_y_continuous(expand = c(0,0)) + scale_x_continuous(expand = c(0,0)) + theme_bw() + opts(axis.line = theme_segment(colour = "black"), panel.grid.major = theme_blank(), panel.grid.minor = theme_blank(), panel.border = theme_blank()) + geom_vline(xintercept = 0) p
gt <- ggplot_gtable(ggplot_build(p)) gt$layout$clip[gt$layout$name=="panel"] <- "off" grid.draw(gt)
ggplot(df, aes(x = a, y = b)) + geom_point() + xlim(0,22) + ylim(.95, 2.1) + scale_x_continuous(expand = c(0,0), limits = c(0,22)) + scale_y_continuous(expand = c(0,0), limits = c(.95, 2.2)) + theme_bw() + opts(axis.line = theme_segment(colour = "black"), panel.grid.major = theme_blank(), panel.grid.minor = theme_blank(), panel.border = theme_blank()) + geom_vline(xintercept = 0)
library(ggplot2) a <- seq(1,20) b <- a^0.25 df <- as.data.frame(cbind(a,b)) p <- ggplot(df, aes(x = a, y = b)) p + geom_point() + theme_bw() + theme( plot.background = element_blank() ,panel.grid.major = element_blank() ,panel.grid.minor = element_blank() ,panel.border = element_blank() ) + theme(axis.line = element_line(color =
library(cowplot) a <- seq(1,20) b <- a^0.25 df <- as.data.frame(cbind(a,b)) p <- ggplot(df, aes(x = a, y = b)) + geom_point() save_plot(
theme(axis.line.x = element_line(color="black", size = 2), axis.line.y = element_line(color="black", size = 2))
theme (panel.border = element_blank(), axis.line = element_line(color=
library(sf) library(ggplot2) ggplot() + geom_sf(data = some_shp) + theme_minimal() + theme(axis.text = element_blank(), axis.ticks = element_blank()) + coord_sf(ndiscr = 0)
> s = c("(sometext :: 0.1231313213)", "(moretext :: 0.111222)") > str_match(s, "\\((.*?) :: (0\\.[0-9]+)\\)") [,1] [,2] [,3] [1,] "(sometext :: 0.1231313213)" "sometext" "0.1231313213" [2,] "(moretext :: 0.111222)" "moretext" "0.111222"
gsub("\\((.*?) :: (0\\.[0-9]+)\\)","\\1 \\2", "(sometext :: 0.1231313213)") [1] "sometext 0.1231313213"
regmatches("(sometext :: 0.1231313213)",regexec("\\((.*?) :: (0\\.[0-9]+)\\)","(sometext :: 0.1231313213)")) [[1]] [1] "(sometext :: 0.1231313213)" "sometext" "0.1231313213"
regexpr_perl <- function(expr, str) { match <- regexpr(expr, str, perl=T) matches <- character(0) if (attr(match, capture_start <- attr(match, capture_length <- attr(match, total_matches <- 1 + length(capture_start) matches <- character(total_matches) matches[1] <- substr(str, match, match + attr(match, if (length(capture_start) > 1) { for (i in 1:length(capture_start)) { matches[i + 1] <- substr(str, capture_start[[i]], capture_start[[i]] + capture_length[[i]] - 1) } } } matches }
regex.string <- "(?<=\\().*?(?= :: )" regex.number <- "(?<= :: )\\d\\.\\d+" match.string <- gregexpr(regex.string, str, perl=T)[[1]] match.number <- gregexpr(regex.number, str, perl=T)[[1]] strings <- mapply(function (start, len) substr(str, start, start+len-1), match.string, attr(match.string, "match.length")) numbers <- mapply(function (start, len) as.numeric(substr(str, start, start+len-1)), match.number, attr(match.number, "match.length"))
library(stringr) strings <- c(" 219 733 8965", "329-293-8753 ", "banana", "239 923 8115 and 842 566 4692", "Work: 579-499-7527", "$1000", "Home: 543.355.3679") phone <- "([2-9][0-9]{2})[- .]([0-9]{3})[- .]([0-9]{4})"
x <- c("key1 :: 0.01", "key2 :: 0.02") strcapture(pattern = "(.*) :: (0\\.[0-9]+)", x = x, proto = list(key = character(), value = double()))
> sessionInfo() R version 2.12.2 (2011-02-25) Platform: i386-pc-mingw32/i386 (32-bit) locale: [1] LC_COLLATE=English_United States.1252 [2] LC_CTYPE=English_United States.1252 [3] LC_MONETARY=English_United States.1252 [4] LC_NUMERIC=C [5] LC_TIME=English_United States.1252 attached base packages: [1] stats graphics grDevices utils datasets methods base
Loading required package: ggplot2 Loading required package: reshape Loading required package: plyr Attaching package: The following object(s) are masked from round_any Loading required package: grid Loading required package: proto
R version 2.12.2 (2011-02-25) Platform: i386-pc-mingw32/i386 (32-bit) locale: [1] LC_COLLATE=English_United States.1252 [2] LC_CTYPE=English_United States.1252 [3] LC_MONETARY=English_United States.1252 [4] LC_NUMERIC=C [5] LC_TIME=English_United States.1252 attached base packages: [1] grid stats graphics grDevices utils datasets methods [8] base other attached packages: [1] ggplot2_0.8.9 proto_0.3-9.1 reshape_0.8.4 plyr_1.4
pkg <- c("package:ggplot2_0.8.9", "package:proto_0.3-9.1", "package:reshape_0.8.4", "package:plyr_1.4") detach(pkg, character.only = TRUE) Error in detach(pkg, character.only = TRUE) : invalid In addition: Warning message: In if (is.na(pos)) stop("invalid the condition has length > 1 and only the first element will be used
detachAllPackages <- function() { basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base") package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)] package.list <- setdiff(package.list,basic.packages) if (length(package.list)>0) for (package in package.list) detach(package, character.only=TRUE) } detachAllPackages()
name: The object to detach. Defaults to ‘search()[pos]’. This can be an unquoted name or a character string but _not_ a character vector. If a number is supplied this is taken as ‘pos’.
pkg <- c("package:vegan","package:permute") lapply(pkg, detach, character.only = TRUE, unload = TRUE)
> require(vegan) Loading required package: vegan Loading required package: permute This is vegan 2.0-0 > sessionInfo() R version 2.13.1 Patched (2011-09-13 r57007) Platform: x86_64-unknown-linux-gnu (64-bit) locale: [1] LC_CTYPE=en_GB.utf8 LC_NUMERIC=C [3] LC_TIME=en_GB.utf8 LC_COLLATE=en_GB.utf8 [5] LC_MONETARY=C LC_MESSAGES=en_GB.utf8 [7] LC_PAPER=en_GB.utf8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_GB.utf8 LC_IDENTIFICATION=C attached base packages: [1] stats graphics grDevices utils datasets methods [7] base other attached packages: [1] vegan_2.0-0 permute_0.7-0 loaded via a namespace (and not attached): [1] grid_2.13.1 lattice_0.19-33 tools_2.13.1 > pkg <- c("package:vegan","package:permute") > lapply(pkg, detach, character.only = TRUE, unload = TRUE) [[1]] NULL [[2]] NULL > sessionInfo() R version 2.13.1 Patched (2011-09-13 r57007) Platform: x86_64-unknown-linux-gnu (64-bit) locale: [1] LC_CTYPE=en_GB.utf8 LC_NUMERIC=C [3] LC_TIME=en_GB.utf8 LC_COLLATE=en_GB.utf8 [5] LC_MONETARY=C LC_MESSAGES=en_GB.utf8 [7] LC_PAPER=en_GB.utf8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_GB.utf8 LC_IDENTIFICATION=C attached base packages: [1] stats graphics grDevices utils datasets methods [7] base loaded via a namespace (and not attached): [1] grid_2.13.1 lattice_0.19-33 tools_2.13.1
loadedNamespaces() [1] "base" "datasets" "grDevices" "graphics" "methods" "stats" [7] "utils" require(nothing, quietly = TRUE) loadedNamespaces() [1] "base"
pacman::p_unload(pacman::p_loaded(), character.only = TRUE)
sess.pkgs <- function (package = NULL) { z <- list() if (is.null(package)) { package <- grep("^package:", search(), value = TRUE) keep <- sapply(package, function(x) x == "package:base" || !is.null(attr(as.environment(x), "path"))) package <- sub("^package:", "", package[keep]) } pkgDesc <- lapply(package, packageDescription) if (length(package) == 0) stop("no valid packages were specified") basePkgs <- sapply(pkgDesc, function(x) !is.null(x$Priority) && x$Priority == "base") z$basePkgs <- package[basePkgs] if (any(!basePkgs)) { z$otherPkgs <- package[!basePkgs] } z } lapply(paste("package:",sess.pkgs()$otherPkgs, sep=""), detach, character.only = TRUE, unload = TRUE)
dat <- data.frame(a=1:2, b=2:3, c=4:5) dat a b c 1 1 2 4 2 2 3 5
"d" %in% names(dat) [1] FALSE Or use `grepl` to check for a match: grepl("d", names(dat)) [1] FALSE FALSE FALSE
> names(dat) [1] "a" "b" "c" > any(names(dat) == [1] TRUE > any(names(dat) == [1] FALSE
dat <- data.frame(a=c(1, Inf), b=c(Inf, 3), d=c("a","b"))
cf_DFinf2NA <- function(x) { for (i in 1:ncol(x)){ x[,i][is.infinite(x[,i])] = NA } return(x) }
do.call(data.frame,lapply(DT, function(x) replace(x, is.infinite(x),NA)))
DT <- data.table(dat) invisible(lapply(names(DT),function(.name) set(DT, which(is.infinite(DT[[.name]])), j = .name,value =NA)))
for (j in 1:ncol(DT)) set(DT, which(is.infinite(DT[[j]])), j, NA)
dat <- data.frame(a = rep(c(1,Inf), 1e6), b = rep(c(Inf,2), 1e6), c = rep(c( e = rep(c(Inf,2), 1e6)) library(data.table) DT <- data.table(dat) system.time(na_dat <- do.call(data.frame,lapply(dat, function(x) replace(x, is.infinite(x),NA)))) system.time(is.na(dat) <- sapply(dat, is.infinite)) system.time(is.na(dat) <- do.call(cbind,lapply(dat, is.infinite))) system.time(invisible(lapply(names(DT),function(.name) set(DT, which(is.infinite(DT[[.name]])), j = .name,value =NA))))
> dat <- data.frame(a=c(1, Inf), b=c(Inf, 3), d=c("a","b")) > is.na(dat) <- sapply(dat, is.infinite) > dat a b d 1 1 NA a 2 NA 3 b
> is.na(dat) <- do.call(cbind,lapply(dat, is.infinite))
dat <- data.frame(a = rep(c(1,Inf), 1e6), b = rep(c(Inf,2), 1e6), c = rep(c( e = rep(c(Inf,2), 1e6)) DT <- data.table(dat) system.time(dat[mapply(is.infinite, dat)] <- NA) system.time(dat[dat==Inf] <- NA) system.time(invisible(lapply(names(DT),function(.name) set(DT, which(is.infinite(DT[[.name]])), j = .name,value =NA)))) system.time(rationalize(dat))
> system.time(dat[mapply(is.infinite, dat)] <- NA) user system elapsed 0.125 0.039 0.164 > system.time(dat[dat==Inf] <- NA) user system elapsed 0.095 0.010 0.108 > system.time(invisible(lapply(names(DT),function(.name) set(DT, which(is.infinite(DT[[.name]])), j = .name,value =NA)))) user system elapsed 0.065 0.002 0.067 > system.time(rationalize(dat)) user system elapsed 0.058 0.014 0.072 >
dat <- data.frame(a = rep(c(1,Inf), 1e6), b = rep(c(Inf,2), 1e6), c = rep(c( e = rep(c(Inf,2), 1e6)) system.time(dat[dat==Inf] <- NA)
dat %>% mutate_if(is.numeric, list(~na_if(., Inf)))
dat %>% mutate_if(is.numeric, list(~na_if(., Inf))) %>% mutate_if(is.numeric, list(~na_if(., -Inf)))
plot(1:10, xaxt = "n", xlab= axis(1, at=1:10, labels=letters[1:10])
lablist<-as.vector(c(1:10)) axis(1, at=seq(1, 10, by=1), labels = FALSE) text(seq(1, 10, by=1), par("usr")[3] - 0.2, labels = lablist, srt = 45, pos = 1, xpd = TRUE)
function (x, format, tz = "") { y <- .Internal(strptime(as.character(x), format, tz)) names(y$year) <- names(x) y } <bytecode: 0x045fcea8> <environment: namespace:base>
function (x, tz = "", ...) UseMethod("as.POSIXct") <bytecode: 0x069efeb8> <environment: namespace:base>
function (x, tz = "", ...) UseMethod("as.POSIXlt") <bytecode: 0x03ac029c> <environment: namespace:base>
library(microbenchmark) Dates <- sample(c(dates = format(seq(ISOdate(2010,1,1), by= df <- microbenchmark(strptime(Dates, "%d-%m-%Y"), as.POSIXlt(Dates, format = "%d-%m-%Y"), times = 1000) Unit: milliseconds expr min lq median uq max 1 as.POSIXlt(Dates, format = "%d-%m-%Y") 32.38596 33.81324 34.78487 35.52183 61.80171 2 strptime(Dates, "%d-%m-%Y") 31.73224 33.22964 34.20407 34.88167 52.12422
date.hour=strptime("2011-03-27 01:30:00", "%Y-%m-%d %H:%M:%S") date=c("26/10/2016") time=c("19:51:30") day<-paste(date,"T", time) day.time1=as.POSIXct(day,format="%d/%m/%Y T %H:%M:%S",tz="Europe/Paris") day.time1 day.time1$year day.time2=as.POSIXlt(day,format="%d/%m/%Y T %H:%M:%S",tz="Europe/Paris") day.time2 day.time2$year
> samp names Var.1 Var.2 Var.3 1 A 1 5 0 2 B 2 4 1 3 C 3 3 2 4 D 4 2 3 5 E 5 1 4
> samp.with.rownames Var.1 Var.2 Var.3 A 1 5 0 B 2 4 1 C 3 3 2 D 4 2 3 E 5 1 4
R> df<-data.frame(a=letters[1:10], b=1:10, c=LETTERS[1:10]) R> rownames(df) <- df[,1] R> df[,1] <- NULL R> df b c a 1 A b 2 B c 3 C d 4 D e 5 E f 6 F g 7 G h 8 H i 9 I j 10 J R>
> samp.with.rownames <- data.frame(samp[,-1], row.names=samp[,1])
library(tidyverse) samp %>% remove_rownames %>% column_to_rownames(var="names")
d <- data.frame(V1=c(1,2)) class(d) mode(d) typeof(d)
set.seed(1) df <- expand.grid(list(A = 1:5, B = 1:5, C = 1:5)) df$value <- runif(nrow(df))
library(plyr) ddply(df, .(A, B), function(x) x[which.max(x$value),])
library(dplyr) df %>% group_by(A, B) %>% summarise(max = max(value))
sessionInfo() R version 3.1.0 (2014-04-10) Platform: x86_64-w64-mingw32/x64 (64-bit) locale: [1] LC_COLLATE=English_Australia.1252 LC_CTYPE=English_Australia.1252 [3] LC_MONETARY=English_Australia.1252 LC_NUMERIC=C [5] LC_TIME=English_Australia.1252 attached base packages: [1] stats graphics grDevices utils datasets methods base other attached packages: [1] dplyr_0.2 plyr_1.8.1 loaded via a namespace (and not attached): [1] assertthat_0.1.0.99 parallel_3.1.0 Rcpp_0.11.1 [4] tools_3.1.0
result <- df %>% group_by(A, B) %>% filter(value == max(value)) %>% arrange(A,B,C)
identical( as.data.frame(result), ddply(df, .(A, B), function(x) x[which.max(x$value),]) )
library(dplyr) df %>% group_by(A, B) %>% mutate(the_rank = rank(-value, ties.method = "random")) %>% filter(the_rank == 1) %>% select(-the_rank)
df %>% group_by( A, B) %>% arrange( desc(value) ) %>% slice(1) %>% ungroup() df %>% group_by( A, B) %>% arrange( C, desc(value) ) %>% slice(1) %>% ungroup()
x = 7 y = load_object_from_file("x.Rda") print(x) print(y)
x <- 5 saveRDS(x, "x.rds") y <- readRDS("x.rds") all.equal(x, y)
load_obj <- function(f) { env <- new.env() nm <- load(f, env)[1] env[[nm]] }
loadRData <- function(fileName){ load(fileName) get(ls()[ls() != "fileName"]) } d <- loadRData("~/blah/ricardo.RData")
load_obj <- function(fileName) { local_env = new.env() source(file = fileName, local = local_env) return(local_env[[names(local_env)[1]]]) } my_loaded_obj = load_obj(fileName = "TestSourceFile.R") my_loaded_obj(7)
myTestFunction = function(arg) { print(paste0("Value of arg is ", arg)) }
AB<-read.xlsx("C:/AB_DNA_Tag_Numbers.xlsx","DNA_Tag_Numbers")
Error in .jnew("java/io/FileInputStream", file) : java.io.FileNotFoundException: C:\AB_DNA_Tag_Numbers.xlsx (The system cannot find the file specified)
library(readxl) read_excel("my-old-spreadsheet.xls") read_excel("my-new-spreadsheet.xlsx") read_excel("my-spreadsheet.xls", sheet = "data") read_excel("my-spreadsheet.xls", sheet = 2) read_excel("my-spreadsheet.xls", na = "NA")
library(XLConnect) theData <- readWorksheet(loadWorkbook("C:/AB_DNA_Tag_Numbers.xlsx"),sheet=1)
library("xlsx") FirstTable <- read.xlsx("MyExcelFile.xlsx", 1 , stringsAsFactors=F) SecondTable <- read.xlsx("MyExcelFile.xlsx", 2 , stringsAsFactors=F)
library("readxl") FirstTable <- read_excel("MyExcelFile.xlsx", 1) SecondTable <- read_excel("MyExcelFile.xlsx", 2)
require("xlsx") read.xlsx("filepath/filename.xlsx",1)
install.packages("openxlsx") library(openxlsx) rawData<-read.xlsx("your.xlsx");
install.packages("readxl/XLConnect") library(XLConnect) search()
library(rio) AB <- import("C:/AB_DNA_Tag_Numbers.xlsx") AB <- AB[,1]
hist(c(rep(65, times=5), rep(25, times=5), rep(35, times=10), rep(45, times=4)))
X <- c(rep(65, times=5), rep(25, times=5), rep(35, times=10), rep(45, times=4)) hist(X, prob=TRUE) lines(density(X)) lines(density(X, adjust=2), lty="dotted")
X <- c(rep(65, times=5), rep(25, times=5), rep(35, times=10), rep(45, times=4)) hist(X, prob=TRUE, col="grey") lines(density(X), col="blue", lwd=2) lines(density(X, adjust=2), lty="dotted", col="darkgreen", lwd=2)
library(ggplot2) dataset <- data.frame(X = c(rep(65, times=5), rep(25, times=5), rep(35, times=10), rep(45, times=4))) ggplot(dataset, aes(x = X)) + geom_histogram(aes(y = ..density..)) + geom_density()
ggplot(dataset, aes(x = X)) + geom_histogram(aes(y = ..density..), binwidth = 5) + geom_density()
foo <- rnorm(100, mean=1, sd=2) hist(foo, prob=TRUE) curve(dnorm(x, mean=mean(foo), sd=sd(foo)), add=TRUE)
> sn.mle(y=c(rep(65, times=5), rep(25, times=5), rep(35, times=10), rep(45, times=4))) $call sn.mle(y = c(rep(65, times = 5), rep(25, times = 5), rep(35, times = 10), rep(45, times = 4))) $cp mean s.d. skewness 41.46228 12.47892 0.99527
data.frame(director = c("Aaron Blaise,Bob Walker", "Akira Kurosawa", "Alan J. Pakula", "Alan Parker", "Alejandro Amenabar", "Alejandro Gonzalez Inarritu", "Alejandro Gonzalez Inarritu,Benicio Del Toro", "Alejandro González Iñárritu", "Alex Proyas", "Alexander Hall", "Alfonso Cuaron", "Alfred Hitchcock", "Anatole Litvak", "Andrew Adamson,Marilyn Fox", "Andrew Dominik", "Andrew Stanton", "Andrew Stanton,Lee Unkrich", "Angelina Jolie,John Stevenson", "Anne Fontaine", "Anthony Harvey"), AB = c(
director <- c("Aaron Blaise,Bob Walker", "Akira Kurosawa", "Alan J. Pakula", "Alan Parker", "Alejandro Amenabar", "Alejandro Gonzalez Inarritu", "Alejandro Gonzalez Inarritu,Benicio Del Toro", "Alejandro González Iñárritu", "Alex Proyas", "Alexander Hall", "Alfonso Cuaron", "Alfred Hitchcock", "Anatole Litvak", "Andrew Adamson,Marilyn Fox", "Andrew Dominik", "Andrew Stanton", "Andrew Stanton,Lee Unkrich", "Angelina Jolie,John Stevenson", "Anne Fontaine", "Anthony Harvey") AB <- c("A", "B", "A", "A", "B", "B", "B", "A", "B", "A", "B", "A", "A", "B", "B", "B", "B", "B", "B", "A") library(data.table) library(magrittr)
run_mb <- function(n) { mb_times <- scales::squish(10000L / n , c(3L, 100L)) cat(n, " ", mb_times, "\n") DF <- data.frame(director = rep(director, n), AB = rep(AB, n)) DT <- as.data.table(DF) microbenchmark::microbenchmark( matt_mod = { s <- strsplit(as.character(DF$director), data.frame(director=unlist(s), AB=rep(DF$AB, lengths(s)))}, jaap_DT1 = { DT[, lapply(.SD, function(x) unlist(tstrsplit(x, ",", fixed=TRUE))), by = AB ][!is.na(director)]}, jaap_DT2 = { DT[, strsplit(as.character(director), ",", fixed=TRUE), by = .(AB, director)][,.(director = V1, AB)]}, jaap_dplyr = { DF %>% dplyr::mutate(director = strsplit(as.character(director), ",")) %>% tidyr::unnest(director)}, jaap_tidyr = { tidyr::separate_rows(DF, director, sep = ",")}, cSplit = { splitstackshape::cSplit(DF, "director", ",", direction = "long")}, DT3 = { DT[, strsplit(as.character(director), ",", fixed=TRUE), by = .(AB, director)][, director := NULL][ , setnames(.SD, "V1", "director")]}, DT4 = { DT[, .(director = unlist(strsplit(as.character(director), ",", fixed = TRUE))), by = .(AB)]}, times = mb_times ) }
mbl <- rbindlist(mb, idcol = "N") mbl[, n_row := NROW(director) * n_rep[N]] mba <- mbl[, .(median_time = median(time), N = .N), by = .(n_row, expr)] mba[, expr := forcats::fct_reorder(expr, -median_time)]
library(ggplot2) ggplot(mba, aes(n_row, median_time*1e-6, group = expr, colour = expr)) + geom_point() + geom_smooth(se = FALSE) + scale_x_log10(breaks = NROW(director) * n_rep) + scale_y_log10() + xlab("number of rows") + ylab("median of execution time [ms]") + ggtitle("microbenchmark results") + theme_bw()
library(data.table) setDT(v)[, lapply(.SD, function(x) unlist(tstrsplit(x, ",", fixed=TRUE))), by = AB ][!is.na(director)] setDT(v)[, strsplit(as.character(director), ",", fixed=TRUE), by = .(AB, director) ][,.(director = V1, AB)]
library(dplyr) library(tidyr) v %>% mutate(director = strsplit(as.character(director), ",")) %>% unnest(director)
stack(setNames(strsplit(df$director, stack(setNames(strsplit(as.character(df$director),
> s <- strsplit(as.character(v$director), > data.frame(director=unlist(s), AB=rep(v$AB, sapply(s, FUN=length))) director AB 1 Aaron Blaise A 2 Bob Walker A 3 Akira Kurosawa B 4 Alan J. Pakula A 5 Alan Parker A 6 Alejandro Amenabar B 7 Alejandro Gonzalez Inarritu B 8 Alejandro Gonzalez Inarritu B 9 Benicio Del Toro B 10 Alejandro González Iñárritu A 11 Alex Proyas B 12 Alexander Hall A 13 Alfonso Cuaron B 14 Alfred Hitchcock A 15 Anatole Litvak A 16 Andrew Adamson B 17 Marilyn Fox B 18 Andrew Dominik B 19 Andrew Stanton B 20 Andrew Stanton B 21 Lee Unkrich B 22 Angelina Jolie B 23 John Stevenson B 24 Anne Fontaine B 25 Anthony Harvey A
library(splitstackshape) head(cSplit(mydf, "director", ",", direction = "long"))
> c=rbind(c(1, -1/4), c(-1/4, 1)) > c [,1] [,2] [1,] 1.00 -0.25 [2,] -0.25 1.00 > inv(c) Error: could not find function "inv" > solve(c) [,1] [,2] [1,] 1.0666667 0.2666667 [2,] 0.2666667 1.0666667 > solve(c)*c [,1] [,2] [1,] 1.06666667 -0.06666667 [2,] -0.06666667 1.06666667 > qr.solve(c)*c [,1] [,2] [1,] 1.06666667 -0.06666667 [2,] -0.06666667 1.06666667
require(MASS) mat <- matrix(rnorm(1e6),nrow=1e3,ncol=1e3) t0 <- proc.time() inv0 <- ginv(mat) proc.time() - t0 t1 <- proc.time() inv1 <- solve(mat) proc.time() - t1
library(jsonlite) url <- document <- fromJSON(txt=url)
library(rjson) url <- document <- fromJSON(file=url, method=
library(RJSONIO) library(RCurl) json_file = getURL("https: json_file2 = RJSONIO::fromJSON(json_file) head(json_file2)
is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - round(x)) < tol is.wholenumber(1)
testInteger <- function(x){ test <- all.equal(x, as.integer(x), check.attributes = FALSE) if(test == TRUE){ return(TRUE) } else { return(FALSE) } }
check.integer <- function(N){ !grepl("[^[:digit:]]", format(N, digits = 20, scientific = FALSE)) } check.integer(3243) check.integer(3243.34) check.integer("sdfds")
> is.integer(66L) [1] TRUE > is.integer(66) [1] FALSE
> is.wholenumber(1+2^-50) [1] TRUE > check.integer(1+2^-50) [1] FALSE
> 2/49*49 [1] 2 > check.integer(2/49*49) [1] FALSE > is.wholenumber(2/49*49) [1] TRUE
if(round(var) != var)­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­
data = data.frame(x.plot=rep(seq(1,5),10),y.plot=rnorm(50)) ggplot(data,aes(x.plot,y.plot))+stat_summary(fun.data=mean_cl_normal) + geom_smooth(method=
ggplot(data,aes(x.plot,y.plot))+stat_summary(fun.data=mean_cl_normal) + geom_smooth(method=
ggplot(data,aes(x.plot,y.plot))+stat_summary(fun.data=mean_cl_normal) + geom_smooth(method=
df = mtcars lm_fit <- lm(mpg ~ cyl + hp, data=df) summary(lm_fit) predicted_df <- data.frame(mpg_pred = predict(lm_fit, df), hp=df$hp) ggplot(data = df, aes(x = mpg, y = hp)) + geom_point(color= geom_line(color=
ggplot(data = df, aes(x = mpg, y = hp)) + geom_point(color= geom_smooth(method = "lm", se = FALSE)
mm <- data.frame(DOSE = seq(0, max(data$DOSE), length.out = 100)) fit.ggplot=data.frame(y=predict(fit, newdata=mm),x=mm$DOSE) ggplot(data=data,aes(x=log10(DOSE),y=log(viability)))+geom_point()+ geom_line(data=fit.ggplot,aes(x=log10(x),y=log(y)))
geom_abline(slope = data.lm$coefficients[2], intercept = data.lm$coefficients[1])
data.lm$coefficients (Intercept) DepDelay -2.006045 1.025109
ggplotRegression <- function (fit) { `require(ggplot2) ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) + geom_point() + stat_smooth(method = "lm", col = "red") + labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5), "Intercept =",signif(fit$coef[[1]],5 ), " Slope =",signif(fit$coef[[2]], 5), " P =",signif(summary(fit)$coef[2,4], 5))) }`
x <- c(32,64,96,118,126,144,152.5,158) y <- c(99.5,104.8,108.5,100,86,64,35.3,15)
x <- 1:10 y <- x + c(-0.5,0.5) plot(x,y, xlim=c(0,11), ylim=c(-1,12)) fit1 <- lm( y~offset(x) -1 ) fit2 <- lm( y~x ) fit3 <- lm( y~poly(x,3) ) fit4 <- lm( y~poly(x,9) ) library(splines) fit5 <- lm( y~ns(x, 3) ) fit6 <- lm( y~ns(x, 9) ) fit7 <- lm( y ~ x + cos(x*pi) ) xx <- seq(0,11, length.out=250) lines(xx, predict(fit1, data.frame(x=xx)), col= lines(xx, predict(fit2, data.frame(x=xx)), col= lines(xx, predict(fit3, data.frame(x=xx)), col= lines(xx, predict(fit4, data.frame(x=xx)), col= lines(xx, predict(fit5, data.frame(x=xx)), col= lines(xx, predict(fit6, data.frame(x=xx)), col= lines(xx, predict(fit7, data.frame(x=xx)), col=
polyfit <- function(i) x <- AIC(lm(y~poly(x,i))) as.integer(optimize(polyfit,interval = c(1,length(x)-1))$minimum)
f = function() c(f=environment(), defined_in=parent.env(environment()), called_from=parent.frame()) g = function() c(g=environment(), f())
> g() $g <environment: 0x14060e8> $f <environment: 0x1405f28> $defined_in <environment: R_GlobalEnv> $called_from <environment: 0x14060e8>
> f = function() x > g = function() { x = 2; f() } > h = function() { x = 3; function() x } > x = 1 > f() [1] 1 > g() [1] 1 > h()() [1] 3
library(ggplot2) theme_nogrid <- theme_set(theme_update( plot.margin=unit(c(.25, .25, .25, .25), "in"),)) Error in do.call(theme, list(...)) : could not find function "unit"
d <- data.frame(x1=rnorm(10), x2=rnorm(10), x3=rnorm(10)) cor(d)
d <- data.frame(x1=rnorm(10), x2=rnorm(10), x3=rnorm(10)) M <- cor(d) library( corrplot(M, method = "circle")
set.seed(1) x <- matrix(rnorm(20), nrow=5, ncol=4) y <- matrix(rnorm(15), nrow=5, ncol=3) COR <- cor(x,y) COR image(x=seq(dim(x)[2]), y=seq(dim(y)[2]), z=COR, xlab="x column", ylab="y column") text(expand.grid(x=seq(dim(x)[2]), y=seq(dim(y)[2])), labels=round(c(COR),2))
png("corplot.png", width=5, height=5, units="in", res=200) op <- par(mar=c(6,6,1,1), ps=10) COR <- cor(iris[,1:4]) image(x=seq(nrow(COR)), y=seq(ncol(COR)), z=cor(iris[,1:4]), axes=F, xlab="", ylab="") text(expand.grid(x=seq(dim(COR)[1]), y=seq(dim(COR)[2])), labels=round(c(COR),2)) box() axis(1, at=seq(nrow(COR)), labels = rownames(COR), las=2) axis(2, at=seq(ncol(COR)), labels = colnames(COR), las=1) par(op) dev.off()
library(qtlcharts) data(iris) iris$Species <- NULL iplotCorr(iris, reorder=TRUE)
axis(1, 1:dim(d)[2], colnames(d), las=2) axis(2, 1:dim(d)[2], colnames(d), las=2)
image(x=seq(dim(x)[2]), y=seq(dim(y)[2]), z=COR, col=rev(heat.colors(20)), xlab="x column", ylab="y column", xaxt=
DF <- read.csv("file.csv", na.strings=c("NA", "NULL")) new_DF <- subset(DF, is.na(DF$Var2))
new_data <- data %>% filter_all(any_vars(is.na(.)))
tmp <- data.frame(c(1,2,3),c(4,NA,5)); tmp[round(which(is.na(tmp))/ncol(tmp)),]
"This function takes a value x, and does things and returns things that take several lines to explain" doEverythingOften <- function(x) { "if (x %in% 1:9) { doTenEverythings() }" doEverythingOnce() ... return(list( everythingDone = TRUE, howOftenDone = 1 )) }
stuffiwant exclude({ stuffidontwant morestuffidontwant })
require(ggplot2); data(tips); p0 = qplot(sex, data = tips, geom = p1 = p0 + scale_x_discrete(labels = c( print(p1);
library(ggplot2) ggplot(mtcars, aes(mpg, disp, color=factor(gear))) + geom_point() + labs(title="Title (\u03b1 \u03a9)", x= "\u03b1 \u03a9 x-axis title", y= "\u03b1 \u03a9 y-axis title", color="\u03b1 \u03a9 Groups:") + scale_x_continuous(breaks = seq(10, 35, 5), labels = paste0(seq(10, 35, 5), "\u03a9*")) + ggrepel::geom_text_repel(aes(label = paste(rownames(mtcars), "\u03a9*")))
ggplot(smr, aes(Fuel.Rate, Eng.Speed.Ave., color=Eng.Speed.Max.)) + geom_point() + labs(title=expression("Fuel Efficiency"~(alpha*Omega)), color=expression(alpha*Omega), x=expression(Delta~price))
length(rle(x)$values) == 1 length(rle(y)$values) == 1
library(rbenchmark) John <- function() all( abs(x - mean(x)) < .Machine$double.eps ^ 0.5 ) DWin <- function() {diff(range(x)) < .Machine$double.eps ^ 0.5} zero_range <- function() { if (length(x) == 1) return(TRUE) x <- range(x) / mean(x) isTRUE(all.equal(x[1], x[2], tolerance = .Machine$double.eps ^ 0.5)) } x <- runif(500000); benchmark(John(), DWin(), zero_range(), columns=c("test", "replications", "elapsed", "relative"), order="relative", replications = 10000)
test replications elapsed relative 2 DWin() 10000 109.415 1.000000 3 zero_range() 10000 126.912 1.159914 1 John() 10000 208.463 1.905251
zero_range <- function(x, tol = .Machine$double.eps ^ 0.5) { if (length(x) == 1) return(TRUE) x <- range(x) / mean(x) isTRUE(all.equal(x[1], x[2], tolerance = tol)) }
> isTRUE(all.equal( max(y) ,min(y)) ) [1] TRUE > isTRUE(all.equal( max(x) ,min(x)) ) [1] FALSE
> diff(range(x)) < .Machine$double.eps ^ 0.5 [1] FALSE > diff(range(y)) < .Machine$double.eps ^ 0.5 [1] TRUE
R> compare <- function(v) all(sapply( as.list(v[-1]), + FUN=function(z) {identical(z, v[1])})) R> compare(x) [1] FALSE R> compare(y) [1] TRUE R>
library(inline) library(Rcpp) fast_equal = cxxfunction(signature(x = NumericVector var(x); double precision = as<double>(y); for (int i = 0, size = var.size(); i < size; ++i) { if (var[i] - var[0] > precision || var[0] - var[i] > precision) return Rcpp::wrap(false); } return Rcpp::wrap(true); fast_equal(c(1,2,3), 0.1) fast_equal(c(1,2,3), 2)
all_identical <- function(x) { if (length(x) == 1L) { warning(" return(TRUE) } else if (length(x) == 0L) { warning(" return(logical(0)) } else { TF <- vapply(1:(length(x)-1), function(n) identical(x[[n]], x[[n+1]]), logical(1)) if (all(TF)) TRUE else FALSE } }
x <- c(1, 1, 1, NA, 1, 1, 1) all_identical(x) all_identical(x[-4]) y <- list(fac1 = factor(c("A", "B")), fac2 = factor(c("A", "B"), levels = c("B", "A")) ) all_identical(y)
valid = sum(!apply(your_dataframe, 2, function(x) diff(c(min(x), max(x)))) == 0)
> prettyNum(12345.678,big.mark=",",scientific=FALSE) [1] "12,345.68" > format(12345.678,big.mark=",",scientific=FALSE) [1] "12,345.68"
> prettyNum(c(123,1234),big.mark=",") [1] " 123" "1,234"
> prettyNum(c(123,1234),big.mark=",", preserve.width="none") [1] "123" "1,234" > format(c(123,1234),big.mark=",", trim=TRUE) [1] "123" "1,234"
> format(1e6, big.mark=",", scientific=FALSE) [1] "1,000,000" >
library(dplyr) d1 <- data_frame( x = letters[1:3], y = LETTERS[1:3], a = rnorm(3) ) d2 <- data_frame( x2 = letters[3:1], y2 = LETTERS[3:1], b = rnorm(3) ) left_join(d1, d2, by = c("x" = "x2", "y" = "y2"))
f <- function(x, ...) { dots <- list(...) if(length(dots) == 0) return(NULL) cat("The arguments in ... are\n") print(dots) f(...) } f(1,2,3,"a", list("monkey"))
args(sapply) function (X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE) NULL sapply(mtcars, mean, trim = .5) mpg cyl disp hp drat wt qsec vs am gear 19.200 6.000 196.300 123.000 3.695 3.325 17.710 0.000 0.000 4.000 carb 2.000
Details: ‘proc.time’ returns five elements for backwards compatibility, but its ‘print’ method prints a named vector of length 3. The first two entries are the total user and system CPU times of the current R process and any child processes on which it has waited, and the third entry is the ‘real’ elapsed time since the process was started.
Value: .... The definition of ‘user’ and ‘system’ times is from your OS. Typically it is something like _The ‘user time’ is the CPU time charged for the execution of user instructions of the calling process. The ‘system time’ is the CPU time charged for execution by the system on behalf of the calling process._
$ R --vanilla > as.Date("01 Jan 2000") Error in charToDate(x) : character string is not in a standard unambiguous format
> sessionInfo() R version 2.15.2 (2012-10-26) Platform: x86_64-w64-mingw32/x64 (64-bit) locale: [1] LC_COLLATE=English_United Kingdom.1252 [2] LC_CTYPE=English_United Kingdom.1252 [3] LC_MONETARY=English_United Kingdom.1252 [4] LC_NUMERIC=C [5] LC_TIME=English_United Kingdom.1252 attached base packages: [1] stats graphics grDevices utils datasets methods base
as.Date.character function (x, format = "", ...) { charToDate <- function(x) { xx <- x[1L] if (is.na(xx)) { j <- 1L while (is.na(xx) && (j <- j + 1L) <= length(x)) xx <- x[j] if (is.na(xx)) f <- "%Y-%m-%d" } if (is.na(xx) || !is.na(strptime(xx, f <- "%Y-%m-%d", tz = "GMT")) || !is.na(strptime(xx, f <- "%Y/%m/%d", tz = "GMT"))) return(strptime(x, f)) stop("character string is not in a standard unambiguous format") } res <- if (missing(format)) charToDate(x) else strptime(x, format, tz = "GMT") as.Date(res) } <bytecode: 0x265b0ec> <environment: namespace:base>
R> anydate(c("01 Jan 2000", "01/01/2000", "2015/10/10")) [1] "2000-01-01" "2000-01-01" "2015-10-10" R>
p <- ggplot(output8, aes(age, myoutcome, group=id, colour=year_diag_cat2)) + geom_line() + scale_y_continuous(limits = c(lwr,upr)) p + geom_smooth(aes(group=year_diag_cat2), method="loess", size=2, se=F)
> x [1] 1 2 3 4 5 6 7 8 9 10 > y [1] 2 4 6 8 7 12 14 16 18 20
x <- 1:10 y <- c(2,4,6,8,7,12,14,16,18,20) lo <- loess(y~x) plot(x,y) lines(predict(lo), col=
smoothingSpline = smooth.spline(x, y, spar=0.35) plot(x,y) lines(smoothingSpline)
x <- 1:10 y <- c(2,4,6,8,7,8,14,16,18,20) lo <- loess(y~x) plot(x,y) xl <- seq(min(x),max(x), (max(x) - min(x))/1000) lines(xl, predict(lo,xl), col=
bezierCurve <- function(x, y, n=10) { outx <- NULL outy <- NULL i <- 1 for (t in seq(0, 1, length.out=n)) { b <- bez(x, y, t) outx[i] <- b$x outy[i] <- b$y i <- i+1 } return (list(x=outx, y=outy)) } bez <- function(x, y, t) { outx <- 0 outy <- 0 n <- length(x)-1 for (i in 0:n) { outx <- outx + choose(n, i)*((1-t)^(n-i))*t^i*x[i+1] outy <- outy + choose(n, i)*((1-t)^(n-i))*t^i*y[i+1] } return (list(x=outx, y=outy)) } x <- c(4,6,4,5,6,7) y <- 1:6 plot(x, y, "o", pch=20) points(bezierCurve(x,y,20), type="l", col="red")
sigmoid <- function(x) { y<-1/(1+exp(-.15*(x-100))) return(y) } dat<-data.frame(x=rnorm(5000)*30+100) dat$y<-as.numeric(as.logical(round(sigmoid(dat$x)+rnorm(5000)*.3,0)))
loessFit <- loess(y~x, dat, span = 0.6) loessFit <- data.frame(x=loessFit$x,y=loessFit$fitted) loessFit <- loessFit[order(loessFit$x),] approxFit <- approx(dat,n = 15) lowessFit <-data.frame(lowess(dat,f = .6,iter=1))
plot(dat,col= curve(sigmoid,0,200,add=TRUE,col= lines(lowessFit,col= lines(loessFit,col= lines(approxFit,col= legend(150,.6, legend=c("Sigmoid","Loess","Lowess", lty=c(1,1), lwd=c(2.5,2.5),col=c("blue","green","red","purple"))
> microbenchmark::microbenchmark(loess(y~x, dat, span = 0.6),approx(dat,n = 20),lowess(dat,f = .6,iter=1),times=20) Unit: milliseconds expr min lq mean median uq max neval cld loess(y ~ x, dat, span = 0.6) 153.034810 154.450750 156.794257 156.004357 159.23183 163.117746 20 c approx(dat, n = 20) 1.297685 1.346773 1.689133 1.441823 1.86018 4.281735 20 a lowess(dat, f = 0.6, iter = 1) 9.637583 10.085613 11.270911 11.350722 12.33046 12.495343 20 b
library(ggplot2) ggplot(mtcars, aes(wt, mpg)) + geom_point() + geom_smooth(method = "gam", formula = y ~ poly(x, 2)) ggplot(mtcars, aes(wt, mpg)) + geom_point() + geom_smooth(method = "loess", span = 0.3, se = FALSE)
library(data.table) library(dplyr) diamondsDT <- data.table(ggplot2::diamonds) setkey(diamondsDT, cut) diamondsDT %>% filter(cut != "Fair") %>% group_by(cut) %>% summarize(AvgPrice = mean(price), MedianPrice = as.numeric(median(price)), Count = n()) %>% arrange(desc(Count))
diamondsDT [cut != "Fair" ] [, .(AvgPrice = mean(price), MedianPrice = as.numeric(median(price)), Count = .N), by=cut ] [ order(-Count) ]
DT %>% filter(a > 1) %>% summarise(n()) DT %>% filter(a > 1) %>% group_by(c, d) %>% summarise(mean(b))
DT %>% select(a) %>% filter(a > 1) %>% summarise(n()) DT %>% select(a,b,c,d) %>% filter(a > 1) %>% group_by(c,d) %>% summarise(mean(b))
library(rbenchmark) library(dplyr) library(data.table) benchmark( dplyr = diamondsDT %>% filter(cut != "Fair") %>% group_by(cut) %>% summarize(AvgPrice = mean(price), MedianPrice = as.numeric(median(price)), Count = n()) %>% arrange(desc(Count)), data.table = diamondsDT[cut != "Fair", list(AvgPrice = mean(price), MedianPrice = as.numeric(median(price)), Count = .N), by = cut][order(-Count)])[1:4]
test replications elapsed relative 2 data.table 100 2.39 1.000 1 dplyr 100 5.77 2.414
Unit: microseconds expr min lq median diamondsDT[, mean(price), by = cut] 3395.753 4039.5700 4543.594 diamondsDT[cut != "Fair"] 12315.943 15460.1055 16383.738 diamondsDT %>% group_by(cut) %>% summarize(AvgPrice = mean(price)) 9210.670 11486.7530 12994.073 diamondsDT %>% filter(cut != "Fair") 13003.878 15897.5310 17032.609
> tracemem(diamondsDT) [1] "<0x000000002747e348>" > diamondsDT %>% group_by(cut) %>% summarize(AvgPrice = mean(price)) tracemem[0x000000002747e348 -> 0x000000002a624bc0]: <Anonymous> grouped_dt group_by_.data.table group_by_ group_by <Anonymous> freduce _fseq eval eval withVisible %>% Source: local data table [5 x 2] cut AvgPrice 1 Fair 4358.758 2 Good 3928.864 3 Very Good 3981.760 4 Premium 4584.258 5 Ideal 3457.542 > diamondsDT[, mean(price), by = cut] cut V1 1: Ideal 3457.542 2: Premium 4584.258 3: Good 3928.864 4: Very Good 3981.760 5: Fair 4358.758 > untracemem(diamondsDT)
> input1 <- list( letters[1:5], letters[3:12], letters[c(5,2,4,7,1)] ) > input2 <- list( letters[1:5], letters[3:12], letters[c(2,5,4,7,15,4)] ) > findD <- function(x) x[x=="d"] > sapply(input1, findD ) [1] "d" "d" "d" > sapply(input2, findD ) [[1]] [1] "d" [[2]] [1] "d" [[3]] [1] "d" "d" > vapply(input1, findD, "" ) [1] "d" "d" "d" > vapply(input2, findD, "" ) Error in vapply(input2, findD, "") : values must be length 1, but FUN(X[[3]]) result is length 2
sapply(1:5, identity) sapply(integer(), identity) vapply(1:5, identity) vapply(integer(), identity)
input1.long <- rep(input1,10000) library(microbenchmark) m <- microbenchmark( sapply(input1.long, findD ), vapply(input1.long, findD, "" ) ) library(ggplot2) library(taRifx) autoplot(m)
sapply(tnames, function(tname) sqlQuery(cnxn, paste("SELECT MAX(NumCol) FROM", tname))[[1]])
a<-vapply(NULL, is.factor, FUN.VALUE=logical(1)) b<-sapply(NULL, is.factor) is.logical(a) is.logical(b)
EmailClass <- function(name, email) { nc = list( name = name, email = email, get = function(x) nc[[x]], set = function(x, value) nc[[x]] <<- value, props = list(), history = list(), getHistory = function() return(nc$history), getNumMessagesSent = function() return(length(nc$history)) ) nc$sendMail = function(to) { cat(paste("Sending mail to", to, h <- nc$history h[[(length(h)+1)]] <- list(to=to, timestamp=Sys.time()) assign( } nc$addProp = function(name, value) { p <- nc$props p[[name]] <- value assign( } nc <- list2env(nc) class(nc) <- "EmailClass" return(nc) } print.EmailClass <- function(x) { if(class(x) != "EmailClass") stop(); cat(paste(x$get("name"), " }
test <- EmailClass(name="Jason", "jason@bryer.org") test$addProp( test$props test class(test) str(test) test$get("name") test$get("email") test$set("name", "Heather") test$get("name") test test$sendMail("jbryer@excelsior.edu") test$getHistory() test$sendMail("test@domain.edu") test$getNumMessagesSent() test2 <- EmailClass("Nobody", "dontemailme@nowhere.com") test2 test2$props test2$getHistory() test2$sendMail(
library("audio") bday_file <- tempfile() download.file("http: bday <- load.wave(bday_file) play(bday)
library("dplyr") library("audio") notes <- c(A = 0, B = 2, C = 3, D = 5, E = 7, F = 8, G = 10) pitch <- "D D E D G F duration <- c(rep(c(0.75, 0.25, 1, 1, 1, 2), 2), 0.75, 0.25, 1, 1, 1, 1, 1, 0.75, 0.25, 1, 1, 1, 2) bday <- data_frame(pitch = strsplit(pitch, " ")[[1]], duration = duration) bday <- bday %>% mutate(octave = substring(pitch, nchar(pitch)) %>% {suppressWarnings(as.numeric(.))} %>% ifelse(is.na(.), 4, .), note = notes[substr(pitch, 1, 1)], note = note + grepl(" grepl("b", pitch) + octave * 12 + 12 * (note < 3), freq = 2 ^ ((note - 60) / 12) * 440) tempo <- 120 sample_rate <- 44100 make_sine <- function(freq, duration) { wave <- sin(seq(0, duration / tempo * 60, 1 / sample_rate) * freq * 2 * pi) fade <- seq(0, 1, 50 / sample_rate) wave * c(fade, rep(1, length(wave) - 2 * length(fade)), rev(fade)) } bday_wave <- mapply(make_sine, bday$freq, bday$duration) %>% do.call("c", .) play(bday_wave)
parameter_value <- as.numeric("variable_value") parameter_name <- "variable_name"
do.call("<-",list(parameter_name, parameter_value))
original_string <- c("x=123", "y=456") pairs <- strsplit(original_string, "=") lapply(pairs, function(x) assign(x[1], as.numeric(x[2]), envir = globalenv())) ls()
var.name <- "x" assign(var.name, 5) write(paste0(var.name, " <- 6"), "tmp.R") source("tmp.R") file.remove("tmp.R")
varnames = c( file_names = list_files( assign(varnames[1], read.csv(file_names[1])
df VALUE ABS_CALL DETECTION P-VALUE 1007_s_at "957.729231881542" "P" "0.00486279317241156" 1053_at "320.632701283368" "P" "0.0313356324173416" 117_at "429.842323161046" "P" "0.0170004527476119" 121_at "2395.7364289242" "P" "0.0114473584876183" 1255_g_at "116.493632746934" "A" "0.39799368200131" 1294_at "739.927122116896" "A" "0.0668649772942343"
d <- df names <- rownames(d) rownames(d) <- NULL data <- cbind(names,d)
library(data.table) setDT(df, keep.rownames = TRUE)[]
R> x = c(1,1,2,3,4,4,4) R> x [1] 1 1 2 3 4 4 4 R> unique(x) [1] 1 2 3 4
wdups <- rep(1:5,5) wodups <- wdups[which(!duplicated(wdups))]
library(gridExtra) pdf("data_output.pdf", height=11, width=8.5) grid.table(mtcars) dev.off()
options(digits = 4) set.seed(123) x = matrix(rnorm(40), 5) dimnames(x) = list(NULL, head(LETTERS, ncol(x))) knitr::kable(x, digits = 2, caption = "A table produced by printr.")
\documentclass{article} \usepackage{longtable} \begin{document} <<results= library(xtable) df = data.frame(matrix(rnorm(400), nrow=100)) xt = xtable(df) print(xt, tabular.environment = "longtable", floating = FALSE ) @ \end{document}
stargazer(mtcars, type = ============================================ Statistic N Mean St. Dev. Min Max -------------------------------------------- mpg 32 20.091 6.027 10.400 33.900 cyl 32 6.188 1.786 4 8 disp 32 230.722 123.939 71.100 472.000 hp 32 146.688 68.563 52 335 drat 32 3.597 0.535 2.760 4.930 wt 32 3.217 0.978 1.513 5.424 qsec 32 17.849 1.787 14.500 22.900 vs 32 0.438 0.504 0 1 am 32 0.406 0.499 0 1 gear 32 3.688 0.738 3 5 carb 32 2.812 1.615 1 8 --------------------------------------------
library(rhandsontable) rhandsontable(mtcars, rowHeaders = NULL)
library(gridExtra) png("test.png", height = 50*nrow(df), width = 200*ncol(df)) grid.table(df) dev.off()
library(gridExtra) pdf("test.pdf", height=11, width=10) grid.table(df) dev.off()
> a = matrix(1:9, nrow = 3, ncol = 3, dimnames = list(LETTERS[1:3], LETTERS[1:3])) > a A B C A 1 4 7 B 2 5 8 C 3 6 9
> a = matrix(1:9, nrow = 3, ncol = 3, dimnames = list(LETTERS[1:3], LETTERS[1:3])) > write.table(data.frame("H"=rownames(a),a),"a.txt", row.names=FALSE)
library( a = as.data.frame(matrix(1:9, nrow=3, ncol=3, dimnames=list(LETTERS[1:3], LETTERS[1:3]))) a %>% rownames_to_column( my_id A B C 1 A 1 4 7 2 B 2 5 8 3 C 3 6 9
my.write <- function(x, file, header, f = write.csv, ...){ datafile <- file(file, open = on.exit(close(datafile)) if(!missing(header)) { writeLines(header,con=datafile, sep= writeLines( } f(x, datafile,...) }
write.table(matrix,file="file.csv",quote=F,sep=";", row.names=T col.names=c("row_name_col;val1_col","val2_col"))
row_name_col;val1_col;val2_col row1;1;4 row2;2;5 row3;3;6
library(xlsx) set.seed(19790801) n_sheets <- 40 the_data <- replicate( n_sheets, { n_rows <- sample(2e5, 1) data.frame( x = runif(n_rows), y = sample(letters, n_rows, replace = TRUE) ) }, simplify = FALSE ) names(the_data) <- paste("Sheet", seq_len(n_sheets))
wb <- createWorkbook() for(i in seq_along(the_data)) { message("Creating sheet", i) sheet <- createSheet(wb, sheetName = names(the_data)[i]) message("Adding data frame", i) addDataFrame(the_data[[i]], sheet) } saveWorkbook(wb, "test.xlsx")
jgc <- function() { .jcall("java/lang/System", method = "gc") }
for(i in seq_along(the_data)) { gc() jgc() message("Creating sheet", i) sheet <- createSheet(wb, sheetName = names(the_data)[i]) message("Adding data frame", i) addDataFrame(the_data[[i]], sheet) }
for(i in seq_along(the_data)) { message("Writing sheet", i) write.xlsx2( the_data[[i]], "test.xlsx", sheetName = names(the_data)[i], append = i > 1 ) }
jgc <- function() { gc() .jcall("java/lang/System", method = "gc") }
| expr LEFT_ASSIGN expr { $$ = xxbinary($2,$1,$3); setId( $$, @$); } | expr RIGHT_ASSIGN expr { $$ = xxbinary($2,$3,$1); setId( $$, @$); }
library(lme4) d <- data.frame(state=rep(c( year=rep(1:10, 2), response=c(rnorm(10), rnorm(10))) xyplot(response ~ year, groups=state, data=d, type= fits <- lmList(response ~ year | state, data=d) fits Call: lmList(formula = response ~ year | state, data = d) Coefficients: (Intercept) year CA -1.34420990 0.17139963 NY 0.00196176 -0.01852429 Degrees of freedom: 20 total; 16 residual Residual standard error: 0.8201316
d <- data.frame( state = rep(c( year = rep(1:10, 2), response= rnorm(20) ) library(plyr) models <- dlply(d, "state", function(df) lm(response ~ year, data = df)) ldply(models, coef) l_ply(models, summary, .print = TRUE)
library(dplyr) d <- data.frame(state=rep(c( year=rep(1:10, 2), response=c(rnorm(10), rnorm(10))) fitted_models = d %>% group_by(state) %>% do(model = lm(response ~ year, data = .)) # fitted_models$model # #
library(broom) fitted_models %>% tidy(model) fitted_models %>% glance(model) fitted_models %>% augment(model)
library(nlme) lme(response ~ year, random = ~year|state, correlation = corAR1(~year))
library(data.table) set.seed(1) dat <- data.table(x=runif(100), y=runif(100), grp=rep(1:2,50)) dat[,summary(lm(y~x))$r.squared,by=grp] grp V1 1: 1 0.01465726 2: 2 0.02256595
dat[,list(r2=summary(lm(y~x))$r.squared , f=summary(lm(y~x))$fstatistic[1] ),by=grp] grp r2 f 1: 1 0.01465726 0.714014 2: 2 0.02256595 1.108173
ngroups <- 2 group <- 1:ngroups nobs <- 100 dta <- data.frame(group=rep(group,each=nobs),y=rnorm(nobs*ngroups),x=runif(nobs*ngroups)) head(dta) group y x 1 1 0.6482007 0.5429575 2 1 -0.4637118 0.7052843 3 1 -0.5129840 0.7312955 4 1 -0.6612649 0.9028034 5 1 -0.5197448 0.1661308 6 1 0.4240346 0.8944253 foo <- function(z) { mr <- data.frame(coef(summary(lm(y~x,data=z)))) mr$predictor <- rownames(mr) mr } foo(subset(dta,group==1)) Estimate Std..Error t.value Pr...t.. predictor (Intercept) 0.2176477 0.1919140 1.134090 0.2595235 (Intercept) x -0.3669890 0.3321875 -1.104765 0.2719666 x res <- by(dta,dta$group,foo) res dta$group: 1 Estimate Std..Error t.value Pr...t.. predictor (Intercept) 0.2176477 0.1919140 1.134090 0.2595235 (Intercept) x -0.3669890 0.3321875 -1.104765 0.2719666 x ------------------------------------------------------------ dta$group: 2 Estimate Std..Error t.value Pr...t.. predictor (Intercept) -0.04039422 0.1682335 -0.2401081 0.8107480 (Intercept) x 0.06286456 0.3020321 0.2081387 0.8355526 x library(plyr) res <- ddply(dta,"group",foo) res group Estimate Std..Error t.value Pr...t.. predictor 1 1 0.21764767 0.1919140 1.1340897 0.2595235 (Intercept) 2 1 -0.36698898 0.3321875 -1.1047647 0.2719666 x 3 2 -0.04039422 0.1682335 -0.2401081 0.8107480 (Intercept) 4 2 0.06286456 0.3020321 0.2081387 0.8355526 x
require(stats) tmp <- with(warpbreaks, by(warpbreaks, tension, function(x) lm(breaks ~ wool, data = x))) sapply(tmp, coef)
require(base) library(base) attach(data) modell<-by(data, data$state, function(data) lm(y~I(1/var1)+I(1/var2))) summary(modell)
library(tidyverse) d <- data.frame(state=rep(c( year=rep(1:10, 2), response=c(rnorm(10), rnorm(10))) d %>% group_by(state) %>% nest() %>% mutate(model = map(data, ~lm(response ~ year, data = .)))
attach(ggplot2::diamonds) strCols = names(ggplot2::diamonds) formula <- list(); model <- list() for (i in 1:1) { formula[[i]] = paste0(strCols[7], " ~ ", strCols[7+i]) model[[i]] = glm(formula[[i]]) png(filename = sprintf("diamonds_price=glm(%s).png", strCols[7+i])) par(mfrow = c(2, 2)) plot(model[[i]]) dev.off() }
```{r pressure, echo=FALSE, fig.cap="A caption", out.width = knitr::include_graphics("temp.png") ```
```{r table} knitr::kable(mtcars[1:5,, 1:5], caption = "A table caption") ```
--- title : French TER (regional train) monthly regularity subtitle : since January 2013 author : brigasnuncamais job : Business Intelligence / Data Scientist consultant framework : impressjs highlighter : highlight.js hitheme : tomorrow widgets : [] mode : selfcontained knit : slidify::knit2slides
/assets /css /impress-demo.css /fig /unnamed-chunk-1-1.png (generated by included R code) /img /SS850452.png (my image used as background) /js /impress.js /layouts/custbg.html /libraries /frameworks /impressjs /io2012 /highlighters /highlight.js /impress.js index.Rmd
<div id="bg"> <img src="assets/img/SS850452.png" alt=""> </div>
fooXYZ <- function(x) { k <- fooABC(x)+1 return(k) }
> source("abc.R") > source("xyz.R") > fooXYZ(3) [1] 5 >
fooABC <- function(x) { k <- barXYZ(x)+1 return(k) } barABC <- function(x){ k <- x+30 return(k) }
fooXYZ <- function(x) { k <- fooABC(x)+1 return(k) } barXYZ <- function(x){ k <- barABC(x)+20 return(k) }
> source("abc.R") > source("xyz.R") > fooXYZ(3) [1] 55 >
listOfFiles <- lapply(files, function(x) read.table(x, header = FALSE))
Df.1 <- data.frame(A = c(5,4,7,6,8,4),B = (c(1,5,2,4,9,1))) Df.2 <- data.frame(A = c(1:6),B = (c(2,3,4,5,1,1))) Df.3 <- data.frame(A = c(4,6,8,0,1,11),B = (c(7,6,5,9,1,15))) Df.4 <- data.frame(A = c(4,2,6,8,1,0),B = (c(3,1,9,11,2,16)))
Summary<-function(dfile){ SumA<-sum(dfile$A) MinA<-min(dfile$A) MeanA<-mean(dfile$A) MedianA<-median(dfile$A) MaxA<-max(dfile$A) sumB<-sum(dfile$B) MinB<-min(dfile$B) MeanB<-mean(dfile$B) MedianB<-median(dfile$B) MaxB<-max(dfile$B) Sum<-c(sumA,sumB) Min<-c(MinA,MinB) Mean<-c(MeanA,MeanB) Median<-c(MedianA,MedianB) Max<-c(MaxA,MaxB) rm(sumA,sumB,MinA,MinB,MeanA,MeanB,MedianA,MedianB,MaxA,MaxB) Label<-c("A","B") dfile_summary<-data.frame(Label,Sum,Min,Mean,Median,Max) return(dfile_summary)}
filenames <- list.files("temp", pattern="*.csv", full.names=TRUE) ldf <- lapply(filenames, read.csv) res <- lapply(ldf, summary) names(res) <- substr(filenames, 6, 30)
filenames <- list.files("temp", pattern="*.csv") paste("temp", filenames, sep="/")
> res$`df4.csv` A B Min. :0.00 Min. : 1.00 1st Qu.:1.25 1st Qu.: 2.25 Median :3.00 Median : 6.00 Mean :3.50 Mean : 7.00 3rd Qu.:5.50 3rd Qu.:10.50 Max. :8.00 Max. :16.00
for (i in 1:length(res)) assign(paste(paste("df", i, sep=""), "summary", sep="."), res[[i]])
require(plyr) require(dostats) files <- list.files(pattern = ".csv") for (i in seq_along(files)) { assign(paste("Df", i, sep = "."), read.csv(files[i])) assign(paste(paste("Df", i, sep = ""), "summary", sep = "."), ldply(get(paste("Df", i, sep = ".")), dostats, sum, min, mean, median, max)) }
R> Df1.summary .id sum min mean median max 1 A 34 4 5.6667 5.5 8 2 B 22 1 3.6667 3.0 9 R> Df2.summary .id sum min mean median max 1 A 21 1 3.5000 3.5 6 2 B 16 1 2.6667 2.5 5
barplot(((data1[,1] - average)/average) * 100, srt = 45, adj = 1, xpd = TRUE, names.arg = data1[,2], col = c(" main = "Best Lift Time to Vertical Drop Ratios of North American Resorts", ylab = "Normalized Difference", yaxt = cex.names = 0.65, cex.lab = 0.65)
x <- barplot(table(mtcars$cyl), xaxt="n") labs <- paste(names(table(mtcars$cyl)), "cylinders") text(cex=1, x=x-.25, y=-1.25, labs, xpd=TRUE, srt=45)
barplot(mytable,main="Car makes",ylab="Freqency",xlab="make",las=2)
par(mar = c(7, 4, 2, 2) + 0.2) mtcars = mtcars[with(mtcars, order(-qsec)), ] end_point = 0.5 + nrow(mtcars) + nrow(mtcars)-1 barplot(mtcars$qsec, col="grey50", main="", ylab="mtcars - qsec", ylim=c(0,5+max(mtcars$qsec)), xlab = "", space=1) text(seq(1.5,end_point,by=2), par("usr")[3]-0.25, srt = 60, adj= 1, xpd = TRUE, labels = paste(rownames(mtcars)), cex=0.65)
rotate_x <- function(data, column_to_plot, labels_vec, rot_angle) { plt <- barplot(data[[column_to_plot]], col= text(plt, par("usr")[3], labels = labels_vec, srt = rot_angle, adj = c(1.1,1.1), xpd = TRUE, cex=0.6) }
barplot(mtcars$qsec, col="grey50", main="", ylab="mtcars - qsec", ylim=c(0,5+max(mtcars$qsec)), xlab = "", xaxt = "n", space=1)
theme(axis.text.x = element_text(angle = 90, hjust = 1))
x <- read.table(text = " id1 id2 val1 val2 1 a x 1 9 2 a x 2 4 3 a y 3 5 4 a y 4 9 5 b x 1 7 6 b y 4 4 7 b x 3 9 8 b y 2 8", header = TRUE)
aggregate(. ~ id1 + id2, data = x, FUN = mean) aggregate(. ~ id1 + id2, data = x, FUN = length)
do.call("rbind", aggregate(. ~ id1 + id2, data = x, FUN = function(x) data.frame(m = mean(x), n = length(x))))
> aggregate(. ~ id1+id2, data = x, FUN = function(x) c(mn = mean(x), n = length(x) ) )
str( aggregate(. ~ id1+id2, data = x, FUN = function(x) c(mn = mean(x), n = length(x) ) ) ) $ id1 : Factor w/ 2 levels "a","b": 1 2 1 2 $ id2 : Factor w/ 2 levels "x","y": 1 1 2 2 $ val1: num [1:4, 1:2] 1.5 2 3.5 3 2 2 2 2 ..- attr(*, "dimnames")=List of 2 .. ..$ : NULL .. ..$ : chr "mn" "n" $ val2: num [1:4, 1:2] 6.5 8 7 6 2 2 2 2 ..- attr(*, "dimnames")=List of 2 .. ..$ : NULL .. ..$ : chr "mn" "n"
str( do.call(data.frame, aggregate(. ~ id1+id2, data = x, FUN = function(x) c(mn = mean(x), n = length(x) ) ) ) ) $ id1 : Factor w/ 2 levels "a","b": 1 2 1 2 $ id2 : Factor w/ 2 levels "x","y": 1 1 2 2 $ val1.mn: num 1.5 2 3.5 3 $ val1.n : num 2 2 2 2 $ val2.mn: num 6.5 8 7 6 $ val2.n : num 2 2 2 2
aggregate(cbind(val1, val2) ~ id1 + id2, data = x, FUN = function(x) c(mn = mean(x), n = length(x) ) )
> DT id1 id2 val1 val2 1: a x 1 9 2: a x 2 4 3: a y 3 5 4: a y 4 9 5: b x 1 7 6: b y 4 4 7: b x 3 9 8: b y 2 8 > DT[ , .(mean(val1), mean(val2), .N), by = .(id1, id2)] id1 id2 V1 V2 N 1: a x 1.5 6.5 2 2: a y 3.5 7.0 2 3: b x 2.0 8.0 2 4: b y 3.0 6.0 2 > DT[ , .(val1.m = mean(val1), val2.m = mean(val2), count = .N), by = .(id1, id2)] id1 id2 val1.m val2.m count 1: a x 1.5 6.5 2 2: a y 3.5 7.0 2 3: b x 2.0 8.0 2 4: b y 3.0 6.0 2 > DT[ , c(lapply(.SD, mean), count = .N), by = .(id1, id2)] id1 id2 val1 val2 count 1: a x 1.5 6.5 2 2: a y 3.5 7.0 2 3: b x 2.0 8.0 2 4: b y 3.0 6.0 2
x$count <- 1 agg <- aggregate(. ~ id1 + id2, data = x,FUN = sum) agg agg[c("val1", "val2")] <- agg[c("val1", "val2")] / agg$count agg
x.mean <- aggregate(. ~ id1+id2, p, mean) x.len <- aggregate(. ~ id1+id2, p, length) merge(x.mean, x.len, by = c("id1", "id2")) id1 id2 val1.x val2.x val1.y val2.y 1 a x 1.5 6.5 2 2 2 a y 3.5 7.0 2 2 3 b x 2.0 8.0 2 2 4 b y 3.0 6.0 2 2
x %>% group_by(id1, id2) %>% summarise_all(funs(mean, n()))
id1 id2 val1_mean val2_mean val1_n val2_n 1 a x 1.5 6.5 2 2 2 a y 3.5 7.0 2 2 3 b x 2.0 8.0 2 2 4 b y 3.0 6.0 2 2
x %>% group_by(id1, id2) %>% summarise_at(vars(val1, val2), funs(mean, n())) x %>% group_by(id1, id2) %>% summarise_at(vars(-val2), funs(mean, n()))
aggregate(cbind(val1, val2) ~ id1 + id2, data = x, FUN = plyr::each(avg = mean, n = length))
system.time({ Sum = 0 for (i in seq_along(A)) { Sum = Sum + A[[i]] } Sum })
system.time({ I = 0 while (I < 100000) { 10 I = I + 1 } }) system.time({ I = 0 while (I < 100000) { ((((((((((10)))))))))) I = I + 1 } })
f <- function() { sum<-0.5; for(i in 1:1000000) sum<-sum+i; sum } system.time( f() ) library(compiler) g <- cmpfun(f) system.time( g() )
function f() { var sum = 0.5; for(i=1; i<=1000000; ++i) sum = sum + i; return sum; } var start = new Date().getTime(); f(); time = new Date().getTime() - start;
mtcars %>% mutate(mpg = mpg == NA[cyl == 4]) %>% as.data.frame()
mtcars %>% mutate(mpg=replace(mpg, cyl==4, NA)) %>% as.data.frame()
m <- all_movies %>% filter( Reviews >= reviews, Oscars >= oscars, Year >= minyear, Year <= maxyear, BoxOffice >= minboxoffice, BoxOffice <= maxboxoffice ) %>% arrange(Oscars)
library(magrittr) iris %>% head() Sepal.Length Sepal.Width Petal.Length Petal.Width Species 1 5.1 3.5 1.4 0.2 setosa 2 4.9 3.0 1.4 0.2 setosa 3 4.7 3.2 1.3 0.2 setosa 4 4.6 3.1 1.5 0.2 setosa 5 5.0 3.6 1.4 0.2 setosa 6 5.4 3.9 1.7 0.4 setosa
ggplot(diamonds, aes(x=cut, y=price, group=cut))+ geom_boxplot(aes(fill=cut))+scale_fill_brewer(palette="OrRd")
Example.Data<- data.frame(matrix(vector(), 0, 3, dimnames=list(c(), c("Value", "Variable", "Fill"))), stringsAsFactors=F) Example.Data[1, ] <- c(45, Example.Data[2, ] <- c(65, Example.Data[3, ] <- c(89, HighlightDataVert<-Example.Data[2, ] HighlightHorizontal<-Example.Data[1, ] HighlightMesh<-Example.Data[3, ] HighlightHorizontal$Value<-as.numeric(HighlightHorizontal$Value) Example.Data$Value<-as.numeric(Example.Data$Value) HighlightDataVert$Value<-as.numeric(HighlightDataVert$Value) HighlightMesh$Value<-as.numeric(HighlightMesh$Value) HighlightHorizontal$Value<-HighlightHorizontal$Value-5 HighlightHorizontal2<-HighlightHorizontal HighlightHorizontal2$Value<-HighlightHorizontal$Value-5 HighlightHorizontal3<-HighlightHorizontal2 HighlightHorizontal3$Value<-HighlightHorizontal2$Value-5 HighlightHorizontal4<-HighlightHorizontal3 HighlightHorizontal4$Value<-HighlightHorizontal3$Value-5 HighlightHorizontal5<-HighlightHorizontal4 HighlightHorizontal5$Value<-HighlightHorizontal4$Value-5 HighlightHorizontal6<-HighlightHorizontal5 HighlightHorizontal6$Value<-HighlightHorizontal5$Value-5 HighlightHorizontal7<-HighlightHorizontal6 HighlightHorizontal7$Value<-HighlightHorizontal6$Value-5 HighlightHorizontal8<-HighlightHorizontal7 HighlightHorizontal8$Value<-HighlightHorizontal7$Value-5 HighlightMeshHoriz<-HighlightMesh HighlightMeshHoriz$Value<-HighlightMeshHoriz$Value-5 HighlightMeshHoriz2<-HighlightMeshHoriz HighlightMeshHoriz2$Value<-HighlightMeshHoriz2$Value-5 HighlightMeshHoriz3<-HighlightMeshHoriz2 HighlightMeshHoriz3$Value<-HighlightMeshHoriz3$Value-5 HighlightMeshHoriz4<-HighlightMeshHoriz3 HighlightMeshHoriz4$Value<-HighlightMeshHoriz4$Value-5 HighlightMeshHoriz5<-HighlightMeshHoriz4 HighlightMeshHoriz5$Value<-HighlightMeshHoriz5$Value-5 HighlightMeshHoriz6<-HighlightMeshHoriz5 HighlightMeshHoriz6$Value<-HighlightMeshHoriz6$Value-5 HighlightMeshHoriz7<-HighlightMeshHoriz6 HighlightMeshHoriz7$Value<-HighlightMeshHoriz7$Value-5 HighlightMeshHoriz8<-HighlightMeshHoriz7 HighlightMeshHoriz8$Value<-HighlightMeshHoriz8$Value-5 HighlightMeshHoriz9<-HighlightMeshHoriz8 HighlightMeshHoriz9$Value<-HighlightMeshHoriz9$Value-5 HighlightMeshHoriz10<-HighlightMeshHoriz9 HighlightMeshHoriz10$Value<-HighlightMeshHoriz10$Value-5 HighlightMeshHoriz11<-HighlightMeshHoriz10 HighlightMeshHoriz11$Value<-HighlightMeshHoriz11$Value-5 HighlightMeshHoriz12<-HighlightMeshHoriz11 HighlightMeshHoriz12$Value<-HighlightMeshHoriz12$Value-5 HighlightMeshHoriz13<-HighlightMeshHoriz12 HighlightMeshHoriz13$Value<-HighlightMeshHoriz13$Value-5 HighlightMeshHoriz14<-HighlightMeshHoriz13 HighlightMeshHoriz14$Value<-HighlightMeshHoriz14$Value-5 HighlightMeshHoriz15<-HighlightMeshHoriz14 HighlightMeshHoriz15$Value<-HighlightMeshHoriz15$Value-5 HighlightMeshHoriz16<-HighlightMeshHoriz15 HighlightMeshHoriz16$Value<-HighlightMeshHoriz16$Value-5 HighlightMeshHoriz17<-HighlightMeshHoriz16 HighlightMeshHoriz17$Value<-HighlightMeshHoriz17$Value-5 ggplot(Example.Data, aes(x=Variable, y=Value, fill=Fill)) + theme_bw() + theme(legend.position = "none")+ scale_fill_grey(start=.4)+ geom_bar(position=position_dodge(.9), stat="identity", colour="black", legend = FALSE)+ geom_bar(data=HighlightDataVert, position=position_dodge(.9), stat="identity", colour="black", size=.5, width=0.80)+ geom_bar(data=HighlightDataVert, position=position_dodge(.9), stat="identity", colour="black", size=.5, width=0.60)+ geom_bar(data=HighlightDataVert, position=position_dodge(.9), stat="identity", colour="black", size=.5, width=0.40)+ geom_bar(data=HighlightDataVert, position=position_dodge(.9), stat="identity", colour="black", size=.5, width=0.20)+ geom_bar(data=HighlightDataVert, position=position_dodge(.9), stat="identity", colour="black", size=.5, width=0.0) + geom_bar(data=HighlightHorizontal, position=position_dodge(.9), stat="identity", colour="black", size=.5)+ geom_bar(data=HighlightHorizontal2, position=position_dodge(.9), stat="identity", colour="black", size=.5)+ geom_bar(data=HighlightHorizontal3, position=position_dodge(.9), stat="identity", colour="black", size=.5)+ geom_bar(data=HighlightHorizontal4, position=position_dodge(.9), stat="identity", colour="black", size=.5)+ geom_bar(data=HighlightHorizontal5, position=position_dodge(.9), stat="identity", colour="black", size=.5)+ geom_bar(data=HighlightHorizontal6, position=position_dodge(.9), stat="identity", colour="black", size=.5)+ geom_bar(data=HighlightHorizontal7, position=position_dodge(.9), stat="identity", colour="black", size=.5)+ geom_bar(data=HighlightHorizontal8, position=position_dodge(.9), stat="identity", colour="black", size=.5)+ geom_bar(data=HighlightMesh, position=position_dodge(.9), stat="identity", colour="black", size=.5, width=0.80)+ geom_bar(data=HighlightMesh, position=position_dodge(.9), stat="identity", colour="black", size=.5, width=0.60)+ geom_bar(data=HighlightMesh, position=position_dodge(.9), stat="identity", colour="black", size=.5, width=0.40)+ geom_bar(data=HighlightMesh, position=position_dodge(.9), stat="identity", colour="black", size=.5, width=0.20)+ geom_bar(data=HighlightMesh, position=position_dodge(.9), stat="identity", colour="black", size=.5, width=0.0)+ geom_bar(data=HighlightMeshHoriz, position=position_dodge(.9), stat="identity", colour="black", size=.5, fill = "transparent")+ geom_bar(data=HighlightMeshHoriz2, position=position_dodge(.9), stat="identity", colour="black", size=.5, fill = "transparent")+ geom_bar(data=HighlightMeshHoriz3, position=position_dodge(.9), stat="identity", colour="black", size=.5, fill = "transparent")+ geom_bar(data=HighlightMeshHoriz4, position=position_dodge(.9), stat="identity", colour="black", size=.5, fill = "transparent")+ geom_bar(data=HighlightMeshHoriz5, position=position_dodge(.9), stat="identity", colour="black", size=.5, fill = "transparent")+ geom_bar(data=HighlightMeshHoriz6, position=position_dodge(.9), stat="identity", colour="black", size=.5, fill = "transparent")+ geom_bar(data=HighlightMeshHoriz7, position=position_dodge(.9), stat="identity", colour="black", size=.5, fill = "transparent")+ geom_bar(data=HighlightMeshHoriz8, position=position_dodge(.9), stat="identity", colour="black", size=.5, fill = "transparent")+ geom_bar(data=HighlightMeshHoriz9, position=position_dodge(.9), stat="identity", colour="black", size=.5, fill = "transparent")+ geom_bar(data=HighlightMeshHoriz10, position=position_dodge(.9), stat="identity", colour="black", size=.5, fill = "transparent")+ geom_bar(data=HighlightMeshHoriz11, position=position_dodge(.9), stat="identity", colour="black", size=.5, fill = "transparent")+ geom_bar(data=HighlightMeshHoriz12, position=position_dodge(.9), stat="identity", colour="black", size=.5, fill = "transparent")+ geom_bar(data=HighlightMeshHoriz13, position=position_dodge(.9), stat="identity", colour="black", size=.5, fill = "transparent")+ geom_bar(data=HighlightMeshHoriz14, position=position_dodge(.9), stat="identity", colour="black", size=.5, fill = "transparent")+ geom_bar(data=HighlightMeshHoriz15, position=position_dodge(.9), stat="identity", colour="black", size=.5, fill = "transparent")+ geom_bar(data=HighlightMeshHoriz16, position=position_dodge(.9), stat="identity", colour="black", size=.5, fill = "transparent")+ geom_bar(data=HighlightMeshHoriz17, position=position_dodge(.9), stat="identity", colour="black", size=.5, fill = "transparent")
Diag <- data.frame( x = c(1,1,1.45,1.45), y = c(0,0,20,20), x2 = c(1.2,1.2,1.45,1.45), y2 = c(0,0,11.5,11.5), x3 = c(1.38,1.38,1.45,1.45), y3 = c(0,0,3.5,3.5), x4 = c(.8,.8,1.26,1.26), y4 = c(0,0,20,20), x5 = c(.6,.6,1.07,1.07), y5 = c(0,0,20,20), x6 = c(.555,.555,.88,.88), y6 = c(6,6,20,20), x7 = c(.555,.555,.72,.72), y7 = c(13,13,20,20), x8 = c(.8,.8,1.26,1.26), y8 = c(0,0,20,20), Fill = "Diagonal Pattern" )
+geom_path(data=Diag, aes(x=x, y=y),colour = "black")+ geom_path(data=Diag, aes(x=x2, y=y2),colour = "black")+ geom_path(data=Diag, aes(x=x3, y=y3),colour = "black")+ geom_path(data=Diag, aes(x=x4, y=y4),colour = "black")+ geom_path(data=Diag, aes(x=x5, y=y5),colour = "black")+ geom_path(data=Diag, aes(x=x6, y=y6),colour = "black")+ geom_path(data=Diag, aes(x=x7, y=y7),colour = "black")
Example.Data$Variable = Relevel(Example.Data$Variable, ref = c("Diagonal Pattern", "Bubble Pattern","Horizontal Pattern","Mesh Pattern","Vertical Pattern"))
Example.Data$Points <- c(5, 10, 15, 20, 25) Example.Data$Points2 <- c(30, 35, 40, 45, 50) Example.Data$Points3 <- c(55, 60, 65, 70, 75) Example.Data$Points4 <- c(80, 85, 90, 95, 7) Example.Data$Points5 <- c(14, 21, 28, 35, 42) Example.Data$Points6 <- c(49, 56, 63, 71, 78) Example.Data$Points7 <- c(84, 91, 98, 6, 12)
+geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points2, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points2, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points3, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points4, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points2, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points2, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points3, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points4, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points2, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points5, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points5, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points6, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points6, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points7, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points7, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points2, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points2, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points3, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points4, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points2, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points2, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points3, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points4, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points2, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points5, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points5, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points6, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points6, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points7, size=Points), alpha=.5)+ geom_jitter(data=Example.Data,aes(x=Bubbles, y=Points7, size=Points), alpha=.5)
df <- data.frame(x=rep(1:10,2), y=c(1:10,11:20), group=c(rep("a",10),rep("b",10)))
g <- ggplot(df, aes(x=x, y=y, group=group)) g <- g + geom_line(aes(colour=group)) g <- g + geom_point(aes(colour=group, alpha = .8)) g
g <- ggplot(df, aes(x = x, y = y, group = group)) g <- g + geom_line(aes(colour = group)) g <- g + geom_point(aes(colour = group), alpha = 0.8) g
g2 <- ggplot(df, aes(x = x, y = y, group = group)) + geom_line(aes(colour = group)) + geom_point(aes(colour = group, alpha = 0.8)) g2 + scale_alpha(guide =
g <- ggplot(df, aes(x=x, y=y, group=group)) g <- g + geom_line(aes(colour=group)) g <- g + geom_point(aes(colour=group, alpha = .8), show.legend = F)
i <- 1 while(...) { l[[i]] <- new_element i <- i + 1 }
library(ggplot2) qplot(hwy, cty, data = mpg) + facet_grid( . ~ manufacturer)
qplot(hwy, cty, data = mpg) + facet_grid(. ~ manufacturer) + opts(strip.text.x = theme_text(size = 8, colour = "red", angle = 90))
qplot(hwy, cty, data = mpg) + facet_grid(. ~ manufacturer) + theme(strip.text.x = element_text(size = 8, colour = "red", angle = 90))
qplot(hwy, cty, data = mpg) + facet_grid(. ~ manufacturer) + theme(strip.text.x = element_text(size = 8, colour = "red", angle = 90))
c("median_something", "aggregated_average_x","error","something_else")
reformat <– function(x,lab="\n"){ sapply(x, function(c){ paste(unlist(strsplit(as.character(c) , split="_")),collapse=lab) }) }
dataset$variable <- factor(dataset$variable, labels=reformat(dataset$variable, lab=
ggplot(data=dataset, aes(x,y)) + geom_point() + facet_grid(. ~ variable)
require(ggplot2) d = data.frame(x=c(1,4,7,2,9,7), y=c(2,5,4,10,5,3), grp=c( ggplot(d, aes(x, y, group=grp)) + geom_line() ggplot(d, aes(x, y, group=grp)) + geom_line() + scale_y_continuous(limits=c(0,7)) ggplot(d, aes(x, y, group=grp)) + geom_line() + ylim(0,7)
ggplot(d, aes(x, y, group=grp)) + geom_line() + coord_cartesian(ylim=c(0, 7))
shinyUI(pageWithSidebar( headerPanel( sidebarPanel( selectInput("dataset", "Choose a dataset:", choices = c("rock", "pressure", "cars")), downloadButton( downloadButton( ), mainPanel( plotOutput( ) ))
library(ggplot2) shinyServer(function(input, output) { datasetInput <- reactive({ switch(input$dataset, "rock" = rock, "pressure" = pressure, "cars" = cars) }) plotInput <- reactive({ df <- datasetInput() p <-ggplot(df, aes_string(x=names(df)[1], y=names(df)[2])) + geom_point() }) output$plot <- renderPlot({ print(plotInput()) }) output$downloadData <- downloadHandler( filename = function() { paste(input$dataset, content = function(file) { write.csv(datatasetInput(), file) } ) output$downloadPlot <- downloadHandler( filename = function() { paste(input$dataset, content = function(file) { ggsave(file,plotInput()) } ) })
output$downloadPlot <- downloadHandler( filename = function() { paste(input$dataset, content = function(file) { device <- function(..., width, height) grDevices::png(..., width = width, height = height, res = 300, units = "in") ggsave(file, plot = plotInput(), device = device) } )
library(shiny) library(ggplot2) runApp(list( ui = fluidPage(downloadButton( server = function(input, output) { plotInput = function() { qplot(speed, dist, data = cars) } output$foo = downloadHandler( filename = content = function(file) { device <- function(..., width, height) { grDevices::png(..., width = width, height = height, res = 300, units = "in") } ggsave(file, plot = plotInput(), device = device) }) } )) sessionInfo()
output$downloadPlot <- downloadHandler( filename = function() { paste(input$dataset, content = function(file) { ggsave(file, plot = plotInput(), device = "png") } )
output$plot <- reactivePlot(function() { name <- paste0(input$filename, ".png") if(input$savePlot) { ggsave(name, plotInput(), type="cairo-png") } else print(plotInput()) })
output$downloadPlot <- downloadHandler( filename = function() { paste(input$dataset, content = function(file) { png(file) print(plotInput()) dev.off() })
library(devtools) install_github("shiny","rstudio")
output$plot <- renderPlot({ ggsave("plot.pdf", plotInput()) plotInput() })
output$dndPlot <- downloadHandler( filename = function() { "plot.pdf" }, content = function(file) { file.copy("plot.pdf", file, overwrite=TRUE) } )
> x = rnorm(10) > y = runif(10) > df = data.frame( x, y ) > write.table( df, > read.table( df, > df$x [1] -0.95343778 -0.63098637 -1.30646529 1.38906143 0.51703237 -0.02246754 [7] 0.20583548 0.21530721 0.69087460 2.30610998 > df$y [1] 0.66658148 0.15355851 0.60098886 0.14284576 0.20408723 0.58271061 [7] 0.05170994 0.83627336 0.76713317 0.95052671 > df$x = x > df y x 1 0.66658148 -0.95343778 2 0.15355851 -0.63098637 3 0.60098886 -1.30646529 4 0.14284576 1.38906143 5 0.20408723 0.51703237 6 0.58271061 -0.02246754 7 0.05170994 0.20583548 8 0.83627336 0.21530721 9 0.76713317 0.69087460 10 0.95052671 2.30610998 > df[-1,] y x 2 0.15355851 -0.63098637 3 0.60098886 -1.30646529 4 0.14284576 1.38906143 5 0.20408723 0.51703237 6 0.58271061 -0.02246754 7 0.05170994 0.20583548 8 0.83627336 0.21530721 9 0.76713317 0.69087460 10 0.95052671 2.30610998 > df$x = NULL > df y 1 0.66658148 2 0.15355851 3 0.60098886 4 0.14284576 5 0.20408723 6 0.58271061 7 0.05170994 8 0.83627336 9 0.76713317 10 0.95052671
> dat <- data.frame(A = 1:3, B = 1:3) > dat[-1, ] A B 2 2 2 3 3 3 > dat2 <- dat[-1, ] > dat2 A B 2 2 2 3 3 3
df<-data.frame("hi","bye") names(df)<-c("hello","goodbye") de<-data.frame("hola","ciao") merge(df,de)
df<-data.frame("hi","bye") names(df)<-c("hello","goodbye") de<-data.frame("hola","ciao") names(de)<-c("hello","goodbye") newdf <- rbind(df, de)
df <- data.frame(hello=character(), goodbye=character(), volume=double()) de <- list(hello="hi", goodbye="bye", volume=3.0) df = rbind(df,de, stringsAsFactors=FALSE) de <- list(hello="hola", goodbye="ciao", volume=13.1) df = rbind(df,de, stringsAsFactors=FALSE)
df[nrow(df) + 1,] = list(hello="hallo",goodbye="auf wiedersehen", volume=20.2)
> df <- data.frame("hello"= character(0), "goodbye"=character(0)) > df [1] hello goodbye <0 rows> (or 0-length row.names) > df[nrow(df) + 1,] = list("hi","bye") Warning messages: 1: In `[<-.factor`(`*tmp*`, iseq, value = "hi") : invalid factor level, NA generated 2: In `[<-.factor`(`*tmp*`, iseq, value = "bye") : invalid factor level, NA generated > df hello goodbye 1 <NA> <NA> >
> df <- data.frame("hello"= character(0), "goodbye"=character(0), stringsAsFactors=FALSE) > df [1] hello goodbye <0 rows> (or 0-length row.names) > df[nrow(df) + 1,] = list("hi","bye") > df[nrow(df) + 1,] = list("hola","ciao") > df[nrow(df) + 1,] = list(hello="hallo",goodbye="auf wiedersehen") > df hello goodbye 1 hi bye 2 hola ciao 3 hallo auf wiedersehen >
library(tidyverse) df %>% add_row(hello = "hola", goodbye = "ciao")
zz[(nrow(zz)+1):(nrow(zz)+nrow(yy)),] <- yy[1:nrow(yy),]
> rm(list=ls()) > trigonometry <- data.frame(character(0), numeric(0), stringsAsFactors=FALSE) > colnames(trigonometry) <- c("theta", "sin.theta") > trigonometry [1] theta sin.theta <0 rows> (or 0-length row.names) > trigonometry[nrow(trigonometry) + 1, ] <- c("0", sin(0)) > trigonometry[nrow(trigonometry) + 1, ] <- c("pi/2", sin(pi/2)) > trigonometry theta sin.theta 1 0 0 2 pi/2 1 > typeof(trigonometry) [1] "list" > class(trigonometry) [1] "data.frame"
> trigonometry[nrow(trigonometry) + 1, ] <- c("0", sin(0)) Warning message: In `[<-.factor`(`*tmp*`, iseq, value = "0") : invalid factor level, NA generated
> s = "TGAS_1121" > s1 = unlist(strsplit(s, split= > s1 [1] "1121"
> s <- c("TGAS_1121", "MGAS_1432") > s1 <- sapply(strsplit(s, split= > s1 [1] "1121" "1432"
R> library(stringr) R> strings = c("TGAS_1121", "MGAS_1432", "ATGAS_1121") R> strings %>% str_replace(".*_", "_") [1] "_1121" "_1432" "_1121" R> strings %>% str_replace("^[A-Z]*", "") [1] "_1121" "_1432" "_1121"
col1 = c("TGAS_1121", "MGAS_1432", "ATGAS_1121") col2 = c("T", "M", "A") df = data.frame(col1, col2) df col1 col2 1 TGAS_1121 T 2 MGAS_1432 M 3 ATGAS_1121 A df<-mutate(df,col1=as.character(col1)) df2<-mutate(df,col1=sapply(strsplit(df$col1, split= df2 col1 col2 1 1121 T 2 1432 M 3 1121 A
data <- data.frame( i.e. a b c d 1 a d g 2 b e h 3 c f i
data <- data.frame( cols <- c( data$x <- apply( data[ , cols ] , 1 , paste , collapse = "-" ) data <- data[ , !( names( data ) %in% cols ) ]
data$x <- do.call(paste, c(data[cols], sep="-")) for (co in cols) data[co] <- NULL
data <- data.frame( tidyr::unite_(data, paste(colnames(data)[-1], collapse="_"), colnames(data)[-1]) a b_c_d 1 1 a_d_g 2 2 b_e_h 3 3 c_f_i
cols <- c( data$x <- Reduce(function(...) paste(..., sep = "-"), data[cols]) data[setdiff(names(data), cols)]
library(data.table) setDT(data)[, x := Reduce(function(...) paste(..., sep = "-"), .SD[, mget(cols)])] data[, (cols) := NULL] data
setDT(data)[, x := Reduce(function(...) paste(..., sep = "-"), .SD), .SDcols = cols]
> data <- data.frame( + + + > data <- tbl_df(data) > cols <- c("b", "c", "d") > microbenchmark( + do.call(paste, c(data[cols], sep="-")), + apply( data[ , cols ] , 1 , paste , collapse = "-" ), + tidyr::unite_(data, "x", cols, sep="-")$x, + times=1000 + ) Unit: microseconds expr min lq mean median uq max neval do.call(paste, c(data[cols], sep = "-")) 65.248 78.380 93.90888 86.177 99.3090 436.220 1000 apply(data[, cols], 1, paste, collapse = "-") 223.239 263.044 313.11977 289.514 338.5520 743.583 1000 tidyr::unite_(data, "x", cols, sep = "-")$x 376.716 448.120 556.65424 501.877 606.9315 11537.846 1000
> microbenchmark( + do.call(paste, c(data[c("a", "b")], sep="-")), + apply( data[ , c("a", "b") ] , 1 , paste , collapse = "-" ), + tidyr::unite_(data, "c", c("a", "b"), sep="-")$c, + times=25 + ) Unit: milliseconds expr min lq mean median uq max neval do.call(paste, c(data[c("a", "b")], sep="-")) 930.7208 951.3048 1129.334 997.2744 1066.084 2169.147 25 apply( data[ , c("a", "b") ] , 1 , paste , collapse = "-" ) 9368.2800 10948.0124 11678.393 11136.3756 11878.308 17587.617 25 tidyr::unite_(data, "c", c("a", "b"), sep="-")$c 968.5861 1008.4716 1095.886 1035.8348 1082.726 1759.349 25
data.frame(a = d$a, x = do.call(sprintf, c(d[cols],
d2 <- d[sample(1:3,1e6,TRUE),] library(microbenchmark) microbenchmark( docp = do.call(paste, c(d2[cols], sep="-")), appl = apply( d2[, cols ] , 1 , paste , collapse = "-" ), tidr = tidyr::unite_(d2, "x", cols, sep="-")$x, docs = do.call(sprintf, c(d2[cols], times=10)
Unit: milliseconds expr min lq mean median uq max neval cld docp 214.1786 226.2835 297.1487 241.6150 409.2495 493.5036 10 a appl 3832.3252 4048.9320 4131.6906 4072.4235 4255.1347 4486.9787 10 c tidr 206.9326 216.8619 275.4556 252.1381 318.4249 407.9816 10 a docs 413.9073 443.1550 490.6520 453.1635 530.1318 659.8400 10 b
library(plyr) ldply(apply(data, 1, function(x) data.frame( x = paste(x[2:4],sep="",collapse="-")))) ldply(apply(data, 1, function(x) data.frame( x = paste(x[c( mynames <-c( ldply(apply(data, 1, function(x) data.frame( x = paste(x[mynames],sep="",collapse="-"))))
q.data<-data.frame(number=1:3, string=c("greatgreat", "magic", "not"))
string.counter<-function(strings, pattern){ counts<-NULL for(i in 1:length(strings)){ counts[i]<-length(attr(gregexpr(pattern,strings[i])[[1]], "match.length")[attr(gregexpr(pattern,strings[i])[[1]], "match.length")>0]) } return(counts) } string.counter(strings=q.data$string, pattern="a") number string number.of.a 1 1 greatgreat 2 2 2 magic 1 3 3 not 0
q.data<-data.frame(number=1:3, string=c("greatgreat", "magic", "not"), stringsAsFactors = F) library(stringr) q.data$number.of.a <- str_count(q.data$string, "a") q.data
x <- q.data$string lengths(regmatches(x, gregexpr("g", x)))
nchar(as.character(q.data$string)) -nchar( gsub("a", "", q.data$string)) [1] 2 1 0
q.data<-q.data[rep(1:NROW(q.data), 1000),] str(q.data) $ number : int 1 2 3 1 2 3 1 2 3 1 ... $ string : Factor w/ 3 levels "greatgreat","magic",..: 1 2 3 1 2 3 1 2 3 1 ... $ number.of.a: int 2 1 0 2 1 0 2 1 0 2 ... benchmark( Dason = { q.data$number.of.a <- str_count(as.character(q.data$string), "a") }, Tim = {resT <- sapply(as.character(q.data$string), function(x, letter = "a"){ sum(unlist(strsplit(x, split = "")) == letter) }) }, DWin = {resW <- nchar(as.character(q.data$string)) -nchar( gsub("a", "", q.data$string))}, Josh = {x <- sapply(regmatches(q.data$string, gregexpr("g",q.data$string )), length)}, replications=100) test replications elapsed relative user.self sys.self user.child sys.child 1 Dason 100 4.173 9.959427 2.985 1.204 0 0 3 DWin 100 0.419 1.000000 0.417 0.003 0 0 4 Josh 100 18.635 44.474940 17.883 0.827 0 0 2 Tim 100 3.705 8.842482 3.646 0.072 0 0
sapply(as.character(q.data$string), function(x, letter = "a"){ sum(unlist(strsplit(x, split = "")) == letter) }) greatgreat magic not 2 1 0
countLetter <- function(charvec, letter){ sapply(charvec, function(x, letter){ sum(unlist(strsplit(x, split = "")) == letter) }, letter = letter) } countLetter(as.character(q.data$string),"a")
s <- "aababacababaaathhhhhslsls jsjsjjsaa ghhaalll" p <- "a" s2 <- gsub(p,"",s) numOcc <- nchar(s) - nchar(s2)
HowManySpaces<-nchar(DF$string)-nchar(gsub(" ","",DF$string))
require(roperators) my_strings <- c( my_strings %s/%
Month count 2009-01 12 2009-02 310 2009-03 2379 2009-04 234 2009-05 14 2009-08 1 2009-09 34 2009-10 2386
Lines <- "2009-01 12 2009-02 310 2009-03 2379 2009-04 234 2009-05 14 2009-08 1 2009-09 34 2009-10 2386" library(zoo) z <- read.zoo(text = Lines, FUN = as.yearmon) plot(z)
> z Jan 2009 Feb 2009 Mar 2009 Apr 2009 May 2009 Aug 2009 Sep 2009 Oct 2009 12 310 2379 234 14 1 34 2386
month <- "2009-03" as.Date(paste(month,"-01",sep=""))
library(zoo) month <- "2000-03" as.Date(as.yearmon(month)) [1] "2000-03-01"
> parse_date_time(dates1, "ym") [1] "2009-01-01 UTC" "2009-02-01 UTC" "2009-03-01 UTC" > fast_strptime(dates1, "%Y-%m") [1] "2009-01-01 UTC" "2009-02-01 UTC" "2009-03-01 UTC"
> parse_date_time(dates1, "ym", tz = "CET") [1] "2009-01-01 CET" "2009-02-01 CET" "2009-03-01 CET"
> parse_date_time(dates2, "ymdHMS", truncated = 3) [1] "2012-06-01 12:23:00 UTC" "2012-06-01 12:00:00 UTC" "2012-06-01 00:00:00 UTC"
dates1 <- c("2009-01","2009-02","2009-03") dates2 <- c("2012-06-01 12:23","2012-06-01 12",
d <- as.Date("1971-01-01") unclass(d) pct <- Sys.time() unclass(pct) plt <- as.POSIXlt(pct) up <- unclass(plt) names(up) up$hour
strptime("20/2/06 11:16:16.683", "%d/%m/%y %H:%M:%OS") dates <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960") strptime(dates, "%d%b%Y")
> devtools::session_info() Session info ---------------------------------------------------------------------------------------------------------------------------------------------------- setting value version R version 3.3.1 (2016-06-21) system x86_64, linux-gnu ui RStudio (1.0.35) language (EN) collate C tz <NA> date 2016-11-09 Packages -------------------------------------------------------------------------------------------------------------------------------------------------------- package * version date source devtools 1.12.0 2016-06-24 CRAN (R 3.3.1) digest 0.6.10 2016-08-02 CRAN (R 3.2.3) memoise 1.0.0 2016-01-29 CRAN (R 3.2.3) withr 1.0.2 2016-06-20 CRAN (R 3.2.3) > as.Date(zoo::as.yearmon("1989-10", "%Y-%m")) Error in as.Date.default(zoo::as.yearmon("1989-10", "%Y-%m")) : do not know how to convert > zoo::as.Date(zoo::as.yearmon("1989-10", "%Y-%m")) [1] "1989-10-01"
uniq <- structure(list(year = c(1986L, 1987L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 2014L, 1986L, 1987L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 2014L, 1986L, 1987L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 2014L), uniq.loc = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c("u.1", "u.2", "u.3"), class = "factor"), uniq.n = c(1, 1, 1, 2, 5, 4, 2, 16, 16, 10, 15, 14, 8, 12, 20, 11, 17, 30, 17, 21, 22, 19, 34, 44, 56, 11, 0, 0, 3, 3, 7, 17, 12, 21, 18, 10, 12, 9, 7, 11, 25, 14, 11, 17, 12, 24, 59, 17, 36, 50, 59, 12, 0, 0, 0, 1, 4, 6, 3, 3, 9, 3, 4, 2, 5, 2, 12, 6, 8, 8, 3, 2, 9, 5, 20, 7, 10, 8), uniq.p = c(100, 100, 25, 33.3, 31.2, 14.8, 11.8, 40, 37.2, 43.5, 48.4, 56, 40, 48, 35.1, 35.5, 47.2, 54.5, 53.1, 44.7, 24.4, 46.3, 37.8, 43.6, 44.8, 35.5, 0, 0, 75, 50, 43.8, 63, 70.6, 52.5, 41.9, 43.5, 38.7, 36, 35, 44, 43.9, 45.2, 30.6, 30.9, 37.5, 51.1, 65.6, 41.5, 40, 49.5, 47.2, 38.7, 0, 0, 0, 16.7, 25, 22.2, 17.6, 7.5, 20.9, 13, 12.9, 8, 25, 8, 21.1, 19.4, 22.2, 14.5, 9.4, 4.3, 10, 12.2, 22.2, 6.9, 8, 25.8)), .Names = c("year", "uniq.loc", "uniq.n", "uniq.p"), class = "data.frame", row.names = c(NA, -78L))
ggplot(data = uniq) + geom_area(aes(x = year, y = uniq.p, fill = uniq.loc), stat = "identity", position = "stack") + scale_x_continuous(limits=c(1986,2014)) + scale_y_continuous(limits=c(0,101)) + theme_bw()
Error in theme(panel.grid = element_blank(), panel.margin = unit(-0.8, : could not find function "unit"
ggplot(data = uniq) + geom_area(aes(x = year, y = uniq.p, fill = uniq.loc), stat = "identity", position = "stack") + scale_x_continuous(limits = c(1986,2014), expand = c(0, 0)) + scale_y_continuous(limits = c(0,101), expand = c(0, 0)) + theme_bw() + theme(panel.grid = element_blank(), panel.border = element_blank())
ggplot(data = uniq) + geom_area(aes(x = year, y = uniq.p, fill = uniq.loc), stat = "identity", position = "stack") + coord_cartesian(xlim = c(1986,2014), ylim = c(0,101))+ theme_bw() + theme(panel.grid=element_blank(), panel.border=element_blank())
ggplot(data = uniq) + geom_area(aes(x = year, y = uniq.p, fill = uniq.loc), stat = "identity", position = "stack") + scale_x_continuous(limits = c(1986,2014), expand = c(0, 0)) + scale_y_continuous(limits = c(0,101), expand = expand_scale(mult = c(0, .1))) + theme_bw()
df <- data.frame(month=rep(1:3,2), student=rep(c("Amy", "Bob"), each=3), A=c(9, 7, 6, 8, 6, 9), B=c(6, 7, 8, 5, 6, 7))
> df[, -4] %>% spread(student, A) month Amy Bob 1 1 9 8 2 2 7 6 3 3 6 9
month Amy.A Bob.A Amy.B Bob.B 1 1 9 8 6 5 2 2 7 6 7 6 3 3 6 9 8 7
library(data.table) dcast(setDT(df), month ~ student, value.var = c("A", "B"))
df %>% gather(variable, value, -(month:student)) %>% unite(temp, student, variable) %>% spread(temp, value)
edd@max:~$ R R version 2.14.1 (2011-12-22) Copyright (C) 2011 The R Foundation for Statistical Computing ISBN 3-900051-07-0 Platform: x86_64-pc-linux-gnu (64-bit) [...] R> suppressMessages(library(ROCR)) R> R> search() [1] ".GlobalEnv" "package:ROCR" [3] "package:gplots" "package:KernSmooth" [5] "package:grid" "package:caTools" [7] "package:bitops" "package:gdata" [9] "package:gtools" "package:stats" [11] "package:graphics" "package:grDevices" [13] "package:utils" "package:datasets" [15] "package:methods" "Autoloads" [17] "package:base" R>
suppressPackageStartupMessages(library(THE_PACKAGE_NAME))
suppressWarnings(suppressMessages(library("dplyr", quietly = T)))
PKGs <- c("affy","gcrma","readxl","ggplot2","lattice" )
lapply(PKGs, library, character.only = TRUE ,quietly = T)
sum (..., na.rm = FALSE) .Primitive("sum") .Primitive("sum") function (..., na.rm = FALSE) .Primitive("sum") methods(sum) no methods were found
function (q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE) .Call(C_pnorm, q, mean, sd, lower.tail, log.p)
body(match.call) pryr::show_c_source(.Internal(match.call(definition, call, expand.dots)))
> methods(mean) [1] mean.data.frame mean.Date mean.default mean.difftime mean.IDate* [6] mean.POSIXct mean.POSIXlt mean.yearmon* mean.yearqtr* Non-visible functions are asterisked > mean.default function (x, trim = 0, na.rm = FALSE, ...) { if (!is.numeric(x) && !is.complex(x) && !is.logical(x)) { warning("argument is not numeric or logical: returning NA") return(NA_real_) } if (na.rm) x <- x[!is.na(x)] if (!is.numeric(trim) || length(trim) != 1L) stop(" n <- length(x) if (trim > 0 && n) { if (is.complex(x)) stop("trimmed means are not defined for complex data") if (any(is.na(x))) return(NA_real_) if (trim >= 0.5) return(stats::median(x, na.rm = FALSE)) lo <- floor(n * trim) + 1 hi <- n + 1 - lo x <- sort.int(x, partial = unique(c(lo, hi)))[lo:hi] } .Internal(mean(x)) } <bytecode: 0x155ef58> <environment: namespace:base>
head(results) act pred resid 2 52.81000 52.86750 -0.05750133 3 44.46000 42.76825 1.69175252 4 54.58667 49.00482 5.58184181 5 36.23333 35.52386 0.70947731 6 53.22667 48.79429 4.43237981 7 41.72333 41.57504 0.14829173
library(reshape2) plot <- melt(results, id.vars = "pred")
library(ggplot2) p <- ggplot(plot, aes(x = pred, y = value)) + geom_point(size = 2.5) + theme_bw() p <- p + facet_wrap(~variable, scales = "free") print(p)
min_xy <- min(min(plot$pred), min(plot$value)) max_xy <- max(max(plot$pred), max(plot$value)) p <- ggplot(plot, aes(x = pred, y = value)) + geom_point(size = 2.5) + theme_bw() p <- p + facet_wrap(~variable, scales = "free") p <- p + scale_x_continuous(limits = c(min_xy, max_xy)) p <- p + scale_y_continuous(limits = c(min_xy, max_xy)) print(p)
head(results) act pred resid 2 52.81000 52.86750 -0.05750133 3 44.46000 42.76825 1.69175252 4 54.58667 49.00482 5.58184181 5 36.23333 35.52386 0.70947731 min_xy <- min(min(results$act), min(results$pred)) max_xy <- max(max(results$act), max(results$pred)) plot <- melt(results, id.vars = "pred") plot <- rbind(plot, data.frame(pred = c(min_xy, max_xy), variable = c("act", "act"), value = c(max_xy, min_xy))) p <- ggplot(plot, aes(x = pred, y = value)) + geom_point(size = 2.5) + theme_bw() p <- p + facet_wrap(~variable, scales = "free") print(p)
> dput(results) structure(list(act = c(52.81, 44.46, 54.5866666666667, 36.2333333333333, 53.2266666666667, 41.7233333333333, 35.2966666666667, 30.6833333333333, 39.25, 35.8866666666667, 25.1, 29.0466666666667, 23.2766666666667, 56.3866666666667, 42.92, 41.57, 27.92, 23.16, 38.0166666666667, 61.8966666666667, 37.41, 41.6333333333333, 35.9466666666667, 48.9933333333333, 30.5666666666667, 32.08, 40.3633333333333, 53.2266666666667, 64.6066666666667, 38.5366666666667, 41.7233333333333, 25.78, 33.4066666666667, 27.8033333333333, 39.3266666666667, 48.9933333333333, 25.2433333333333, 32.67, 55.17, 42.92, 54.5866666666667, 23.16, 64.6066666666667, 40.7966666666667, 39.0166666666667, 41.6333333333333, 35.8866666666667, 25.1, 23.2766666666667, 44.46, 34.2166666666667, 40.8033333333333, 24.5766666666667, 35.73, 61.8966666666667, 62.1833333333333, 74.6466666666667, 39.4366666666667, 36.6, 27.1333333333333), pred = c(52.8675013282404, 42.7682474758679, 49.0048248585123, 35.5238560262515, 48.7942868566949, 41.5750416040131, 33.9548164913007, 29.9787449128663, 37.6443975781139, 36.7196211666685, 27.6043278172077, 27.0615724310721, 31.2073056885252, 55.0886903524179, 43.0895814712768, 43.0895814712768, 32.3549865881578, 26.2428426737583, 36.6926037128343, 56.7987490221996, 45.0370788180147, 41.8231642271826, 38.3297859332601, 49.5343916620086, 30.8535641206809, 29.0117492750411, 36.9767968381391, 49.0826677983065, 54.4678549541069, 35.5059204731218, 41.5333417555995, 27.6069075391361, 31.2404889715121, 27.8920960978598, 37.8505531149324, 49.2616631533957, 30.366837650159, 31.1623492639066, 55.0456078770405, 42.772538591063, 49.2419293590535, 26.1963523976241, 54.4080781796616, 44.9796700541254, 34.6996927469131, 41.6227713664027, 36.8449646519306, 27.5318686661673, 31.6641793552795, 42.8198894266632, 40.5769177148146, 40.5769177148146, 29.3807781312816, 36.8579132935989, 55.5617033901752, 55.8097119335638, 55.1041728261666, 43.6094641699075, 37.0674887276681, 27.3876960746536), resid = c(-0.0575013282403773, 1.69175252413213, 5.58184180815435, 0.709477307081826, 4.43237980997177, 0.148291729320228, 1.34185017536599, 0.704588420467079, 1.60560242188613, -0.832954500001826, -2.50432781720766, 1.98509423559461, -7.93063902185855, 1.29797631424874, -0.169581471276786, -1.51958147127679, -4.43498658815778, -3.08284267375831, 1.32406295383237, 5.09791764446704, -7.62707881801468, -0.189830893849219, -2.38311926659339, -0.541058328675241, -0.286897454014273, 3.06825072495888, 3.38653649519422, 4.14399886836018, 10.1388117125598, 3.03074619354486, 0.189991577733821, -1.82690753913609, 2.16617769515461, -0.088762764526507, 1.47611355173427, -0.268329820062384, -5.12350431682565, 1.5076507360934, 0.124392122959534, 0.147461408936991, 5.34473730761318, -3.03635239762411, 10.1985884870051, -4.18300338745873, 4.31697391975358, 0.0105619669306023, -0.958297985263961, -2.43186866616734, -8.38751268861282, 1.64011057333683, -6.36025104814794, 0.226415618518729, -4.80411146461488, -1.1279132935989, 6.33496327649151, 6.37362139976954, 19.5424938405001, -4.17279750324084, -0.467488727668119, -0.254362741320246)), .Names = c("act", "pred", "resid"), row.names = c(2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 41L, 42L, 43L, 44L, 45L, 46L, 47L, 48L, 49L, 50L, 51L, 52L, 54L, 55L, 56L, 57L, 58L, 59L, 60L, 61L, 62L, 63L, 64L, 65L ), class = "data.frame")
range_act <- range(range(results$act), range(results$pred)) d <- reshape2::melt(results, id.vars = "pred") dummy <- data.frame(pred = range_act, value = range_act, variable = "act", stringsAsFactors=FALSE) ggplot(d, aes(x = pred, y = value)) + facet_wrap(~variable, scales = "free") + geom_point(size = 2.5) + geom_blank(data=dummy) + theme_bw()
p <- ggplot(plot, aes(x = pred, y = value)) + geom_point(size = 2.5) + theme_bw() p <- p + facet_wrap(~variable, scales = "free_x")
p <- ggplot(plot, aes(x = pred, y = value)) + geom_point(size = 2.5) + theme_bw()+ coord_cartesian(ylim = c(-20, 80)) p <- p + facet_wrap(~variable, scales = "free_x") p
library( DT <- data.table(x = c("b","b","b","a","a"), v = rnorm(5))
f1 f2 f3 f4 f5 d1 1 0 1 1 1 d2 1 0 0 1 0 d3 0 0 0 1 1 d4 0 1 0 0 1
f1 f2 f3 f4 f5 d1 1 0 0 0 1 d2 0 1 0 1 1 d3 1 0 0 1 1 d4 0 0 1 1 0
f1 f2 f3 f4 f5 d1 0 1 1 1 1 <- two entries are different d2 0 0 1 0 1 <- four entries are different d3 1 0 0 0 1 <- two entries are different d4 0 0 1 0 1 <- two entries are different
> df2 <- df1[sample(nrow(df1)),] > df2 a b c 3 0 1 0 4 0 0 0 2 1 0 0 1 1 1 0
> df3 <- df1[,sample(ncol(df1))] > df3 c a b 1 0 1 1 2 0 1 0 3 0 0 1 4 0 0 0
mat <- matrix(c(1,1,0,0,0,0,0,1,1,0,0,0,1,1,1,0,1,0,1,1), ncol = 5) set.seed(4) out <- permatswap(mat, times = 99, burnin = 20000, thin = 500, mtype = "prab")
R> out$perm[[1]] [,1] [,2] [,3] [,4] [,5] [1,] 1 0 1 1 1 [2,] 0 1 0 1 0 [3,] 0 0 0 1 1 [4,] 1 0 0 0 1 R> out$perm[[2]] [,1] [,2] [,3] [,4] [,5] [1,] 1 1 0 1 1 [2,] 0 0 0 1 1 [3,] 1 0 0 1 0 [4,] 0 0 1 0 1
out <- permatswap(mat, times = 99, burnin = 20000, thin = 500, mtype = "prab")
test <- matrix(c(1,1,0,1,0,1,0,0,1,0,0,1,0,1,0,0),nrow=4,ncol=4) > test [,1] [,2] [,3] [,4] [1,] 1 0 1 0 [2,] 1 1 0 1 [3,] 0 0 0 0 [4,] 1 0 1 0 randomizeMatrix(test,null.model = "frequency",iterations = 1000) [,1] [,2] [,3] [,4] [1,] 0 1 0 1 [2,] 1 0 0 0 [3,] 1 0 1 0 [4,] 1 0 1 0 randomizeMatrix(test,null.model = "richness",iterations = 1000) [,1] [,2] [,3] [,4] [1,] 1 0 0 1 [2,] 1 1 0 1 [3,] 0 0 0 0 [4,] 1 0 1 0 >
sapply (1:4, function (row) df1[row,]<<-sample(df1[row,]))
trace(utils:::unpackPkgZip, quote(Sys.sleep(2)), at = which(grepl("Sys.sleep", body(utils:::unpackPkgZip), fixed = TRUE)))
selectedRows <- conservedData[, conservedData$miRNA %like% "hsa-"]
library(data.table) mtcars[rownames(mtcars) %like% "Merc", ] iris[iris$Species %like% "osa", ]
mtcars[grep("Merc", rownames(mtcars)), ] mpg cyl disp hp drat wt qsec vs am gear carb
irisSubset <- iris[grep("osa", iris$Species), ] head(irisSubset)
selectedRows <- conservedData[grep("hsa-", conservedData$miRNA), ]
library(stringr) library(dplyr) CO2 %>% filter(str_detect(Treatment, "non")) Plant Type Treatment conc uptake 1 Qn1 Quebec nonchilled 95 16.0 2 Qn1 Quebec nonchilled 175 30.4 3 Qn1 Quebec nonchilled 250 34.8 4 Qn1 Quebec nonchilled 350 37.2 5 Qn1 Quebec nonchilled 500 35.3 ...
require(sqldf) df <- data.frame(name = c( sqldf("select * from df where name LIKE name id 1 robert 2 2 peter 3
library(dplyr) library(reshape2) (df=dput(structure(list(sex = structure(c(1L, 1L, 2L, 2L), .Label = c("boy", "girl"), class = "factor"), age = c(52L, 58L, 40L, 62L), bmi = c(25L, 23L, 30L, 26L), chol = c(187L, 220L, 190L, 204L)), .Names = c("sex", "age", "bmi", "chol"), row.names = c(NA, -4L), class = "data.frame"))) sex age bmi chol 1 boy 52 25 187 2 boy 58 23 220 3 girl 40 30 190 4 girl 62 26 204 dg=group_by(df,sex)
dm=melt(df, id.var= dmg=group_by(dm, sex, variable); x=summarise(dmg, means=mean(value)) dcast(x, sex~variable)
DT <- data.table(df) DT[, lapply(.SD, mean), by = sex]
dg <- group_by(df, sex) cols <- names(dg)[-1] dots <- sapply(cols ,function(x) substitute(mean(x), list(x=as.name(x)))) do.call(summarise, c(list(.data=dg), dots))
df %>% group_by(sex) %>% summarise_each(funs(mean))
> invisible(cat("Hi\n")) Hi > capture.output( cat("Hi\n"), file= >
log <- capture.output({ test <- CensReg.SMN(cc=cc,x=x,y=y, nu=NULL, type="Normal") }) test$betas
hush=function(code){ sink("NUL") tmp = code sink() return(tmp) }
invisible(cat("Dataset: ", dataset, fill = TRUE)) invisible(cat(" Width: " ,width, fill = TRUE)) invisible(cat(" Bin1: " ,bin1interval, fill = TRUE)) invisible(cat(" Bin2: " ,bin2interval, fill = TRUE)) invisible(cat(" Bin3: " ,bin3interval, fill = TRUE))
Dataset: 17 19 26 29 31 32 34 45 47 51 52 59 60 62 63 Width: 15.33333 Bin1: 17 32.33333 Bin2: 32.33333 47.66667 Bin3: 47.66667 63
emake <- function(){ options("warn"=-1) e <- 0 for (n in 0:2000){ e <- e+ 1/(factorial(n)) } return(e) } e <- emake() e^10 exp(10) e <- sum(1/factorial(0:100))
+-----+-------+ | V1 | V2 | +-----+-------+ | 1 | a,b,c | | 2 | a,c | | 3 | b,d | | 4 | e,f | | . | . | +-----+-------+
+----+----+ | V1 | V2 | +----+----+ | 1 | a | | 1 | b | | 1 | c | | 2 | a | | 2 | c | | 3 | b | | 3 | d | | 4 | e | | 4 | f | +----+----+
df <- read.table(textConnection("1|a,b,c\n2|a,c\n3|b,d\n4|e,f"), header = F, sep = "|", stringsAsFactors = F) df s <- strsplit(df$V2, split = ",") data.frame(V1 = rep(df$V1, sapply(s, length)), V2 = unlist(s))
> library(tidyr) > library(dplyr) > mydf V1 V2 2 1 a,b,c 3 2 a,c 4 3 b,d 5 4 e,f 6 . . > mydf %>% mutate(V2 = strsplit(as.character(V2), ",")) %>% unnest(V2) V1 V2 1 1 a 2 1 b 3 1 c 4 2 a 5 2 c 6 3 b 7 3 d 8 4 e 9 4 f 10 . .
> head(mydf) geneid chrom start end strand length gene_count ENSG00000223972.5 chr1;chr1;chr1;chr1;chr1;chr1;chr1;chr1;chr1 11869;12010;12179;12613;12613;12975;13221;13221;13453 12227;12057;12227;12721;12697;13052;13374;14409;13670 +;+;+;+;+;+;+;+;+ 1735 11 ENSG00000227232.5 chr1;chr1;chr1;chr1;chr1;chr1;chr1;chr1;chr1;chr1;chr1 14404;15005;15796;16607;16858;17233;17606;17915;18268;24738;29534 14501;15038;15947;16765;17055;17368;17742;18061;18366;24891;29570 -;-;-;-;-;-;-;-;-;-;- 1351 380 ENSG00000278267.1 chr1 17369 17436 - 68 14 ENSG00000243485.4 chr1;chr1;chr1;chr1;chr1 29554;30267;30564;30976;30976 30039;30667;30667;31097;31109 +;+;+;+;+ 1021 22 ENSG00000237613.2 chr1;chr1;chr1 34554;35277;35721 35174;35481;36081 -;-;- 1187 24 ENSG00000268020.3 chr1 52473 53312 + 840 14 > mydf %>% separate_rows(strand, chrom, gene_start, gene_end) geneid length gene_count strand chrom start end ENSG00000223972.5 1735 11 + chr1 11869 12227 ENSG00000223972.5 1735 11 + chr1 12010 12057 ENSG00000223972.5 1735 11 + chr1 12179 12227 ENSG00000223972.5 1735 11 + chr1 12613 12721 ENSG00000223972.5 1735 11 + chr1 12613 12697 ENSG00000223972.5 1735 11 + chr1 12975 13052 ENSG00000223972.5 1735 11 + chr1 13221 13374 ENSG00000223972.5 1735 11 + chr1 13221 14409 ENSG00000223972.5 1735 11 + chr1 13453 13670 ENSG00000227232.5 1351 380 - chr1 14404 14501 ENSG00000227232.5 1351 380 - chr1 15005 15038 ENSG00000227232.5 1351 380 - chr1 15796 15947 ENSG00000227232.5 1351 380 - chr1 16607 16765 ENSG00000227232.5 1351 380 - chr1 16858 17055 ENSG00000227232.5 1351 380 - chr1 17233 17368 ENSG00000227232.5 1351 380 - chr1 17606 17742 ENSG00000227232.5 1351 380 - chr1 17915 18061 ENSG00000227232.5 1351 380 - chr1 18268 18366 ENSG00000227232.5 1351 380 - chr1 24738 24891 ENSG00000227232.5 1351 380 - chr1 29534 29570 ENSG00000278267.1 68 5 - chr1 17369 17436 ENSG00000243485.4 1021 8 + chr1 29554 30039 ENSG00000243485.4 1021 8 + chr1 30267 30667 ENSG00000243485.4 1021 8 + chr1 30564 30667 ENSG00000243485.4 1021 8 + chr1 30976 31097 ENSG00000243485.4 1021 8 + chr1 30976 31109 ENSG00000237613.2 1187 24 - chr1 34554 35174 ENSG00000237613.2 1187 24 - chr1 35277 35481 ENSG00000237613.2 1187 24 - chr1 35721 36081 ENSG00000268020.3 840 0 + chr1 52473 53312
d.df <- read.table(header=T, text="V1 | V2 1 | a,b,c 2 | a,c 3 | b,d 4 | e,f", stringsAsFactors=F, sep="|", strip.white = TRUE) require(data.table) d.dt <- data.table(d.df, key="V1") out <- d.dt[, list(V2 = unlist(strsplit(V2, ","))), by=V1] > sapply(out$V2, nchar)
library(tidyr) (df <- read.table(textConnection("1|a,b,c\n2|a,c\n3|b,d\n4|e,f"), header = F, sep = "|", stringsAsFactors = F))
V1 V2 1 1 a 2 1 b 3 1 c 4 2 a 5 2 c 6 3 b 7 3 d 8 4 e 9 4 f
temp <- data.frame(Ind = mydf$V1, read.csv(text = as.character(mydf$V2), header = FALSE)) temp1 <- reshape(temp, direction = "long", idvar = "Ind", timevar = "time", varying = 2:ncol(temp), sep = "") temp1[!temp1$V == "", c("Ind", "V")]
stack( setNames( sapply(strsplit(mydf$V2, ","), function(x) gsub("^\\s|\\s$", "", x)), mydf$V1)) values ind 1 a 1 2 b 1 3 c 1 4 a 2 5 c 2 6 b 3 7 d 3 8 e 4 9 f 4
DT = data.table(read.table(header=T, text="blah | splitme T | a,b,c T | a,c F | b,d F | e,f", stringsAsFactors=F, sep="|", strip.white = TRUE)) DT[,.( blah , splitme , splitted=unlist(strsplit(splitme, ",")) ),by=seq_len(nrow(DT))]
.( blah , splitme , splitted = unlist(strsplit(splitme, ",")) )
library(stringi) stri_extract_all_regex(str1, stri_extract_all_regex(x1, stri_extract_all_regex(x2,
library(stringi) set.seed(24) x3 <- stri_rand_strings(1, 1e4) akrun <- function() stri_extract_all_regex(x3, thelate <- function() regmatches(x3,gregexpr("(?:(\\w))\\1*", x3, perl=TRUE))[[1]] rawr <- function() strsplit(x3, ananda <- function() unlist(read.fwf(textConnection(x3), rle(strsplit(x3, "")[[1]])$lengths, colClasses = "character")) Colonel <- function() with(rle(strsplit(x3, mapply(function(u,v) paste0(rep(v,u), collapse= Cryo <- function(){ res_vector=rep(NA_character_,nchar(x3)) res_vector[1]=substr(x3,1,1) counter=1 old_tmp= for (i in 2:nchar(x3)) { tmp=substr(x3,i,i) if (tmp==old_tmp) { res_vector[counter]=paste0(res_vector[counter],tmp) } else { res_vector[counter+1]=tmp counter=counter+1 } old_tmp=tmp } res_vector[!is.na(res_vector)] } richard <- function(){ cs <- cumsum( rle(stri_split_boundaries(x3, type = "character")[[1L]])$lengths ) stri_sub(x3, c(1, head(cs + 1, -1)), cs) } nicola<-function(x) { indices<-c(0,which(diff(as.integer(charToRaw(x)))!=0),nchar(x)) substring(x,indices[-length(indices)]+1,indices[-1]) } richard2 <- function() { cs <- cumsum(rle(strsplit(x3, NULL)[[1L]])[[1L]]) stri_sub(x3, c(1, head(cs + 1, -1)), cs) } system.time(akrun()) system.time(thelate()) system.time(rawr()) system.time(ananda()) system.time(Colonel()) system.time(Cryo()) system.time(richard()) system.time(nicola(x3))
set.seed(24) x3 <- stri_rand_strings(1, 1e6) system.time(akrun()) system.time(richard()) system.time(richard2()) system.time(Colonel()) library(microbenchmark) microbenchmark(richard(), richard2(), akrun(), times=20L, unit=
str1 <- "111110000011110000111000" x1 <- "1111100000222000333300011110000111000" x2 <- "aaaaabbcccccccbbbad1111100000222aaabbccd11DaaBB"
x <- "111110000011110000111000" regmatches(x,gregexpr("1+|0+",x))[[1]]
x <- "111110000011110000111000" unlist(read.fwf(textConnection(x), rle(strsplit(x, "")[[1]])$lengths, colClasses = "character"))
x <- paste(c(rep("a", 5), rep("b", 2), rep("c", 7), rep("b", 3), rep("a", 1), rep("d", 1)), collapse = "") x unlist(read.fwf(textConnection(x), rle(strsplit(x, "")[[1]])$lengths, colClasses = "character"))
x <- "111110000011110000111000" (y <- gsub( strsplit(y,
x <- "aaaaabbcccccccbbbad" strsplit(x, x <- "111110000011110000111000" strsplit(x,
x <- "1111100000222000333300011110000111000" (z <- gsub(
x <- "111110000011110000111000" library(stringi) cs <- cumsum( rle(stri_split_boundaries(x, type = "character")[[1L]])$lengths ) stri_sub(x, c(1L, head(cs + 1L, -1L)), cs)
rl <- rle(stri_split_boundaries(x, type = "character")[[1L]]) with(rl, { stri_sub(x, c(1L, head(cumsum(lengths) + 1L, -1L)), length = lengths) })
set.seed(24) x3 <- stri_rand_strings(1L, 1e6L) system.time({ cs <- cumsum(rle(strsplit(x3, NULL)[[1L]])[[1L]]) substring(x3, c(1L, head(cs + 1L, -1L)), cs) })
x="111110000011110000111000" with(rle(strsplit(x, mapply(function(u,v) paste0(rep(v,u), collapse=
library(Rcpp) cppFunction( std::vector<std::string> parts; int start = 0; for(int i = 1; i <= x.length(); i++) { if(x[i] != x[i-1]) { parts.push_back(x.substr(start, i-start)); start = i; } } return parts; }
str1 <- "111110000011110000111000" x1 <- "1111100000222000333300011110000111000" x2 <- "aaaaabbcccccccbbbad1111100000222aaabbccd11DaaBB"
> split_str_cpp(str1) [1] "11111" "00000" "1111" "0000" "111" "000" > split_str_cpp(x1) [1] "11111" "00000" "222" "000" "3333" "000" "1111" "0000" "111" "000" > split_str_cpp(x2) [1] "aaaaa" "bb" "ccccccc" "bbb" "a" "d" "11111" "00000" "222" "aaa" "bb" "cc" "d" "11" [15] "D" "aa" "BB"
akrun <- function(str1) strsplit(str1, richard1 <- function(x3){ cs <- cumsum( rle(stri_split_boundaries(x3, type = "character")[[1L]])$lengths ) stri_sub(x3, c(1, head(cs + 1, -1)), cs) } richard2 <- function(x3) { cs <- cumsum(rle(strsplit(x3, NULL)[[1L]])[[1L]]) stri_sub(x3, c(1, head(cs + 1, -1)), cs) } library(microbenchmark) library(stringi) set.seed(24) x3 <- stri_rand_strings(1, 1e6) microbenchmark(split_str_cpp(x3), akrun(x3), richard1(x3), richard2(x3), unit =
Unit: relative expr min lq mean median uq max neval split_str_cpp(x3) 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 20 akrun(x3) 9.675613 8.952997 8.241750 8.689001 8.403634 4.423134 20 richard1(x3) 5.355620 5.226103 5.483171 5.947053 5.982943 3.379446 20 richard2(x3) 4.842398 4.756086 5.046077 5.389570 5.389193 3.669680 20
x="aaaaabbcccccccbbbad1111100000222aaabbccd11DaaBB" res_vector=substr(x,1,1) for (i in 2:nchar(x)) { tmp=substr(x,i,i) if (tmp==substr(x,i-1,i-1)) { res_vector[length(res_vector)]=paste0(res_vector[length(res_vector)],tmp) } else { res_vector[length(res_vector)+1]=tmp } } res_vector
x="aaaaabbcccccccbbbad1111100000222aaabbccd11DaaBB" res_vector=rep(NA_character_,nchar(x)) res_vector[1]=substr(x,1,1) counter=1 old_tmp= for (i in 2:nchar(x)) { tmp=substr(x,i,i) if (tmp==old_tmp) { res_vector[counter]=paste0(res_vector[counter],tmp) } else { res_vector[counter+1]=tmp counter=counter+1 } old_tmp=tmp } res_vector[!is.na(res_vector)]
s <- "111110000011110000111000" spl <- strsplit(s,"10|01")[[1]] l <- length(spl) sapply(1:l, function(i) paste0(spl[i],i%%2,ifelse(i==1 | i==l, "",i%%2)))
library(dplyr) df = data.frame( x1 = c(1,2,3,NA), x2 = c(1,2,NA,5) ) df %.% filter(complete.cases(x1,x2))
set.seed(123) x <- sample(1e5,1e5*26, replace = TRUE) x[sample(seq_along(x), 1e3)] <- NA df <- as.data.frame(matrix(x, ncol = 26)) library(microbenchmark) microbenchmark( na.omit = {df %>% na.omit}, filter.anonymous = {df %>% (function(x) filter(x, complete.cases(x)))}, rowSums = {df %>% filter(rowSums(is.na(.)) == 0L)}, filter = {df %>% filter(complete.cases(.))}, times = 20L, unit = "relative")
library( library( n = 5e6 n.na = 100000 df = data.frame( x1 = sample(1:10, n, replace=TRUE), x2 = sample(1:10, n, replace=TRUE) ) df$x1[sample(1:n, n.na)] = NA df$x2[sample(1:n, n.na)] = NA benchmark( df %>% filter(complete.cases(x1,x2)), df %>% na.omit(), df %>% (function(x) filter(x, complete.cases(x)))() , replications=50)
drop_na <- function(data, ...){ if (missing(...)){ f = complete.cases(data) } else { f <- complete.cases(select_(data, .dots = lazyeval::lazy_dots(...))) } filter(data, f) }
library("dplyr") df <- data.frame(a=c(1,2,3,4,NA), b=c(NA,1,2,3,4), ac=c(1,2,NA,3,4)) df %>% drop_na(a,b) df %>% drop_na(starts_with("a")) df %>% drop_na()
library(magrittr) df = data.frame( x1 = c(1,2,3,NA), x2 = c(1,2,NA,5)) df %>% extract(complete.cases(.), )
> foo <- vector(mode="list", length=3) > names(foo) <- c("tic", "tac", "toe") > foo[[1]] <- 12; foo[[2]] <- 22; foo[[3]] <- 33 > foo $tic [1] 12 $tac [1] 22 $toe [1] 33 > names(foo) [1] "tic" "tac" "toe" >
> foo <- c(12, 22, 33) > names(foo) <- c("tic", "tac", "toe") > foo tic tac toe 12 22 33 > names(foo) [1] "tic" "tac" "toe"
assign_hash <- Vectorize(assign, vectorize.args = c("x", "value")) get_hash <- Vectorize(get, vectorize.args = "x") exists_hash <- Vectorize(exists, vectorize.args = "x") key<- c("tic", "tac", "toe") value <- c(1, 22, 333) hash = new.env(hash = TRUE, parent = emptyenv(), size = 100L) assign_hash(key, value, hash) get_hash(c("toe", "tic"), hash) mget(c("toe", "tic"), hash) ls(hash) get_hash(ls(hash), hash) rm(list = c("toe", "tic"), envir = hash) get_hash(ls(hash), hash) exists_hash(c("tac", "nothere"), hash) hash[["tac"]] hash[["test"]] <- 1234 get_hash(ls(hash), hash) hash[["test"]] <- 54321 get_hash(ls(hash), hash)
> color <- c( > hex <- c( > > color_palette <- as.list(hex) > > names(color_palette) <- color > > color_palette $navy.blue [1] " $gold [1] " $dark.gray [1] "
h <- hash( keys=letters, values=1:26 ) h <- hash( letters, 1:26 ) h$a h$foo <- "bar" h[ "foo" ] h[[ "foo" ]]
> x <- c("a","a","b","b","b","c") > (t <- table(x)) x a b c 2 3 1 > names(t) [1] "a" "b" "c" > o <- order(as.numeric(t)) > names(t[o]) [1] "c" "a" "b"
R> data <- read.csv(text="flim,flam + 1.2,2.2 + 77.1,3.14") R> data flim flam 1 1.2 2.20 2 77.1 3.14 R>
> lines <- " + flim,flam + 1.2,2.2 + 77.1,3.14 + " > con <- textConnection(lines) > data <- read.csv(con) > close(con) > data flim flam 1 1.2 2.20 2 77.1 3.14 >
> states.str= + "Alabama","AL" + "Alaska","AK" + "Arizona","AZ" + "Arkansas","AR" + "California","CA"' > read.csv(text=states.str) State Abbreviation 1 Alabama AL 2 Alaska AK 3 Arizona AZ 4 Arkansas AR 5 California CA
string <- "this,will,be\na,data,frame" x <- read.csv(con <- textConnection(string), header=FALSE) close(con)
> read.table("tommy.csv", header = TRUE, allowEscapes = TRUE) col1 col2 1 col1 col2 2 1 1 3 2 2 4 3 3
text_to_table <- function(text, ...) { dfr <- read.table(tc <- textConnection(text), ...) close(tc) dfr }
text_to_table("foo bar baz 1 2 a 3 4 b", header = TRUE)
library(ggplot2) library(gridExtra) secu <- seq(1, 16, by=2) melt.d <- data.frame(y=secu, x=LETTERS[1:8]) m <- ggplot(melt.d, aes(x=x, y=y)) + geom_bar(fill="darkblue") + labs(x="Weather stations", y="Accumulated Rainfall [mm]") + opts(axis.text.x=theme_text(angle=-45, hjust=0, vjust=1), title=expression("Rainfall"), plot.margin = unit(c(1.5, 1, 1, 1), "cm"), plot.title = theme_text(size = 25, face = "bold", colour = "black", vjust = 5)) z <- arrangeGrob(m, sub = textGrob("Location", x = 0, hjust = -3.5, vjust = -33, gp = gpar(fontsize = 18, col = "gray40"))) z
library(ggplot2) secu <- seq(1, 16, by=2) melt.d <- data.frame(y=secu, x=LETTERS[1:8]) m <- ggplot(melt.d, aes(x=x, y=y)) m <- m + geom_bar(fill="darkblue", stat="identity") m <- m + labs(x="Weather stations", y="Accumulated Rainfall [mm]", title="Rainfall", subtitle="Location") m <- m + theme(axis.text.x=element_text(angle=-45, hjust=0, vjust=1)) m <- m + theme(plot.title=element_text(size=25, hjust=0.5, face="bold", colour="maroon", vjust=-1)) m <- m + theme(plot.subtitle=element_text(size=18, hjust=0.5, face="italic", color="black")) m
m <- ggplot(melt.d, aes(x=x, y=y)) + geom_bar(fill="darkblue", stat = "identity") + labs(x="Weather stations", y="Accumulated Rainfall [mm]") + ggtitle(expression(atop("Rainfall", atop(italic("Location"), "")))) + theme(axis.text.x = element_text(angle=-45, hjust=0, vjust=1), plot.title = element_text(size = 25, face = "bold", colour = "black", vjust = -1))
library(ggplot2) library(grid) library(gridExtra) library(magrittr) library(gtable) p <- ggplot() + theme(plot.margin = unit(c(0.5, 1, 1, 1), "cm")) lg <- list(textGrob("Rainfall", x=0, hjust=0, gp = gpar(fontsize=24, fontfamily="Skia", face=2, col="turquoise4")), textGrob("location", x=0, hjust=0, gp = gpar(fontsize=14, fontfamily="Zapfino", fontface=3, col="violetred1")), pointsGrob(pch=21, gp=gpar(col=NA, cex=0.5,fill="steelblue"))) margin <- unit(0.2, "line") tg <- arrangeGrob(grobs=lg, layout_matrix=matrix(c(1,2,3,3), ncol=2), widths = unit.c(grobWidth(lg[[1]]), unit(1,"null")), heights = do.call(unit.c, lapply(lg[c(1,2)], grobHeight)) + margin) grid.newpage() ggplotGrob(p) %>% gtable_add_rows(sum(tg$heights), 0) %>% gtable_add_grob(grobs=tg, t = 1, l = 4) %>% grid.draw()
library(ggplot2) secu <- seq(1, 16, by = 2) melt.d <- data.frame(y = secu, x = LETTERS[1:8]) m <- ggplot(melt.d, aes(x = x, y = y)) + geom_bar(fill="darkblue", stat = "identity") + labs(x = "Weather stations", y = "Accumulated Rainfall [mm]") + theme(axis.text.x = element_text(angle = -45, hjust = 0, vjust = 1)) plot.title = function(plot = NULL, text.1 = NULL, text.2 = NULL, size.1 = 12, size.2 = 12, col.1 = "black", col.2 = "black", face.1 = "plain", face.2 = "plain") { library(gtable) library(grid) gt = ggplotGrob(plot) text.grob1 = textGrob(text.1, y = unit(.45, "npc"), gp = gpar(fontsize = size.1, col = col.1, fontface = face.1)) text.grob2 = textGrob(text.2, y = unit(.65, "npc"), gp = gpar(fontsize = size.2, col = col.2, fontface = face.2)) text = matrix(list(text.grob1, text.grob2), nrow = 2) text = gtable_matrix(name = "title", grobs = text, widths = unit(1, "null"), heights = unit.c(unit(1.1, "grobheight", text.grob1) + unit(0.5, "lines"), unit(1.1, "grobheight", text.grob2) + unit(0.5, "lines"))) gt = gtable_add_grob(gt, text, t = 2, l = 4) gt$heights[2] = sum(text$heights) class(gt) = c("Title", class(gt)) gt } print.Title <- function(x) { grid.newpage() grid.draw(x) } p = plot.title(m, "Rainfall", "Location", size.1 = 20, size.2 = 15, col.1 = "red", col.2 = "blue", face.2 = "italic") p
library(ggplot2) library(gridExtra) p <- ggplot() + theme(plot.margin = unit(c(0.5, 1, 1, 1), "cm")) tg <- grobTree(textGrob("Rainfall", y=1, vjust=1, gp = gpar(fontsize=25, face=2, col="black")), textGrob("location", y=0, vjust=0, gp = gpar(fontsize=12, face=3, col="grey50")), cl="titlegrob") heightDetails.titlegrob <- function(x) do.call(sum,lapply(x$children, grobHeight)) grid.arrange(p, top = tg)
ggplot(melt.d, aes(x=x, y=y)) + geom_bar(fill="darkblue", stat = "identity") + labs(x="Weather stations", y="Accumulated Rainfall [mm]") + ggtitle(expression(atop(bold("Rainfall"), atop(italic("Location"), "")))) + theme(axis.text.x = element_text(angle=-45, hjust=0, vjust=1), plot.title = element_text(size = 25, colour = "black", vjust = -1))
Stadium Home Week Qtr Away Off Def Result Kicker Dist 751 Out PHI 14 4 NYG PHI NYG Good D.Akers 50 491 Out KC 9 1 OAK OAK KC Good S.Janikowski 32 702 Out OAK 15 4 CLE CLE OAK Good P.Dawson 37 571 Out NE 1 2 OAK OAK NE Missed S.Janikowski 43 654 Out NYG 11 2 PHI NYG PHI Good J.Feely 26 307 Out DEN 14 2 BAL DEN BAL Good J.Elam 48 492 Out KC 13 3 DEN KC DEN Good L.Tynes 34 691 Out NYJ 17 3 BUF NYJ BUF Good M.Nugent 25 164 Out CHI 13 2 GB CHI GB Good R.Gould 25 80 Out BAL 1 2 IND IND BAL Good M.Vanderjagt 20
Stadium Home Week Qtr Away Off Def Result Kicker Dist 751 Out PHI 14 4 NYG PHI NYG Good D.Akers 50 307 Out DEN 14 2 BAL DEN BAL Good J.Elam 48 571 Out NE 1 2 OAK OAK NE Missed S.Janikowski 43 702 Out OAK 15 4 CLE CLE OAK Good P.Dawson 37 492 Out KC 13 3 DEN KC DEN Good L.Tynes 34 491 Out KC 9 1 OAK OAK KC Good S.Janikowski 32 654 Out NYG 11 2 PHI NYG PHI Good J.Feely 26 691 Out NYJ 17 3 BUF NYJ BUF Good M.Nugent 25 164 Out CHI 13 2 GB CHI GB Good R.Gould 25 80 Out BAL 1 2 IND IND BAL Good M.Vanderjagt 20
> a <- c(45, 50, 10, 96) > order(a) [1] 3 1 2 4 > rank(a) [1] 2 3 1 4
> a[order(a)] [1] 10 45 50 96 > sort(a) [1] 10 45 50 96 > a[rank(a)] [1] 50 10 45 96
> b <- sort(a) > order(b)==rank(b) [1] TRUE TRUE TRUE TRUE
> order(rank(a))==order(a) [1] TRUE TRUE TRUE TRUE > rank(order(a))==rank(a) [1] FALSE FALSE FALSE TRUE
x <- c(3, 22, 5, 1, 77) cbind( index=1:length(x), rank=rank(x), x, order=order(x), sort=sort(x) ) index rank x order sort [1,] 1 2 3 4 1 [2,] 2 4 22 1 3 [3,] 3 3 5 3 5 [4,] 4 1 1 2 22 [5,] 5 5 77 5 77
mandel = function(z) { c = z maxiter = 80 for (n in 1:maxiter) { if (Mod(z) > 2) return(n-1) z = z^2+c } return(maxiter) } mandelperf = function() { re = seq(-2,0.5,.1) im = seq(-1,1,.1) M = matrix(0.0,nrow=length(re),ncol=length(im)) count = 1 for (r in re) { for (i in im) { M[count] = mandel(complex(real=r,imag=i)) count = count + 1 } } return(M) } assert(sum(mandelperf()) == 14791) qsort_kernel = function(a, lo, hi) { i = lo j = hi while (i < hi) { pivot = a[floor((lo+hi)/2)] while (i <= j) { while (a[i] < pivot) i = i + 1 while (a[j] > pivot) j = j - 1 if (i <= j) { t = a[i] a[i] = a[j] a[j] = t } i = i + 1; j = j - 1; } if (lo < j) qsort_kernel(a, lo, j) lo = i j = hi } return(a) } qsort = function(a) { return(qsort_kernel(a, 1, length(a))) } sortperf = function(n) { v = runif(n) return(qsort(v)) } sortperf(5000)
mandel.1 = function(z, maxiter=80L) { c <- z result <- integer(length(z)) i <- seq_along(z) n <- 0L while (n < maxiter && length(z)) { j <- Mod(z) <= 2 if (!all(j)) { result[i[!j]] <- n i <- i[j] z <- z[j] c <- c[j] } z <- z^2 + c n <- n + 1L } result[i] <- maxiter result } mandelperf.1 = function() { re = seq(-2,0.5,.1) im = seq(-1,1,.1) mandel.1(complex(real=rep(re, each=length(im)), imaginary=im)) }
> library(rbenchmark) > benchmark(mandelperf(), mandelperf.1(), + columns=c("test", "elapsed", "relative"), + order="relative") test elapsed relative 2 mandelperf.1() 0.412 1.00000 1 mandelperf() 5.705 13.84709 > all.equal(sum(mandelperf()), sum(mandelperf.1())) [1] TRUE
qsort_kernel.1 = function(a) { if (length(a) < 2L) return(a) pivot <- a[floor(length(a) / 2)] c(qsort_kernel.1(a[a < pivot]), a[a == pivot], qsort_kernel.1(a[a > pivot])) } qsort.1 = function(a) { qsort_kernel.1(a) } sortperf.1 = function(n) { v = runif(n) return(qsort.1(v)) }
> benchmark(sortperf(5000), sortperf.1(5000), + columns=c("test", "elapsed", "relative"), + order="relative") test elapsed relative 2 sortperf.1(5000) 6.60 1.000000 1 sortperf(5000) 47.73 7.231818
time[1] strptime(time[1], format="%Y-%m-%d %H:%M:%S.%f") strptime(time[1], format="%Y-%m-%d %H:%M:%S")
z <- strptime("2010-01-15 13:55:23.975", "%Y-%m-%d %H:%M:%OS") z op <- options(digits.secs=3) z options(op)
--- title: "Chapter 1" output: pdf_document --- Next up: [chapter 2](
--- title: "Chapter 2" output: pdf_document --- Previously: [chapter 1](
--- title: My Report output: pdf_document: toc: yes --- ```{r child = ``` ```{r child = ```
rmd <- list.files(pattern = chunks <- paste0("```{r child = cat(chunks, sep = #
--- title: "A Minimal bookdown document" site: bookdown::bookdown_site output: bookdown::pdf_document2: toc: yes ---
Rmd_bind <- function(dir = ".", book_header = readLines(textConnection("---\ntitle: { old <- setwd(dir) if(length(grep("book.Rmd", list.files())) > 0){ warning("book.Rmd already exists") } write(book_header, file = "book.Rmd", ) cfiles <- list.files(pattern = "*.Rmd", ) ttext <- NULL for(i in 1:length(cfiles)){ text <- readLines(cfiles[i]) hspan <- grep("---", text) text <- text[-c(hspan[1]:hspan[2])] write(text, sep = "\n", file = "book.Rmd", append = T) } render("book.Rmd", output_format = "pdf_document") setwd(old) }
test<-data.frame(x=1:20, y=21:40, facet.a=rep(c(1,2),10), facet.b=rep(c(1,2), each=20)) qplot(data=test, x=x, y=y, facets=facet.b~facet.a)
qplot(data=test, x=x, y=y)+facet_grid(facet.b~facet.a, labeller=label_both)
library(ggplot2) test <- data.frame(x=1:20, y=21:40, facet.a=rep(c(1,2),10), facet.b=rep(c(1,2), each=20)) p <- qplot(data=test, x=x, y=y, facets=facet.b~facet.a) z <- ggplotGrob(p) library(grid) library(gtable) z <- gtable_add_cols(z, unit(z$widths[[7]], z <- gtable_add_grob(z, list(rectGrob(gp = gpar(col = NA, fill = gray(0.5))), textGrob("Variable 1", rot = -90, gp = gpar(col = gray(1)))), 4, 8, 6, name = paste(runif(2))) z <- gtable_add_rows(z, unit(z$heights[[3]], z <- gtable_add_grob(z, list(rectGrob(gp = gpar(col = NA, fill = gray(0.5))), textGrob("Variable 2", gp = gpar(col = gray(1)))), 3, 4, 3, 6, name = paste(runif(2))) z <- gtable_add_cols(z, unit(1/8, "line"), 7) z <- gtable_add_rows(z, unit(1/8, "line"), 3) grid.newpage() grid.draw(z)
z <- gtable_add_grob(z, list(rectGrob(gp = gpar(col = gray(0.5), linetype=1, fill = gray(0.8))), textGrob("Variable 1", rot = -90, gp = gpar(col = gray(0)))), 4, 8, 6, name = paste(runif(2)))
fac1 = factor(rep(c( fac2 = factor(rep(c( data = data.frame(x=1:10, y=1:10, fac1=fac1, fac2=fac2) p = ggplot(data,aes(x,y)) + ggplot2::geom_point() + facet_grid(fac1~fac2) p + theme(plot.margin = unit(c(1.5,1.5,0.2,0.2), "cm")) grid::grid.text(unit(0.98,"npc"),0.5,label = grid::grid.text(unit(0.5,"npc"),unit(.98,
frame <- data.frame(series <- rep(c( ggplot(frame, aes())
set.seed(0) x <- rep(1:10, 4) y <- c(rep(1:10, 2)+rnorm(20)/5, rep(6:15, 2) + rnorm(20)/5) treatment <- gl(2, 20, 40, labels=letters[1:2]) replicate <- gl(2, 10, 40) d <- data.frame(x=x, y=y, treatment=treatment, replicate=replicate) ggplot(d, aes(x=x, y=y, colour=treatment, shape = replicate, group=interaction(treatment, replicate))) + geom_point() + geom_line()
qplot(round, price, data=firm, group=id, color=id, geom= geom_smooth(aes(group=interaction(size, type)))
require(ggplot2) df <- data.frame(x=seq(1, 1e9, length.out=100), y=sample(100)) p <- ggplot(data = df, aes(x=x, y=y)) + geom_line() + geom_point() p require(scales) p + scale_x_continuous(labels = comma)
require(ggplot2) require(scales) df <- data.frame(x=seq(1, 1e9, length.out=100), y=sample(100)) point <- format_format(big.mark = " ", decimal.mark = ",", scientific = FALSE) p <- ggplot(data = df, aes(x=x, y=y)) + geom_line() + geom_point() p + scale_x_continuous(labels = point)
first = list(a = 1, b = 2, c = 3) second = list(a = 2, b = 3, c = 4)
appendList <- function (x, val) { stopifnot(is.list(x), is.list(val)) xnames <- names(x) for (v in names(val)) { x[[v]] <- if (v %in% xnames && is.list(x[[v]]) && is.list(val[[v]])) appendList(x[[v]], val[[v]]) else c(x[[v]], val[[v]]) } x } > appendList(first,second) $a [1] 1 2 $b [1] 2 3 $c [1] 3 4
both <- list(first, second) n <- unique(unlist(lapply(both, names))) names(n) <- n lapply(n, function(ni) unlist(lapply(both, `[[`, ni)))
apply(cbind(first, second),1,function(x) unname(unlist(x)))
mergeLists_internal <- function(o_element, n_element){ if (is.list(n_element)){ if (length(n_element) != length(o_element)){ n_unique <- names(n_element)[! names(n_element) %in% names(o_element)] if (length(n_unique) > 0){ for (n in n_unique){ if (is.matrix(n_element[[n]])){ o_element[[n]] <- matrix(NA, nrow=nrow(n_element[[n]]), ncol=ncol(n_element[[n]])) }else{ o_element[[n]] <- rep(NA, times=length(n_element[[n]])) } } } o_unique <- names(o_element)[! names(o_element) %in% names(n_element)] if (length(o_unique) > 0){ for (n in o_unique){ if (is.matrix(n_element[[n]])){ n_element[[n]] <- matrix(NA, nrow=nrow(o_element[[n]]), ncol=ncol(o_element[[n]])) }else{ n_element[[n]] <- rep(NA, times=length(o_element[[n]])) } } } } return(mergeLists(o_element, n_element)) } if(length(n_element)>1){ new_cols <- ifelse(is.matrix(n_element), ncol(n_element), length(n_element)) old_cols <- ifelse(is.matrix(o_element), ncol(o_element), length(o_element)) if (new_cols != old_cols) stop("Your length doesn " new element (", new_cols , ") !=", " old element (", old_cols , ")") } return(rbind(o_element, n_element, deparse.level=0)) return(c(o_element, n_element)) } mergeLists <- function(old, new){ if (is.null(old)) return (new) m <- mapply(mergeLists_internal, old, new, SIMPLIFY=FALSE) return(m) }
v1 <- list("a"=c(1,2), b="test 1", sublist=list(one=20:21, two=21:22)) v2 <- list("a"=c(3,4), b="test 2", sublist=list(one=10:11, two=11:12, three=1:2)) mergeLists(v1, v2)
$a [,1] [,2] [1,] 1 2 [2,] 3 4 $b [1] "test 1" "test 2" $sublist $sublist$one [,1] [,2] [1,] 20 21 [2,] 10 11 $sublist$two [,1] [,2] [1,] 21 22 [2,] 11 12 $sublist$three [,1] [,2] [1,] NA NA [2,] 1 2
merge_list <- function(...) by(v<-unlist(c(...)),names(v),base::c)
> set.seed(345) > df <- data.frame(x = rnorm(20)) > df <- transform(df, y = 5 + (2.3 * x) + rnorm(20)) > > m1 <- lm(y ~ x, data = df) > > save(m1, file = "my_model1.rda") > > > newdf <- data.frame(x = rnorm(20)) > > load("my_model1.rda") > > predict(m1, newdata = newdf) 1 2 3 4 5 6 6.1370366 6.5631503 2.9808845 5.2464261 4.6651015 3.4475255 7 8 9 10 11 12 6.7961764 5.3592901 3.3691800 9.2506653 4.7562096 3.9067537 13 14 15 16 17 18 2.0423691 2.4764664 3.7308918 6.9999064 2.0081902 0.3256407 19 20 5.4247548 2.6906722
df <- data.frame(x = rnorm(20)) df <- transform(df, y = 5 + (2.3 * x) + rnorm(20)) if(file.exists("my_model1.rda")) { load("my_model1.rda") } else { m1 <- lm(y ~ x, data = df) } newdf <- data.frame(x = rnorm(20)) predict(m1, newdata = newdf)
> set.seed(123) > df <- data.frame(x = rnorm(20)) > df <- transform(df, y = 5 + (2.3 * x) + rnorm(20)) > > m1 <- lm(y ~ x, data = df) > m1 Call: lm(formula = y ~ x, data = df) Coefficients: (Intercept) x 4.960 2.222 > > > newdf <- data.frame(x = rnorm(20)) > newdf <- transform(newdf, y = 5 + (2.3 * x) + rnorm(20)) > > df <- rbind(df, newdf) > > > m2 <- update(m1, . ~ ., data = df) > m2 Call: lm(formula = y ~ x, data = df) Coefficients: (Intercept) x 4.928 2.187
> formula(m1) y ~ x > > > m3 <- lm(formula(m1), data = df)
Df <- data.frame(X=1:10,Y=(1:10)+rnorm(10)) model <- lm(Y~X,data=Df) model Df <- rbind(Df,data.frame(X=2:11,Y=(10:1)+rnorm(10))) update(model)
mydata_hist <- hist(mydata$V3, breaks=c(0,1,2,3,4,5,25), plot=FALSE) plot(rpd_hist$counts, log="xy", pch=20, col="blue")
ggplot(mydata, aes(x = V3)) + geom_histogram() + scale_x_log10()
buckets <- c(0,1,2,3,4,5,25) mydata_hist <- hist(mydata$V3, breaks=buckets, plot=FALSE) bp <- barplot(mydata_hist$count, log="y", col="white", names.arg=buckets) text(bp, mydata_hist$counts, labels=mydata_hist$counts, pos=1)
hist.data = hist(my.data, plot=F) hist.data$counts = log(hist.data$counts, 2) plot(hist.data)
myhist(mydata$V3, breaks=c(0,1,2,3,4,5,25), log="xy")
myhist <- function(x, ..., breaks="Sturges", main = paste("Histogram of", xname), xlab = xname, ylab = "Frequency") { xname = paste(deparse(substitute(x), 500), collapse="\n") h = hist(x, breaks=breaks, plot=FALSE) plot(h$breaks, c(NA,h$counts), type= xlab=xlab, ylab=ylab, axes=FALSE, ...) axis(1) axis(2) lines(h$breaks, c(h$counts,NA), type= lines(h$breaks, c(NA,h$counts), type= lines(h$breaks, c(h$counts,NA), type= lines(h$breaks, rep(0,length(h$breaks)), type= invisible(h) }
library(ggplot2) library(scales) breaks=c(0,1,2,3,4,5,25) ggplot(mydata,aes(x = V3)) + geom_histogram(breaks = log10(breaks)) + scale_x_log10( breaks = breaks, labels = scales::trans_format("log10", scales::math_format(10^.x)) )
as.name(paste("perf.a", "1", sep="")) = 5 Error in as.name(paste("perf.a", "1", sep = "")) = 5 : target of assignment expands to non-language object as.symbol(paste("perf.a", "1", sep="")) = 5 Error in as.symbol(paste("perf.a", "1", sep = "")) = 5 : target of assignment expands to non-language object noquote(paste("perf.a", "1", sep="")) = 5 Error in noquote(paste("perf.a", "1", sep = "")) = 5 : target of assignment expands to non-language object
> assign(paste("perf.a", "1", sep=""),5) > perf.a1 [1] 5
> assign(paste("tra.", 1, sep = ""), 5) > tra.1 [1] 5
lhs <- rnorm(10) rhs <- paste("perf.a", 1:10, "<-", lhs, sep="") eval(parse(text=rhs))
output=NULL for(i in 1:8){ Tax=eval(as.symbol(paste("Tax",i,sep=""))) L_Data1=L_Data_all[which(L_Data_all$Taxon==Tax[1] | L_Data_all$Taxon==Tax[2] | L_Data_all$Taxon==Tax[3] | L_Data_all$Taxon==Tax[4] | L_Data_all$Taxon==Tax[5]),] L_Data=L_Data1$Length[which(L_Data1$Station==Plant[1] | L_Data1$Station==Plant[2])] h=hist(L_Data,breaks=breaks,plot=FALSE) output=cbind(output,h$counts) }
> ggobj = ggplot(aes(x = speed, y = dist), data = cars) + geom_line() > ggobj$coordinates$limits $x NULL $y NULL
> bla = ggobj + coord_cartesian(xlim = c(5,10)) > bla$coordinates$limits $x [1] 5 10 $y NULL
layer_scales(plt)$y$range$range layer_scales(plt)$x$range$range
layer_scales(plt, 1, 2)$y$range$range layer_scales(plt, 1, 2)$x$range$range
ggplot_build(plot.object)$layout$panel_ranges[[1]]$y.range ggplot_build(plot.object)$layout$panel_ranges[[1]]$x.range
obj <- qplot(mtcars$disp, bins = 5) ggplot_build(obj)$layout$panel_params[[1]]$x.range ggplot_build(obj)$layout$panel_params[[1]]$y.range
get_plot_limits <- function(plot) { gb = ggplot_build(plot) xmin = gb$layout$panel_params[[1]]$x.range[1] xmax = gb$layout$panel_params[[1]]$x.range[2] ymin = gb$layout$panel_params[[1]]$y.range[1] ymax = gb$layout$panel_params[[1]]$y.range[2] list(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax) } get_plot_limits(p)
set.seed(101) n <- 1000 x1 <- rnorm(n, mean=2) y1 <- 1.75 + 0.4*x1 + rnorm(n) df <- data.frame(x=x1, y=y1, group="A") x2 <- rnorm(n, mean=8) y2 <- 0.7*x2 + 2 + rnorm(n) df <- rbind(df, data.frame(x=x2, y=y2, group="B")) x3 <- rnorm(n, mean=6) y3 <- x3 - 5 - rnorm(n) df <- rbind(df, data.frame(x=x3, y=y3, group="C")) library(ellipse) df_ell <- data.frame() for(g in levels(df$group)){ df_ell <- rbind(df_ell, cbind(as.data.frame(with(df[df$group==g,], ellipse(cor(x, y), scale=c(sd(x),sd(y)), centre=c(mean(x),mean(y))))),group=g)) } library(ggplot2) p <- ggplot(data=df, aes(x=x, y=y,colour=group)) + geom_polygon(data=df_ell, aes(x=x, y=y,colour=group, fill=group), alpha=0.1, size=1, linetype=1) library(dplyr) ell_center <- df_ell %>% group_by(group) %>% summarise(x=mean(x), y=mean(y)) library(rphylopic) lion <- get_image("e2015ba3-4f7e-4950-9bde-005e8678d77b", size = "512")[[1]] mouse <- get_image("6b2b98f6-f879-445f-9ac2-2c2563157025", size="512")[[1]] bug <- get_image("136edfe2-2731-4acd-9a05-907262dd1311", size="512")[[1]] p + add_phylopic(lion, alpha=0.9, x=ell_center[[1,2]], y=ell_center[[1,3]], ysize=2, color="firebrick1") + add_phylopic(mouse, alpha=1, x=ell_center[[2,2]], y=ell_center[[2,3]], ysize=2, color="darkgreen") + add_phylopic(bug, alpha=0.9, x=ell_center[[3,2]], y=ell_center[[3,3]], ysize=2, color="mediumblue") + theme_bw()
set.seed(101) n <- 1000 x1 <- rnorm(n, mean=2) y1 <- 1.75 + 0.4*x1 + rnorm(n) df <- data.frame(x=x1, y=y1, group="A") x2 <- rnorm(n, mean=8) y2 <- 0.7*x2 + 2 + rnorm(n) df <- rbind(df, data.frame(x=x2, y=y2, group="B")) x3 <- rnorm(n, mean=6) y3 <- x3 - 5 - rnorm(n) df <- rbind(df, data.frame(x=x3, y=y3, group="C")) library(ellipse) df_ell <- data.frame() for(g in levels(df$group)){ df_ell <- rbind(df_ell, cbind(as.data.frame( with(df[df$group==g,], ellipse(cor(x, y), scale=c(sd(x),sd(y)), centre=c(mean(x),mean(y))))),group=g)) }
require("dplyr") require("tidyr") require("ggplot2") require("png") download.file("http: download.file("http: download.file("http: pic_allig <- readPNG("alligator.png") pic_eleph <- readPNG("elephant.png") pic_turtl <- readPNG("turtle.png") ggplot_rasterdf <- function(color_matrix, bottom = 0, top = 1, left = 0, right = 1) { require("dplyr") require("tidyr") if (dim(color_matrix)[3] > 3) hasalpha <- T else hasalpha <- F outMatrix <- matrix(" for (i in 1:dim(color_matrix)[1]) for (j in 1:dim(color_matrix)[2]) outMatrix[i, j] <- rgb(color_matrix[i,j,1], color_matrix[i,j,2], color_matrix[i,j,3], ifelse(hasalpha, color_matrix[i,j,4], 1)) colnames(outMatrix) <- seq(1, ncol(outMatrix)) rownames(outMatrix) <- seq(1, nrow(outMatrix)) as.data.frame(outMatrix) %>% mutate(Y = nrow(outMatrix):1) %>% gather(X, color, -Y) %>% mutate(X = left + as.integer(as.character(X))*(right-left)/ncol(outMatrix), Y = bottom + Y*(top-bottom)/nrow(outMatrix)) }
pic_allig_dat <- ggplot_rasterdf(pic_allig, left = min(df_ell[df_ell$group == "A",]$x), right = max(df_ell[df_ell$group == "A",]$x), bottom = min(df_ell[df_ell$group == "A",]$y), top = max(df_ell[df_ell$group == "A",]$y) ) pic_eleph_dat <- ggplot_rasterdf(pic_eleph, left = min(df_ell[df_ell$group == "B",]$x), right = max(df_ell[df_ell$group == "B",]$x), bottom = min(df_ell[df_ell$group == "B",]$y), top = max(df_ell[df_ell$group == "B",]$y) ) pic_turtl_dat <- ggplot_rasterdf(pic_turtl, left = min(df_ell[df_ell$group == "C",]$x), right = max(df_ell[df_ell$group == "C",]$x), bottom = min(df_ell[df_ell$group == "C",]$y), top = max(df_ell[df_ell$group == "C",]$y) )
require("sp") gr_A_df <- pic_allig_dat[point.in.polygon(pic_allig_dat$X, pic_allig_dat$Y, df_ell[df_ell$group == "A",]$x, df_ell[df_ell$group == "A",]$y ) %>% as.logical,] gr_B_df <- pic_eleph_dat[point.in.polygon(pic_eleph_dat$X, pic_eleph_dat$Y, df_ell[df_ell$group == "B",]$x, df_ell[df_ell$group == "B",]$y ) %>% as.logical,] gr_C_df <- pic_turtl_dat[point.in.polygon(pic_turtl_dat$X, pic_turtl_dat$Y, df_ell[df_ell$group == "C",]$x, df_ell[df_ell$group == "C",]$y ) %>% as.logical,]
p <- ggplot(data=df) + geom_polygon(data=df_ell, aes(x=x, y=y,colour=group, fill=group), alpha=0.1, size=1, linetype=1) p + geom_tile(data = gr_A_df, aes(x = X, y = Y), fill = gr_A_df$color) + geom_tile(data = gr_B_df, aes(x = X, y = Y), fill = gr_B_df$color) + geom_tile(data = gr_C_df, aes(x = X, y = Y), fill = gr_C_df$color) + theme_bw()
set.seed(101) n <- 1000 x1 <- rnorm(n, mean=2) y1 <- 1.75 + 0.4*x1 + rnorm(n) df <- data.frame(x=x1, y=y1, group="1") x2 <- rnorm(n, mean=8) y2 <- 0.7*x2 + 2 + rnorm(n) df <- rbind(df, data.frame(x=x2, y=y2, group="2")) x3 <- rnorm(n, mean=6) y3 <- x3 - 5 - rnorm(n) df <- rbind(df, data.frame(x=x3, y=y3, group="3")) plot(df$x,df$y,type="n") for(g in unique(df$group)){ ifile=readJPEG(paste(g,".jpg",sep=""),FALSE) x=df$x[df$group == g] y=df$y[df$group == g] xmin=mean(x)-sd(x)*2 ymin=mean(y)-sd(y)*2 xmax=mean(x)+sd(x)*2 ymax=mean(y)+sd(y)*2 rasterImage(ifile,xmin,ymin,xmax,ymax) }
group="A") x2 <- rnorm(n, mean=8) y2 <- 0.7*x2 + 2 + rnorm(n) df <- rbind(df, data.frame(x=x2, y=y2, group="B")) x3 <- rnorm(n, mean=6) y3 <- x3 - 5 - rnorm(n) df <- rbind(df, data.frame(x=x3, y=y3, group="C")) df_ell <- rbind(df_ell, cbind(as.data.frame(with(df[df$group==g,], ellipse(cor(x, y), scale=c(sd(x),sd(y)), centre=c(mean(x),mean(y))))),group=g)) } geom_polygon(data=df_ell, aes(x=x, y=y,colour=group, fill=group), alpha=0.1, size=1, linetype=1)
```{r setup, include=FALSE} opts_chunk$set(cache=TRUE) ``` ------ ```{r plot1} plot(1:10, 1:10) ``` ------
```{r setup, include=FALSE} opts_chunk$set(cache=TRUE) ``` Initial Text. Yay! ```{r plot1} plot(1:10, 1:10) ``` More Text. Outstanding. What Hadley ```{r plot2, fig.width=4, fig.height=4} plot(1:10, 1:10) ``` `r paste(rep("So much text so little time!", 10000))`
<div style="height:1000px; width: 500px; overflow-y: scroll;"> ... </div>
<h1 style="height:300px;">First</h1> <h1 style="height:300px;">Second</h1> <h1 style="height:300px;">Third</h1> <h1 style="height:300px;">Fourth</h1> <h1 style="height:300px;">Fifth</h1>
foo(4) == 5 foo(6.1) == 10 foo(30.1) == 40 foo(100.1) == 110
> roundUp(c(0.0023, 3.99, 10, 1003)) [1] 1e-02 1e+01 1e+01 1e+04
roundUpNice <- function(x, nice=c(1,2,4,5,6,8,10)) { if(length(x) != 1) stop(" 10^floor(log10(x)) * nice[[which(x <= 10^floor(log10(x)) * nice)[[1]]]] }
> roundUpNice(0.0322) [1] 0.04 > roundUpNice(3.22) [1] 4 > roundUpNice(32.2) [1] 40 > roundUpNice(42.2) [1] 50 > roundUpNice(422.2) [1] 500
library(plyr) round_any(132.1, 10) round_any(132.1, 10, f = ceiling) round_any(132.1, 5, f = ceiling)
foo(4) [1] 10 foo(6.1) [1] 10 foo(30.1) [1] 40 foo(100.1) [1] 110
roundUp <- function(x,to=10) { to*(x%/%to + as.logical(x%%to)) }
> roundUp(c(4,6.1,30.1,100.1)) [1] 10 10 40 110 > roundUp(4,5) [1] 5 > roundUp(12,7) [1] 14
round(9, digits = -1) [1] 10 round(89, digits = -1) [1] 90 round(89, digits = -2) [1] 100
> RoundUp(-11,10) [1] -10 > RoundUp(-0.1,10) [1] 0 > RoundUp(0,10) [1] 0 > RoundUp(8.9,10) [1] 10 > RoundUp(135,10) [1] 140 > RoundUp(from=c(1.3,2.4,5.6),to=1.1) [1] 2.2 3.3 6.6
round.choose <- function(x, roundTo, dir = 1) { if(dir == 1) { x + (roundTo - x %% roundTo) } else { if(dir == 0) { x - (x %% roundTo) } } }
> round.choose(17,5,1) [1] 20 > round.choose(17,5,0) [1] 15 > round.choose(17,2,1) [1] 18 > round.choose(17,2,0) [1] 16
> 7 + (5 - 7 %% 5) [1] 10 > 7 + (10 - 7 %% 10) [1] 10 > 7 + (2 - 7 %% 2) [1] 8 > 7 + (100 - 7 %% 100) [1] 100 > 7 + (4 - 7 %% 4) [1] 8 > 7 + (4.5 - 7 %% 4.5) [1] 9 > 7 - (7 %% 5) [1] 5 > 7 - (7 %% 10) [1] 0 > 7 - (7 %% 2) [1] 6
rounder <- function(x,y) { if(y >= 0) { x + (y - x %% y)} else { x - (x %% abs(y))} }
Round <- function(x,y) { if((y - x %% y) <= x %% y) { x + (y - x %% y)} else { x - (x %% y)} }
foo <- function(x, round=10) ceiling(max(x+10^-9)/round + 1/round)*round
> foo(4, round=1) == 5 [1] TRUE > foo(6.1) == 10 [1] TRUE > foo(6.1, round=1) == 7 [1] TRUE > foo(30.1) == 40 [1] TRUE > foo(100.1) == 110 [1] TRUE > > foo(c(4, 6.1, 30.1, 100)) [1] 110 > foo(c(4, 6.1, 30.1, 100), round=10) [1] 110 > foo(c(4, 6.1, 30.1, 100), round=2.3) [1] 101.2
round.up.nice <- function(x, lower_bound = TRUE, nice_small=c(0,5,10), nice_big=c(1,2,3,4,5,6,7,8,9,10)) { if (abs(x) > 100) { nice = nice_big } else { nice = nice_small } if (lower_bound == TRUE) { if (x > 0) { return(10^floor(log10(x)) * nice[[max(which(x >= 10^floor(log10(x)) * nice))[[1]]]]) } else if (x < 0) { return(- 10^floor(log10(-x)) * nice[[min(which(-x <= 10^floor(log10(-x)) * nice))[[1]]]]) } else { return(0) } } else { if (x > 0) { return(10^floor(log10(x)) * nice[[min(which(x <= 10^floor(log10(x)) * nice))[[1]]]]) } else if (x < 0) { return(- 10^floor(log10(-x)) * nice[[max(which(-x >= 10^floor(log10(-x)) * nice))[[1]]]]) } else { return(0) } } }
ceil <- function(val, multiple){ div = val/multiple int_div = as.integer(div) return (int_div * multiple + ceiling(div - int_div) * multiple) } > ceil(2.1, 2.2) [1] 2.2 > ceil(3, 2.2) [1] 4.4 > ceil(5, 10) [1] 10 > ceil(0, 10) [1] 0
AA = switch(AA, foo={ print( }, bar={ print( }, { print( } )
do.this <- "T1" switch(do.this, T1={X <- t(mtcars) colSums(mtcars)%*%X }, T2={X <- colMeans(mtcars) outer(X, X) }, stop("Enter something that switches me!") ) do.this <- "T2" switch(do.this, T1={X <- t(mtcars) colSums(mtcars)%*%X }, T2={X <- colMeans(mtcars) outer(X, X) }, stop("Enter something that switches me!") ) do.this <- "T3" switch(do.this, T1={X <- t(mtcars) colSums(mtcars)%*%X }, T2={X <- colMeans(mtcars) outer(X, X) }, stop("Enter something that switches me!") )
FUN <- function(df, do.this){ switch(do.this, T1={X <- t(df) P <- colSums(df)%*%X }, T2={X <- colMeans(df) P <- outer(X, X) }, stop("Enter something that switches me!") ) return(P) } FUN(mtcars, "T1") FUN(mtcars, "T2") FUN(mtcars, "T3")
switch(1, "one", "two") switch(2, {"one"}, {"two"}) switch(1, foo={"one"}, bar={"two"}) switch("bar", foo={"one"}, bar={"two"})
> DT <- data.table(A=1:5, B=1:5*10, C=1:5*100) > DT A B C 1: 1 10 100 2: 2 20 200 3: 3 30 300 4: 4 40 400 5: 5 50 500 > DT[, D := C + BPreviousRow]
> DT A B C D 1: 1 10 100 NA 2: 2 20 200 210 3: 3 30 300 320 4: 4 40 400 430 5: 5 50 500 540
DT[ , D := C + shift(B, 1L, type="lag")] DT[ , D := C + shift(B)]
rowShift <- function(x, shiftLen = 1L) { r <- (1L + shiftLen):(length(x) + shiftLen) r[r<1] <- NA return(x[r]) } DT[, D := C + rowShift(B,-1)] as.data.table(faithful)[1:5,list(eruptLengthCurrent=eruptions, eruptLengthTwoPrior=rowShift(eruptions,-2), eruptLengthThreeFuture=rowShift(eruptions,3))]
> DT[, D := C + c(NA, head(B, -1))][] A B C D 1: 1 10 100 NA 2: 2 20 200 210 3: 3 30 300 320 4: 4 40 400 430 5: 5 50 500 540
df <- data.frame(A=1:5, B=seq(10,50,10), C=seq(100,500, 100))` shift <- 1 invshift <- nrow(df) - shift df$D <- c(NA, head(df$B, invshift)+tail(df$C, invshift))`
plot(density(MyData$Column1)) plot(density(MyData$Column2), add=T)
plot(density(MyData$Column1)) lines(density(MyData$Column2))
library(ggplot2) dat <- data.frame(dens = c(rnorm(100), rnorm(100, 10, 5)) , lines = rep(c("a", "b"), each = 100)) ggplot(dat, aes(x = dens, fill = lines)) + geom_density(alpha = 0.5)
dat <- data.frame(dens = c(rnorm(100), rnorm(100, 10, 5)) , lines = rep(c("a", "b"), each = 100)) densityplot(~dens,data=dat,groups = lines, plot.points = FALSE, ref = TRUE, auto.key = list(space = "right"))
myData <- data.frame(std.nromal=rnorm(1000, m=0, sd=1), wide.normal=rnorm(1000, m=0, sd=2), exponent=rexp(1000, rate=1), uniform=runif(1000, min=-3, max=3) )
dens <- apply(myData, 2, density) plot(NA, xlim=range(sapply(dens, "[", "x")), ylim=range(sapply(dens, "[", "y"))) mapply(lines, dens, col=1:length(dens)) legend("topright", legend=names(dens), fill=1:length(dens))
multi.density.plot=function(data,main=paste(names(data),collapse = df=data.frame(); for(n in names(data)){ idf=data.frame(x=data[[n]],label=rep(n,length(data[[n]]))) df=rbind(df,idf) } densityplot(~x,data=df,groups = label,plot.points = F, ref = T, auto.key = list(space = "right"),main=main,...) }
multi.density.plot(list(BN1=bn1$V1,BN2=bn2$V1),main= multi.density.plot(list(BN1=bn1$V1,BN2=bn2$V1))
set.seed(102349) x1 = rnorm(1000, mean = 5, sd = 3) x2 = rnorm(5000, mean = 2, sd = 8) xrng = range(x1, x2) kde1 = density(x1, from = xrng[1L], to = xrng[2L]) kde2 = density(x2, from = xrng[1L], to = xrng[2L]) matplot(kde1$x, cbind(kde1$y, kde2$y))
dta_A <- density(VarA, na.rm = TRUE) dta_B <- density(VarB, na.rm = TRUE)
plot(dta_A, col = "blue", main = "2 densities on one plot"), ylim = c(0, max(dta_A$y,dta_B$y))) lines(dta_B, col = "red")
legend("topright", c("VarA","VarB"), lty = c(1,1), col = c("blue","red"))
x<-read.csv("C:\Users\surfcat\Desktop\2006_dissimilarity.csv",header=TRUE)
pathPrep <- function(path = "clipboard") { y <- if (path == "clipboard") { readClipboard() } else { cat("Please enter the path:\n\n") readline() } x <- chartr("\\", "/", y) writeClipboard(x) return(x) }
^+v:: StringReplace, clipboard, clipboard, \, /, All SendInput, %clipboard%
snippet pp "`r gsub("\\\\", "\\\\\\\\\\\\\\\\", readClipboard())`"
snippet pp "`r gsub("\\\\", "/", readClipboard())`"
file<-Corpus(DirSource("C:/Users/PRATEEK/Desktop/training tool/Text Analytics/text_file_main"))
setWD <- function(){ setwd(readClipboard()) } readCSV <- function(){ return(readr::read_csv(paste0(readClipboard(), } setWD() df <- readCSV()
[1] "C:\\Users\\surfcat\\Desktop\\2006_dissimilarity.csv"
plot(1:10, 1:10, axes = FALSE) axis(side = 1, at = c(1,5,10)) axis(side = 2, at = c(1,3,7,10)) box()
box() axis(labels=NA,side=1,tck=-0.015,at=c(seq(from=0,to=1000,by=100))) axis(labels=NA,side=2,tck=-0.015) axis(lwd=0,side=1,line=-0.4,at=c(seq(from=0,to=1000,by=100))) axis(lwd=0,line=-0.4,side=2,las=1)
plot(x, y, xaxt="n") plot(x, y, yaxt="n") axis(1 or 2, at=c(1, 5, 10), labels=c("First", "Second", "Third"))
fun <- function(){ x <- readline("What is the value of x?") y <- readline("What is the value of y?") t <- readline("What are the T values?") v <- readline("What are the V values?") x <- as.numeric(unlist(strsplit(x, ","))) y <- as.numeric(unlist(strsplit(y, ","))) t <- as.numeric(unlist(strsplit(t, ","))) v <- as.numeric(unlist(strsplit(v, ","))) out1 <- x + y out2 <- t + v return(list(out1, out2)) }
> menu(c("Yes", "No"), title="Do you want this?") Do you want this? 1: Yes 2: No Selection:
setClass("Car",representation=representation( price = "numeric", numberDoors="numeric", typeEngine="character", mileage="numeric" )) aCar <- new("Car",price=20000,numberDoors=4,typeEngine="V6",mileage=143) > aCar An object of class "Car" Slot "price": [1] 20000 Slot "numberDoors": [1] 4 Slot "typeEngine": [1] "V6" Slot "mileage": [1] 143
> aCar@price [1] 20000 > slot(aCar,"typeEngine") [1] "V6"
Slots: The data contained in an object from an S4 class is defined by the _slots_ in the class definition. Each slot in an object is a component of the object; like components (that is, elements) of a list, these may be extracted and set, using the function ‘slot()’ or more often the operator ‘"@"’. However, they differ from list components in important ways. First, slots can only be referred to by name, not by position, and there is no partial matching of names as with list elements. ....
install.packages("RInno") require(RInno) RInno::install_inno()
create_app(app_name = "myapp", app_dir = "path/to/myapp") compile_iss()
create_app(app_name = "myapp", app_dir = "path/to/myapp", include_R = TRUE)
create_app( app_name = "myapp", app_dir = "path/to/myapp" pkgs = c("shiny", "jsonlite", "magrittr", "plotly", "ggplot2"), remotes = c("talgalili/installr", "daattali/shinyjs"))
msetInsert <- function(mset, s) { if (exists(s, mset, inherits=FALSE)) { mset[[s]] <- mset[[s]] + 1L } else { mset[[s]] <- 1L } } n <- 1e5L nus <- 1e3L ustrs <- paste("Str", seq_len(nus)) set.seed(42) strs <- sample(ustrs, n, replace=TRUE) mset <- new.env(TRUE, emptyenv()) for (s in strs) { msetInsert(mset, s) } identical(nus, length(mset)) identical(sort(ustrs), sort(names(as.list(mset)))) mset[["Str 3"]]
dir.create(path="~/.Rcache", showWarnings=F) library("R.cache") setCacheRootPath(path="./.Rcache") cache.root = getCacheRootPath() simulate <- function(mean, sd) { key <- list(mean, sd) data <- loadCache(key) if (!is.null(data)) { cat("Loaded cached data\n") return(data); } cat("Generating data from scratch...") data <- rnorm(1000, mean=mean, sd=sd) Sys.sleep(1) cat("ok\n") saveCache(data, key=key, comment="simulate()") data; } data <- simulate(2.3, 3.0) data <- simulate(2.3, 3.5) a = 2.3 b = 3.0 data <- simulate(a, b) file.remove(findCache(key=list(2.3,3.0))) file.remove(findCache(key=list(2.3,3.5))) simulate2 <- function(mean, sd) { data <- rnorm(1000, mean=mean, sd=sd) Sys.sleep(1) cat("Done generating data from scratch\n") data; } This would work with any functions from external packages. mzs <- addMemoization(simulate2) data <- mzs(2.3, 3.0) data <- mzs(2.3, 3.5) data <- mzs(2.3, 3.0) simulate2 <- addMemoization(simulate2) data <- simulate2(2.3, 3.0) for (ii in 1:2) { for (kk in 1:3) { cat(sprintf("Iteration res <- evalWithMemoization({ cat("Evaluating expression...") a <- kk Sys.sleep(1) cat("done\n") a }, key=list(kk=kk)) print(res) stopifnot(a == kk) rm(a) } }
simulate <- function(mean, sd) { key <- list(mean, sd) data <- evalWithMemoization(key = key, expr = { cat("Generating data from scratch...") data <- rnorm(1000, mean=mean, sd=sd) Sys.sleep(1) cat("ok\n") data}) }
> x <- c(1,2,3,4) > y <- c(2,3,4,5) > > setdiff(x, y) [1] 1 > setdiff(y, x) [1] 5 > union(setdiff(x, y), setdiff(y, x)) [1] 1 5
>difference <- function(x, y) { c(setdiff(x, y), setdiff(y, x)) } >x <- c(1,2,3,4) >y <- c(2,3,4,5) >difference(x,y) [1] 1 5
HouseType HouseTypeNo Semi 1 Single 2 Row 3 Single 2 Apartment 4 Apartment 4 Row 3
hous <- read.table(header = TRUE, stringsAsFactors = FALSE, text="HouseType HouseTypeNo Semi 1 Single 2 Row 3 Single 2 Apartment 4 Apartment 4 Row 3") largetable <- data.frame(HouseType = as.character(sample(unique(hous$HouseType), 1000, replace = TRUE)), stringsAsFactors = FALSE) lookup <- unique(hous) HouseType HouseTypeNo 1 Semi 1 2 Single 2 3 Row 3 5 Apartment 4
housenames <- as.numeric(1:length(unique(hous$HouseType))) names(housenames) <- unique(hous$HouseType) base2 <- data.frame(HouseType = largetable$HouseType, HouseTypeNo = (housenames[largetable$HouseType]))
library(plyr) plyr1 <- join(largetable, lookup, by = "HouseType")
library(sqldf) sqldf1 <- sqldf("SELECT largetable.HouseType, lookup.HouseTypeNo FROM largetable INNER JOIN lookup ON largetable.HouseType = lookup.HouseType")
sqldf("select * from largetable left join lookup using (HouseType)")
largetable$HouseTypeNo <- with(lookup, HouseTypeNo[match(largetable$HouseType, HouseType)])
hous <- structure(list(HouseType = c("Semi", "Single", "Row", "Single", "Apartment", "Apartment", "Row"), HouseTypeNo = c(1L, 2L, 3L, 2L, 4L, 4L, 3L)), .Names = c("HouseType", "HouseTypeNo"), class = "data.frame", row.names = c(NA, -7L)) largetable <- data.frame(HouseType = as.character(sample(unique(hous$HouseType), 1000, replace = TRUE)), stringsAsFactors = FALSE) library(qdapTools) largetable[, 1] %l% hous
hous <- read.table(header = TRUE, stringsAsFactors = FALSE, text="HouseType HouseTypeNo Semi 1 ECIIsHome 17 Single 2 Row 3 Single 2 Apartment 4 Apartment 4 Row 3") largetable <- data.frame(HouseType = as.character(sample(unique(hous$HouseType), 1000, replace = TRUE)), stringsAsFactors = FALSE) lookup <- unique(hous)
housenames <- as.numeric(1:length(unique(hous$HouseType))) names(housenames) <- unique(hous$HouseType) base2 <- data.frame(HouseType = largetable$HouseType, HouseTypeNo = (housenames[largetable$HouseType]))
unique(base2$HouseTypeNo[ base2$HouseType=="ECIIsHome" ]) [1] 2
hous <- read.table(header = TRUE, stringsAsFactors = FALSE, text="HouseType HouseTypeNo Semi 1 ECIIsHome 17 Single 2 Row 3 Single 2 Apartment 4 Apartment 4 Row 3") largetable <- data.frame(HouseType = as.character(sample(unique(hous$HouseType), 1000, replace = TRUE)), stringsAsFactors = FALSE) housenames <- tapply(hous$HouseTypeNo, hous$HouseType, unique) base2 <- data.frame(HouseType = largetable$HouseType, HouseTypeNo = (housenames[largetable$HouseType]))
unique(base2$HouseTypeNo[ base2$HouseType=="ECIIsHome" ]) ECIIsHome 17
houses <- read.table(text="Semi 1 Single 2 Row 3 Single 2 Apartment 4 Apartment 4 Row 3",col.names=c("HouseType","HouseTypeNo"))
> houses2 <- data.frame(houses,as.numeric(factor(houses$HouseType))) > houses2 HouseType HouseTypeNo as.numeric.factor.houses.HouseType.. 1 Semi 1 3 2 Single 2 4 3 Row 3 2 4 Single 2 4 5 Apartment 4 1 6 Apartment 4 1 7 Row 3 2
> houses3 <- houses > houses3$HouseType <- factor(houses3$HouseType) > houses3 HouseType HouseTypeNo 1 Semi 1 2 Single 2 3 Row 3 4 Single 2 5 Apartment 4 6 Apartment 4 7 Row 3 > levels(houses3$HouseType) [1] "Apartment" "Row" "Semi" "Single"
grid <- list(x = c(-87.727, -87.723, -87.719, -87.715, -87.711), y = c(41.836, 41.839, 41.843, 41.847, 41.851), z = (matrix(data = c(-3.428, -3.722, -3.061, -2.554, -2.362, -3.034, -3.925, -3.639, -3.357, -3.283, -0.152, -1.688, -2.765, -3.084, -2.742, 1.973, 1.193, -0.354, -1.682, -1.803, 0.998, 2.863, 3.224, 1.541, -0.044), nrow = 5, ncol = 5)))
df <- data.frame(x = c(-87.723, -87.712, -87.726, -87.719, -87.722, -87.722), y = c(41.84, 41.842, 41.844, 41.849, 41.838, 41.842), id = c("a", "b", "c", "d", "e", "f")
contour(grid) points(df$x, df$y, pch=df$id, col="blue", cex=1.2)
xrng <- range(grid$x) xbins <- length(grid$x) -1 yrng <- range(grid$y) ybins <- length(grid$y) -1 df$ix <- trunc( (df$x - min(xrng)) / diff(xrng) * (xbins)) + 1 df$iy <- trunc( (df$y - min(yrng)) / diff(yrng) * (ybins)) + 1
df$z <- with(df, (grid$z[cbind(ix, iy)] + grid$z[cbind(ix + 1, iy)] + grid$z[cbind(ix, iy + 1)] + grid$z[cbind(ix + 1, iy + 1)]) / 4)
contour(grid, xlim = range(c(grid$x, df$x)), ylim = range(c(grid$y, df$y))) points(df$x, df$y, pch=df$id, col="blue", cex=1.2) text(df$x + .001, df$y, lab=round(df$z, 2), col="blue", cex=1)
findInterval(df$x[2], grid$x) findInterval(df$y[2], grid$y)
dat <- data.frame(HouseType = c("Semi", "Single", "Row", "Single", "Apartment", "Apartment", "Row")) > dat HouseType 1 Semi 2 Single 3 Row 4 Single 5 Apartment 6 Apartment 7 Row
lookup <- data.frame(type_text = c("Semi", "Single", "Row", "Apartment"), type_num = c(1, 2, 3, 4)) > lookup type_text type_num 1 Semi 1 2 Single 2 3 Row 3 4 Apartment 4
dat$house_type_num <- plyr::mapvalues(dat$HouseType, from = lookup$type_text, to = lookup$type_num)
dat$house_type_num <- plyr::mapvalues(dat$HouseType, from = c("Semi", "Single", "Row", "Apartment"), to = c(1, 2, 3, 4))
> dat HouseType house_type_num 1 Semi 1 2 Single 2 3 Row 3 4 Single 2 5 Apartment 4 6 Apartment 4 7 Row 3
safeLookup <- function(data, lookup, by, select = setdiff(colnames(lookup), by)) { stopifnot(sum(duplicated(lookup[, by])) == 0) res <- merge(data, lookup[, c(by, select)], by = by, all.x = T) return (res) }
baseSafe <- safeLookup(largetable, house.ids, by = "HouseType") baseSafe<- safeLookup(largetable, unique(house.ids), by = "HouseType") head(baseSafe)
firstLookup <- function(data, lookup, by, select = setdiff(colnames(lookup), by)) { unique.lookup <- lookup[!duplicated(lookup[, by]), ] res <- merge(data, unique.lookup[, c(by, select)], by = by, all.x = T) return (res) } baseFirst <- firstLookup(largetable, house.ids, by = "HouseType")
gregexpr(pattern = [[1]] [1] 4 24 attr(,"match.length") [1] 1 1 attr(,"useBytes") [1] TRUE
library(stringr) str_locate_all(pattern = [[1]] start end [1,] 4 4 [2,] 24 24
instr <- function(str1,str2,startpos=1,n=1){ aa=unlist(strsplit(substring(str1,startpos),str2)) if(length(aa) < n+1 ) return(0); return(sum(nchar(aa[1:n])) + startpos+(n-1)*nchar(str2) ) } instr( [1] 3 instr( [1] 15 instr( [1] 0
library(candela) data <- list( list(name= list(name= list(name= list(name= list(name= list(name= candela( data=data, label= start= width=700, height=200)
library(DiagrammeR) mermaid(" gantt dateFormat YYYY-MM-DD title A Very Nice Gantt Diagram section Basic Tasks This is completed :done, first_1, 2014-01-06, 2014-01-08 This is active :active, first_2, 2014-01-09, 3d Do this later : first_3, after first_2, 5d Do this after that : first_4, after first_3, 5d section Important Things Completed, critical task :crit, done, import_1, 2014-01-06,24h Also done, also critical :crit, done, import_2, after import_1, 2d Doing this important task now :crit, active, import_3, after import_2, 3d Next critical task :crit, import_4, after import_3, 5d section The Extras First extras :active, extras_1, after import_4, 3d Second helping : extras_2, after extras_1, 20h More of the extras : extras_3, after extras_1, 48h ")
df <- data.frame(task = c("task1", "task2", "task3"), status = c("done", "active", "crit"), pos = c("first_1", "first_2", "first_3"), start = c("2014-01-06", "2014-01-09", "after first_2"), end = c("2014-01-08", "3d", "5d"))
library(tidyr) library(dplyr) mermaid( paste0( "gantt", "\n", "dateFormat YYYY-MM-DD", "\n", "title A Very Nice Gantt Diagram", "\n", paste(df %>% unite(i, task, status, sep = ":") %>% unite(j, i, pos, start, end, sep = ",") %>% .$j, collapse = "\n" ), "\n" ) )
m$x$config = list(ganttConfig = list( axisFormatter = list(list( "%b %d, %Y" ,htmlwidgets::JS( ) )) ))
library(timevis) data <- data.frame( id = 1:4, content = c("Item one" , "Item two" ,"Ranged item", "Item four"), start = c("2016-01-10", "2016-01-11", "2016-01-20", "2016-02-14 15:00:00"), end = c(NA , NA, "2016-02-04", NA) ) timevis(data)
library(plotly) df <- read.csv("https: stringsAsFactors = F) df$Start <- as.Date(df$Start, format = "%m/%d/%Y") client <- "Sample Client" cols <- RColorBrewer::brewer.pal(length(unique(df$Resource)), name = "Set3") df$color <- factor(df$Resource, labels = cols) p <- plot_ly() for(i in 1:(nrow(df) - 1)){ p <- add_trace(p, x = c(df$Start[i], df$Start[i] + df$Duration[i]), y = c(i, i), mode = "lines", line = list(color = df$color[i], width = 20), showlegend = F, hoverinfo = "text", text = paste("Task: ", df$Task[i], "<br>", "Duration: ", df$Duration[i], "days<br>", "Resource: ", df$Resource[i]), evaluate = T ) } p
library(reshape2) library(ggplot2) tasks <- c("Review literature", "Mung data", "Stats analysis", "Write Report") dfr <- data.frame( name = factor(tasks, levels = tasks), start.date = as.Date(c("2010-08-24", "2010-10-01", "2010-11-01", "2011-02-14")), end.date = as.Date(c("2010-10-31", "2010-12-14", "2011-02-28", "2011-04-30")), is.critical = c(TRUE, FALSE, FALSE, TRUE) ) mdfr <- melt(dfr, measure.vars = c("start.date", "end.date"))
ggplot(mdfr, aes(value, name, colour = is.critical)) + geom_line(size = 6) + xlab(NULL) + ylab(NULL)
install.packages("plotrix") library(plotrix) ?gantt.chart
id name duration pred 1 1 T1 3 2 2 T2 4 1 3 3 T3 2 1 4 4 T4 5 2 5 5 T5 1 3 6 6 T6 2 3 7 7 T7 4 4,5 8 8 T8 3 6,7
datTL <- data.frame(Position=c(rep("President", 3), rep("Vice", 3)), Name=c("Washington", "Adams", "Jefferson", "Adams", "Jefferson", "Burr"), start=as.Date(x=rep(c("1789-03-29", "1797-02-03", "1801-02-03"),2)), end=as.Date(x=rep(c("1797-02-03", "1801-02-03", "1809-02-03"),2))) Timeline <- gvisTimeline(data=datTL, rowlabel="Name", barlabel="Position", start="start", end="end", options=list(timeline="{groupByRowLabel:false}", backgroundColor= height=350, colors="[ plot(Timeline)
rawschedule <- read.csv("sample.csv", header = TRUE) tasks <- c(t(rawschedule["Task"])) dfr <- data.frame( name = factor(tasks, levels = tasks), start.date = c(rawschedule["Start"]), end.date = c(rawschedule["Finish"]), is.critical = c(rawschedule["Critical"])) mdfr <- melt(dfr, measure.vars = c("Start", "Finish")) ggplot(mdfr, aes(as.Date(value, "%m/%d/%Y"), name, colour = Critical)) + geom_line(size = 6) + xlab("Duration") + ylab("Tasks") + theme_bw()
library(PlotPrjNetworks) project1=data.frame( task=c("Market Research","Concept Development","Viability Test", "Preliminary Design","Process Design","Prototyping","Market Testing","Final Design", "Launching"), start=c("2015-07-05","2015-07-05","2015-08-05","2015-10-05","2015-10-05","2016-02-18", "2016-03-18","2016-05-18","2016-07-18"), end=c("2015-08-05","2015-08-05","2015-10-05","2016-01-05","2016-02-18","2016-03-18", "2016-05-18","2016-07-18","2016-09-18")) project2=data.frame( from=c(1,2,3,4,5,6,7,8), to=c(2,3,4,5,6,7,8,9), type=c("SS","FS","FS","SS","FS","FS","FS","FS"), delay=c(7,7,7,8,10,10,10,10)) GanttChart(project1,project2)
library(reshape2) tasks <- c("Review literature", "Mung data", "Stats analysis", "Write Report") dfrP <- data.frame( name = factor(tasks, levels = tasks), start.date = as.Date(c("2010-08-24", "2010-10-01", "2010-11-01", "2011-02-14")), end.date = as.Date(c("2010-10-31", "2010-12-14", "2011-02-28", "2011-04-30")), is.critical = c(TRUE, FALSE, FALSE, TRUE) ) dfrR <- data.frame( name = factor(tasks, levels = tasks), start.date = as.Date(c("2010-08-22", "2010-10-10", "2010-11-01", NA)), end.date = as.Date(c("2010-11-03", "2010-12-22", "2011-02-24", NA)), is.critical = c(TRUE, FALSE, FALSE,TRUE) ) mdfr <- merge(data.frame(type="Plan", melt(dfrP, measure.vars = c("start.date", "end.date"))), data.frame(type="Real", melt(dfrR, measure.vars = c("start.date", "end.date"))), all=T)
library(ggplot2) ggplot(mdfr, aes(x=value, y=type, color=is.critical))+ geom_line(size=6)+ facet_grid(name ~ .) + scale_y_discrete(limits=c("Real", "Plan")) + xlab(NULL) + ylab(NULL)
install.packages("vistime") dat <- data.frame(Position=c(rep("President", 3), rep("Vice", 3)), Name = c("Washington", "Adams", "Jefferson", "Adams", "Jefferson", "Burr"), start = rep(c("1789-03-29", "1797-02-03", "1801-02-03"), 2), end = rep(c("1797-02-03", "1801-02-03", "1809-02-03"), 2), color = c( fontcolor = rep("white", 3)) vistime(dat, events="Position", groups="Name", title="Presidents of the USA")
times <- structure(c(1331086009.50098, 1331091427.42461, 1331252565.99979, 1331252675.81601, 1331262597.72474, 1331262641.11786, 1331269557.4059, 1331278779.26727, 1331448476.96126, 1331452596.13806), class = c("POSIXct", "POSIXt"))
"2012-03-07 03:06:49 CET" "2012-03-07 04:37:07 CET" "2012-03-09 01:22:45 CET" "2012-03-09 01:24:35 CET" "2012-03-09 04:09:57 CET" "2012-03-09 04:10:41 CET" "2012-03-09 06:05:57 CET" "2012-03-09 08:39:39 CET" "2012-03-11 07:47:56 CET" "2012-03-11 08:56:36 CET"
val <- c(1.25343125e-05, 0.00022890575, 3.9269125e-05, 0.0002285681875, 4.26353125e-05, 5.982625e-05, 2.09575e-05, 0.0001516951251, 2.653125e-05, 0.0001021391875)
> t <- strftime(times, format="%H:%M:%S") > t [1] "02:06:49" "03:37:07" "00:22:45" "00:24:35" "03:09:57" "03:10:41" [7] "05:05:57" "07:39:39" "06:47:56" "07:56:36"
> xx <- as.POSIXct(t, format="%H:%M:%S") > xx [1] "2012-03-23 02:06:49 GMT" "2012-03-23 03:37:07 GMT" [3] "2012-03-23 00:22:45 GMT" "2012-03-23 00:24:35 GMT" [5] "2012-03-23 03:09:57 GMT" "2012-03-23 03:10:41 GMT" [7] "2012-03-23 05:05:57 GMT" "2012-03-23 07:39:39 GMT" [9] "2012-03-23 06:47:56 GMT" "2012-03-23 07:56:36 GMT"
plot(xx, rnorm(length(xx)), xlab="Time", ylab="Random value")
ntimes <- as.POSIXlt(times) ntimes$mday <- ntimes[1]$mday ntimes <- as.POSIXct(ntimes) par(mfrow=c(2,1)) plot(times,val) plot(ntimes,val)
library(data.table) x <- "2012-03-07 03:06:49 CET" as.IDate(x) as.ITime(x)
require(lubridate) clockS = function(t){hour(t)*3600+minute(t)*60+second(t)} plot(clockS(times),val)
plot(((as.numeric(times) - 5*3600) %% 86400)/3600, val)
hours = times(strftime(times, format="%T")) plot(val~hours)
> b <- c("2012-05-01", "2012-05-02", "2012-05-03", "2012-05-04", "2012-05-05")
> data a b 1 ABC 2012-05-01 2 ABC 2012-05-02 3 ABC 2012-05-03 4 ABC 2012-05-04 5 ABC 2012-05-05 6 DEF 2012-05-01 7 DEF 2012-05-02 8 DEF 2012-05-03 9 DEF 2012-05-04 10 DEF 2012-05-05 11 GHI 2012-05-01 12 GHI 2012-05-02 13 GHI 2012-05-03 14 GHI 2012-05-04 15 GHI 2012-05-05
> expand.grid(a,b) Var1 Var2 1 ABC 2012-05-01 2 DEF 2012-05-01 3 GHI 2012-05-01 4 ABC 2012-05-02 5 DEF 2012-05-02 6 GHI 2012-05-02 7 ABC 2012-05-03 8 DEF 2012-05-03 9 GHI 2012-05-03 10 ABC 2012-05-04 11 DEF 2012-05-04 12 GHI 2012-05-04 13 ABC 2012-05-05 14 DEF 2012-05-05 15 GHI 2012-05-05
library(tidyr) a <- c("ABC", "DEF", "GHI") b <- c("2012-05-01", "2012-05-02", "2012-05-03", "2012-05-04", "2012-05-05") crossing(a, b) a b <chr> <chr> 1 ABC 2012-05-01 2 ABC 2012-05-02 3 ABC 2012-05-03 4 ABC 2012-05-04 5 ABC 2012-05-05 6 DEF 2012-05-01 7 DEF 2012-05-02 8 DEF 2012-05-03 9 DEF 2012-05-04 10 DEF 2012-05-05 11 GHI 2012-05-01 12 GHI 2012-05-02 13 GHI 2012-05-03 14 GHI 2012-05-04 15 GHI 2012-05-05
df <- expand.grid(a,b) > df Var1 Var2 1 ABC 2012-05-01 2 DEF 2012-05-01 3 GHI 2012-05-01 4 ABC 2012-05-02 5 DEF 2012-05-02 6 GHI 2012-05-02 7 ABC 2012-05-03 8 DEF 2012-05-03 9 GHI 2012-05-03 10 ABC 2012-05-04 11 DEF 2012-05-04 12 GHI 2012-05-04 13 ABC 2012-05-05 14 DEF 2012-05-05 15 GHI 2012-05-05 > df[order( df[,1], df[,2] ),] Var1 Var2 1 ABC 2012-05-01 4 ABC 2012-05-02 7 ABC 2012-05-03 10 ABC 2012-05-04 13 ABC 2012-05-05 2 DEF 2012-05-01 5 DEF 2012-05-02 8 DEF 2012-05-03 11 DEF 2012-05-04 14 DEF 2012-05-05 3 GHI 2012-05-01 6 GHI 2012-05-02 9 GHI 2012-05-03 12 GHI 2012-05-04 15 GHI 2012-05-05`
myfxn <- function(var1,var2,var3){ var1*var2*var3 } lapply(1:3,myfxn,var2=2,var3=100)
library(data.table) example(data.table) DT x y v 1: a 1 42 2: a 3 42 3: a 6 42 4: b 1 4 5: b 3 5 6: b 6 6 7: c 1 7 8: c 3 8 9: c 6 9
myfun <- function (y, v) { ret1 = y + v ret2 = y - v return(list(r1 = ret1, r2 = ret2)) }
DT[,new1:=myfun(y,v)$r1][,new2:=myfun(y,v)$r2] x y v new1 new2 1: a 1 42 43 -41 2: a 3 42 45 -39 3: a 6 42 48 -36 4: b 1 4 5 -3 5: b 3 5 8 -2 6: b 6 6 12 0 7: c 1 7 8 -6 8: c 3 8 11 -5 9: c 6 9 15 -3
z <- myfun(DT$y,DT$v) head(DT[,new1:=z$r1][,new2:=z$r2])
myfun <- function(a,b){ res1 <- a+b res2 <- a-b list(res1,res2) } DT <- data.table(z=1:10,x=seq(3,30,3),t=seq(4,40,4)) DT col <- colnames(DT) DT[, paste0(c( recursive=FALSE),.SDcols=col]
myfun <- function (y, v, g) { ret1 = y + v + length(g) ret2 = y - v + length(g) return(list(r1 = ret1, r2 = ret2)) } DT DT[,c("new1","new2"):=myfun(y,v,g)] DT
DT[, c("new1","new2") := data.table(t(mapply(myfun,y,v,g)))] DT
matrix2list <- function(mat){ unlist(apply(mat,2,function(x) list(x)),FALSE) } DT <- data.table(A=1:10) myfun <- function(x) matrix2list(cbind(x+1,x-1)) DT[,c("c","d"):=myfun(A)]
myfun <- function (DT) { DT$ret1 = with(DT, y + v) DT$ret2 = with(DT, y - v) return(DT) }
library(lme4) frm <- "Sepal.Length ~ Sepal.Width | Species" x <- lmer(frm, data=iris, verbose=TRUE, control=list(maxIter=1), model=FALSE) start <- list(ST=x@ST) twoStep <- lmer(frm, data=iris, verbose=TRUE, control=list(maxIter=100), model=TRUE, start=start)
> x <- lmer(frm, data=iris, + verbose=TRUE, control=list(maxIter=1), model=FALSE) 0: 264.60572: 0.230940 0.0747853 0.00000 1: 204.22878: 0.518239 1.01025 0.205835 1: 204.22878: 0.518239 1.01025 0.205835 > > start <- list(ST=x@ST) > > twoStep <- lmer(frm, data=iris, + verbose=TRUE, control=list(maxIter=100), model=TRUE, + start=start) 0: 204.22878: 0.518239 1.01025 0.205835 1: 201.51667: 0.610272 2.00277 0.286049 2: 201.46706: 0.849203 1.94906 0.358809 3: 201.44614: 0.932371 1.88581 0.482423 4: 201.39421: 1.00909 1.71078 0.871824 5: 201.36543: 1.00643 1.60453 1.01663 6: 201.31066: 1.00208 1.35520 1.27524 7: 201.28458: 1.08227 1.22335 1.35147 8: 201.24330: 1.50333 0.679759 1.31698 9: 201.11881: 1.95760 0.329767 0.936047
x <- lmer(frm, data=iris, verbose=TRUE, control=list(maxIter=3), model=FALSE) start <- list(ST=x@ST) twoStep <- lmer(frm, data=iris, verbose=TRUE, control=list(maxIter=100), model=TRUE, start=start)
> x <- lmer(frm, data=iris, + verbose=TRUE, control=list(maxIter=3), model=FALSE) 0: 264.60572: 0.230940 0.0747853 0.00000 1: 204.22878: 0.518238 1.01025 0.205835 2: 201.94075: 0.00000 1.51757 -1.18259 3: 201.71473: 0.00000 1.69036 -1.89803 3: 201.71473: 0.00000 1.69036 -1.89803 > > start <- list(ST=x@ST) > > twoStep <- lmer(frm, data=iris, + verbose=TRUE, control=list(maxIter=100), model=TRUE, + start=start) 0: 264.60572: 0.230940 0.0747853 0.00000 1: 204.22878: 0.518238 1.01025 0.205835 2: 201.94075: 0.00000 1.51757 -1.18259 3: 201.71473: 0.00000 1.69036 -1.89803 4: 201.64641: 0.00000 1.82159 -2.44144 5: 201.63698: 0.00000 1.88282 -2.69497 6: 201.63649: 0.00000 1.89924 -2.76298 7: 201.63649: 4.22291e-08 1.90086 -2.76969 8: 201.63649: 4.22291e-08 1.90086 -2.76969
> std <- function(x) sd(x)/sqrt(length(x)) > std(c(1,2,3,4)) [1] 0.6454972
stderr <- function(x, na.rm=FALSE) { if (na.rm) x <- na.omit(x) sqrt(var(x)/length(x)) }
library(data.table) set.seed(1234) DT <- data.table(x=rep(c(1,2,3),each=4), y=c("A","B"), v=sample(1:100,12)) DT x y v [1,] 1 A 12 [2,] 1 B 62 [3,] 1 A 60 [4,] 1 B 61 [5,] 2 A 83 [6,] 2 B 97 [7,] 2 A 1 [8,] 2 B 22 [9,] 3 A 99 [10,] 3 B 47 [11,] 3 A 63 [12,] 3 B 49
out <- DT[,list(SUM=sum(v)),by=list(x,y)] out x y SUM [1,] 1 A 72 [2,] 1 B 123 [3,] 2 A 84 [4,] 2 B 119 [5,] 3 A 162 [6,] 3 B 96
out <- reshape(out,direction= out x SUM.A SUM.B [1,] 1 72 123 [2,] 2 84 119 [3,] 3 162 96
library(data.table) set.seed(1234) DT <- data.table(x=rep(c(1,2,3),each=1e6), y=c("A","B"), v=sample(1:100,12)) out <- DT[,list(SUM=sum(v)),by=list(x,y)] out[, as.list(setattr(SUM, }) x A B 1: 1 26499966 28166677 2: 2 26499978 28166673 3: 3 26500056 28166650
tapply(DT$v,list(DT$x, DT$y), FUN=sum) A B 1 26499966 28166677 2 26499978 28166673 3 26500056 28166650
system.time({ out <- DT[,list(SUM=sum(v)),by=list(x,y)] out[, as.list(setattr(SUM, system.time(tapply(DT$v,list(DT$x, DT$y), FUN=sum))
library(data.table) set.seed(1234) DT <- data.table(x=c(rep(c(1,2,3),each=4),3,4), y=c("A","B"), v=sample(1:100,14)) out <- DT[,list(SUM=sum(v)),by=list(x,y)] setkey(out, x, y) intDT <- expand.grid(unique(out[,x]), unique(out[,y])) setnames(intDT, c("x", "y")) out <- out[intDT] out[, as.list(setattr(SUM,
DT[, sum(v), keyby = list(x,y)][CJ(unique(x), unique(y)), allow.cartesian = T][, setNames(as.list(V1), paste(y)), by = x]
DT[, list(sum(v), mean(v)), keyby = list(x,y)][CJ(unique(x), unique(y)), allow.cartesian = T][, setNames(as.list(c(V1, V2)), c(paste0(y,".sum"), paste0(y,".mean"))), by = x]
> tapply(DT$v,list(DT$x, DT$y), FUN=sum) AA BB a 72 123 b 84 119 c 162 96
library(data.table) mydf = data.table( x = rep(1:3, each = 4), y = rep(c( v = rpois(12, 30) ) library(reshape2) dcast(mydf, x ~ y, fun = sum, value_var = "v")
function (.data, .fun = NULL, ..., .expand = TRUE, .progress = "none", .parallel = FALSE) { if (is.matrix(.data) & !is.list(.data)) .data <- .matrix_to_df(.data) f <- splat(.fun) alply(.data = .data, .margins = 1, .fun = f, ..., .expand = .expand, .progress = .progress, .parallel = .parallel) } <environment: namespace:plyr>
x <- 3 .x <- 4 ls() [1] "x" ls(all.names=TRUE) [1] ".x" "x" x [1] 3 .x [1] 4
> as.list.data.frame function (x, ...) { x <- unclass(x) attr(x, "row.names") <- NULL x } <environment: namespace:base>
> library(data.table) > methods(as.data.table) [1] as.data.table.data.frame* as.data.table.data.table* as.data.table.matrix* Non-visible functions are asterisked > data.table:::as.data.table.data.frame function (x, keep.rownames = FALSE) { if (keep.rownames) return(data.table(rn = rownames(x), x, keep.rownames = FALSE)) attr(x, "row.names") = .set_row_names(nrow(x)) class(x) = c("data.table", "data.frame") x } <environment: namespace:data.table>
ls() character(0) .a <- 1 ls() character(0) ls(all.names = TRUE) [1] ".a"
myvar <- 1 print(myvar) class(myvar) <- c("myClass", class(myvar)) print.myClass <- function(x, ...) { print(paste("a special message for myClass objects, this one has length", length(x))) return(invisible(NULL)) } print(myvar)
Envir = as.environment(-1) if (length(r) > length(l)) warning("RHS has more args than LHS. Only first", length(l), "used.") if (length(l) > length(r)) { warning("LHS has more args than RHS. RHS will be repeated.") r <- extendToMatch(r, l) } for (II in 1:length(l)) { do.call( } } extendToMatch <- function(source, destin) { s <- length(source) d <- length(destin) if(d==1 && s>1 && !is.null(as.numeric(destin))) d <- destin dif <- d - s if (dif > 0) { source <- rep(source, ceiling(d/s))[1:d] } return (source) } g = function(...) { List = as.list(substitute(list(...)))[-1L] class(List) = return(List) }
g(a, b, c) %=% list("hello", 123, list("apples, oranges")) g(d, e, f) %=% 101:103 > a [1] "hello" > b [1] 123 > c [[1]] [1] "apples, oranges" > d [1] 101 > e [1] 102 > f [1] 103
g(x, y, z) %=% list("first", "second") > x [1] "first" > y [1] "second" > z [1] "first"
g(j, k) %=% list("first", "second", "third") > j [1] "first" > k [1] "second"
values <- 1:100 V <- data.frame(a=NA, b=NA, c=NA, d=NA, e=NA) V[, c("a", "b", "e")] = values[c(2,4, 8)] V[, "d"] <- "R" V$a V$b V$c V$d V$e
`%tin%` <- function(x, y) { mapply(assign, as.character(substitute(x)[-1]), y, MoreArgs = list(envir = parent.frame())) invisible() } c(a, b) %tin% c(1, 2)
> a Error: object > b Error: object > c(a, b) %tin% c(1, 2) > a [1] 1 > b [1] 2
library(zeallot) values <- c(1, 2, 3, 4) c(a, b) %<-% values[c(2, 4)] a b
assignVec <- Vectorize("assign",c("x","value")) assignVec(c( a b 0 4 > b [1] 4 > a [1] 0
vassign <- function(..., values, envir=parent.frame()) { vars <- as.character(substitute(...())) values <- rep(values, length.out=length(vars)) for(i in seq_along(vars)) { assign(vars[[i]], values[[i]], envir) } } vals <- 11:14 vassign(aa,bb,cc,dd, values=vals) cc
list2env( list( a=1, b=2:4, c=rpois(10,10), d=gl(3,4,LETTERS[9:11]) ), envir=.GlobalEnv )
purrr::walk2(letters,1:26,assign,envir =parent.frame())
list2env(setNames(as.list(rep(2,5)), letters[1:5]), .GlobalEnv)
R> values = c(1,2,3,4) R> a <- values[2]; b <- values[3]; c <- values[4] R> a [1] 2 R> b [1] 3 R> c [1] 4
let <- function(..., env = parent.frame()) { f <- function(x, ..., i = 1) { if(is.null(substitute(...))){ if(length(x) == 1) x <- rep(x, i - 1); stopifnot(length(x) == i - 1) return(x); } val <- f(..., i = i + 1); assign(deparse(substitute(x)), val[[i]], env = env); return(val) } f(...) }
> let(a, b, 4:10) [1] 4 5 6 7 8 9 10 > a [1] 4 > b [1] 5 > let(c, d, e, f, c(4, 3, 2, 1)) [1] 4 3 2 1 > c [1] 4 > f [1] 1
let <- function(x, value) { mapply( assign, as.character(substitute(x)[-1]), value, MoreArgs = list(envir = parent.frame())) invisible() }
assignVec <- Vectorize("assign", c("x", "value")) `%<<-%` <- function(x, value) invisible(assignVec(x, value, envir = .GlobalEnv)) c("a", "b") %<<-% c(2, 4) a b
curl <- getCurlHandle() curlSetOpt(.opts = list(proxy = Res <- getURL(
opts <- list( proxy = "999.999.999.999", proxyusername = "mydomain\\myusername", proxypassword = "mypassword", proxyport = 8080 ) getURL("http:
"C:\Program Files\R\your_R_version\bin\Rgui.exe" http_proxy=http:
library(httr) set_config(use_proxy(url="abc.com",port=8080, username="username", password="password"))
"C:\Program Files\R\R-2.8.1\bin\Rgui.exe" --internet2
variable name: http_proxy variable value: https: variable name: https_proxy variable value: https:
options(internet.info = 0) http_proxy = https: http_proxy_user = user_id:password https_proxy = https: https_proxy_user = user_id:password ftp_proxy = user_id:password@your_proxy:your_port
Sys.getenv("http_proxy") Sys.getenv("http_proxy_user") Sys.getenv("https_proxy") Sys.getenv("https_proxy_user") Sys.getenv("ftp_proxy")
Sys.setenv(http_proxy="http: setInternt2 updateR(2)
ggplot(mtcars, aes(wt, mpg)) + geom_point() + expand_limits(y=0)
ggplot(mtcars, aes(wt, mpg)) + geom_point() + scale_y_continuous(limits = c(0, NA))
ggplot(mtcars, aes(wt, mpg)) + geom_point() + aes(ymin=0)
scale_y_continuous(limits = c(0, NA), expand = c(0,0))
scale_y_continuous(limits=c(0, max(mydata$y) * 1.1))
df <- data.frame(col1 = 1:3) colname <- "col1" df[colname] <- 4:6 df
DT = data.table(col1 = 1:3) colname = "col1" DT[, colname, with = FALSE]
colVar = "col1" DT[, colVar := 1, with = FALSE] DT[, (colVar) := 1] DT[, c("col1", "col2") := 1] DT[, 2:4 := 1] DT[, c("col1","col2") := list(sum(a), mean(b)] DT[, `:=`(...), by = ...]
DT[, colname := cumsum(get(colname)), with = FALSE]
expr = paste0("DT[,",colname,":=cumsum(",colname,")]") expr eval(parse(text=expr))
EVAL = function(...)eval(parse(text=paste0(...)),envir=parent.frame(2)) EVAL("DT[,",colname,":=cumsum(",colname,")]")
set(DT, j = colname, value = cumsum(DT[[colname]])) DT
colname <- as.name("users") DT2 <- DT[, sum(eval(colname, .SD)), by = country] setnames(DT2, "V1", as.character(colname))
a1 <- data.table(a=1:5, b=6:10, c1=letters[1:5]) sapply(a1, class) nm <- c("a", "b") a1[, j = (nm) := lapply(.SD, as.numeric ), .SDcols = nm ] sapply(a1, class)
new2old <- rbind( alltime, all2008 ) old2new <- rbind( all2008, alltime ) cbind( alltime = sapply( alltime, class), all2008 = sapply( all2008, class), new2old = sapply( new2old, class), old2new = sapply( old2new, class) )
alltime all2008 new2old old2new ... ... ... ... ... some_column "factor" "numeric" "factor" "character" ... ... ... ... ...
alltime <- read.table("alltime.txt", stringsAsFactors=FALSE) all2008 <- read.table("all2008.txt", stringsAsFactors=FALSE) alltime <- rbind(alltime, all2008) alltime$doctor <- as.factor(alltime$doctor)
> df <- data.frame(a = character(0), b=character(0), c=numeric(0)) > df[nrow(df)+1,] <- c("d","gsgsgd",4) Warnmeldungen: 1: In `[<-.factor`(`*tmp*`, iseq, value = "d") : invalid factor level, NAs generated 2: In `[<-.factor`(`*tmp*`, iseq, value = "gsgsgd") : invalid factor level, NAs generated > df <- data.frame(a = character(0), b=character(0), c=numeric(0), stringsAsFactors=F) > df[nrow(df)+1,] <- c("d","gsgsgd",4) > df a b c 1 d gsgsgd 4
convert.factors.to.strings.in.dataframe <- function(dataframe) { class.data <- sapply(dataframe, class) factor.vars <- class.data[class.data == "factor"] for (colname in names(factor.vars)) { dataframe[,colname] <- as.character(dataframe[,colname]) } return (dataframe) }
cbind("orig"=sapply(allSurveyData, class), "merge" = sapply(curSurveyDataMerge, class), "eq"=sapply(allSurveyData, class) == sapply(curSurveyDataMerge, class) )
> df <- data.frame(patient=c( patient referring_doctor 1 Ann X 2 Bob Y 3 Carol X > df <- rbind(df, c( Warning messages: 1: In `[<-.factor`(`*tmp*`, ri, value = "Denise") : invalid factor level, NA generated 2: In `[<-.factor`(`*tmp*`, ri, value = "Z") : invalid factor level, NA generated > df patient referring_doctor 1 Ann X 2 Bob Y 3 Carol X 4 <NA> <NA>
> df <- data.frame(patient=c( > df <- rbind(df, c( patient referring_doctor 1 Ann X 2 Bob Y 3 Carol X 4 Denise Z
df$col <- as.character(df$col) df$col <- as.factor(df$col)
commonColNames = intersect(colnames(x), colnames(y)) x = x[,commonColNames] y = y[,commonColNames] colClassesX = sapply(x, class) colClassesY = sapply(y, class) classMatch = paste( colClassesX, colClassesY, sep = "-" ) factorColIdx = grep("factor", classMatch) for(n in factorColIdx){ x[,n] = as.factor(x[,n]) y[,n] = as.factor(y[,n]) } for(n in factorColIdx){ x[,n] = factor(x[,n], levels = unique(c( levels(x[,n]), levels(y[,n]) ))) y[,n] = factor(y[,n], levels = unique(c( levels(y[,n]), levels(x[,n]) ))) } res = rbind(x,y) res
$by.self self.time self.pct total.time total.pct [.data.frame 0.72 10.1 1.84 25.8 inherits 0.50 7.0 1.10 15.4 data.frame 0.48 6.7 4.86 68.3 unique.default 0.44 6.2 0.48 6.7 deparse 0.36 5.1 1.18 16.6 rbind 0.30 4.2 2.22 31.2 match 0.28 3.9 1.38 19.4 [<-.factor 0.28 3.9 0.56 7.9 levels 0.26 3.7 0.34 4.8 NextMethod 0.22 3.1 0.82 11.5 ...
$by.total total.time total.pct self.time self.pct data.frame 4.86 68.3 0.48 6.7 rbind 2.22 31.2 0.30 4.2 do.call 2.22 31.2 0.00 0.0 [ 1.98 27.8 0.16 2.2 [.data.frame 1.84 25.8 0.72 10.1 match 1.38 19.4 0.28 3.9 %in% 1.26 17.7 0.14 2.0 is.factor 1.20 16.9 0.10 1.4 deparse 1.18 16.6 0.36 5.1 ...
type word response N Classification classN Abstract ANGER bitter 1 3a 3a Abstract ANGER control 1 1a 1a Abstract ANGER father 1 3a 3a Abstract ANGER flushed 1 3a 3a Abstract ANGER fury 1 1c 1c Abstract ANGER hat 1 3a 3a Abstract ANGER help 1 3a 3a Abstract ANGER mad 13 3a 3a Abstract ANGER management 2 1a 1a ... until row 1700
Rprof("profile1.out") y <- vector( for (i in 1:length(x[,1])) { y[[i]] <- data.frame(rep(x[i,1],x[i,"N"]),rep(x[i,2],x[i,"N"]),rep(x[i,3],x[i,"N"]),rep(x[i,4],x[i,"N"]),rep(x[i,5],x[i,"N"]),rep(x[i,6],x[i,"N"])) } all <- do.call( colnames(all) <- colnames(x) table_all <- table(all$word,all$classN) dataf.all <- as.data.frame(table_all[,1:length(table_all[1,])]) dataf.all$words <- as.factor(rownames(dataf.all)) dataf.all$type <- "no" words <- levels(dataf.all$words) for (i in 1:length(words)) { dataf.all$type[i] <- as.character(all[pmatch(words[i],all$word),"type"]) } dataf.all$type <- as.factor(dataf.all$type) dataf.all$typeN <- as.numeric(dataf.all$type) dataf.all$c1 <- apply(dataf.all[,c("1a","1b","1c","1d","1e","1f")],1,sum) dataf.all$c2 <- apply(dataf.all[,c("2a","2b","2c")],1,sum) dataf.all$c3 <- apply(dataf.all[,c("3a","3b")],1,sum) Rprof(NULL) library(profr) ggplot.profr(parse_rprof("profile1.out"))
1a 1b 1c 1d 1e 1f 2a 2b 2c 3a 3b pa words type typeN c1 c2 c3 pa 3 0 8 0 0 0 0 0 0 24 0 0 ANGER Abstract 1 11 0 24 0 6 0 4 0 1 0 0 11 0 13 0 0 ANXIETY Abstract 1 11 11 13 0 2 11 1 0 0 0 0 4 0 17 0 0 ATTITUDE Abstract 1 14 4 17 0 9 18 0 0 0 0 0 0 0 0 8 0 BARREL Concrete 2 27 0 8 0 0 1 18 0 0 0 0 4 0 12 0 0 BELIEF Abstract 1 19 4 12 0
n <- 1000 x <- data.frame(group = sample(letters[1:4], n, replace=TRUE), condition = sample(LETTERS[1:10], n, replace = TRUE), data = rnorm(n)) marginal.means.1 <- aggregate(data ~ group + condition, data = x, FUN=mean) marginal.means.2 <- marginal.means.1[NULL,] row.counter <- 1 for (condition in levels(x$condition)) { for (group in levels(x$group)) { tmp.value <- 0 tmp.length <- 0 for (c in 1:nrow(x)) { if ((x[c,"group"] == group) & (x[c,"condition"] == condition)) { tmp.value <- tmp.value + x[c,"data"] tmp.length <- tmp.length + 1 } } marginal.means.2[row.counter,"group"] <- group marginal.means.2[row.counter,"condition"] <- condition marginal.means.2[row.counter,"data"] <- tmp.value / tmp.length row.counter <- row.counter + 1 } } all.equal(marginal.means.1, marginal.means.2)
Rprof("profile1.out", line.profiling=TRUE) eval(parse(file = "http: Rprof(NULL) summaryRprof("profile1.out", lines = "show")
$by.self self.time self.pct total.time total.pct download.php?i=KjdkSVZq <no location> 4.38 34.93 4.38 34.93 download.php?i=KjdkSVZq download.php?i=KjdkSVZq download.php?i=KjdkSVZq download.php?i=KjdkSVZq $by.total total.time total.pct self.time self.pct download.php?i=KjdkSVZq <no location> 4.38 34.93 4.38 34.93 download.php?i=KjdkSVZq download.php?i=KjdkSVZq download.php?i=KjdkSVZq download.php?i=KjdkSVZq $by.line self.time self.pct total.time total.pct <no location> 4.38 34.93 4.38 34.93 download.php?i=KjdkSVZq download.php?i=KjdkSVZq download.php?i=KjdkSVZq download.php?i=KjdkSVZq download.php?i=KjdkSVZq $sample.interval [1] 0.02 $sampling.time [1] 12.54
proftable <- function(file, lines=10) { interval <- as.numeric(strsplit(readLines(file, 1), "=")[[1L]][2L])/1e+06 profdata <- read.table(file, header=FALSE, sep=" ", comment.char = "", colClasses="character", skip=1, fill=TRUE, na.strings="") filelines <- grep(" files <- aaply(as.matrix(profdata[filelines,]), 1, function(x) { paste(na.omit(x), collapse = " ") }) profdata <- profdata[-filelines,] total.time <- interval*nrow(profdata) profdata <- as.matrix(profdata[,ncol(profdata):1]) profdata <- aaply(profdata, 1, function(x) { c(x[(sum(is.na(x))+1):length(x)], x[seq(from=1,by=1,length=sum(is.na(x)))]) }) stringtable <- table(apply(profdata, 1, paste, collapse=" ")) uniquerows <- strsplit(names(stringtable), " ") uniquerows <- llply(uniquerows, function(x) replace(x, which(x=="NA"), NA)) dimnames(stringtable) <- NULL stacktable <- ldply(uniquerows, function(x) x) stringtable <- stringtable/sum(stringtable)*100 stacktable <- data.frame(PctTime=stringtable[], stacktable) stacktable <- stacktable[order(stringtable, decreasing=TRUE),] rownames(stacktable) <- NULL stacktable <- head(stacktable, lines) na.cols <- which(sapply(stacktable, function(x) all(is.na(x)))) stacktable <- stacktable[-na.cols] parent.cols <- which(sapply(stacktable, function(x) length(unique(x)))==1) parent.call <- paste0(paste(stacktable[1,parent.cols], collapse = " > ")," >") stacktable <- stacktable[,-parent.cols] calls <- aaply(as.matrix(stacktable[2:ncol(stacktable)]), 1, function(x) { paste(na.omit(x), collapse= " > ") }) stacktable <- data.frame(PctTime=stacktable$PctTime, Call=calls) frac <- sum(stacktable$PctTime) attr(stacktable, "total.time") <- total.time attr(stacktable, "parent.call") <- parent.call attr(stacktable, "files") <- files attr(stacktable, "total.pct.time") <- frac cat("\n") print(stacktable, row.names=FALSE, right=FALSE, digits=3) cat("\n") cat(paste(files, collapse="\n")) cat("\n") cat(paste("\nParent Call:", parent.call)) cat(paste("\n\nTotal Time:", total.time, "seconds\n")) cat(paste0("Percent of run time represented: ", format(frac, digits=3)), "%") invisible(stacktable) }
> Rprof("profile1.out", line.profiling=TRUE) > source("http: > Rprof(NULL) > proftable("profile1.out", lines=10) PctTime Call 20.47 1 9.73 1 8.72 1 8.39 == > Ops.factor 5.37 == 5.03 == > Ops.factor > noNA.levels > levels 4.70 == > Ops.factor > NextMethod 4.03 1 4.03 1 3.36 1 Parent Call: source > withVisible > eval > eval > Total Time: 5.96 seconds Percent of run time represented: 73.8 %
install.packages("profr") devtools::install_github("alexwhitworth/imputation") x <- matrix(rnorm(1000), 100) x[x>1] <- NA library(imputation) library(profr) a <- profr(kNN_impute(x, k=5, q=2), interval= 0.005)
R> head(a, 10) level g_id t_id f start end n leaf time source 9 1 1 1 kNN_impute 0.005 0.190 1 FALSE 0.185 imputation 10 2 1 1 var_tests 0.005 0.010 1 FALSE 0.005 <NA> 11 2 2 1 apply 0.010 0.190 1 FALSE 0.180 base 12 3 1 1 var.test 0.005 0.010 1 FALSE 0.005 stats 13 3 2 1 FUN 0.010 0.110 1 FALSE 0.100 <NA> 14 3 2 2 FUN 0.115 0.190 1 FALSE 0.075 <NA> 15 4 1 1 var.test.default 0.005 0.010 1 FALSE 0.005 <NA> 16 4 2 1 sapply 0.010 0.040 1 FALSE 0.030 base 17 4 3 1 dist_q.matrix 0.040 0.045 1 FALSE 0.005 imputation 18 4 4 1 sapply 0.045 0.075 1 FALSE 0.030 base
t <- tapply(a$time, paste(a$source, a$f, sep= "::"), sum) t[order(t)] R> round(t[order(t)] / sum(t), 4) base::! base::%in% base::| base::anyDuplicated 0.0015 0.0015 0.0015 0.0015 base::c base::deparse base::get base::match 0.0015 0.0015 0.0015 0.0015 base::mget base::min base::t methods::el 0.0015 0.0015 0.0015 0.0015 methods::getGeneric NA::.findMethodInTable NA::.getGeneric NA::.getGenericFromCache 0.0015 0.0015 0.0015 0.0015 NA::.getGenericFromCacheTable NA::.identC NA::.newSignature NA::.quickCoerceSelect 0.0015 0.0015 0.0015 0.0015 NA::.sigLabel NA::var.test.default NA::var_tests stats::var.test 0.0015 0.0015 0.0015 0.0015 base::paste methods::as<- NA::.findInheritedMethods NA::.getClassFromCache 0.0030 0.0030 0.0030 0.0030 NA::doTryCatch NA::tryCatchList NA::tryCatchOne base::crossprod 0.0030 0.0030 0.0030 0.0045 base::try base::tryCatch methods::getClassDef methods::possibleExtends 0.0045 0.0045 0.0045 0.0045 methods::loadMethod methods::is imputation::dist_q.matrix methods::validObject 0.0075 0.0090 0.0120 0.0136 NA::.findNextFromTable methods::addNextMethod NA::.nextMethod base::lapply 0.0166 0.0346 0.0361 0.0392 base::sapply imputation::impute_fn_knn methods::new imputation::kNN_impute 0.0392 0.0392 0.0437 0.0557 methods::callNextMethod kernlab::as.kernelMatrix base::apply kernlab::kernelMatrix 0.0572 0.0633 0.0663 0.0753 methods::initialize NA::FUN base::standardGeneric 0.0798 0.0994 0.1325
prof_list <- replicate(100, profr(kNN_impute(x, k=5, q=2), interval= 0.005), simplify = FALSE) fun_timing <- vector("list", length= 100) for (i in 1:100) { fun_timing[[i]] <- tapply(prof_list[[i]]$time, paste(prof_list[[i]]$source, prof_list[[i]]$f, sep= "::"), sum) } sapply(fun_timing, function(x) {length(names(x))}) > sapply(fun_timing, sum) [1] 2.820 5.605 2.325 2.895 3.195 2.695 2.495 2.315 2.005 2.475 4.110 2.705 2.180 2.760 [15] 3130.240 3.435 7.675 7.155 5.205 3.760 7.335 7.545 8.155 8.175 6.965 5.820 8.760 7.345 [29] 9.815 7.965 6.370 4.900 5.720 4.530 6.220 3.345 4.055 3.170 3.725 7.780 7.090 7.670 [43] 5.400 7.635 7.125 6.905 6.545 6.855 7.185 7.610 2.965 3.865 3.875 3.480 7.770 7.055 [57] 8.870 8.940 10.130 9.730 5.205 5.645 3.045 2.535 2.675 2.695 2.730 2.555 2.675 2.270 [71] 9.515 4.700 7.270 2.950 6.630 8.370 9.070 7.950 3.250 4.405 3.475 6.420 2948.265 3.470 [85] 3.320 3.640 2.855 3.315 2.560 2.355 2.300 2.685 2.855 2.540 2.480 2.570 3.345 2.145 [99] 2.620 3.650
fun_timing <- fun_timing[-c(15,83)] fun_timing2 <- lapply(fun_timing, function(x) { ret <- data.frame(fun= names(x), time= x) dimnames(ret)[[1]] <- 1:nrow(ret) return(ret) })
merge_recursive <- function(list, ...) { n <- length(list) df <- data.frame(list[[1]]) for (i in 2:n) { df <- merge(df, list[[i]], ... = ...) } return(df) } fun_time <- merge_recursive(fun_timing2, by= "fun", all= FALSE) fun_time2 <- data.frame(fun=fun_time[,1], avg_time=apply(fun_time[,-1], 1, mean, na.rm=T)) fun_time2$avg_pct <- fun_time2$avg_time / sum(fun_time2$avg_time) fun_time2 <- fun_time2[order(fun_time2$avg_time, decreasing=TRUE),] R> head(fun_time2, 15) fun avg_time avg_pct 4 base::standardGeneric 0.6760714 0.14745123 20 NA::FUN 0.4666327 0.10177262 12 methods::initialize 0.4488776 0.09790023 9 kernlab::kernelMatrix 0.3522449 0.07682464 8 kernlab::as.kernelMatrix 0.3215816 0.07013698 11 methods::callNextMethod 0.2986224 0.06512958 1 base::apply 0.2893367 0.06310437 7 imputation::kNN_impute 0.2433163 0.05306731 14 methods::new 0.2309184 0.05036331 10 methods::addNextMethod 0.2012245 0.04388708 3 base::sapply 0.1875000 0.04089377 2 base::lapply 0.1865306 0.04068234 6 imputation::impute_fn_knn 0.1827551 0.03985890 19 NA::.nextMethod 0.1790816 0.03905772 18 NA::.findNextFromTable 0.1003571 0.02188790
par(mfcol=c(5,3)) hist(RtBio, main="Histograma de Bio Pappel") boxplot(RtBio, main="Diagrama de Caja de Bio Pappel") stem(RtBio) plot(RtBio, main="Gráfica de Dispersión") hist(RtAlsea, main="Histograma de Alsea") boxplot(Alsea, main="Diagrama de caja de Alsea") stem(RtAlsea) plot(RtTelev, main="Gráfica de distribución de Alsea") hist(RtTelev, main="Histograma de Televisa") boxplot(telev, main="Diagrama de Caja de Televisa") stem(Telev) plot(Telev, main="Gráfica de dispersión de Televisa") hist(RtWalmex, main="Histograma de Walmex") boxplot(RtWalmex, main="Diagrama de caja de Walmex") stem(RtWalmex) plot(RtWalmex, main="Gráfica de dispersión de Walmex") hist(RtIca, main="Histograma de Ica") boxplot(RtIca, main="Gráfica de caja de Ica") stem(RtIca) plot(RtIca, main="Gráfica de dispersión de Ica")
> head(stats[,1:2]) rk team 1 1 Washington Capitals* 2 2 San Jose Sharks* 3 3 Chicago Blackhawks* 4 4 Phoenix Coyotes* 5 5 New Jersey Devils* 6 6 Vancouver Canucks* for(i in c(1,3:ncol(stats))) { stats[,i] <- as.numeric(stats[,i]) } > head(stats[,1:2]) rk team 1 2 Washington Capitals* 2 13 San Jose Sharks* 3 24 Chicago Blackhawks* 4 26 Phoenix Coyotes* 5 27 New Jersey Devils* 6 28 Vancouver Canucks*
cols = c(1, 3, 4, 5); df[,cols] = apply(df[,cols], 2, function(x) as.numeric(as.character(x)));
Df <- data.frame( x = as.factor(sample(1:5,30,r=TRUE)), y = as.factor(sample(1:5,30,r=TRUE)), z = as.factor(sample(1:5,30,r=TRUE)), w = as.factor(sample(1:5,30,r=TRUE)) ) Df[,c("y","w")] <- as.numeric(as.character(unlist(Df[,c("y","w")]))) str(Df)
id <- c(1,3:ncol(stats))) stats[,id] <- as.numeric(as.character(unlist(stats[,id])))
library(magrittr) cols = c(1, 3, 4, 5) df[,cols] %<>% lapply(function(x) as.numeric(as.character(x)))
factorToNumeric <- function(f) as.numeric(levels(f))[as.integer(f)] cols <- c(1, 3:ncol(stats)) stats[cols] <- lapply(stats[cols], factorToNumeric)
unfactorize<-c("colA","colB") df[,unfactorize]<-lapply(unfactorize, function(x) as.numeric(as.character(df[,x])))
df <- data.frame(x = 1:10, y = rep(1:2, 5), k = rnorm(10, 5,2), z = rep(c(2010, 2012, 2011, 2010, 1999), 2), j = c(rep(c("a", "b", "c"), 3), "d")) convert.magic <- function(obj, type){ FUN1 <- switch(type, character = as.character, numeric = as.numeric, factor = as.factor) out <- lapply(obj, FUN1) as.data.frame(out) } str(df) str(convert.magic(df, "character")) str(convert.magic(df, "factor")) df[, c("x", "y")] <- convert.magic(df[, c("x", "y")], "factor")
Df <- data.frame( x = c(NA,as.factor(sample(1:5,30,r=T))), y = c(NA,as.factor(sample(1:5,30,r=T))), z = c(NA,as.factor(sample(1:5,30,r=T))), w = c(NA,as.factor(sample(1:5,30,r=T))) ) Df[,c(1:4)] <- as.numeric(as.character(Df[,c(1:4)]))
Warning message: NAs introduced by coercion > head(Df) x y z w 1 NA NA NA NA 2 NA NA NA NA 3 NA NA NA NA 4 NA NA NA NA 5 NA NA NA NA 6 NA NA NA NA
Df[,c(1:4)]= apply(Df[,c(1:4)], 2, function(x) as.numeric(as.character(x)))
> head(Df) x y z w 1 NA NA NA NA 2 2 3 4 1 3 1 5 3 4 4 2 3 4 1 5 5 3 5 5 6 4 2 4 4
library("varhandle") my_iris <- data.frame(Sepal.Length = factor(iris$Sepal.Length), sample_id = factor(1:nrow(iris))) my_iris <- unfactor(my_iris)
data[] <- lapply(data, function(x) type.convert(as.character(x), as.is = TRUE))
data = as.data.frame(apply(data, 2, function(x) { y = str_replace_all(x, ",", "") return(as.numeric(y)) }))
x <- c("Ekstr\xf8m", "J\xf6reskog", "bi\xdfchen Z\xfcrcher") Encoding(x) <- "latin1" x iconv(x, "latin1", "ASCII", sub="")
any(grepl("I_WAS_NOT_ASCII", iconv(x, "latin1", "ASCII", sub="I_WAS_NOT_ASCII"))) [1] TRUE grep("I_WAS_NOT_ASCII", iconv(x, "latin1", "ASCII", sub="I_WAS_NOT_ASCII")) [1] 1 2 3
x <- c("Ekstr\u00f8m", "J\u00f6reskog", "bi\u00dfchen Z\u00fcrcher") x stringi::stri_trans_general(x, "latin-ascii")
require( tikzDevice ) tikz( plot( 1, 1, main = dev.off()
\documentclass[a4paper]{article} \title{Sweave Example 1} \author{Friedrich Leisch} \begin{document} \maketitle In this example we embed parts of the examples from the \texttt{kruskal.test} help page into a \LaTeX{} document: <<>>= data(airquality) library(ctest) kruskal.test(Ozone ~ Month, data = airquality) @ which shows that the location parameter of the Ozone distribution varies significantly from month to month. Finally we include a boxplot of the data: \begin{center} <<fig=TRUE,echo=FALSE>>= boxplot(Ozone ~ Month, data = airquality) @ \end{center} \end{document}
\dontrun{ for(i in seq(1, 1e5)) { lm(mpg ~ wt, data = mtcars) } } 2 + 2
gctemplate <- function(nvars, ncausers, ndependents){ ...
> require(xlsx) Loading required package: xlsx Loading required package: xlsxjars Loading required package: rJava Error : .onLoad failed in loadNamespace() for call: fun(libname, pkgname) error: JAVA_HOME cannot be determined from the Registry Failed with error: ‘package ‘rJava’ could not be loaded’
require(rJava) Loading required package: rJava Error : .onLoad failed in loadNamespace() for call: fun(libname, pkgname) error: No CurrentVersion entry in Software/JavaSoft registry! Try re-installing Java and make sure R and Java have matching architectures.
Sys.setenv(JAVA_HOME = "C:/Program Files/Java/jdk1.8.0_101/")
if(Sys.getenv("JAVA_HOME")!=""){ Sys.setenv(JAVA_HOME="") } library(rJava)
library(randomForest) cars$speed[1] <- NA model <- randomForest(speed ~., data=cars)
Error in na.fail.default(list(speed = c(NA, 4, 7, 7, 8, 9, 10, 10, 10, : missing values in object
>>> x = range(10) >>> x [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] >>> x[-5:] [5, 6, 7, 8, 9] >>>
> x <- 0:9 > x [1] 0 1 2 3 4 5 6 7 8 9 > x[(length(x) - 4):length(x)] [1] 5 6 7 8 9 >
test elapsed relative tail(x, 5) 38.70 5.724852 x[length(x) - (4:0)] 6.76 1.000000 x[seq.int(to = length(x), length.out = 5)] 7.53 1.113905
require(rbenchmark) x <- 1:1e8 do.call( benchmark, c(list( expression(tail(x,5)), expression(x[seq.int(to=length(x), length.out=5)]), expression(x[length(x)-(4:0)]) ), replications=1e6) )
x<-1:10 system.time(replicate(10e6,tail(x,5))) user system elapsed 138.85 0.26 139.28 system.time(replicate(10e6,rev(x)[1:5])) user system elapsed 61.97 0.25 62.23
endv<-function(vec,val) { if(val>length(vec)) { stop("Length of value greater than length of vector") }else { vec[((length(vec)-val)+1):length(vec)] } }
test<-c(0,1,1,0,0,1,1,NA,1,1) endv(test,5) endv(LETTERS,5)
test replications elapsed relative 1 expression(tail(x, 5)) 100000 5.24 6.469 2 expression(x[seq.int(to = length(x), length.out = 5)]) 100000 0.98 1.210 3 expression(x[length(x) - (4:0)]) 100000 0.81 1.000 4 expression(endv(x, 5)) 100000 1.37 1.691
accessRevTail <- function(x, n) { tail(x,n)[1] } accessRevLen <- function(x, n) { x[length(x) - n + 1] } microbenchmark::microbenchmark(accessRevLen(1:100, 87), accessRevTail(1:100, 87)) Unit: microseconds expr min lq mean median uq max neval accessRevLen(1:100, 87) 1.860 2.3775 2.84976 2.803 3.2740 6.755 100 accessRevTail(1:100, 87) 22.214 23.5295 28.54027 25.112 28.4705 110.833 100
myplot <- function(df){ ggplot(df, aes(df[, 1], df[, 2])) + geom_point() }
require(ggplot2) myplot <- function(df){ ggplot(df, aes_string(colnames(df)[1], colnames(df)[2])) + geom_point() }
myplot = function(df, x_string, y_string) { ggplot(df, aes_string(x = x_string, y = y_string)) + geom_point() } myplot(df, "A", "B") myplot(df, "B", "A")
qplot(mtcars$mpg) + annotate(geom = "text", x = 30, y = 3, label = "Some text\nSome more text")
qplot(mtcars$mpg) + annotate(geom = "text", x = 30, y = 3, label = "Some text\nSome more text", hjust = 0)
p4<-ggplot(BCIcor,aes(x=cor))+geom_histogram(binwidth = 0.2)
p4<-ggplot(BCIcor,aes(x=cor,fill=p))+geom_histogram(binwidth = 0.2)
cor pvalue p 1 0.87882370 0.049710 2 2 -0.83041880 0.081660 1 3 -0.12989750 0.835100 1 4 -0.75309860 0.141700 1 5 -0.88553450 0.045680 2
ggplot(BCIcor,aes(x=cor,fill=as.factor(p)))+geom_histogram(binwidth = 0.2)
library(data.table) N <- 1e6 K <- 1e2 data <- as.data.frame(rep(data.frame(rnorm(N)), K)) gc(reset=TRUE) tracemem(data) data <- as.data.table(data) gc()
library(data.table) N <- 1e6 K <- 1e2 data <- as.data.frame(rep(data.frame(rnorm(N)), K)) gc(reset=TRUE) tracemem(data) data <- as.data.table(data) gc()
char_array = c("foo_bar","bar_foo","apple","beer") a = data.frame("data"=char_array,"data2"=1:4) a$data = substr(a$data,1,nchar(a$data)-3)
library(stringr) str_sub(iris$Species, 1, str_length(iris$Species)-3)
library( char_array <- c("foo_bar","bar_foo","apple","beer") a <- data.frame("data"=char_array, "data2"=1:4) (a$data <- stri_sub(a$data, 1, -4))
cs <- c("foo_bar","bar_foo","apple","beer","so","a") gsub(
x <- y <- runif(1e7) x[1e4] <- NA y[1e7] <- NA microbenchmark::microbenchmark(any(is.na(x)), anyNA(x), any(is.na(y)), anyNA(y), times=10)
set.seed(1234) x <- sample(c(1:5, NA), 100000000, replace = TRUE) nacount <- function(x){ for(i in 1:length(x)){ if(is.na(x[i])) { print(TRUE) break} }} system.time( nacount(x) ) [1] TRUE User System verstrichen 0.14 0.04 0.18 system.time( any(is.na(x)) ) User System verstrichen 0.28 0.08 0.37 system.time( sum(is.na(x)) > 0 ) User System verstrichen 0.45 0.07 0.53
x <- runif(1e7) x[1e4] <- NA system.time(sum(is.na(x)) > 0) > system.time(sum(is.na(x)) > 0) user system elapsed 0.065 0.001 0.065 system.time(any(is.na(x))) > system.time(any(is.na(x))) user system elapsed 0.035 0.000 0.034 system.time(match(NA,x)) > system.time(match(NA,x)) user system elapsed 1.824 0.112 1.918 system.time(NA %in% x) > system.time(NA %in% x) user system elapsed 1.828 0.115 1.925 system.time(which(is.na(x) == TRUE)) > system.time(which(is.na(x) == TRUE)) user system elapsed 0.099 0.029 0.127
d <- c(1,2,3,NA,5,3) which(is.na(d) == TRUE, arr.ind=TRUE)
A B C A B C 1 j i 100 1 j i 100 --> 2 j i 100 2 K P 101 3 K P 101 4 K P 101
A B C [1,] "j" "i" "100" [2,] "j" "i" "100" [3,] "K" "P" "101" [4,] "K" "P" "101"
df <- data.frame(a=1:2, b=letters[1:2]) df[rep(seq_len(nrow(df)), each=2),]
library(dplyr) df <- data_frame(x = 1:2, y = c("a", "b")) df %>% slice(rep(1:n(), each = 2))
library(plyr) rep.row <- function(r, n){ colwise(function(x) rep(x, n))(r) }
> data <- data.frame(a=letters[1:3], b=letters[4:6]) > data a b 1 a d 2 b e 3 c f > as.data.frame(lapply(data, rep, 2)) a b 1 a d 2 b e 3 c f 4 a d 5 b e 6 c f
rep.data.frame <- function(x, times) { rnames <- attr(x, "row.names") x <- lapply(x, rep.int, times = times) class(x) <- "data.frame" if (!is.numeric(rnames)) attr(x, "row.names") <- make.unique(rep.int(rnames, times)) else attr(x, "row.names") <- .set_row_names(length(rnames) * times) x }
library(Lahman) library(microbenchmark) microbenchmark( mefa:::rep.data.frame(Batting, 10), rep.data.frame(Batting, 10), Batting[rep.int(seq_len(nrow(Batting)), 10), ], times = 10 )
df <- data.frame(A=c("j","K","Z"), B=c("i","P","Z"), C=c(100,101,102), ntimes=c(2,4,1)) df <- as.data.frame(lapply(df, rep, df$ntimes))
A B C ntimes 1 Z Z 102 1 2 j i 100 2 3 j i 100 2 4 K P 101 4 5 K P 101 4 6 K P 101 4 7 K P 101 4
df <- data.frame(A=c("j","K","Z"), B=c("i","P","Z"), C=c(100,101,102), ntimes=c(2000,3000,4000)) microbenchmark::microbenchmark( df[rep(seq_len(nrow(df)), df$ntimes),], as.data.frame(lapply(df, rep, df$ntimes)), times = 10 )
Unit: microseconds expr min lq mean median uq max neval df[rep(seq_len(nrow(df)), df$ntimes), ] 3563.113 3586.873 3683.7790 3613.702 3657.063 4326.757 10 as.data.frame(lapply(df, rep, df$ntimes)) 625.552 654.638 676.4067 668.094 681.929 799.893 10
df$index = 1:nrow(df) df = rbind(df,df) df = df[order(df$index),][,-ncol(df)]
R> Rcpp::cppFunction( R> crashMe(123) Aborted (core dumped) $
R> library(inline) R> crashMe <- cfunction(body="::abort();") R> crashMe() Aborted (core dumped) $
> .C("crashme") *** caught segfault *** address 0x1d9e, cause Traceback: 1: .C("crashme") Possible actions: 1: abort (with core dump, if enabled) 2: normal R exit 3: exit R without saving workspace 4: exit R saving workspace Selection: 1 aborting ... Segmentation fault
makeActiveBinding("refresh", function() { shell("Rgui"); q("no") }, .GlobalEnv) makeActiveBinding("refresh", function() { system("R"); q("no") }, .GlobalEnv)
makeActiveBinding("restart.R", function() { shell.exec(paste0(R.home(),"/bin/x64/Rgui.exe")); q("no") }, .GlobalEnv)
library(RDCOMClient) wsh <- COMCreate("Wscript.Shell") wsh$SendKeys("^+{F10}")
makeActiveBinding("refresh", function() { shell(paste0("start \"\" \"", R.home(), "/bin/x64/Rgui.exe\"")); q("no") }, .GlobalEnv)
save.image("Rstreamingscience.data") quit(save= load("Rstreamingscience.data") save.image("Rstreamingscience.data")
makeActiveBinding("refresh", function() { system(paste0(R.home(),"/bin/i386/R")); q("no") }, .GlobalEnv)
clc <- function() { rm(list = ls(envir = globalenv()),envir = globalenv()) gc() cat("\014") .rs.restartR() }
restart_r <- function(status = 0, debug = TRUE) { if (debug) message("restart_r(): Customizing .Last() to relaunch R ...") assign(".Last", function() { args <- commandArgs() system2(args[1], args = args[-1]) }, envir = globalenv()) if (debug) message("restart_r(): Quitting current R session and starting a new one ...") quit(save = "no", status = status, runLast = TRUE) }
dtf <- structure(list(variable = structure(c(1L, 1L, 2L, 2L, 3L, 3L, 4L, 4L, 5L, 5L), .Label = c("vma", "vla", "ia", "fma", "fla"), class = "factor"), ustanova = structure(c(1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L), .Label = c("srednja škola", "fakultet"), class = "factor"), `(all)` = c(42.9542857142857, 38.7803203661327, 37.8996138996139, 33.7672811059908, 29.591439688716, 26.1890660592255, 27.9557692307692, 23.9426605504587, 33.2200772200772, 26.9493087557604)), .Names = c("variable", "ustanova", "(all)"), row.names = c(NA, 10L), class = c("cast_df", "data.frame"), idvars = c("variable", "ustanova"), rdimnames = list( structure(list(variable = structure(c(1L, 1L, 2L, 2L, 3L, 3L, 4L, 4L, 5L, 5L), .Label = c("vma", "vla", "ia", "fma", "fla"), class = "factor"), ustanova = structure(c(1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L), .Label = c("srednja škola", "fakultet"), class = "factor")), .Names = c("variable", "ustanova" ), row.names = c("vma_srednja škola", "vma_fakultet", "vla_srednja škola", "vla_fakultet", "ia_srednja škola", "ia_fakultet", "fma_srednja škola", "fma_fakultet", "fla_srednja škola", "fla_fakultet"), class = "data.frame"), structure(list(value = structure(1L, .Label = "(all)", class = "factor")), .Names = "value", row.names = "(all)", class = "data.frame")))
ggplot(bar) + geom_bar(aes(variable, `(all)`, fill = ustanova), position = "dodge") + geom_text(aes(variable, `(all)`, label = sprintf("%2.1f", `(all)`)), position = "dodge") + coord_flip()
ggplot(bar) + geom_bar(aes(variable, `(all)`, fill = ustanova), position = "dodge") + geom_text(aes(variable, `(all)`, label = sprintf("%2.1f", `(all)`)), position = position_dodge(width = 1)) + coord_flip()
ggplot(iris, aes(Petal.Width,Petal.Length,color=Species)) + geom_line() + theme_bw()
ggplot(iris, aes(Petal.Width,Petal.Length,color=Species)) + geom_line(size=4) + theme_bw()
library(grid) ggplot(iris,aes(Petal.Width,Petal.Length,color=Species))+geom_line()+theme_bw() + theme(legend.key.size=unit(1,"cm"))
ggplot(iris,aes(Petal.Width,Petal.Length,color=Species)) + geom_line() + geom_point(size=4) + theme_bw()
ggplot(iris,aes(Petal.Width,Petal.Length,color=Species))+geom_line()+theme_bw()+ guides(colour = guide_legend(override.aes = list(size=3)))
ggplot(iris,aes(Petal.Width,Petal.Length,color=Species))+geom_line()+theme_bw()+ geom_point(size=0)+ guides(colour = guide_legend(override.aes = list(size=3,linetype=0)))
library(data.table) DT <- data.table(x = letters, y = letters, z = letters) DT[ ,c("x","y") := NULL] names(DT) [1] "z"
DT <- data.table(x = letters, y = letters, z = letters) DT[ ,c("x","x") := NULL] names(DT) [1] "z"
for (Var in names(airquality)) { missing <- sum(is.na(airquality[,Var])) if (missing > 0) { print(c(Var,missing)) } }
> sapply(airquality, function(x) sum(is.na(x))) Ozone Solar.R Wind Temp Month Day 37 7 0 0 0 0
> apply(is.na(airquality),2,sum) Ozone Solar.R Wind Temp Month Day 37 7 0 0 0 0 > colSums(is.na(airquality)) Ozone Solar.R Wind Temp Month Day 37 7 0 0 0 0
library(mice) library(purrr) map_df(airquality, function(x) sum(is.na(x)))
library(naniar) library(UpSetR) riskfactors %>% as_shadow_upset() %>% upset()
ggplot(airquality, aes(x = Ozone, y = Solar.R)) + geom_miss_point()
library(heatmaply) heatmaply(is.na10(airquality), grid_gap = 1, showticklabels = c(T,F), k_col =3, k_row = 3, margins = c(55, 30), colors = c("grey80", "grey20"))
install.packages("Amelia") library(Amelia) missmap(airquality)
row.has.na <- apply(training, 1, function(x){any(is.na(x))})
resetPar <- function() { dev.new() op <- par(no.readonly = TRUE) dev.off() op }
> par(mfrow = c(2,2)) > par("mfrow") [1] 2 2 > par(resetPar()) > par("mfrow") [1] 1 1
par() opar <- par() par(col.lab="red") hist(mtcars$mpg) par(opar)
city,hs_cd,sl_no,col_01,col_02,col_03 Austin,1,2,,46,Female Austin,1,3,,32,Male Austin,1,4,,27,Male Austin,1,5,,20,Female Austin,2,2,,42,Female Austin,2,1,,52,Male Austin,2,3,,25,Male Austin,2,4,,22,Female Austin,3,3,,30,Female Austin,3,1,,65,Female
df <- data.frame(v1=letters[1:5],v2=1:5,v3=letters[10:14],stringsAsFactors=FALSE) v1 v2 v3 1 a 1 j 2 b 2 k 3 c 3 l 4 d 4 m 5 e 5 n
data.frame(lapply(df, function(v) { if (is.character(v)) return(toupper(v)) else return(v) }))
library(dplyr) df <- mutate_each(df, funs(toupper))
df2 <- df2 %>% mutate_each(funs(toupper), v1) df2 <- df2 %>% mutate_each(df2, funs(toupper)) df3 <- df1[df1$v1 %in% df2$v1,]
df = data.frame(v1=letters[1:5],v2=1:5,v3=letters[10:14],v4=as.factor(letters[1:5]),v5=runif(5),stringsAsFactors=FALSE) df v1 v2 v3 v4 v5 1 a 1 j a 0.1774909 2 b 2 k b 0.4405019 3 c 3 l c 0.7042878 4 d 4 m d 0.8829965 5 e 5 n e 0.9702505 sapply(df,class) v1 v2 v3 v4 v5 "character" "integer" "character" "factor" "numeric"
upper_it = function(X){X %>% mutate_each_( funs(as.character(.)), names( .[sapply(., is.factor)] )) %>% mutate_each_( funs(toupper), names( .[sapply(., is.character)] ))}
upper_it(df) v1 v2 v3 v4 1 A 1 J A 2 B 2 K B 3 C 3 L C 4 D 4 M D 5 E 5 N E
sapply( upper_it(df),class) v1 v2 v3 v4 v5 "character" "integer" "character" "character" "numeric"
matrix( myMatrix[ , 5 ] , dimnames = list( rownames( myMatrix ) , colnames( myMatrix )[ 5 ] )
m <- matrix(1:10,5,2) rownames(m) <- 1:5 colnames(m) <- 1:2 m[,1] m[,1,drop=FALSE]
install.packages("logR", repos = c("https: library(logR) logR_connect() logR_schema() logR(1+2) logR(log(-1)) f = function() stop("an error") logR(r <- f()) g = function(n) data.frame(a=sample(letters, n, TRUE)) logR(df <- g(4)) logR(Sys.sleep(15)) logR_dump()
> is.numeric(1) [1] TRUE > is.integer(1) [1] FALSE > is.numeric(1L) [1] TRUE > is.integer(1L) [1] TRUE
> .Machine$integer.max [1] 2147483647 > .Machine$double.xmax [1] 1.797693e+308
DT$noquote(names(DT)[2]) DT[,noquote(names(DT)[2])]
DT[,noquote(names(DT)[2]),with=FALSE] is.vector(DT[,noquote(names(DT)[2]),with=FALSE])
DF <- matrix(sample(1:9,9),ncol=3,nrow=3) DF <- as.data.frame.matrix(DF) > DF V1 V2 V3 1 2 7 9 2 8 3 6 3 1 5 4
DF <- data.frame(V1=c(2,8,1),V2=c(7,3,5),V3=c(9,6,4)) colnames(DF)[apply(DF,1,which.max)] [1] "V3" "V1" "V2"
DF <- data.frame(V1=c(2,8,1),V2=c(7,3,5),V3=c(7,6,4)) apply(DF,1,function(x) which(x==max(x))) [[1]] V2 V3 2 3 [[2]] V1 1 [[3]] V2 2
set.seed(45) DF <- data.frame(matrix(sample(10, 26746*18, TRUE), ncol=18))
require(data.table) DT <- data.table(value=unlist(DF, use.names=FALSE), colid = 1:nrow(DF), rowid = rep(names(DF), each=nrow(DF))) setkey(DT, colid, value) t1 <- DT[J(unique(colid), DT[J(unique(colid)), value, mult="last"]), rowid, mult="first"]
system.time({ DT <- data.table(value=unlist(DF, use.names=FALSE), colid = 1:nrow(DF), rowid = rep(names(DF), each=nrow(DF))) setkey(DT, colid, value) t1 <- DT[J(unique(colid), DT[J(unique(colid)), value, mult="last"]), rowid, mult="first"] }) system.time(t2 <- colnames(DF)[apply(DF,1,which.max)]) identical(t1, t2)
DT <- data.table(value=unlist(DF, use.names=FALSE), colid = 1:nrow(DF), rowid = rep(names(DF), each=nrow(DF))) setkey(DT, colid, value) t1 <- DT[J(unique(colid)), rowid, mult="last"]
library(tidyverse) df <- data_frame(V1=c(2,8,1),V2=c(7,3,5),V3=c(9,6,5)) df %>% rownames_to_column( gather(dept, cnt, V1:V3) %>% group_by(id) %>% slice(which.max(cnt)) id dept cnt <chr> <chr> <dbl> 1 1 V3 9. 2 2 V1 8. 3 3 V2 5. df %>% rownames_to_column( gather(dept, cnt, V1:V3) %>% group_by(id) %>% filter(cnt == max(cnt)) %>% arrange(id) id dept cnt <chr> <chr> <dbl> 1 1 V3 9. 2 2 V1 8. 3 3 V2 5. 4 3 V3 5. df %>% rownames_to_column( gather(dept, cnt, V1:V3) %>% group_by(id) %>% mutate(dept_rank = rank(-cnt, ties.method = "first")) %>% filter(dept_rank == 1) %>% select(-dept_rank) id dept cnt <chr> <chr> <dbl> 1 2 V1 8. 2 3 V2 5. 3 1 V3 9. df %>% rownames_to_column( left_join( df %>% rownames_to_column( gather(max_dept, max_cnt, V1:V3) %>% group_by(id) %>% slice(which.max(max_cnt)), by = ) id V1 V2 V3 max_dept max_cnt <chr> <dbl> <dbl> <dbl> <chr> <dbl> 1 1 2. 7. 9. V3 9. 2 2 8. 3. 6. V1 8. 3 3 1. 5. 5. V2 5.
library(data.table) set.seed(45) DT <- data.table(matrix(sample(10, 10^7, TRUE), ncol=10)) system.time( DT[, col_max := colnames(.SD)[max.col(.SD, ties.method = "first")]] ) DT[]
DT[, MAX2 := colnames(.SD)[max.col(.SD, ties.method="first")], .SDcols = c("V9", "V10")]
DT[, col_min := colnames(.SD)[max.col(-.SD, ties.method = "first")]]
> df<-data.frame(V1=c(2,8,1),V2=c(7,3,5),V3=c(9,6,4)) > df V1 V2 V3 1 2 7 9 2 8 3 6 3 1 5 4 > df2<-data.frame() > for (i in 1:nrow(df)){ + df2[i,1]<-colnames(df[which.max(df[i,])]) + } > df2 V1 1 V3 2 V1 3 V2
DF = data.frame(V1=c(2,8,1),V2=c(7,3,5),V3=c(9,6,4)) DF %>% rownames_to_column() %>% gather(column, value, -rowname) %>% group_by(rowname) %>% filter(rank(-value) == 1)
rowname column value <chr> <chr> <dbl> 1 2 V1 8 2 3 V2 5 3 1 V3 9
DF %>% rownames_to_column() %>% gather(column, value, -rowname) %>% group_by(rowname) %>% mutate(rk = rank(-value)) %>% filter(rk <= 2) %>% arrange(rowname, rk)
rowname column value rk <chr> <chr> <dbl> <dbl> 1 1 V3 9 1 2 1 V2 7 2 3 2 V1 8 1 4 2 V3 6 2 5 3 V2 5 1 6 3 V3 4 2
library(ggplot2) library(grid) qplot(rnorm(100)) + ggtitle("Title") + theme(axis.title.x=element_text(vjust=-2)) + theme(axis.title.y=element_text(angle=90, vjust=-0.5)) + theme(plot.title=element_text(size=15, vjust=3)) + theme(plot.margin = unit(c(1,1,1,1), "cm"))
qplot <- function (x, y = NULL, z = NULL, ...) { p <- ggplot2::qplot (x = x, y = y, z = z, ...) print (p) }
"There are three kinds of operations that can return NaN:[5] Operations with a NaN as at least one operand.
t <- c(1:(24*14)) P <- 24 A <- 10 y <- A*sin(2*pi*t/P)+20 par(mfrow=c(2,2)) plot(y,type = "l",xlab = "Time (hours)",ylab = "Amplitude",main = "Time series") acf(y,main = "Autocorrelation",xlab = "Lag (hours)", ylab = "ACF") spectrum(y,method = "ar",main = "Spectral density function", xlab = "Frequency (cycles per hour)",ylab = "Spectrum") require(biwavelet) t1 <- cbind(t, y) wt.t1=wt(t1) plot(wt.t1, plot.cb=FALSE, plot.phase=FALSE,main = "Continuous wavelet transform", ylab = "Period (hours)",xlab = "Time (hours)")
require(ggplot2) acz <- acf(y, plot=F) acd <- data.frame(lag=acz$lag, acf=acz$acf) ggplot(acd, aes(lag, acf)) + geom_area(fill="grey") + geom_hline(yintercept=c(0.05, -0.05), linetype="dashed") + theme_bw()
library(gridBase) par(mfrow=c(2, 2)) plot(y,type = "l",xlab = "Time (hours)",ylab = "Amplitude",main = "Time series") plot(wt.t1, plot.cb=FALSE, plot.phase=FALSE,main = "Continuous wavelet transform", ylab = "Period (hours)",xlab = "Time (hours)") spectrum(y,method = "ar",main = "Spectral density function", xlab = "Frequency (cycles per hour)",ylab = "Spectrum") plot.new() vps <- baseViewports() pushViewport(vps$figure) vp1 <-plotViewport(c(1.8,1,0,1)) require(ggplot2) acz <- acf(y, plot=F) acd <- data.frame(lag=acz$lag, acf=acz$acf) p <- ggplot(acd, aes(lag, acf)) + geom_area(fill="grey") + geom_hline(yintercept=c(0.05, -0.05), linetype="dashed") + theme_bw()+labs(title= "Autocorrelation\n")+ theme(plot.title = element_text(size = rel(1.4),face = print(p,vp = vp1)
library(grid) P <- ggplot(acd, vp.BottomRight <- viewport(height=unit(.5, "npc"), width=unit(0.5, "npc"), just=c("left","top"), y=0.5, x=0.5) par(mfrow=c(2,2)) plot(y,type print(P, vp=vp.BottomRight)
library(ggplot2) library(gridGraphics) data.frame(x = 2:10, y = 12:20) -> dat plot(dat$x, dat$y) grid.echo() grid.grab() -> mapgrob ggplot(data = dat) + geom_point(aes(x = x, y = y)) pushViewport(viewport(x = .8, y = .4, height = .2, width = .2)) grid.draw(mapgrob)
pdf(file = "./out.pdf", width = 5, height = 5) p <- ggplot(mydata, aes(x = col1, y = col2)) print(p) aux <- dev.off()
library(ggplot2) df <- data.frame( x = runif(100, 0, 5), y = runif(100, 0, 5)) ggplot(df, aes(x=x, y=y)) + geom_point() + coord_fixed()
df <- data.frame( x = runif(100, 0, 50), y = runif(100, 0, 5)) ggplot(df, aes(x=x, y=y)) + geom_point() + coord_fixed()
ggplot(df, aes(x=x, y=y)) + geom_point() + coord_fixed(ratio=10)
df <- data.frame( x = runif(100, 0, 5000), y = runif(100, 0, 5)) ratio.display <- 4/3 ratio.values <- (max(df$x)-min(df$x))/(max(df$y)-min(df$y)) plot <- ggplot(df, aes(x=x, y=y)) + geom_point() plot + coord_fixed(ratio.values / ratio.display)
linear_model <- lm(Y ~ FACTOR_NAME_1 + FACTOR_NAME_2, foo_data_frame)
for (i in seq_len(factor_number)) { for (j in seq(i + 1, factor_number)) { linear_model <- lm(Y ~ F1 + F2, list(Y=foo_data_frame$Y, F1=foo_data_frame[[i]], F2=foo_data_frame[[j]])) } }
for (number_of_factors in seq_len(5)) { for (factors_subset in all_subsets_with_fixed_cardinality) { linear_model <- lm(Does R provide smth to write here?) } }
factors <- c("factor1", "factor2") as.formula(paste("y~", paste(factors, collapse="+")))
set.seed(0) y <- rnorm(100) factor1 <- rep(1:2, each=50) factor2 <- rep(3:4, 50) lm(as.formula(paste("y~", paste(factors, collapse="+"))))
listoffactors <- c("factor1","factor2") reformulate(termlabels = listoffactors, response =
listofintfactors <- c("(factor3","factor4)^2") reformulate(termlabels = c(listoffactors, listofintfactors), response =
Y = rnorm(10) foo = matrix(rnorm(100),10,10) factors=c(1,5,8) lm(Y ~ foo[,factors])
v <- c("Y", "factor1", "factor2") do.call("lm", list(bquote(data_frame[.(v)])))
model_response <- "response_field_name" setnames(model_data_train, c(model_response), "response") model_gbm <- gbm(response ~ ., data=model_data_train, ...)
z1=cases( "Condition 1"=x<0, "Condition 2"=y<0, "Condition 3"=TRUE )
df <- data.frame(name = c( stringsAsFactors = FALSE) df$type <- factor(df$name) levels(df$type) <- list( animal = c("cow", "pig"), bird = c("eagle", "pigeon") ) df
changelevels <- function(f, ...) { f <- as.factor(f) levels(f) <- list(...) f } df <- data.frame(name = c( stringsAsFactors = TRUE) df$type <- changelevels(df$name, animal=c("cow", "pig"), bird=c("eagle", "pigeon"))
library(dplyr) mtcars %>% mutate(category = case_when( .$cyl == 4 & .$disp < median(.$disp) ~ "4 cylinders, small displacement", .$cyl == 8 & .$disp > median(.$disp) ~ "8 cylinders, large displacement", TRUE ~ "other" ) )
mtcars %>% mutate(category = case_when( cyl == 4 & disp < median(disp) ~ "4 cylinders, small displacement", cyl == 8 & disp > median(disp) ~ "8 cylinders, large displacement", TRUE ~ "other" ) )
df <- data.frame(name = c( stringsAsFactors = FALSE) df$type <- sapply(df$name, switch, cow = pig = eagle = pigeon = > df name type 1 cow animal 2 pig animal 3 eagle bird 4 pigeon bird
invMap <- function(map) { items <- as.character( unlist(map) ) nams <- unlist(Map(rep, names(map), sapply(map, length))) names(nams) <- items nams }
> invMap(myMap) cow pig eagle pigeon "animal" "animal" "bird" "bird"
df <- transform(df, type = invMap(myMap)[name]) > df name type 1 cow animal 2 pig animal 3 eagle bird 4 pigeon bird
dft=data.frame(x = sample(letters[1:8], 20, replace=TRUE)) dft=within(dft,{ y=NA y[x %in% c( y[x %in% c( y[x %in% y[x %in% })
x <- "three"; y <- 0; switch(x, one = {y <- 5}, two = {y <- 12}, three = {y <- 432}) y
library(ggplot2) library(car) daimons$new_var <- recode(diamonds$clarity , "
dft <-data.frame(x = sample(letters[1:8], 20, replace=TRUE)) levels(dft$x) [1] "a" "b" "c" "d" "e" "f" "g" "h"
c("abc", "abc", "abc", "def", "def", "def", "g", "h")[dft$x] [1] "def" "h" "g" "def" "def" "abc" "h" "h" "def" "abc" "abc" "abc" "h" "h" "abc" [16] "def" "abc" "abc" "def" "def" dft$y <- c("abc", "abc", "abc", "def", "def", "def", "g", "h")[dft$x] str(dft) $ x: Factor w/ 8 levels "a","b","c","d",..: 4 8 7 4 6 1 8 8 5 2 ... $ y: chr "def" "h" "g" "def" ...
result <- ( function() { if (x==10 | y< 5) return( if (x==11 & y== 5) return( })()
iris %>% plyr::mutate(coolness = dplyr::case_when(Species == "setosa" ~ "not cool", Species == "versicolor" ~ "not cool", Species == "virginica" ~ "super awesome", TRUE ~ "undetermined" )) -> testIris head(testIris) levels(testIris$coolness) testIris$coolness <- as.factor(testIris$coolness) levels(testIris$coolness) testIris[97:103,4:6]
Petal.Width Species coolness 97 1.3 versicolor not cool 98 1.3 versicolor not cool 99 1.1 versicolor not cool 100 1.3 versicolor not cool 101 2.5 virginica super awesome 102 1.9 virginica super awesome 103 2.1 virginica super awesome
> a <- factor(rep(LETTERS[1:5],2)) > a [1] A B C D E A B C D E Levels: A B C D E
> levels(a) <- c("A","BC","BC","D","E") > a [1] A BC BC D E A BC BC D E Levels: A BC D E
df <- data.frame(name = c( stringsAsFactors = FALSE) mapping <- data.frame( name=c( category=c( ) merge(df,mapping)
newCat <- switch(EXPR = category, cat1 = catX, cat2 = catX, cat3 = catY, cat4 = catY, cat5 = catZ, cat6 = catZ, "not available")
require(knitr) require(markdown) knit( markdownToHTML( browseURL(paste(
RMDFILE=test html : Rscript -e "require(knitr); require(markdown); knit(
foo <- scan(what="character") These are comments These are still comments Can also be code: x <- 1:10 One line must be blank rm(foo)
df <- data.frame(list(A=c("", "xyz", "jkl"), B=c(12, "", 100))) A B 1 12 2 xyz 3 jkl 100
> df[df==""]<-NA > df A B 1 <NA> 12 2 xyz <NA> 3 jkl 100
> df[df=="" | df==12] <- NA > df A B 1 <NA> <NA> 2 xyz <NA> 3 jkl 100
> df <- data.frame(list(A=c("","xyz","jkl"), B=c(12,"",100))) > str(df) $ A: Factor w/ 3 levels "","jkl","xyz": 1 3 2 $ B: Factor w/ 3 levels "","100","12": 3 1 2
df <- data.frame(list(A=c("","xyz","jkl"), B=c(12,"",100)), stringsAsFactors=F)
setDT(df) for (jj in 1:ncol(df)) set(df, i = which(df[[jj]]==""), j = jj, v = NA)
na_codes <- c(100, "") for (i in seq_along(df)) { df[[i]][df[[i]] %in% na_codes] <- NA }
"%,%" <- function(x, y) paste0(x, ", ", y) "Hello" %,% "World"
a <- combined_data_set %>% group_by(Outlet_Identifier) %>% tally()
myData<-myData[-which(apply(myData,1,function(x)all(is.na(x)))),]
myData$newCol[1] <- -999 Error in `$<-.data.frame`(`*tmp*`, "newCol", value = -999) : replacement has 1 rows, data has 0
data <- rbind(c(1,2,3), c(1, NA, 4), c(4,6,7), c(NA, NA, NA), c(4, 8, NA)) data [,1] [,2] [,3] [1,] 1 2 3 [2,] 1 NA 4 [3,] 4 6 7 [4,] NA NA NA [5,] 4 8 NA data[rowSums(is.na(data)) != ncol(data),] [,1] [,2] [,3] [1,] 1 2 3 [2,] 1 NA 4 [3,] 4 6 7 [4,] 4 8 NA
data[rowSums(is.na(data)) == 0,] [,1] [,2] [,3] [1,] 1 2 3 [2,] 4 6 7
data <- data[!apply(is.na(data) | data == "", 1, all),]
drop_rows_all_na <- function(x, pct=1) x[!rowSums(is.na(x)) >= ncol(x)*pct,]
x = data.frame(num = 1:26, let = letters, LET = LETTERS) set.seed(10) split(x, sample(rep(1:2, 13)))
$`1` num let LET 3 3 c C 6 6 f F 10 10 j J 12 12 l L 14 14 n N 15 15 o O 17 17 q Q 18 18 r R 20 20 t T 21 21 u U 22 22 v V 23 23 w W 26 26 z Z $`2` num let LET 1 1 a A 2 2 b B 4 4 d D 5 5 e E 7 7 g G 8 8 h H 9 9 i I 11 11 k K 13 13 m M 16 16 p P 19 19 s S 24 24 x X 25 25 y Y
library(plyr) x <- daply(df, .(splitting_variable), function(x)return(x))
x = data.frame(num = 1:26, let = letters, LET = LETTERS) n <- 2 dfchunk <- split(x, factor(sort(rank(row.names(x))%%n))) dfchunk $`0` num let LET 1 1 a A 2 2 b B 3 3 c C 4 4 d D 5 5 e E 6 6 f F 7 7 g G 8 8 h H 9 9 i I 10 10 j J 11 11 k K 12 12 l L 13 13 m M $`1` num let LET 14 14 n N 15 15 o O 16 16 p P 17 17 q Q 18 18 r R 19 19 s S 20 20 t T 21 21 u U 22 22 v V 23 23 w W 24 24 x X 25 25 y Y 26 26 z Z
airfoils sum_points field_points init_t contour_t field_t ... 491 5 2500 5625 0.000086 0.004272 6.321774 498 5 2500 5625 0.000087 0.004507 6.325083 504 5 2500 5625 0.000088 0.004370 6.336034 603 5 250 10000 0.000072 0.000525 1.111278 577 5 250 10000 0.000104 0.000559 1.111431 587 5 250 10000 0.000072 0.000528 1.111524 606 5 250 10000 0.000079 0.000538 1.111685 .... > data2 <- data[data$sum_points == 2500, ] > data2 airfoils sum_points field_points init_t contour_t field_t 108 5 2500 625 0.000082 0.004329 0.733109 106 5 2500 625 0.000102 0.004564 0.733243 117 5 2500 625 0.000087 0.004321 0.733274 112 5 2500 625 0.000081 0.004428 0.733587
data(ChickWeight) lapply(unique(ChickWeight$Chick), function(x) ChickWeight[ChickWeight$Chick == x,])
df = data.frame(grp=sample(letters, 100, TRUE), x=rnorm(100))
df$z = 0 split(df$z, df$grp) = lapply(split(df$x, df$grp), scale)
library(dplyr) df %>% group_by(grp) %>% mutate(z=scale(x))
apply(iris,2,class) Sepal.Length Sepal.Width Petal.Length Petal.Width Species "character" "character" "character" "character" "character" sapply(iris,class) Sepal.Length Sepal.Width Petal.Length Petal.Width Species "numeric" "numeric" "numeric" "numeric" "factor"
library("data.table") df = data.table(PREFIX = c("A_B","A_C","A_D","B_A","B_C","B_D"), VALUE = 1:6) dt = as.data.table(df) dt$PX = as.character(lapply(strsplit(as.character(dt$PREFIX), split="_"), "[", 1)) dt$PY = as.character(lapply(strsplit(as.character(dt$PREFIX), split="_"), "[", 2)) dt
library("data.table") library("stringr") system.time ({ df = data.table(PREFIX = rep(c("A_B","A_C","A_D","B_A","B_C","B_D"), 1000000), VALUE = rep(1:6, 1000000)) dt = data.table(df) }) system.time({ dt[, c("PX","PY") := data.table(str_split_fixed(PREFIX,"_",2))] }) rm(dt) system.time ( { df = data.table(PREFIX = rep(c("A_B","A_C","A_D","B_A","B_C","B_D"), 1000000), VALUE = rep(1:6, 1000000) ) dt = as.data.table(df) }) system.time ({ dt$PX = as.character(lapply(strsplit(as.character(dt$PREFIX), split="_"), "[", 1)) dt$PY = as.character(lapply(strsplit(as.character(dt$PREFIX), split="_"), "[", 2)) })
require(data.table) dt[, c("PX", "PY") := tstrsplit(PREFIX, "_", fixed=TRUE)]
library(splitstackshape) cSplit(df, splitCols = "PREFIX", sep = "_", direction = "wide", drop = FALSE)
separate(df,col = "PREFIX",into = c("PX", "PY"), sep = "_")
> sink("test.log", type=c("output", "message")) > a <- "a" > a > How come I do not see this in log Error: unexpected symbol in "How come"
> a <- "a" > a [1] "a" > How come I do not see this in log Error: unexpected symbol in "How come"
con <- file("test.log") sink(con, append=TRUE) sink(con, append=TRUE, type="message") source("script.R", echo=TRUE, max.deparse.length=10000) sink() sink(type="message") cat(readLines("test.log"), sep="\n")
R version 3.1.0 (2014-04-10) -- "Spring Dance" Copyright (C) 2014 The R Foundation for Statistical Computing Platform: i686-pc-linux-gnu (32-bit) R is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under certain conditions. Type Natural language support but running in an English locale R is a collaborative project with many contributors. Type Type Type [Previously saved workspace restored] > a <- "a" > a [1] "a" > How come I do not see this in log Error: unexpected symbol in "How come" Execution halted
echo "Hello World, this is bash" test1=$(echo "This is a test") echo "Here is some R code:" Rscript --slave --no-save --no-restore - "$test1" <<EOF cat("\nHello World, this is R\n") args <- commandArgs(TRUE) bash_message<-args[1] cat("\nThis is a message from bash:\n") cat("\n",paste0(bash_message),"\n") EOF
$ chmod +x test.sh $ ./test.sh $ ./test.sh &>test.log $ cat test.log Hello World, this is bash Here is some R code: Hello World, this is R This is a message from bash: This is a test
--- title: "Sample Document" output: html_document: toc: true theme: united --- Header 1 --------------- This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http: When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: ```{r} summary(cars) ``` You can also embed plots, for example: ```{r, echo=FALSE} plot(cars) ``` Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
--- title: "Sample Document" output: html_document: toc: true theme: united ---
--- title: "Planets" author: "Manoj Kumar" date: "March 3, 2016" output: html_document: toc: true toc_depth: 3 number_sections: true theme: united highlight: tango css: my.css ---
--- title: \vspace{3.5in}"Title" author: "Name" date: "`r Sys.Date()`" output: pdf_document: fig_caption: true number_sections: true --- \newpage \tableofcontents \listoffigures \listoftables \newpage
>dt V1 V2 [1,] A B [2,] A C [3,] A D [4,] A B [5,] B A [6,] C D [7,] C D [8,] E F [9,] G G [10,] A B
> dput(dt) structure(list(V1 = c("B", "A", "A", "A", "A", "A", "C", "C", "E", "G"), V2 = c("A", "B", "B", "B", "C", "D", "D", "D", "F", "G")), .Names = c("V1", "V2"), row.names = c(NA, -10L), class = c("data.table", "data.frame"), .internal.selfref = <pointer: 0x7fb4c4804578>, sorted = "V2")
library(data.table) dt <- data.table( V1=LETTERS[c(1,1,1,1,2,3,3,5,7,1)], V2=LETTERS[c(2,3,4,2,1,4,4,6,7,2)] )
setkey(dt, "V2") unique(dt) V1 V2 [1,] B A [2,] A B [3,] A C [4,] A D [5,] E F [6,] G G
unique(dt) V1 V2 1: A B 2: A C 3: A D 4: B A 5: C D 6: E F 7: G G
unique(dt, by = "V2") V1 V2 1: A B 2: A C 3: A D 4: B A 5: E F 6: G G
> dt<-data.table(V1 = c("B", "A", "A", "A", "A", "A", "C", "C", "E", "G"), V2 = c("A", "B", "B", "B", "C", "D", "D", "D", "F", "G")) > setkey(dt,V2)
> haskey(dt) [1] TRUE > haskey(dt[,list(V1,V2)]) [1] FALSE > haskey(dt[,.SD]) [1] TRUE
> unique(dt) V1 V2 1: B A 2: A B 3: A C 4: A D 5: E F 6: G G > dt[!duplicated(dt)] V1 V2 1: B A 2: A B 3: A C 4: A D 5: E F 6: G G > unique(dt[,list(V1,V2)]) V1 V2 1: B A 2: A B 3: A C 4: A D 5: C D 6: E F 7: G G > setkey(dt,NULL) > unique(dt) V1 V2 1: B A 2: A B 3: A C 4: A D 5: C D 6: E F 7: G G
foo <- function(x) { if(x < 10) { return(NA) } else { xx <- seq_len(x) xx <- cumsum(xx) } xx } > foo(5) [1] 0 > foo(10) [1] 1 3 6 10 15 21 28 36 45 55
foo <- function(x) { out <- if(x < 10) { NA } else { xx <- seq_len(x) cumsum(xx) } out } > foo(5) [1] NA > foo(10) [1] 1 3 6 10 15 21 28 36 45 55
exit <- function() { .Internal(.invokeRestart(list(NULL, NULL), NULL)) } print("this is the last message") exit() print("you should not see this")
print("this is the last message") stop() print("you should not see this")
halt <- function(hint = "Process stopped.\n") { writeLines(hint) require(tools, quietly = TRUE) processId <- Sys.getpid() pskill(processId, SIGINT) iddleTime <- 1.00 Sys.sleep(iddleTime) }
continue <- TRUE tryCatch({ ... stop("exit") }, error = function(e) { if (e$message != "exit") { stop(e) } continue <<-FALSE }) if (continue) { ... } cat("done.\n")
if(n < 500) { } else { *insert rest of program here* }
SEXP dump_address(SEXP src) { Rprintf("%16p %16p %d\n", &(src->u), INTEGER(src), INTEGER(src) - (int*)&(src->u)); return R_NilValue; }
Rcpp:::SHLIB("dump_address.c") dyn.load("dump_address.so")
a <- 1L b <- a invisible(.Call("dump_address", a)) invisible(.Call("dump_address", b)) b <- b + 1 invisible(.Call("dump_address", b))
a <- 1L invisible(.Call("dump_address", a)) a <- 1L invisible(.Call("dump_address", a)) a[1] <- 1L invisible(.Call("dump_address", a)) a <- 2L invisible(.Call("dump_address", a))
system.time(a <- rep(1L, 10^7)) invisible(.Call("dump_address", a)) system.time(a[1] <- 1L) invisible(.Call("dump_address", a)) system.time(a[1] <- 1L) invisible(.Call("dump_address", a)) system.time(a[1] <- 2L) invisible(.Call("dump_address", a))
system.time(a <- matrix(0L, 3162, 3162)) invisible(.Call("dump_address", a)) system.time(a[1,1] <- 0L) invisible(.Call("dump_address", a)) system.time(a[1,1] <- 1L) invisible(.Call("dump_address", a)) system.time(a[1] <- 2L) invisible(.Call("dump_address", a)) system.time(a[1] <- 2L) invisible(.Call("dump_address", a))
system.time(a <- vector("integer", 10^2)) invisible(.Call("dump_address", a)) system.time(names(a) <- paste(1:(10^2))) invisible(.Call("dump_address", a)) system.time(names(a) <- paste(1:(10^2))) invisible(.Call("dump_address", a)) system.time(names(a) <- paste(1:(10^2) + 1)) invisible(.Call("dump_address", a))
"rmlike" <- function(...) { names <- sapply( match.call(expand.dots = FALSE)$..., as.character) names = paste(names,collapse="|") Vars <- ls(1) r <- Vars[grep(paste("^(",names,").*",sep=""),Vars)] rm(list=r,pos=1) } rmlike(temp)
x <- matrix(1:10,ncol=2) tapply(x,rep(1:ncol(x),each=nrow(x)),function(i)i)
> x <- matrix(1:1e6, 10) > system.time( as.list(data.frame(x)) ) user system elapsed 1.24 0.00 1.22 > system.time( lapply(seq_len(ncol(x)), function(i) x[,i]) ) user system elapsed 0.2 0.0 0.2
as.list(as.data.frame(x)) > as.list(as.data.frame(x)) $V1 [1] 1 2 3 4 5 $V2 [1] 6 7 8 9 10
manual.coerce <- function(x) { x <- as.data.frame(x) class(x) <- "list" x } library(microbenchmark) x <- matrix(1:10,ncol=2) microbenchmark( tapply(x,rep(1:ncol(x),each=nrow(x)),function(i)i) , as.list(data.frame(x)), as.list(as.data.frame(x)), lapply(seq_len(ncol(x)), function(i) x[,i]), c(unname(as.data.frame(x))), c(data.frame(x)), manual.coerce(x), times=1000 ) expr min lq 1 as.list(as.data.frame(x)) 176221 183064 2 as.list(data.frame(x)) 444827 454237 3 c(data.frame(x)) 434562 443117 4 c(unname(as.data.frame(x))) 257487 266897 5 lapply(seq_len(ncol(x)), function(i) x[, i]) 28231 35929 6 manual.coerce(x) 160823 167667 7 tapply(x, rep(1:ncol(x), each = nrow(x)), function(i) i) 1020536 1036790 median uq max 1 186486 190763 2768193 2 460225 471346 2854592 3 449960 460226 2895653 4 271174 277162 2827218 5 36784 37640 1165105 6 171088 176221 457659 7 1052188 1080417 3939286 is.list(manual.coerce(x)) [1] TRUE
> as.list(data.frame(x)) $X1 [1] 1 2 3 4 5 $X2 [1] 6 7 8 9 10 > str(as.list(data.frame(x))) List of 2 $ X1: int [1:5] 1 2 3 4 5 $ X2: int [1:5] 6 7 8 9 10
library("plyr") alply(x,2) $`1` [1] 1 2 3 4 5 $`2` [1] 6 7 8 9 10 attr(,"class") [1] "split" "list"
mat2list <- function(mat) { list_length <- ncol(mat) out_list <- vector("list", list_length) for(i in 1:list_length) out_list[[i]] <- mat[,i] out_list }
x <- matrix(1:1e7, ncol=1e6) system.time(mat2list(x)) user system elapsed 2.728 0.023 2.720 system.time(split(x, rep(1:ncol(x), each = nrow(x)))) user system elapsed 4.812 0.194 4.978 system.time(tapply(x,rep(1:ncol(x),each=nrow(x)),function(i)i)) user system elapsed 11.471 0.413 11.817
> y <- c(unname(as.data.frame(x))) > y [[1]] [1] 1 2 3 4 5 [[2]] [1] 6 7 8 9 10
x <- matrix(1:10,ncol=2) do.call(c, apply(x, 2, list)) #
colnames(x) <- c("a", "b") do.call(c, apply(x, 2, list)) #
mat2list <- function (mat) lapply(1:2, function (i) mat[, i]) mat2list2 <- function (mat) list(mat[, 1], mat[, 2])
varnums<- function(x) {w=as.data.frame(c(1:length(colnames(x))), paste0( names(w)= c(" w} varnums(df)
t(colnames(df)) [,1] [,2] [,3] [,4] [,5] [,6] [1,] "var1" "var2" "var3" "var4" "var5" "var6"
mydata=c("á","é","ó") mydata=gsub("á","a",mydata) mydata=gsub("é","e",mydata) mydata=gsub("ó","o",mydata) mydata
mgsub <- function(pattern, replacement, x, ...) { if (length(pattern)!=length(replacement)) { stop("pattern and replacement do not have the same length.") } result <- x for (i in 1:length(pattern)) { result <- gsub(pattern[i], replacement[i], result, ...) } result }
> mydata <- c("á","é","ó") > mgsub(c("á","é","ó"), c("a","e","o"), mydata) [1] "a" "e" "o"
> stri_trans_general(c("á","é","ó"), "latin-ascii") [1] "a" "e" "o"
mystring = myrepl = list(c( mgsub2 <- function(myrepl, mystring){ gsub2 <- function(l, x){ do.call( } Reduce(gsub2, myrepl, init = mystring, right = T) }
mgsub <- function(pattern, replacement, x, ...) { n = length(pattern) if (n != length(replacement)) { stop("pattern and replacement do not have the same length.") } result = x for (i in 1:n) { result[grep(pattern[i], x, ...)] = replacement[i] } return(result) }
asdf = c(4, 0, 1, 1, 3, 0, 2, 0, 1, 1) res = mgsub(c("0", "1", "2"), c("10", "11", "12"), asdf)
removeDiscritics <- function(string) { chartr( "ŠŽšžŸÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖÙÚÛÜÝàáâãäåçèéêëìíîïðñòóôõöùúûüýÿ" ,"SZszYAAAAAACEEEEIIIIDNOOOOOUUUUYaaaaaaceeeeiiiidnooooouuuuyy" , string ) } removeDiscritics("test áéíóú")
> diag(sapply(1:length(mydata), function(i, x, y) { + gsub(x[i],y[i], x=x) + }, x=mydata, y=c( [1] "a" "b" "c"
mydata <- c("á","é","ó") desired <- c( desired[match(mydata, mydata)]
> m <- c("á"="a", "é"="e", "ó"="o") > m[mydata] á é ó "a" "e" "o"
wideScreen <- function(howWide=Sys.getenv("COLUMNS")) { options(width=as.integer(howWide)) }
options(width=as.integer(system("stty -a | head -n 1 | awk
wideScreen <- function(howWide=as.numeric(strsplit(system( options(width=as.integer(howWide)) }
data <- read.csv("sample.csv",header=T,sep=",") for ( c in data ) plot( c, type="l" )
data <- read.csv("sample.csv",header=T,sep=",") for ( i in seq(1,length( data ),1) ) plot(data[,i],ylab=names(data[i]),type="l")
require(ggplot2) require(reshape2) df <- data.frame(time = 1:10, a = cumsum(rnorm(10)), b = cumsum(rnorm(10)), c = cumsum(rnorm(10))) df <- melt(df , id.vars = ggplot(df, aes(time,value)) + geom_line(aes(colour = series)) ggplot(df, aes(time,value)) + geom_line() + facet_grid(series ~ .)
par(mfcol = c(ncol(data), 1)) Map(function(x,y) plot(x, main =y), data, names(data))
require(zoo) set.seed(1) dat <- data.frame(X = cumsum(rnorm(100)), Y = cumsum(rnorm(100)), Z = cumsum(rnorm(100))) datz <- zoo(dat) plot(datz)
mypalette = rainbow(ncol(data)) matplot(y = data, type = legend(legend = colnames(data), x = "topright", y = "topright", lty = 1, lwd = 2, col = mypalette)
par(mfrow=c(3,3),mar=c(2,1,1,1)) dfplot <- function(data.frame) { df <- data.frame ln <- length(names(data.frame)) for(i in 1:ln){ mname <- substitute(df[,i]) if(is.factor(df[,i])){ plot(df[,i],main=names(df)[i])} else{hist(df[,i],main=names(df)[i])} } }
data <- read.csv("sample.csv",header=T,sep=",") for (i in 1:length(data)) { pdf(paste( plot(data[,i], ylab=names(data[i]), type="l") dev.off() }
plotfun <- function(col) plot(data[ , col], ylab = names(data[col]), type = "l") par(ask = TRUE) sapply(seq(1, length(data), 1), plotfun)
library(lattice) df <- data.frame(time = 1:10, a = cumsum(rnorm(10)), b = cumsum(rnorm(10)), c = cumsum(rnorm(10))) form <- as.formula(paste(paste(names(df)[- 1], collapse = xyplot(form, data = df, type =
data <- read.csv("sample.csv",sep=";",head=TRUE) data2 <- read.csv("sample.csv",sep=";",head=FALSE,nrows=1) for ( i in seq(1,length( data ),1) ) plot(data[,i],ylab=data2[1,i],type="l")
> (mat <- matrix(rep(1:3,each=5),nrow=3,ncol=5,byrow=TRUE)) [,1] [,2] [,3] [,4] [,5] [1,] 1 1 1 1 1 [2,] 2 2 2 2 2 [3,] 3 3 3 3 3 > vec <- 1:5 > sweep(mat,MARGIN=2,vec,`*`) [,1] [,2] [,3] [,4] [,5] [1,] 1 2 3 4 5 [2,] 2 4 6 8 10 [3,] 3 6 9 12 15
> MyMatrix <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol=3, byrow=TRUE) > MyMatrix [,1] [,2] [,3] [1,] 1 2 3 [2,] 11 12 13 > MyVector <- c(1:3) > MyVector [1] 1 2 3
> t(t(MyMatrix) * MyVector) [,1] [,2] [,3] [1,] 1 4 9 [2,] 11 24 39
> MyMatrix %*% diag(MyVector) [,1] [,2] [,3] [1,] 1 4 9 [2,] 11 24 39
MyMatrix <- matrix(c(1:1e6), ncol=1e4, byrow=TRUE) MyVector <- c(1:1e4) Rprof(tmp <- tempfile(),interval = 0.001) t(t(MyMatrix) * MyVector) Rprof() MyTimerTranspose=summaryRprof(tmp)$sampling.time unlink(tmp) Rprof(tmp <- tempfile(),interval = 0.001) MyMatrix %*% diag(MyVector) Rprof() MyTimerDiag=summaryRprof(tmp)$sampling.time unlink(tmp) Rprof(tmp <- tempfile(),interval = 0.001) sweep(MyMatrix ,MARGIN=2,MyVector,`*`) Rprof() MyTimerSweep=summaryRprof(tmp)$sampling.time unlink(tmp) Rprof(tmp <- tempfile(),interval = 0.001) t(t(MyMatrix) * MyVector) Rprof() MyTimerTransposeAgain=summaryRprof(tmp)$sampling.time unlink(tmp) MyTimerTranspose MyTimerDiag MyTimerSweep MyTimerTransposeAgain
> MyTimerTranspose [1] 0.04 > MyTimerDiag [1] 40.722 > MyTimerSweep [1] 33.774 > MyTimerTransposeAgain [1] 0.043
MyMatrix <- matrix(c(1:1e3), ncol=1e1, byrow=TRUE) MyVector <- c(1:1e1) n=100000 [...] for(i in 1:n){ } [...] > MyTimerTranspose [1] 5.383 > MyTimerDiag [1] 6.404 > MyTimerSweep [1] 12.843 > MyTimerTransposeAgain [1] 5.428
mat <- matrix(rnorm(1e6), ncol=1e4) vec <- c(1:1e4) mat * matrix(vec, dim(mat)[1], length(vec)) library(microbenchmark) microbenchmark( transpose = t(t(mat) * vec), make_matrix = mat * matrix(vec, dim(mat)[1], length(vec), byrow = TRUE), sweep = sweep(mat,MARGIN=2,vec,`*`))
a <- c(8, 9, 10) b <- c(9, 10) c <- 10 seq_along(a) seq_along(b) seq_along(c) seq(a) seq(b) seq(c)
x <- 5 for(i in seq(x)){ print(x[i]) } for(i in seq_along(x)){ print(x[i]) }
n = c(2, 3, 5) s = c("aa", "bb", "cc") b = c(TRUE, FALSE, TRUE) df = data.frame(n, s, b) n s b 1 2 aa TRUE 2 3 bb FALSE 3 5 cc TRUE
n s b x 1 2 aa TRUE 2 aa 2 3 bb FALSE 3 bb 3 5 cc TRUE 5 cc
n = c(2, NA, NA) s = c("aa", "bb", NA) b = c(TRUE, FALSE, NA) c = c(2, 3, 5) d = c("aa", NA, "cc") e = c(TRUE, NA, TRUE) df = data.frame(n, s, b, c, d, e) sep=" " df$x <- apply( df[ , c(1:6) ] , 1 , paste_noNA , sep=sep) df paste_noNA <- function(x,sep=", ") gsub(", " ,sep, toString(x[!is.na(x) & x!="" & x!="NA"] ) )
library(dplyr) df <- mutate(df, x = paste(n, s)) df > df n s b x 1 2 aa TRUE 2 aa 2 3 bb FALSE 3 bb 3 5 cc TRUE 5 cc
library(tidyverse) n = c(2, 3, 5) s = c("aa", "bb", "cc") b = c(TRUE, FALSE, TRUE) df = data.frame(n, s, b) %>% unite(x, c(n, s), sep = " ", remove = FALSE)
library("tidyverse") df %>% mutate(x=str_c(n,"-",s,".",b))
cbind(df,n,s) n s b n s 1 2 aa TRUE 2 aa 2 3 bb FALSE 3 bb 3 5 cc TRUE 5 cc
> df a b est 1 11.77000 2 0 2 10.90000 3 0 3 10.32000 2 0 4 10.96000 0 0 5 9.90600 0 0 6 10.70000 0 0 7 11.43000 1 0 8 11.41000 2 0 9 10.48512 4 0 10 11.19000 0 0
structure(list(a = c(11.77, 10.9, 10.32, 10.96, 9.906, 10.7, 11.43, 11.41, 10.48512, 11.19), b = c(2, 3, 2, 0, 0, 0, 1, 2, 4, 0), est = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), .Names = c("a", "b", "est"), row.names = c(NA, -10L), class = "data.frame")
Warning message: In df$est[df$b == 0] <- (df$a - 5)/2.533 : number of items to replace is not a multiple of replacement length
index <- df$b == 0 df$est[index] <- (df$a[index] - 5)/2.533
df a b est 1 11.77000 2 0.000000 2 10.90000 3 0.000000 3 10.32000 2 0.000000 4 10.96000 0 2.352941 5 9.90600 0 1.936834 6 10.70000 0 2.250296 7 11.43000 1 0.000000 8 11.41000 2 0.000000 9 10.48512 4 0.000000 10 11.19000 0 2.443743
DT = as.data.table(df) DT[b==0, est := (a-5)/2.533]
df <- transform(df, est = ifelse(b == 0, (a - 5)/2.53, est))
Rgames: foo x y z [1,] 1e+00 1 0 [2,] 2e+00 2 0 [3,] 3e+00 1 0 [4,] 4e+00 2 0 [5,] 5e+00 1 0 [6,] 6e+00 2 0 [7,] 7e+00 1 0 [8,] 8e+00 2 0 [9,] 9e+00 1 0 [10,] 1e+01 2 0 Rgames: foo<-as.data.frame(foo) Rgames: foo[foo$y==2,3]<-foo[foo$y==2,1] Rgames: foo x y z 1 1e+00 1 0e+00 2 2e+00 2 2e+00 3 3e+00 1 0e+00 4 4e+00 2 4e+00 5 5e+00 1 0e+00 6 6e+00 2 6e+00 7 7e+00 1 0e+00 8 8e+00 2 8e+00 9 9e+00 1 0e+00 10 1e+01 2 1e+01
require(dplyr) transform(df, est = case_when( b == 0 ~ (a - 5)/2.53, TRUE ~ est ))
my.assign <- function(col1, col2, col3){ if(col2==0) {col3 <- col1} else { col3 <- 0 } } my.max <- function(col1, col2, col3){ if(col1 >= 10 ) {max_r <- max(col2, col3, na.rm=TRUE)} else { max_r <- col2 } } df$est <- with(df,mapply(my.assign,col1=a, col2=b, col3=est)) df$max_row <- with(df,mapply(my.max,col1=a, col2=b, col3=est)) > df a b est max_row 1 11.77000 2 0.000 2.00 2 10.90000 3 0.000 3.00 3 10.32000 2 0.000 2.00 4 10.96000 0 10.960 10.96 5 9.90600 0 9.906 0.00 6 10.70000 0 10.700 10.70 7 11.43000 1 0.000 1.00 8 11.41000 2 0.000 2.00 9 10.48512 4 0.000 4.00 10 11.19000 0 11.190 11.19
> one = c(1:5) > paste(as.character(one), collapse=", ") [1] "1, 2, 3, 4, 5" > paste(as.character(one), sep=" [1] "1, 2, 3, 4, 5"
cat(paste(shQuote(one, type="cmd"), collapse=", "))
> dput(as.character(one)) c("1", "2", "3", "4", "5")
> write.table(matrix(as.character(one),nrow=1), sep=",", row.names=FALSE, col.names=FALSE) "1","2","3","4","5" > write.csv(matrix(as.character(one),nrow=1),row.names=FALSE) "V1","V2","V3","V4","V5" "1","2","3","4","5"
rs <- paste("\"",as.character(one),"\"",collapse=", ",sep="") cat(rs)
set.seed(1234) x <- data.frame(a=sample(c(1,2,NA), 10, replace=T), b=sample(c(1,2,NA), 10, replace=T), c=sample(c(1:5,NA), 10, replace=T))
a b c 1 1 NA 2 2 2 2 2 3 2 1 1 4 2 NA 1 5 NA 1 2 6 2 NA 5 7 1 1 4 8 1 1 NA 9 2 1 5 10 2 1 1
for (col in c("a", "b")) y[is.na(get(col)), (col) := 0]
for (col in 1:2) set(x, which(is.na(x[[col]])), col, 0)
update.mat <- function(dt, cols, criteria) { require(data.table) x <- as.data.frame(which(criteria==TRUE, arr.ind = TRUE)) y <- as.matrix(subset(x, x$col %in% which((names(dt) %in% cols), arr.ind = TRUE))) y }
DF <- data.frame(A = letters[1:5], B = letters[6:10], C = c(2, 5, NA, 8, NA)) DF_NEW <- sapply(seq(1, nrow(DF)), function(i) ifelse(is.na(DF[i,3]) == TRUE, 0, DF[i,3])) DF[,3] <- DF_NEW DF
DataTable DT = new DataTable(); DT = DT.AsEnumerable().Select(R => { R["Campo1"] = valor; return (R); }).ToArray().CopyToDataTable();
Error: bad restore file magic number (file may be corrupted) -- no data loaded In addition: Warning message: file ‘WORKSPACE_Wedding_Weekend_September’ has magic number Use of save versions prior to 2 is deprecated
> set.seed(42) > x1 <- rnorm(100) > x2 <- rnorm(100) > x3 <- x1 + 2*x2 + rnorm(100)*0.0001 > mm12 <- model.matrix(~ x1 + x2) > mm123 <- model.matrix(~ x1 + x2 + x3) > kappa(mm12) [1] 1.166029 > kappa(mm123) [1] 121530.7
> x4 <- x1 + 2*x2 + rnorm(100)*0.000001 > mm124 <- model.matrix(~ x1 + x2 + x4) > kappa(mm124) [1] 13955982 > x5 <- x1 + 2*x2 > mm125 <- model.matrix(~ x1 + x2 + x5) > kappa(mm125) [1] 1.067568e+16 >
> det(cov(mm12[,-1])) [1] 0.8856818 > det(cov(mm123[,-1])) [1] 8.916092e-09
> eigen(cov(mm12[,-1]))$values [1] 1.0876357 0.8143184 > eigen(cov(mm123[,-1]))$values [1] 5.388022e+00 9.862794e-01 1.677819e-09
> paste(1:300, letters, collapse=" ") [1] "1 a 2 b 3 c 4 d 5 e 6 f 7 g 8 h 9 i ... 181 y 182 z 183 a 184 b... <truncated>
test_data <- data.frame(first_name = c("john", "bill", "madison", "abby", "zzz"), stringsAsFactors = FALSE)
kantrowitz <- structure(list(name = c("john", "bill", "madison", "abby", "thomas"), gender = c("M", "either", "M", "either", "M")), .Names = c("name", "gender"), row.names = c(NA, 5L), class = c("tbl_df", "tbl", "data.frame"))
merge(test_data, kantrowitz, by.x = "first_names", by.y = "name", all.x = TRUE)
first_name gender 1 abby either 2 bill either 3 john M 4 madison M 5 zzz <NA>
library(dplyr) left_join(test_data, kantrowitz, by.x = "first_name", by.y = "name") left_join(test_data, kantrowitz, by = c("first_name", "name"))
left_join(test_data, kantrowitz, by = c("first_name" = "name"))
left_join("names<-"(test_data, "name"), kantrowitz, by = "name") name gender 1 john M 2 bill either 3 madison M 4 abby either 5 zzz <NA>
test.fun<-function () { library(data.table) testdata<-data.table(A=rep(seq(1,5), 5), Val=rnorm(25)) setkey(testdata, A) res<-testdata[,{list(Ct=length(Val),Total=sum(Val),Avg=mean(Val))},"A"] return(res) }
> res<-test.fun() data.table 1.8.0 For help type: help("data.table") > res A Ct Total Avg [1,] 1 5 -0.5326444 -0.1065289 [2,] 2 5 -4.0832062 -0.8166412 [3,] 3 5 0.9458251 0.1891650 [4,] 4 5 2.0474791 0.4094958 [5,] 5 5 2.3609443 0.4721889
> library(testpackage) > res<-test.fun() data.table 1.8.0 For help type: help("data.table") Error in `[.data.frame`(x, i, j) : object
library(RMySQL) library(ggplot2) con <- dbConnect(...) wind <- dbGetQuery(con, "SELECT speed_w/speed_e AS ratio, dir_58 as dir, MONTHNAME(timestamp) AS month, ROUND((speed_w+speed_e)/2) AS speed FROM tablename;"); png("ratio-by-speed.png",height=400,width=1200) qplot(wind$dir,wind$ratio,ylim=c(0.5,1.5),xlim=c(0,360),color=wind$month,alpha=I(1/30),main="West/East against direction") dev.off()
+ guides(colour = guide_legend(override.aes = list(alpha = 1)))
gp <- ggplot() + geom_point(data=diamonds, aes(depth, price, colour=clarity), alpha=0.1) print(gp) dummyData <- diamonds[1, ] dummyData$price <- NaN gp <- ggplot() + geom_point(data=diamonds, aes(depth, price, colour=clarity), alpha=0.1, legend=FALSE) + geom_point(data=dummyData, aes(depth, price, colour=clarity), alpha=1.0, na.rm=TRUE) print(gp)
ggplot(data = diamonds, aes(depth, price, colour = clarity)) + geom_point(alpha = 1/10) ggplot() + geom_point(data = diamonds, aes(depth, price, colour =clarity), alpha = 1/10, legend = FALSE) + geom_point(data = diamonds, aes(x = depth - 999999, y = price - 999999, colour = clarity)) + xlim(40, 80) + ylim(0, 20000)
x <- 10 ^ (1:10) format(x, scientific = FALSE) formatC(x, digits = 0, format = "f")
library(sfsmisc) x <- 1:100000 y <- 1:100000 par(pty="m", plt=c(0.1, 1, 0.1, 1), omd=c(0.1,0.9,0.1,0.9)) plot(x, y, type = "n", xaxt = "n", yaxt="n", xlab="", ylab="", log = "x", col="blue") mtext(side=3, text="Test Plot", line=1.2, cex=1.5) eaxis(1, padj=-0.5, cex.axis=0.8) mtext(side=1, text="x", line=2.5) aty <- seq(par("yaxp")[1], par("yaxp")[2], (par("yaxp")[2] - par("yaxp")[1])/par("yaxp")[3]) axis(2, at=aty, labels=format(aty, scientific=FALSE), hadj=0.9, cex.axis=0.8, las=2) mtext(side=2, text="y", line=4.5) grid() lines(x, y, col="blue")
x <- 1:100000 y <- 1:100000 marks <- c(0,20000,40000,60000,80000,100000) plot(x,y,log="x",yaxt="n",type="l") axis(2,at=marks,labels=marks)
x <- 1:100000 y <- 1:100000 format(y,scientific=FALSE) plot(x,y,log="x",yaxt="n",type="l") axis(2,at=marks,labels=format(marks,scientific=FALSE))
require(lattice) x <- 1:100000 y <- 1:100000 xyplot(y~x, scales=list(x = list(log = 10)), type="l")
myTicks = axTicks(1) axis(1, at = myTicks, labels = formatC(myTicks, format =
plot(10^(0:10), 0:10, log = myTicks = axTicks(1) axis(1, at = myTicks, labels = formatC(myTicks, format =
a <- c(0:1000000) b <- c(0:1000000) plot(a, b, ylim = c(0, max(b)))
test <- data.frame( test <- test[order(test$id), ] rownames(test) <- 1:10 > test id string 1 1 A 2 1 F 3 2 B 4 2 G 5 3 C 6 3 H 7 4 D 8 4 I 9 5 E 10 5 J
res <- sqldf("select id, min(rownames(test)), string from test group by id, string") > res id string 1 1 A 3 2 B 5 3 C 7 4 D 9 5 E
ju <- function() test[!duplicated(test$id),] gs1 <- function() do.call(rbind, lapply(split(test, test$id), head, 1)) gs2 <- function() do.call(rbind, lapply(split(test, test$id), `[`, 1, )) jply <- function() ddply(test,.(id),function(x) head(x,1)) jdt <- function() { testd <- as.data.table(test) setkey(testd,id) testd[!duplicated(id)] } library(plyr) library(data.table) library(rbenchmark) set.seed(21) test <- data.frame(id=sample(1e3, 1e5, TRUE), string=sample(LETTERS, 1e5, TRUE)) test <- test[order(test$id), ] benchmark(ju(), gs1(), gs2(), jply(), jdt(), replications=5, order="relative")[,1:6]
set.seed(21) test <- data.frame(id=sample(1e4, 1e6, TRUE), string=sample(LETTERS, 1e6, TRUE)) test <- test[order(test$id), ] benchmark(ju(), jdt(), order="relative")[,1:6]
DT <- data.table(test) setkey(DT, id) DT[J(unique(id)), mult = "first"]
set.seed(21) test <- data.frame(id=sample(1e3, 1e5, TRUE), string=sample(LETTERS, 1e5, TRUE)) test <- test[order(test$id), ] DT <- data.table(DT, key = ju <- function() test[!duplicated(test$id),] jdt <- function() DT[J(unique(id)),mult = library(rbenchmark) benchmark(ju(), jdt(), replications = 5)
set.seed(21) test <- data.frame(id=sample(1e4, 1e6, TRUE), string=sample(LETTERS, 1e6, TRUE)) test <- test[order(test$id), ] DT <- data.table(test, key = test replications elapsed relative user.self sys.self 2 jdt() 5 0.09 2.25 0.09 0.00 3 jdtu() 5 0.04 1.00 0.05 0.00 1 ju() 5 0.22 5.50 0.19 0.03
testd <- data.table(test) setkey(testd,id) testd[,.SD[1],by = key(testd)]
sqldf("select min(rowid) rowid, id, string from test group by id")
rowid id string 1 1 1 A 2 3 2 B 3 5 3 C 4 7 4 D 5 9 5 E
sqldf("select min(cast(row_names as real)) row_names, id, string from test group by id", row.names = TRUE)
sqldf("select min(rowid) row_names, id, string from test group by id", row.names = TRUE)
df %>% group_by(aa, bb) %>% summarise(first=head(value,1), count=n_distinct(value))
> df Source: local data frame [16 x 3] aa bb value 1 1 1 GUT 2 1 1 PER 3 1 2 SUT 4 1 2 GUT 5 1 3 SUT 6 1 3 GUT 7 1 3 PER 8 2 1 221 9 2 1 224 10 2 1 239 11 2 2 217 12 2 2 221 13 2 2 224 14 3 1 GUT 15 3 1 HUL 16 3 1 GUT > library(dplyr) > df %>% > group_by(aa, bb) %>% > summarise(first=head(value,1), count=n_distinct(value)) Source: local data frame [6 x 4] Groups: aa aa bb first count 1 1 1 GUT 2 2 1 2 SUT 2 3 1 3 SUT 3 4 2 1 221 3 5 2 2 217 3 6 3 1 GUT 2
library(dplyr) test %>% group_by(id) %>% filter(row_number()==1) id string <int> <fct> 1 1 A 2 2 B 3 3 C 4 4 D 5 5 E
> do.call(rbind, lapply(split(test, test$id), head, 1)) id string 1 1 A 2 2 B 3 3 C 4 4 D 5 5 E
> do.call(rbind, lapply(split(test, test$id), `[`, 1, )) id string 1 1 A 2 2 B 3 3 C 4 4 D 5 5 E
library(data.table) dt <- data.table(a = 1:3, b = 1:3, d = 1:3) cols <- c("a", "b")
for (col in 1:length(cols)) { dt[ , eval(parse(text = paste0(cols[col], ":=-1*", cols[col])))] }
dt[ , (cols) := lapply(.SD, "*", -1), .SDcols = cols]
cols <- c("a", "b") out_cols = paste("log", cols, sep = ".") dt[, c(out_cols) := lapply(.SD, function(x){log(x = x, base = exp(1))}), .SDcols = cols]
mbm = microbenchmark( base = for (col in 1:length(cols)) { dt[ , eval(parse(text = paste0(cols[col], ":=-1*", cols[col])))] }, franks_solution1 = dt[ , (cols) := lapply(.SD, "*", -1), .SDcols = cols], franks_solution2 = for (j in cols) set(dt, j = j, value = -dt[[j]]), hannes_solution = dt[, c(out_cols) := lapply(.SD, function(x){log(x = x, base = exp(1))}), .SDcols = cols], orhans_solution = for (j in cols) dt[,(j):= -1 * dt[, ..j]], orhans_solution2 = dt[,(cols):= - dt[,..cols]], times=1000 ) mbm Unit: microseconds expr min lq mean median uq max neval base_solution 3874.048 4184.4070 5205.8782 4452.5090 5127.586 69641.789 1000 franks_solution1 313.846 349.1285 448.4770 379.8970 447.384 5654.149 1000 franks_solution2 1500.306 1667.6910 2041.6134 1774.3580 1961.229 9723.070 1000 hannes_solution 326.154 405.5385 561.8263 495.1795 576.000 12432.400 1000 orhans_solution 3747.690 4008.8175 5029.8333 4299.4840 4933.739 35025.202 1000 orhans_solution2 752.000 831.5900 1061.6974 897.6405 1026.872 9913.018 1000
for(col in cols) { DT[, (col) := scale(.SD[[col]], center = TRUE, scale = TRUE), g] }
test = data.frame(C = c(0, 2, 4, 7, 8), A = c(4, 2, 4, 7, 8), B = c(1, 3, 8, 3, 2))
test[ , order(names(test))] A B C 1 4 1 0 2 2 3 2 3 4 8 4 4 7 3 7 5 8 2 8
test = data.frame(C=c(0,2,4, 7, 8), A=c(4,2,4, 7, 8), B=c(1, 3, 8,3,2))
ep <- function() { eval(parse(text = "mean(1to10)")) }
system.time(for(i in seq_len(1e4)) mean(1:10)) user system elapsed 0.08 0.00 0.07
system.time(for(i in seq_len(1e4)) eval(parse(text = "mean(1:10)"))) user system elapsed 1.54 0.14 1.69
require(gtools) F <- defmacro(predicate, action_to_take, expr = if(predicate) action_to_take) F(1 != 1, action_to_take = print( F(pi > 3, action_to_take = return( [1] print(F) function (predicate = stop("predicate not supplied"), action_to_take = stop("action_to_take not supplied")) { tmp <- substitute(if (predicate) action_to_take) eval(tmp, parent.frame()) } <environment: 0x05ad5d3c>
A = matrix(rep(1:8, each = 5), nrow = 5) A[,3:ncol(A)]
[,1] [,2] [,3] [,4] [,5] [,6] [1,] 3 4 5 6 7 8 [2,] 3 4 5 6 7 8 [3,] 3 4 5 6 7 8 [4,] 3 4 5 6 7 8 [5,] 3 4 5 6 7 8
A[, 3:ncol(A)] [,1] [,2] [,3] [,4] [,5] [,6] [1,] 3 4 5 6 7 8 [2,] 3 4 5 6 7 8 [3,] 3 4 5 6 7 8 [4,] 3 4 5 6 7 8 [5,] 3 4 5 6 7 8
A <- matrix(rep(1:8, each = 5), nrow = 5) tail(A, 3)
> tail(1:10, 4) [1] 7 8 9 10 > tail(data.frame(A = 1:5, B = 1:5), 3) A B 3 3 3 4 4 4 5 5 5
> A[, 3:NCOL(A)] [,1] [,2] [,3] [,4] [,5] [,6] [1,] 3 4 5 6 7 8 [2,] 3 4 5 6 7 8 [3,] 3 4 5 6 7 8 [4,] 3 4 5 6 7 8 [5,] 3 4 5 6 7 8
give <- function(x, i, dimen = 1L) { ind <- seq_len(i-1) if(isTRUE(all.equal(dimen, 1L))) { out <- x[-ind, ] } else if(isTRUE(all.equal(dimen, 2L))) { out <- x[, -ind] } else { stop("Only for 2d objects") } out } > give(A, 3) [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [1,] 1 2 3 4 5 6 7 8 [2,] 1 2 3 4 5 6 7 8 [3,] 1 2 3 4 5 6 7 8 > give(A, 3, dimen = 2) [,1] [,2] [,3] [,4] [,5] [,6] [1,] 3 4 5 6 7 8 [2,] 3 4 5 6 7 8 [3,] 3 4 5 6 7 8 [4,] 3 4 5 6 7 8 [5,] 3 4 5 6 7 8
Axis | Data Type ------------------- X | Date value Y | Float value Z | Float value
library(rgl) data(volcano) z <- 2 * volcano x <- 10 * (1:nrow(z)) y <- 10 * (1:ncol(z)) zlim <- range(z) zlen <- zlim[2] - zlim[1] + 1 colorlut <- terrain.colors(zlen,alpha=0) col <- colorlut[ z-zlim[1]+1 ] open3d() rgl.surface(x, y, z, color=col, alpha=0.75, back="lines")
colorlut <- heat.colors(zlen,alpha=1) col <- colorlut[ z-zlim[1]+1 ] rgl.surface(x, y, matrix(1, nrow(z), ncol(z)),color=col, back="fill")
temp <- seq(-pi, 0, length = 50) x <- c(rep(1, 50) %*% t(cos(temp))) y <- c(cos(temp) %*% t(sin(temp))) z <- c(sin(temp) %*% t(sin(temp))) scatterplot3d(x, y, z, highlight.3d=TRUE, col.axis="blue", col.grid="lightblue", main="scatterplot3d - 2", pch=20)
newx <- c(0.5,1.5.2.5) newy <- c(2,3,4) out <- lm(newy ~ newx)
Call: lm(formula = newy ~ newx) Coefficients: (Intercept) newx 1.5 1.0
coefficients(out)["newx"] coefficients(out)[["newx"]]
unname(coefficients(out)[c("newx", "(Intercept)")]) head(unname(mtcars))
set.seed(1) dump <- ifelse(rep(TRUE, 200), rnorm(200), rnorm(200)) next.random.number.after.all.true <- rnorm(1) set.seed(1) dump <- ifelse(rep(FALSE, 200), rnorm(200), rnorm(200)) next.random.number.after.all.false <- rnorm(1) set.seed(1) dump <- ifelse(c(FALSE, rep(TRUE, 199)), rnorm(200), rnorm(200)) next.random.number.after.some.TRUE.some.FALSE <- rnorm(1) set.seed(1) r.1000 <- rnorm(1000) cat("Quantity of random numbers generated during the `ifelse` statement when:", "\n\tAll True ", which(r.1000 == next.random.number.after.all.true) - 1, "\n\tAll False ", which(r.1000 == next.random.number.after.all.false) - 1, "\n\tMixed T/F ", which(r.1000 == next.random.number.after.some.TRUE.some.FALSE) - 1 )
Quantity of random numbers generated during the `ifelse` statement when: All True 200 All False 200 Mixed T/F 400 <~~ Notice TWICE AS MANY numbers were generated when `test` had both T & F values present
. . if (any(test[!nas])) ans[test & !nas] <- rep(yes, length.out = length(ans))[test & !nas] if (any(!test[!nas])) ans[!test & !nas] <- rep(no, length.out = length(ans))[!test & !nas] . .
library(microbenchmark) N <- 1e4 set.seed(1) X <- sample(c(seq(100), rep(NA, 100)), N, TRUE) Y <- ifelse(is.na(X), rnorm(X), NA)
yesifelse <- quote(sort(ifelse(is.na(X), Y+17, X-17 ) )) noiflese <- quote(sort(c(Y[is.na(X)]+17, X[is.na(Y)]-17))) identical(eval(yesifelse), eval(noiflese))
microbenchmark(eval(yesifelse), eval(noiflese), times=50L) N = 1,000 Unit: milliseconds expr min lq median uq max neval eval(yesifelse) 2.286621 2.348590 2.411776 2.537604 10.05973 50 eval(noiflese) 1.088669 1.093864 1.122075 1.149558 61.23110 50 N = 10,000 Unit: milliseconds expr min lq median uq max neval eval(yesifelse) 30.32039 36.19569 38.50461 40.84996 98.77294 50 eval(noiflese) 12.70274 13.58295 14.38579 20.03587 21.68665 50
> year.f = factor(year) > dummies = model.matrix(~year.f)
> print(year) [1] 1956 1957 1957 1958 1958 1959 > dummy <- as.numeric(year == 1957) > print(dummy) [1] 0 1 1 0 0 0 > dummy2 <- as.numeric(year >= 1957) > print(dummy2) [1] 0 1 1 1 1 1
library(dummies) df1 <- data.frame(id = 1:4, year = 1991:1994) df1 <- cbind(df1, dummy(df1$year, sep = "_")) df1
library(mlr) df <- data.frame(var = sample(c("A", "B", "C"), 10, replace = TRUE)) df createDummyFeatures(df, cols = "var")
df <- data.frame(letter = rep(c( y = 1:6) library(caret) dummy <- dummyVars(~ ., data = df, fullRank = TRUE) dummy predict(dummy, df)
library(recipes) dummy_recipe <- recipe(y ~ letter, df) %>% step_dummy(letter) dummy_recipe
dummy_recipe %>% prep() %>% bake(df) dummy_recipe %>% prep(retain = TRUE) %>% juice()
data$factor_year_1 <- factor ( with ( data, ifelse ( ( year == 1957 ), 1 , 0 ) ) )
data$factor_year_2 <- factor ( with ( data, ifelse ( ( year < 1957 ), 0 , 1 ) ) )
example <- as.data.frame(c("A", "A", "B", "F", "C", "G", "C", "D", "E", "F")) names(example) <- "strcol" for(level in unique(example$strcol)){ example[paste("dummy", level, sep = "_")] <- ifelse(example$strcol == level, 1, 0) }
df1 <- data.frame(yr = 1951:1960) df1$is.1957 <- 1L * (df1$yr == 1957) df1$after.1957 <- 1L * (df1$yr >= 1957)
> df1 yr is.1957 after.1957 1 1951 0 0 2 1952 0 0 3 1953 0 0 4 1954 0 0 5 1955 0 0 6 1956 0 0 7 1957 1 1 8 1958 0 1 9 1959 0 1 10 1960 0 1
df2 <- data.frame(id = 1:5, year = c(1991:1994,1992)) make_dummies <- function(v, prefix = s <- sort(unique(v)) d <- outer(v, s, function(v, s) 1L * (v == s)) colnames(d) <- paste0(prefix, s) d } cbind(df2, make_dummies(df2$year, prefix =
id year y1991 y1992 y1993 y1994 1 1 1991 1 0 0 0 2 2 1992 0 1 0 0 3 3 1993 0 0 1 0 4 4 1994 0 0 0 1 5 5 1992 0 1 0 0
dcast(df2, id + year ~ year, fun.aggregate = length)
id year 1991 1992 1993 1994 1 1 1991 1 0 0 0 2 2 1992 0 1 0 0 3 3 1993 0 0 1 0 4 4 1994 0 0 0 1 5 5 1992 0 1 0 0
df3 <- data.frame(var = c("B", "C", "A", "B", "C")) f <- function(x) as.integer(length(x) > 0) merge(df3, dcast(df3, var ~ var, fun.aggregate = f), by =
var A B C 1 A 1 0 0 2 B 0 1 0 3 B 0 1 0 4 C 0 0 1 5 C 0 0 1
library(dplyr) library(tidyr) df2 %>% mutate(v = 1, yr = year) %>% spread(yr, v, fill = 0)
id year 1991 1992 1993 1994 1 1 1991 1 0 0 0 2 2 1992 0 1 0 0 3 3 1993 0 0 1 0 4 4 1994 0 0 0 1 5 5 1992 0 1 0 0
> x <- seq(1950, 1960, 1) ifelse(x == 1957, 1, 0) ifelse(x <= 1957, 1, 0) > [1] 0 0 0 0 0 0 0 1 0 0 0 > [1] 1 1 1 1 1 1 1 1 0 0 0
> x <- seq(1950, 1960, 1) ifelse(x == 1957, "foo", "bar") ifelse(x <= 1957, "foo", "bar") > [1] "bar" "bar" "bar" "bar" "bar" "bar" "bar" "foo" "bar" "bar" "bar" > [1] "foo" "foo" "foo" "foo" "foo" "foo" "foo" "foo" "bar" "bar" "bar"
> x <- seq(1950, 1960, 1) ifelse(x == 1957, "foo", ifelse(x == 1958, "bar","baz")) > [1] "baz" "baz" "baz" "baz" "baz" "baz" "baz" "foo" "bar" "baz" "baz"
df <- data.frame(var = sample(c("A", "B", "C"), 5, replace = TRUE)) var library(qdapTools) mtabulate(df$var)
factorToDummy <- function(dtable, var.name){ stopifnot(is.data.table(dtable)) stopifnot(var.name %in% names(dtable)) stopifnot(is.factor(dtable[, get(var.name)])) dtable[, paste0(var.name,": ",levels(get(var.name)))] -> new.names dtable[, (new.names) := transpose(lapply(get(var.name), FUN = function(x){x == levels(get(var.name))})) ] cat(paste("\nDodano zmienne dummy: ", paste0(new.names, collapse = ", "))) }
data <- data.table(data) data[, x:= droplevels(x)] factorToDummy(data, "x")
library(data.table) dt <- as.data.table(your.dataframe.or.whatever) dt[, is.1957 := 0] dt[year == 1957, is.1957 := 1]
library(data.table) dt <- as.data.table(cbind(c(1, 1, 1), c(2, 2, 3))) dt[, is.3 := 0] dt[V2 == 3, is.3 := 1]
introducedummy<-function(x,a,b,c){ g<-c(a,b,c) n<-nrow(x) newcol<-g[1] p<-colnames(x) p2<-c(p,newcol) new1<-numeric(n) state<-x[,g[2]] interest<-g[3] for(i in 1:n){ if(state[i]==interest){ new1[i]=1 } else{ new1[i]=0 } } x$added<-new1 colnames(x)<-p2 x }
> library(XLConnect) > wb <- loadWorkbook("MyBigFile.xlsx") Error: OutOfMemoryError (Java): Java heap space
> library(xlsx) > mydata <- read.xlsx2(file="MyBigFile.xlsx") Error in .jcall("RJavaTools", "Ljava/lang/Object;", "invokeMethod", cl, : java.lang.OutOfMemoryError: Java heap space
> options( java.parameters = "-Xmx2500m") > library(xlsx) > mydata <- read.xlsx2(file="MyBigFile.xlsx") Error in .jcall("RJavaTools", "Ljava/lang/Object;", "invokeMethod", cl, : java.lang.OutOfMemoryError: Java heap space
> library(xlsx) > options( java.parameters = "-Xmx2500m") > mydata <- read.xlsx2(file="MyBigFile.xlsx") Error in .jcall("RJavaTools", "Ljava/lang/Object;", "invokeMethod", cl, : java.lang.OutOfMemoryError: Java heap space
java.lang.OutOfMemoryError: GC overhead limit exceeded
library("openxlsx") mydf <- read.xlsx("BigExcelFile.xlsx", sheet = 1, startRow = 2, colNames = TRUE)
options(java.parameters = "-Xmx2048m") library(XLConnect)
install.packages("openxlsx") library("openxlsx") start.time <- Sys.time() x <- as.data.frame(matrix(1:4000000,200000,20)) y <- as.data.frame(matrix(1:4000000,200000,20)) z <- as.data.frame(matrix(1:4000000,200000,20)) wb <- createWorkbook("Example.xlsx") Sys.setenv("R_ZIPCMD" = "C:/Rtools/bin/zip.exe")
addWorksheet(wb, "Sheet 1") addWorksheet(wb, "Sheet 2") addWorksheet(wb, "Sheet 3") writeData(wb, 1, x) writeData(wb, 2, x = y, withFilter = TRUE) writeDataTable(wb, 3, z) saveWorkbook(wb, file = "Example.xlsx", overwrite = TRUE) end.time <- Sys.time() time.taken <- end.time - start.time time.taken
require(XLConnect) chnksz <- 2e3 s <- <sheet> wb <- loadWorkbook(<file>, s) tot.rows <- getLastRow(wb) last.row =0 for (i in seq(ceiling( tot.rows / chnksz) )) { next.batch <- readWorksheet(wb, s, startRow=last.row+i, endRow=last.row+chnksz+i) }
List x y fill size colour linetype . . . geom_point Yes Yes Yes Yes Yes No geom_abline Yes Yes No Yes Yes Yes . . .
colour size linetype alpha fill weight shape width height angle hjust vjust family fontface lineheight abline black 0.5 1 yes -- -- -- -- -- -- -- -- -- -- -- area yes 0.5 1 yes grey20 -- -- -- -- -- -- -- -- -- -- bar yes 0.5 1 yes grey20 1 -- -- -- -- -- -- -- -- -- bin2d yes 0.5 1 yes grey60 1 -- -- -- -- -- -- -- -- -- boxplot grey20 0.5 solid yes white 1 16 -- -- -- -- -- -- -- -- contour crossbar black 0.5 1 yes yes -- -- -- -- -- -- -- -- -- -- density black 0.5 1 yes yes 1 -- -- -- -- -- -- -- -- -- density2d errorbar black 0.5 1 yes -- -- -- 0.5 -- -- -- -- -- -- -- errorbarh black 0.5 1 yes -- -- -- -- 0.5 -- -- -- -- -- -- freqpoly black 0.5 1 yes -- -- -- -- -- -- -- -- -- -- -- hex yes 0.5 -- yes grey50 -- -- -- -- -- -- -- -- -- -- hline black 0.5 1 yes -- -- -- -- -- -- -- -- -- -- -- linerange black 0.5 1 yes -- -- -- -- -- -- -- -- -- -- -- path black 0.5 1 yes -- -- -- -- -- -- -- -- -- -- -- point black 2 -- yes yes -- 16 -- -- -- -- -- -- -- -- pointrange black 0.5 1 yes yes -- 16 -- -- -- -- -- -- -- -- polygon NA 0.5 1 yes grey20 -- -- -- -- -- -- -- -- -- -- quantile raster -- -- -- yes grey20 -- -- -- -- -- -- -- -- -- -- rect yes 0.5 1 yes grey20 -- -- -- -- -- -- -- -- -- -- ribbon yes 0.5 1 yes grey20 -- -- -- -- -- -- -- -- -- -- rug black 0.5 1 yes -- -- -- -- -- -- -- -- -- -- -- segment black 0.5 1 yes -- -- -- -- -- -- -- -- -- -- -- smooth step black 0.5 1 yes -- -- -- -- -- -- -- -- -- -- -- text black 5 -- yes -- -- -- -- -- 0 0.5 0.5 1 1.2 tile yes 0.1 1 yes grey20 -- -- -- -- -- -- -- -- -- -- violin grey20 0.5 solid yes white 1 -- -- -- -- -- -- -- -- -- vline black 0.5 1 yes -- -- -- -- -- -- -- -- -- -- --
find_aes <- function(geom="point"){ tryCatch({ Geom <- getFromNamespace(paste("Geom", ggplot2:::firstUpper(geom), sep=""), "ggplot2") tmp <- unclass(Geom$default_aes) tmp[is.na(tmp)] <- "yes" data.frame(tmp, stringsAsFactors=FALSE) }, error = function(e) {}) } funs <- grep("^geom_", ls("package:ggplot2"),val=T) geoms <- gsub("^geom_", "", funs) all <- lapply(geoms, find_aes) names(all) <- geoms relevant <- sapply(all, function(x) !is.null(x) && nrow(x) > 0) library(plyr) results = do.call("rbind.fill",all) rownames(results) <- names(relevant[relevant]) results[is.na(results)] <- "--" options(width=9999) capture.output(print(results), file="aes.txt")
install.packages("gridExtra") require(gridExtra) require(lattice) x <- seq(pi/4, 5 * pi, length.out = 100) y <- seq(pi/4, 5 * pi, length.out = 100) r <- as.vector(sqrt(outer(x^2, y^2, "+"))) grid <- expand.grid(x=x, y=y) grid$z <- cos(r^2) * exp(-r/(pi^3)) plot1 <- levelplot(z~x*y, grid, cuts = 50, scales=list(log="e"), xlab="", ylab="", main="Weird Function", sub="with log scales", colorkey = FALSE, region = TRUE) plot2 <- levelplot(z~x*y, grid, cuts = 50, scales=list(log="e"), xlab="", ylab="", main="Weird Function", sub="with log scales", colorkey = FALSE, region = TRUE) grid.arrange(plot1,plot2, ncol=2)
data(AirPassengers) AP = AirPassengers w1 = window(AP, start=c(1949, 1), end=c(1952, 1)) w2 = window(AP, start=c(1952, 1), end=c(1960, 12)) px1 = xyplot(w1) px2 = xyplot(w2) print(px1, position=c(0, .6, 1, 1), more=TRUE) print(px2, position=c(0, 0, 1, .4))
library(lattice) w <- as.matrix(dist(Loblolly)) x <- as.matrix(dist(HairEyeColor)) y <- as.matrix(dist(rock)) z <- as.matrix(dist(women)) pw <- levelplot(w, scales = list(draw = FALSE)) px <- levelplot(x, scales = list(draw = FALSE)) py <- levelplot(y, scales = list(draw = FALSE)) pz <- levelplot(z, scales = list(draw = FALSE)) print(pw, split = c(1, 1, 2, 2), more = TRUE) print(px, split = c(2, 1, 2, 2), more = TRUE) print(py, split = c(1, 2, 2, 2), more = TRUE) print(pz, split = c(2, 2, 2, 2), more = FALSE)
library(ggplot2) p = ggplot(mtcars, aes(wt, mpg)) p + geom_point()
library(ggplot2) p <- ggplot(mtcars, aes(wt, mpg)) p <- p + geom_point() print(p)
require(maptools) getinfo.shape("TM_WORLD_BORDERS_SIMPL-0.3.shp") world.map <- readShapeSpatial("TM_WORLD_BORDERS_SIMPL-0.3.shp") class(world.map) head(world.map@data)
world.map@data = world.map@data[world.map@data$AREA > 30000,] plot(world.map)
world.map@data = world.map@data[world.map@data$NAME != "Antarctica",] plot(world.map)
world.map <- world.map[world.map$AREA > 30000,] plot(world.map)
world.map <- world.map[world.map@data$AREA > 30000, ] plot(world.map)
world.map <- subset(world.map, AREA > 30000) plot(world.map)
australia.map < - world.map[world.map$NAME == "Australia",] plot(australia.map)
writeOGR(australia.map,".","australia",driver="ESRI Shapefile") australia.map < - readOGR(".","australia") writeOGR(australia.map,".","australia_small",driver="ESRI Shapefile")
dat <- read.table(text = "sample Types Number sample1 A 3641 sample2 A 3119 sample1 B 15815 sample2 B 12334 sample1 C 2706 sample2 C 3147", header=TRUE) library(ggplot2) bar <- ggplot(data=dat, aes(x=Types, y=Number, fill=sample)) + geom_bar(position =
ggplot(data=dat, aes(x=Types, y=Number, fill=sample)) + geom_bar(position = geom_text(aes(label=Number), position=position_dodge(width=0.9), vjust=-0.25)
ggplot(data=dat, aes(x=Types, y=Number, fill=sample)) + geom_bar(position = "dodge", stat = geom_text(aes(label=Number), position=position_dodge(width=0.9*86400), vjust=-0.25)
install.packages("devtools") library(devtools) dev_mode(on=T) install_github("hadley/ggplot2") dev_mode(on=F)
step_1 %>% step_2 if(condition) %>% step_3 step_1 %>% step_2 %>% if(condition) step_3
if(condition) { step_1 %>% step_2 }else{ step_1 %>% step_2 %>% step_3 }
X<-1 Y<-T X %>% add(1) %>% { ifelse(Y ,add(.,1), . ) }
library("magrittr") 1:3 %>% purrr::when(sum(.) < 25 ~ sum(.), ~0 )
library("dplyr") z <- data.frame(a=1:2) z %>% mutate(b=a^2) -> z2 if (z2$b[1]>1) { z2 %>% mutate(b=b^2) -> z2 } z2 %>% mutate(b=b^2) -> z3
iff <- function(cond,x,y) { if(cond) return(x) else return(y) } z %>% mutate(b=a^2) %>% iff(cond=z2$b[1]>1,mutate(.,b=b^2),.) %>% mutate(b=b^2) -> z4
library(magrittr) X <- 1 Y <- TRUE X %>% `if`(Y, . + 1, .) %>% multiply_by(2)
X %>% `if`(Y, . + 1, . + 2) X %>% {`if`(Y, . + 1, . + 2)}
data.frame(a=1:2) %>% mutate(b=a^2) %>% pif(~b[1]>1, ~mutate(.,b=b^2)) %>% mutate(b=b^2) 1:3 %>% pif(sum(.) < 25,sum,0) 1 %>% pif(TRUE,~. + 1) %>% `*`(2) 1 %>% `+`(1) %>% pif(TRUE ,~ .+1)
iris %>% pif(is.data.frame, dim, nrow) iris %>% pif(~is.numeric(Species), ~"numeric :)", ~paste(class(Species)[1],":(")) iris %>% pif(nrow(.) > 2, head(.,2)) iris %>% pif(TRUE, dim, warning("this will be evaluated")) iris %>% pif(TRUE, dim, ~warning("this won
pif <- function(x, p, true, false = identity){ if(!requireNamespace("purrr")) stop("Package if(inherits(p, "formula")) p <- purrr::as_mapper( if(!is.list(x)) p else update(p,~with(...,.))) if(inherits(true, "formula")) true <- purrr::as_mapper( if(!is.list(x)) true else update(true,~with(...,.))) if(inherits(false, "formula")) false <- purrr::as_mapper( if(!is.list(x)) false else update(false,~with(...,.))) if ( (is.function(p) && p(x)) || (!is.function(p) && p)){ if(is.function(true)) true(x) else true } else { if(is.function(false)) false(x) else false } }
duplicated(df) | duplicated(df[nrow(df):1, ])[nrow(df):1]
df <- data.frame(a = c(1,2,3,4,1,5,6,4,2,1)) duplicated(df) | duplicated(df[nrow(df):1, ])[nrow(df):1] which(duplicated(df) | duplicated(df[nrow(df):1, ])[nrow(df):1])
duplicated(df) | duplicated(df, fromLast = TRUE) duplicated(df) | duplicated(df, fromLast = TRUE)
library(data.table) DT <- data.table(A = rep(1:3, each=4), B = rep(1:4, each=3), C = rep(1:2, 6), key = "A,B,C") DT[unique(DT[duplicated(DT)]),which=T]
DT[,count := .N,by = list(A,B,C)][count>1, which=T]
add <- function(x) { function(y) x + y } adders <- lapply(1:10, add) adders[[1]](10) adders[[10]](10)
add <- function(x) { force(x) function(y) x + y } adders2 <- lapply(1:10, add) adders2[[1]](10) adders2[[10]](10)
add <- function(x) { function(y) x + y } adders <- lapply(1:10, add) adders[[1]](10) adders[[10]](10)
ID | Data1 | Data2 | ... | UserID 1 | aaa | bbb | ... | u_001 2 | aab | bb2 | ... | u_001 3 | aac | bb3 | ... | u_001 4 | aad | bb4 | ... | u_002
list( ID | Data1 | Data2 | ... | UserID 1 | aaa | bbb | ... | u_001 2 | aab | bb2 | ... | u_001 3 | aac | bb3 | ... | u_001 , 4 | aad | bb4 | ... | u_002 ...)
paths = by(smallsampleMat, smallsampleMat[,"userID"], function(x) x)
set.seed(1) userid <- rep(1:2,times=4) data1 <- replicate(8 , paste( sample(letters , 3 ) , collapse = "" ) ) data2 <- sample(10,8) df <- data.frame( userid , data1 , data2 ) out <- split( df , f = df$userid )
teacher yr1.baseline pd yr1.lesson1 yr1.lesson2 yr2.lesson1 yr2.lesson2 yr2.lesson3 1 3 1/13/09 2/5/09 3/6/09 4/27/09 10/7/09 11/18/09 3/4/10 2 7 1/15/09 2/5/09 3/3/09 5/5/09 10/16/09 11/18/09 3/4/10 3 8 1/27/09 2/5/09 3/3/09 4/27/09 10/7/09 11/18/09 3/5/10
library(reshape2); library(dplyr); library(tidyr) dat %>% melt(id=c("teacher", "pd"), value.name="date") dat %>% gather(key=c(teacher, pd), value=date, -c(teacher, pd))
teacher pd variable date 1 3 2/5/09 yr1.baseline 1/13/09 2 7 2/5/09 yr1.baseline 1/15/09 3 8 2/5/09 yr1.baseline 1/27/09 4 3 2/5/09 yr1.lesson1 3/6/09 5 7 2/5/09 yr1.lesson1 3/3/09 6 8 2/5/09 yr1.lesson1 3/3/09 7 3 2/5/09 yr1.lesson2 4/27/09 8 7 2/5/09 yr1.lesson2 5/5/09 9 8 2/5/09 yr1.lesson2 4/27/09 10 3 2/5/09 yr2.lesson1 10/7/09 11 7 2/5/09 yr2.lesson1 10/16/09 12 8 2/5/09 yr2.lesson1 10/7/09 13 3 2/5/09 yr2.lesson2 11/18/09 14 7 2/5/09 yr2.lesson2 11/18/09 15 8 2/5/09 yr2.lesson2 11/18/09 16 3 2/5/09 yr2.lesson3 3/4/10 17 7 2/5/09 yr2.lesson3 3/4/10 18 8 2/5/09 yr2.lesson3 3/5/10
dat <- structure(list(teacher = structure(1:3, .Label = c("3", "7", "8"), class = "factor"), yr1.baseline = structure(1:3, .Label = c("1/13/09", "1/15/09", "1/27/09"), class = "factor"), pd = structure(c(1L, 1L, 1L), .Label = "2/5/09", class = "factor"), yr1.lesson1 = structure(c(2L, 1L, 1L), .Label = c("3/3/09", "3/6/09"), class = "factor"), yr1.lesson2 = structure(c(1L, 2L, 1L), .Label = c("4/27/09", "5/5/09"), class = "factor"), yr2.lesson1 = structure(c(2L, 1L, 2L), .Label = c("10/16/09", "10/7/09"), class = "factor"), yr2.lesson2 = structure(c(1L, 1L, 1L), .Label = "11/18/09", class = "factor"), yr2.lesson3 = structure(c(1L, 1L, 2L), .Label = c("3/4/10", "3/5/10"), class = "factor")), .Names = c("teacher", "yr1.baseline", "pd", "yr1.lesson1", "yr1.lesson2", "yr2.lesson1", "yr2.lesson2", "yr2.lesson3"), row.names = c(NA, -3L), class = "data.frame")
...: Specification of columns to gather. Use bare variable names. Select all variables between x and z with ‘x:z’, exclude y with ‘-y’. For more options, see the select documentation.
> dd <- as.Date(c("2013-01-01", "2013-02-01", "2013-03-01")) > class(dd) [1] "Date" > unlist(dd) [1] "2013-01-01" "2013-02-01" "2013-03-01" > list(dd) [[1]] [1] "2013-01-01" "2013-02-01" "2013-03-01" > unlist(list(dd)) [1] 15706 15737 15765
> dd <- list(dd, dd) > (d <- do.call("c", dd)) [1] "2013-01-01" "2013-02-01" "2013-03-01" "2013-01-01" "2013-02-01" "2013-03-01" > class(d) [1] "Date"
ggplot(data.frame(x=c(0, 10)), aes(x)) + stat_function(fun=sin)
qplot(c(0,2), fun=sin, stat="function", geom="line")
ggplot(data.frame(x=c(0, 10)), aes(x)) + stat_function(fun=function(x) sin(x) + log(x))
> install.packages("XYZ",repos="http: Warning message: package ‘XYZ’ is not available (for R version 2.15.0)
R --vanilla CMD INSTALL --build returnanalytics/pkg/PortfolioAnalytics
install.packages( "partykit_1.1-2.tar.gz", repo=NULL, type="source") install.packages( "Dowd_0.11.tar.gz", repo=NULL, type="source")
setGeneric( name="foo", signature=c("x"), def=function( x, ... ) { standardGeneric("xFoo") } )
setMethod( f="foo", signature=signature(x="ANY"), definition=cmpfun(function( x, ... ) { return(TRUE) }, options=list(suppressAll=TRUE)) )
setMethod( f="foo", signature=signature(x="character"), definition=cmpfun(function( x, ... ) { return(x) }, options=list(suppressAll=TRUE)) )
Error : Q:/pkgb/man/foo-methods.Rd: Sections \title, and \name must exist and be unique in Rd files ERROR: installing Rd objects failed for package
Build > more > Configure build tools > configure roxygen > do not use roxygen2 to generate NAMESPACE.
matches <- regmatches(years, gregexpr("[[:digit:]]+", years)) as.numeric(unlist(matches))
library(stringr) years %>% str_match_all("[0-9]+") %>% unlist %>% as.numeric
x <- gregexpr("^[0-9]+", years) x2 <- as.numeric(unlist(regmatches(years, x)))
x <- gregexpr("[0-9]+", years) x2 <- as.numeric(unlist(regmatches(years, x)))
years<-c("20 years old", "1 years old") library(gsubfn) pat <- "[-+.e0-9]*\\d" sapply(years, function(x) strapply(x, pat, as.numeric)[[1]])
Example: Warning in install.packages : InternetOpenUrl failed: Warning in install.packages : InternetOpenUrl failed: Warning in install.packages : unable to access index for repository http: Installing package into ‘C:/Users/Documents/R/win-library/3.1’ (as ‘lib’ is unspecified) Warning in install.packages : InternetOpenUrl failed: Warning in install.packages : InternetOpenUrl failed: Warning in install.packages : unable to access index for repository http: Warning in install.packages : package ‘reshape’ is not available (for R version 3.1.1)
Installing package into ‘/usr/lib64/R/library’ (as ‘lib’ is unspecified) --- Please select a CRAN mirror for use in this session --- Error in download.file(url, destfile = f, quiet = TRUE) : unsupported URL scheme Warning: unable to access index for repository https: Warning message: package ‘ggplot2’ is not available (for R version 3.2.2)
> str1 = c("", "x", "x y", "x y!" , "x y! z") > lengths(gregexpr("[A-z]\\W+", str1)) + 1L [1] 2 2 2 3 3
sapply(gregexpr("[[:alpha:]]+", str1), function(x) sum(x > 0))
> sapply(gregexpr("[[:alpha:]]+", str1), function(x) sum(x > 0)) [1] 0 1 2 2 3
require(stringr) str_count("one, two three 4,,,, 5 6", "\\S+")
require(stringr) nwords <- function(string, pseudo=F){ ifelse( pseudo, pattern <- "\\S+", pattern <- "[[:alpha:]]+" ) str_count(string, pattern) } nwords("one, two three 4,,,, 5 6") nwords("one, two three 4,,,, 5 6", pseudo=T)
> str_count("How many words are in this sentence", [1] 7
library(stringr) questions <- c( "", "x", "x y", "x y!", "x y! z", "foo+bar+baz~spam+eggs", "one, two three 4,,,, 5 6", "How many words are in this sentence", "How many words are in this sentence", "Combien de mots sont dans cette phrase ?", " Day after day, day after day, We stuck, nor breath nor motion; " ) answers <- c(0, 1, 2, 2, 3, 5, 6, 7, 7, 7, 12) score <- function(f) sum(unlist(lapply(questions, f)) == answers) funs <- c( function(s) sapply(gregexpr("\\W+", s), length) + 1, function(s) sapply(gregexpr("[[:alpha:]]+", s), function(x) sum(x > 0)), function(s) vapply(strsplit(s, "\\W+"), length, integer(1)), function(s) length(strsplit(gsub( function(s) length(str_match_all(s, "\\S+")[[1]]), function(s) str_count(s, "\\S+"), function(s) sapply(gregexpr("\\W+", s), function(x) sum(x > 0)) + 1, function(s) length(unlist(strsplit(s," "))), function(s) sapply(strsplit(s, " "), length), function(s) str_count(s, ) unlist(lapply(funs, score))
> str1 <- "How many words are in this sentence" > str2 <- gsub( > str2 [1] "How many words are in this sentence" > strsplit(str2, [[1]] [1] "How" "many" "words" "are" "in" "this" "sentence" > strsplit(str2, [1] "How" "many" "words" "are" "in" "this" "sentence" > length(strsplit(str2, [1] 7
library(stringr) s <- " Day after day, day after day, We stuck, nor breath nor motion; " m <- str_match_all( s, "\\S+" ) length(m[[1]])
require(stringi) > s <- c("Lorem ipsum dolor sit amet, consectetur adipisicing elit.", + "nibh augue, suscipit a, scelerisque sed, lacinia in, mi.", + "Cras vel lorem. Etiam pellentesque aliquet tellus.", + "") > stri_stats_latex(s) CharsWord CharsCmdEnvir CharsWhite Words Cmds Envirs 133 0 30 24 0 0
> str1 <- "How many words are in this sentence" > wc(str1) [1] 7
sapply(gregexpr("\\W+", str1), function(x) sum(x>0) ) + 1
str_words <- function(sentence) { str_count(sentence, " ") + 1 }
for (category in categories){ lines(data.frame.for.this.category, type= }
dat <- matrix(runif(40,1,20),ncol=4) matplot(dat, type = c("b"),pch=1,col = 1:4) legend("topleft", legend = 1:4, col=1:4, pch=1)
set.seed(45) df <- data.frame(x=rep(1:5, 9), val=sample(1:100, 45), variable=rep(paste0("category", 1:9), each=5)) ggplot(data = df, aes(x=x, y=val)) + geom_line(aes(colour=variable))
plot(0,0,xlim = c(-10,10),ylim = c(-10,10),type = "n") cl <- rainbow(5) for (i in 1:5){ lines(-10:10,runif(21,-10,10),col = cl[i],type = }
v <- c(7,12,28,3,41) t <- c(14,7,6,19,3) png(file = "line_chart_2_lines.jpg") plot(v,type = "o",col = "red", xlab = "Month", ylab = "Rain fall", main = "Rain fall chart") lines(t, type = "o", col = "blue") dev.off()
ggplot(data=Set6, aes(x=Semana, y=Net_Sales_in_pesos, group = Agencia_ID, colour = as.factor(Agencia_ID)))
plot(1, type = xlab = "log transformed coverage", ylab = "frequency") cl <- rainbow(22) for(i in 1:length(data)) { lines(density(log(data[[i]]$coverage)), col = cl[i]) plotcol[i] <- cl[i] } legend("topright", legend = c(list.files()), col = plotcol, lwd = 1, cex = 0.5)
plot(0,0,xlim = c(-10,10),ylim = c(-10,10),type = "n") cl <- rainbow(5) invisible(lapply(1:5, function(i) lines(-10:10,runif(21,-10,10),col = cl[i],type =
df1 = data.frame(id=c( df2 = data.frame(id=c( df3 = data.frame(id=c(
1 1 NA NA 2 3 4 NA 7 NA 1 NA 10 4 NA NA 23 NA 2 1 43 5 NA NA 57 NA 3 NA 62 NA 5 2 73 2 NA NA 96 NA 6 NA
Reduce(function(x, y) merge(x, y, all=TRUE), list(df1, df2, df3))
Reduce(function(...) merge(..., all=TRUE), list(df1, df2, df3))
qplot(Label, F1, data=testData, geom = "boxplot", fill=Label, binwidth=0.5, main="Test") + xlab("Label") + ylab("Features")
require(reshape2) df <- read.csv("TestData.csv", header=T) df.m <- melt(df, id.var = "Label") > df.m require(ggplot2) ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=Label))
p <- ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=Label)) p + facet_wrap( ~ variable, scales="free")
p <- ggplot(data = df.m, aes(x=variable, y=value)) p <- p + geom_boxplot(aes(fill=Label)) p <- p + geom_jitter() p <- p + facet_wrap( ~ variable, scales="free") p <- p + xlab("x-axis") + ylab("y-axis") + ggtitle("Title") p <- p + guides(fill=guide_legend(title="Legend_Title")) p
require(ggplot2) p <- ggplot(data = df.m, aes(x=variable, y=value)) p <- p + geom_boxplot(aes(fill = Label)) p <- p + geom_point(aes(y=value, group=Label), position = position_dodge(width=0.75)) p <- p + facet_wrap( ~ variable, scales="free") p <- p + xlab("x-axis") + ylab("y-axis") + ggtitle("Title") p <- p + guides(fill=guide_legend(title="Legend_Title")) p
library(reshape2) dat.m <- melt(TestData,id.vars= library(lattice) bwplot(value~Label |variable, data=dat.m, between=list(y=1), main="Bad or Good")
df <- data.frame(id = c(rep("Good",200), rep("Bad", 200)), F1 = c(rnorm(200,10,2), rnorm(200,8,1)), F2 = c(rnorm(200,7,1), rnorm(200,6,1)), F3 = c(rnorm(200,6,2), rnorm(200,9,3)), F4 = c(rnorm(200,12,3), rnorm(200,8,2))) boxplot(df[,-1], xlim = c(0.5, ncol(df[,-1])+0.5), boxfill=rgb(1, 1, 1, alpha=1), border=rgb(1, 1, 1, alpha=1)) boxplot(df[which(df$id=="Good"), -1], xaxt = "n", add = TRUE, boxfill="red", boxwex=0.25, at = 1:ncol(df[,-1]) - 0.15) boxplot(df[which(df$id=="Bad"), -1], xaxt = "n", add = TRUE, boxfill="blue", boxwex=0.25, at = 1:ncol(df[,-1]) + 0.15)
library(reshape2) library(ggplot2) df <- read.csv("TestData.csv", header=T) df.m <- melt(df, id.var = "Label") ggplot(data = df.m, aes(x=Label, y=value)) + geom_boxplot() + facet_wrap(~variable,ncol = 4)
boxplot(data1[,1:4]) boxplot(data2[,1:4],add=TRUE,border="red")
df <- read.csv("~/Desktop/TestData.csv") df <- data.frame(stack(df[,-1]), Label=df$Label) boxplot(values ~ Label:ind, data=df, col=c("red", "limegreen"), las=2)
a <- structure(list(`X$Days` = c("10", "38", "66", "101", "129", "185", "283", "374")), .Names = "X$Days")
$`X$Days` [1] "10" "38" "66" "101" "129" "185" "283" "374"
get_numbers <- function(X) { X[toupper(X) != tolower(X)] <- NA return(as.double(as.character(X))) }
a <- array(0, dim=dim(X)) for (i in 1:ncol(X)) {a[,i] <- X[,i]}
df <- data.frame( A=c("A", "A", "A", "B", "B", "B", "C", "C", "C"), x=c(1, 1, 2, 2, 3, 4, 5, 5, 5), y=rnorm(9) ) library(dplyr) df.g <- group_by(df, A) filter(df.g, x == min(x))
Source: local data frame [6 x 3] Groups: A A x y 1 A 1 -1.04584335 2 A 1 0.97949399 3 B 2 0.79600971 4 C 5 -0.08655151 5 C 5 0.16649962 6 C 5 -0.05948012
library(plyr) ddply(df, .(A), function(z) { z[z$x == min(z$x), ][1, ] })
A x y 1 A 1 -1.04584335 2 B 2 0.79600971 3 C 5 -0.08655151
group_by(df, A) %>% filter(x == min(x)) %>% filter(1:n() == 1)
library(dplyr) df.g <- group_by(df, A) filter(df.g, rank(x, ties.method="first")==1)
dt <- as.data.table(df) setkey(dt, A,x) dt[J(unique(A)), mult="first"] dt <- as.data.table(df) dt[dt[, .I[which.min(x)], by=A]$V1]
df.g <- group_by(df, A) filter(df.g, row_number(x) == 1)
A min(X) y 1 A 1 -1.4836989 2 B 2 0.3755771 3 C 5 0.9284441
set.seed(1) x <- data.frame(a = rep(1:2, each = 10), b = rnorm(20)) x <- dplyr::arrange(x, a, b) dplyr::filter(x, !duplicated(a))
labNames <- c( plot(c(1:10),xlab=expression(paste(labName[1], x^2)),ylab=expression(paste(labName[2], y^2)))
labNames <- c( xlab <- bquote(.(labNames[1]) ~ x^2) ylab <- bquote(.(labNames[2]) ~ y^2) plot(c(1:10), xlab = xlab, ylab = ylab)
labNames <- c( plot(c(1:10), xlab=substitute(paste(nn, x^2), list(nn=labNames[1])), ylab=substitute(paste(nn, y^2), list(nn=labNames[2])))
par(mar=c(5, 4.3, 4, 2) + 0.1) plot(c(1:10), xlab = expression(xLab ~ x^2 ~ m^-2), ylab = expression(yLab ~ y^2 ~ m^-2), main="Plot 1")
plot(c(1:10), xlab = expression(xLab * x^2 * m^-2), ylab = expression(yLab * y^2 * m^-2), main="Plot 2")
plot(c(1:10), xlab = expression(xLab ~ x^2 * m^-2), ylab = expression(yLab ~ y^2 * m^-2), main="Plot 3")
plot(c(1:10), xlab = expression( ylab = expression("Temperature (" * degree * C *")"))
data = data.frame(x = 1:10, y = 1:10) ggplot(data, aes(x,y)) + geom_point() + xlab(expression(bar(yourUnits) ~ g ~ m^-2 ~ OR ~ integral(f(x)*dx, a,b))) + ylab(expression("Biomass (g per" ~ m^3 *")")) + theme_bw()
library(ggplot2) x_mean <- 1.5 x_sd <- 1.2 N <- 500 n <- ggplot(data.frame(x <- rnorm(N, x_mean, x_sd)),aes(x=x)) + geom_bar() + stat_bin() + labs(title=substitute(paste( "Histogram of random data with ", mu,"=",m,", ", sigma^2,"=",s2,", ", "draws = ", numdraws,", ", bar(x),"=",xbar,", ", s^2,"=",sde), list(m=x_mean,xbar=mean(x),s2=x_sd^2,sde=var(x),numdraws=N))) print(n)
labNames <- c( squared <- c(expression( xlab <- eval(bquote(expression(.(labNames[1]) ~ .(squared[1][[1]])))) ylab <- eval(bquote(expression(.(labNames[2]) ~ .(squared[2][[1]])))) plot(c(1:10), xlab = xlab, ylab = ylab)
B<- by(wifi,(wifi$Room),FUN=function(y){apply(y, 2, A)})
B<- by(wifi,(wifi$Room),FUN=function(y){apply(y[4:9], 2, A)})
A <- function(x) x + 1 wifi <- data.frame(replicate(9,1:4)) wifi data.frame(wifi[1:3], apply(wifi[4:9],2, A) ) cbind(wifi[1:3], apply(wifi[4:9],2, A) )
data.frame(wifi[1:3], lapply(wifi[4:9], A) ) cbind(wifi[1:3], lapply(wifi[4:9], A) )
wifi <- data.frame(A=1:4, B=runif(4), C=5:9) wifi[c("B", "C")] <- lapply(wifi[c("B", "C")], function(x) -1 * x)
wifi[,4:9] <- apply(wifi[,4:9], MARGIN=2, FUN=A, na.rm=T)
ggplot( rates.by.groups, aes(x=name, y=rate, colour=majr, group=majr) )
f <- function( column ) { ... ggplot( rates.by.groups, aes(x=name, y=rate, colour= ??? , group=??? ) ) }
ggplot( rates.by.groups, aes(x=name, y=rate, colour=majr, group=majr) )
ggplot( rates.by.groups, aes(x=name, y=rate, colour=gender, group=gender) )
ggplot( rates.by.groups, aes(x=name, y=rate, colour= columnName , group=columnName ) )
e <- environment() ggplot( rates.by.groups, aes(x=name, y=rate, colour= columnName , group=columnName ), environment=e )
f <- function( column ) { ... ggplot( rates.by.groups, aes_string(x="name", y="rate", colour= column, group=column ) ) }
ggplot( rates.by.groups, aes(x=name, y=rate, colour= get(column), group=get(column) ) )
library(tidyverse) rates.by.groups <- data.frame( name = LETTERS[1:3], rate = 1:3, mjr = LETTERS[c(4,4,5)], gender = c("M","F","F") ) f <- function(column) { ggplot(rates.by.groups, aes(x = name, y = rate, fill = !!ensym(column), group = !!ensym(column))) + geom_fill() } f("gender") f("mjr")
f2 <- function(column) { column <- enquo(column) ggplot(rates.by.groups, aes(x = name, y = rate, fill = !!column, group = !!column)) + geom_fill() } f2(gender) f2(mjr)
--- title: "All pages landscape" output: pdf_document classoption: landscape --- ```{r} summary(cars) ``` \newpage ```{r} summary(cars) ```
--- title: "Mixing portrait and landscape" output: pdf_document: includes: in_header: header.tex --- Portrait: ```{r} summary(cars) ``` \newpage \begin{landscape} Landscape: ```{r} summary(cars) ``` \end{landscape} \newpage More portrait: ```{r} summary(cars) ```
\usepackage{lscape} \newcommand{\blandscape}{\begin{landscape}} \newcommand{\elandscape}{\end{landscape}}
--- title: "Mixing portrait and landscape" output: pdf_document: includes: in_header: header.tex --- Portrait ```{r} summary(cars) ``` \newpage \blandscape Landscape ```{r} summary(cars) ``` \elandscape \newpage More portrait ```{r} summary(cars) ```
--- title: "Mixing portrait and landscape WITHOUT a header.tex file" header-includes: - \usepackage{pdflscape} - \newcommand{\blandscape}{\begin{landscape}} - \newcommand{\elandscape}{\end{landscape}} output: pdf_document --- Portrait ```{r} summary(cars) ``` \newpage \blandscape Landscape ```{r} summary(cars) ``` \elandscape \newpage More portrait ```{r} summary(cars) ```
title: "Landscape and Portrait" author: "Jung-Han Wang" date: "Thursday, March 19, 2015" output: pdf_document
title: "Landscape and Portrait" author: "Jung-Han Wang" date: "Thursday, March 19, 2015" output: pdf_document classoption: landscape
title: "Landscape and Portrait" author: "Jung-Han Wang" date: "Thursday, March 19, 2015" output: pdf_document: includes: in_header: header.tex
--- title: "Mixing portrait and landscape" output: pdf_document: keep_tex: true includes: in_header: header.tex --- ```{r, echo=FALSE} library(xtable) ``` Portrait ```{r, results= print(xtable(summary(cars), caption="Landscape table"), comment=FALSE) ``` Landscape: ```{r, results= print(xtable(summary(cars), caption="Landscape table"), floating.environment="sidewaystable", comment=FALSE) ```
--- title: "Mixing portrait and landscape" output: pdf_document: keep_tex: true includes: in_header: header.tex --- ```{r, echo=FALSE} library(xtable) ``` Portrait: ```{r, results= print(xtable(summary(cars), caption="Portrait table."), comment=FALSE) ``` Landscape: ```{r, results= cat(paste0( "\\begin{table}[ht]\\centering\\rotatebox{90}{", paste0(capture.output( print(xtable(summary(cars)), floating=FALSE, comment=FALSE)), collapse="\n"), "}\\caption{Landscape table.}\\end{table}")) ```
p<-ggplot(data,aes(Treatment,organisms))+geom_tile(aes(fill=S))+ scale_fill_gradient(low = "black",high = "red") + scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + theme(legend.position = "right", axis.ticks = element_blank(), axis.text.x = element_text(size = base_size, angle = 90, hjust = 0, colour = "black"), axis.text.y = element_text(size = base_size, hjust = 1, colour = "black")).
data$Treatment <- as.character(data$Treatment) data$Treatment <- factor(data$Treatment, levels=unique(data$Treatment))
data$Treatment <- factor(data$Treatment, levels=c("Y", "X", "Z"))
level_order <- c( ggplot(iris, aes(x = factor(Species, level = level_order), y = Petal.Width)) + geom_col()
level_order <- factor(iris$Species, level = c( ggplot(iris, aes(x = level_order, y = Petal.Width)) + geom_col()
library(maptools) substitute your shapefiles here state.map <- readShapeSpatial("BRASIL.shp") counties.map <- readShapeSpatial("55mu2500gsd.shp") counties.map@data$noise <- rnorm(nrow(counties.map@data))
plot.heat <- function(counties.map,state.map,z,title=NULL,breaks=NULL,reverse=FALSE,cex.legend=1,bw=.2,col.vec=NULL,plot.legend=TRUE) { if (is.null(breaks)) { breaks= seq( floor(min(counties.map@data[,z],na.rm=TRUE)*10)/10 , ceiling(max(counties.map@data[,z],na.rm=TRUE)*10)/10 ,.1) } counties.map@data$zCat <- cut(counties.map@data[,z],breaks,include.lowest=TRUE) cutpoints <- levels(counties.map@data$zCat) if (is.null(col.vec)) col.vec <- heat.colors(length(levels(counties.map@data$zCat))) if (reverse) { cutpointsColors <- rev(col.vec) } else { cutpointsColors <- col.vec } levels(counties.map@data$zCat) <- cutpointsColors plot(counties.map,border=gray(.8), lwd=bw,axes = FALSE, las = 1,col=as.character(counties.map@data$zCat)) if (!is.null(state.map)) { plot(state.map,add=TRUE,lwd=1) } if (plot.legend) legend("bottomleft", cutpoints, fill = cutpointsColors,bty="n",title=title,cex=cex.legend) }
plot.heat(counties.map,state.map,z="noise",breaks=c(-Inf,-2,-1,0,1,2,Inf))
VegMap <- readOGR(".", "VegMapFile") Veg9<-brewer.pal(9, spplot(VegMap, "Veg", col.regions=Veg9, +at=c(0.5,1.5,2.5,3.5,4.5,5.5,6.5,7.5,8.5,9.5), +main=
library(maps); colors = floor(runif(63)*657); map("state", col = colors, fill = T, resolution = 0)
library(maps); library(mapproj); colors = floor(runif(63)*657); map("state", col = colors, fill = T, projection = "polyconic", resolution = 0);
> all(1:6 %in% 0:36) [1] TRUE > all(1:60 %in% 0:36) [1] FALSE
> any(1:6 %in% 0:36) [1] TRUE > any(1:60 %in% 0:36) [1] TRUE > any(50:60 %in% 0:36) [1] FALSE
df <- data.frame(type=c("A", "A", "A", "B", "B"), group=rep("group1", 5)) df$type <- factor(df$type, levels=c("A","B", "C")) ggplot(df, aes(x=group, fill=type)) + geom_bar()
df <- data.frame(type=c("A", "A", "A", "B", "B"), group=rep("group1", 5)) df1 <- data.frame(type=c("A", "A", "A", "B", "B", "A", "A", "C", "B", "B"), group=c(rep("group1", 5),rep("group2", 5))) df$type <- factor(df$type, levels=c("A","B", "C")) df1$type <- factor(df1$type, levels=c("A","B", "C")) df <- data.frame(table(df)) df1 <- data.frame(table(df1)) ggplot(df, aes(x=group, y=Freq, fill=type)) + geom_bar(position="dodge") ggplot(df1, aes(x=group, y=Freq, fill=type)) + geom_bar(position="dodge")
library(ggplot2) df <- data.frame(type=c("A", "A", "A", "B", "B"), group=rep("group1", 5)) df1 <- data.frame(type=c("A", "A", "A", "B", "B", "A", "A", "C", "B", "B"), group=c(rep("group1", 5),rep("group2", 5))) df$type <- factor(df$type, levels=c("A","B", "C")) df1$type <- factor(df1$type, levels=c("A","B", "C")) plt <- ggplot(df, aes(x=type, fill=type)) + geom_bar(position= plt1 <- ggplot(df1, aes(x=type, fill=type)) + geom_bar(position=
ggplot(df, aes(x=type)) + geom_bar() + scale_x_discrete(drop=FALSE)
library(ggplot2) df <- data.frame(type=c("A", "A", "A", "B", "B"), group=rep("group1", 5)) df$type <- factor(df$type, levels=c("A","B", "C")) ggplot(df, aes(x=group, fill=type)) + geom_bar(position="dodge") + scale_x_discrete(drop=FALSE) + scale_fill_discrete(drop=FALSE)
df <- data.frame(type=c("A", "A", "A", "B", "B"), group=rep("group1", 5)) df1 <- data.frame(type=c("A", "A", "A", "B", "B", "A", "A", "C", "B", "B"), group=c(rep("group1", 5),rep("group2", 5))) df$type <- factor(df$type, levels=c("A","B", "C")) df1$type <- factor(df1$type, levels=c("A","B", "C")) df <- data.frame(table(df)) df1 <- data.frame(table(df1)) df$plot = "A" df1$plot = "B" df <- rbind(df, df1) ggplot(df, aes(x=group, y=Freq, fill=type)) + geom_bar(position="dodge", stat="identity") + facet_wrap( ~ plot, scales="free")
plt <- ggplot(df, aes(x=type, fill=type)) + geom_bar(position= scale_fill_manual( values = c( " " " ),drop=FALSE)
```{r echo=FALSE, comment = ""} require(plyr) rbi <- ddply(baseball, .(year), summarise, mean_rbi = mean(rbi, na.rm = TRUE)) ``` ```{r} plot(mean_rbi ~ year, type = "l", data = rbi) ``` ```{r, fig.width = 2, fig.height = 2} plot(mean_rbi ~ year, type = "l", data = rbi) ``` ```{r, out.width = 2, out.height = 2} plot(mean_rbi ~ year, type = "l", data = rbi) ``` ```{r, out.width = plot(mean_rbi ~ year, type = "l", data = rbi) ``` ```{r, out.width = plot(mean_rbi ~ year, type = "l", data = rbi) ```
knit("test.Rmd") system("pandoc -s -t beamer --slide-level 1 test.md -o test.tex")
```{r setup, include=FALSE} opts_chunk$set(dev = ``` ```{r echo=FALSE, comment = ""} require(plyr) rbi <- ddply(baseball, .(year), summarise, mean_rbi = mean(rbi, na.rm = TRUE)) ``` ```{r} plot(mean_rbi ~ year, type = "l", data = rbi) ``` ```{r, fig.width = 4, fig.height = 4} plot(mean_rbi ~ year, type = "l", data = rbi) ```
R version 3.0.1 (16/05/2013) Platform: x86_64-pc-linux-gnu (64-bit) Local: [1] LC_CTYPE = en_US.UTF-8 LC_NUMERIC = C LC_TIME = C LC_COLLATE = C [5] LC_MONETARY=C LC_MESSAGES=C LC_PAPER=C LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C LC_MEASUREMENT=C LC_IDENTIFICATION=C attached base packages: [1] stats graphics grDevices utils datasets methods base other attached packages: [1] plyr_1.8 markdown_0.6 knitr_1.2 rCharts_0.3.51 slidify_0.3.52 loaded via a namespace (and not attached): [1] RJSONIO_1.0-3 codetools_0.2-8 digest_0.6.3 evaluate_0.4.3 formatR_0.8 [6] grid_3.0.1 lattice_0.20-15 stringr_0.6.2 tools_3.0.1 whisker_0.3-2 [11] yaml_2.1.7
```{r setup, include=FALSE} opts_chunk$set(dev = ```
--- title: "My Document" output: html_document: fig_width: 6 fig_height: 4 ---
```{r, fig.width=14, fig.height=12} ggplot(aes(x=mycolumn1, y=mycolumn2)) + geom_line(size=2) + theme_grey(base_size = 25) ```
```{r, out.width="200px", out.height="200px"} ggplot(aes(x=mycolumn1, y=mycolumn2)) + geom_line(size=2) + theme_grey(base_size = 25) ```
a<-data.frame(one = numeric(0), two = numeric(0)) a names(a) a<-rbind(a, c(5,6)) a names(a)
df <- data.frame(a = character(0), b=character(0), c=numeric(0)) df[nrow(df)+1,] <- c("d","gsgsgd",4) df <- data.frame(a = character(0), b=character(0), c=numeric(0), stringsAsFactors=F) df[nrow(df)+1,] <- c("d","gsgsgd",4) df
rs <- data.frame(i=numeric(), square=numeric(), cube=numeric()) for (i in 1:4) { calc <- c(i, i^2, i^3) names(calc) <- names(rs) rs <- rbind(rs, as.list(calc)) }
> rs i square cube 1 1 1 1 2 2 4 8 3 3 9 27 4 4 16 64 >
> df <- data.frame(a=numeric(0), b=numeric(0)) > rbind(df, list(1,2)) > X1 X2 > 1 1 2 > df <- data.table(a=numeric(0), b=numeric(0)) > rbind(df, list(1,2)) a b 1: 1 2
d_dataset <- data.frame( variable = character(), before = numeric(), after = numeric(), stringsAsFactors = FALSE) d_dataset <- rbind( d_dataset, data.frame( variable = "test", before = 9, after = 12, stringsAsFactors = FALSE)) print(d_dataset) variable before after 1 test 9 12
a<-data.frame(one=as.numeric(0), two=as.numeric(0))
require(plyr) plyr <- function(dd) ddply(dd, .(price), summarise, ss=sum(volume))
require(plyr) require(data.table) require(dataframe) require(rbenchmark) require(xts) plyr <- function(dd) ddply(dd, .(price), summarise, ss=sum(volume)) t.apply <- function(dd) unlist(tapply(dd$volume, dd$price, sum)) t.apply.x <- function(dd) unlist(tapply(dd[,2], dd[,1], sum)) l.apply <- function(dd) unlist(lapply(split(dd$volume, dd$price), sum)) l.apply.x <- function(dd) unlist(lapply(split(dd[,2], dd[,1]), sum)) b.y <- function(dd) unlist(by(dd$volume, dd$price, sum)) b.y.x <- function(dd) unlist(by(dd[,2], dd[,1], sum)) agg <- function(dd) aggregate(dd$volume, list(dd$price), sum) agg.x <- function(dd) aggregate(dd[,2], list(dd[,1]), sum) dtd <- function(dd) dd[, sum(volume), by=(price)] obs <- c(5e1, 5e2, 5e3, 5e4, 5e5, 5e6, 5e6, 5e7, 5e8) timS <- timeBasedSeq( bmkRL <- list(NULL) for (i in 1:5){ tt <- timS[1:obs[i]] for (j in 1:8){ pxl <- seq(0.9, 1.1, by= (1.1 - 0.9)/floor(obs[i]/(11-j))) px <- sample(pxl, length(tt), replace=TRUE) vol <- rnorm(length(tt), 1000, 100) d.df <- base::data.frame(time=tt, price=px, volume=vol) d.dfp <- dataframe::data.frame(time=tt, price=px, volume=vol) d.matrix <- as.matrix(d.df[,-1]) d.dt <- data.table(d.df) listLabel <- paste( bmkRL[[listLabel]] <- benchmark(plyr(d.df), plyr(d.dfp), t.apply(d.df), t.apply(d.dfp), t.apply.x(d.matrix), l.apply(d.df), l.apply(d.dfp), l.apply.x(d.matrix), b.y(d.df), b.y(d.dfp), b.y.x(d.matrix), agg(d.df), agg(d.dfp), agg.x(d.matrix), dtd(d.dt), columns =c( replications = 10, order = } }
$`i= 5 j= 8` test elapsed relative 15 dtd(d.dt) 4.156 1.000000 6 l.apply(d.df) 15.687 3.774543 7 l.apply(d.dfp) 16.066 3.865736 8 l.apply.x(d.matrix) 16.659 4.008422 4 t.apply(d.dfp) 21.387 5.146054 3 t.apply(d.df) 21.488 5.170356 5 t.apply.x(d.matrix) 22.014 5.296920 13 agg(d.dfp) 32.254 7.760828 14 agg.x(d.matrix) 32.435 7.804379 12 agg(d.df) 32.593 7.842397 10 b.y(d.dfp) 98.006 23.581809 11 b.y.x(d.matrix) 98.134 23.612608 9 b.y(d.df) 98.337 23.661453 1 plyr(d.df) 9384.135 2257.972810 2 plyr(d.dfp) 9384.448 2258.048123
> sessionInfo() R version 2.15.1 (2012-06-22) Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit) locale: [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 attached base packages: [1] stats graphics grDevices utils datasets methods base other attached packages: [1] xts_0.8-6 zoo_1.7-7 rbenchmark_0.3 dataframe_2.5 data.table_1.8.1 plyr_1.7.1 loaded via a namespace (and not attached): [1] grid_2.15.1 lattice_0.20-6 tools_2.15.1
ddply( dd[, 2:3], ~price, function(x) sum( x$volume ) )
plyr_Original <- function(dd) ddply( dd, .(price), summarise, ss=sum(volume)) plyr_Optimized <- function(dd) ddply( dd[, 2:3], ~price, function(x) sum( x$volume ) ) dplyr <- function(dd) dd %.% group_by(price) %.% summarize( sum(volume) ) data_table <- function(dd) dd[, sum(volume), keyby=price]
$`obs= 500,000 unique prices= 158,286 reps= 5` test elapsed relative 9 data_table(d.dt) 0.074 1.000 4 dplyr(d.dt) 0.133 1.797 3 dplyr(d.df) 1.832 24.757 6 l.apply(d.df) 5.049 68.230 5 t.apply(d.df) 8.078 109.162 8 agg(d.df) 11.822 159.757 7 b.y(d.df) 48.569 656.338 2 plyr_Optimized(d.df) 148.030 2000.405 1 plyr_Original(d.df) 401.890 5430.946
$`obs= 50,000,000 unique prices= 15,836,476 reps= 5` Unit: seconds expr min lq median uq max neval data_table(d.dt) 1.190 1.193 1.198 1.460 1.574 10 dplyr(d.dt) 2.346 2.434 2.542 2.942 9.856 10 dplyr(d.df) 66.238 66.688 67.436 69.226 86.641 10
`d.df` (data.frame) 3.181 seconds. `d.dt` (data.table) 0.418 seconds.
ksource <- function(x, ...) { library(knitr) source(purl(x, output = tempfile()), ...) }
Source Data & Code ---------------------------- <div id="accordion-start"></div> ```{r sourcedata, echo=FALSE, results= if(!exists(autodoc.skip.df)) { autodoc.skip.df <- list() } for (i in ls(.GlobalEnv)) { if(!i %in% autodoc.skip.df) { itm <- tryCatch(get(i), error=function(e) NA ) if(typeof(itm)=="list") { if(is.data.frame(itm)) { cat(sprintf(" print(xtable(itm), type="html", include.rownames=FALSE, html.table.attributes=sprintf("class= } } } } ``` ```{r allsource, echo=FALSE, results= fns <- unique(c(compact(llply(.data=llply(.data=ls(all.names=TRUE), .fun=function(x) {a<-get(x); c(normalizePath(getSrcDirectory(a)),getSrcFilename(a))}), .fun=function(x) { if(length(x)>0) { x } } )), llply(names(sourced), function(x) c(normalizePath(dirname(x)), basename(x))))) for (itm in fns) { cat(sprintf(" cat("\n```{r eval=FALSE}\n") cat(paste(tryCatch(readLines(file.path(itm[1], itm[2])), error=function(e) sprintf("Could not read source file named %s", file.path(itm[1], itm[2]))), sep="\n", collapse="\n")) cat("\n```\n") } ``` <div id="accordion-stop"></div> <script type="text/javascript"> ```{r jqueryinclude, echo=FALSE, results= cat(readLines(url("http: ``` </script> <script type="text/javascript"> ```{r tablesorterinclude, echo=FALSE, results= cat(readLines(url("http: ``` </script> <script type="text/javascript"> ```{r jqueryuiinclude, echo=FALSE, results= cat(readLines(url("http: ``` </script> <script type="text/javascript"> ```{r table2csvinclude, echo=FALSE, results= cat(readLines(file.path(jspath, "table2csv.js")), sep="\n") ``` </script> <script type="text/javascript"> $(document).ready(function() { $( $( $( $( $( $( $( </script>
library(readr) library(stringr) source_rmd <- function(file_path) { stopifnot(is.character(file_path) && length(file_path) == 1) .tmpfile <- tempfile(fileext = ".R") .con <- file(.tmpfile) on.exit(close(.con)) full_rmd <- read_file(file_path) codes <- str_match_all(string = full_rmd, pattern = "```(?s)\\{r[^{}]*\\}\\s*\\n(.*?)```") stopifnot(length(codes) == 1 && ncol(codes[[1]]) == 2) codes <- paste(codes[[1]][, 2], collapse = "\n") writeLines(codes, .con) flush(.con) cat(sprintf("R code extracted to tempfile: %s\nSourcing tempfile...", .tmpfile)) source(.tmpfile) }
\documentclass{article} << label = setup, include = FALSE>>= opts_chunk$set(fig.path = knit_hooks$set(par = function(before, options, envir){ if (before && options$fig.show!= par(mar = c(4, 4, 0.1, 0.1), cex.lab = 0.95, cex.axis = 0.9, mgp = c(2, 0.7, 0), tcl = -0.3) } ) knit_hooks$set(rgl = function(before, options, envir) { if (!before) { if (rgl.cur() == 0) return() name = paste(options$fig.path, options$label, sep = rgl.snapshot(paste(name, return(paste( } } ) options(replace.assign = TRUE, width = 60) @ \begin{document} << label=packages >>= library(car) @ << label=rgl1, rgl=TRUE, fig.show= scatter3d(prestige ~ income + education, data=Duncan) @ \end{document}
Warning messages: 1: In rgl.snapshot(paste(name, ".png", sep = ""), fmt = "png") : RGL: Pixmap save: unable to open file 2: In rgl.snapshot(paste(name, ".png", sep = ""), fmt = "png") : snapshot failed 3: running command
R version 3.1.1 (2014-07-10) Platform: x86_64-w64-mingw32/x64 (64-bit) locale: [1] LC_COLLATE=English_United States.1252 [2] LC_CTYPE=English_United States.1252 [3] LC_MONETARY=English_United States.1252 [4] LC_NUMERIC=C [5] LC_TIME=English_United States.1252 attached base packages: [1] tools stats graphics grDevices utils datasets methods [8] base other attached packages: [1] mgcv_1.8-2 nlme_3.1-117 rgl_0.93.1098 car_2.0-21 knitr_1.6.15 loaded via a namespace (and not attached): [1] evaluate_0.5.5 formatR_1.0 grid_3.1.1 highr_0.3 [5] lattice_0.20-29 MASS_7.3-34 Matrix_1.1-4 nnet_7.3-8 [9] stringr_0.6.2
\documentclass{article} \usepackage{animate} << label = setup, include = FALSE>>= library("rgl") library("car") library("knitr") knit_hooks$set(rgl = hook_plot_custom) @ \begin{document} << label=rgl1, rgl=TRUE, fig.show= scatter3d(prestige ~ income + education, data=Duncan) M <- par3d("userMatrix") par3d(windowRect = 100 + opts_current$get("dpi") * c(0, 0, opts_current$get("fig.width"), opts_current$get("fig.height"))) spinFunc <- par3dinterp(userMatrix=list(M, rotate3d(M, pi/2, 1, 0, 0), rotate3d(M, pi/2, 0, 1, 0))) for(i in 1:40) { par3d(spinFunc(i / 10)) Sys.sleep(0.05) rgl.snapshot(fig_path(".png", number = i), fmt = "png") } @ \end{document}
\documentclass{article} \usepackage{animate} << label = setup, include = FALSE>>= library("rgl") library("car") library("knitr") hook_rgl_spin <- function(before, options, envir) { if (!before) { par3d(windowRect = 100 + options$dpi * c(0, 0, options$fig.width, options$fig.height)) if (!is.null(options$spin3d.axis)) { spin3d.axis <- options$spin3d.axis } else { spin3d.axis <- c(0, 0, 1) } if (!is.null(options$spin3d.rpm)) { spin3d.rpm <- options$spin3d.rpm } else { spin3d.rpm <- c(0, 0, 1) } spinFunc <- spin3d(axis = spin3d.axis, rpm = spin3d.rpm) for(i in 1:options$fig.num) { par3d(spinFunc(i * options$interval)) Sys.sleep(0.05) rgl.snapshot(fig_path(".png", number = i), fmt = "png") } hook_plot_custom(before, options, envir) } } knit_hooks$set(rgl = hook_rgl_spin) @ \begin{document} << label=rgl1, rgl=TRUE, fig.show= scatter3d(prestige ~ income + education, data=Duncan) @ \end{document}
library(plyr) draw <- list(structure(c(-2.403, -2.295, 3.198, 1.378, 0.159, 1.531, 1.567, -1.716, -4.244, 0.819, -1.121, -0.622, 1.519, 1.731, -1.779, 2.84), .Dim = c(2L, 8L), .Dimnames = list(NULL, c("brand_1", "brand_2", "price_1", "price_2", "price_3", "perf_1", "perf_2", "perf_3"))), structure(c(-4.794, -2.147, -1.912, 0.241, 0.084, 0.31, 0.093, -0.249, 0.054, -0.042, 0.248, -0.737, -1.775, 1.803, 0.73, -0.505), .Dim = c(2L, 8L), .Dimnames = list(NULL, c("brand_1", "brand_2", "price_1", "price_2", "price_3", "perf_1", "perf_2", "perf_3")))) b1 <- c(1, .15, .25) b2 <- c(2, .1, .2) interpolateCombos <- data.frame(xout = c(b1,b2), atts = rep(c("Brand", "Price", "Performance"), 2), i = rep(1:2, each = 3), stringsAsFactors = FALSE) findInt <- function(x1,x2,y1,y2,reqx) { range <- x2 - x1 diff <- reqx - x1 out <- y1 + ((y2 - y1)/range) * diff return(out) } calcInterpolate <- function(xout, atts, i){ if (atts == "Brand") { breaks <- 1:2 cols <- 1:2 } else if (atts == "Price"){ breaks <- c(-.2, 0, .2) cols <- 3:5 } else { breaks <- c(-.25, 0, .25) cols <- 6:8 } utils <- draw[[i]][, cols] if (atts == "Brand" | xout %in% breaks){ out <- data.frame(out = utils[, match(xout, breaks)]) } else{ mi <- min(which(breaks <= xout)) ma <- max(which(breaks >= xout)) out <- data.frame(out = findInt(breaks[mi], breaks[ma], utils[, mi], utils[,ma], xout)) } out$draw <- 1:nrow(utils) return(out) } out <- mdply(interpolateCombos, calcInterpolate)
p1 <- c(1,2,1) p2 <- c(2,1,2) FUN <- function(x, p1, p2) { bases <- c(0,2,5) u1 <- rowSums(x[, bases + p1]) u2 <- rowSums(x[, bases + p2]) sumExp <- exp(u1) + exp(u2) s1 <- exp(u1) / sumExp s2 <- exp(u2) / sumExp return(cbind(s1,s2)) } lapply(draw, FUN, p1 = p1, p2 = p2) [[1]] s1 s2 [1,] 0.00107646039 0.9989235 [2,] 0.00009391749 0.9999061 [[2]] s1 s2 [1,] 0.299432858 0.7005671 [2,] 0.004123175 0.9958768
library(ggplot2) data <- data.frame(x = 1:10, y = c(3,5,2,5,6,2,7,6,5,4)) ggplot(data, aes(x, y)) + geom_bar(stat = opts( panel.grid.major = theme_line(size = 0.5, colour = panel.grid.minor = theme_line(colour = NA), panel.background = theme_rect(colour = NA), axis.ticks = theme_segment(colour = NA) )
data <- data.frame( X = c("A","B","C"), Y = c(1:3) ) ggplot( data ) + geom_bar( aes( X, Y ) ) + theme( panel.grid.major.x = element_blank() , panel.grid.major.y = element_line( size=.1, color="black" ) )
ggplot(out, aes(X1, X2)) + geom_point() + scale_x_continuous(breaks = NULL) + scale_y_continuous(breaks = NULL) + opts(panel.background = theme_blank()) + opts(axis.title.x = theme_blank(), axis.title.y = theme_blank())
tt <- c(1,2,3,2,1, 1, 2, 1) which(diff(sign(diff(tt)))==-2)+1
x <- c(1,2,9,9,2,1,1,5,5,1) which(diff(sign(diff(x)))==-2)+1 x <- c(2,2,9,9,2,1,1,5,5,1) which(diff(sign(diff(x)))==-2)+1 x <- c(3,2,9,9,2,1,1,5,5,1) which(diff(sign(diff(x)))==-2)+1
localMaxima <- function(x) { y <- diff(c(-.Machine$integer.max, x)) > 0L rle(y)$lengths y <- cumsum(rle(y)$lengths) y <- y[seq.int(1L, length(y), 2L)] if (x[[1]] == x[[2]]) { y <- y[-1] } y } x <- c(1,2,9,9,2,1,1,5,5,1) localMaxima(x) x <- c(2,2,9,9,2,1,1,5,5,1) localMaxima(x) x <- c(3,2,9,9,2,1,1,5,5,1) localMaxima(x)
x <- c(1, 2, 3, 2, 1, 1, 2, 1) library(zoo) xz <- as.zoo(x) rollapply(xz, 3, function(x) which.min(x)==2) rollapply(xz, 3, function(x) which.max(x)==2)
rxz <- rollapply(xz, 3, function(x) which.max(x)==2) index(rxz)[coredata(rxz)]
inflect <- function(x, threshold = 1){ up <- sapply(1:threshold, function(n) c(x[-(seq(n))], rep(NA, n))) down <- sapply(-1:-threshold, function(n) c(rep(NA,abs(n)), x[-seq(length(x), length(x) - abs(n) + 1)])) a <- cbind(x,up,down) list(minima = which(apply(a, 1, min) == a[,1]), maxima = which(apply(a, 1, max) == a[,1])) }
n <- 2 randomwalk <- 100 + cumsum(rnorm(50, 0.2, 1)) bottoms <- lapply(1:n, function(x) inflect(randomwalk, threshold = x)$minima) tops <- lapply(1:n, function(x) inflect(randomwalk, threshold = x)$maxima) cf.1 <- grDevices::colorRampPalette(c("pink","red")) cf.2 <- grDevices::colorRampPalette(c("cyan","blue")) plot(randomwalk, type = for(i in 1:n){ points(bottoms[[i]], randomwalk[bottoms[[i]]], pch = 16, col = cf.1(n)[i], cex = i/1.5) } for(i in 1:n){ points(tops[[i]], randomwalk[tops[[i]]], pch = 16, col = cf.2(n)[i], cex = i/1.5) } legend("topleft", legend = c("Minima",1:n,"Maxima",1:n), pch = rep(c(NA, rep(16,n)), 2), col = c(1, cf.1(n),1, cf.2(n)), pt.cex = c(rep(c(1, c(1:n) / 1.5), 2)), cex = .75, ncol = 2)
which.peaks <- function(x,partial=TRUE,decreasing=FALSE){ if (decreasing){ if (partial){ which(diff(c(FALSE,diff(x)>0,TRUE))>0) }else { which(diff(diff(x)>0)>0)+1 } }else { if (partial){ which(diff(c(TRUE,diff(x)>=0,FALSE))<0) }else { which(diff(diff(x)>=0)<0)+1 } } }
library(dplyr) test = data_frame(x = sample(1:10, 20, replace = TRUE)) mutate(test, local.minima = if_else(lag(x) > x & lead(x) > x, TRUE, FALSE)
x <- c(1,2,3,2,1,2,1) which(diff(sign(diff(x)))==+2)+1
localMinima <- function(x) { y <- diff(c(.Machine$integer.max, x)) > 0L rle(y)$lengths y <- cumsum(rle(y)$lengths) y <- y[seq.int(1L, length(y), 2L)] if (x[[1]] == x[[2]]) { y <- y[-1] } y } x <- c(1,2,9,9,2,1,1,5,5,1) localMinima(x) x <- c(2,2,9,9,2,1,1,5,5,1) localMinima(x) x <- c(3,2,9,9,2,1,1,5,5,1) localMinima(x)
stockData = data.frame(x = 1:30, y=rnorm(30,7)) min_indexes = which(diff( sign(diff( c(0,stockData$y)))) == 2) max_indexes = which(diff( sign(diff( c(0,stockData$y)))) == -2) min_locs = stockData[min_indexes,] max_locs = stockData[max_indexes,] plot(stockData$y, type="l") points( min_locs, col="red", pch=19, cex=1 ) points( max_locs, col="green", pch=19, cex=1 )
vals=rbinom(1000,20,0.5) text=paste0(substr(format(diff(vals),scientific=TRUE),1,1),collapse="") sort(na.omit(c(gregexpr( ifelse(grepl(
tt <- c(1,2,3,2,1, 1, 2, 1) tt_peaks <- findpeaks(tt, zero = "0", peakpat = NULL, minpeakheight = -Inf, minpeakdistance = 1, threshold = 0, npeaks = 0, sortstr = FALSE) [,1] [,2] [,3] [,4] [1,] 3 3 1 5 [2,] 2 7 6 8
library(ggplot2) data(presidential) data(economics) presidential <- presidential[-(1:3),] yrng <- range(economics$unemploy) ymin <- yrng[1] ymax <- yrng[1] + 0.1*(yrng[2]-yrng[1]) p2 <- ggplot() p2 <- p2 + geom_line(mapping=aes(x=date, y=unemploy), data=economics , size=3, alpha=0.5) p2 <- p2 + scale_x_date("time") + scale_y_continuous(name="unemployed [1000 p2 <- p2 + geom_segment(mapping=aes(x=start,y=ymin, xend=start, yend=ymax, colour=name), data=presidential, size=2, alpha=0.5) p2 <- p2 + geom_point(mapping=aes(x=start,y=ymax, colour=name ), data=presidential, size=3) p2 <- p2 + geom_text(mapping=aes(x=start, y=ymax, label=name, angle=20, hjust=-0.1, vjust=0.1),size=6, data=presidential) p2
library(ggplot2) data(presidential) data(economics)
events <- presidential[-(1:3),] baseline = min(economics$unemploy) delta = 0.05 * diff(range(economics$unemploy)) events$ymin = baseline events$timelapse = c(diff(events$start),Inf) events$bump = events$timelapse < 4*370 offsets <- rle(events$bump) events$offset <- unlist(mapply(function(l,v) {if(v){(l:1)+1}else{rep(1,l)}}, l=offsets$lengths, v=offsets$values, USE.NAMES=FALSE)) events$ymax <- events$ymin + events$offset * delta
ggplot() + geom_line(mapping=aes(x=date, y=unemploy), data=economics , size=3, alpha=0.5) + geom_segment(data = events, mapping=aes(x=start, y=ymin, xend=start, yend=ymax)) + geom_point(data = events, mapping=aes(x=start,y=ymax), size=3) + geom_text(data = events, mapping=aes(x=start, y=ymax, label=name), hjust=-0.1, vjust=0.1, size=6) + scale_x_date("time") + scale_y_continuous(name="unemployed \[1000
xrange = range(c(economics$date, events$start)) p1 <- ggplot(data=economics, mapping=aes(x=date, y=unemploy)) + geom_line(size=3, alpha=0.5) + scale_x_date("", limits=xrange) + scale_y_continuous(name="unemployed [1000 opts(axis.text.x = theme_blank(), axis.title.x = theme_blank()) ylims <- c(0, (max(events$offset)+1)*delta) + baseline p2 <- ggplot(data = events, mapping=aes(x=start)) + geom_segment(mapping=aes(y=ymin, xend=start, yend=ymax)) + geom_point(mapping=aes(y=ymax), size=3) + geom_text(mapping=aes(y=ymax, label=name), hjust=-0.1, vjust=0.1, size=6) + scale_x_date("time", limits=xrange) + scale_y_continuous("", breaks=NA, limits=ylims) library(ggExtra) align.plots(p1, p2, heights=c(3,1))
install.packages("googleVis") library(googleVis) dates <- seq(as.Date("2011/1/1"), as.Date("2011/12/31"), "days") happiness <- rnorm(365)^ 2 happiness[333:365] <- happiness[333:365] * 3 + 20 Title <- NA Annotation <- NA df <- data.frame(dates, happiness, Title, Annotation) df$Title[333] <- "Discovers Google Viz" df$Annotation[333] <- "Google Viz API interface by Markus Gesmann causes acute increases in happiness." AnnoTimeLine <- gvisAnnotatedTimeLine(df, datevar="dates", numvar="happiness", titlevar="Title", annotationvar="Annotation", options=list(displayAnnotations=TRUE, legendPosition= width=600, height=300) ) plot(AnnoTimeLine) cat(createGoogleGadget(AnnoTimeLine), file="annotimeline.xml")
data(presidential) data(economics) events <- presidential[-(1:3),] economics$year = as.numeric(format(economics$date, format = "%Y")) library(dplyr) econonomics_mean <- economics %>% group_by(year) %>% summarise(mean_unemployment = mean(unemploy)) president <- c(rep(NA,14), rep("Reagan", 8), rep("Bush", 4), rep("Clinton", 8), rep("Bush", 8), rep("Obama", 7)) econonomics_mean$president <- president p <- ggplot(data = econonomics_mean, aes(x = year, y = mean_unemployment)) + geom_point(aes(color = president)) + geom_line(alpha = 1/3)
> df <- data.frame(a=1:3) > df$b <- list(1:1, 1:2, 1:3) > df a b 1 1 1 2 2 1, 2 3 3 1, 2, 3
> df <- data.frame(a=1:3, b=list(1:1, 1:2, 1:3)) Error in data.frame(1L, 1:2, 1:3, check.names = FALSE, stringsAsFactors = TRUE) : arguments imply differing number of rows: 1, 2, 3
library(data.table) data.table(a=1:3,b=list(1,1:2,1:3)) a b 1: 1 1 2: 2 1,2 3: 3 1,2,3
> data_frame(abc = letters[1:3], lst = list(1:3, 1:3, 1:3)) abc lst <chr> <list> 1 a <int [3]> 2 b <int [3]> 3 c <int [3]>
> > data.frame(x = 1:3, y = 1:3) %>% class [1] "data.frame" > data.frame(x = 1:3, y = 1:3) %>% class == "data.frame" [1] TRUE > > data_frame(x = 1:3, y = 1:3) %>% class [1] "tbl_df" "tbl" "data.frame" > data_frame(x = 1:3, y = 1:3) %>% class == "data.frame" [1] FALSE FALSE TRUE > > if(data_frame(x = 1:3, y = 1:3) %>% class == "data.frame") "something" Warning message: In if (data_frame(x = 1:3, y = 1:3) %>% class == "data.frame") "something" : the condition has length > 1 and only the first element will be used > > data_frame(x = 1:3, y = 1:3) %>% inherits("data.frame") [1] TRUE
library(tibble) dataset <- data.frame(a = 1:5, b = 2:6, c=3:7) add_column(dataset, d = 4:8, .after = 2)
d <- data.frame(a=1:4, b=5:8, c=9:12) target <- which(names(d) == cbind(d[,1:target,drop=F], data.frame(d=12:15), d[,(target+1):length(d),drop=F]) a b d c 1 1 5 12 9 2 2 6 13 10 3 3 7 14 11 4 4 8 15 12
> test <- data.frame(a=1,b=1,c=1) > test a b c 1 1 1 1 > bspot <- which(names(test)=="b") > data.frame(test[1:bspot],d=2,test[(bspot+1):ncol(test)]) a b d c 1 1 1 2 1
data.frame(append(test, list(d=2), after=match("b", names(test))))
df = data.frame(a = seq(1, 3), b = seq(4,6), c = seq(7,9)) df[ df a b c d 1 1 4 7 10 2 2 5 8 11 3 3 6 9 12
z = rbinom(1000, 5, 0.25) old.df <- data.frame(x = c(1:1000), y = rnorm(1:1000)) head(old.df)
new.df <- data.frame(x = old.df[,1], z, y = old.df[,2]) head(new.df)
InsertDFCol <- function(colName, colData, data, place = 1, before, after) { if (length(names(data)) < place) stop("The place argument exceeds the number of columns in the data for the InsertDFCol function. Please check your place number") if (place <= 0 & (!missing(before) | !(missing(after)))) stop("You cannot put a column into the 0th or less than 0th position. Check your place argument.") if (place %% 1 != 0 & (!missing(before) | !(missing(after)))) stop("Your place value was not an integer.") if (!(missing(before)) & !missing(after)) stop("You cannot designate a before AND an after argument in the same function call. Please use only one or the other.") dClass <- class(data) data <- as.data.frame(data) useBefore <- !missing(before) useAfter <- !missing(after) if (useBefore | useAfter) { if (useBefore) { CheckChoice(before, names(data)) ; before <- paste0("^", before, "$") } if (useAfter) { CheckChoice(after, names(data)) ; after <- paste0("^", after, "$") } if (useBefore) { newPlace <- grep(before, names(data)) ; if (length(newPlace) > 1) { stop("Your before argument matched with more than one column name. Do you have duplicate column names?!") }} if (useAfter) { newPlace <- grep(after, names(data)) ; if (length(newPlace) > 1) { stop("Your after argument matched with more than one column name. Do you have duplicate column names?!") }} if (useBefore) place <- newPlace if (useAfter) place <- newPlace + 1 } data[, colName] <- colData currentPlace <- length(names(data)) if (place == 1) { colOrder <- c(currentPlace, 1:(currentPlace - 1)) } else if (place == currentPlace) { colOrder <- 1:currentPlace } else { firstHalf <- 1:(place - 1) secondHalf <- place:(currentPlace - 1) colOrder <- c(firstHalf, currentPlace, secondHalf) } data <- subset(data, select = colOrder) if (dClass[1] == "data.table") data <- as.data.table(data) return(data) }
CheckChoice <- function(names, dataNames, firstWord = "Oops", warn = FALSE) { for (name in names) { if (warn == TRUE) { if(!(name %in% dataNames)) { warning(paste0(firstWord, "! The column/value/argument, ", name, ", was not valid OR not in your data! Check your input! This is a warning message of that!")) } } if (warn == FALSE) { if(!(name %in% dataNames)) { stop(paste0(firstWord, "! The column/value/argument, " , name, ", was not valid OR not in your data! Check your input!")) } } } }
> dataset <- data.frame(c1 = 1:5, c2 = 2:6, c3=3:7, c4=4:8, c5=5:9) > dataset c1 c2 c3 c4 c5 1 1 2 3 4 5 2 2 3 4 5 6 3 3 4 5 6 7 4 4 5 6 7 8 5 5 6 7 8 9
> dataset$c2b <- 10:14 > dataset c1 c2 c3 c4 c5 c2b 1 1 2 3 4 5 10 2 2 3 4 5 6 11 3 3 4 5 6 7 12 4 4 5 6 7 8 13 5 5 6 7 8 9 14
> dataset <- dataset[,c(1:2, 6, 3:5)] > dataset c1 c2 c2b c3 c4 c5 1 1 2 10 3 4 5 2 2 3 11 4 5 6 3 3 4 12 5 6 7 4 4 5 13 6 7 8 5 5 6 14 7 8 9
insertaCols<-function(dad){ nueva<-as.data.frame(matrix(rep(0,nrow(daf)*ncol(daf)*2 ),ncol=ncol(daf)*2)) for(k in 1:ncol(daf)){ nueva[,(k*2)-1]=daf[,k] colnames(nueva)[(k*2)-1]=colnames(daf)[k] } return(nueva) }
data1 <- data.frame(col1=1:4, col2=5:8, col3=9:12) row.names(data1) <- c("row1","row2","row3","row4") data1 data2 <- data.frame(col1=21:24, col2=25:28, col3=29:32) row.names(data2) <- c("row1","row2","row3","row4") data2 insertPosition = 2 leftBlock <- unlist(data1[,1:(insertPosition-1)]) insertBlock <- unlist(data2[,1:length(data2[1,])]) rightBlock <- unlist(data1[,insertPosition:length(data1[1,])]) newData <- matrix(c(leftBlock, insertBlock, rightBlock), nrow=length(data1[,1]), byrow=FALSE) newData
df <- data.frame(a=1:4, b=5:8, c=9:12) df[ df <- df[,c(
tmp <- data[, 1:3] tmp$example <- NA data <- cbind(tmp, data[, 4:5]
systems <- read.table("http: header=TRUE, sep=",", row.names=NULL)
tblFun <- function(x){ tbl <- table(x) res <- cbind(tbl,round(prop.table(tbl)*100,2)) colnames(res) <- c( res } do.call(rbind,lapply(df,tblFun))
Agree 413 77.34 Disagree 27 5.06 Dont know 16 3.00 Agree 505 94.57 Disagree 13 2.43 Dont know 0 0.00
> outcome.df%>% + group_by(Hospital,State)%>% + arrange(desc(HeartAttackDeath,na.rm=TRUE))%>% + head() Source: local data frame [6 x 5] Groups: Hospital, State
outcome.df %>% na.omit() %>% group_by(Hospital, State) %>% arrange(desc(HeartAttackDeath)) %>% head()
outcome.df %>% filter(!is.na(HeartAttackDeath)) %>% group_by(Hospital, State) %>% arrange(desc(HeartAttackDeath)) %>% head()
outcome.df %>% filter(complete.cases(.)) %>% group_by(Hospital, State) %>% arrange(desc(HeartAttackDeath)) %>% head()
testVect <- structure(c("11.2.0.3.0", "12.89", "12.71"), .Names = c("db_version", "elapsed_time", "cpu_time"))
testDF <- data.frame("db_version"="11.2.0.3.0","elapsed_time"=12.89,"cpu_time"=12.71) head(testDF) db_version elapsed_time cpu_time 1 11.2.0.3.0 12.89 12.71
data.frame(keyName=names(testVect), value=testVect, row.names=NULL) tibble::enframe(testVect) stack(testVect)
test.vector <- as.data.frame(t(testVect)) class(test.vector)
library(ggplot2) diamond.data <- diamonds[sample(nrow(diamonds), 1000), ] plot <- ggplot(diamond.data, aes(carat, price, colour = clarity, shape = cut)) + geom_point() + opts(legend.position = "top", legend.box = "horizontal") plot plot + labs(colour = "A", shape = "B") plot + labs(colour = "Clarity", shape = "Cut")
plot <- ggplot(diamond.data, aes(carat, price, colour = clarity, shape = cut)) + geom_point() + opts(legend.position = "top") plot + guides(colour = guide_legend(order = 1), shape = guide_legend(order = 2))
plot + guides(colour = guide_legend(order = 2), shape = guide_legend(order = 1))
library(knitr) library(tools) names(vignetteEngine(package =
library(knitr) render_html() source("hooks.R") inFile = commandArgs(trailingOnly=TRUE)[1] outFile = commandArgs(trailingOnly=TRUE)[2] knit(inFile,output=outFile)
env=Environment() bld = Builder(action = suffix= src_suffix= env.Append(BUILDERS = { env.Knit(source=
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getScriptPath <- function(){ cmd.args <- commandArgs() m <- regexpr("(?<=^--file=).+", cmd.args, perl=TRUE) script.dir <- dirname(regmatches(cmd.args, m)) if(length(script.dir) == 0) stop("can if(length(script.dir) > 1) stop("can return(script.dir) }
> system.file("ui", "demo.ui", package="RGtk2") [1] "C:/opt/R/library/RGtk2/ui/demo.ui" >
z.csd <- function() { if (!is.null(res <- .thisfile_source())) res else if (!is.null(res <- .thisfile_rscript())) dirname(res) else dirname(rstudioapi::getActiveDocumentContext()$path) } .thisfile_source <- function() { for (i in -(1:sys.nframe())) { if (identical(sys.function(i), base::source)) return (normalizePath(sys.frame(i)$ofile)) } NULL } .thisfile_rscript <- function() { cmdArgs <- commandArgs(trailingOnly = FALSE) cmdArgsTrailing <- commandArgs(trailingOnly = TRUE) cmdArgs <- cmdArgs[seq.int(from=1, length.out=length(cmdArgs) - length(cmdArgsTrailing))] res <- gsub("^(?:--file=(.*)|.*)$", "\\1", cmdArgs) res <- tail(res[res != ""], 1) if (length(res) > 0) return (res) NULL }
OS<-Sys.info() win<-length(grep("Windows",OS)) lin<-length(grep("Linux",OS)) if(lin==1){ file_path<-system("find / -name data_directory<-gsub( } if(win==1){ file_path<-shell( file_path<-file_path[4] file_path<-gsub(" Directory of ","",file_path) filepath<-gsub("\\\\","/",file_path) data_directory<-file_path } setwd(data_directory)
x <- c(1:20, 1:20) variable <- c(rep("y1", 20), rep("y2", 20) ) value <- c(rnorm(20), rnorm(20,.5) ) df <- data.frame(x, variable, value ) d <- ggplot(df, aes(x=x, y=value, group=variable, colour=variable ) ) + geom_line(size=2) d
Name Height Weight Mary 65 110 John 70 200 Jane 64 115 …
sum(as.numeric(JuneData1$Account.Balance), na.rm = TRUE)
> a<-data.frame(c(1,2,3,4),c(4,3,2,1)) > a<-a[-3,] > a c.1..2..3..4. c.4..3..2..1. 1 1 4 2 2 3 4 4 1 > a[4,1]<-1 > a Error in data.frame(c.1..2..3..4. = c("1", "2", "4", "1"), c.4..3..2..1. = c(" 4", : duplicate row.names: 4
> x <- 1:10 > 1:length(x) [1] 1 2 3 4 5 6 7 8 9 10 > seq_along(x) [1] 1 2 3 4 5 6 7 8 9 10
> x <- NULL > seq_along(x) integer(0) > 1:length(x) [1] 1 0
> for(i in 1:length(x)) print(i) [1] 1 [1] 0 > for(i in seq_along(x)) print(i) >
R> X <- matrix(1:4,2) R> X [,1] [,2] [1,] 1 3 [2,] 2 4 R> class(X) [1] "matrix" R> X[,1] [1] 1 2 R> class(X[,1]) [1] "integer" R> X[,1, drop=FALSE] [,1] [1,] 1 [2,] 2 R> class(X[,1, drop=FALSE]) [1] "matrix" R>
> x <- c(NA,NaN,Inf) > is.na(x) [1] TRUE TRUE FALSE > is.nan(x) [1] FALSE TRUE FALSE > is.infinite(x) [1] FALSE FALSE TRUE
> x <- c(1,1,2,NA) > 1 + NA [1] NA > sum(x) [1] NA > mean(x) [1] NA
> TRUE && NA [1] NA > FALSE && NA [1] FALSE > TRUE || NA [1] TRUE > FALSE || NA [1] NA
> any(c(TRUE, NA)) [1] TRUE > any(c(FALSE, NA)) [1] NA > all(c(TRUE, NA)) [1] NA
R> length(strptime("2009-10-07 20:21:22", "%Y-%m-%d %H:%M:%S")) [1] 9 R> length(as.POSIXct(strptime("2009-10-07 20:21:22", "%Y-%m-%d %H:%M:%S"))) [1] 1 R>
1^NA 1L^NA (1+0i)^NA 0L %/% 0L 0 %/% 0 4L %/% 0L 4 %/% 0
x <- sample(c(0,1,NA), 100, T) T <- 0:10 mean(x, na.rm=T) plot(rnorm(7), axes=T)
data1 <- read.table(file_name, blank.lines.skip = F, sep = ",")
> all.equal(1,1) [1] TRUE > all.equal(1:10, 1:5) [1] "Numeric: lengths (10, 5) differ" > all.equal(1:10, c(1:5,1:5)) [1] "Mean relative difference: 0.625"
if (!isTRUE(all.equal(x, y, tolerance=doubleErrorRate))) { ... }
R> nchar(factor(letters)) [1] 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
R> nchar(factor(letters)) Error in nchar(factor(letters)) : R> is.vector(factor(letters)) [1] FALSE
> class(quote(3.14)) [1] "numeric" > class(quote(+3.14)) [1] "call" > class(quote(-3.14)) [1] "call"
R> kk=vector(mode="numeric",length=0) R> kk numeric(0) R> sum(kk) [1] 0 R> var(kk) [1] NA
df1 <- data.frame(foo=1:10, foobar=10:1) df2 <- data.frame(foobar=10:1) df1$foo df2$foo df1[["foo"]] df2[["foo"]]
x1 <- structure(1, foo=1:10, foobar=10:1) x2 <- structure(2, foobar=10:1) attr(x1, "foo") attr(x2, "foo") attr(x1, "foo", exact=TRUE) attr(x2, "foo", exact=TRUE)
x <- list("foo", 1:3, letters, LETTERS) x[[2]] <- 1:5 x[[2]] <- NULL x[2] <- NULL x[2] <- list(NULL) x <- 1:10 x[[2]] <- NULL x <- x[-2]
x <- list(a=1:3, b=list(c=42, d=13, e="HELLO"), f= x[[c(2,3)]] x[c(2,3)]
> df = data.frame(a = c("europe", "asia", "oceania"), b = c(1, 2, 3)) > df$a[1:2, drop = TRUE] [1] europe asia Levels: asia europe <---- drops factor levels, works fine > df[1:2,, drop = TRUE]$a [1] europe asia Levels: asia europe oceania <---- does not drops factor levels!
R> all.numbers <- c(1:5) R> all.numbers [1] 1 2 3 4 5 R> good.idxs <- c(T,F,T) R> R> good.numbers <- all.numbers[good.idxs] R> good.numbers [1] 1 3 4 R> R> R>
function f1() v1 = 1; v2 = f2(); fprintf( function r1 = f2() r1 = v1 + 1 % nested function scope end end
f1 <- function() { f2 <- function() { v1 + 1 } v1 <- 1 v2 = f2() print(sprintf("2 == %d", v2)) }
multi_dim_array = array(runif(96 * 48 * 6 * 100, -50, 50), dim = c(96, 48, 6, 100)) > str(multi_dim_array) num [1:96, 1:48, 1:6, 1:100] 42.4 16 32.3 49.5 24.9 ...
> str(apply(multi_dim_array, 4, mean)) num [1:100] -0.0113 -0.0329 -0.3424 -0.3595 -0.0801 ... > str(apply(multi_dim_array, c(1,2), mean)) num [1:96, 1:48] -1.506 0.4553 -1.7951 0.0703 0.2915 ... > str(apply(multi_dim_array, c(1,2,3), mean)) num [1:96, 1:48, 1:6] -3.839 -3.672 0.131 -1.024 -2.143 ... > str(apply(multi_dim_array, c(3,4), mean)) num [1:6, 1:100] -0.4436 -0.3026 -0.3158 0.0902 0.2438 ...
ordered <- d[order(d$x, decreasing = TRUE), ] splits <- split(ordered, ordered$grp) heads <- lapply(splits, head) do.call(rbind, heads)
d %>% arrange_(~ desc(x)) %>% group_by_(~ grp) %>% head(n = 5)
d %>% arrange_(~ desc(x)) %>% group_by_(~ grp) %>% top_n(n = 5)
set.seed(123) d <- data.frame( x = runif(90), grp = gl(3, 30)) d %>% group_by(grp) %>% top_n(n = 5, wt = x)
library(data.table) setorder(setDT(d), -x)[, head(.SD, 5), keyby = grp]
setorder(setDT(d), grp, -x)[, head(.SD, 5), by = grp]
setorder(setDT(d), grp, -x)[, indx := seq_len(.N), by = grp][indx <= 5]
set.seed(123) d <- data.frame( x = runif(1e6), grp = sample(1e4, 1e6, TRUE)) library(dplyr) library(microbenchmark) library(data.table) dd <- copy(d) microbenchmark( top_n = {d %>% group_by(grp) %>% top_n(n = 5, wt = x)}, dohead = {d %>% arrange_(~ desc(x)) %>% group_by_(~ grp) %>% do(head(., n = 5))}, slice = {d %>% arrange_(~ desc(x)) %>% group_by_(~ grp) %>% slice(1:5)}, filter = {d %>% arrange(desc(x)) %>% group_by(grp) %>% filter(row_number() <= 5L)}, data.table1 = setorder(setDT(dd), -x)[, head(.SD, 5L), keyby = grp], data.table2 = setorder(setDT(dd), grp, -x)[, head(.SD, 5L), grp], data.table3 = setorder(setDT(dd), grp, -x)[, indx := seq_len(.N), grp][indx <= 5L], times = 10, unit = "relative" )
set.seed(123L) d <- data.frame( x = runif(1e8), grp = sample(1e4, 1e8, TRUE)) setDT(d) setorder(d, grp, -x) dd <- copy(d) library(microbenchmark) microbenchmark( data.table3 = d[, indx := seq_len(.N), grp][indx <= 5L], data.table4 = dd[dd[, .I[seq_len(.N) <= 5L], grp]$V1], times = 10L )
Unit: milliseconds expr min lq mean median uq max neval data.table3 826.2148 865.6334 950.1380 902.1689 1006.1237 1260.129 10 data.table4 729.3229 783.7000 859.2084 823.1635 966.8239 1014.397 10
d %>% arrange_(~ desc(x)) %>% group_by_(~ grp) %>% do(head(., n = 5))
d %>% arrange_(~ desc(x)) %>% group_by_(~ grp) %>% slice(1:5)
ordered <- d[order(d$x, decreasing = TRUE), ] ordered[ave(d$x, d$grp, FUN = seq_along) <= 5L,]
d %>% arrange(desc(x)) %>% group_by(grp) %>% filter(row_number() <= 5L)
set.seed(123) d <- data.frame( x = runif(1e6), grp = sample(1e4, 1e6, TRUE)) library(microbenchmark) microbenchmark( top_n = {d %>% group_by(grp) %>% top_n(n = 5, wt = x)}, dohead = {d %>% arrange_(~ desc(x)) %>% group_by_(~ grp) %>% do(head(., n = 5))}, slice = {d %>% arrange_(~ desc(x)) %>% group_by_(~ grp) %>% slice(1:5)}, filter = {d %>% arrange(desc(x)) %>% group_by(grp) %>% filter(row_number() <= 5L)}, times = 10, unit = "relative" ) Unit: relative expr min lq median uq max neval top_n 1.042735 1.075366 1.082113 1.085072 1.000846 10 dohead 18.663825 19.342854 19.511495 19.840377 17.433518 10 slice 1.000000 1.000000 1.000000 1.000000 1.000000 10 filter 1.048556 1.044113 1.042184 1.180474 1.053378 10
set.seed(123) d <- data.frame( x = runif(90), grp = gl(3, 30)) d %>% mutate(rn = row_number()) %>% group_by(grp) %>% top_n(n = 1, wt = rn)
> aggregate(B ~ A, mydf, sum) A B 1 1 5 2 2 3 3 3 11
> library(data.table) > DT <- data.table(mydf) > DT[, sum(B), by = A] A V1 1: 1 5 2: 2 3 3: 3 11
require(dplyr) df <- data.frame(A = c(1, 1, 2, 3, 3), B = c(2, 3, 3, 5, 6)) df %>% group_by(A) %>% summarise(B = sum(B))
> DF <- data.frame(A = c("1", "1", "2", "3", "3"), B = c(2, 3, 3, 5, 6)) > library(plyr) > DF.sum <- ddply(DF, c("A"), summarize, B = sum(B)) > DF.sum A B 1 1 5 2 2 3 3 3 11
require(reshape2) T <- melt(df, id = c("A")) T <- dcast(T, A ~ variable, sum)
library(ggplot2) df <- data.frame(x=1:10, y=rnorm(10)) p1 <- ggplot(df, aes(x,y)) + geom_point() plist <- list(p1,p1,p1,p1,p1)
library(gridExtra) n <- length(plist) nCol <- floor(sqrt(n)) do.call("grid.arrange", c(plist, ncol=nCol))
library(ggplot2) library(gridExtra) df <- data.frame(x=1:10, y=rnorm(10)) p1 <- ggplot(df, aes(x,y)) + geom_point() plist <- list(p1,p1,p1,p1,p1) grid.arrange(grobs = plist, ncol = 2) ggsave(file = OutFileName, arrangeGrob(grobs = plist, ncol = 2))
library(ggplot2) library(patchwork) df <- data.frame(x=1:10, y=rnorm(10)) p1 <- ggplot(df, aes(x,y)) + geom_point() plist <- list(p1,p1,p1,p1,p1) wrap_plots(plist)
plist <- list(p1,p1,p1,p1,p1,p1,p1,p1,p1,p1,p1,p1,p1) wrap_plots(plist)
x = length(plots) cols = round(sqrt(x),0) rows = ceiling(x/cols)
ggarrange(plotlist = plots, ncol=cols, nrow = rows)
newDF <- DF %>% select(one_column) %>% mutate(z_score_data = one_column - (mean(one_column) / sd(one_column))
library(dplyr) iris %>% mutate_each(funs(mysum = sum(.)), -Species) %>% head()
iris %>% mutate_each(funs(sum), -Species) %>% head()
iris %>% mutate_each(funs(sum), -Species) %>% head()
iris %>% mutate_each(funs(mysum = sum(.)), -Species) %>% head()
iris %>% mutate_each(funs(sum), SLsum = Sepal.Length,SWsum = Sepal.Width, -Species) %>% head()
vars <- names(iris)[1:2] vars <- setNames(vars, paste0(vars, "_sum")) iris %>% mutate_each_(funs(sum), vars) %>% head
iris %>% mutate_each_(funs(sum), vars) %>% select(-one_of(vars)) %>% head
iris %>% mutate_each(funs(sum, mean), -Species) %>% head()
iris %>% mutate_each(funs(MySum = sum(.), MyMean = mean(.)), -Species) %>% head()
iris %>% mutate_each(funs(sum), Sepal.Length, -Species) %>% head()
iris %>% mutate_each(funs(sum), contains("Sepal"), -Species) %>% head()
x <- c("Sepal.Width", "Sepal.Length") iris %>% mutate_each_(funs(sum), x) %>% head()
iris %>% mutate_at(.cols=vars(-Species), .funs=funs(mysum = sum(.))) %>% head() Sepal.Length Sepal.Width Petal.Length Petal.Width Species Sepal.Length_mysum Sepal.Width_mysum 1 5.1 3.5 1.4 0.2 setosa 876.5 458.6 2 4.9 3.0 1.4 0.2 setosa 876.5 458.6 3 4.7 3.2 1.3 0.2 setosa 876.5 458.6 4 4.6 3.1 1.5 0.2 setosa 876.5 458.6 5 5.0 3.6 1.4 0.2 setosa 876.5 458.6 6 5.4 3.9 1.7 0.4 setosa 876.5 458.6 Petal.Length_mysum Petal.Width_mysum 1 563.7 179.9 2 563.7 179.9 3 563.7 179.9 4 563.7 179.9 5 563.7 179.9 6 563.7 179.9
vars_to_process=c("Petal.Length","Petal.Width") iris %>% mutate_at(.cols=vars_to_process, .funs=funs(mysum = sum(.))) %>% head() Sepal.Length Sepal.Width Petal.Length Petal.Width Species Petal.Length_mysum Petal.Width_mysum 1 5.1 3.5 1.4 0.2 setosa 563.7 179.9 2 4.9 3.0 1.4 0.2 setosa 563.7 179.9 3 4.7 3.2 1.3 0.2 setosa 563.7 179.9 4 4.6 3.1 1.5 0.2 setosa 563.7 179.9 5 5.0 3.6 1.4 0.2 setosa 563.7 179.9 6 5.4 3.9 1.7 0.4 setosa 563.7 179.9
iris %>% mutate_at(.vars=vars(-Species), .funs=funs(mysum = sum(.))) %>% head()
iris %>% mutate_at(.vars=vars(Sepal.Width), .funs=funs(mysum = sum(.))) %>% head()
iris %>% mutate_at(.vars=vars("Sepal.Width"), .funs=funs(mysum = sum(.))) %>% head()
setwd("c:/kalle/R") stuckey <- read.csv("C:/kalle/R/stuckey.csv") point <- stuckey$PTS time <- stuckey$MP
point <- as.numeric(as.character(point)) time <- as.numeric(as.character(time))
stuckey <- read.csv2("C:/kalle/R/stuckey.csv", header=TRUE, sep=";", dec=",")
data.frame(id=c(1,1,3),id2=c(1,1,4),somevalue=c("x","y","z")) id id2 somevalue 1 1 x 1 1 y 3 4 z
dat <- data.frame(id=c(1,1,3),id2=c(1,1,4),somevalue=c("x","y","z")) > dat[!duplicated(dat[,c( id id2 somevalue 1 1 1 x 3 3 4 z
dat <- data.frame(id=c(1,1,3),id2=c(1,1,4),somevalue=c("x","y","z")) dat[row.names(unique(dat[,c("id", "id2")])),]
library(dplyr) df %>% distinct(id, id2, .keep_all = TRUE) df %>% group_by(id, id2) %>% filter(row_number() == 1) df %>% group_by(id, id2) %>% slice(1)
dat <- data.frame(id=c(1,1,3), id2=c(1,1,4) ,somevalue=c("x","y","z")) dat[row.names(unique(dat[,c("id", "id2")])), c("id", "id2")]
> str(data) $ Ozone : int 41 36 12 18 NA 28 23 19 8 NA ... $ Solar.R: int 190 118 149 313 NA NA 299 99 19 194 ... $ Wind : num 7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ... $ Temp : int 67 72 74 62 56 66 65 59 61 69 ... $ Month : int 5 5 5 5 5 5 5 5 5 5 ... $ Day : int 1 2 3 4 5 6 7 8 9 10 ...
library(dplyr) by_species <- iris %>% group_by(Species) by_species %>% summarise_each(funs(mean(., na.rm = TRUE)))
require(dplyr) iris %>% group_by(Species) %>% summarise_all(funs(mean, max, sd), na.rm = TRUE)
plot(1:10) p <- recordPlot() plot.new() p library(gridGraphics) library(grid) grid.echo() a <- grid.grab() grid.newpage() a <- editGrob(a, vp=viewport(width=unit(2,"in")), gp=gpar(fontsize=10)) grid.draw(a)
z1<-rbeta(10000,5,5) z2<-rbeta(10000,20,20) plotit<-function(vector,alpha,beta){ plot(density(vector),xlim=c(0,1)) abline(v=alpha/(alpha+beta),lty="longdash") }
z.plot1<-function(){plotit(z1,5,5)} z.plot2<-function(){plotit(z2,20,20)}
V1 V2 V3 V4 1 1 2 3 5 2 2 4 4 1 3 1 4 1 1 4 4 5 1 3 5 5 5 5 4
if (V1==1 & V2!=4){ V5 <- 1 } else if (V2==4 & V3!=1){ V5 <- 2 } else { V5 <- 0 }
myfile <- mutate(myfile, if (V1==1 & V2!=4){V5 = 1} else if (V2==4 & V3!=1){V5 = 2} else {V5 = 0})
V1 V2 V3 V4 V5 1 1 2 3 5 1 2 2 4 4 1 2 3 1 4 1 1 0 4 4 5 1 3 0 5 5 5 5 4 0
myfile %>% mutate(V5 = (V1 == 1 & V2 != 4) + 2 * (V2 == 4 & V3 != 1))
V1 V2 V3 V4 V5 1 1 2 3 5 1 2 2 4 4 1 2 3 1 4 1 1 0 4 4 5 1 3 0 5 5 5 5 4 0
myfile %>% mutate(V5 = ifelse(V1 == 1 & V2 != 4, 1, ifelse(V2 == 4 & V3 != 1, 2, 0)))
V1 V2 V3 V4 V5 1 1 2 3 5 1 2 2 4 4 1 2 3 1 4 1 1 0 4 4 5 1 3 0 5 5 5 5 4 0
myfile <- structure(list(V1 = c(1L, 2L, 1L, 4L, 5L), V2 = c(2L, 4L, 4L, 5L, 5L), V3 = c(3L, 4L, 1L, 1L, 5L), V4 = c(5L, 1L, 1L, 3L, 4L )), .Names = c("V1", "V2", "V3", "V4"), class = "data.frame", row.names = c("1", "2", "3", "4", "5"))
myfile %>% mutate(V5 = case_when(V1 == 1 & V2 != 4 ~ 1, V2 == 4 & V3 != 1 ~ 2, TRUE ~ 0))
x=read.table( text="V1 V2 V3 V4 1 1 2 3 5 2 2 4 4 1 3 1 4 1 1 4 4 5 1 3 5 5 5 5 4") x$V5 = case_when(x$V1==1 & x$V2!=4 ~ 1, x$V2==4 & x$V3!=1 ~ 2, TRUE ~ 0)
x = x %>% mutate( V5 = case_when( V1==1 & V2!=4 ~ 1, V2==4 & V3!=1 ~ 2, TRUE ~ 0 ) )
library(mosaic) myfile <- mutate(myfile, V5 = derivedFactor( "1" = (V1==1 & V2!=4), "2" = (V2==4 & V3!=1), .method = "first", .default = 0 ))
install.packages("extrafont");library(extrafont) font_import("Trebuchet MS") library(ggplot2) qplot(1:10)+theme(text=element_text(family="Trebuchet MS"))
theme_min = function (size=10, font=NA, face= panelColor=backgroundColor, axisColor= gridColor=gridLinesColor, textColor= { theme_text = function(...) ggplot2::theme_text(family=font, face=face, colour=textColor, size=size, ...) opts( axis.text.x = theme_text(), axis.text.y = theme_text(), axis.line = theme_blank(), axis.ticks = theme_segment(colour=axisColor, size=0.25), panel.border = theme_rect(colour=backgroundColor), legend.background = theme_blank(), legend.key = theme_blank(), legend.key.size = unit(1.5, legend.text = theme_text(hjust=0), legend.title = theme_text(hjust=0), panel.background = theme_rect(fill=panelColor, colour=NA), panel.grid.major = theme_line(colour=gridColor, size=0.33), panel.grid.minor = theme_blank(), strip.background = theme_rect(fill=NA, colour=NA), strip.text.x = theme_text(hjust=0), strip.text.y = theme_text(angle=-90), plot.title = theme_text(hjust=0), plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), } windowsFonts(F = windowsFont( + theme_min(font=
dummy <- data.frame(A = rnorm(10), B = rnorm(10)) ggplot(dummy, aes(x = A, y = B)) + geom_point() ggplot(dummy, aes(x = A, y = B)) + geom_point() + opts(axis.title.x = theme_text(family = "sans", face = "bold")) ggplot(dummy, aes(x = A, y = B)) + geom_point() + opts(axis.title.x = theme_text(family = "serif", face = "bold")) ggplot(dummy, aes(x = A, y = B)) + geom_point() + opts(axis.title.x = theme_text(family = "mono", face = "bold"))
theme_set( theme_bw( base_family= "serif")) theme_update( panel.grid.minor= theme_blank(), panel.grid.major= theme_blank(), panel.background= theme_blank(), axis.title.x= theme_blank(), axis.text.x= theme_text( family= "serif", angle= 90, hjust= 1 ), axis.text.x= theme_text( family= "serif"), axis.title.y= theme_blank()) theme_map <- theme_get() theme_set( theme_bw())
> grid.gedit("GRID.text",gp=gpar(fontfamily="mono")) Error in editDLfromGPath(gPath, specs, strict, grep, global, redraw) :
df <- data.frame(A = rnorm(10), B = rnorm(10)) p = ggplot(data = df, aes(x = A, y = B)) + geom_point() p = p + xlab("A long x-string so we can see the effect of the font switch") p = p + ylab("Likewise up the ordinate")
label = "Now we switch to Optima" subtitle = "Optima is a nice font: https:
p + theme(text = element_text(family = "Optima", , face = "bold")) p = p + ggtitle(label = label, subtitle = subtitle) p
>PRICE DATE CLOSE 1 20070103 54.700 2 20070104 54.770 3 20070105 55.120 4 20070108 54.870 5 20070109 54.860 6 20070110 54.270 7 20070111 54.770 8 20070112 55.360 9 20070115 55.760 ...
PRICE <- structure(list( DATE = c(20070103L, 20070104L, 20070105L, 20070108L, 20070109L, 20070110L, 20070111L, 20070112L, 20070115L), CLOSE = c(54.7, 54.77, 55.12, 54.87, 54.86, 54.27, 54.77, 55.36, 55.76)), .Names = c("DATE", "CLOSE"), class = "data.frame", row.names = c("1", "2", "3", "4", "5", "6", "7", "8", "9")) library(PerformanceAnalytics) PRICE$DATE <- as.Date(as.character(PRICE$DATE),format="%Y%m%d") x <- xts(PRICE$CLOSE,PRICE$DATE) CalmarRatio(Return.calculate(x))
pricez <- read.zoo(text=" DATE CLOSE 1 20070103 54.700 2 20070104 54.770 3 20070105 55.120 4 20070108 54.870 5 20070109 54.860 6 20070110 54.270 7 20070111 54.770 8 20070112 55.360 9 20070115 55.760 ") index(pricez) <- as.Date(as.character(index(pricez)), format="%Y%m%d") pricez 2007-01-03 2007-01-04 2007-01-05 2007-01-08 2007-01-09 2007-01-10 2007-01-11 2007-01-12 2007-01-15 54.70 54.77 55.12 54.87 54.86 54.27 54.77 55.36 55.76
library(tidyquant) price_tbl <- c("FB", "AMZN", "NFLX", "GOOG") %>% tq_get(get = "stock.prices", from = "2010-01-01", to = "2016-12-31") price_tbl return_tbl <- price_tbl %>% group_by(symbol) %>% tq_transmute(ohlc_fun = Ad, mutate_fun = periodReturn, period = "daily") return_tbl return_tbl %>% tq_performance(Ra = daily.returns, performance_fun = CalmarRatio)
library(dplyr) library(tidyr) library(reshape2) dt <- expand.grid(Year = 1990:2014, Product=LETTERS[1:8], Country = paste0(LETTERS, "I")) %>% select(Product, Country, Year) dt$value <- rnorm(nrow(dt))
sdt <- dt %>% filter((Product == "A" & Country == "AI") | (Product == "B" & Country =="EI"))
library(dplyr) library(tidyr) sdt %>% mutate(Prod_Count=paste(Product, Country, sep="_")) %>% select(-Product, -Country)%>% spread(Prod_Count, value)%>% head(2)
sdt%>% unite(Prod_Count, Product,Country) %>% spread(Prod_Count, value)%>% head(2)
dependencies: logical indicating to also install uninstalled packages which these packages depend on/link to/import/suggest (and so on recursively). Not used if ‘repos = NULL’. Can also be a character vector, a subset of ‘c("Depends", "Imports", "LinkingTo", "Suggests", "Enhances")’. Only supported if ‘lib’ is of length one (or missing), so it is unambiguous where to install the dependent packages. If this is not the case it is ignored, with a warning. The default, ‘NA’, means ‘c("Depends", "Imports", "LinkingTo")’. ‘TRUE’ means (as from R 2.15.0) to use ‘c("Depends", "Imports", "LinkingTo", "Suggests")’ for ‘pkgs’ and ‘c("Depends", "Imports", "LinkingTo")’ for added dependencies: this installs all the packages needed to run ‘pkgs’, their examples, tests and vignettes (if the package author specified them correctly).
> dates <- read.csv("http: > head(dates) YM Date Year Month 1 2008-Apr 2008-04-01 2008 4 2 2009-Apr 2009-04-01 2009 4 3 2009-Apr 2009-04-01 2009 4 4 2009-Apr 2009-04-01 2009 4 5 2009-Apr 2009-04-01 2009 4 6 2009-Apr 2009-04-01 2009 4
library(ggplot2) library(scales) dates$converted <- as.Date(dates$Date, format="%Y-%m-%d") ggplot(dates, aes(x=converted)) + geom_histogram() + opts(axis.text.x = theme_text(angle=90))
ggplot(dates, aes(x=converted)) + geom_histogram() + scale_x_date(labels=date_format("%Y-%b"), + breaks = "1 month") + opts(axis.text.x = theme_text(angle=90)) stat_bin: binwidth defaulted to range/30. Use
library(ggplot2) library(scales) dates <- read.csv("http:
freqs <- aggregate(dates$Date, by=list(dates$Date), FUN=length) freqs$names <- as.Date(freqs$Group.1, format="%Y-%m-%d") ggplot(freqs, aes(x=names, y=x)) + geom_bar(stat="identity") + scale_x_date(breaks="1 month", labels=date_format("%Y-%b"), limits=c(as.Date("2008-04-30"),as.Date("2012-04-01"))) + ylab("Frequency") + xlab("Year and Month") + theme_bw() + opts(axis.text.x = theme_text(angle=90))
dates$Date <- as.Date(dates$Date) ggplot(dates, aes(x=Date)) + geom_histogram(binwidth=30, colour="white") + scale_x_date(labels = date_format("%Y-%b"), breaks = seq(min(dates$Date)-5, max(dates$Date)+5, 30), limits = c(as.Date("2008-05-01"), as.Date("2012-04-01"))) + ylab("Frequency") + xlab("Year and Month") + theme_bw() + opts(axis.text.x = theme_text(angle=90))
library("ggplot2") library("scales") dates <- read.csv("http: dates$Date <- as.Date(dates$Date) dates$num <- as.numeric(dates$Date) bin <- 60 p <- ggplot(dates, aes(num, ..count..)) p <- p + geom_histogram(binwidth = bin, colour="white") p <- p + scale_x_date(breaks = seq(min(dates$num)-20, max(dates$num), bin), labels = date_format("%Y-%b"), limits = c(as.Date("2009-01-01"), as.Date("2011-12-01"))) p <- p + theme_bw() + xlab(NULL) + opts(axis.text.x = theme_text(angle=45, hjust = 1, vjust = 1)) p
library("ggplot2") library("scales") dates <- read.csv("http: dates$Date <- as.POSIXct(dates$Date) p <- ggplot(dates, aes(Date, ..count..)) + geom_histogram() + theme_bw() + xlab(NULL) + scale_x_datetime(breaks = date_breaks("3 months"), labels = date_format("%Y-%b"), limits = c(as.POSIXct("2009-01-01"), as.POSIXct("2011-12-01")) ) p
require(ggplot2) require(scales) require(lubridate) years=sample(seq(2008,2012),681,replace=TRUE,prob=c(0.0176211453744493,0.302496328928047,0.323054331864905,0.237885462555066,0.118942731277533)) months=sample(seq(1,12),681,replace=TRUE) my.dates=as.Date(paste(years,months,01,sep="-")) df=data.frame(YM=strftime(my.dates, format="%Y-%b"),Date=my.dates,Year=years,Month=months) df=df[do.call(order, df[c("Date")]), ] df$Count=1 freqs=aggregate(Count ~ Year + Month, data=df, FUN=length) freqs$Date=as.Date(paste(freqs$Year,freqs$Month,"01",sep="-")) g<-ggplot(data=freqs,aes(x=Date,y=Count))+ geom_bar(stat="identity") + scale_x_date(labels=date_format("%Y-%b"),breaks="2 months") + theme_bw() + opts(axis.text.x = theme_text(angle=90)) print(g) dev.new() freqs$Month.name=month(freqs$Date,label=TRUE, abbr=TRUE) g2<-ggplot(data=freqs,aes(x=Month.name,y=Count))+ geom_bar(stat="identity") + facet_grid(Year~.) + theme_bw() print(g2)
set.seed <- 103 df <- data.frame( id = 1:10 , nas = rep( NA , 10 ) , vals = sample( c( 1:3 , NA ) , 10 , repl = TRUE ) ) df df[ , ! apply( df , 2 , function(x) all(is.na(x)) ) ]
> df <- data.frame( id = 1:10 , nas = rep( NA , 10 ) , vals = sample( c( 1:3 , NA ) , 10 , repl = TRUE ) ) > df %>% glimpse() Observations: 10 Variables: 3 $ id <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 $ nas <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA $ vals <int> NA, 1, 1, NA, 1, 1, 1, 2, 3, NA > df %>% select_if(~!all(is.na(.))) id vals 1 1 NA 2 2 1 3 3 1 4 4 NA 5 5 1 6 6 1 7 7 1 8 8 2 9 9 3 10 10 NA
trim <- function (x) gsub("^\\s+|\\s+$", "", x) news_corpus <- Corpus(VectorSource(news_raw$text)) corpus_clean <- tm_map(news_corpus, tolower) corpus_clean <- tm_map(corpus_clean, removeNumbers) corpus_clean <- tm_map(corpus_clean, removeWords, stopwords( corpus_clean <- tm_map(corpus_clean, removePunctuation) corpus_clean <- tm_map(corpus_clean, stripWhitespace) corpus_clean <- tm_map(corpus_clean, trim) news_dtm <- DocumentTermMatrix(corpus_clean)
[[153]] [1] obama holds technical school model us [[154]] [1] oil boom produces jobs bonanza archaeologists [[155]] [1] islamic terrorist group expands territory captures tikrit [[156]] [1] republicans democrats feel eric cantors loss [[157]] [1] tea party candidates try build cantor loss [[158]] [1] vehicles materials stored delaware bridges [[159]] [1] hill testimony hagel defends bergdahl trade [[160]] [1] tweet selfpropagates tweetdeck [[161]] [1] blackwater guards face trial iraq shootings [[162]] [1] calif man among soldiers killed afghanistan [[163]] [1] stocks fall back world bank cuts growth outlook [[164]] [1] jabhat alnusra longer useful turkey [[165]] [1] catholic bishops keep focus abortion marriage [[166]] [1] barbra streisand visits hill heart disease [[167]] [1] rand paul cantors loss reason stop talking immigration [[168]] [1] israeli airstrike kills northern gaza
type,text neutral,The week in 32 photos neutral,Look at me! 22 selfies of the week neutral,Inside rebel tunnels in Homs neutral,Voices from Ukraine neutral,Water dries up ahead of World Cup positive,Who neutral,Anderson Cooper: Here positive,"At fire scene, she rescues the pet" neutral,Hunger in the land of plenty positive,Helping women escape neutral,A tour of the sex underworld neutral,Miss Universe Thailand steps down neutral,China negative,More held over Pakistan stoning neutral,Watch landmark Cold War series neutral,In photos: History of the Cold War neutral,Turtle predicts World Cup winner neutral,What devoured great white? positive,Nun wins Italy neutral,Bride Price app sparks debate neutral,China to deport negative,Lightning hits moving car neutral,Singer won neutral,Poland neutral,When monarchs retire negative,Murder on Street View? positive,Meet armless table tennis champ neutral,Incredible 400 year-old globes positive,Man saves falling baby neutral,World
> news_dtm <- DocumentTermMatrix(corpus_clean) Error: inherits(doc, "TextDocument") is not TRUE > traceback() 9: stop(sprintf(ngettext(length(r), "%s is not TRUE", "%s are not all TRUE"), ch), call. = FALSE, domain = NA) 8: stopifnot(inherits(doc, "TextDocument"), is.list(control)) 7: FUN(X[[1L]], ...) 6: lapply(X, FUN, ...) 5: mclapply(unname(content(x)), termFreq, control) 4: TermDocumentMatrix.VCorpus(x, control) 3: TermDocumentMatrix(x, control) 2: t(TermDocumentMatrix(x, control)) 1: DocumentTermMatrix(corpus_clean)
corpus_clean <- tm_map(news_corpus, content_transformer(tolower))
corpus_clean <- tm_map(corpus_clean, PlainTextDocument)
getwd() require(tm) files <- DirSource(directory="texts/", encoding="latin1") corpus <- VCorpus(x=files) summary(corpus) corpus <- tm_map(corpus,removePunctuation) corpus <- tm_map(corpus,stripWhitespace) corpus <- tm_map(corpus,removePunctuation); matrix_terms <- DocumentTermMatrix(corpus)
getwd() require(tm) files <- DirSource(directory="texts/", encoding="latin1") corpus <- VCorpus(x=files) summary(corpus) corpus <- tm_map(corpus,content_transformer(removePunctuation)) corpus <- tm_map(corpus,content_transformer(stripWhitespace)) corpus <- tm_map(corpus,content_transformer(removePunctuation)) corpus <- Corpus(VectorSource(corpus)) matrix_term <- DocumentTermMatrix(corpus)
corpus_clean <- tm_map(news_corpus, content_transformer(tolower))
remove.packages(tm) install.packages("http: library(tm)
setClass("MyClass", representation( name="character" )) instance1 <-new("MyClass",name="Hello1") instance2 <-new("MyClass",name="Hello2") array = c(instance1,instance2) instance1 array instance1@name="World!" instance1 array
> instance1 An object of class “MyClass” Slot "name": [1] "World!" > array [[1]] An object of class “MyClass” Slot "name": [1] "Hello1" [[2]] An object of class “MyClass” Slot "name": [1] "Hello2"
> instance1 An object of class “MyClass” Slot "name": [1] "World!" > array [[1]] An object of class “MyClass” Slot "name": [1] "World!" [[2]] An object of class “MyClass” Slot "name": [1] "Hello2"
> v = matrix(1:12, nrow=4) > v [,1] [,2] [,3] [1,] 1 5 9 [2,] 2 6 10 [3,] 3 7 11 [4,] 4 8 12 > v1 = v > v1[,1] [1] 1 2 3 4
n <- 10^7 bigdf <- data.frame( x=runif(n), y=rnorm(n), z=rt(n,5) ) myfunc <- function(dat) invisible(with( dat, x^2+mean(y)+sqrt(exp(z)) )) myfunc2 <- function(dat) { x <- with( dat, x^2+mean(y)+sqrt(exp(z)) ) invisible(x) } myfunc3 <- function(dat) { dat[1,1] <- 0 invisible( with( dat, x^2+mean(y)+sqrt(exp(z)) ) ) } tracemem(bigdf) > myfunc(bigdf) > > myfunc2(bigdf) > > myfunc3(bigdf) tracemem[0x6e430228 -> 0x6b75fca0]: myfunc3 tracemem[0x6b75fca0 -> 0x6e4306f0]: [<-.data.frame [<- myfunc3 tracemem[0x6e4306f0 -> 0x6e4304f8]: [<-.data.frame [<- myfunc3 > > library(microbenchmark) > microbenchmark(myfunc(bigdf), myfunc2(bigdf), myfunc3(bigdf), times=5) Unit: milliseconds expr min lq median uq max 1 myfunc2(bigdf) 617.8176 641.7673 644.3764 683.6099 698.1078 2 myfunc3(bigdf) 1052.1128 1134.0822 1196.2832 1202.5492 1206.5925 3 myfunc(bigdf) 598.9407 622.9457 627.9598 642.2727 654.8786
setRefClass("MyClass", fields=list( name="character" ) ) instance1 <- new("MyClass",name="Hello1") instance2 <- new("MyClass",name="Hello2") array = c(instance1,instance2) instance1$name <- "World!"
> instance1 Reference class object of class "MyClass" Field "name": [1] "World!" > array [[1]] Reference class object of class "MyClass" Field "name": [1] "World!" [[2]] Reference class object of class "MyClass" Field "name": [1] "Hello2"
byRef <- function(..., envir=parent.frame(), inherits=TRUE) { cl <- match.call(expand.dots = TRUE) cl[c(1, match(c("envir", "inherits"), names(cl), 0L))] <- NULL for (x in as.list(cl)) { s <- substitute(x) sx <- do.call(substitute, list(s), envir=envir) dx <- deparse(sx) expr <- substitute(assign(dx, s, envir=parent.frame(), inherits=inherits)) do.call(on.exit, list(expr, add=TRUE), envir=envir) } }
f <- function(z1, z2, z3) { byRef(z1, z3) z1 <- z1 + 1 z2 <- z2 + 2 z3 <- z3 + 3 c(z1, z2, z3) } x1 <- 10 x2 <- 20 x3 <- 30 print(f(x1, x2, x3)) print(c(x1, x2, x3))
testFrame <- data.frame(First=sample(1:10, 20, replace=T), Second=sample(1:20, 20, replace=T), Third=sample(1:10, 20, replace=T), Fourth=rep(c("Alice","Bob","Charlie","David"), 5), Fifth=rep(c("Edward","Frank","Georgia","Hank","Isaac"),4))
model.matrix(~ First + Second + Third + Fourth + Fifth, data=testFrame)
model.matrix(~ Fourth + Fifth, data=testFrame, contrasts.arg=list(Fourth=contrasts(testFrame$Fourth, contrasts=F), Fifth=contrasts(testFrame$Fifth, contrasts=F)))
model.matrix(~ Fourth + Fifth, data=testFrame, contrasts.arg=list(Fourth=diag(nlevels(testFrame$Fourth)), Fifth=diag(nlevels(testFrame$Fifth))))
> lapply(testFrame[,4:5], contrasts, contrasts = FALSE) $Fourth Alice Bob Charlie David Alice 1 0 0 0 Bob 0 1 0 0 Charlie 0 0 1 0 David 0 0 0 1 $Fifth Edward Frank Georgia Hank Isaac Edward 1 0 0 0 0 Frank 0 1 0 0 0 Georgia 0 0 1 0 0 Hank 0 0 0 1 0 Isaac 0 0 0 0 1
model.matrix(~ ., data=testFrame, contrasts.arg = lapply(testFrame[,4:5], contrasts, contrasts=FALSE))
colnames(testFrame2) "First" "Second" "Third" "Fourth.Alice" "Fourth.Bob" "Fourth.Charlie" "Fourth.David" "Fifth.Edward" "Fifth.Frank" "Fifth.Georgia" "Fifth.Hank" "Fifth.Isaac"
X.factors = model.matrix( ~ ., data=X, contrasts.arg = lapply(data.frame(X[,sapply(data.frame(X), is.factor)]), contrasts, contrasts = FALSE))
attr(X.factors,"assign") [1] 0 1 **2** 2 **3** 3 3 **4** 4 4 5 6 7 8 9 10
att = attr(X.factors,"assign") factor.columns = unique(att[duplicated(att)]) unwanted.columns = match(factor.columns,att) X.factors = X.factors[,-unwanted.columns] X.factors = (data.matrix(X.factors))
library(CatEncoders) testFrame <- data.frame(First=sample(1:10, 20, replace=T), Second=sample(1:20, 20, replace=T), Third=sample(1:10, 20, replace=T), Fourth=rep(c("Alice","Bob","Charlie","David"), 5), Fifth=rep(c("Edward","Frank","Georgia","Hank","Isaac"),4)) fit <- OneHotEncoder.fit(testFrame) z <- transform(fit,testFrame,sparse=TRUE) z <- transform(fit,testFrame,sparse=FALSE)
model.matrix(~ First + Second + Third + Fourth + Fifth - 1, data=testFrame)
model.matrix(~ First + Second + Third + Fourth + Fifth + 0, data=testFrame)
> require( > > build.x(First ~ Second + Fourth + Fifth, data = testFrame, contrasts = FALSE) > > > build.x(First ~ Second + Fourth + Fifth, data = testFrame, contrasts = c(Fourth = FALSE, Fifth = TRUE))
output=NULL for(i in 1:length(z)) output=rbind(output,matrix(z[[i]],ncol=10,byrow=T))
output <- matrix(unlist(z), ncol = 10, byrow = TRUE)
output <- do.call(rbind,lapply(z,matrix,ncol=10,byrow=TRUE))
n <- 1000 z <- replicate(n,matrix(1:110,ncol=10,byrow=TRUE),simplify=FALSE) library(rbenchmark) origfn <- function(z) { output <- NULL for(i in 1:length(z)) output<- rbind(output,matrix(z[[i]],ncol=10,byrow=TRUE)) } rbindfn <- function(z) do.call(rbind,lapply(z,matrix,ncol=10,byrow=TRUE)) unlistfn <- function(z) matrix(unlist(z), ncol = 10, byrow = TRUE)
output <- matrix(unlist(z), ncol = 10, byrow = TRUE)
> fac <- factor(c("1","2","1","2")) > as.numeric(as.character(fac)) [1] 1 2 1 2
library(data.table) set.seed(1) dt <- data.table(site = sample(1:6, 50, replace=T), space = sample(1:4, 50, replace=T), measure = sample(c( replace=T), qty = round(runif(50) * 30), qty.exit = 0, delta.watts = sample(10.5:100.5, 50, replace=T), cf = runif(50)) dt <- dt[measure == `:=`(qty.exit = qty, cf = 0, delta.watts = 13)]
mutate_cond <- function(.data, condition, ..., envir = parent.frame()) { condition <- eval(substitute(condition), .data, envir) .data[condition, ] <- .data[condition, ] %>% mutate(...) .data } DF %>% mutate_cond(measure ==
mutate_last <- function(.data, ...) { n <- n_groups(.data) indices <- attr(.data, "indices")[[n]] + 1 .data[indices, ] <- .data[indices, ] %>% mutate(...) .data } DF %>% group_by(is.exit = measure == mutate_last(qty.exit = qty, cf = 0, delta.watts = 13) %>% ungroup() %>% select(-is.exit)
library(dplyr) DF %>% mutate(is.exit = measure == qty.exit = ifelse(is.exit, qty, qty.exit), cf = (!is.exit) * cf, delta.watts = replace(delta.watts, is.exit, 13)) %>% select(-is.exit)
library(sqldf) DF %>% do(sqldf(c("update set where measure = "select * from
set.seed(1) DF <- data.frame(site = sample(1:6, 50, replace=T), space = sample(1:4, 50, replace=T), measure = sample(c( replace=T), qty = round(runif(50) * 30), qty.exit = 0, delta.watts = sample(10.5:100.5, 50, replace=T), cf = runif(50))
library(dplyr) library(magrittr) dt[dt$measure=="exit",] %<>% mutate(qty.exit = qty, cf = 0, delta.watts = 13)
mutate_when <- function(data, ...) { dots <- eval(substitute(alist(...))) for (i in seq(1, length(dots), by = 2)) { condition <- eval(dots[[i]], envir = data) mutations <- eval(dots[[i + 1]], envir = data[condition, , drop = FALSE]) data[condition, names(mutations)] <- mutations } data }
mtcars %>% mutate_when( mpg > 22, list(cyl = 100), disp == 160, list(cyl = 200) )
dt.sub <- dt[dt$measure == "exit",] %>% mutate(qty.exit= qty, cf= 0, delta.watts= 13) dt.new <- rbind(dt.sub, dt[dt$measure != "exit",])
library(data.table) library(dplyr) library(microbenchmark) microbenchmark(dt= {dt <- dt[measure == `:=`(qty.exit = qty, cf = 0, delta.watts = 13)]}, eipi10= {dt[dt$measure=="exit",] %<>% mutate(qty.exit = qty, cf = 0, delta.watts = 13)}, alex= {dt.sub <- dt[dt$measure == "exit",] %>% mutate(qty.exit= qty, cf= 0, delta.watts= 13) dt.new <- rbind(dt.sub, dt[dt$measure != "exit",])}) Unit: microseconds expr min lq mean median uq max neval cld dt 591.480 672.2565 747.0771 743.341 780.973 1837.539 100 a eipi10 3481.212 3677.1685 4008.0314 3796.909 3936.796 6857.509 100 b alex 3412.029 3637.6350 3867.0649 3726.204 3936.985 5424.427 100 b
mutate_cond <- function(.data, condition, ..., new_init = NA, envir = parent.frame()) { new_vars <- substitute(list(...))[-1] new_vars %<>% sapply(deparse) %>% names %>% setdiff(names(.data)) .data[, new_vars] <- new_init condition <- eval(substitute(condition), .data, envir) .data[condition, ] <- .data %>% filter(condition) %>% mutate(...) .data }
iris %>% mutate_cond(Species == "setosa", Petal.Length = 88)
iris %>% mutate_cond(Species == "setosa", Petal.Length = 88, x = TRUE)
iris %>% mutate_cond(Species == "setosa", Petal.Length = 88, x = TRUE, new_init = FALSE)
iris %>% mutate_cond(Species == "setosa" & Sepal.Length < 5, x = TRUE, y = Sepal.Length ^ 2, new_init = list(FALSE, NA))
mutate_cond <- function(.data, condition, ..., envir = parent.frame()) { condition <- eval(substitute(condition), .data, envir) condition[is.na(condition)] = FALSE .data[condition, ] <- .data[condition, ] %>% mutate(...) .data }
mutate_rows <- function(.data, .p, ...) { .p <- rlang::enquo(.p) .p_lgl <- rlang::eval_tidy(.p, .data) .data[.p_lgl, ] <- .data[.p_lgl, ] %>% mutate(...) .data } dt %>% mutate_rows(measure == "exit", qty.exit = qty, cf = 0, delta.watts = 13)
library(data.table) library(dplyr) library(tidyr) library(purrr) set.seed(1) dt <- data.table(site = sample(1:6, 50, replace=T), space = sample(1:4, 50, replace=T), measure = sample(c( replace=T), qty = round(runif(50) * 30), qty.exit = 0, delta.watts = sample(10.5:100.5, 50, replace=T), cf = runif(50)) dt2 <- dt %>% nest(-measure) %>% mutate(data = if_else( measure == "exit", map(data, function(x) mutate(x, qty.exit = qty, cf = 0, delta.watts = 13)), data )) %>% unnest()
dt %>% within(qty.exit[measure == delta.watts[measure ==
library(tidyverse) df1 %>% split(.,.$measure == "exit") %>% modify_at("TRUE",~mutate(.,qty.exit = qty, cf = 0, delta.watts = 13)) %>% bind_rows()
df <- data.frame(site = sample(1:6, 50, replace=T), space = sample(1:4, 50, replace=T), measure = sample(c( replace=T), qty = round(runif(50) * 30), qty.exit = 0, delta.watts = sample(10.5:100.5, 50, replace=T), cf = runif(50), stringsAsFactors = F)
df %>% mutate( qty.exit = replace( qty.exit, measure == cf = replace( cf, measure == delta.watts = replace( delta.watts, measure ==
index.v <- which( df$measure == df %>% mutate( qty.exit = replace( qty.exit, index.v, qty[ index.v] ), cf = replace( cf, index.v, 0 ), delta.watts = replace( delta.watts, index.v, 13 ) )
tmpfun <- function(a,b,...) { print(as.list(match.call())) print(as.list(match.call(expand.dots=FALSE))) } > tmpfun(a=1, b=2, c=3, d=4) [[1]] tmpfun $a [1] 1 $b [1] 2 $c [1] 3 $d [1] 4 [[1]] tmpfun $a [1] 1 $b [1] 2 $... $...$c [1] 3 $...$d [1] 4
tempf <- function(a, b = 2, ...) { argg <- c(as.list(environment()), list(...)) print(argg) } tempf(1, c = 3) $a [1] 1 $b [1] 2 $c [1] 3
> args(lm) function (formula, data, subset, weights, na.action, method = "qr", model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE, contrasts = NULL, offset, ...) NULL
allargs <- function(orig_values = FALSE) { parent_formals <- formals(sys.function(sys.parent(n = 1))) fnames <- names(parent_formals) fnames <- fnames[-which(fnames == args <- evalq(as.list(environment()), envir = parent.frame()) args <- c(args[fnames], evalq(list(...), envir = parent.frame())) if(orig_values) { defargs <- as.list(parent_formals) defargs <- defargs[unlist(lapply(defargs, FUN = function(x) class(x) != "name"))] args[names(defargs)] <- defargs setargs <- evalq(as.list(match.call())[-1], envir = parent.frame()) args[names(setargs)] <- setargs } return(args) } tempf <- function(a, b = 2, ...) { d <- 5 b <- 3 cat("Currently set values defined in call or formals\n") print(allargs()) cat("Values as defined at the time of the call\n") print(allargs(T)) } tempf(1, c = 3) Currently set values defined in call or formals $a [1] 1 $b [1] 3 $c [1] 3 Values as defined at the time of the call $a [1] 1 $b [1] 2 $c [1] 3
library(dplyr); library(tidyr) set.seed(10) dat <- data_frame( Person = rep(c("greg", "sally", "sue"), each=2), Time = rep(c("Pre", "Post"), 3), Score1 = round(rnorm(6, mean = 80, sd=4), 0), Score2 = round(jitter(Score1, 15), 0), Score3 = 5 + (Score1 + Score2)/2 )
Person Pre.Score1 Pre.Score2 Pre.Score3 Post.Score1 Post.Score2 Post.Score3 1 greg 80 78 84.0 79 80 84.5 2 sally 75 74 79.5 78 78 83.0 3 sue 81 78 84.5 82 81 86.5
spread(dat %>% select(Person, Time, Score1), Time, Score1) %>% rename(Score1_Pre = Pre, Score1_Post = Post)
dat %>% gather(temp, score, starts_with("Score")) %>% unite(temp1, Time, temp, sep = ".") %>% spread(temp1, score)
library(reshape2) dcast(melt(dat), Person ~ Time + variable)
Using Person, Time as id variables Person Post_Score1 Post_Score2 Post_Score3 Pre_Score1 Pre_Score2 Pre_Score3 1 greg 79 78 83.5 83 81 87.0 2 sally 82 81 86.5 75 74 79.5 3 sue 78 78 83.0 82 79 85.5
library(data.table) dcast(setDT(dat), Person~Time, value.var=paste0("Score", 1:3))
library(dplyr) df=data.frame( x1=c(1,0,0,NA,0,1,1,NA,0,1), x2=c(1,1,NA,1,1,0,NA,NA,0,1), x3=c(0,1,0,1,1,0,NA,NA,0,1), x4=c(1,0,NA,1,0,0,NA,0,0,1), x5=c(1,1,NA,1,1,1,NA,1,0,1)) > df x1 x2 x3 x4 x5 1 1 1 0 1 1 2 0 1 1 0 1 3 0 NA 0 NA NA 4 NA 1 1 1 1 5 0 1 1 0 1 6 1 0 0 0 1 7 1 NA NA NA NA 8 NA NA NA 0 1 9 0 0 0 0 0 10 1 1 1 1 1
df <- df %>% mutate(sumrow= x1 + x2 + x3 + x4 + x5)
df %>% replace(is.na(.), 0) %>% summarise_all(funs(sum))
df %>% replace(is.na(.), 0) %>% mutate(sum = rowSums(.[1:5]))
df <- df %>% mutate(sum1 = rowSums(.[grep("x[3-5]", names(.))], na.rm = TRUE), sum_all = rowSums(.[grep("x", names(.))], na.rm = TRUE))
library(dplyr) df=data.frame( x1=c(1,0,0,NA,0,1,1,NA,0,1), x2=c(1,1,NA,1,1,0,NA,NA,0,1), x3=c(0,1,0,1,1,0,NA,NA,0,1), x4=c(1,0,NA,1,0,0,NA,0,0,1), x5=c(1,1,NA,1,1,1,NA,1,0,1)) df %>% select(x3:x5) %>% rowSums(na.rm=TRUE) -> df$x3x5.total head(df)
library(tidyverse) df=data.frame( x1=c(1,0,0,NA,0,1,1,NA,0,1), x2=c(1,1,NA,1,1,0,NA,NA,0,1), x3=c(0,1,0,1,1,0,NA,NA,0,1), x4=c(1,0,NA,1,0,0,NA,0,0,1), x5=c(1,1,NA,1,1,1,NA,1,0,1)) df %>% mutate(sum = select(., x1:x5) %>% apply(1, sum, na.rm=TRUE))
df <- df %>% mutate( id = 1:n() ) df <- df %>% group_by(id) %>% gather( summarise( Key.Sum = sum(value) ) %>% left_join( df, . )
library(RODBC) dbhandle <- odbcDriverConnect( res <- sqlQuery(dbhandle,
library(RODBC) channel <- odbcDriverConnect("driver=SQL Server;server=01wh155073") initdata<- sqlQuery(channel,paste("select * from test_DB .. test_vikrant")) dim(initdata) odbcClose(channel)
library(devtools) install_github("martinkabe/RSQLS") library(RSQLS) cs <- set_connString("LAPTOP-USER\\SQLEXPRESS", "Database_Name") push_data(cs, dataFrame, "dbo.TableName", append = TRUE, showprogress = TRUE) df <- pull_data(cs, "SELECT * FROM dbo.TableName", showprogress = TRUE)
library(RODBC) myconn <-odbcConnect("MyDSN", uid="***", pwd="*******") fetchData<- sqlQuery(myconn, "select * from tableName") View(fetchData) close(myconn)
X = data.table(x = c(1,1,1,2,2,5,6), y = 1:7, key = "x") Y = data.table(x = c(2,6), z = letters[2:1], key = "x")
a <-c("S1","S2","S3","S4","S5","S6","S7","S8","S9") b <-c(0.23,0.26,0.55,0.56,0.36,0.23,0.18,0.06,0.04) c <-c(0.64,0.6,0.81,1.4,0.89,0.55,0.48,0.22,0.09) d <-c(0.20,0.23,0.52,0.53,0.33,0.20,0.15,0.04,0.03) e <-c(0.26,0.29,0.58,.59,0.39,0.26,0.21,0.08,0.05) f <-c(0.67,0.63,0.86,1.44,0.93,0.59,0.51,0.25,0.10) g <-c(0.61,0.57,0.78,1.36,0.85,0.53,0.45,0.19,0.08) h <-c(0.41,0.34,0.26,0.84,0.53,0.32,0.30,0.16,0.05) data <- data.frame(a,b,c,d,e,f,g,h) ggplot(data=data,aes(a)) + geom_bar(stat="identity", aes(y=h),fill=" geom_line(aes(y=b,group=1),size=1.0,colour=" geom_point(aes(y=b),size=3, colour=" geom_errorbar(aes(ymin=d, ymax=e), colour=" geom_line(aes(y=c,group=1),size=1.0,colour=" geom_point(aes(y=c),size=3, colour=" geom_errorbar(aes(ymin=f, ymax=g), colour=" ylab("Symptom severity") + xlab("PHQ-9 symptoms") + ylim(0,1.6) + theme_bw() + theme(axis.title.x = element_text(size = 15, vjust=-.2)) + theme(axis.title.y = element_text(size = 15, vjust=0.3))
cols <- c("LINE1"=" ggplot(data=data,aes(x=a)) + geom_bar(stat="identity", aes(y=h, fill = "BAR"),colour=" geom_line(aes(y=b,group=1, colour="LINE1"),size=1.0) + geom_point(aes(y=b, colour="LINE1"),size=3) + geom_errorbar(aes(ymin=d, ymax=e, colour="LINE1"), width=0.1, size=.8) + geom_line(aes(y=c,group=1,colour="LINE2"),size=1.0) + geom_point(aes(y=c,colour="LINE2"),size=3) + geom_errorbar(aes(ymin=f, ymax=g,colour="LINE2"), width=0.1, size=.8) + scale_colour_manual(name="Error Bars",values=cols) + scale_fill_manual(name="Bar",values=cols) + ylab("Symptom severity") + xlab("PHQ-9 symptoms") + ylim(0,1.6) + theme_bw() + theme(axis.title.x = element_text(size = 15, vjust=-.2)) + theme(axis.title.y = element_text(size = 15, vjust=0.3))
ggplot(data=data,aes(x=a)) + geom_bar(stat="identity", aes(y=h,fill = "BAR", colour="BAR"))+ geom_line(aes(y=b,group=1, colour="LINE1"),size=1.0) + geom_point(aes(y=b, colour="LINE1", fill="LINE1"),size=3) + geom_errorbar(aes(ymin=d, ymax=e, colour="LINE1"), width=0.1, size=.8) + geom_line(aes(y=c,group=1,colour="LINE2"),size=1.0) + geom_point(aes(y=c,colour="LINE2", fill="LINE2"),size=3) + geom_errorbar(aes(ymin=f, ymax=g,colour="LINE2"), width=0.1, size=.8) + scale_colour_manual(name="Error Bars",values=cols, guide = guide_legend(fill = NULL,colour = NULL)) + scale_fill_manual(name="Bar",values=cols, guide="none") + ylab("Symptom severity") + xlab("PHQ-9 symptoms") + ylim(0,1.6) + theme_bw() + theme(axis.title.x = element_text(size = 15, vjust=-.2)) + theme(axis.title.y = element_text(size = 15, vjust=0.3))
ggplot(data=data,aes(x=a)) + geom_bar(stat="identity", aes(y=h,fill = "BAR", colour="BAR"))+ geom_line(aes(y=b,group=1, colour="LINE1"),size=1.0) + geom_point(aes(y=b, colour="LINE1", fill="LINE1"),size=3) + geom_errorbar(aes(ymin=d, ymax=e, colour="LINE1"), width=0.1, size=.8) + geom_line(aes(y=c,group=1,colour="LINE2"),size=1.0) + geom_point(aes(y=c,colour="LINE2", fill="LINE2"),size=3) + geom_errorbar(aes(ymin=f, ymax=g,colour="LINE2"), width=0.1, size=.8) + scale_colour_manual(name="Error Bars",values=cols, guide = guide_legend(override.aes=aes(fill=NA))) + scale_fill_manual(name="Bar",values=cols, guide="none") + ylab("Symptom severity") + xlab("PHQ-9 symptoms") + ylim(0,1.6) + theme_bw() + theme(axis.title.x = element_text(size = 15, vjust=-.2)) + theme(axis.title.y = element_text(size = 15, vjust=0.3))
cols <- c("LINE1"=" line_types <- c("LINE1"=1,"LINE2"=3) ggplot(data=data,aes(x=a)) + geom_bar(stat="identity", aes(y=h,fill = "BAR"))+ geom_line(aes(y=b,group=1, colour="LINE1", linetype="LINE1"),size=0.5) + geom_point(aes(y=b, colour="LINE1", fill="LINE1"),size=2) + geom_line(aes(y=c,group=1,colour="LINE2", linetype="LINE2"),size=0.5) + geom_point(aes(y=c,colour="LINE2", fill="LINE2"),size=2) + scale_colour_manual(name="Error Bars",values=cols, guide = guide_legend(override.aes=aes(fill=NA))) + scale_linetype_manual(values=line_types)+ scale_fill_manual(name="Bar",values=cols, guide="none") + ylab("Symptom severity") + xlab("PHQ-9 symptoms") + ylim(0,1.6) + theme_bw() + theme(axis.title.x = element_text(size = 15, vjust=-.2)) + theme(axis.title.y = element_text(size = 15, vjust=0.3))
scale_linetype_manual(name="Error Bars",values=line_types)
type size amount T 50% 48.4 F 50% 48.1 P 50% 46.8 T 100% 25.9 F 100% 26.0 P 100% 24.9 T 150% 21.1 F 150% 21.4 P 150% 20.1 T 200% 20.8 F 200% 21.5 P 200% 16.5
ggplot(temp, aes(type, amount , fill=type, group=type, shape=type, facets=size)) + geom_bar(width=0.5, position = position_dodge(width=0.6)) + facet_grid(.~size) + theme_bw() + scale_fill_manual(values = c("darkblue","steelblue1","steelblue4"), labels = c("T", "F", "P"))
temp$new = factor(temp$type, levels=c("T","F","P"), labels=c("T","F","P"))
mort3 <- structure(list(State = structure(c(8L, 9L, 11L, 12L, 4L, 2L, 6L, 13L, 3L, 5L, 7L, 10L, 14L, 15L, 1L, 16L, 8L, 9L, 11L, 12L, 4L, 2L, 6L, 13L, 3L, 5L, 7L, 10L, 14L, 15L, 1L, 16L, 8L, 9L, 11L, 12L, 4L, 2L, 6L, 13L, 3L, 5L, 7L, 10L, 14L, 15L, 1L, 16L, 8L, 9L, 11L, 12L, 4L, 2L, 6L, 13L, 3L, 5L, 7L, 10L, 14L, 15L, 1L, 16L, 8L, 9L, 11L, 12L, 4L, 2L, 6L, 13L, 3L, 5L, 7L, 10L, 14L, 15L, 1L, 16L, 8L, 9L, 11L, 12L, 4L, 2L, 6L, 13L, 3L, 5L, 7L, 10L, 14L, 15L, 1L, 16L, 8L, 9L, 11L, 12L, 4L, 2L, 6L, 13L, 3L, 5L, 7L, 10L, 14L, 15L, 1L, 16L, 8L, 9L, 11L, 12L, 4L, 2L, 6L, 13L, 3L, 5L, 7L, 10L, 14L, 15L, 1L, 16L, 8L, 9L, 11L, 12L, 4L, 2L, 6L, 13L, 3L, 5L, 7L, 10L, 14L, 15L, 1L, 16L, 8L, 9L, 11L, 12L, 4L, 2L, 6L, 13L, 3L, 5L, 7L, 10L, 14L, 15L, 1L, 16L, 8L, 9L, 11L, 12L, 4L, 2L, 6L, 13L, 3L, 5L, 7L, 10L, 14L, 15L, 1L, 16L, 8L, 9L, 11L, 12L, 4L, 2L, 6L, 13L, 3L, 5L, 7L, 10L, 14L, 15L, 1L, 16L, 8L, 9L, 11L, 12L, 4L, 2L, 6L, 13L, 3L, 5L, 7L, 10L, 14L, 15L, 1L, 16L), class = "factor", .Label = c("SH", "HH", "NI", "HB", "NW", "HE", "RP", "BW", "BY", "SL", "BE", "BB", "MV", "SN", "ST", "TH")), BCmort = c(16.5, 16.6, 15, 14.4, 13.5, 17.1, 15.8, 16.3, 18.3, 16.8, 17, 18.1, 13.1, 15.1, 18.8, 13.1, 16.4, 16.1, 15.8, 12.8, 16.3, 19.2, 16.8, 13, 17.9, 17, 19.4, 19.4, 13.1, 13.8, 18.1, 13.8, 15.9, 17.3, 17.5, 13.7, 17.4, 17.5, 16.7, 15.5, 18.1, 18, 20.1, 19.1, 11.8, 14.6, 18.2, 13.4, 16.8, 17.5, 15.6, 14.1, 13.9, 18.2, 17.1, 15.2, 18.1, 16.6, 19.3, 18.6, 13.1, 14.6, 19.6, 12.4, 16.6, 17.8, 17.5, 14.3, 20.5, 19.2, 19, 12.6, 19.5, 17.8, 19.2, 21, 14.4, 13.4, 19.8, 14, 17.5, 18.9, 16.4, 14.7, 17.7, 20.1, 18.5, 14.5, 19.1, 19.2, 20.1, 19.7, 14.2, 16.2, 17.9, 12.6, 18, 18.7, 17.7, 16.5, 16.6, 20.3, 18.1, 15.2, 19, 20, 19.8, 21.3, 13.8, 14.8, 20.4, 14.8, 18.2, 18.7, 16.9, 16.2, 20.2, 20.4, 18.5, 14, 20.2, 18.7, 20.3, 17.7, 14.4, 14.5, 21.7, 13.7, 18.3, 19.7, 17.8, 16.5, 20.2, 21.7, 18.8, 16.7, 20.4, 20, 19.6, 22.9, 15.2, 14.9, 21.7, 14.6, 18.3, 19.7, 17, 16.7, 22.9, 16.2, 19.6, 15.9, 20.3, 19.9, 18.9, 21.8, 14.9, 18, 21.4, 16.1, 19.6, 19.2, 19.1, 16.7, 20, 18.2, 20.5, 15.5, 20.5, 21.1, 21.3, 23.8, 15.8, 15.3, 21.3, 15.7, 19.6, 20.3, 19.2, 17.4, 18.1, 23.1, 20.6, 16.2, 21.5, 20.3, 21.4, 20.8, 16.1, 15.8, 22.1, 14.5, 20, 20.2, 19, 18.7, 23.1, 21.8, 19.4, 17.4, 20.9, 20.5, 20.4, 23.2, 16.3, 17.6, 23.1, 16.5), year = c(2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2006, 2006, 2006, 2006, 2006, 2006, 2006, 2006, 2006, 2006, 2006, 2006, 2006, 2006, 2006, 2006, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998), eastWest = structure(c(1L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 2L), .Label = c("west", "east"), class = "factor")), .Names = c("State", "BCmort", "year", "eastWest"), class = "data.frame", row.names = c(NA, -208L)) colVec<-c(brewer.pal(10,"Set3"),brewer.pal(6,"Set3")) ltyVec<-rep(c("solid","dashed"),c(10,6)) ggplot(mort3, aes(x = year, y = BCmort, col = State, lty = eastWest)) + geom_line(lwd = 1) + scale_linetype_manual(values = c(west = "solid", east = "dashed")) + scale_color_manual(values = c(brewer.pal(10, "Set3"), brewer.pal(6, "Set3"))) + opts(title = "BC mortality") xyplot(BCmort ~ year, data = mort3, groups = State, lty = ltyVec, type = "l", col = colVec, lwd = 2, key = list(lines = list(lty = ltyVec, col = colVec, lwd = 2), text = list(levels(mort3$State)), columns = 1, space = "right", title = "State"), grid = TRUE, main = "BC mortality")
ggplot(mort3, aes(x = year, y = BCmort, col = State, linetype = State)) + geom_line(lwd = 1) + scale_linetype_manual(values = c(rep("solid", 10), rep("dashed", 6))) + scale_color_manual(values = c(brewer.pal(10, "Set3"), brewer.pal(6, "Set3"))) + opts(title = "BC mortality") + theme_bw()
mod <- glm(y ~ x, data = foo, family = binomial) preddata <- with(foo, data.frame(x = seq(min(x), max(x), length = 100))) preds <- predict(mod, newdata = preddata, type = "link", se.fit = TRUE)
critval <- 1.96 upr <- preds$fit + (critval * preds$se.fit) lwr <- preds$fit - (critval * preds$se.fit) fit <- preds$fit
fit2 <- mod$family$linkinv(fit) upr2 <- mod$family$linkinv(upr) lwr2 <- mod$family$linkinv(lwr)
preddata$lwr <- lwr2 preddata$upr <- upr2 ggplot(data=foo, mapping=aes(x=x,y=y)) + geom_point() + stat_smooth(method="glm", method.args=list(family=binomial)) + geom_line(data=preddata, mapping=aes(x=x, y=upr), col="red") + geom_line(data=preddata, mapping=aes(x=x, y=lwr), col="red")
shinyUI(pageWithSidebar( headerPanel("Side by side comparison"), sidebarPanel( selectInput(inputId = "class", label = "Choose plan type:", list("Employee only" = "emp", "Employee and spouse" = "emp_spouse", "Employee and child" = "emp_child", "Employee and family" = "emp_fam")), sliderInput(inputId = "ind1", label = "Individual 1", min = 0, max = 20000, value = c(0, 2500), step = 250), sliderInput(inputId = "ind2", label = "Individual 2", min = 0, max = 20000, value = c(0, 2500), step = 250), sliderInput(inputId = "ind3", label = "Individual 3", min = 0, max = 20000, value = c(0, 2500), step = 250), sliderInput(inputId = "ind4", label = "Individual 4", min = 0, max = 20000, value = c(0, 2500), step = 250) ), mainPanel( tabsetPanel( tabPanel("Side by Side", plotOutput(outputId = "main_plot", width = "100%")), tabPanel("Summary", tableOutput(outputId = "summary")) ) )))
shinyServer(function(input, output) { output$sliders <- renderUI({ members <- as.integer(input$members) max_pred <- as.integer(input$max_pred) lapply(1:members, function(i) { sliderInput(inputId = paste0("ind", i), label = paste("Individual", i), min = 0, max = max_pred, value = c(0, 500), step = 100) }) }) })
expenses <- reactive({ members <- as.numeric(input$members) mins <- sapply(1:members, function(i) { as.numeric(input[[paste0("ind", i)]])[1] }) maxs <- sapply(1:members, function(i) { as.numeric(input[[paste0("ind", i)]])[2] }) expenses <- as.data.frame(cbind(mins, maxs)) })
best_case <- reactive({ expenses <- expenses() ... )}
[1] "class" "max_pred" "members" [1] "class" "ind1" "ind2" "max_pred" "members"
mins maxs 1 NA NA 2 NA NA mins maxs 1 0 500 2 0 500
ui.R ---- shinyUI( pageWithSideBar( ... selectInput("numIndividuals", ...) uiOutput("sliders"), ... ))
server.R -------- shinyServer( function(input, output, session) { output$sliders <- renderUI({ numIndividuals <- as.integer(input$numIndividuals) lapply(1:numIndividuals, function(i) { sliderInput(...) }) }) })
output$sliders <- renderUI({ members <- as.integer(input$members) max_pred <- as.integer(input$max_pred) lapply(1:members, function(i) { sliderInput(inputId = paste0("ind", i), label = paste("Individual", i), min = 0, max = max_pred, value = c(0, 500), step = 100) }) }) selectInput("num", "select number of inputs", choices = seq(1,10,1)) uiOutput("input_ui")
output$table <- renderTable({ num <- as.integer(input$num) data.frame(lapply(1:num, function(i) { input[[paste0("ind", i)]] })) }) tableOutput("table")
sel.input = selectInput(inputId = "class", label = "Choose plan type:", list("Employee only" = "emp", "Employee and spouse" = "emp_spouse", "Employee and child" = "emp_child", "Employee and family" = "emp_fam")) num.individuals = 5 inputs = c(list(sel.input), lapply(1:num.individuals, function(i) { sliderInput(inputId = paste0("ind", i), label = paste("Individual", i), min = 0, max = 20000, value = c(0, 2500), step = 250) })) sidebar.panel = do.call(sidebarPanel, inputs)
=== Two Column Layout === This slide has two columns *** ```{r, echo=FALSE} plot(cars) ```
=== Two Column Layout === left: 30% This slide has two columns *** ```{r, echo=FALSE} plot(cars) ```
--- output: ioslides_presentation --- This slide has two columns ```{r, echo=FALSE} plot(cars) ```
--- output: beamer_presentation --- Two Column Layout ------- \begin{columns} \begin{column}{0.48\textwidth} This slide has two columns \end{column} \begin{column}{0.48\textwidth} If I put any code in here I get an error, see https: \end{column} \end{columns}
<style> div break-before: column; } div break-after: column; } </style>
- sample evenly, randomly across (potentially many) uncertain parameters <p class="forceBreak"></p> ![](LHScrop.png) [User:Saittam, Wikipedia](https:
.forceBreak { -webkit-column-break-after: always; break-after: column; }
. . . `<div style="float: left; width: 50%;">` ``` {r, echo = FALSE, results = kable(cbind(A,B)) ``` `</div>` `<div style="float: right; width: 50%;">` ```{r, echo = TRUE, results = inner_join(A,B, by="C") ``` `</div>`
\def\begincols{\begin{columns}} \def\begincol{\begin{column}} \def\endcol{\end{column}} \def\endcols{\end{columns}}
--- output: beamer_presentation: includes: in_header: mystyle.tex --- Two Column Layout ------- \begincols \begincol{.48\textwidth} This slide has two columns. \endcol \begincol{.48\textwidth} ```{r} plot(cars) ``` \endcol \endcols
::: columns :::: column left :::: :::: column right ```{r your-chunk-name, echo=FALSE, fig.cap="your-caption-name"} knitr::include_graphics("your/figure/path/to/the-image.pdf") ``` :::: :::
server <- function(input, output) { } ui <- shinyUI(navbarPage("My Application", tabPanel("Component 1", sidebarLayout( sidebarPanel( ), mainPanel( tabsetPanel( tabPanel("Plot", plotOutput("plot") ), tabPanel("Summary", verbatimTextOutput("summary") ), tabPanel("Table", tableOutput("table") ) ) ) ) ), tabPanel("Component 2"), tabPanel("Component 3") )) shinyApp(ui = ui, server = server)
server <- function(input, output) { output$component1 <- renderUI({ sidebarLayout( sidebarPanel( ), mainPanel( tabsetPanel( tabPanel("Plot", plotOutput("plot")), tabPanel("Summary", verbatimTextOutput("summary")), tabPanel("Table", tableOutput("table")) ) ) ) }) } ui <- shinyUI(navbarPage("My Application", tabPanel("Component 1", uiOutput("component1")), tabPanel("Component 2"), tabPanel("Component 3") )) shinyApp(ui = ui, server = server)
dataTabUI <- function(id, input, output) { ns <- NS(id) tagList(sidebarLayout(sidebarPanel(input), mainPanel(dataTableOutput(output)))) } plotTabUI <- function(id, input, output) { ns <- NS(id) tagList(sidebarLayout(sidebarPanel(input), mainPanel(plotOutput(output)))) } dataTab <- function(input, output, session) { } csvFileInput <- function(id, label = "CSV file") { ns <- NS(id) tagList( fileInput(ns("file"), label), checkboxInput(ns("heading"), "Has heading"), selectInput( ns("quote"), "Quote", c( "None" = "", "Double quote" = "\"", "Single quote" = " ) ) ) } csvFile <- function(input, output, session, stringsAsFactors) { userFile <- reactive({ validate(need(input$file, message = FALSE)) input$file }) dataframe <- reactive({ read.csv( userFile()$datapath, header = input$heading, quote = input$quote, stringsAsFactors = stringsAsFactors ) }) observe({ msg <- sprintf("File %s was uploaded", userFile()$name) cat(msg, "\n") }) return(dataframe) } basicPlotUI <- function(id) { ns <- NS(id) uiOutput(ns("controls")) } basicPlot <- function(input, output, session, data) { output$controls <- renderUI({ ns <- session$ns selectInput(ns("col"), "Columns", names(data), multiple = TRUE) }) return(reactive({ validate(need(input$col, FALSE)) data[, input$col] })) } library(shiny) ui <- shinyUI(navbarPage( "My Application", tabPanel("File upload", dataTabUI( "tab1", csvFileInput("datafile", "User data (.csv format)"), "table" )), tabPanel("Plot", plotTabUI( "tab2", basicPlotUI("plot1"), "plotOutput" )) )) server <- function(input, output, session) { datafile <- callModule(csvFile, "datafile", stringsAsFactors = FALSE) output$table <- renderDataTable({ datafile() }) plotData <- callModule(basicPlot, "plot1", datafile()) output$plotOutput <- renderPlot({ plot(plotData()) }) } shinyApp(ui, server)
install.packages("ggplot2_0.9.1.tar.gz", repos=NULL)
install.packages(list.files(pattern="*.tar.gz"), repos=NULL)
library(tools) write_PACKAGES("/path/to/packages/")
setRefClass( "Observer", fields=list( .X="environment" ), methods=list( notify=function(uid, ...) { message(paste("Notifying subscribers of model uid: ", uid, sep="")) temp <- get(uid, .self$.X) if (length(temp$subscribers)) { sapply(temp$subscribers, function(x) { x$updateView() }) } return(TRUE) } ) )
setRefClass( "Model", fields=list( .X="data.frame", state="character", uid="character", observer="Observer" ), methods=list( initialize=function(...) { .self <- callSuper(...) .self$uid <- digest(c(.self, Sys.time())) .self$state <- digest(.self$.X) assign(.self$uid, list(state=.self$state), .self$observer$.X) .self }, multiply=function(x, ...) { .self$.X <- .X * x statechangeDetect() return(TRUE) }, publish=function(...) { message(paste("Publishing state change for model uid: ", .self$uid, sep="")) if (!exists(.self$uid, .self$observer$.X)) { assign(.self$uid, list(state=.self$state), .self$observer$.X) } else { temp <- get(.self$uid, envir=.self$observer$.X) temp$state <- .self$state assign(.self$uid, temp, .self$observer$.X) } .self$observer$notify(uid=.self$uid) return(TRUE) }, statechangeDetect=function(...) { out <- TRUE state <- digest(.self$.X) if (length(.self$state)) { out <- .self$state != state if (out) { .self$state <- state } } if (out) { message(paste("State change detected for model uid: ", .self$uid, sep="")) .self$publish() } return(out) } ) )
setRefClass( "Controller", fields=list( model="Model", views="list" ), methods=list( multiply=function(x, ...) { .self$model$multiply(x) }, subscribe=function(...) { uid <- .self$model$uid envir <- .self$model$observer$.X temp <- get(uid, envir) temp$subscribers <- c(temp$subscribers, .self) assign(uid, temp, envir) }, updateView=function(...) { sapply(.self$views, function(x) { x$display(.self$model) }) return(TRUE) } ) ) setRefClass( "View1", methods=list( display=function(model, x=1, y=2, ...) { plot(x=model$.X[,x], y=model$.X[,y]) } ) ) setRefClass( "View2", methods=list( display=function(model, ...) { print(model$.X) } ) )
setRefClass( "MyData", fields=list( .X="data.frame" ), methods=list( modelMake=function(...){ new("Model", .X=.self$.X) } ) )
mod <- x$modelMake() mod$.X > mod$uid [1] "fdf47649f4c25d99efe5d061b1655193" > mod$state [1] "6d95a520d4e3416bac93fbae88dfe02f" > ls(mod$observer$.X) [1] "fdf47649f4c25d99efe5d061b1655193" > get(mod$uid, mod$observer$.X) $state [1] "6d95a520d4e3416bac93fbae88dfe02f"
view1 <- new("View1") view2 <- new("View2") cont <- new("Controller", model=mod, views=list(view1, view2))
> cont$updateView() a b 1 1 10 2 2 11 3 3 12 [1] TRUE
> cont$model$multiply(x=10) State change detected for model uid: fdf47649f4c25d99efe5d061b1655193 Publishing state change for model uid: fdf47649f4c25d99efe5d061b1655193 Notifying subscribers of model uid: fdf47649f4c25d99efe5d061b1655193 a b 1 10 100 2 20 110 3 30 120 [1] TRUE
R> monnb <- function(d) { lt <- as.POSIXlt(as.Date(d, origin="1900-01-01")); \ lt$year*12 + lt$mon } R> mondf <- function(d1, d2) { monnb(d2) - monnb(d1) } R> mondf(as.Date("2008-01-01"), Sys.Date()) [1] 24 R>
R> mondf("2000-05-31", "2000-06-30") [1] 1 R> mondf(c("2002-03-31", "2002-04-30", "2002-05-31"), "2002-06-30") [1] 3 2 1 R>
elapsed_months <- function(end_date, start_date) { ed <- as.POSIXlt(end_date) sd <- as.POSIXlt(start_date) 12 * (ed$year - sd$year) + (ed$mon - sd$mon) }
>Sys.time() [1] "2014-10-29 15:45:44 CDT" >elapsed_months(Sys.time(), as.Date("2012-07-15")) [1] 27 >elapsed_months("2002-06-30", c("2002-03-31", "2002-04-30", "2002-05-31")) [1] 3 2 1
> elapsed_months("1791-01-10", "1776-07-01") [1] 174
> length(seq(from=Sys.Date(), to=as.Date("2020-12-31"), by=
MyMonths = months(StartDate, EndDate, EndMonthFlag)
library(lubridate) interval(mdy(10012015), today()) %/% months(1)
d1 <- as.Date("01 March 1950", "%d %B %Y") d2 <- as.Date(c("01 April 1955", "01 July 1980"), "%d %B %Y") round((d2 - d1)/(365.25/12))
as.Date.numeric <- function(x) structure(floor(x+.001), class = "Date") sapply(d2, function(d2) length(seq(d1, as.Date(d2), by = "month")))-1
mos<-function (begin, end) { mos1<-as.period(interval(ymd(begin),ymd(end))) mos<-mos1@year*12+mos1@month mos }
mob<-function (begin, end) { begin<-paste(substr(begin,1,6),"01",sep="") end<-paste(substr(end,1,6),"01",sep="") mob1<-as.period(interval(ymd(begin),ymd(end))) mob<-mob1@year*12+mob1@month mob }
mos(20150101,20150228) mos(20150131,20150228) mob(20150131,20150228) mob(20150131,20150228)
library(lubridate) date1 = "1 April 1977" date2 = "7 July 2017" date1 = dmy(date1) date2 = dmy(date2) number_of_months = (year(date1) - year(date2)) * 12 + month(date1) - month(date2)
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys KEYID
gpg --keyserver pgpkeys.mit.edu --recv-key 51716619E084DAB9 gpg -a --export 51716619E084DAB9 | sudo apt-key add -
sudo add-apt-repository ppa:webupd8team/y-ppa-manager sudo apt-get update sudo apt-get install y-ppa-manager
sudo apt-key adv --keyserver hkp: Executing: gpg --ignore-time-conflict --no-options --no-default-keyring --secret-keyring /etc/apt/secring.gpg --trustdb-name /etc/apt/trustdb.gpg --keyring /etc/apt/trusted.gpg --primary-keyring /etc/apt/trusted.gpg --keyserver hkp: gpg: requesting key 381BA480 from hkp server pgp.mit.edu gpg: key 381BA480: public key "Johannes Ranke (CRAN Debian archive) <jranke@uni-bremen.de>" imported gpg: no ultimately trusted keys found gpg: Total number processed: 1 gpg: imported: 1
gpg: requesting key E084DAB9 from hkp server pgp.mit.edu gpg: key E084DAB9: public key "Michael Rutter <marutter@gmail.com>" imported gpg: Total number processed: 1 gpg: imported: 1 (RSA: 1)
temp <- data.frame(name=letters[1:12], value=rnorm(12), quartile=rep(NA, 12)) temp temp.sorted <- temp[order(temp$value), ] temp.sorted$quartile <- rep(1:4, each=12/4) temp <- temp.sorted[order(as.numeric(rownames(temp.sorted))), ] temp
temp$quartile <- with(temp, cut(value, breaks=quantile(value, probs=seq(0,1, by=0.25), na.rm=TRUE), include.lowest=TRUE))
temp$quartile <- with(temp, factor( findInterval( val, c(-Inf, quantile(val, probs=c(0.25, .5, .75)), Inf) , na.rm=TRUE), labels=c("Q1","Q2","Q3","Q4") ))
temp$quartile <- factor(temp$quartile, levels=c("1","2","3","4") )
library(dplyr) temp$quartile <- ntile(temp$value, 4)
temp <- temp %>% mutate(quartile = ntile(value, 4))
set.seed(123) temp <- data.frame(name=letters[1:12], value=rnorm(12))
library(data.table) setDT(temp) temp[ , quartile := cut(value, breaks = quantile(value, probs = 0:4/4), labels = 1:4, right = FALSE)]
temp[ , quartile := as.factor(ifelse(value < quantile(value, .25), 1, ifelse(value < quantile(value, .5), 2, ifelse(value < quantile(value, .75), 3, 4))]
set.seed(123) temp <- data.frame(name=letters[1:12], value=rnorm(12), quartile=rep(NA, 12)) brks <- with(temp, quantile(value, probs = c(0, 0.25, 0.5, 0.75, 1))) temp <- within(temp, quartile <- cut(value, breaks = brks, labels = 1:4, include.lowest = TRUE))
> head(temp) name value quartile 1 a -0.56047565 1 2 b -0.23017749 2 3 c 1.55870831 4 4 d 0.07050839 2 5 e 0.12928774 3 6 f 1.71506499 4
library(data.table) setDT(temp) temp[order(value) , quartile := floor( 1 + 4 * (.I-1) / .N)]
library(microbenchmark) library(dplyr) set.seed(123) n <- 1e6 temp <- data.frame(name=sample(letters, size=n, replace=TRUE), value=rnorm(n)) setDT(temp) microbenchmark( "ntile" = temp[, quartile_ntile := ntile(value, 4)], "cut" = temp[, quartile_cut := cut(value, breaks = quantile(value, probs = seq(0, 1, by=1/4)), labels = 1:4, right=FALSE)], "dt_ntile" = temp[order(value), quartile_ntile_dt := floor( 1 + 4 * (.I-1)/.N)] )
Unit: milliseconds expr min lq mean median uq max neval ntile 608.1126 647.4994 670.3160 686.5103 691.4846 712.4267 100 cut 369.5391 373.3457 375.0913 374.3107 376.5512 385.8142 100 dt_ntile 117.5736 119.5802 124.5397 120.5043 124.5902 145.7894 100
library(Hmisc) set.seed(123) temp <- data.frame(name=letters[1:12], value=rnorm(12), quartile=rep(NA, 12)) temp$quartile <- as.numeric(cut2(temp$value, g=4)) temp$quartileBounds <- cut2(temp$value, g=4) temp
> temp name value quartile quartileBounds 1 a -0.56047565 1 [-1.265,-0.446) 2 b -0.23017749 2 [-0.446, 0.129) 3 c 1.55870831 4 [ 1.224, 1.715] 4 d 0.07050839 2 [-0.446, 0.129) 5 e 0.12928774 3 [ 0.129, 1.224) 6 f 1.71506499 4 [ 1.224, 1.715] 7 g 0.46091621 3 [ 0.129, 1.224) 8 h -1.26506123 1 [-1.265,-0.446) 9 i -0.68685285 1 [-1.265,-0.446) 10 j -0.44566197 2 [-0.446, 0.129) 11 k 1.22408180 4 [ 1.224, 1.715] 12 l 0.35981383 3 [ 0.129, 1.224)
temp$quartile <- ceiling(sapply(temp$value,function(x) sum(x-temp$value>=0))/(length(temp$value)/4))
temp[, `:=`(quartile = .bincode(x = ntile(value, 100), breaks = seq(0,100,25), right = TRUE, include.lowest = TRUE) decile = .bincode(x = ntile(value, 100), breaks = seq(0,100,10), right = TRUE, include.lowest = TRUE) )] temp[, `:=`(quartile = .bincode(x = ecdf(value)(value), breaks = seq(0,1,0.25), right = TRUE, include.lowest = TRUE) decile = .bincode(x = ecdf(value)(value), breaks = seq(0,1,0.1), right = TRUE, include.lowest = TRUE) )]
a <- rnorm(100) q <- quantile(a) getQuant <- function(x) { for (i in 1:(length(q)-1)) { if (x>=q[i] && x<q[i+1]) break; } i } res <- unlist(lapply(as.matrix(a), getQuant))
select(data, grepl("search_string",colnames(data))) select(data, colnames(data)[grepl("search_string",colnames(data))])
>iris[,grepl("Sepal", colnames(iris))] Sepal.Length Sepal.Width 1 5.1 3.5 2 4.9 3.0 3 4.7 3.2 4 4.6 3.1 5 5.0 3.6 6 5.4 3.9
myVectorOfStrings <- c("foo", "bar") matchExpression <- paste(myVectorOfStrings, collapse = "|") df %>% select(matches(matchExpression))
df <- read.csv("file.csv", na.strings = c("foo", "bar"))
for (i in 1:ncol(DF)){ DF[which(DF[,i]==""),columnIndex]<-"ALL" FinalData[which(is.na(FinalData[,columnIndex])),columnIndex]<-"ALL" }
library(dplyr) df <- data_frame(a = c( > df a b c d <chr> <chr> <chr> <dbl> 1 foo 1 1 1 2 2 foo 2 2 3 3 3 foobar 3 df <- mutate_all(df, funs(replace(., .== > df a b c d <chr> <chr> <chr> <dbl> 1 <NA> 1 1 1 2 2 <NA> 2 2 3 3 3 foobar 3
nyear<-20 names<-c(rep(1,nyear),rep(2,nyear),rep(3,nyear),rep(4,nyear), rep(5,nyear),rep(6,nyear),rep(7,nyear),rep(8,nyear))
R> n <- 3 R> rep(1:5, each=n) [1] 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 R>
[[1]] V1 V2 V3 V4 V5 [1,] 0.000000 46.973700 21.453500 338.547000 10.401600 [2,] 43.020500 0.000000 130.652000 840.526000 56.363700 [3,] 12.605600 173.238000 0.000000 642.075000 19.628100 [4,] 217.946000 626.368000 481.329000 0.000000 642.341000 [5,] 217.946000 626.368000 481.329000 0.000000 642.341000 [[2]] V1 V2 V3 V4 V5 [1,] 0.000000 47.973700 21.453500 338.547000 10.401600 [2,] 143.020500 0.000000 130.652000 840.526000 56.363700 [3,] 312.605600 17.238000 0.000000 642.075000 19.628100 [4,] 17.946000 126.368000 481.329000 0.000000 642.341000 [5,] 217.946000 626.368000 481.329000 0.000000 642.341000 ...
.list <- list(matrix(1:25, ncol = 5), matrix(1:25, ncol = 5)) Reduce(
apply(simplify2array(.list), c(1,2), sum) [,1] [,2] [,3] [,4] [,5] [1,] 2 12 22 32 42 [2,] 4 14 24 34 44 [3,] 6 16 26 36 46 [4,] 8 18 28 38 48 [5,] 10 20 30 40 50
.list <- list(matrix(1:25, ncol=5), matrix(1:25,ncol=5), matrix(1:25,ncol=5)) x <- .list[[1]] lapply(seq_along(.list)[-1], function(i){ x <<- do.call("+", list(x, .list[[i]])) }) x
ylab = expression(paste("Diameter of aperture ( ", mu, " )"))
plot(1:3, ylab = expression("Diameter of apeture (" * mu ~ "m)"), , xlab = expression("Force spaces with ~" ~ mu ~ pi * sigma ~ pi) , main = expression("This is another Greek character with space" ~ sigma))
matches <- subset(df1, df1$id %in% idNums1) nonMatches <- df1[(-matches[,1]),]
df.h <- data.frame( hour = factor(rep(1:24, each = 21)), price = runif(504, min = -10, max = 125), wind = runif(504, min = 0, max = 2500), temp = runif(504, min = - 10, max = 25) ) df.h <- tbl_df(df.h) df.h <- group_by(df.h, hour) group_size(df.h) reg.models <- do(df.h, formula = price ~ wind + temp) reg.models <- do(df.h, .f = lm(price ~ wind + temp, data = df.h))
library(dplyr) library(broom) df.h = data.frame( hour = factor(rep(1:24, each = 21)), price = runif(504, min = -10, max = 125), wind = runif(504, min = 0, max = 2500), temp = runif(504, min = - 10, max = 25) ) dfHour = df.h %>% group_by(hour) %>% do(fitHour = lm(price ~ wind + temp, data = .)) dfHourCoef = tidy(dfHour, fitHour) dfHourCoef
Source: local data frame [72 x 6] Groups: hour hour term estimate std.error statistic p.value 1 1 (Intercept) 53.336069324 21.33190104 2.5002961 0.022294293 2 1 wind -0.008475175 0.01338668 -0.6331053 0.534626575 3 1 temp 1.180019541 0.79178607 1.4903262 0.153453756 4 2 (Intercept) 77.737788772 23.52048754 3.3051096 0.003936651 5 2 wind -0.008437212 0.01432521 -0.5889765 0.563196358 6 2 temp -0.731265113 1.00109489 -0.7304653 0.474506855 7 3 (Intercept) 38.292039924 17.55361626 2.1814331 0.042655670 8 3 wind 0.005422492 0.01407478 0.3852630 0.704557388 9 3 temp 0.426765270 0.83672863 0.5100402 0.616220435 10 4 (Intercept) 30.603119492 21.05059583 1.4537888 0.163219027 .. ... ... ... ... ... ...
Source: local data frame [504 x 11] Groups: hour hour price wind temp .fitted .se.fit .resid .hat .sigma .cooksd .std.resid 1 1 83.8414055 67.3780 -6.199231 45.44982 22.42649 38.391590 0.27955950 42.24400 0.1470891067 1.0663820 2 1 0.3061628 2073.7540 15.134085 53.61916 14.10041 -53.312993 0.11051343 41.43590 0.0735584714 -1.3327207 3 1 80.3790032 520.5949 24.711938 78.08451 20.03558 2.294497 0.22312869 43.64059 0.0003606305 0.0613746 4 1 121.9023855 1618.0864 12.382588 54.23420 10.31293 67.668187 0.05911743 40.23212 0.0566557575 1.6447224 5 1 -0.4039594 1542.8150 -5.544927 33.71732 14.53349 -34.121278 0.11740628 42.74697 0.0325125137 -0.8562896 6 1 29.8269832 396.6951 6.134694 57.21307 16.04995 -27.386085 0.14318542 43.05124 0.0271028701 -0.6975290 7 1 -7.1865483 2009.9552 -5.657871 29.62495 16.93769 -36.811497 0.15946292 42.54487 0.0566686969 -0.9466312 8 1 -7.8548693 2447.7092 22.043029 58.60251 19.94686 -66.457379 0.22115706 39.63999 0.2983443034 -1.7753911 9 1 94.8736726 1525.3144 24.484066 69.30044 15.93352 25.573234 0.14111563 43.12898 0.0231796755 0.6505701 10 1 54.4643001 2473.2234 -7.656520 23.34022 21.83043 31.124076 0.26489650 42.74790 0.0879837510 0.8558507 .. ... ... ... ... ... ... ... ... ... ... ...
Source: local data frame [24 x 12] Groups: hour hour r.squared adj.r.squared sigma statistic p.value df logLik AIC BIC deviance df.residual 1 1 0.12364561 0.02627290 42.41546 1.2698179 0.30487225 3 -106.8769 221.7538 225.9319 32383.29 18 2 2 0.03506944 -0.07214506 36.79189 0.3270961 0.72521125 3 -103.8900 215.7799 219.9580 24365.58 18 3 3 0.02805424 -0.07993974 39.33621 0.2597760 0.77406651 3 -105.2942 218.5884 222.7665 27852.07 18 4 4 0.17640603 0.08489559 41.37115 1.9277147 0.17434859 3 -106.3534 220.7068 224.8849 30808.30 18 5 5 0.12575453 0.02861615 42.27865 1.2945915 0.29833246 3 -106.8091 221.6181 225.7962 32174.72 18 6 6 0.08114417 -0.02095092 35.80062 0.7947901 0.46690268 3 -103.3164 214.6328 218.8109 23070.31 18 7 7 0.21339168 0.12599076 32.77309 2.4415266 0.11529934 3 -101.4609 210.9218 215.0999 19333.36 18 8 8 0.21655629 0.12950699 40.92788 2.4877430 0.11119114 3 -106.1272 220.2543 224.4324 30151.65 18 9 9 0.23388711 0.14876346 35.48431 2.7476160 0.09091487 3 -103.1300 214.2601 218.4381 22664.45 18 10 10 0.18326177 0.09251307 40.77241 2.0194425 0.16171339 3 -106.0472 220.0945 224.2726 29923.01 18 .. ... ... ... ... ... ... .. ... ... ... ... ...
df.h %>% do(model = lm(price ~ wind + temp, data = .))
reg.models <- do(df.h, .f=function(data){ lm(price ~ wind + temp, data=data) })
reg.models <- do(df.h, .f=function(data){ m <- lm(price ~ wind + temp, data=data) m$hour <- unique(data$hour) m })
results<-df.h %.% group_by(hour) %.% do(failwith(NULL, lm), formula = price ~ wind + temp)
results<-do(group_by(tbl_df(df.h), hour), failwith(NULL, lm), formula = price ~ wind + temp)
results<-df.h %.% group_by(hour) %.% do(lm, formula = price ~ wind + temp) results<-do(group_by(tbl_df(df.h), hour), lm, formula = price ~ wind + temp)
sampleWithoutSurprises <- function(x) { if (length(x) <= 1) { return(x) } else { return(sample(x,1)) } }
a <- c(1,2,0,7,5) sample_fun_a <- function() sample(a, 1) runif_fun_a <- function() a[runif(1,1,6)] microbenchmark::microbenchmark(sample_fun_a(), runif_fun_a(), times = 100000L)
df1 <- data.frame(p=c(10,8,7,3,2,6,7,8), v=c(100,300,150,400,450,250,150,400)) df2 <- data.frame(p=c(10,8,6,4), v=c(150,250,350,400)) plot1 <- qplot(df1$v, df1$p) plot2 <- qplot(df2$v, df2$p, geom="step") plot3 <- ggplot(df1, aes(v, p)) + geom_point() plot4 <- ggplot(df2, aes(v, p)) + geom_step()
(plot1 <- ggplot(df1, aes(v, p)) + geom_point() + geom_step(data = df2) )
(plot2 <- ggplot(NULL, aes(v, p)) + geom_point(data = df1) + geom_step(data = df2) )
ggplot() + geom_line(data=Data1, aes(x=A, y=B), color= geom_line(data=Data2, aes(x=C, y=D), color=
ggplot(data=Data1, aes(x=A, y=B), color= geom_line() + geom_line(data=Data2, aes(x=C, y=D), color=
cpu_metric2 <- qplot(y=Y2,x=X1) cpu_metric1 <- qplot(y=Y1, x=X1, xlab="Time", ylab="%") combined_cpu_plot <- cpu_metric1 + geom_line() + geom_point(mapping=cpu_metric2$mapping)+ geom_line(mapping=cpu_metric2$mapping)
structure(list(lab = c("N00", "N01", "N02", "B00", "B01", "B02", "Z21", "BA01", "NA03")), .Names = "lab", row.names = c(NA, -9L ), class = "data.frame") df$pre<-strsplit(df$lab, "[0-9]+") df$suf<-strsplit(df$lab, "[A-Z]+")
lab pre suf 1 N00 N , 00 2 N01 N , 01 3 N02 N , 02 4 B00 B , 00 5 B01 B , 01 6 B02 B , 02 7 Z21 Z , 21 8 BA01 BA , 01 9 NA03 NA , 03
R> sapply(df$suf, "[[", 2) [1] "00" "01" "02" "00" "01" "02" "21" "01" "03"
df$pre <- sub("^([A-Z]+)[0-9]+", "\\1", df$lab) df$suf <- sub("^[A-Z]+([0-9]+)", "\\1", df$lab)
df$pre <- gsub("[0-9]", "", df$lab) df$suf <- gsub("[A-Z]", "", df$lab)
num <- 10000 set.seed(1) df <- data.frame(x = seq(1, num), y = runif(num), z = rep(1:2, each = num / 2)) df$z <- factor(df$z) library(ggplot2) p <- ggplot(df, aes(x, y, colour = z)) + geom_point(size = 1) p
df1 = data.frame(x=c( df2 = data.frame(x=c( merge(df1, df2) x y 1 a 0 2 b 1 3 c 0
zz <- merge(df1, df2, all = TRUE) zz[is.na(zz)] <- 0 > zz x y 1 a 0 2 b 1 3 c 0 4 d 0 5 e 0
df1 = data.frame(x=c( df2 = data.frame(x=c( df3 <- merge(df1, df2, all = TRUE) unique_df2_names <- setdiff(names(df2), names(df1)) df3[unique_df2_names][is.na(df3[, unique_df2_names])] <- 0
require(plyr) zz<-join(df1, df2, type="left") zz[is.na(zz)] <- 0
dt1 <- data.table(df1) dt2 <- data.table(df2) setkey(dt1,x) setkey(dt2,x)
graphdata <- merge(rates, totals, by=c("user"),all.x=T) colnames(graphdata)[colnames(graphdata)=="download.x"] = "download.rate" colnames(graphdata)[colnames(graphdata)=="download.y"] = "download.total" if(any(is.na(graphdata$download.total))) { graphdata[is.na(graphdata$download.total),]$download.total <- 0 }
fileURL <- "https: setInternet2(TRUE) download.file(fileURL ,destfile="./data/samsungData.rda",method="auto") load("./data/samsungData.rda")
destfile="./data/samsungData.rda" fileURL <- "https: if (destFile doesNotExist) { setInternet2(TRUE) download.file(fileURL ,destfile,method="auto") } load("./data/samsungData.rda") } load(destfile)
if(!file.exists(destfile)){ res <- tryCatch(download.file(fileURL, destfile="./data/samsungData.rda", method="auto"), error=function(e) 1) if(dat!=1) load("./data/samsungData.rda") }
destfile="./data/samsungData.rda" fileURL <- "https: if (!file.exists(destfile)) { setInternet2(TRUE) download.file(fileURL ,destfile,method="auto") } load("./data/samsungData.rda") } load(destfile)
> x = list(a = rnorm(5), b = rnorm(7)) > y = list(j = rpois(3, 5), k = rpois(4, 2), l = rbinom(9, 1, .43)) > foo = c(x,y) > foo $a [1] 0.280503895 -0.853393705 0.323137905 1.232253725 -0.007638861 $b [1] -2.0880857 0.2553389 0.9434817 -1.2318130 -0.7011867 0.3931802 -1.6820880 $j [1] 5 12 5 $k [1] 3 1 2 1 $l [1] 1 0 0 1 0 0 1 1 0 > class(foo) [1] "list"
> x = 1:10 > y = 3*x+rnorm(length(x)) > z = lm(y ~ x) > is.vector(z) [1] FALSE > foo = c(x, z) > foo [[1]] [1] 1 [[2]] [1] 2 [[3]] [1] 3 [[4]] [1] 4 [[5]] [1] 5 [[6]] [1] 6 [[7]] [1] 7 [[8]] [1] 8 [[9]] [1] 9 [[10]] [1] 10 $coefficients (Intercept) x 0.814087 2.813492 $residuals 1 2 3 4 5 6 7 -0.2477695 -0.3375283 -0.1475338 0.5962695 0.5670256 -0.5226752 0.6265995 8 9 10 0.1017986 -0.4425523 -0.1936342 $effects (Intercept) x -51.50810097 25.55480795 -0.05371226 0.66592081 0.61250676 -0.50136423 0.62374031 0.07476915 -0.49375185 -0.26900403 $rank [1] 2 $fitted.values 1 2 3 4 5 6 7 8 3.627579 6.441071 9.254562 12.068054 14.881546 17.695038 20.508529 23.322021 9 10 26.135513 28.949005 $assign [1] 0 1 $qr $qr (Intercept) x 1 -3.1622777 -17.39252713 2 0.3162278 9.08295106 3 0.3162278 0.15621147 4 0.3162278 0.04611510 5 0.3162278 -0.06398128 6 0.3162278 -0.17407766 7 0.3162278 -0.28417403 8 0.3162278 -0.39427041 9 0.3162278 -0.50436679 10 0.3162278 -0.61446316 attr(,"assign") [1] 0 1 $qraux [1] 1.316228 1.266308 $pivot [1] 1 2 $tol [1] 1e-07 $rank [1] 2 attr(,"class") [1] "qr" $df.residual [1] 8 $xlevels named list() $call lm(formula = y ~ x) $terms y ~ x attr(,"variables") list(y, x) attr(,"factors") x y 0 x 1 attr(,"term.labels") [1] "x" attr(,"order") [1] 1 attr(,"intercept") [1] 1 attr(,"response") [1] 1 attr(,".Environment") <environment: R_GlobalEnv> attr(,"predvars") list(y, x) attr(,"dataClasses") y x "numeric" "numeric" $model y x 1 3.379809 1 2 6.103542 2 3 9.107029 3 4 12.664324 4 5 15.448571 5 6 17.172362 6 7 21.135129 7 8 23.423820 8 9 25.692961 9 10 28.755370 10
state1 <- c(rep(c(rep("N", 7), rep("Y", 7)), 2)) year <- rep(c(2003:2009), 4) group1 <- c(rep("C", 14), rep("E", 14)) group2 <- paste(state1, group1, sep = "") beta <- c(0.16,0.15,0.08,0.08,0.18,0.48,0.14,0.19,0.00,0.00,0.04,0.08,0.27,0.03,0.11,0.12,0.09,0.09,0.10,0.19,0.16,0.00,0.11,0.07,0.08,0.09,0.19,0.10) lcl <- c(0.13,0.12,0.05,0.05,0.12,0.35,0.06,0.13,0.00,0.00,0.01,0.04,0.20,0.00,0.09,0.09,0.06,0.06,0.07,0.15,0.11,0.00,0.07,0.03,0.05,0.06,0.15,0.06) ucl <- c(0.20,0.20,0.13,0.14,0.27,0.61,0.28,0.27,0.00,1.00,0.16,0.16,0.36,0.82,0.14,0.15,0.13,0.13,0.15,0.23,0.21,0.00,0.15,0.14,0.12,0.12,0.23,0.16) data <- data.frame(state1,year,group1,group2,beta,lcl,ucl)
library(ggplot2) pd <- position_dodge(.65) ggplot(data = data, aes(x = year, y = beta, colour = state1, group = group2, shape = group1)) + geom_point(position = pd, size = 4) + geom_errorbar(aes(ymin = lcl, ymax = ucl),colour = "black", width = 0.5, position = pd) + scale_colour_hue(name = "Treatment & State", labels = c("Control", "Exclosure"), l = 40) + scale_shape(name = "State", labels = c("Non-F", "Flwr"))
pd <- position_dodge(.65) ggplot(data = data,aes(x= year, y = beta, colour = group2, shape = group2)) + geom_point(position = pd, size = 4) + geom_errorbar(aes(ymin = lcl, ymax = ucl), colour = "black", width = 0.5, position = pd) + scale_colour_manual(name = "Treatment & State", labels = c("Control, Non-F", "Control, Flwr", "Exclosure, Non-F", "Exclosure, Flwr"), values = c("blue", "red", "blue", "red")) + scale_shape_manual(name = "Treatment & State", labels = c("Control, Non-F", "Control, Flwr", "Exclosure, Non-F", "Exclosure, Flwr"), values = c(19, 19, 17, 17))
ggplot(data =data,aes(x= year, y = beta, shape=group2, colour=group2,group = group2)) + geom_errorbar(aes(ymin = lcl, ymax = ucl),colour = "black", width = 0.5, position = pd) + geom_point(position = pd, size = 4) + scale_colour_manual(values=c("red","blue","red","blue")) + scale_shape_manual(values=c(19,19,17,17)) + scale_fill_hue(name="Treatment & State", labels=c("Control", "Exclosure"),l=40)
library(chron) is.weekend.chron <- is.weekend library(tseries)
start end 1 14379 32094 2 151884 174367 3 438422 449382 4 618123 621256 5 698271 714321 6 973394 975857 7 980508 982372 8 994539 994661 9 1055151 1058824 . . . . . . . . .
R> vec <- 1:10 R> DF <- data.frame(start=c(1,3,5,7), end=c(2,6,7,9)) R> DF$newcol <- apply(DF,1,function(row) mean(vec[ row[1] : row[2] ] )) R> DF start end newcol 1 1 2 1.5 2 3 6 4.5 3 5 7 6.0 4 7 9 8.0 R>
vec <- 1:10 library(data.table) DT <- data.table(start=c(1,3,5,7), end=c(2,6,7,9)) DT[,new:=apply(DT,1,function(row) mean(vec[ row[1] : row[2] ] ))]
rscript_stack <- function() { Filter(Negate(is.null), lapply(sys.frames(), function(x) x$ofile)) } rscript_current <- function() { stack <- rscript_stack() r <- as.character(stack[length(stack)]) first_char <- substring(r, 1, 1) if (first_char != r <- file.path(getwd(), r) } r } source_relative <- function(relative_path, ...) { source(file.path(dirname(rscript_current()), relative_path), ...) }
sourceDir <- function (path, pattern = "\\.[rR]$", env = NULL, chdir = TRUE) { files <- sort(dir(path, pattern, full.names = TRUE)) lapply(files, source, chdir = chdir) }
Cstack_info() size current direction eval_depth 67108864 8120 1 2
f <- function(root=1,lambda=1) { x <- c(0,1); prob <- c(1/(lambda+1),lambda/(lambda+1)); repeat { if(root == 0) { break; } else { child <- sample(x,2,replace=TRUE,prob); if(child[1] == 0 && child[2] == 0) { break; } if(child[1] == 1) { child[1] <- f(root=child[1],lambda); } if(child[2] == 1 && child[1] == 0) { child[2] <- f(root=child[2],lambda); } } if(child[1] == 0 && child[2] == 0) { break; } if(child[1] == 1 || child[2] == 1) { root <- sample(x,1,replace=TRUE,prob); } } return(root) }
output_table_subset = mutate(big_data_frame, combined_table = paste0(first_part, second_part, col = "_"))
output_table_subset = mutate(big_data_frame, combined_table = paste0(first_part, second_part, sep = "_"))
plop <- function(a = 2){ pouet <- sample(a) plop(pouet) } plop() Erreur : évaluations trop profondément imbriquées : récursion infinie / options(expressions=) ? Erreur pendant l
f <- function(root=1,lambda=1,depth=1) { if(depth > 256){ return(NA) } x <- c(0,1); prob <- c(1/(lambda+1),lambda/(lambda+1)); repeat { if(root == 0) { break; } else { child <- sample(x,2,replace=TRUE,prob); if(child[1] == 0 && child[2] == 0) { break; } if(child[1] == 1) { child[1] <- f(root=child[1],lambda,depth+1); } if(child[2] == 1 && child[1] == 0) { child[2] <- f(root=child[2],lambda,depth+1); } } if(child[1] == NA | child[2] == NA){ return NA; } if(child[1] == 0 && child[2] == 0) { break; } if(child[1] == 1 || child[2] == 1) { root <- sample(x,1,replace=TRUE,prob); } } return(root) }
change_to_factor <- function(x){ x <- change_to_character(x) as.factor(x) } change_to_character <- function(x){ x <- change_to_factor(x) as.character(x) } change_to_character("1")
plot.png <- function(x, y) { require(png) tmp <- tempfile() png(tmp, width = 1920, height = 1080) plot(x, y, type = "l") dev.off() ima <- readPNG(tmp) op <- par(mar = rep(0, 4)) plot(NULL, xlim = c(0, 100), ylim = c(0, 100), xaxs = "i", yaxs = "i") rasterImage(ima, 0, 0, 100, 100, interpolate = TRUE) par(op) unlink(tmp) } t <- 1:1e3 x <- t * sin(t) y <- t * cos(t) plot.png(x, y)
Oops!!! rApache has something to tell you. View source and read the HTML comments at the end.
\n<!--\nError in library(micEconAids) : there is no package called library(micEconAids)\n3: eval(expr, envir, enclos)\n2: eval(i, envir) \n1: sys.source(file = \"\/var\/www\/r\/test\/25.R\", envir = .rAenv) \n-->\n
"Invalid command defined by a module not included in the server configuration";
normally.distributed <- function(data) { if(data is normal) return(TRUE) else return(NO) }
> set.seed(100) > x <- rbinom(15,5,.6) > shapiro.test(x) Shapiro-Wilk normality test data: x W = 0.8816, p-value = 0.0502 > x <- rlnorm(20,0,.4) > shapiro.test(x) Shapiro-Wilk normality test data: x W = 0.9405, p-value = 0.2453
> library(nortest) > x <- rt(500000,200) > ad.test(x) Anderson-Darling normality test data: x A = 1.1003, p-value = 0.006975 > qqnorm(x)
p=function(n){ x=rnorm(n,0,1) s=shapiro.test(x) s$p.value } rep1=replicate(1000,p(5)) rep2=replicate(1000,p(100)) plot(density(rep1)) lines(density(rep2),col="blue") abline(v=0.05,lty=3)
library("ggpubr") library("car") h <- hist(data, breaks = 10, density = 10, col = "darkgray") xfit <- seq(min(data), max(data), length = 40) yfit <- dnorm(xfit, mean = mean(data), sd = sd(data)) yfit <- yfit * diff(h$mids[1:2]) * length(data) lines(xfit, yfit, col = "black", lwd = 2) plot(ecdf(data), main="CDF") lines(ecdf(rnorm(10000)),col="red") ggdensity(data) ggqqplot(data)
x-min [...................] x-max [...................] y-min [...................] y-max [...................]
textInput(inputId="xlimitsmin", label="x-min", value = 0.0), textInput(inputId="xlimitsmax", label="x-max", value = 0.5), textInput(inputId="ylimitsmin", label="y-min", value = 0.5), textInput(inputId="ylimitsmax", label="y-max", value = 1.0),
<style type="text/css">select [... which links to this later on in the page...] <label class="control-label" for="yaxis4">Y-Axis</label> <select id="yaxis4" multiple="multiple">
<style type="text/css">select [... which links to...] <label>x-max</label> <input id="xlimitsmax" type="text" value="0.5"/>
library(shiny) shinyUI( pageWithSidebar( headerPanel("test01"), sidebarPanel( tags$head( tags$style(type="text/css", "select { max-width: 360px; }"), tags$style(type="text/css", ".span4 { max-width: 360px; }"), tags$style(type="text/css", ".well { max-width: 360px; }") ), wellPanel( p(strong("Side Panel:")) ) ), mainPanel( textInput(inputId="xlimitsmin", label="x-min", value = 0.0), tags$head(tags$style(type="text/css", "select textInput(inputId="xlimitsmax", label="x-max", value = 0.5), tags$head(tags$style(type="text/css", "select ) ))
runApp(list( ui = bootstrapPage( textInput(inputId="xlimitsmin", label="x-min", value = 0.0), textInput(inputId="xlimitsmax", label="x-max", value = 0.5) ), server = function(input, output) {} ))
textInputRow<-function (inputId, label, value = "") { div(style="display:inline-block", tags$label(label, `for` = inputId), tags$input(id = inputId, type = "text", value = value,class="input-small")) } runApp(list( ui = bootstrapPage( textInputRow(inputId="xlimitsmin", label="x-min", value = 0.0), textInputRow(inputId="xlimitsmax", label="x-max", value = 0.5) ), server = function(input, output) {} ))
runApp(list( ui = bootstrapPage( div(style="display:inline-block",textInput(inputId="xlimitsmin", label="x-min", value = 0.0)), div(style="display:inline-block",textInput(inputId="xlimitsmax", label="x-max", value = 0.5)) ), server = function(input, output) {} ))
textInput2<-function (inputId, label, value = "",...) { tagList(tags$label(label, `for` = inputId), tags$input(id = inputId, type = "text", value = value,...)) } runApp(list( ui = bootstrapPage( div(style="display:inline-block",textInput2(inputId="xlimitsmin", label="x-min", value = 0.0, class="input-small")), div(style="display:inline-block",textInput2(inputId="xlimitsmax", label="x-max", value = 0.5, class="input-small")) ), server = function(input, output) {} ))
textInput3<-function (inputId, label, value = "",...) { div(style="display:inline-block", tags$label(label, `for` = inputId), tags$input(id = inputId, type = "text", value = value,...)) } runApp(list( ui = bootstrapPage( textInput3(inputId="xlimitsmin", label="x-min", value = 0.0, class="input-small"), textInput3(inputId="xlimitsmax", label="x-max", value = 0.5, class="input-small") ), server = function(input, output) {} ))
fluidRow( box(width = 12, title = "A Box in a Fluid Row I want to Split", splitLayout( textInput("inputA", "The first input"), textInput("inputB", "The second input"), textInput("inputC", "The third input") ) ) )
fluidRow( column(3, selectInput( column(3, selectInput( )
library(shiny) shinyUI( pageWithSidebar( headerPanel("test01"), sidebarPanel( tags$head( tags$style(type="text/css", "select { max-width: 360px; }"), tags$style(type="text/css", ".span4 { max-width: 360px; }"), tags$style(type="text/css", ".well { max-width: 360px; }") ), wellPanel( p(strong("Side Panel:")) ) ), mainPanel( div(id="XXmin",textInput(inputId="xlimitsmin", label="x-min", value = 0.0)), tags$head(tags$style(type="text/css", " tags$head(tags$style(type="text/css", " div(id="XXmax",textInput(inputId="xlimitsmax", label="x-max", value = 0.5)), tags$head(tags$style(type="text/css", " tags$head(tags$style(type="text/css", " )) ))
div(class="MyClass",textInput(inputId="xlimitsmin", label="x-min", value = 0.0)), tags$head(tags$style(type="text/css", ".MyClass {display: inline-block}")), tags$head(tags$style(type="text/css", "
inline = function (x) { tags$div(style="display:inline-block;", x) } inline(textInput(inputId="xlimitsmin", label="x-min", value = 0.0)), inline(textInput(inputId="xlimitsmax", label="x-max", value = 0.5)), inline(textInput(inputId="ylimitsmin", label="y-min", value = 0.5)), inline(textInput(inputId="ylimitsmax", label="y-max", value = 1.0)),
div(class="row-fluid", div(class="span1",textInput("xlimitsmin", label = "x-min", value = 0.0)), div(class="span1",textInput("xlimitsmax", label = "x-max", value = 0.5)), div(class="span1",textInput("ylimitsmin", label = "y-min", value = 0.5)), div(class="span1",textInput("ylimitsmax", label = "y-max", value = 1.0)) )
div(class="row-fluid", div(class="span3",numericInput("xlimitsmin", label = "x-min", value = 0.0)), div(class="span3",numericInput("xlimitsmax", label = "x-max", value = 0.5)), div(class="span3",numericInput("ylimitsmin", label = "y-min", value = 0.5)), div(class="span3",numericInput("ylimitsmax", label = "y-max", value = 1.0)) )
+ scale_y_continuous(labels = scales::percent_format(accuracy = 1))
y <- c(12, 20)/100 x <- c(1, 2) library(ggplot2) library(scales) myplot <- qplot(as.factor(x), y, geom="bar") myplot + scale_y_continuous(labels=percent)
library(scales) myplot <- ggplot(mtcars, aes(factor(cyl))) + geom_bar(aes(y = (..count..)/sum(..count..))) + scale_y_continuous(labels=percent) myplot
+ scale_y_continuous(labels = function(x) paste0(x*100, "%"))
+ scale_y_continuous(labels = function(x) paste0(x, "%"))
library(ggplot2) df = data.frame(x=seq(0,1,0.1), y=seq(0,1,0.1)) ggplot(df, aes(x,y)) + geom_point() + scale_y_continuous(labels = function(x) paste0(x*100, "%"))
carrots<-NULL carrots$Farm<-rep(c("X","Y"),2) carrots$Type<-rep(c("Orange","Purple"),each=2) carrots$MeanLength<-c(10,6,4,2) carrots<-data.frame(carrots)
require(ggplot2) p<-ggplot(carrots,aes(y=MeanLength,x=Farm,fill=Type)) + geom_bar(position="dodge") + opts(legend.position="top") p
ggplot(carrots, aes(y=MeanLength, x=Farm, fill=Type)) + geom_bar(position="dodge") + theme(legend.position="top", legend.direction="horizontal") + scale_fill_discrete("")
ggplot(carrots,aes(y=MeanLength,x=Farm,fill=Type)) + geom_bar(position="dodge") + opts( legend.position="top", legend.direction="horizontal", legend.title = theme_blank() )
ggplot(carrots,aes(y=MeanLength,x=Farm,fill=Type)) + geom_bar(position="dodge") + opts(legend.position="top") + scale_fill_manual(name = "", values = c("Orange" = "orange", "Purple" = "purple"))
ggplot(carrots, aes(y = MeanLength, x = Farm, fill = Type)) + geom_bar(stat = "identity", position = "dodge") + theme(legend.position="top") + scale_fill_manual(name = "", values = c("Orange" = "orange", "Purple" = "purple"))
list.dirs(path = ".", full.names = TRUE, recursive = TRUE)
list.dirs <- function(path=".", pattern=NULL, all.dirs=FALSE, full.names=FALSE, ignore.case=FALSE) { all <- list.files(path, pattern, all.dirs, full.names=TRUE, recursive=FALSE, ignore.case) dirs <- all[file.info(all)$isdir] if(isTRUE(full.names)) return(dirs) else return(basename(dirs)) }
list.dirs <- function(...) { x <- dir(...) x[file_test("-d", x)] }
list.dirs <- function(parent=".") { if (length(parent)>1) return(c(list.dirs(parent[1]), list.dirs(parent[-1]))) else { if (!is.dir(parent)) return(NULL) child <- list.files(parent, full=TRUE) if (!any(is.dir(child))) return(parent) else return(list.dirs(child)) } } is.dir <- function(x) { ret <- file.info(x)$isdir ret[is.na(ret)] <- FALSE ret }
> library(ggplot2) Error in loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]]) : there is no package called ‘Rcpp’ Error: package or namespace load failed for ‘ggplot2’
remove.packages(c("ggplot2", "data.table")) install.packages( install.packages(
remove.packages(c("ggplot2", "data.table")) install.packages( install.packages( install.packages(
remove.packages(c("ggplot2", "data.table")) install.packages( install.packages(
install.packages( install.packages( install.packages(
remove.packages(c("ggplot2", "data.table")) install.packages( install.packages( install.packages(
cyl gear V1 1 4 3 1 2 4 4 8 3 4 5 2 4 6 3 2 5 6 4 4 6 6 5 1 7 8 3 12 8 8 5 2
library(dplyr) g <- group_by(mtcars, cyl, gear) summarise(g, length(gear))
Error in n() : This function should not be called directly
library(dplyr) mtcars %>% group_by(cyl, gear) %>% summarise(n = n()) #
mtcars %>% dplyr::group_by(cyl, gear) %>% dplyr::summarise(length(gear))
mtcars %>% group_by(cyl, gear) %>% do(data.frame(nrow=nrow(.)))
--* installing *source* package ‘udunits2’ ... ** package ‘udunits2’ successfully unpacked and MD5 sums checked checking for gcc... gcc checking whether the C compiler works... yes checking for C compiler default output file name... a.out checking for suffix of executables... checking whether we are cross compiling... no checking for suffix of object files... o checking whether we are using the GNU C compiler... yes checking whether gcc accepts -g... yes checking for gcc option to accept ISO C89... none needed checking for XML_ParserCreate in -lexpat... yes checking how to run the C preprocessor... gcc -E checking for grep that handles long lines and -e... /bin/grep checking for egrep... /bin/grep -E checking for ANSI C header files... yes checking for sys/types.h... yes checking for sys/stat.h... yes checking for stdlib.h... yes checking for string.h... yes checking for memory.h... yes checking for strings.h... yes checking for inttypes.h... yes checking for stdint.h... yes checking for unistd.h... yes checking udunits2.h usability... no checking udunits2.h presence... no checking for udunits2.h... no checking for ut_read_xml in -ludunits2... no -----Error: libudunits2.a not found----- If the udunits2 library is installed in a non-standard location, use --configure-args= example, or --configure-args= replacing paths with appropriate values for your installation. You can alternatively use the UDUNITS2_INCLUDE and UDUNITS2_LIB environment variables. If udunits2 is not installed, please install it. It is required for this package. ERROR: configuration failed for package ‘udunits2’ * removing ‘/home/fjay/R/x86_64-pc-linux-gnu-library/3.3/udunits2’ * restoring previous ‘/home/fjay/R/x86_64-pc-linux-gnu-library /3.3/udunits2’ The downloaded source packages are in ‘/tmp/Rtmp0syxnJ/downloaded_packages’ Warning message: In install.packages("udunits2", lib = "/home/fjay/R/x86_64-pc-linux- gnu-library/3.3") : installation of package ‘udunits2’ had non-zero exit status >
eq = function(x){x*x} curve(eq, from=1, to=50, xlab="x", ylab="y")
library("ggplot2") eq = function(x){x*x} qplot(c(1,50), fun=eq, stat="function", geom="line", xlab="x", ylab="y")
library("ggplot2") eq = function(x){x*x} ggplot(data.frame(x=c(1, 50)), aes(x=x)) + stat_function(fun=eq, geom="line") + xlab("x") + ylab("y")
library(lattice) eq<-function(x) {x*x} X<-1:1000 xyplot(eq(X)~X,type="l")
library(lattice) distribution<-function(x) {2^(-x*2)} X<-seq(0,10,0.00001) xyplot(distribution(X)~X,type="l", col = rgb(red = 255, green = 90, blue = 0, maxColorValue = 255), cex.lab = 3.5, cex.axis = 3.5, lwd=2 )
data <- as.data.set(spss.portable.file("filename.por"))
install.packages("memisc") data <- as.data.set(spss.system.file(
setwd("C:/Users/rest of your path") library(haven) data <- read_sav("data.sav")
temp <- list.files(pattern = "*.sav") read.all <- sapply(temp, read_sav)
install.packages("memisc") load( Daten.Februar <-as.data.set(spss.system.file("NPS_Februar_15_Daten.sav")) names(Daten.Februar)
library(memisc) data <- as.data.set(spss.system.file(filename)) copyofdata = data for(i in 2:63){ names(data)[i] <- names(copyofdata)[i-1] } data[[1]] <- NULL newcopyofdata = data for(i in 2:62){ labels(data[[i]]) <- labels(newcopyofdata[[i-1]]) } labels(data[[1]]) <- NULL
library(tidyverse) library(haven) vignette( df <- read_sav(path_to_file) df <- map_df(.x = df, .f = function(x) { if (class(x) == else x}) colnames(df) <- map(.x = spss_file, .f = function(x) {attr(x,
ggplot(data=file,aes(x=V1,y=V3,fill=V2)) + geom_bar(stat="identity",position="dodge",colour="white") + geom_text(aes(label=V2),position=position_dodge(width=0.9), hjust=1.5,colour="white") + theme_bw()+theme(element_text(size=10)) ggsave(filename="barplot.pdf",width=4,height=4)
geom_text(size=10,aes(label=V2),position=position_dodge(width=0.9), hjust=1.5,colour="white")
library(ggplot2) a <- aggregate(mpg ~ vs + am , mtcars, function(i) round(mean(i))) p <- ggplot(mtcars, aes(factor(vs), y=mpg, fill=factor(am))) + geom_bar(stat="identity",position="dodge") + geom_text(data = a, aes(label = mpg), position = position_dodge(width=0.9), size=20)
p <- p + theme(axis.text = element_text(size = 15)) p <- p + theme(axis.title = element_text(size = 25)) p <- p + theme(text = element_text(size = 10))
geom.text.size = 7 theme.size = (14/5) * geom.text.size ggplot(mtcars, aes(factor(vs), y=mpg, fill=factor(am))) + geom_bar(stat="identity",position="dodge") + geom_text(data = a, aes(label = mpg), position = position_dodge(width=0.9), size=geom.text.size) + theme(axis.text = element_text(size = theme.size, colour="black"))
A B C 1 x 0.1 1 x 0.5 1 y 0.1 1 y 0.5 2 x 0.1 2 x 0.5 2 y 0.1 2 y 0.5 3 x 0.1 3 x 0.5 3 y 0.1 3 y 0.5
d <- data.frame(A = rep(A, times=length(B)*length(C)), B = rep(B, times=length(A), each=length(C)), C = rep(C, each=length(A)*length(B))
d = expand.grid(x = A, y = B, z = C) d = mdply(d, f)
A.B=merge(data.frame(A=A), data.frame(B=B),by=NULL); A.B.C=merge(A.B, data.frame(C=C),by=NULL);
f <- function(x,y,z) paste(x,y,z,sep="+") d <- expand.grid(x=A, y=B, z=C) d$D <- do.call(f, d)
library(data.table) d <- CJ(x=A, y=B, z=C) d[, w:=f(x,y,z)]
library(tidyverse) crossing(A,B,C) %>% mutate(D = pmap_chr(.,paste,sep="_"))
crossproduct <- function(...,FUN= args <- list(...) n1 <- names(args) n2 <- sapply(match.call()[1+1:length(args)], as.character) nn <- if (is.null(n1)) n2 else ifelse(n1!= dims <- sapply(args,length) dimtot <- prod(dims) reps <- rev(cumprod(c(1,rev(dims))))[-1] cols <- lapply(1:length(dims), function(j) args[[j]][1+((1:dimtot-1) %/% reps[j]) %% dims[j]]) names(cols) <- nn do.call(match.fun(FUN),cols) } A <- c(1,2,3) B <- factor(c( C <- c(.1,.5) crossproduct(A,B,C) crossproduct(A,B,C, FUN=function(...) paste(...,sep=
id <- ts(1:length(drug$Date)) a1 <- ts(drug$Rate) a2 <- lag(a1-1) tg <- ts.union(a1,id,a2) mg <-lm (a1~a2+bs(id,df=df1),data=tg)
Call: lm(formula = a1 ~ a2 + bs(id, df = df1), data = tg) Residuals: Min 1Q Median 3Q Max -0.31617 -0.11711 -0.02897 0.12330 0.40442 Coefficients: Estimate Std. Error t value Pr(>|t|) (Intercept) 0.77443 0.09011 8.594 1.10e-11 *** a2 0.13270 0.13593 0.976 0.33329 bs(id, df = df1)1 -0.16349 0.23431 -0.698 0.48832 bs(id, df = df1)2 0.63013 0.19362 3.254 0.00196 ** bs(id, df = df1)3 0.33859 0.14399 2.351 0.02238 * --- Signif. codes: 0
lmfit <- lm(mpg ~ wt, mtcars) require(broom) tidy(lmfit) term estimate std.error statistic p.value 1 (Intercept) 37.285 1.8776 19.858 8.242e-19 2 wt -5.344 0.5591 -9.559 1.294e-10 is.data.frame(tidy(lmfit)) [1] TRUE
plot_coeffs <- function(mlr_model) { coeffs <- coefficients(mlr_model) mp <- barplot(coeffs, col=" lablist <- names(coeffs) text(mp, par("usr")[3], labels = lablist, srt = 45, adj = c(1.1,1.1), xpd = TRUE, cex=0.6) }
model <- lm(Petal.Width ~ ., data = iris) plot_coeffs(model)
Error: GeomRasterAnn was built with an incompatible version of ggproto. Please reinstall the package that provides this extension.
devtools::install_github("dkahle/ggmap") devtools::install_github("hadley/ggplot2")
library(devtools) install_version("ggplot2", version = "2.1.0", repos = "http:
g = d$mydata m<-mean(g) std<-sqrt(var(g)) hist(g, density=20, breaks=20, prob=TRUE, xlab="x-variable", ylim=c(0, 2), main="normal curve over histogram") curve(dnorm(x, mean=m, sd=std), col="darkblue", lwd=2, add=TRUE, yaxt="n")
h <- hist(g, breaks = 10, density = 10, col = "lightgray", xlab = "Accuracy", main = "Overall") xfit <- seq(min(g), max(g), length = 40) yfit <- dnorm(xfit, mean = mean(g), sd = sd(g)) yfit <- yfit * diff(h$mids[1:2]) * length(g) lines(xfit, yfit, col = "black", lwd = 2)
myhist <- hist(mtcars$mpg) multiplier <- myhist$counts / myhist$density mydensity <- density(mtcars$mpg) mydensity$y <- mydensity$y * multiplier[1] plot(myhist) lines(mydensity)
myhist <- hist(mtcars$mpg) multiplier <- myhist$counts / myhist$density mydensity <- density(mtcars$mpg) mydensity$y <- mydensity$y * multiplier[1] plot(myhist) lines(mydensity) myx <- seq(min(mtcars$mpg), max(mtcars$mpg), length.out= 100) mymean <- mean(mtcars$mpg) mysd <- sd(mtcars$mpg) normal <- dnorm(x = myx, mean = mymean, sd = mysd) lines(myx, normal * multiplier[1], col = "blue", lwd = 2) sd_x <- seq(mymean - 3 * mysd, mymean + 3 * mysd, by = mysd) sd_y <- dnorm(x = sd_x, mean = mymean, sd = mysd) * multiplier[1] segments(x0 = sd_x, y0= 0, x1 = sd_x, y1 = sd_y, col = "firebrick4", lwd = 2)
status: the (numerical) error status to be returned to the operating system, where relevant. Conventionally ‘0’ indicates successful completion.
Some error statuses are used by R itself. The default error handler for non-interactive use effectively calls ‘q("no", 1, FALSE)’ and returns error code 1. Error status 2 is used for R ‘suicide’, that is a catastrophic failure, and other small numbers are used by specific ports for initialization failures. It is recommended that users choose statuses of 10 or more.
> y=0 > while(y <5){ print( y<-y+1) } [1] 1 [1] 2 [1] 3 [1] 4 [1] 5
repeat( { expressions}; if (! end_cond_expr ) {break} )
df <- data.frame(X=c(), R=c()) x <- x0 continue <- TRUE while(continue) { xi <- (11 * x) %% 16 df <- rbind(df, data.frame(X=x, R=xi)) x <- xi if(xi == x0) { continue <- FALSE } }
do while (condition) ..statements.. endo repeat{ ..statements.. if(! condition){ break } }
proc(0)=printvalues(y); DO WHILE y < 5; y+1; y=y+1; ENDO; ENDP; printvalues(0); @ run selected code via F4 to get the following @ 1.0000000 2.0000000 3.0000000 4.0000000 5.0000000
printvalues <- function(y) { repeat { y=y+1; print(y) if (! (y < 5) ) {break} } } printvalues(0)
> head(data) Group Score Info 1 1 1 a 2 1 2 b 3 1 3 c 4 2 4 d 5 2 3 e 6 2 1 f
> aggregate(data$Score, list(data$Group), max) Group.1 x 1 1 3 2 2 4
lapply(split(z,z$Group),function(chunk) chunk[which.max(chunk$Score),])
do.call(rbind,lapply(split(z,z$Group),function(chunk) chunk[which.max(chunk$Score),]))
maxs <- aggregate(Score ~ Group, data = dat, FUN = max)
R> maxs <- aggregate(Score ~ Group, data = dat, FUN = max) R> merge(maxs, dat) Group Score Info 1 1 3 c 2 2 4 d
merge(aggregate(Score ~ Group, data = dat, FUN = max), dat)
R> aggregate(dat$Score, list(dat$Group), max) Group.1 x 1 1 3 2 2 4 R> with(dat, aggregate(Score, list(Group), max)) Group.1 x 1 1 3 2 2 4
library(plyr) ddply(data, .(Group), function(x)x[x$Score==max(x$Score), ]) Group Score Info 1 1 3 c 2 2 4 d
ddply(df, .(Group), function(x)x[which.max(x$Score), ])
dat <- read.table(textConnection( 1 1 1 a 2 1 2 b 3 1 3 c 4 2 4 d 5 2 3 e 6 2 1 f library("plyr") ddply(dat,.(Group),summarize, Max = max(Score), Info = Info[which.max(Score)]) Group Max Info 1 1 3 c 2 2 4 d
library(data.table) DT <- data.table(dat) DT[, .SD[which.max(Score),], by = Group]
aggregate(data[,"score", drop=F], list(group=data$group), mean)
my.df <- data.frame(group = rep(c(1,2), each = 3), score = runif(6), info = letters[1:6]) my.agg <- with(my.df, aggregate(score, list(group), max)) my.df.split <- with(my.df, split(x = my.df, f = group)) my.agg$info <- unlist(lapply(my.df.split, FUN = function(x) { x[which(x$score == max(x$score)), "info"] })) > my.agg Group.1 x info 1 1 0.9344336 a 2 2 0.7699763 e
a<-data.frame(day=rep(1,5),hour=c(1,2,3,3,4),val=c(1,NA,3,NA,5)) day hour val 1 1 1 1 2 1 2 NA 3 1 3 3 4 1 3 NA 5 1 4 5 aggregate(a$val,by=list(day=a$day,hour=a$hour),mean,na.rm=T) day hour x 1 1 1 1 2 1 2 NaN 3 1 3 3 4 1 4 5 aggregate(val ~ hour + day,data=a,mean,na.rm=T) hour day val 1 1 1 1 2 3 1 3 3 4 1 5
for (out in 1:n_old){ id_velho <- old_table_df$id[out] for (in in 1:n) { id_novo <- new_table_df$ID[in] if(id_velho==id_novo) { break }else if(in == n) { sold_df <- rbind(sold_df,old_table_df[out,]) } } }
for (i in 1:10) { for (j in 1:10) { for (k in 1:10) { cat(i," ",j," ",k,"\n") if (k ==5) break } } }
for (in in 1:n) { if (in == n) { "sorry but the loop did not break" } id_novo <- new_table_df$ID[in] if(id_velho==id_novo) { break } else if(in == n) { sold_df <- rbind(sold_df,old_table_df[out,]) } }
R> str_sub("leftright",1,4) [1] "left" R> str_sub("leftright",-5,-1) [1] "right"
> substr(a, 1, 4) [1] "left" > > substr(a, 3, 7) [1] "ftrig" > > substr(a, 5, 10) [1] "right"
library(caret) set.seed(32343) modelFit = train(type~.,data=training, method=
Error in library(e1071) : there is no package called ‘e1071’
circleFun <- function(center = c(0,0),diameter = 1, npoints = 100){ r = diameter / 2 tt <- seq(0,2*pi,length.out = npoints) xx <- center[1] + r * cos(tt) yy <- center[2] + r * sin(tt) return(data.frame(x = xx, y = yy)) }
dat <- circleFun(c(1,-1),2.3,npoints = 100) ggplot(dat,aes(x,y)) + geom_path()
library(grid) qplot(1:10, 1:10, geom="blank") + annotation_custom(grob=circleGrob(r=unit(1,"npc")), xmin=2, xmax=4, ymin=4, ymax=6)
g<-g+annotate("path", x=xc+r*cos(seq(0,2*pi,length.out=100)), y=yc+r*sin(seq(0,2*pi,length.out=100)))
dat = data.frame(x=runif(1), y=runif(1)) ggplot() + scale_x_continuous(limits = c(0,1)) + scale_y_continuous(limits = c(0,1))+ geom_point(aes(x=x, y=y), data=dat, size=50, shape=1, color="gold4")
gg_circle <- function(r, xc, yc, color="black", fill=NA, ...) { x <- xc + r*cos(seq(0, pi, length.out=100)) ymax <- yc + r*sin(seq(0, pi, length.out=100)) ymin <- yc + r*sin(seq(0, -pi, length.out=100)) annotate("ribbon", x=x, ymin=ymin, ymax=ymax, color=color, fill=fill, ...) } square <- ggplot(data.frame(x=0:1, y=0:1), aes(x=x, y=y)) square + gg_circle(r=0.25, xc=0.5, yc=0.5) square + gg_circle(r=0.25, xc=0.5, yc=0.5, color="blue", fill="red", alpha=0.2)
ggplot() + geom_rect(aes(xmin=-1,ymin=-1,xmax=1,ymax=1), fill=NA) + coord_polar()
foreach(ntree=rep(25,2),.combine=combine,.packages= .inorder=FALSE) %dopar% { print("RANDOM FOREST") randomForest(classForm,data=data,na.action=na.action,do.trace=do.trace,ntree=ntree,mtry=mtry) }
log.socket <- make.socket(port=4000) Log <- function(text, ...) { msg <- sprintf(paste0(as.character(Sys.time()), ": ", text, "\n"), ...) cat(msg) write.socket(log.socket, msg) }
library(doSNOW) cl <- makeCluster(4, outfile="") registerDoSNOW(cl)
library(doSNOW) library(tcltk) library(randomForest) cl <- makeSOCKcluster(3) registerDoSNOW(cl) ntasks <- 100 pb <- tkProgressBar(max=ntasks) progress <- function(n) setTkProgressBar(pb, n) opts <- list(progress=progress) x <- matrix(runif(500), 100) y <- gl(2, 50) rf <- foreach(ntree=rep(25, ntasks), .combine=combine, .multicombine=TRUE, .packages= .options.snow=opts) %dopar% { randomForest(x, y, ntree=ntree) }
progress <- function(n) cat(sprintf("task %d is complete\n", n))
library(parallel) library(doSNOW) cl<-makeCluster(detectCores(),type="SOCK") registerDoSNOW(cl)
foreach(ntree=rep(25,2),.combine=combine,.packages=c( .inorder=FALSE) %dopar% { mypb <- tkProgressBar(title = "R progress bar", label = "", min = 0, max = 1, initial = 0, width = 300) setTkProgressBar(mypb, 1, title = "RANDOM FOREST", label = NULL) ans <- randomForest(classForm,data=data,na.action=na.action,do.trace=do.trace,ntree=ntree,mtry=mtry) close(mypb) ans }
jSeq <- seq_len(30) foreach(i = seq_len(2), .packages = c( mypb <- tkProgressBar(title = "R progress bar", label = "", min = 0, max = max(jSeq), initial = 0, width = 300) foreach(j = jSeq) %do% { Sys.sleep(.1) setTkProgressBar(mypb, j, title = "RANDOM FOREST", label = NULL) } NULL }
write.table(result, file=paste("RF_ntree_",ntree,"_dims_",dims,".txt", sep=""), sep="\t", row.names=F)
Date Strike Volatility 2003-01-01 20 0.2 2003-01-01 30 0.3 2003-01-01 40 0.4 etc.
library(zoo) x <- 1:10 y <- 3*x+25 id <- order(x) AUC <- sum(diff(x[id])*rollmean(y[id],2))
n <- 100 mean <- 50 sd <- 50 x <- seq(20, 80, length=n) y <- dnorm(x, mean, sd) *100 require(Bolstad2) sintegral(x,y)$int require(MESS) auc(x,y, type = require(sfsmisc) integrate.xy(x,y)
sum(diff(strike) * (head(volatility,-1)+tail(volatility,-1)))/2
library(zoo) auc = function(y, x, start=first(x), stop=last(x), na.stop=FALSE, ex.na.stop=TRUE){ if(all(is.na(y))) return(NA) bounds = which(x==start):which(x==stop) x=x[bounds] y=y[bounds] r = which(is.na(y)) if(length(r)>0){ if(na.stop==TRUE) return(NA) if(ex.na.stop==TRUE & (is.na(first(y)) | is.na(last(y)))) return(NA) if(is.na(last(y))) warning("Last value is NA, so this AUC is bad and you should feel bad", call. = FALSE) if(is.na(first(y))) warning("First value is NA, so this AUC is bad and you should feel bad", call. = FALSE) x = x[-r] y = y[-r] } sum(diff(x[order(x)])*rollmean(y[order(x)],2)) }
pred <- prediction(classifier.labels, actual.labs) attributes(performance(pred,
output<-matrix(,15,) for(`enter code here`){ normF<-`enter code here` output<-cbind(output,normF) }
mat <- matrix(, nrow = 15, ncol = n.columns) for(column in 1:n.columns){ mat[, column] <- vector }
List <- list() for(i in 1:n) { normF <- List[[i]] <- normF } Matrix = do.call(cbind, List)
for (ic in 1:(dim(centroid)[2])) { cluster[[ic]]=matrix(,nrow=2,ncol=0) } if(pdist[ip]>-1) { cluster[[pindex[ip]]]=cbind(cluster[[pindex[ip]]],points[,ip]) }
s = `"[some letters and numbers]_[a number]_[more numbers, letters, punctuation, etc, anything]"`
> grepl("^[^_]+_1",s) [1] FALSE > grepl("^[^_]+_2",s) [1] TRUE
> if(length(grep("ab","aacd"))>0) print("found") else print("Not found") [1] "Not found" > if(length(grep("ab","abcd"))>0) print("found") else print("Not found") [1] "found"
a <- c(1,2,0,3,7,0,0,0) which.min(a) which(a == min(a))
a <- c(1, 2, 0, 3, 7, 0) which(a == min(a)) which.min(a)
a = runif(10000) Rfast::min_max(a,index=T) which(a == min(a)) a = runif(1000000) microbenchmark::microbenchmark( min_max = Rfast::min_max(a,index=T), which1 = which(a == min(a)), which2 = which.min(a) ) Unit: milliseconds expr min lq mean median uq max neval min_max 1.889293 1.9123860 2.08242647 1.9271395 2.0359730 3.527565 100 which1 9.809527 10.0342505 13.16711078 10.3671640 14.7839955 111.424664 100 which2 2.400745 2.4216995 2.66374110 2.4471435 2.5985265 4.259249 100
plot(x,y, xaxt="n") axis(1, xaxp=c(10, 200, 19), las=2)
plot(x,y, xaxt="n") axis(1, at = seq(10, 200, by = 10), las=2)
"a logical value specifying whether (numerical) annotations are to be made at the tickmarks,"
x <- seq(10,200,10) y <- runif(x) plot(x,y,xaxt= axis(side = 1, at = x,labels = T)
plot(x,y,xaxt = axis(side=1,at=c(1,20,30,50),labels=c("1975","1980","1985","1990"))
require(graphics) ts.plot(ldeaths, mdeaths, xlab="year", ylab="deaths", lty=c(1:2), gpars=list(xaxt="n")) axis(1, at = seq(1974, 1980, by = 2))
l1 = list(2, 3) l2 = list(4) list(2, 3, 4) [[1]] [1] 2 [[2]] [1] 3 [[3]] [1] 4 c(l1, l2) [[1]] [1] 2 [[2]] [1] 3 [[3]] [1] 4
df <- data.frame(id=runif(12), x=1:12, y=runif(12)) ggplot(df, aes(x=x, y=y)) + geom_point(aes(fill=id, size=id), colour="black", shape=21)
ggplot(df, aes(x=x, y=y)) + geom_point(aes(fill=id, size=id), colour="black", shape=21, lwd=2)
df <- data.frame(id=runif(12), x=1:12, y=runif(12)) ggplot(df, aes(x=x, y=y)) + geom_point(aes(fill=id, size=id), colour="black", shape=21, stroke = 2)
ggplot(df, aes(x=x, y=y)) + geom_point(aes(size=id+0.5), colour="black" , show_guide = FALSE )+ scale_size( guide = "none" )+ geom_point(aes(fill=id, size=id), colour="black", shape=21)
dev.new(width=5, height=4, unit="in") plot(1:20) dev.new(width = 550, height = 330, unit = "px") plot(1:15)
pdf( "mygraph.pdf", width = 11, height = 8 ) plot( x, y )
ggsave("mtcars.png", width = 20, height = 20, units = "cm")
df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20)) ggplot(df,aes(x=x,y=y,label=n))+geom_point()+geom_text(size=8,hjust=-0.5)
library (ggplot2) library(grid) df=data.frame(y=c("cat1","cat2","cat3"),x=c(12,10,14),n=c(5,15,20)) p <- ggplot(df, aes(x,y)) + geom_point() + theme(plot.margin = unit(c(1,3,1,1), "lines")) for (i in 1:length(df$n)) { p <- p + annotation_custom( grob = textGrob(label = df$n[i], hjust = 0, gp = gpar(cex = 1.5)), ymin = df$y[i], ymax = df$y[i], xmin = 14.3, xmax = 14.3) } gt <- ggplot_gtable(ggplot_build(p)) gt$layout$clip[gt$layout$name == "panel"] <- "off" grid.draw(gt)
df <- data.frame(y=c("cat1","cat2","cat3"), x=c(12,10,14), n=c(5,15,20)) ggplot(df,aes(x=x,y=y,label=n)) + geom_point()+ geom_text(x = 14.25, hjust = 0, size = 8) + coord_cartesian(xlim = c(10, 14), clip = theme(plot.margin = unit(c(1,3,1,1), "lines"))
require(grid) df = data.frame(y = c("cat1", "cat2", "cat3"), x = c(12, 10, 14), n = c(5, 15, 20)) p <- ggplot(df, aes(x, y)) + geom_point() + theme(plot.margin = unit(c(1, 3, 1, 1), "lines")) p grid.text("20", x = unit(0.91, "npc"), y = unit(0.80, "npc")) grid.text("15", x = unit(0.91, "npc"), y = unit(0.56, "npc")) grid.text("5", x = unit(0.91, "npc"), y = unit(0.31, "npc"))
library(ggplot2) df <- data.frame(x = 1:5, y = sample(1:10, 5, TRUE)) qplot(factor(x),y, data = df) + scale_x_discrete(breaks = 1:5, labels=c("foo","bar","baz","phi","fum")) + xlab(NULL)
x <- sample(1:5, 20, T) y <- rnorm(20) + x df <- data.frame(x = ordered(x), y = y) ggplot(df,aes(x,y)) + geom_point() + scale_x_discrete(breaks = 1:5, labels = letters[1:5])
require(ggplot2) dat <- data.frame(X = sample(1:5, 100, replace = TRUE), Y = rnorm(100))
(p1 <- ggplot(dat, aes(x = X, y = Y)) + geom_point())
dat2 <- within(dat, X <- factor(X, labels = letters[1:5])) (p2 <- ggplot(dat2, aes(x = X, y = Y)) + geom_point())
lapply(c("devtools", "sna", "intergraph", "igraph", "network"), install.packages) library(devtools) devtools::install_github(repo="ggally", username="ggobi") lapply(c("sna", "intergraph", "GGally", "igraph", "network"), require, character.only=T) set.seed(123) g <- barabasi.game(1000) g.plot <- ggnet(g, mode = "fruchtermanreingold") g.plot
install.packages("devtools") library(devtools) install.packages("igraph") library(igraph) install_github( library(RBioFabric) # # set.seed(123) bfGraph = barabasi.game(1000) height <- vcount(bfGraph) width <- ecount(bfGraph) aspect <- height / width; plotWidth <- 100.0 plotHeight <- plotWidth * (aspect * 1.2) pdf("myBioFabricOutput.pdf", width=plotWidth, height=plotHeight) bioFabric(bfGraph) dev.off()
library(igraph) set.seed(123) g <- barabasi.game(1000) %>% as.undirected() c_g <- fastgreedy.community(g) res_g <- simplify(contract(g, membership(c_g)))
mem <- data.frame(vertices = 1:vcount(g), memeber = as.numeric(membership(c_g)))
x = data.frame(q=1,w=2,e=3, ...and many many columns...)
oldnames = c("q","e") newnames = c("A","B") for(i in 1:2) names(x)[names(x) == oldnames[i]] = newnames[i]
library(data.table) d <- data.frame(a=1:2,b=2:3,d=4:5) setnames(d, old = c( d
library(dplyr) df = data.frame(q = 1, w = 2, e = 3) df %>% rename(A = q, B = e)
library(dplyr) df = data.frame(q = 1, w = 2, e = 3) oldnames = c("q","e") newnames = c("A","B") df %>% rename_at(vars(oldnames), ~ newnames)
x <- data.frame(q=1,w=2,e=3) > x q w e 1 1 2 3 colnames(x) <- c("A","w","B") > x A w B 1 1 2 3
existing <- match(oldNames,names(x)) names(x)[na.omit(existing)] <- newNames[which(!is.na(existing))]
library(tidyverse) data <- tibble( `Bad NameS 1` = letters[1:10], `bAd NameS 2` = rnorm(10) ) data `Bad NameS 1` `bAd NameS 2` <chr> <dbl> 1 a -0.840 2 b -1.56 3 c -0.625 4 d 0.506 5 e -1.52 6 f -0.212 7 g -1.50 8 h -1.53 9 i 0.420 10 j 0.957 data %>% set_names(~ str_to_lower(.) %>% str_replace_all(" ", "_") %>% str_replace_all("bad", "good")) good_names_1 good_names_2 <chr> <dbl> 1 a -0.840 2 b -1.56 3 c -0.625 4 d 0.506 5 e -1.52 6 f -0.212 7 g -1.50 8 h -1.53 9 i 0.420 10 j 0.957
x <- data.frame(q=1,w=2,e=3) x names(x)[match(oldnames,names(x))] <- newnames x
names(x) <- gsub("q", "A", gsub("e", "B", names(x) ) )
names(labWide) Lab1 Lab10 Lab11 Lab12 Lab13 Lab14 Lab15 Lab16 1 35.75366 22.79493 30.32075 34.25637 30.66477 32.04059 24.46663 22.53063 nameVec <- names(labWide) nameVec <- gsub("Lab","LabLat",nameVec) names(labWide) <- nameVec "LabLat1" "LabLat10" "LabLat11" "LabLat12" "LabLat13" "LabLat14""LabLat15" "LabLat16" "
rename <- function(x, old_names, new_names) { stopifnot(length(old_names) == length(new_names)) old_nms <- old_names[old_names %in% names(x)] new_nms <- new_names[old_names %in% names(x)] not_nms <- setdiff(old_names, old_nms) if(length(not_nms) > 0) { msg <- paste(paste(not_nms, collapse = ", "), "are not columns in the dataframe, so won warning(msg) } names(x)[names(x) %in% old_nms] <- new_nms x } x = data.frame(q = 1, w = 2, e = 3) rename(x, c("q", "e"), c("Q", "E")) Q w E 1 1 2 3
colnames(df) <- paste("renamed_",colnames(df),sep="")
rename <-function(x){ oldNames = c("a","b","c") newNames = c("d","e","f") existing <- match(oldNames,names(x)) names(x)[na.omit(existing)] <- newNames[which(!is.na(existing))] return(x) }
require(venneuler) v <- venneuler(c(A=450, B=1800, "A&B"=230)) plot(v)
require(VennDiagram) venn.diagram(list(B = 1:1800, A = 1571:2020),fill = c("red", "green"), alpha = c(0.5, 0.5), cex = 2,cat.fontface = 4,lty =2, fontfamily =3, filename = "trial2.emf");
library(eulerr) fit <- euler(c(A = 450, B = 1800, "A&B" = 230)) plot(fit)
require(gplots) oneName <- function() paste(sample(LETTERS,5,replace=TRUE),collapse="") geneNames <- replicate(1000, oneName()) GroupA <- sample(geneNames, 400, replace=FALSE) GroupB <- sample(geneNames, 750, replace=FALSE) GroupC <- sample(geneNames, 250, replace=FALSE) GroupD <- sample(geneNames, 300, replace=FALSE) venn(list(GrpA=GroupA,GrpB=GroupB,GrpC=GroupC,GrpD=GroupD))
1) file_1.csv contains object city[[1]] 2) file_2.csv contains object city[[2]]
> data = load("1.RData") > data [1] "city" "country" "population" > city [[1]] NEW YORK 1.1 SAN FRANCISCO 3.1 [[2]] TEXAS 1.3 SEATTLE 1.4 > class(city) [1] "list" > country [1] "east" "west" "north" > class(country) [1] "character" > population [1] 10 11 13 14 > class(population) [1] "integer"
saveRDS(city, "city.rds") city <- readRDS("city.rds") city2 <- readRDS("city.rds")
save(city, file="city.rds") save(country, file="country.rds")
city <- readRDS("city.rds") country <- readRDS("country.rds")
city_list <- readRDS("city.rds") country_vector <- readRDS("country.rds")
idnat idbp idnat2 1 french mainland mainland 2 french colony overseas 3 french overseas overseas 4 foreign foreign foreign
if idnat = "french" then do; if idbp in ("overseas","colony") then idnat2 = "overseas"; else idnat2 = "mainland"; end; else idnat2 = "foreigner"; run;
if(idnat=="french"){ idnat2 <- "mainland" } else if(idbp=="overseas"|idbp=="colony"){ idnat2 <- "overseas" } else { idnat2 <- "foreigner" }
Warning message: In if (idnat=="french") { : the condition has length > 1 and only the first element will be used
idnat2 <- ifelse (idnat=="french", "mainland", ifelse (idbp=="overseas"|idbp=="colony", "overseas") ) else (idnat2 <- "foreigner")
A B C 1 3 1 =if(A1 > B1, 1, 0) 2 2 2 =if(A2 > B2, 1, 0) 3 1 3 =if(A3 > B3, 1, 0)
> a <- 3:1; b <- 1:3 > ifelse(a > b, 1, 0) [1] 1 0 0
ifelse(<condition>, <yes>, ifelse(<condition>, <yes>, <no>)) ifelse(<condition>, ifelse(<condition>, <yes>, <no>), <no>) ifelse(<condition>, ifelse(<condition>, <yes>, <no>), ifelse(<condition>, <yes>, <no>) ) ifelse(<condition>, <yes>, ifelse(<condition>, <yes>, ifelse(<condition>, <yes>, <no>) ) )
df <- read.table(header=TRUE, text=" idnat idbp idnat2 french mainland mainland french colony overseas french overseas overseas foreign foreign foreign" ) with(df, ifelse(idnat=="french", ifelse(idbp %in% c("overseas","colony"),"overseas","mainland"),"foreign") )
> > with(df, idnat=="french") [1] TRUE TRUE TRUE FALSE > > > > df$idnat2 <- with(df, + if(idnat=="french"){ + idnat2 <- "xxx" + } + ) Warning message: In if (idnat == "french") { : the condition has length > 1 and only the first element will be used > > df idnat idbp idnat2 1 french mainland xxx 2 french colony xxx 3 french overseas xxx 4 foreign foreign xxx >
test <- function(x) { if(x=="french") { "french" } else{ "not really french" } } apply(array(df[["idnat"]]),MARGIN=1, FUN=test)
idnat <- sample(c("french","foreigner"),100,TRUE) idbp <- rep(NA,100) idbp[idnat=="french"] <- sample(c("mainland","overseas","colony"),sum(idnat=="french"),TRUE) out <- ifelse(idnat=="french" & !idbp %in% c("overseas","colony"), "mainland", ifelse(idbp %in% c("overseas","colony"),"overseas", "foreigner")) cbind(idnat,idbp,out)
idnat idbp idnat2 1: french mainland mainland 2: french colony overseas 3: french overseas overseas 4: foreign foreign foreign
library(data.table) n_row <- 10L set.seed(1L) DT <- data.table(idnat = "french", idbp = sample(c("mainland", "colony", "overseas", "foreign"), n_row, replace = TRUE)) DT[idbp == "foreign", idnat := "foreign"][]
idnat idbp 1: french colony 2: french colony 3: french overseas 4: foreign foreign 5: french mainland 6: foreign foreign 7: foreign foreign 8: french overseas 9: french overseas 10: french mainland
DT[lookup, on = .(idnat, idbp), idnat2 := i.idnat2][]
idnat idbp idnat2 1: french colony overseas 2: french colony overseas 3: french overseas overseas 4: foreign foreign foreign 5: french mainland mainland 6: foreign foreign foreign 7: foreign foreign foreign 8: french overseas overseas 9: french overseas overseas 10: french mainland mainland
idnat2 <- replace(idbp, idbp == "colony", "overseas")
df <-structure(list(idnat = structure(c(2L, 2L, 2L, 1L), .Label = c("foreign", "french"), class = "factor"), idbp = structure(c(3L, 1L, 4L, 2L), .Label = c("colony", "foreign", "mainland", "overseas"), class = "factor")), .Names = c("idnat", "idbp"), class = "data.frame", row.names = c(NA, -4L))
library(sqldf) sqldf("SELECT idnat, idbp, CASE WHEN idbp IN ( ELSE idbp END AS idnat2 FROM df")
library(dplyr) df %>% mutate(idnat2 = case_when(.$idbp == .$idbp %in% c("colony", "overseas") ~ "overseas", TRUE ~ "foreign"))
idnat idbp idnat2 1 french mainland mainland 2 french colony overseas 3 french overseas overseas 4 foreign foreign foreign
DT[, idnat2 := ifelse(idbp %in% "foreign", "foreign", ifelse(idbp %in% c("colony", "overseas"), "overseas", "mainland" ))]
idnat idbp 1 french mainland 2 french colony 3 french overseas 4 foreign foreign
idnat idbp idnat2 1: french mainland mainland 2: french colony overseas 3: french overseas overseas 4: foreign foreign foreign
idnat=c("french","french","french","foreign") idbp=c("mainland","colony","overseas","foreign") idnat2=as.character(vector()) for(i in 1:length(idnat)) { if(idnat[i] == "french" & idbp[i] == "mainland") { idnat2[i] = "mainland" } else if (idnat[i] == "french" & (idbp[i] == "colony" | idbp[i] == "overseas")) { idnat2[i] = "overseas" } else { idnat2[i] = "foreign" } } data.frame(idnat,idbp,idnat2)
idnat <- c(1,1,1,2) idbp <- c(1,2,3,4) t <- cbind(idnat, idbp) idnat2 <- vector() for(i in 1:length(idnat)) { if (t[i,1] == 2) { idnat2[i] <- 3 } else if (t[i,2] == 1) { idnat2[i] <- 2 } else { idnat2[i] <- 1 } } cbind(t,idnat2)
qqnorm(residuals(LM), ylab="Residuals") qqline(residuals(LM))
ggQQ <- function(LM) { y <- quantile(LM$resid[!is.na(LM$resid)], c(0.25, 0.75)) x <- qnorm(c(0.25, 0.75)) slope <- diff(y)/diff(x) int <- y[1L] - slope * x[1L] p <- ggplot(LM, aes(sample=.resid)) + stat_qq(alpha = 0.5) + geom_abline(slope = slope, intercept = int, color="blue") return(p) }
qqplot.data <- function (vec) { y <- quantile(vec[!is.na(vec)], c(0.25, 0.75)) x <- qnorm(c(0.25, 0.75)) slope <- diff(y)/diff(x) int <- y[1L] - slope * x[1L] d <- data.frame(resids = vec) ggplot(d, aes(sample = resids)) + stat_qq() + geom_abline(slope = slope, intercept = int) }
gg_qq <- function(x, distribution = "norm", ..., line.estimate = NULL, conf = 0.95, labels = names(x)){ q.function <- eval(parse(text = paste0("q", distribution))) d.function <- eval(parse(text = paste0("d", distribution))) x <- na.omit(x) ord <- order(x) n <- length(x) P <- ppoints(length(x)) df <- data.frame(ord.x = x[ord], z = q.function(P, ...)) if(is.null(line.estimate)){ Q.x <- quantile(df$ord.x, c(0.25, 0.75)) Q.z <- q.function(c(0.25, 0.75), ...) b <- diff(Q.x)/diff(Q.z) coef <- c(Q.x[1] - b * Q.z[1], b) } else { coef <- coef(line.estimate(ord.x ~ z)) } zz <- qnorm(1 - (1 - conf)/2) SE <- (coef[2]/d.function(df$z)) * sqrt(P * (1 - P)/n) fit.value <- coef[1] + coef[2] * df$z df$upper <- fit.value + zz * SE df$lower <- fit.value - zz * SE if(!is.null(labels)){ df$label <- ifelse(df$ord.x > df$upper | df$ord.x < df$lower, labels[ord],"") } p <- ggplot(df, aes(x=z, y=ord.x)) + geom_point() + geom_abline(intercept = coef[1], slope = coef[2]) + geom_ribbon(aes(ymin = lower, ymax = upper), alpha=0.2) if(!is.null(labels)) p <- p + geom_text( aes(label = label)) print(p) coef }
Animals2 <- data(Animals2, package = "robustbase") mod.lm <- lm(log(Animals2$brain) ~ log(Animals2$body)) x <- rstudent(mod.lm) gg_qq(x)
ggQQ = function(lm) { d <- data.frame(std.resid = rstandard(lm)) y <- quantile(d$std.resid[!is.na(d$std.resid)], c(0.25, 0.75)) x <- qnorm(c(0.25, 0.75)) slope <- diff(y)/diff(x) int <- y[1L] - slope * x[1L] p <- ggplot(data=d, aes(sample=std.resid)) + stat_qq(shape=1, size=3) + labs(title="Normal Q-Q", x="Theoretical Quantiles", y="Standardized Residuals") + geom_abline(slope = slope, intercept = int, linetype="dashed") return(p) }
df <- data.frame(cbind(x=c(1:100),y=c(1:100+rnorm(100)))) ggQQ(lm(y~x,data=df))
qq.line <- function(data, qf, na.rm) { q.sample <- quantile(data, c(0.25, 0.75), na.rm = na.rm) q.theory <- qf(c(0.25, 0.75)) slope <- diff(q.sample) / diff(q.theory) intercept <- q.sample[1] - slope * q.theory[1] list(slope = slope, intercept = intercept) } StatQQLine <- ggproto("StatQQLine", Stat, required_aes = c( compute_group = function(data, scales, distribution = stats::qnorm, dparams = list(), na.rm = FALSE) { qf <- function(p) do.call(distribution, c(list(p = p), dparams)) n <- length(data$sample) theoretical <- qf(stats::ppoints(n)) qq <- qq.line(data$sample, qf = qf, na.rm = na.rm) line <- qq$intercept + theoretical * qq$slope data.frame(x = theoretical, y = line) } ) stat_qqline <- function(mapping = NULL, data = NULL, geom = "line", position = "identity", ..., distribution = stats::qnorm, dparams = list(), na.rm = FALSE, show.legend = NA, inherit.aes = TRUE) { layer(stat = StatQQLine, data = data, mapping = mapping, geom = geom, position = position, show.legend = show.legend, inherit.aes = inherit.aes, params = list(distribution = distribution, dparams = dparams, na.rm = na.rm, ...)) }
> test.data <- data.frame(sample=rnorm(100, 10, 2)) > test.data.2 <- data.frame(sample=rt(100, df=2)) > ggplot(test.data, aes(sample=sample)) + stat_qq() + stat_qqline() > ggplot(test.data.2, aes(sample=sample)) + stat_qq(distribution=qt, dparams=list(df=2)) + + stat_qqline(distribution=qt, dparams=list(df=2))
myresiduals <- rnorm(100) ^ 2 ggplot(data=as.data.frame(qqnorm( myresiduals , plot=F)), mapping=aes(x=x, y=y)) + geom_point() + geom_smooth(method="lm", se=FALSE)
library(ggplot2) model <- lm(mpg ~ wt, data=mtcars) ggplot(model, aes(sample = rstandard(model))) + geom_qq() + stat_qq_line()
df <- data.frame( y=rpois(100, 4) ) ggplot(df, aes(sample=y)) + stat_qq() + geom_abline(intercept=mean(df$y), slope = sd(df$y))
df <- data.frame(y = rt(200, df = 5)) p <- ggplot(df, aes(sample = y)) p + stat_qq() + stat_qq_line()
library(reshape) library(ggplot2) library(gridExtra) require(ggplot2) data2<-structure(list(IR = structure(c(4L, 3L, 2L, 1L, 4L, 3L, 2L, 1L ), .Label = c("0.13-0.16", "0.17-0.23", "0.24-0.27", "0.28-1" ), class = "factor"), variable = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L), .Label = c("Real queens", "Simulated individuals" ), class = "factor"), value = c(15L, 11L, 29L, 42L, 0L, 5L, 21L, 22L), Legend = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L), .Label = c("Real queens", "Simulated individuals"), class = "factor")), .Names = c("IR", "variable", "value", "Legend"), row.names = c(NA, -8L), class = "data.frame") p <- ggplot(data2, aes(x =factor(IR), y = value, fill = Legend, width=.15)) data3<-structure(list(IR = structure(c(4L, 3L, 2L, 1L, 4L, 3L, 2L, 1L ), .Label = c("0.13-0.16", "0.17-0.23", "0.24-0.27", "0.28-1" ), class = "factor"), variable = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L), .Label = c("Real queens", "Simulated individuals" ), class = "factor"), value = c(2L, 2L, 6L, 10L, 0L, 1L, 4L, 4L), Legend = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L), .Label = c("Real queens", "Simulated individuals"), class = "factor")), .Names = c("IR", "variable", "value", "Legend"), row.names = c(NA, -8L), class = "data.frame") q<- ggplot(data3, aes(x =factor(IR), y = value, fill = Legend, width=.15)) q + geom_bar(position=
ggplot(data2, aes(x =factor(IR), y = value, fill = Legend, width=.15)) + geom_bar(position= scale_y_continuous(breaks=c(1,3,7,10))
q + geom_bar(position= scale_y_continuous(breaks= pretty_breaks())
library(scales) ggplot(data2, aes(x = factor(IR), y = value, fill = Legend, width = .15)) + geom_bar(position = scale_y_continuous(breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1)))))
int_breaks <- function(x, n = 5) pretty(x, n)[pretty(x, n) %% 1 == 0]
q + geom_bar(position= scale_y_continuous(labels = function (x) floor(x))
library(shiny) shinyUI(pageWithSidebar( headerPanel("Density Map"), sidebarPanel( sliderInput("slider_year", "YEAR:", min = 2001, max = 2011, value = 2009, format=" ) ) ), mainPanel( plotOutput("event_heatmap_map", width = "100%", height = "100%") ) ))
library(shiny) library(ggmap) library(ggplot2) mydata <- read.csv("/var/shiny-server/www/dMetrics.csv") shinyServer(function(input, output) { output$event_heatmap_map <- renderPlot(width = "auto", height = 640,{ slice_year <- mydata[mydata$YEAR==input$slider_year,] map <- get_map(c(lon = -55.3632715, lat = 31.7632836), zoom = 3, source = world <- ggmap(map) world <- world + stat_density2d(data = slice_year, aes(x = WEST, y = NORTH, fill = ..level.., alpha = ..level..), show_guide = FALSE, geom = "polygon", na.rm = TRUE) + scale_fill_gradient(name="Density", low="maroon", high="yellow", guide = plot(world) }) })
sliderInput("slider_year", "YEAR:", min = 2001, max = 2011, value = 2009, format=" )
tags$div(title="Click here to slide through years", sliderInput("slider_year", "YEAR:", min = 2001, max = 2011, value = 2009, format=" ) )
library(shinyBS) bsTooltip(id = "someInput", title = "This is an input", placement = "left", trigger = "hover") addTooltip(session, id = "someInput", title = "This is an input.", placement = "left", trigger = "hover")
SC_LTSL_BM 16.8275 SC_STSL_BM 17.3914 proB_FrBC_FL 122.1580 preB_FrD_FL 18.5051 B_Fo_Sp 14.4693 B_GC_Sp 15.4986
library(ggplot2) dat <- read.table("http: pdf("~/Desktop/test.pdf") ggplot(dat,aes(x=V1,y=V2))+geom_bar() dev.off()
dat <- read.table(text= "SC_LTSL_BM 16.8275 SC_STSL_BM 17.3914 proB_FrBC_FL 122.1580 preB_FrD_FL 18.5051 B_Fo_Sp 14.4693 B_GC_Sp 15.4986", header = FALSE, stringsAsFactors = FALSE) dat$V1 <- factor(dat$V1, levels = dat$V1) library(ggplot2) ggplot(dat,aes(x=V1,y=V2))+geom_bar(stat="identity")
dat <- read.table(text= "SC_LTSL_BM 16.8275 SC_STSL_BM 17.3914 proB_FrBC_FL 122.1580 preB_FrD_FL 18.5051 B_Fo_Sp 14.4693 B_GC_Sp 15.4986", header = FALSE, stringsAsFactors = FALSE) library(ggplot2) ggplot(dat,aes(x=V1,y=V2))+ geom_bar(stat="identity")+ scale_x_discrete(limits=dat$V1)
x$name <- factor(x$name, levels = x$name[order(x$val)])
library(dplyr) dat <- read.table("...") %>% mutate(row = row_number()) ggplot(df,aes(x=reorder(V1,row),y=V2))+geom_bar()
df <- data.frame(x=factor(LETTERS[1:4]), y=sample(1:100, 4)) library(ggplot2) ggplot(data=df, aes(x=x, y=y, width=.5)) + geom_bar(stat="identity", position="identity") + opts(title="width = .5") + labs(x="", y="") + theme_bw()
df <- data.frame(g=gl(2, 1, labels=letters[1:2]), y=sample(1:100, 4)) x.seq <- c(1,2,4,5) ggplot(data=transform(df, x=x.seq), aes(x=x, y=y, width=.85)) + geom_bar(stat="identity", aes(fill=g)) + labs(x="", y="") + scale_x_discrete(breaks = NA) + geom_text(aes(x=c(sum(x.seq[1:2])/2, sum(x.seq[3:4])/2), y=0, label=c("X","Y")), vjust=1.2, size=8)
ggplot(data = d, aes(x=X, y=Y, fill=F)) + geom_bar(width = 0.8, position = position_dodge(width = 0.9))
geom_text(aes(x=c(sum(x.seq[1:2])/2, sum(x.seq[3:4])/2), y=0, label=c("X","Y")), vjust=1.2, size=8)
scale_x_continuous(breaks=c(mean(x.seq[1:2]), mean(x.seq[3:4])), labels=c("X", "Y"))
d <- data.frame(dates = strptime(paste(2016, "01", 1:10, sep = "-"), "%Y-%m-%d"), values = 1:10) ggplot(d, aes(dates, values)) + geom_bar(stat = "identity", width = 60*60*24) ggplot(d, aes(dates, values)) + geom_bar(stat = "identity", width = 60*60*24*0.5)
options(defaultPackages=c(getOption("defaultPackages"), "mypackage1","mypackage2", ... [etc.]))
old <- getOption("defaultPackages") options(defaultPackages = c(old, "tidyverse"))
df <- read.table(text = ' Quarter Coupon Total 1 "Dec 06" 25027.072 132450574 2 "Dec 07" 76386.820 194154767 3 "Dec 08" 79622.147 221571135 4 "Dec 09" 74114.416 205880072 5 "Dec 10" 70993.058 188666980 6 "Jun 06" 12048.162 139137919 7 "Jun 07" 46889.369 165276325 8 "Jun 08" 84732.537 207074374 9 "Jun 09" 83240.084 221945162 10 "Jun 10" 81970.143 236954249 11 "Mar 06" 3451.248 116811392 12 "Mar 07" 34201.197 155190418 13 "Mar 08" 73232.900 212492488 14 "Mar 09" 70644.948 203663201 15 "Mar 10" 72314.945 203427892 16 "Mar 11" 88708.663 214061240 17 "Sep 06" 15027.252 121285335 18 "Sep 07" 60228.793 195428991 19 "Sep 08" 85507.062 257651399 20 "Sep 09" 77763.365 215048147 21 "Sep 10" 62259.691 168862119 str(df) $ Quarter : Factor w/ 24 levels "Dec 06","Dec 07",..: 1 2 3 4 5 7 8 9 10 11 ... $ Coupon: num 25027 76387 79622 74114 70993 ... $ Total: num 132450574 194154767 221571135 205880072 188666980 ...
model <- lm(df$Total ~ df$Coupon, data=df) > model Call: lm(formula = df$Total ~ df$Coupon) Coefficients: (Intercept) df$Coupon 107286259 1349
Quarter = c("Jun 11", "Sep 11", "Dec 11") Total = c(79037022, 83100656, 104299800) Coupon = data.frame(Quarter, Total) Coupon$estimate <- predict(model, newdate = Coupon$Total)
Error in `$<-.data.frame`(`*tmp*`, "estimate", value = c(60980.3823396919, : replacement has 21 rows, data has 3
model <- lm(Coupon ~ Total, data=df) new.df <- data.frame(Total=c(79037022, 83100656, 104299800)) predict(model, new.df)
model <- lm(Coupon ~ Total, data=df) predict(model, data.frame(Total=c(79037022, 83100656, 104299800)))
load("C:/Users/isfar.RData", ex <- new.env()) ls.str(ex)
isfar<-load("C:/Users/isfar.RData") if(is.data.frame(isfar)){ names(isfar) }
set.seed(1) DT <- data.table(VAL = sample(c(1, 2, 3), 10, replace = TRUE)) VAL 1: 1 2: 2 3: 2 4: 3 5: 1 6: 3 7: 3 8: 2 9: 2 10: 1
VAL COUNT IDX 1: 1 3 1 2: 2 4 1 3: 2 4 2 4: 3 3 1 5: 1 3 2 6: 3 3 2 7: 3 3 3 8: 2 4 3 9: 2 4 4 10: 1 3 3
dt[, list(COUNT = length(VAL == VAL[.I]), IDX = which(which(VAL == VAL[.I]) == .I))]
ggplot(mtcars, aes(wt, mpg, shape=factor(cyl))) + geom_point() + theme_bw()
start.time duration 1 2012-02-06 15:47:00 1 2 2012-02-06 15:02:00 2 3 2012-02-22 10:08:00 3 4 2012-02-22 09:32:00 4 5 2012-03-21 13:47:00 5
foo <- data.frame(start.time = c("2012-02-06 15:47:00", "2012-02-06 15:02:00", "2012-02-22 10:08:00"), duration = c(1,2,3))
t.str <- strptime(foo$start.time, "%Y-%m-%d %H:%M:%S") library(lubridate) t.lub <- ymd_hms(foo$start.time)
h.str <- as.numeric(format(t.str, "%H")) + as.numeric(format(t.str, "%M"))/60 h.lub <- hour(t.lub) + minute(t.lub)/60
foo$hr <- h.str foo$hr <- if(runif(1) > 0.5){ h.str } else { h.lub }
library(ggplot2) qplot(foo$hr, foo$duration) + scale_x_datetime(labels = "%S:00")
foo <- data.frame(start.time = c("2012-02-06 15:47:00", "2012-02-06 15:02:00", "2012-02-22 10:08:00"), duration = c(1,2,3))
foo$time <- as.POSIXct(paste("2012-01-01", substr(foo$start.time, 12, 16)))
plot(duration~time, data=foo) library(ggplot2) qplot(x=time, y=duration, data=foo)
time <- c("1979-11-13T08:37:19-0500", "2014-05-13T08:37:19-0400"); time.posix <- as.POSIXct(time, format = "%Y-%m-%dT%H:%M:%S%z"); time.epoch <- as.vector(unclass(time.posix)); time.poslt <- as.POSIXlt(time.posix, tz = "America/New_York"); time.hour.new.york <- time.poslt$hour + time.poslt$min/60 + time.poslt$sec/3600; > time; [1] "1979-11-13T08:37:19-0500" "2014-05-13T08:37:19-0400" > time.posix; [1] "1979-11-13 15:37:19 IST" "2014-05-13 15:37:19 IDT" > time.poslt; [1] "1979-11-13 08:37:19 EST" "2014-05-13 08:37:19 EDT" > time.epoch; [1] 311348239 1399984639 > time.hour.new.york; [1] 8.621944 8.621944
library(lubridate) foo <- data.frame(start.time = parse_datetime(c("2012-02-06 15:47:00", "2012-02-06 15:02:00", "2012-02-22 10:08:00")), duration = c(1,2,3)) foo<-foo %>% mutate(time_of_day=hms::hms(second(start.time),minute(start.time),hour(start.time)))
purchaseAmt adShown url 15.54 00001 150000001 4.82 00002 150000001 157.99 05005 776300044 ... ... ...
adShownMedian <- df1[,median(purchaseAmt),by="adShown"]
adShownMedian <- df1[,median(purchaseAmt),by=c("adShown","url")]
set.seed(007) DF <- data.frame(X=1:20, Y=sample(c(0,1), 20, TRUE), Z=sample(0:5, 20, TRUE)) library(data.table) DT <- data.table(DF) DT[, Mean:=mean(X), by=list(Y, Z)] X Y Z Mean 1: 1 1 3 1.000000 2: 2 0 1 9.333333 3: 3 0 5 7.400000 4: 4 0 5 7.400000 5: 5 0 5 7.400000 6: 6 1 0 6.000000 7: 7 0 3 7.000000 8: 8 1 2 12.500000 9: 9 0 5 7.400000 10: 10 0 2 15.000000 11: 11 0 4 14.500000 12: 12 0 1 9.333333 13: 13 1 1 13.000000 14: 14 0 1 9.333333 15: 15 0 2 15.000000 16: 16 0 5 7.400000 17: 17 1 2 12.500000 18: 18 0 4 14.500000 19: 19 1 5 19.000000 20: 20 0 2 15.000000
shinyServer( function(input, output, session) { outVar <- reactive({ vars <- all.vars(parse(text=input$inBody)) vars <- as.list(vars) return(vars) }) output$inBody <- renderUI({ textInput(inputId = "inBody", label = h4("Enter a function:"), value = "a+b+c") }) output$inVar <- renderUI({ selectInput(inputId = "inVar", label = h4("Select variables:"), choices = list("a","b")) }) observe({ choices <- outVar() updateSelectInput(session = session, inputId = "inVar", choices = choices) }) })
shinyUI( basicPage( uiOutput("inBody"), uiOutput("inVar") ) )
library(shiny) runApp(list( ui = bootstrapPage( uiOutput( uiOutput( ), server = function(input, output){ outVar <- reactive({ vars <- all.vars(parse(text = input$text)) vars <- as.list(vars) return(vars) }) output$textbox = renderUI({ textInput("text", "Enter Formula", "a=b+c") }) output$variables = renderUI({ selectInput( }) } ))
if (is.null(input$text) || is.na(input$text)){ return() } else { vars <- all.vars(parse(text = input$text)) return(vars) }
if (!is.null(mytext)){ mytext = input$text vars <- all.vars(parse(text = mytext)) return(vars) }
outputOptions(output, "textbox", priority = 1) outputOptions(output, "variables", priority = 2)
vars <- all.vars(parse(text = as.character(input$text)))
runApp(list( ui = bootstrapPage( selectInput( uiOutput( ), server = function(input, output){ output$columns = renderUI({ mydata = get(input$dataset) selectInput( }) } ))
runApp(list( ui = bootstrapPage( selectInput( selectInput( ), server = function(input, output, session){ outVar = reactive({ mydata = get(input$dataset) names(mydata) }) observe({ updateSelectInput(session, "columns", choices = outVar() )}) } ))
library(shiny) runApp(list( ui = bootstrapPage( textInput("text", "Enter Formula", "a=b+c"), uiOutput( ), server = function(input, output){ outVar <- reactive({ vars <- all.vars(parse(text = input$text)) vars <- as.list(vars) return(vars) }) output$variables = renderUI({ selectInput( }) } ))
observe({ input$inBody vars <- all.vars(parse(text=as.character(input$inBody))) vars <- as.list(vars) updateSelectInput(session = session, inputId = "inVar", choices = vars) })
outVar <- reactive({ vars <- all.vars(parse(text=as.character(input$inBody))) vars <- as.list(vars) return(vars) }) output$inVar2 <- renderUI({ selectInput(inputId = "inVar2", label = h4("Select:"), choices = outVar()) })
output$carControls <- renderUI({ selectInput("cars", "Choose cars", rownames(mtcars)) }) txt <- reactive({ input$cars }) output$selectedText <- renderText({ paste("you selected: ", txt() ,sep="") })
uiOutput("carControls"), br(), textOutput("selectedText")
[(i,j) for i,j in zip(index, Values)] [(i,j) for i,j in enumerate(Values)] [(i,j) for i,j in enumerate(range(10,20))] %MWE, indexing or enumerating to %keep up with the index, there may %be some parameter to look this up
>>> [(i,j) for i,j in enumerate(range(10,20))] [(0, 10), (1, 11), (2, 12), (3, 13), (4, 14), (5, 15), (6, 16), (7, 17), (8, 18), (9, 19)]
In [1]: x = [1,2,3] In [2]: y = [4,5,6] In [3]: zip(x, y) Out[3]: [(1, 4), (2, 5), (3, 6)]
> x <- 1:3 > y <- 4:6 > list(x, y) > as.list(paste(x, y)) > mapply(list, x, y, SIMPLIFY=F) > rbind(x, y)
> mylist <- list( > for (i in seq_along(mylist)){ + print(paste(i,names(mylist)[i],mylist[[i]])) + } [1] "1 a 10" [1] "2 b 20" [1] "3 c 30"
> x <- 1:3 > y <- 4:6 > data.frame(x=x, y=y) x y 1 1 4 2 2 5 3 3 6
j <- 10:20 matrix(c(seq_along(j), j), ncol=2) [,1] [,2] [1,] 1 10 [2,] 2 11 [3,] 3 12 [4,] 4 13 [5,] 5 14 [6,] 6 15 [7,] 7 16 [8,] 8 17 [9,] 9 18 [10,] 10 19 [11,] 11 20
dfrm <- data.frame(j=10:20) dfrm[3, ] rownames(dfrm) <- 0:10 dfrm["0",]
zip <- function(...){ all.list <- list(...) ele.names <- names(all.list) max.length <- max(sapply(all.list, length)) lapply(0:(max.length - 1), function(i) { res <- lapply(all.list, function(l) l[i %% length(l) + 1]) names(res) <- ele.names res }) }
install.packages("devtools") devtools::install_github("mailund/lc")
> library(itertools); library(lc) > lc(paste(x$index, x$value), x=as.list(enumerate(rnorm(5))), ) [[1]] [1] "1 -0.715651978438808" [[2]] [1] "2 -1.35430822605807" [[3]] [1] "3 -0.162872340884235" [[4]] [1] "4 1.42909760816254" [[5]] [1] "5 -0.880755983937781"
> for (a in as.list(enumerate(rnorm(5)))) { print(paste(a$index, "index:", a$value))} [1] "1 index: 1.63314811372568" [1] "2 index: -0.983865948988314" [1] "3 index: -1.27096072277818" [1] "4 index: 0.313193212706331" [1] "5 index: 1.25226639725357"
> for (h in as.list(izip(a=1:5, b=letters[1:5]))) { print(paste(h$a, "index:", h$b))} [1] "1 index: a" [1] "2 index: b" [1] "3 index: c" [1] "4 index: d" [1] "5 index: e"
devtools::install_version("ggplot2", version = "0.9.1")
remotes::install_version("ggplot2", version = "0.9.1")
> ttf.all year V1.x.x V1.y.x ratio1 V1.x.y V1.y.y ratioR V1.x.x V1.y.x ratioAL V1.x.y V1.y.y ratioRL 1 2006 227 645 35.2 67 645 10.4 150 645 23.3 53 645 8.22 2 2007 639 1645 38.8 292 1645 17.8 384 1645 23.3 137 1645 8.33 3 2008 1531 3150 48.6 982 3150 31.2 755 3150 24.0 235 3150 7.46 4 2009 1625 3467 46.9 1026 3467 29.6 779 3467 22.5 222 3467 6.40
png("test.png",width=3.25,height=3.25,units="in",res=1200) par(mar=c(5,5,2,2),xaxs = "i",yaxs = "i",cex.axis=1.3,cex.lab=1.4) plot(perf,avg="vertical",spread.estimate="stddev",col="black",lty=3, lwd=3) dev.off()
the_plot <- function() { x <- seq(0, 1, length.out = 100) y <- pbeta(x, 1, 10) plot( x, y, xlab = "False Positive Rate", ylab = "Average true positive rate", type = "l" ) }
png( "test.png", width = 3.25, height = 3.25, units = "in", res = 1200, pointsize = 4 ) par( mar = c(5, 5, 2, 2), xaxs = "i", yaxs = "i", cex.axis = 2, cex.lab = 2 ) the_plot() dev.off()
library(ggplot2) ggplot_alternative <- function() { the_data <- data.frame( x <- seq(0, 1, length.out = 100), y = pbeta(x, 1, 10) ) ggplot(the_data, aes(x, y)) + geom_line() + xlab("False Positive Rate") + ylab("Average true positive rate") + coord_cartesian(0:1, 0:1) } ggsave( "ggtest.png", ggplot_alternative(), width = 3.25, height = 3.25, dpi = 1200 )
cd path/to/your-Rnw-directory Rscript -e "library(knitr); knit( pdflatex your.tex
owd = setwd("path/to/your-Rnw-directory") system2("Rscript", c("-e", shQuote("library(knitr); knit( system2("pdflatex", "your.tex") setwd(owd)
library(raster) b <- brick(system.file("external/rlogo.grd", package="raster")) proj4string(b) <- crs("+init=epsg:32616") writeRaster(b, "R.tif")
import sys from osgeo import gdal from osgeo import osr import numpy as np from math import * def array2TIFF(inputArray,gdalData,datatype,angle,noData,outputTIFF): driver = gdal.GetDriverByName("GTIFF") tiff = driver.Create(outputTIFF,gdalData.RasterXSize,gdalData.RasterYSize,inputArray.shape[0],datatype) transform = [] originX = gdalData.GetGeoTransform()[0] cellSizeX = gdalData.GetGeoTransform()[1] originY = gdalData.GetGeoTransform()[3] cellSizeY = gdalData.GetGeoTransform()[5] rotation = np.radians(angle) transform.append(originX) transform.append(cos(rotation) * cellSizeX) transform.append(sin(rotation) * cellSizeX) transform.append(originY) transform.append(-sin(rotation) * cellSizeY) transform.append(cos(rotation) * cellSizeY) transform = tuple(transform) tiff.SetGeoTransform(transform) tiff.SetProjection(gdalData.GetProjection()) for band in range(inputArray.shape[0]): tiff.GetRasterBand(band+1).WriteArray(inputArray[band]) tiff.GetRasterBand(band+1).SetNoDataValue(0) del tiff, driver inputTif = gdal.Open("R.tif") inputArray = inputTif.ReadAsArray() array2TIFF(inputArray,inputTif, gdal.GDT_Float64, -45, 0, "R_neg45.tif") array2TIFF(inputArray,inputTif, gdal.GDT_Float64, 45, 0, "R_pos45.tif")
c <- brick("R_neg45.tif") plotRGB(c,1,2,3) d <- brick("R_pos45.tif") plotRGB(d,1,2,3) > c class : RasterBrick rotated : TRUE dimensions : 77, 101, 7777, 3 (nrow, ncol, ncell, nlayers) resolution : 0.7071068, 0.7071068 (x, y) extent : 0, 125.865, 22.55278, 148.4178 (xmin, xmax, ymin, ymax) coord. ref. : +proj=utm +zone=16 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0 data source : /Users/erker/g/projects/uft/code/R_neg45.tif names : R_neg45.1, R_neg45.2, R_neg45.3 > d class : RasterBrick rotated : TRUE dimensions : 77, 101, 7777, 3 (nrow, ncol, ncell, nlayers) resolution : 0.7071068, 0.7071068 (x, y) extent : 0, 125.865, 22.55278, 148.4178 (xmin, xmax, ymin, ymax) coord. ref. : +proj=utm +zone=16 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0 data source : /Users/erker/g/projects/uft/code/R_pos45.tif names : R_pos45.1, R_pos45.2, R_pos45.3
$ gdalinfo R_neg45.tif Driver: GTiff/GeoTIFF Files: R_neg45.tif Size is 101, 77 Coordinate System is: PROJCS["WGS 84 / UTM zone 16N", GEOGCS["WGS 84", DATUM["WGS_1984", SPHEROID["WGS 84",6378137,298.257223563, AUTHORITY["EPSG","7030"]], AUTHORITY["EPSG","6326"]], PRIMEM["Greenwich",0], UNIT["degree",0.0174532925199433], AUTHORITY["EPSG","4326"]], PROJECTION["Transverse_Mercator"], PARAMETER["latitude_of_origin",0], PARAMETER["central_meridian",-87], PARAMETER["scale_factor",0.9996], PARAMETER["false_easting",500000], PARAMETER["false_northing",0], UNIT["metre",1, AUTHORITY["EPSG","9001"]], AUTHORITY["EPSG","32616"]] GeoTransform = 0, 0.7071067811865476, -0.7071067811865475 77, -0.7071067811865475, -0.7071067811865476 Metadata: AREA_OR_POINT=Area Image Structure Metadata: INTERLEAVE=PIXEL Corner Coordinates: Upper Left ( 0.0000000, 77.0000000) ( 91d29 Lower Left ( -54.4472222, 22.5527778) ( 91d29 Upper Right ( 71.4177849, 5.5822151) ( 91d29 Lower Right ( 16.9705627, -48.8650071) ( 91d29 Center ( 8.4852814, 14.0674965) ( 91d29 Band 1 Block=101x3 Type=Float64, ColorInterp=Gray NoData Value=0 Band 2 Block=101x3 Type=Float64, ColorInterp=Undefined NoData Value=0 Band 3 Block=101x3 Type=Float64, ColorInterp=Undefined NoData Value=0 $ gdalinfo R_pos45.tif Driver: GTiff/GeoTIFF Files: R_pos45.tif Size is 101, 77 Coordinate System is: PROJCS["WGS 84 / UTM zone 16N", GEOGCS["WGS 84", DATUM["WGS_1984", SPHEROID["WGS 84",6378137,298.257223563, AUTHORITY["EPSG","7030"]], AUTHORITY["EPSG","6326"]], PRIMEM["Greenwich",0], UNIT["degree",0.0174532925199433], AUTHORITY["EPSG","4326"]], PROJECTION["Transverse_Mercator"], PARAMETER["latitude_of_origin",0], PARAMETER["central_meridian",-87], PARAMETER["scale_factor",0.9996], PARAMETER["false_easting",500000], PARAMETER["false_northing",0], UNIT["metre",1, AUTHORITY["EPSG","9001"]], AUTHORITY["EPSG","32616"]] GeoTransform = 0, 0.7071067811865476, 0.7071067811865475 77, 0.7071067811865475, -0.7071067811865476 Metadata: AREA_OR_POINT=Area Image Structure Metadata: INTERLEAVE=PIXEL Corner Coordinates: Upper Left ( 0.0000000, 77.0000000) ( 91d29 Lower Left ( 54.4472222, 22.5527778) ( 91d29 Upper Right ( 71.418, 148.418) ( 91d29 Lower Right ( 125.865, 93.971) ( 91d29 Center ( 62.9325035, 85.4852814) ( 91d29 Band 1 Block=101x3 Type=Float64, ColorInterp=Gray NoData Value=0 Band 2 Block=101x3 Type=Float64, ColorInterp=Undefined NoData Value=0 Band 3 Block=101x3 Type=Float64, ColorInterp=Undefined NoData Value=0
devtools::install_github("miraisolutions/raster") library(raster) R_Tif <- system.file("external", "R.tif", package = "raster", mustWork = TRUE) R_Tif_pos45 <- system.file("external", "R_pos45.tif", package = "raster", mustWork = TRUE) R_Tif_neg45 <- system.file("external", "R_neg45.tif", package = "raster", mustWork = TRUE) R_Tif_pos100 <- system.file("external", "R_pos100.tif", package = "raster", mustWork = TRUE) R_Tif_neg100 <- system.file("external", "R_neg100.tif", package = "raster", mustWork = TRUE) R_Tif_pos315 <- system.file("external", "R_pos315.tif", package = "raster", mustWork = TRUE) RTif <- brick(R_Tif) plotRGB(RTif, 1, 2, 3) pos45Tif <- suppressWarnings(brick(R_Tif_pos45)) plotRGB(pos45Tif, 1, 2, 3) neg45Tif <- suppressWarnings(brick(R_Tif_neg45)) plotRGB(neg45Tif,1,2,3) pos100Tif <- suppressWarnings(brick(R_Tif_pos100)) plotRGB(pos100Tif, 1, 2, 3) neg100Tif <- suppressWarnings(brick(R_Tif_neg100)) plotRGB(neg100Tif, 1, 2, 3) pos315Tif <- suppressWarnings(brick(R_Tif_pos315)) plotRGB(pos315Tif,1,2,3)
if (gdalinfo["oblique.x"] != 0 | gdalinfo["oblique.y"] != 0) { rotated <- TRUE res1 <- attributes(rgdal::readGDAL(filename))$bbox if (warn) { warning("\n\n This file has a rotation\n Support for such files is limited and results of data processing might be wrong.\n Proceed with caution & consider using the \"rectify\" function\n") } rotMat <- matrix(gdalinfo[c("res.x", "oblique.x", "oblique.y", "res.y")], 2) if (all(res1[, "min"] < 0)) { rotMat[2] <- rotMat[2] * -1 rotMat[3] <- rotMat[3] * -1 }
a <- b <- c <- d <- e <- f <- g <- 1:100 df <- data.frame(a,b,c,d,e,f,g)
> col_idx <- grep("g", names(df)) > df <- df[, c(col_idx, (1:ncol(df))[-col_idx])] > names(df) [1] "g" "a" "b" "c" "d" "e" "f"
moveme <- function (invec, movecommand) { movecommand <- lapply(strsplit(strsplit(movecommand, ";")[[1]], ",|\\s+"), function(x) x[x != ""]) movelist <- lapply(movecommand, function(x) { Where <- x[which(x %in% c("before", "after", "first", "last")):length(x)] ToMove <- setdiff(x, Where) list(ToMove, Where) }) myVec <- invec for (i in seq_along(movelist)) { temp <- setdiff(myVec, movelist[[i]][[1]]) A <- movelist[[i]][[2]][1] if (A %in% c("before", "after")) { ba <- movelist[[i]][[2]][2] if (A == "before") { after <- match(ba, temp) - 1 } else if (A == "after") { after <- match(ba, temp) } } else if (A == "first") { after <- 0 } else if (A == "last") { after <- length(myVec) } myVec <- append(temp, values = movelist[[i]][[1]], after = after) } myVec }
moveme(names(df), "g first") moveme(names(df), "g first; a last; e before c")
ordered_columns_leftside=c( df=df[c(ordered_columns_leftside, setdiff(names(df),ordered_columns_leftside))]
colX <- grep("^col_name", colnames(df.original)) df.reordered.1 <- df.original[,c(colX,1:(colX-1), (colX+1):length(df.original))] df.reordered.1 <- df.original[,c(colX,1:(colX-1)]
colX <- grep("^col_name", colnames(df.original)) n <- 2 df.reordered.2 <- df.original[,c(1:(n-1), colX, n:(colX-1), (colX+1):length(df.original))] df.original <- df.reordered.2 rm(df.reordered.2)
df1 = subset(df, select = c(head(names(df),n=3),"g", names(df) [! names(df) %in% c(head(names(df),n=3),"g")]))
> a <- b <- c <- d <- e <- f <- g <- 1:5 > df <- data.frame(a,b,c,d,e,f,g) > df[, taRifx::shift(seq_along(df),-1)] g a b c d e f 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5
> shift_df <- function(df, n) df[, taRifx::shift(seq_along(df),n)] > shift_df(df, -1) g a b c d e f 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 > shift_df(df, 2) c d e f g a b 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5
move<-function(new.pos,nameofcolumn,dfname) { col_idx <- grep(nameofcolumn, names(dfname)) if (length(col_idx)==0){print("invalid column name")} else { if(new.pos>ncol(dfname)){print("invalid column number")} else { if (new.pos==1) { b<-dfname[ , c( col_idx, c((new.pos):ncol(dfname))[-(abs(new.pos-1-col_idx))] )] } else if(col_idx==1 & new.pos==ncol(dfname)){ b<-dfname[ , c((1:(new.pos-1)+1), col_idx )] } else if(col_idx==1){ b<-dfname[ , c((1:(new.pos-1)+1), col_idx, c((new.pos+1):ncol(dfname)) )] } else if(new.pos==ncol(dfname)){ b<-dfname[ , c((1:(new.pos))[-col_idx], col_idx)] } else if(new.pos>col_idx){ b<-dfname[ , c((1:(new.pos))[-col_idx], col_idx, c((new.pos+1):ncol(dfname)) )] } else{ b<-dfname[ , c((1:(new.pos-1)), col_idx, c((new.pos):ncol(dfname))[-(abs(new.pos-1-col_idx))] )] } return(b) if(length(ncol(b))!=length(ncol(dfname))){print("error")} } }}
a <- b <- c <- d <- e <- f <- g <- 1:5 df <- data.frame(a,b,c,d,e,f,g) move(1,"g",df)
move.col <- function(df, move_this, next_to_this, before = FALSE) { if (before==FALSE) df[,c(match(setdiff(names(df)[1:which(names(df)==next_to_this)],move_this),names(df)), match(move_this,names(df)), match(setdiff(names(df)[which(names(df)==next_to_this):ncol(df)],c(next_to_this,move_this)),names(df)))] else df[,c(match(setdiff(names(df)[1:(which(names(df)==next_to_this))],c(next_to_this,move_this)),names(df)), match(move_this,names(df)), match(setdiff(names(df)[(which(names(df)==next_to_this)):ncol(df)],move_this),names(df)))] }
push_left <- function(df, pushColNames){ df[, c(pushColNames, setdiff(names(df), pushColNames))] } push_left(iris, c("Species", "Sepal.Length"))
moveCol <- function(df,ColName,Position=1) { D <- dim(df)[2] DFnames <- names(df) if (Position>D+1 | Position<1) { warning(paste0( return() } for (i in ColName) { x <- i==DFnames if (all(!x)) { warning(paste0( } else { D1 <- seq(D) D1[x] = Position - 0.5 df<- df[order(D1)] } } return(df) }
new.pos <- 4 col_idx <- grep("g", names(df)) df <- df[ , c((1:new.pos)[-col_idx], col_idx, c((new.pos):ncol(df))[-col_idx])]
starwars %>% select(-(name:mass)) %>% select(-contains( select(-starts_with( select(-ends_with( select(-matches( select_if(~!is.list(.)) %>% head(2) homeworld species <chr> <chr> 1 Tatooine Human 2 Tatooine Droid
iris %>% select_(.dots= setdiff(names(.),drop.cols))
library(readxl) read_excel_allsheets <- function(filename, tibble = FALSE) { sheets <- readxl::excel_sheets(filename) x <- lapply(sheets, function(X) readxl::read_excel(filename, sheet = X)) if(!tibble) x <- lapply(x, as.data.frame) names(x) <- sheets x }
library(XLConnect) importWorksheets <- function(filename) { workbook <- loadWorkbook(filename) sheet_names <- getSheets(workbook) names(sheet_names) <- sheet_names sheet_list <- lapply(sheet_names, function(.sheet){ readWorksheet(object=workbook, .sheet)}) }
require(XLConnect) wb <- loadWorkbook(system.file("demoFiles/mtcars.xlsx", package = "XLConnect")) lst = readWorksheet(wb, sheet = getSheets(wb))
filename <-"myFilePath" sheets <- openxlsx::getSheetNames(filename) SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=filename) names(SheetList) <- sheets
wb.mtcars <- loadWorkbook(system.file("demoFiles/mtcars.xlsx", package = "XLConnect")) sheet_names <- getSheets(wb.mtcars) names(sheet_names) <- sheet_names sheet_list <- lapply(sheet_names, function(.sheet){ readWorksheet(object=wb.mtcars, .sheet)})
path <- "data/datasets.xlsx" path %>% excel_sheets() %>% set_names() %>% map(read_excel, path = path)
data_list <- import_list("test.xls", setclass = "tbl")
library(readxl) library(dplyr) final_dataFrame <- bind_row(path_to_workbook %>% excel_sheets() %>% set_names() %>% map(read_excel, path = path_to_workbook))
user_id, number_of_logins, number_of_images, web 001, 34, 3, aa.com 002, 4, 4, aa.com 034, 3, 3, aa.com 001, 12, 4, bb.com 002, 1, 3, bb.com 034, 2, 2, cc.com
library("dplyr") df <- df %>% mutate(id = row_number())
df <- scan(what = character(), sep = ",", text = "001, 34, 3, aa.com 002, 4, 4, aa.com 034, 3, 3, aa.com 001, 12, 4, bb.com 002, 1, 3, bb.com 034, 2, 2, cc.com") df <- as.data.frame(matrix(df, 6, 4, byrow = TRUE)) colnames(df) <- c("user_id", "number_of_logins", "number_of_images", "web")
df$generated_uid <- 1:nrow(df) df$generated_uid2 <- sprintf("%03d", 1:nrow(df))
df <- cbind("generated_uid3" = sprintf("%03d", 1:nrow(df)), df)
foo <- data.frame(a=LETTERS[1:3], b=rnorm(3)) foo write.table(foo, file="/tmp/foo.csv") system("gzip /tmp/foo.csv")
difftime(strptime("26.03.2014", format = "%d.%m.%Y"), strptime("14.01.2013", format = "%d.%m.%Y"),units="weeks") Time difference of 62.28571 weeks (as.yearmon(strptime("26.03.2014", format = "%d.%m.%Y"))- as.yearmon(strptime("14.01.2013", format = "%d.%m.%Y")))*12 [1] 14 (as.yearqtr(strptime("26.03.2014", format = "%d.%m.%Y"))- as.yearqtr(strptime("14.01.2013", format = "%d.%m.%Y")))*4 [1] 4 year(strptime("26.03.2014", format = "%d.%m.%Y"))- year(strptime("14.01.2013", format = "%d.%m.%Y")) [1] 1
date_strings = c("14.01.2013", "26.03.2014") datetimes = strptime(date_strings, format = "%d.%m.%Y")
diff_in_days = difftime(datetimes[2], datetimes[1], units = "days") diff_in_days
diff_in_weeks = difftime(datetimes[2], datetimes[1], units = "weeks") diff_in_weeks
diff_in_years = as.double(diff_in_days)/365 diff_in_years
date1 <- strptime("14.01.2013", format="%d.%m.%Y") date2 <- strptime("26.03.2014", format="%d.%m.%Y") difftime(date2,date1,units="weeks") Time difference of 62.28571 weeks
seq1 <- seq(date1,date2, by="days") nlevels(cut(seq1,"months")) 15 nlevels(cut(seq1,"quarters")) 5 nlevels(cut(seq1,"years")) 2
library(lubridate) age <- function(dob, age.day = today(), units = "years", floor = TRUE) { calc.age = interval(dob, age.day) / duration(num = 1, units = units) if (floor) return(as.integer(floor(calc.age))) return(calc.age) }
my.dob <- as.Date( age(my.dob) age(my.dob, floor = FALSE) age(my.dob, units = "minutes") age(seq(my.dob, length.out = 6, by = "years"))
dates <- c("14.01.2013", "26.03.2014") dates2 <- strptime(dates, format = "%d.%m.%Y") dif <- diff(as.numeric(dates2)) dif/(60 * 60 * 24 * 7) [1] 62.28571 dif/(60 * 60 * 24 * 30) [1] 14.53333 dif/(60 * 60 * 24 * 30 * 3) [1] 4.844444 dif/(60 * 60 * 24 * 365) [1] 1.194521
numPeriods <- function(startdate, enddate, period) { numdays <- as.numeric(enddate - startdate) + 1 if (grepl("day", period, ignore.case=TRUE)) { return(numdays) } else if (grepl("week", period, ignore.case=TRUE)) { return(numdays / 7) } effDaysinBins <- cut(seq(startdate, enddate, by="1 day"), period) intervals <- seq(from=as.Date(min(levels(effDaysinBins)), "%Y-%m-%d"), by=paste("1",period), length.out=length(levels(effDaysinBins))+1) allDays <- seq(from=intervals[1], to=intervals[intervals > enddate][1] - 1, by="1 day") allDaysInBins <- cut(allDays, intervals) sum( tabulate(effDaysinBins) / tabulate(allDaysInBins) ) }
StartDate <- strptime("14 January 2013", "%d %B %Y") EventDates <- strptime(c("26 March 2014"), "%d %B %Y") difftime(EventDates, StartDate)
> str(df) $ ykod : int 93 93 93 93 93 93 93 93 93 93 ... $ yad : Factor w/ 42 levels "BAKUGAN","BARBIE",..: 30 30 30 30 30 30 30 30 30 30 ... $ per : Factor w/ 3 levels "2 AYLIK","3 AYLIK",..: 3 3 3 3 3 3 3 3 3 3 ... $ donem: int 201101 201101 201101 201101 201101 201101 201101 201101 201101 201101 ... $ sayi : int 201101 201101 201101 201101 201101 201101 201101 201101 201101 201101 ... $ mkod : int 4 5 9 11 12 18 20 22 25 26 ... $ mad : Factor w/ 10464 levels " Defne Market ",..: 405 8075 9710 10145 9297 7973 2542 3892 2759 5769 ... $ mtip : Factor w/ 29 levels "Abone Bürosu ",..: 2 20 20 2 2 2 2 2 2 2 ... $ kanal: Factor w/ 2 levels "OB","SS": 2 2 2 2 2 2 2 2 2 2 ... $ bkod : int 110565 110565 110565 110565 110565 110565 110565 110565 110565 110565 ... $ bad : Factor w/ 212 levels "4. Levent","500 Evler",..: 167 167 167 167 167 167 167 167 167 167 ... $ bolge: Factor w/ 12 levels "Adana Şehiriçi",..: 7 7 7 7 7 7 7 7 7 7 ... $ sevk : int 2 3 3 3 2 2 2 6 2 2 ... $ iade : int 2 1 0 2 0 2 1 0 0 2 ... $ satis: int 0 2 3 1 2 0 1 6 2 0 ...
yad per --- --- BARBIE AYLIK BAKUGAN 2 AYLIK MICKEY MOUSE 2 AYLIK TINKERBELL 3 AYLIK ... ...
df <- data.frame(yad = c("BARBIE", "BARBIE", "BAKUGAN", "BAKUGAN"), per = c("AYLIK", "AYLIK", "2 AYLIK", "2 AYLIK"), hmm = 1:4) df unique(df[c("yad", "per")])
library(data.table) dt <- data.table( V1=LETTERS[c(1,1,1,1,2,3,3,5,7,1)], V2=LETTERS[c(2,3,4,2,1,4,4,6,7,2)], V3=c(1), V4=c(2) ) > dt setkey(dt) unique( dt[list(V1, V2), nomatch = 0] )
with(df, interaction(yad, per, drop=TRUE)) with(df, yad:per) aggregate(numeric(nrow(df)), df[c("yad", "per")], length)
dt <- structure(list(fct = structure(c(1L, 2L, 3L, 4L, 3L, 4L, 1L, 2L, 3L, 1L, 2L, 3L, 2L, 3L, 4L), .Label = c("a", "b", "c", "d"), class = "factor"), X = c(2L, 4L, 3L, 2L, 5L, 4L, 7L, 2L, 9L, 1L, 4L, 2L, 5L, 4L, 2L)), .Names = c("fct", "X"), class = "data.frame", row.names = c(NA, -15L))
dt[dt$fct %in% vc,] fct X 1 a 2 3 c 3 5 c 5 7 a 7 9 c 9 10 a 1 12 c 2 14 c 4
fct X 1: a 2 2: a 7 3: a 1 4: c 3 5: c 5 6: c 9 7: c 2 8: c 4
X <- test[1,] for (i in 2:dim(test)[1]){ X <- cbind(X,test[i,]) }
m = as.matrix(df) q = c() for (i in seq(1:nrow(m))){ q = c(q, m[i,]) }
library(MASS) library(ggplot2) qplot(week,y,data=bacteria,group=ID, geom=c( facet_wrap(~ID) + theme(strip.text.x = element_text(size=0))
library(MASS) library(ggplot2) qplot( week, y, data = bacteria, group = ID, geom = c( xlab = ylab = ) + facet_wrap(~ ID) + theme( strip.background = element_blank(), strip.text.x = element_blank() )
library(ggplot2) library(grid) p <- qplot( week, y, data = bacteria, group = ID, geom = c( xlab = ylab = ) + facet_wrap(~ ID) gt <- ggplotGrob(p) panels <- grep("panel", gt$layout$name) top <- unique(gt$layout$t[panels]) gt = gt[-(top-1), ] grid.newpage() grid.draw(gt)
ggplot() ... + opts(strip.background = theme_blank(), strip.text.x = theme_blank())
ggplot() ... + theme(strip.background = element_blank(), strip.text = element_blank())
library(ggplot2) library(grid) qplot(week,y,data=bacteria,group=ID, geom=c( facet_wrap(~ID) + theme(strip.text.x = element_blank())
rbind(mat[1,]/dev, mat[2,]/dev) [,1] [,2] [1,] 0.2 0.1 [2,] 0.2 0.1
t(t(mat) / dev) mat / dev[col(mat)] mat %*% diag(1 / dev) sweep(mat, 2, dev, "/") t(apply(mat, 1, "/", dev)) plyr::aaply(mat, 1, "/", dev) mat / rep(dev, each = nrow(mat)) mat / t(replace(t(mat), TRUE, dev)) mapply("/", as.data.frame(mat), dev) mat / matrix(dev, nrow(mat), ncol(mat), byrow = TRUE) do.call(rbind, lapply(as.data.frame(t(mat)), "/", dev)) mat2 <- mat; for(i in seq_len(nrow(mat2))) mat2[i, ] <- mat2[i, ] / dev
t(t(mat) / dev) mat / t(replace(t(mat), TRUE, dev))
library(microbenchmark) library(plyr) set.seed(84789) mat<-matrix(runif(1e6),nrow=1e5) dev<-runif(10) microbenchmark(times=10L, "1" = t(t(mat) / dev), "2" = mat %*% diag(1/dev), "3" = sweep(mat, 2, dev, "/"), "4" = t(apply(mat, 1, "/", dev)), "5" = mat / rep(dev, each = nrow(mat)), "6" = mat / t(replace(t(mat), TRUE, dev)), "7" = aaply(mat, 1, "/", dev), "8" = do.call(rbind, lapply(as.data.frame(t(mat)), "/", dev)), "9" = {mat2 <- mat; for(i in seq_len(nrow(mat2))) mat2[i, ] <- mat2[i, ] / dev}, "10" = mat/dev[col(mat)])
Unit: milliseconds expr min lq mean median uq max neval 1 7.957253 8.136799 44.13317 8.370418 8.597972 366.24246 10 2 4.678240 4.693771 10.11320 4.708153 4.720309 58.79537 10 3 15.594488 15.691104 16.38740 15.843637 16.559956 19.98246 10 4 96.616547 104.743737 124.94650 117.272493 134.852009 177.96882 10 5 17.631848 17.654821 18.98646 18.295586 20.120382 21.30338 10 6 19.097557 19.365944 27.78814 20.126037 43.322090 48.76881 10 7 8279.428898 8496.131747 8631.02530 8644.798642 8741.748155 9194.66980 10 8 509.528218 524.251103 570.81573 545.627522 568.929481 821.17562 10 9 161.240680 177.282664 188.30452 186.235811 193.250346 242.45495 10 10 7.713448 7.815545 11.86550 7.965811 8.807754 45.87518 10
microbenchmark(times=100L, "1" = t(t(mat) / dev), "2" = mat %*% diag(1/dev), "3" = sweep(mat, 2, dev, "/"), "5" = mat / rep(dev, each = nrow(mat)), "6" = mat / t(replace(t(mat), TRUE, dev)), "10" = mat/dev[col(mat)])
Unit: milliseconds expr min lq mean median uq max neval 1 8.010749 8.188459 13.972445 8.560578 10.197650 299.80328 100 2 4.672902 4.734321 5.802965 4.769501 4.985402 20.89999 100 3 15.224121 15.428518 18.707554 15.836116 17.064866 42.54882 100 5 17.625347 17.678850 21.464804 17.847698 18.209404 303.27342 100 6 19.158946 19.361413 22.907115 19.772479 21.142961 38.77585 100 10 7.754911 7.939305 9.971388 8.010871 8.324860 25.65829 100
> df <- data.frame(matrix(ncol = 300, nrow = 100)) > dim(df) [1] 100 300
i <- 1 shapiro.test(ddd[,y]) ad.test(ddd[,y]) stem(ddd[,y]) print(y)
for (y in 7:10) { shapiro.test(ddd[,y]) ad.test(ddd[,y]) stem(ddd[,y]) print(y) } The decimal point is 1 digit(s) to the right of the | 0 | 0 0 | 899999 1 | 0 [1] 7
> D <- function (y) { + shapiro.test(ddd[,y]) + ad.test(ddd[,y]) + stem(ddd[,y]) + print(y) } > D(9) The decimal point is at the | 9 | 000 9 | 10 | 00000 [1] 9
> DF <- data.frame(A = rnorm(100), B = rlnorm(100)) > y <- 1 > shapiro.test(DF[,y]) Shapiro-Wilk normality test data: DF[, y] W = 0.9891, p-value = 0.5895
for(y in 1:2) { writeLines(paste("Shapiro Wilks Test for column", y)) print(shapiro.test(DF[,y])) writeLines(paste("Anderson Darling Test for column", y)) print(ad.test(DF[,y])) }
obj <- vector(mode = "list", length = 2) for(y in seq_along(obj)) { obj[[y]] <- shapiro.test(DF[,y]) }
> obj[[1]] Shapiro-Wilk normality test data: DF[, y] W = 0.9891, p-value = 0.5895
> obj2 <- lapply(DF, shapiro.test) > obj2[[1]] Shapiro-Wilk normality test data: X[[1L]] W = 0.9891, p-value = 0.5895
> tab <- t(sapply(obj2, function(x) c(x$statistic, x$p.value))) > colnames(tab) <- c("W", "p.value") > tab W p.value A 0.9890621 5.894563e-01 B 0.4589731 1.754559e-17
> tab2 <- lapply(obj2, function(x) c(W = unname(x$statistic), + `p.value` = x$p.value)) > tab2 <- data.frame(do.call(rbind, tab2)) > printCoefmat(tab2, has.Pvalue = TRUE) W p.value A 0.9891 0.5895 B 0.4590 <2e-16 *** --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
for (i in 1:10) { print(i) flush.console() for(j in 1:100000) k <- 0 }
sw.df <- function ( data ) { obj <- lapply(data, shapiro.test) tab <- lapply(obj, function(x) c(W = unname(x$statistic), `p.value` = x$p.value)) tab <- data.frame(do.call(rbind, tab)) printCoefmat(tab, has.Pvalue = TRUE) }
shinyServer( function(input, output) { output$text1 <- renderText({paste("You have selected", input$var) output$text2 <- renderText({paste("You have chosen a range that goes from", input$range[1], "to", input$range[2])}) } )
shinyUI(pageWithSidebar( mainPanel(textOutput("text1"), textOutput("text2")) ))
You have selected example You have chosen a range that goes from example range.
output$text = renderText({paste("You have selected ", input$var, "\n", "You have chosen a range that goes from", input$range[1], "to", input$range[2])})
require(shiny) runApp(list(ui = pageWithSidebar( headerPanel("censusVis"), sidebarPanel( helpText("Create demographic maps with information from the 2010 US Census."), selectInput("var", label = "Choose a variable to display", choices = c("Percent White", "Percent Black", "Percent Hispanic", "Percent Asian"), selected = "Percent White"), sliderInput("range", label = "Range of interest:", min = 0, max = 100, value = c(0, 100)) ), mainPanel(textOutput("text1"), textOutput("text2"), htmlOutput("text") ) ), server = function(input, output) { output$text1 <- renderText({paste("You have selected", input$var)}) output$text2 <- renderText({paste("You have chosen a range that goes from", input$range[1], "to", input$range[2])}) output$text <- renderUI({ str1 <- paste("You have selected", input$var) str2 <- paste("You have chosen a range that goes from", input$range[1], "to", input$range[2]) HTML(paste(str1, str2, sep = }) } ) )
output$text = renderText({ paste("You have selected ", input$var, ". You have chosen a range that goes from", input$range[1], "to", input$range[2], ".") })
blubb <- aggregate(dat$two ~ dat$one, ...) colnames(blubb) <- c("One", "Two")
blubb <- aggregate( ... , cols = c(name_of_dat$one, name_of_dat$two."_Mean"))
blubb <- setNames(aggregate(dat$two ~ dat$one, ...), c("One", "Two"))
blubb <- aggregate(list(One = dat$one), list(Two = dat$two), ...)
if (is.matrix(mf[[1L]])) { lhs <- as.data.frame(mf[[1L]]) names(lhs) <- as.character(m[[2L]][[2L]])[-1L] aggregate.data.frame(lhs, mf[-1L], FUN = FUN, ...) } else aggregate.data.frame(mf[1L], mf[-1L], FUN = FUN, ...)
if (is.matrix(mf[[1L]])) { lhs <- as.data.frame(mf[[1L]]) names(lhs) <- as.character(m[[2L]][[2L]])[-1L] myOut <- aggregate.data.frame(lhs, mf[-1L], FUN = FUN, ...) colnames(myOut) <- c(names(mf[-1L]), paste(names(lhs), deparse(substitute(FUN)), sep = ".")) } else { myOut <- aggregate.data.frame(mf[1L], mf[-1L], FUN = FUN, ...) colnames(myOut) <- c(names(mf[-1L]), paste(strsplit(gsub("cbind\\(|\\)|\\s", "", names(mf[1L])), ",")[[1]], deparse(substitute(FUN)), sep = ".")) } myOut
> names(myAgg(weight ~ feed, data = chickwts, mean)) [1] "feed" "weight.mean" > names(myAgg(breaks ~ wool + tension, data = warpbreaks, sum)) [1] "wool" "tension" "breaks.sum" > names(myAgg(weight ~ feed, data = chickwts, FUN = function(x) mean(x^2))) [1] "feed" "weight.function(x) mean(x^2)"
w <- data.frame(Funding<-"Fully Insured",Region="North East",claim_count=rnbinom(1000, 300.503572818, mu= 0.5739467)) x <- data.frame(Funding<-"Fully Insured",Region="South East",claim_count=rnbinom(1000, 1000, mu= 0.70000000)) y <- data.frame(Funding<-"Self Insured",Region="North East",claim_count=rnbinom(1000, 400, mu= 0.80000000)) z <- data.frame(Funding<-"Self Insured",Region="South East",claim_count=rnbinom(1000, 700, mu= 1.70000000)) names(w)<-c("Funding","Region","claim_count") names(x)<-c("Funding","Region","claim_count") names(y)<-c("Funding","Region","claim_count") names(z)<-c("Funding","Region","claim_count") my_df <- rbind(w,x,y,z) my_df2<-with(my_df, aggregate(x=claim_count, by=list(Funding,Region), FUN=sum)) colnames(my_df2)<-colnames(my_df)
> TRUE == as.logical( c("TRUE", "T", "true", "True") ) [1] TRUE TRUE TRUE TRUE > TRUE == 7 [1] FALSE > TRUE == as.logical(7) [1] TRUE > TRUE == as.logical("A") [1] NA
> LHS <- y~1; RHS <- ~a+b; c(LHS,RHS); y ~ a + b > RHS2 <- ~c; > c(LHS, RHS, RHS2); y ~ a + b + c
> LHS + RHS; y ~ a + b > LHS + RHS + RHS2; y ~ a + b + c
as.character(LHS)[2] combine_formula <- function(LHS, RHS){ .terms <- lapply(RHS, terms) new_terms <- unique(unlist(lapply(.terms, attr, which = response <- as.character(LHS)[2] reformulate(new_terms, response) } combine_formula(LHS, list(RHS, RHS2))
combine_formula2 <- function(response, RHS, intercept = TRUE){ .terms <- lapply(RHS, terms) new_terms <- unique(unlist(lapply(.terms, attr, which = response <- as.character(LHS)[2] reformulate(new_terms, response, intercept) } combine_formula2(
`+.formula` <- function(e1,e2){ .terms <- lapply(c(e1,e2), terms) reformulate(unique(unlist(lapply(.terms, attr, which = } RHS + RHS2
x <- rnorm(100, mean=100, sd = 1) * 1000000 y <- rnorm(100, mean=100, sd = 1) * 1000000 df <- data.frame(x,y) p.new <- ggplot(df,aes(x,y)) + geom_point() print(p.new)
Error in structure(list(call = match.call(), aesthetics = aesthetics, : object
library(ggplot2) p <- qplot(displ, hwy, data = mpg) p + facet_wrap(~ cyl) p + facet_grid(~ cyl)
qplot(displ, hwy, data=mpg,color=factor(year)) + facet_grid(cyl~class)
library(ggplot2) ggplot(mtcars, aes(mpg, hp)) + geom_point()
ggplot(mtcars, aes(mpg, hp)) + geom_point() + scale_y_continuous(limits=c(0,300)) + geom_smooth(method="lm") Warning messages: 1: Removed 1 rows containing missing values (stat_smooth). 2: Removed 1 rows containing missing values (geom_point).
ggplot(mtcars, aes(mpg, hp)) + geom_point() + coord_cartesian(ylim=c(0,300)) + geom_smooth(method="lm")
temp <- tempfile("Sales", fileext=c("zip")) data <- read.table(unz(temp, "Sales.dat"), nrows=10, header=T, quote="\"", sep=",") Error in open.connection(file, "rt") : cannot open the connection In addition: Warning message: In open.connection(file, "rt") : cannot open zip file
data <- read.table(unz("Sales.zip", "Sales.dat"), nrows=10, header=T, quote="\"", sep=",")
data <- read.table("Sales.zip", nrows=10, header=T, quote="\"", sep=",")
zipfile<-"test.zip" myData <- read.delim(pipe(paste("zcat", zipfile)))
library(readr) df = read_csv(gzfile("file.csv.gz")) library(data.table) df = read.table(gzfile("file.csv.gz"))
Garbage collection 9 = 1+0+8 (level 2) ... 10.7 Mbytes of cons cells used (49%) 40.6 Mbytes of vectors used (72%) used (Mb) gc trigger (Mb) max used (Mb) Ncells 198838 10.7 407500 21.8 350000 18.7 Vcells 5311050 40.6 7421749 56.7 5311504 40.6
Garbage collection 10 = 1+0+9 (level 2) ... 10.7 Mbytes of cons cells used (49%) 2.4 Mbytes of vectors used (5%) used (Mb) gc trigger (Mb) max used (Mb) Ncells 198821 10.7 407500 21.8 350000 18.7 Vcells 310987 2.4 5937399 45.3 5311504 40.6
seq(as.Date("2004-01-31"), by = "month", length = 2)
seq(as.Date("2004-01-31"), by = "month", length = 10)
d <- as.POSIXlt(as.Date("2010-01-01")) d$year <- d$year +1 d d <- as.POSIXlt(as.Date("2010-01-01")) d$month <- d$month +1 d
require(lubridate) d <- as.Date( month(d) <- month(d) + 1 day(d) <- days_in_month(d) d [1] "2004-02-29"
library(lubridate) (d <- ymd("2012-01-31")) 1 parsed with %Y-%m-%d [1] "2012-01-31 UTC" d %m+% months(1) [1] "2012-02-29 UTC"
add.months= function(date,n) seq(date, by = paste (n, "months"), length = 2)[2]
add.month=function(date) add.months(date,1) add.month(d)
add.months.ceil=function (date, n){ nC=add.months(date, n) day(date)=01 C=add.months(date, n+1)-1 if(nC>C) return(C) return(nC) }
add.month.ceil=function(date) add.months.ceil(date,1)
d=as.Date( add.month.ceil(d) d=as.Date( add.month.ceil(d)
d=as.Date( add.months.ceil(d, -1) d=as.Date( add.months.ceil(d, -1)
add.months.v= function(date,n) as.Date(sapply(date, add.months, n), origin="1970-01-01")
d=c(as.Date( add.months.v(d,1) [1] "2010-02-01" "2010-03-03"
> library(mondate) > d <- as.Date("2004-01-31") > as.mondate(d) + 1 mondate: timeunits="months" [1] 2004-02-29
addMonth <- function(date, n = 1){ if (n == 0){return(date)} if (n %% 1 != 0){stop("Input Error: argument if (class(date) == "character"){date = as.Date(date)} y = as.numeric(substr(as.character(date),1,4)) m = as.numeric(substr(as.character(date),6,7)) d = as.numeric(substr(as.character(date),9,10)) i = 0 if (n > 0){ while (i < n){ m = m + 1 if (m == 13){ m = 1 y = y + 1 } i = i + 1 } } else if (n < 0){ while (i > n){ m = m - 1 if (m == 0){ m = 12 y = y - 1 } i = i - 1 } } if (d > 28 & m == 2){ if ((y %% 4 == 0 & y %% 100 != 0) | y %% 400 == 0){d = 29} else{d = 28} } else if (d == 31){if (m %in% c(1, 3, 5, 7, 8, 10, 12) == FALSE){d = 30}} y = as.character(y) if (m < 10){m = paste( else{m = as.character(m)} if (d < 10){d = paste( else{d = as.character(d)} return(as.Date(paste(y, }
> addMonth( [1] "2014-02-28" > addMonth( [1] "2014-06-30" > addMonth( [1] "2016-01-31" > addMonth( [1] "2016-02-29"
> addMonth( [1] "2013-12-31" > addMonth( [1] "2013-06-30" > addMonth( [1] "2013-01-31" > addMonth( [1] "2012-02-29"
date_1m_fwd <- as.POSIXlt("2010-01-01") date_1m_fwd$mon <- date_1m_fwd$mon +1
library(data.table) dt <- as.data.table(seq(as.Date("2010-01-01"), length.out=5, by="month")) dt[,shifted_month:=tail(seq(V1[1], length.out=length(V1)+3, by="month"),length(V1))]
addedMonth <- seq(as.Date( addedQuarter <- seq(as.Date(
library(DescTools) > AddMonths(as.Date( [1] "2004-02-01" > AddMonths(as.Date( [1] "2004-02-29" > AddMonths(as.Date( [1] "2004-02-29"
newfunc <- function(params =list(A=1, B=2) ) { body}
structure(1:10, names=letters[1:10], foo="bar", class="myclass")
a b c d e f g h i j 1 2 3 4 5 6 7 8 9 10 attr(,"foo") [1] "bar" attr(,"class") [1] "myclass"
result = c(1,2) %>% set_names(c("A", "B")) print(result) A B 1 2
df = data.frame(value=1:10, label=letters[1:10]) vec = extract2(df, vec a b c d e f g h i j 1 2 3 4 5 6 7 8 9 10 df value label 1 1 a 2 2 b 3 3 c 4 4 d 5 5 e 6 6 f 7 7 g 8 8 h 9 9 i 10 10 j
my_vector = c(A = 1, B = 2) my_vector["A"] my_vector[1]
df <- data.frame(a=rnorm(100),b=rnorm(100),c=rnorm(100))
> df <- data.frame(a=rnorm(100),b=rnorm(100),c=rnorm(100)) > which(names(df)%in%c("b", "c")) [1] 2 3
> df_sub <- df[, names(df)%in%c("b", "c")] > head(df_sub) b c 1 0.1712754 0.3119079 2 -1.3656995 0.7111664 3 -0.2176488 0.7714348 4 -0.6599826 -0.3528118 5 0.4510227 -1.6438053 6 0.2451216 2.5305453
mtcars$cyl <- factor(mtcars$cyl, labels=c("four","six","eight")) ggplot(mtcars, aes(x=wt, y=mpg, colour=cyl)) + geom_point(aes(colour=cyl)) + opts(legend.position = c(0, 1), title="Legend placement makes me sad")
ggplot(mtcars, aes(x=wt, y=mpg, colour=cyl)) + geom_point(aes(colour=cyl)) + opts(legend.position = c(0, 1), legend.justification = c(0, 1), legend.background = theme_rect(colour = NA, fill = "white"), title="Legend placement makes me happy")
p <- ggplot(mtcars, aes(x=wt, y=mpg, colour=cyl)) + geom_point(aes(colour=cyl)) + opts(legend.position = c(0, 1), legend.justification = c(0, 1), legend.background = theme_rect(colour = "black"), title="Legend placement makes me happy") gt <- ggplot_gtable(ggplot_build(p)) nr <- max(gt$layout$b) nc <- max(gt$layout$r) gb <- which(gt$layout$name == "guide-box") gt$layout[gb, 1:4] <- c(1, 1, nr, nc) grid.newpage() grid.draw(gt)
mtcars$cyl <- factor(mtcars$cyl, labels=c("four","six","eight")) library(gridExtra) a <- ggplot(mtcars, aes(x=wt, y=mpg, colour=cyl)) + geom_point(aes(colour=cyl)) + opts(legend.justification = c(0, 1), legend.position = c(0, 1), title="Legend is top left") b <- ggplot(mtcars, aes(x=wt, y=mpg, colour=cyl)) + geom_point(aes(colour=cyl)) + opts(legend.justification = c(1, 0), legend.position = c(1, 0), title="Legend is bottom right") c <- ggplot(mtcars, aes(x=wt, y=mpg, colour=cyl)) + geom_point(aes(colour=cyl)) + opts(legend.justification = c(0, 0), legend.position = c(0, 0), title="Legend is bottom left") d <- ggplot(mtcars, aes(x=wt, y=mpg, colour=cyl)) + geom_point(aes(colour=cyl)) + opts(legend.justification = c(1, 1), legend.position = c(1, 1), title="Legend is top right") grid.arrange(a,b,c,d)
mtcars$cyl <- factor(mtcars$cyl, labels=c("four","six","eight")) library(gridExtra) a <- ggplot(mtcars, aes(x=wt, y=mpg, colour=cyl)) + geom_point(aes(colour=cyl)) + labs(title = "Legend is top left") + theme(legend.justification = c(0, 1), legend.position = c(0, 1)) b <- ggplot(mtcars, aes(x=wt, y=mpg, colour=cyl)) + geom_point(aes(colour=cyl)) + labs(title = "Legend is bottom right") + theme(legend.justification = c(1, 0), legend.position = c(1, 0)) c <- ggplot(mtcars, aes(x=wt, y=mpg, colour=cyl)) + geom_point(aes(colour=cyl)) + labs(title = "Legend is bottom left") + theme(legend.justification = c(0, 0), legend.position = c(0, 0)) d <- ggplot(mtcars, aes(x=wt, y=mpg, colour=cyl)) + geom_point(aes(colour=cyl)) + labs(title = "Legend is top right") + theme(legend.justification = c(1, 1), legend.position = c(1, 1)) grid.arrange(a,b,c,d)
theme(legend.justification = c(1, 0), legend.position = c(1, 0), legend.box.margin=margin(c(50,50,50,50)))
days name 88 Lynn 11 Tom 2 Chris 5 Lisa 22 Kyla 1 Tom 222 Lynn 2 Lynn
target <- c("Tom", "Lynn") filt <- filter(dat, name == target)
longer object length is not a multiple of shorter object length
library(dplyr) target <- c("Tom", "Lynn") filter(dat, name %in% target)
days name 1 88 Lynn 2 11 Tom 3 1 Tom 4 222 Lynn 5 2 Lynn
Lynn == Tom Tom == Lynn Chris == Tom Lisa == Lynn ... continue repeating Tom and Lynn until end of data frame
df <- data.frame(days = c(88, 11, 2, 5, 22, 1, 222, 2), name = c("Lynn", "Tom", "Chris", "Lisa", "Kyla", "Tom", "Lynn", "Lynn")) target <- c("Tom", "Lynn") index <- df$name %in% target df[index, ] df[df$name %in% c("Tom", "Lynn"), ]
days name 1 88 Lynn 2 11 Tom 6 1 Tom 7 222 Lynn 8 2 Lynn
library(sqldf) sqldf( FROM df WHERE name = "Tom" OR name = "Lynn" sqldf( FROM df WHERE name IN ("Tom", "Lynn")
data.frame(a = c(1,2,3),b = c(1,2,3)) a b 1 1 1 2 2 2 3 3 3
a b 1 1 1 2 2 2 3 3 3 4 1 1 5 2 2 6 3 3 7 1 1 8 2 2 9 3 3
d <- data.frame(a = c(1,2,3),b = c(1,2,3)) n <- 3 do.call("rbind", replicate(n, d, simplify = FALSE))
packages <- c("data.table", "ggplot2", "RUnit", "microbenchmark") lapply(packages, require, character.only=T) Repeat1 <- function(d, n) { return(do.call("rbind", replicate(n, d, simplify = FALSE))) } Repeat2 <- function(d, n) { return(Reduce(rbind, list(d)[rep(1L, times=n)])) } Repeat3 <- function(d, n) { if ("data.table" %in% class(d)) return(d[rep(seq_len(nrow(d)), n)]) return(d[rep(seq_len(nrow(d)), n), ]) } Repeat3.dt.convert <- function(d, n) { if ("data.table" %in% class(d)) d <- as.data.frame(d) return(d[rep(seq_len(nrow(d)), n), ]) } mtcars1 <- Repeat1(mtcars, 3) mtcars2 <- Repeat2(mtcars, 3) mtcars3 <- Repeat3(mtcars, 3) checkEquals(mtcars1, mtcars2) checkEquals(mtcars1, mtcars3) mtcars.dt <- data.table(mtcars) mtcars.dt1 <- Repeat1(mtcars.dt, 3) mtcars.dt2 <- Repeat2(mtcars.dt, 3) mtcars.dt3 <- Repeat3(mtcars.dt, 3) checkEquals(mtcars.dt1, mtcars.dt2) checkEquals(mtcars.dt1, mtcars.dt3) res <- microbenchmark(Repeat1(mtcars, 10), Repeat2(mtcars, 10), Repeat3(mtcars, 10), Repeat1(mtcars.dt, 10), Repeat2(mtcars.dt, 10), Repeat3(mtcars.dt, 10), Repeat3.dt.convert(mtcars.dt, 10)) print(res) ggsave("repeat_microbenchmark.png", autoplot(res))
df <- data.frame(a = c(1, 2, 3), b = c(1, 2, 3)) library(dplyr) bind_rows(replicate(3, df, simplify = FALSE))
library(microbenchmark) microbenchmark(rbind = do.call("rbind", replicate(1000, df, simplify = FALSE)), bind_rows = bind_rows(replicate(1000, df, simplify = FALSE)), times = 20)
d <- data.frame(a = c(1,2,3),b = c(1,2,3)) r <- Reduce(rbind, list(d)[rep(1L, times=3L)])
mydata<-data.frame(a = c(1,2,3),b = c(1,2,3)) n<-10 mydata<-mydata[rep(rownames(mydata),n),] rownames(mydata)<-1:NROW(mydata)
library(dplyr) set.seed(5) dat = data.frame(x=sample(1:10,100, replace=TRUE)) dat %>% group_by(x) %>% summarise() x 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10
dat %>% group_by(x) %>% summarise() %>% select(unique.x=x)
set.seed(5) dat = data.frame(x=sample(1:10,100, replace=TRUE), y=sample(letters[1:5], 100, replace=TRUE)) dat %>% group_by(x,y) %>% summarise() %>% select(unique.x=x, unique.y=y)
library(dplyr) library(ggplot2) data_country = data %>% group_by(country) %>% summarise(conversion_rate = mean(converted)) qplot(country, conversion_rate, data = data_country,geom = "bar", stat ="identity", fill = country) ggplot(data_country)+aes(x=country,y = conversion_rate)+geom_bar()
country conversion_rate <fctr> <dbl> 1 China 0.001331558 2 Germany 0.062428188 3 UK 0.052612025 4 US 0.037800687
data_country <- data.frame(country = c("China", "Germany", "UK", "US"), conversion_rate = c(0.001331558,0.062428188, 0.052612025, 0.037800687)) ggplot(data_country, aes(x=country,y = conversion_rate)) +geom_bar(stat = "identity")
‘max.print’: integer, defaulting to ‘99999’. ‘print’ or ‘show’ methods can make use of this option, to limit the amount of information that is printed, to something in the order of (and typically slightly less than) ‘max.print’ _entries_.
itemizeDates(startDate="12-30-11", endDate="1-4-12")
"12-30-11" "12-31-11", "1-1-12", "1-2-12", "1-3-12", "1-4-12"
> seq(as.Date("2011-12-30"), as.Date("2012-01-04"), by="days") [1] "2011-12-30" "2011-12-31" "2012-01-01" "2012-01-02" "2012-01-03" [6] "2012-01-04"
> as.Date(as.Date("2011-12-30"):as.Date("2012-01-04"), origin="1970-01-01") [1] "2011-12-30" "2011-12-31" "2012-01-01" "2012-01-02" "2012-01-03" [6] "2012-01-04"
itemizeDates <- function(startDate="12-30-11", endDate="1-4-12", format="%m-%d-%y") { out <- seq(as.Date(startDate, format=format), as.Date(endDate, format=format), by="days") format(out, format) } > itemizeDates(startDate="12-30-11", endDate="1-4-12") [1] "12-30-11" "12-31-11" "01-01-12" "01-02-12" "01-03-12" "01-04-12"
library(lubridate) >start_date <- mdy("12-30-11") >end_date <- mdy("1-4-12") >n_days <- interval(start_date,end_date)/days(1) >start_date + days(0:n_days) [1]"2011-12-30" "2011-12-31" "2012-01-01" "2012-01-02" "2012-01-03" "2012-01-04" format(start_date + days(0:n_days), format="%m-%d-%y") [1] "12-30-11" "12-31-11" "01-01-12" "01-02-12" "01-03-12" "01-04-12"
sample.list <- list(data.frame(x = sample(1:100, 10), y = sample(1:100, 10), capt = sample(0:1, 10, replace = TRUE)), data.frame(x = sample(1:100, 10), y = sample(1:100, 10), capt = sample(0:1, 10, replace = TRUE)), data.frame(x = sample(1:100, 10), y = sample(1:100, 10), capt = sample(0:1, 10, replace = TRUE)), data.frame(x = sample(1:100, 10), y = sample(1:100, 10), capt = sample(0:1, 10, replace = TRUE)), data.frame(x = sample(1:100, 10), y = sample(1:100, 10), capt = sample(0:1, 10, replace = TRUE)), data.frame(x = sample(1:100, 10), y = sample(1:100, 10), capt = sample(0:1, 10, replace = TRUE)), data.frame(x = sample(1:100, 10), y = sample(1:100, 10), capt = sample(0:1, 10, replace = TRUE)))
my.list <- vector("list", nrow(sample.list[[1]])) for (i in 1:nrow(sample.list[[1]])) { for (j in 1:length(sample.list)) { my.list[[i]] <- rbind(my.list[[i]], sample.list[[j]][i, ]) } } sample.list2 <- do.call("rbind", sample.list) my.list2 <- vector("list", nrow(sample.list[[1]])) for (i in 1:nrow(sample.list[[1]])) { my.list2[[i]] <- sample.list2[seq(from = i, to = nrow(sample.list2), by = nrow(sample.list[[1]])), ] }
ind <- rep(1:nrow(sample.list[[1]]), times = length(sample.list)) my.list3 <- split(x = sample.list2, f = ind)
system.time(for (i in 1:nrow(sample.list[[1]])) { for (j in 1:length(sample.list)) { my.list[[i]] <- rbind(my.list[[i]], sample.list[[j]][i, ]) } }) user system elapsed 80.989 0.004 81.210 system.time(for (i in 1:nrow(sample.list[[1]])) { my.list2[[i]] <- sample.list2[seq(from = i, to = nrow(sample.list2), by = nrow(sample.list[[1]])), ] }) user system elapsed 0.957 0.160 1.126 system.time(split(x = sample.list2, f = ind)) user system elapsed 1.104 0.204 1.332 system.time(lapply(1:nr, bind.ith.rows)) user system elapsed 0.484 0.000 0.485 system.time(alply(do.call("cbind",sample.list), 1, .fun=matrix, ncol=ncol(sample.list[[1]]), byrow=TRUE, dimnames=list(1:length(sample.list),names(sample.list[[1]])))) user system elapsed 11.296 0.016 11.365
bind.ith.rows <- function(i) do.call(rbind, lapply(sample.list, "[", i, TRUE)) nr <- nrow(sample.list[[1]]) lapply(1:nr, bind.ith.rows)
sample.list <- replicate(10000, data.frame(x = sample(1:100, 10), y = sample(1:100, 10), capt = sample(0:1, 10, replace = TRUE)), simplify = F)
bind.ith.rows <- function(i) do.call(rbind, lapply(sample.list, "[", i, TRUE)) nr <- nrow(sample.list[[1]]) system.time(rowbound <- lapply(1:nr, bind.ith.rows))
library(data.table) fastbind.ith.rows <- function(i) rbindlist(lapply(sample.list, "[", i, TRUE)) system.time(fastbound <- lapply(1:nr, fastbind.ith.rows))
system.time({ invisible(lapply(sample.list, setattr, name = "class", value = c("data.table", "data.frame"))) bigdata <- rbindlist(sample.list) index <- as.character(seq_len(nr)) bigdata[, `:=`(rowid, index)] setkey(bigdata, rowid) dt_list <- lapply(index, function(i, j, x) x[i = J(i)], x = bigdata) invisible(lapply(dt_list, function(x) set(x, j = "rowid", value = NULL))) })
library(plyr) alply(do.call("cbind",sample.list), 1, .fun=matrix, ncol=ncol(sample.list[[1]]), byrow=TRUE, dimnames=list(1:length(sample.list), names(sample.list[[1]]) ))
key = "width" value = 32 mylist = list() mylist$key = value
key <- "width" value <- 32 mylist <- list() mylist[[ key ]] <- value
players <- c("bob", "tom", "tim", "tony", "tiny", "hubert", "herbert") rankings <- c(0.2027, 0.2187, 0.0378, 0.3334, 0.0161, 0.0555, 0.1357) league <- setNames(as.list(rankings), players)
ID Value1 Value2 P1 100 12 P1 120 13 ... P2 300 11 P2 400 16 ... P3 130 15 P3 140 12 ...
ggplot(subset(df,ID=="P1 & P3") + geom_line(aes(Value1, Value2, group=ID, colour=ID)))
library(ggplot2) ggplot(subset(dat,ID %in% c("P1" , "P3"))) + geom_line(aes(Value1, Value2, group=ID, colour=ID))
library(plyr) ggplot(data=dat)+ geom_line(aes(Value1, Value2, group=ID, colour=ID), ,subset = .(ID %in% c("P1" , "P3")))
myplot<-ggplot(df)+geom_line(aes(Value1, Value2, group=ID, colour=ID)) myplot %+% subset(df, ID %in% c("P1","P3")) myplot %+% subset(df, ID %in% c("P2"))
library(ggplot2) l<-df[df$ID %in% c("P1","P3"),] myplot<-ggplot(l)+geom_line(aes(Value1, Value2, group=ID, colour=ID))
library(plyr) ggplot(data=dat) + geom_line(aes(Value1, Value2, group=ID, colour=ID), data=function(x){x$ID %in% c("P1", "P3"))
library(plyr) ggplot(data=dat, aes(Value1, Value2, group=ID, colour=ID)) + geom_line(data=function(x){x[!x$ID %in% c("P1", "P3"), ]}, alpha=0.5) + geom_line(data=function(x){x[x$ID %in% c("P1", "P3"), ]})
ggplot(data=dat)+ geom_line(aes(Value1, Value2, group=ID, colour=ID), data = . %>% filter(ID %in% c("P1" , "P3")))
x <- lapply(codepages, function(enc) try(read.table("encoding.asc", fileEncoding=enc, nrows=3, header=TRUE, sep="\t")))
maybe_ok <- sapply(x, function(x) isTRUE(all.equal(dim(x), c(3,29)))) codepages[maybe_ok]
> f <- file( > readLines(f,10) [1] "\tFe 2\tZn\tO\tC\tSi\tMn\tP\tS\tAl\tN\tCr\tNi\tMo\tCu\tV\tNb 2\tTi\tB\tZr\tCa\tH\tCo\tMg\tPb 2\tW\tCl\tNa 3\tAr" [2] "" [3] "0\t0,003128\t3,82E-05\t0,0004196\t0\t0,001869\t0,005836\t0,004463\t0,002861\t0,02148\t0\t0,004768\t0,0003052\t0\t0,0037\t0,0391\t0,06409\t0,1157\t0,004654\t0\t0\t0\t0,00824\t7,63E-05\t0,003891\t0,004501\t0\t0,001335\t0,01175" [4] "0,0005\t0,003265\t3,05E-05\t0,0003662\t0\t0,001709\t0,005798\t0,004395\t0,002808\t0,02155\t0\t0,004578\t0,0002441\t0\t0,003601\t0,03897\t0,06406\t0,1158\t0,0047\t0\t0\t0\t0,008026\t6,10E-05\t0,003876\t0,004425\t0\t0,001343\t0,01157" [5] "0,001\t0,003332\t2,54E-05\t0,0003052\t0\t0,001704\t0,005671\t0,0044\t0,002823\t0,02164\t0\t0,004603\t0,0003306\t0\t0,003611\t0,03886\t0,06406\t0,1159\t0,004705\t0\t0\t0\t0,008036\t5,09E-05\t0,003815\t0,004501\t0\t0,001246\t0,01155" [6] "0,0015\t0,003313\t2,18E-05\t0,0002616\t0\t0,001678\t0,005689\t0,004447\t0,002921\t0,02171\t0\t0,004621\t0,0003488\t0\t0,003597\t0,03889\t0,06404\t0,1158\t0,004752\t0\t0\t0\t0,008022\t4,36E-05\t0,003815\t0,004578\t0\t0,001264\t0,01144" [7] "0,002\t0,003313\t2,18E-05\t0,0002834\t0\t0,001591\t0,005646\t0,00436\t0,003008\t0,0218\t0\t0,004643\t0,0003488\t0\t0,003619\t0,03895\t0,06383\t0,1159\t0,004752\t0\t0\t0\t0,008\t4,36E-05\t0,003771\t0,004643\t0\t0,001351\t0,01142" [8] "0,0025\t0,003488\t2,18E-05\t0,000218\t0\t0,001657\t0,00558\t0,004338\t0,002986\t0,02175\t0\t0,004469\t0,0002616\t0\t0,00351\t0,03889\t0,06374\t0,1159\t0,004621\t0\t0\t0\t0,008131\t4,36E-05\t0,003771\t0,004708\t0\t0,001243\t0,01125" [9] "0,003\t0,003619\t0\t0,0001526\t0\t0,001591\t0,005668\t0,004207\t0,00303\t0,02169\t0\t0,00449\t0,0002834\t0\t0,00351\t0,03874\t0,06383\t0,116\t0,004665\t0\t0\t0\t0,007956\t0\t0,003749\t0,004796\t0\t0,001286\t0,01125" [10] "0,0035\t0,003422\t0\t4,36E-05\t0\t0,001482\t0,005711\t0,004185\t0,003292\t0,02156\t0\t0,004665\t0,0003488\t0\t0,003553\t0,03852\t0,06391\t0,1158\t0,004708\t0\t0\t0\t0,007717\t0\t0,003597\t0,004905\t0\t0,00133\t0,01136"
> head(df) X Fe.2 Zn O C Si Mn P S 1 0.0000 0.003128 3.82e-05 0.0004196 0 0.001869 0.005836 0.004463 0.002861 2 0.0005 0.003265 3.05e-05 0.0003662 0 0.001709 0.005798 0.004395 0.002808 3 0.0010 0.003332 2.54e-05 0.0003052 0 0.001704 0.005671 0.004400 0.002823 4 0.0015 0.003313 2.18e-05 0.0002616 0 0.001678 0.005689 0.004447 0.002921 5 0.0020 0.003313 2.18e-05 0.0002834 0 0.001591 0.005646 0.004360 0.003008 6 0.0025 0.003488 2.18e-05 0.0002180 0 0.001657 0.005580 0.004338 0.002986 Al N Cr Ni Mo Cu V Nb.2 Ti B Zr 1 0.02148 0 0.004768 0.0003052 0 0.003700 0.03910 0.06409 0.1157 0.004654 0 2 0.02155 0 0.004578 0.0002441 0 0.003601 0.03897 0.06406 0.1158 0.004700 0 3 0.02164 0 0.004603 0.0003306 0 0.003611 0.03886 0.06406 0.1159 0.004705 0 4 0.02171 0 0.004621 0.0003488 0 0.003597 0.03889 0.06404 0.1158 0.004752 0 5 0.02180 0 0.004643 0.0003488 0 0.003619 0.03895 0.06383 0.1159 0.004752 0 6 0.02175 0 0.004469 0.0002616 0 0.003510 0.03889 0.06374 0.1159 0.004621 0 Ca H Co Mg Pb.2 W Cl Na.3 Ar 1 0 0 0.008240 7.63e-05 0.003891 0.004501 0 0.001335 0.01175 2 0 0 0.008026 6.10e-05 0.003876 0.004425 0 0.001343 0.01157 3 0 0 0.008036 5.09e-05 0.003815 0.004501 0 0.001246 0.01155 4 0 0 0.008022 4.36e-05 0.003815 0.004578 0 0.001264 0.01144 5 0 0 0.008000 4.36e-05 0.003771 0.004643 0 0.001351 0.01142 6 0 0 0.008131 4.36e-05 0.003771 0.004708 0 0.001243 0.01125
library(sendmailR) setwd("C:/workingdirectorypath") from <- "you@account.com" to <- "recipient@account.com" subject <- "Email Subject" body <- "Email body." mailControl=list(smtpServer="serverinfo") sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl) attachmentPath <- "subfolder/log.txt" attachmentName <- "log.txt" attachmentObject <- mime_part(x=attachmentPath,name=attachmentName) bodyWithAttachment <- list(body,attachmentObject) sendmail(from=from,to=to,subject=subject,msg=bodyWithAttachment,control=mailControl)
attachmentObject <- mime_part(x="subfolder/log.txt",name="log.txt") attachmentObject2 <- mime_part(x="subfolder/log2.txt",name="log2.txt") bodyWithAttachment <- list(body,attachmentObject,attachmentObject2)
install.packages("devtools", dep = T) library(devtools) install_github("rpremraj/mailR")
library(mailR) send.mail(from = "sender@gmail.com", to = c("recipient1@gmail.com", "recipient2@gmail.com"), subject = "Subject of the email", body = "Body of the email", smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "gmail_username", passwd = "password", ssl = TRUE), authenticate = TRUE, send = TRUE, attach.files = c("./download.log", "upload.log", "https: file.names = c("Download log.log", "Upload log.log", "DropBox File.rtf"), file.descriptions = c("Description for download log", "Description for upload log", "DropBox File"), debug = TRUE)
SendMail <- function(from="me@my-server.de",to="me@my-server.de",text="Hallo",subject="Sag Hallo",smtp="smtp.my.server.de",user="me.myself.and.i",pw="123"){ require(stringr) part1 <- "Const cdoSendUsingPickup = 1 Const cdoSendUsingPort = 2 Const cdoAnonymous = 0 Const cdoBasic = 1 Const cdoNTLM = 2 part2 <- paste(paste("Set objMessage = CreateObject(", paste("objMessage.Subject = ", paste("objMessage.From = ", paste("objMessage.To = ", paste("objMessage.TextBody = ", sep="\n") part3 <- paste( " objMessage.Configuration.Fields.Item _ (\"http: objMessage.Configuration.Fields.Item _ (\"http: objMessage.Configuration.Fields.Item _ (\"http: objMessage.Configuration.Fields.Item _ (\"http: objMessage.Configuration.Fields.Item _ (\"http: objMessage.Configuration.Fields.Item _ (\"http: objMessage.Configuration.Fields.Item _ (\"http: objMessage.Configuration.Fields.Item _ (\"http: objMessage.Configuration.Fields.Update objMessage.Send ",sep="") vbsscript <- paste(part1,part2,part3,sep="\n\n\n") str_split(vbsscript,"\n") writeLines(vbsscript, "sendmail.vbs") shell("sendmail.vbs") unlink("sendmail.vbs") }
library(jsonlite) library(XML) library(httr) library(rjson) library(RCurl) options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))) authenticate_twilio <- "https: authenticate_response <- getURL(authenticate_twilio) print(authenticate_response) postForm("https:
reset_par <- function(){ op <- structure(list(xlog = FALSE, ylog = FALSE, adj = 0.5, ann = TRUE, ask = FALSE, bg = "transparent", bty = "o", cex = 1, cex.axis = 1, cex.lab = 1, cex.main = 1.2, cex.sub = 1, col = "black", col.axis = "black", col.lab = "black", col.main = "black", col.sub = "black", crt = 0, err = 0L, family = "", fg = "black", fig = c(0, 1, 0, 1), fin = c(6.99999895833333, 6.99999895833333 ), font = 1L, font.axis = 1L, font.lab = 1L, font.main = 2L, font.sub = 1L, lab = c(5L, 5L, 7L), las = 0L, lend = "round", lheight = 1, ljoin = "round", lmitre = 10, lty = "solid", lwd = 1, mai = c(1.02, 0.82, 0.82, 0.42), mar = c(5.1, 4.1, 4.1, 2.1), mex = 1, mfcol = c(1L, 1L), mfg = c(1L, 1L, 1L, 1L), mfrow = c(1L, 1L), mgp = c(3, 1, 0), mkh = 0.001, new = FALSE, oma = c(0, 0, 0, 0), omd = c(0, 1, 0, 1), omi = c(0, 0, 0, 0), pch = 1L, pin = c(5.75999895833333, 5.15999895833333), plt = c(0.117142874574832, 0.939999991071427, 0.145714307397962, 0.882857125425167), ps = 12L, pty = "m", smo = 1, srt = 0, tck = NA_real_, tcl = -0.5, usr = c(0.568, 1.432, 0.568, 1.432), xaxp = c(0.6, 1.4, 4), xaxs = "r", xaxt = "s", xpd = FALSE, yaxp = c(0.6, 1.4, 4), yaxs = "r", yaxt = "s", ylbias = 0.2), .Names = c("xlog", "ylog", "adj", "ann", "ask", "bg", "bty", "cex", "cex.axis", "cex.lab", "cex.main", "cex.sub", "col", "col.axis", "col.lab", "col.main", "col.sub", "crt", "err", "family", "fg", "fig", "fin", "font", "font.axis", "font.lab", "font.main", "font.sub", "lab", "las", "lend", "lheight", "ljoin", "lmitre", "lty", "lwd", "mai", "mar", "mex", "mfcol", "mfg", "mfrow", "mgp", "mkh", "new", "oma", "omd", "omi", "pch", "pin", "plt", "ps", "pty", "smo", "srt", "tck", "tcl", "usr", "xaxp", "xaxs", "xaxt", "xpd", "yaxp", "yaxs", "yaxt", "ylbias")) par(op) }
require(MASS) require(dplyr) mtcars %>% dplyr::select(mpg)
detach("package:dplyr", character.only = TRUE) library("dplyr", character.only = TRUE)
valbanks<-scan("banks.txt", what=list(0,0,""), sep="", skip=1, comment.char=" valbanks valj2007<-valbanks[[1]] valj2009<-valbanks[[2]] namebank<-valbanks[[3]] percent_losses<-(valj2009-valj2007)/valj2007 percent_losses abs_losses<-(valj2007-valj2009) abs_losses plot(abs_losses, percent_losses,main="Absolute Losses vs. Relative Losses(in%)",xlab="Losses (absolute, in miles of millions)",ylab="Losses relative (in % of January´2007 value",col="blue", pch = 19, cex = 1, lty = "solid", lwd = 2,text(percet_losses, abs_losses,namebank)) text(percet_losses, abs_losses,labels=namebank, cex= 0.7, offset = 10)
Value_Jan_2007 Value_Jan_2009 Bank # 49 16 Morgan_Stanley 120 4.6 RBS 76 10.3 Deutsche_Bank 67 17 Credit_Agricole 80 26 Societé_Generale 91 7.4 Barclays 108 32.5 BNP-Paribas 93 26 Unicredit 116 35 UBS 75 27 Credit_Suise 100 35 Goldman_Sachs 116 64 Santander 255 19 Citigroup 165 85 JP_Morgan 215 97 HSBC
plot(abs_losses, percent_losses, main= "Absolute Losses vs. Relative Losses(in%)", xlab= "Losses (absolute, in miles of millions)", ylab= "Losses relative (in % of January´2007 value)", col= "blue", pch = 19, cex = 1, lty = "solid", lwd = 2) text(abs_losses, percent_losses, labels=namebank, cex= 0.7)
text(abs_losses, percent_losses, labels=namebank, cex= 0.7, pos=3)
pos_vector <- rep(3, length(namebank)) pos_vector[namebank %in% c("Goldman_Sachs", "Societé_Generale", "UBS")] <- 4 text(abs_losses, percent_losses, labels=namebank, cex= 0.7, pos=pos_vector)
text(your.vector, labels=your.labels, cex= labels.size, pos=labels.position)
library(tm) pdf <- readPDF(PdftotextOptions = "-layout") dat <- pdf(elem = list(uri= dat <- gsub( out <- read.csv(textConnection(dat), header=FALSE)
install.packages("pdftools") library(pdftools) download.file("http: txt <- pdf_text("1403.2805.pdf") cat(txt[1]) cat(txt[2])
library(tm) uri = pdf = readPDF(control = list(text = "-layout"))(elem = list(uri = uri), language = "en", id = "id1")
> fit = lm(x~`y) + fit = lm(x~y) + fit + summary(fit) + + + end + ; + break + ) + + + + + + quit() + + quit + break() + abline(b0hat,b1hat) + return(null) +
library(quantmod) getSymbols("SPY") SPY[.indexmon(SPY)==0] SPY[.indexmday(SPY)==1] SPY[.indexwday(SPY)==1]
library(quantmod) library(xts) getSymbols("SPY", src="google", from = "2004-01-01") x1 <- SPY[ x2 <- apply.monthly(x1,mean) x2[ x3 <- as.xts(coredata(x2),order.by = as.yearmon(index(x2))) x3[
flatten1 <- function(x) { y <- list() rapply(x, function(x) y <<- c(y,x)) y }
flatten2 <- function(x) { len <- sum(rapply(x, function(x) 1L)) y <- vector( i <- 0L rapply(x, function(x) { i <<- i+1L; y[[i]] <<- x }) y }
flatten3 <- function(x) { repeat { if(!any(vapply(x, is.list, logical(1)))) return(x) x <- Reduce(c, x) } }
x <- list(NA, list("TRUE", list(FALSE), 0L)) dput( flatten1(x) ) dput( flatten2(x) ) dput( flatten3(x) ) x <- as.list(1:1e5) system.time( flatten2(x) ) system.time( flatten3(x) ) x <- system.time( flatten2(x) ) system.time( flatten3(x) )
> dput(flatten1( list(1:3, list(1:3, list(1L, 2L, 3L, 1L, 2L, 3L, "foo") > dput(flatten2( list(1:3, list(1:3, list(1:3, 1:3, "foo") > dput(flatten3( list(1:3, list(1:3, list(1L, 2L, 3L, 1:3, "foo")
L <- (list(NA, list("TRUE", list(FALSE), 0L))) Reduce(c, Reduce(c, L)) [[1]] [1] NA [[2]] [1] "TRUE" [[3]] [1] FALSE [[4]] [1] 0 x <- as.list(1:4e3) system.time(flatten(x)) system.time(Reduce(c, x))
flatten <- function(x) { x <- list(x) repeat { x <- Reduce(c, x) if(!any(vapply(x, is.list, logical(1)))) return(x) } } flatten(list(3, TRUE,
flatten4 <- function(x) { while(any(vapply(x, is.list, logical(1)))) { x <- lapply(x, function(x) if(is.list(x)) x else list(x)) x <- unlist(x, recursive=FALSE) } x }
> x <- list(1:3, list(1:3, > dput(flatten4(x)) list(1:3, 1:3, "foo")
dput(flatten4(foo)) x <- as.list(1:1e5) system.time( x2 <- flatten2(x) ) system.time( x3 <- flatten3(x) ) system.time( x4 <- flatten4(x) ) identical(x2, x4) identical(x3, x4) x <- system.time( x2 <- flatten2(x) ) system.time( x3 <- flatten3(x) ) system.time( x4 <- flatten4(x) ) identical(x2, unname(x4)) identical(unname(x3), unname(x4))
depth <- function(x) { foo <- function(x, i=NULL) { if(is.list(x)) { lapply(seq_along(x), function(xi) foo(x[[xi]], c(i,xi))) } else { i } } flatten4(foo(x)) }
x <- as.list(1:1e5) system.time(d <- depth(x)) x <- system.time(d <- depth(x))
> table(sapply(d, length)) 1 2 3 4 5 6 7 8 9 10 11 1 2 4 8 16 32 64 128 256 512 3072
l <- list(NA, list("TRUE", list(FALSE), 0L)) flatten <- function(x){ obj <- rapply(x,identity,how = "unlist") cl <- rapply(x,class,how = "unlist") len <- rapply(x,length,how = "unlist") cl <- rep(cl,times = len) mapply(function(obj,cl){rs <- as(obj,cl); rs}, obj, cl, SIMPLIFY = FALSE, USE.NAMES = FALSE) } > flatten(l) [[1]] [1] NA [[2]] [1] "TRUE" [[3]] [1] FALSE [[4]] [1] 0
library(purrr) l <- list(NA, list("TRUE", list(FALSE), 0L)) flatten(flatten(l))
flatten_recursive <- function(x) { stopifnot(is.list(x)) if (any(vapply(x, is.list, logical(1)))) Recall(purrr::flatten(x)) else x } flatten_recursive(l)
hack_list <- function(.list) { .list[[ .list <- unlist(.list) .list$`_hack` <- NULL .list }
SN = c(1:100, 1:100, 1:100, 1:100) class = c(rep("A1", 100), rep("B2", 100), rep("C3", 100), rep("D4", 100)) myvar = rnorm(400) mydf = data.frame(SN, class, myvar)
> dcast(mydf, SN ~ class) SN A1 B2 C3 D4 1 1 0.1461258 0.8325014 0.33562088 -0.07294576 2 2 0.5964182 0.4593710 -0.23652803 -1.52539568 3 3 2.0247742 -1.1235963 1.79875447 -1.87462227 4 4 0.8184004 1.3486721 0.76076486 -1.18311991 5 5 -0.6577212 0.3666741 -0.06057506 1.38825487 6 6 0.1590443 0.2043661 0.08161778 0.10421797 ...
molten = melt( mydf , id.vars = c( "SN" , "class" ) , measure.vars = "myvar" ) casted = dcast( molten , SN~class )
mydf <- mydf[order(mydf$class, mydf$SN),] SNu <- unique(mydf$SN) mydfw <- data.frame(SNu, matrix(mydf$myvar, nrow = length(SNu))) colnames(mydfw) <- c(
mydfSplit <- split(mydf[,-2], mydf$class, drop=TRUE)
> x <- DT(a=1:3, b=2:4, key= > x a b [1,] 1 2 [2,] 2 3 [3,] 3 4 > y <- DT(a=1:3, c=c( > y a c [1,] 1 a [2,] 2 b [3,] 3 c > x[y] a b [1,] 1 2 [2,] 2 3 [3,] 3 4 > merge(x,y) a b c 1 1 2 a 2 2 3 b 3 3 4 c
x <- data.table( foo = 1:5, a=20:24, zoo = 5:1 ) y <- data.table( foo = 1:5, b=30:34, boo = 10:14) setkey(x, foo) setkey(y, foo)
library(data.table) sdt <- DT(series, key= ddt <- DT(data, key= u <- sdt[ grepl( d <- ddt[ u, DT(min=min(value)), by= data <- merge(d,series)[,c(
library(ggplot2) library(dplyr) library(lubridate) library(stackr) answers <- stack_users(712603, "answers", num_pages = 10, pagesize = 100) answers_per_month <- answers %>% mutate(month = round_date(creation_date, "month")) %>% count(month) ggplot(answers_per_month, aes(month, n)) + geom_line()
top_2_months <- answers_per_month %>% top_n(2) library(ggfreehand) ggplot(answers_per_month, aes(month, n)) + geom_line() + geom_freehand(data = top_2_months)
p <- ggplot(answers_per_month, aes(month, n)) + geom_line() p + geom_freehand(data = top_2, radius = .5) p + geom_freehand(data = top_2, noisiness = 10) p + geom_freehand(data = top_2, noisiness = 1) p + geom_freehand(data = top_2, color = "blue")
x <- 1:10 y <- x^2 png("~/Desktop/small.png", width = 600, height = 400) plot(x, y) dev.off() png("~/Desktop/big.png", width = 1200, height = 800) plot(x, y) dev.off()
shinyUI(pageWithSidebar( headerPanel("Title"), sidebarPanel(), mainPanel( plotOutput(outputId = "main_plot", width = "100%")) ))
shinyServer(function(input, output) { x <- 1:10 y <- x^2 output$main_plot <- renderPlot({ plot(x, y) }, height = 400, width = 600 ) } )
shinyUI(pageWithSidebar( headerPanel("Title"), sidebarPanel( sliderInput(inputId = "opt.cex", label = "Point Size (cex)", min = 0, max = 2, step = 0.25, value = 1), sliderInput(inputId = "opt.cexaxis", label = "Axis Text Size (cex.axis)", min = 0, max = 2, step = 0.25, value = 1) ), mainPanel( plotOutput(outputId = "main_plot", width = "100%"), plotOutput(outputId = "main_plot2", width = "100%") ) )) shinyServer(function(input, output) { x <- 1:10 y <- x^2 output$main_plot <- renderPlot({ plot(x, y)}, height = 200, width = 300) output$main_plot2 <- renderPlot({ plot(x, y, cex=input$opt.cex, cex.lab=input$opt.cexaxis) }, height = 400, width = 600 ) } )
mainPanel( plotOutput(outputId = "new_main_plot", width = "100%"), plotOutput(outputId = "new_main_plot2", width = "25%") )
p <- ggplot(data, aes(x = x, y = y)) + geom_point() p <- p + theme(axis.text = element_text(size = 20)) print(p)
> dta idx vala fdx 1: 1 2 a 2: 2 4 a 3: 3 6 b > dtb idx valb 1: 1 3 2: 4 6 > dput(x = dta) structure(list(idx = c(1, 2, 3), vala = c(2, 4, 6), fdx = c("a", "a", "b")), .Names = c("idx", "vala", "fdx"), row.names = c(NA, -3L), class = c("data.table", "data.frame"), .internal.selfref = <pointer: 0x0000000000110788>, sorted = "idx") > dput(x = dtb) structure(list(idx = c(1, 4), valb = c(3, 6)), .Names = c("idx", "valb"), row.names = c(NA, -2L), class = c("data.table", "data.frame" ), .internal.selfref = <pointer: 0x0000000000110788>, sorted = "idx")
> dta[dtb, sum(valb), by = fdx] Error in `[.data.table`(dta, dtb, sum(valb), by = fdx) : object
> dta[dtb][, sum(valb), by = fdx] fdx V1 1: a 3 2: NA 6
> dta[dtb] idx vala fdx valb 1: 1 2 a 3 2: 4 NA NA 6
dta[dtb, sum(valb), by = fdx] == dta[dtb][, sum(valb), by = fdx]
library(data.table) dta <- data.frame(idx=c(1,2,3), vala=c(2,4,6), fdx=c( dta <- data.table(dta) dtb <- data.frame(idx=c(1,4), valb=c(3,6)) dtb <- data.table(dtb) setkey(dta,idx) setkey(dtb,idx)
substring(x, seq(1, nchar(x), 2), seq(2, nchar(x), 2))
library("plyr") laply(seq(1, nchar(x), 2), function(i) substr(x, i, i+1))
x <- "xxyyxyxy" sst <- strsplit(x, "")[[1]] paste0(sst[c(TRUE, FALSE)], sst[c(FALSE, TRUE)])
library(microbenchmark) GSee <- function(x) { sst <- strsplit(x, "")[[1]] paste0(sst[c(TRUE, FALSE)], sst[c(FALSE, TRUE)]) } Shane1 <- function(x) { substring(x, seq(1,nchar(x),2), seq(2,nchar(x),2)) } library("plyr") Shane2 <- function(x) { laply(seq(1,nchar(x),2), function(i) substr(x, i, i+1)) } seth <- function(x) { strsplit(gsub("([[:alnum:]]{2})", "\\1 ", x), " ")[[1]] } geoffjentry <- function(x) { idx <- 1:nchar(x) odds <- idx[(idx %% 2) == 1] evens <- idx[(idx %% 2) == 0] substring(x, odds, evens) } drewconway <- function(x) { c<-strsplit(x,"")[[1]] sapply(seq(2,nchar(x),by=2),function(y) paste(c[y-1],c[y],sep="")) } KenWilliams <- function(x) { n <- 2 sapply(seq(1,nchar(x),by=n), function(xx) substr(x, xx, xx+n-1)) } RichardScriven <- function(x) { regmatches(x, gregexpr("(.{2})", x))[[1]] }
x <- "xxyyxyxy" microbenchmark( GSee(x), Shane1(x), Shane2(x), seth(x), geoffjentry(x), drewconway(x), KenWilliams(x), RichardScriven(x) )
x <- paste(sample(c("xx", "yy", "xy"), 1e5, replace=TRUE), collapse="") microbenchmark( GSee(x), Shane1(x), Shane2(x), seth(x), geoffjentry(x), drewconway(x), KenWilliams(x), RichardScriven(x), times=3 )
strsplit(gsub("([[:alnum:]]{2})", "\\1 ", x), " ")[[1]]
z <- idx <- 1:nchar(z) odds <- idx[(idx %% 2) == 1] evens <- idx[(idx %% 2) == 0] substring(z, odds, evens)
a <- "xxyyxyxy" n <- 2 sapply(seq(1,nchar(a),by=n), function(x) substr(a, x, x+n-1))
x <- "xxyyxyxy" c<-strsplit(x,"")[[1]] sapply(seq(2,nchar(x),by=2),function(y) paste(c[y-1],c[y],sep="")) [1] "xx" "yy" "xy" "xy"
fixed_split <- function(text, n) { strsplit(text, paste0("(?<=.{",n,"})"), perl=TRUE) } fixed_split(x, 2) [[1]] [1] "xx" "yy" "xy" "xy"
substring(x,seq(1,nchar(x),n),seq(n,nchar(x)+n-1,n))
chopS <- function( text, chunk_len = 2, seqn) { insert <- paste("(.{",chunk_len,"})", sep = "") replace <- paste("\\1", seqn, sep = "") interp_text <- gsub( pattern, replace, text) strsplit( interp_text, seqn) }
GSee <- function(x) { sst <- strsplit(x, "")[[1]] paste0(sst[c(TRUE, FALSE)], sst[c(FALSE, TRUE)]) } rstub <- Rcpp::cppFunction( code = ' CharacterVector strsplit2(const std::string& hex) { unsigned int length = hex.length()/2; CharacterVector res(length); for (unsigned int i = 0; i < length; ++i) { res(i) = hex.substr(2*i, 2); } return res; } x <- "xxyyxyxy" all.equal(GSee(x), rstub(x)) microbenchmark::microbenchmark(GSee(x), rstub(x)) set.seed(42) x <- paste(sample(c("xx", "yy", "xy"), 1e5, replace = TRUE), collapse = "") all.equal(GSee(x), rstub(x)) microbenchmark::microbenchmark(GSee(x), rstub(x))
library(stringi) split_line <- function(x) { row_length <- stri_length(x) stri_sub(x, seq.int(1L, row_length, 2L), seq.int(2L, row_length, 2L)) }
split_line <- function(x) { stri_sub(x, seq.int(1L, stri_length(x), 109L), length = 109L) }
x <- "xxyyxyxy" stringi::stri_sub(x, seq(1, stringi::stri_length(x), by = 2), length = 2)
dat <- read.csv("data2.csv") head(dat) mon hr acc alc sex spd axles door reg cond1 drug1 1 8 21 No Control TRUE F 0 2 2 Physical Impairment (Eyes, Ear, Limb) A 2 7 20 No Control FALSE M 900 2 2 Inattentive D 3 3 9 No Control FALSE F 100 2 2 2004 Normal D 4 1 15 No Control FALSE M 0 2 2 Physical Impairment (Eyes, Ear, Limb) D 5 4 21 No Control FALSE 25 NA NA D 6 4 20 No Control NA F 30 2 4 Drinking Alcohol - Impaired D inj1 PED_STATE st rac1 1 Fatal <NA> F <NA> 2 Moderate <NA> F <NA> 3 Moderate <NA> M <NA> 4 Complaint <NA> M <NA> 5 Complaint <NA> F <NA> 6 Moderate <NA> M <NA> dat2 <- read.csv("data2.csv", header=T, na.strings="") head(dat2) mon hr acc alc sex spd axles door reg cond1 drug1 1 8 21 No Control TRUE F 0 2 2 <NA> Physical Impairment (Eyes, Ear, Limb) A 2 7 20 No Control FALSE M 900 2 2 <NA> Inattentive D 3 3 9 No Control FALSE F 100 2 2 2004 Normal D 4 1 15 No Control FALSE M 0 2 2 <NA> Physical Impairment (Eyes, Ear, Limb) D 5 4 21 No Control FALSE 25 NA NA <NA> <NA> D 6 4 20 No Control NA F 30 2 4 <NA> Drinking Alcohol - Impaired D inj1 PED_STATE st rac1 1 Fatal NA F NA 2 Moderate NA F NA 3 Moderate NA M NA 4 Complaint NA M NA 5 Complaint NA F NA 6 Moderate NA M NA
dat2 <- read.csv("data2.csv", header=T, na.strings=c("","NA"))
data= data.frame(cats=c( apply(data, 2, function(x) gsub("^$|^ $", NA, x))
require(dplyr) iris[1,1]="" empty_as_na <- function(x){ if("factor" %in% class(x)) x <- as.character(x) ifelse(as.character(x)!="", x, NA) } iris %>% mutate_each(funs(empty_as_na))
df$Var <- as.character(df$Var) df$Var[df$Var==""] <- "NA" df$Var <- as.factor(df$Var)
blank2na = function(x,na.strings=c( if (is.factor(x)) { lab = attr(x, labs1 <- attr(x, labs2 <- attr(x, x = trimws(x, if (! is.null(lab)) lab = trimws(lab, if (! is.null(labs1)) labs1 = trimws(labs1, if (! is.null(labs2)) labs2 = trimws(labs2, if (!is.null(na.strings)) { x[x %in% na.strings] = NA labs1 = labs1[! labs1 %in% na.strings] labs2 = labs2[! labs2 %in% na.strings] } x = factor(x) if (! is.null(lab)) attr(x, if (! is.null(labs1)) attr(x, if (! is.null(labs2)) attr(x, } else if (is.character(x)) { lab = attr(x, labs1 <- attr(x, labs2 <- attr(x, x = trimws(x, if (! is.null(lab)) lab = trimws(lab, if (! is.null(labs1)) labs1 = trimws(labs1, if (! is.null(labs2)) labs2 = trimws(labs2, if (!is.null(na.strings)) { x[x %in% na.strings] = NA labs1 = labs1[! labs1 %in% na.strings] labs2 = labs2[! labs2 %in% na.strings] } if (! is.null(lab)) attr(x, if (! is.null(labs1)) attr(x, if (! is.null(labs2)) attr(x, } else { x = x } return(x) }
set.seed(42) x1 <- sample(c("a","b"," ", "a a", NA), 10, TRUE) x2 <- sample(c(rnorm(length(x1),0, 1), NA), length(x1), TRUE) df <- data.frame(x1, x2, stringsAsFactors = FALSE)
df2 <- lapply(df, function(x) gsub("^$|^ $", NA, x)) lapply(df2, class)
df3 <- lapply(df, function(x) ifelse(grepl("^$|^ $", x)==TRUE, NA, x)) lapply(df3, class)
dat <- read.csv("data2.csv",na.strings=" ",header=TRUE)
library(dplyr) (file)$(colname)<-sub("-",NA,file$colname)
> str(temp) $ date : POSIXct, format: "2011-02-01" "2011-02-01" "2011-02-01" ... $ amount: num 1.67 83.55 24.4 21.99 98.88 ... > head(temp) date amount 1 2011-02-01 1.670 2 2011-02-01 83.550 3 2011-02-01 24.400 4 2011-02-01 21.990 5 2011-02-03 98.882 6 2011-02-03 24.900
x <- as.POSIXct(c("2011-02-01", "2011-02-01", "2011-02-01")) mo <- strftime(x, "%m") yr <- strftime(x, "%Y") amt <- runif(3) dd <- data.frame(mo, yr, amt) dd.agg <- aggregate(amt ~ mo + yr, dd, FUN = sum) dd.agg$date <- as.POSIXct(paste(dd.agg$yr, dd.agg$mo, "01", sep = "-"))
library(lubridate) df <- data.frame( date = today() + days(1:300), x = runif(300) ) df$my <- floor_date(df$date, "month") library(plyr) ddply(df, "my", summarise, x = mean(x))
library(data.table) setDT(temp)[, .(mn_amt = mean(amount)), by = .(yr = year(date), mon = months(date))]
yr mon mn_amt 1: 2011 februari 42.610 2: 2011 maart 23.195 3: 2011 april 61.891
setDT(temp)[, date := as.IDate(date) ][, .(mn_amt = mean(amount)), by = .(yr = year(date), mon = months(date))]
yr mon mn_amt 1: 2011 februari 42.610 2: 2011 maart 23.195 3: 2011 april 61.891
temp %>% group_by(yr = year(date), mon = month(date)) %>% summarise(mn_amt = mean(amount))
temp <- structure(list(date = structure(1:6, .Label = c("2011-02-01", "2011-02-02", "2011-03-03", "2011-03-04", "2011-04-05", "2011-04-06"), class = "factor"), amount = c(1.67, 83.55, 24.4, 21.99, 98.882, 24.9)), .Names = c("date", "amount"), class = c("data.frame"), row.names = c(NA, -6L))
library(xts) ts <- xts(temp$amount, as.Date(temp$date, "%Y-%m-%d")) ts_m = apply.monthly(ts, FUN) ts_y = apply.yearly(ts, FUN) ts_q = apply.quarterly(ts, FUN)
short.date = strftime(temp$date, "%Y/%m") aggr.stat = aggregate(temp$amount ~ short.date, FUN = sum)
monyr <- function(x) { x <- as.POSIXlt(x) x$mday <- 1 as.Date(x) } n <- as.Date(1:500, "1970-01-01") nn <- monyr(n)
d2m <- function(x) { aggregate(x, format(as.Date(zoo::index(x)), "%Y-%m"), FUN=mean) }
barplot(t(rowsum(temp$amount, format(temp$date,"%Y-%m"))), las=2)
df <- read.csv(text = "ONE,TWO,THREE 23,234,324 34,534,12 56,324,124 34,234,124 123,534,654")
dat <- read.table(text = " ONE TWO THREE 1 23 234 324 2 34 534 12 3 56 324 124 4 34 234 124 5 123 534 654",sep = "",header = TRUE) library(reshape) datm <- melt(cbind(dat, ind = rownames(dat)), id.vars = c( library(scales) ggplot(datm,aes(x = variable, y = value,fill = ind)) + geom_bar(position = "fill",stat = "identity") + scale_y_continuous(labels = percent_format())
prop.table(m, margin=NULL) [,1] [,2] [1,] 0.1 0.3 [2,] 0.2 0.4
prop.table(m, 1) [,1] [,2] [1,] 0.2500000 0.7500000 [2,] 0.3333333 0.6666667
prop.table(m, 2) [,1] [,2] [1,] 0.3333333 0.4285714 [2,] 0.6666667 0.5714286
your_matrix<-( rbind( c(23,234,324), c(34,534,12), c(56,324,124), c(34,234,124), c(123,534,654) ) ) barplot(prop.table(your_matrix, 2) )
require(tm) byword<-tm_map(byword, tolower) Error in UseMethod("tm_map", x) : no applicable method for
> library(tm) > data( > crude[[1]]$content [1] "Diamond Shamrock Corp said that\neffective today it had cut its contract prices for crude oil by\n1.50 dlrs a barrel.\n The reduction brings its posted price for West Texas\nIntermediate to 16.00 dlrs a barrel, the copany said.\n \"The price reduction today was made in the light of falling\noil product prices and a weak crude oil market,\" a company\nspokeswoman said.\n Diamond is the latest in a line of U.S. oil companies that\nhave cut its contract, or posted, prices over the last two days\nciting weak oil markets.\n Reuter" > tm_map(crude, content_transformer(tolower))[[1]]$content [1] "diamond shamrock corp said that\neffective today it had cut its contract prices for crude oil by\n1.50 dlrs a barrel.\n the reduction brings its posted price for west texas\nintermediate to 16.00 dlrs a barrel, the copany said.\n \"the price reduction today was made in the light of falling\noil product prices and a weak crude oil market,\" a company\nspokeswoman said.\n diamond is the latest in a line of u.s. oil companies that\nhave cut its contract, or posted, prices over the last two days\nciting weak oil markets.\n reuter"
myCorpus <- Corpus(VectorSource(byword)) myCorpus <- tm_map(myCorpus , tolower) print(myCorpus[[1]])
x <- c("Y", "Y", "Yes", "N", "No", "H") [1] Yes Yes Yes No No <NA> Levels: Yes No
x.f <- factor(x, levels=c("Y", "Yes", "No", "N"), labels=c("Yes", "Yes", "No", "No")) factor(x.f) droplevels(x.f)
factor(x, levels=list(c("Yes", "Y"), c("No", "N")), labels=c("Yes", "No")) factor(x, levels=c("Yes", "No"), labels=list(c("Yes", "Y"), c("No", "N"))) factor(x, levels=c("Y", "Yes", "No", "N"), labels=c(Y="Yes", Yes="Yes", No="No", N="No")) factor(x, levels=c("Y", "Yes", "No", "N"), labels=c(Yes="Y", Yes="Yes", No="No", No="N")) factor(x, levels=c("Yes", "No"), labels=c(Y="Yes", Yes="Yes", No="No", N="No"))
x <- c("Y", "Y", "Yes", "N", "No", "H") x <- factor(x) levels(x) <- list(Yes=c("Y", "Yes"), No=c("N", "No")) x
> `levels<-`(factor(x), list(Yes=c("Y", "Yes"), No=c("N", "No"))) [1] Yes Yes Yes No No <NA> Levels: Yes No
x <- c("Y", "Y", "Yes", "N", "No", "H") library(forcats)
fct_collapse(x, Yes = c("Y", "Yes"), No = c("N", "No"), NULL = "H")
fct_recode(x, Yes = "Y", Yes = "Yes", No = "N", No = "No", NULL = "H")
fun <- function(z) { z[z == "Y"] <- "Yes" z[z == "N"] <- "No" z[!(z %in% c("Yes", "No"))] <- NA z } fct_relabel(factor(x), fun)
fct_collapse(fct_inorder(x), Yes = c("Y", "Yes"), No = c("N", "No"), NULL = "H") fct_recode(fct_inorder(x), Yes = "Y", Yes = "Yes", No = "N", No = "No", NULL = "H")
> factor(unname(c(Y = "Yes", Yes = "Yes", N = "No", No = "No", H = NA)[x])) [1] Yes Yes Yes No No <NA> Levels: No Yes
fmap = stack(list(Yes = c("Y", "Yes"), No = c("N", "No"))) fmap$ind[ match(x, fmap$values) ] library(data.table) setDT(fmap)[x, on=.(values), ind ]
library(data.table) setDT(stack(list(Yes = c("Y", "Yes"), No = c("N", "No"))))[x, on=.(values), ind ]
factor( strtrim( x , 1 ) , levels = c("Y" , "N" ) , labels = c("Yes" , "No" ) )
x <- c("Y", "Y", "Yes", "N", "No", "H") x <- factor(x) levels(x)[c(1,2,4)] <- c(NA, "No", "Yes") x
levels(df$var1) summary(df$var1) levels(df$var1) <- list("0"=c("Z", "0"), "1"=c("1")) levels(df$var1) summary(df$var1)
combofactor <- function(pattern_vector, replacement_vector, data) { levels <- levels(data) for (i in 1:length(pattern_vector)) levels[which(pattern_vector[i] == levels)] <- replacement_vector[i] levels(data) <- levels data }
x <- factor(c(rep("Y",20),rep("N",20),rep("y",20), rep("yes",20),rep("Yes",20),rep("No",20)))
x_new <- combofactor(c("Y","N","y","yes"),c("Yes","No","Yes","Yes"),x)
x <- c("Y", "Y", "Yes", "N", "No", "H") y <- c("Yes","No") x <- factor(y[pmatch(x,y,duplicates.ok = TRUE)])
library(dplyr) x <- c("Y", "Y", "Yes", "N", "No", "H") y <- c(Y="Yes",N="No") x <- recode(x,!!!y) x <- factor(x,y)
x <- factor(c("Y", "Y", "Yes", "N", "No", "H")) y <- c(Y="Yes",N="No") x <- recode_factor(x,!!!y) x <- factor(x,y)
Roses are <span style="color:red">red</span>, violets are <span style="color:blue">blue</span>.
Roses are \textcolor{red}{red}, violets are \textcolor{blue}{blue}.
colFmt = function(x,color){ outputFormat = opts_knit$get("rmarkdown.pandoc.to") if(outputFormat == paste("\\textcolor{",color,"}{",x,"}",sep="") else if(outputFormat == paste("<font color= else x }
Roses are $\color{red}{\text{beautiful red}}$, violets are $\color{blue}{\text{lovely blue}}$.
```{r results= tbl = data.frame(a = letters[1:10], b = 1:10 / 10) tbl$b = ifelse(tbl$b < 0.5, colFmt(tbl$b, "red"), colFmt(tbl$b, "green")) print(xtable(tbl), sanitize.text.function = identity) ```
<div custom-style=“DivCol”>Whole paragraph of colored text</div> Just a <span custom-style=“SpanCol”>few words</span> of colored text
data <- eventReactive({mainplot.click$click | input$spec_button}, { if(input$spec_button){ } else { } })
observeEvent({ input$spec_button mainplot.click$click }, { ... } )
observeEvent(c( input$spec_button, mainplot.click$click ), { ... } )
data <- reactiveValues() observeEvent(input$spec_button, { data$data <- get.focus.spec(input=input, premise=premise, itemname=input$dropdown.itemname, spec.info=spec.info) }) observeEvent(mainplot.click$click, { data$data <- get.focus.spec(input=input, premise=premise, mainplot=mainplot(), mainplot.click_focus=mainplot.click_focus(), spec.info=spec.info) })
xxchange <- reactive({ paste(input$filter , input$term) }) output$mypotput <- eventReactive( xxchange(), { ... ... ... } )
vec <- 1:49 dim(vec) <- c(7, 7) vec > vec <- 1:49 > dim(vec) <- c(7, 7) > vec [,1] [,2] [,3] [,4] [,5] [,6] [,7] [1,] 1 8 15 22 29 36 43 [2,] 2 9 16 23 30 37 44 [3,] 3 10 17 24 31 38 45 [4,] 4 11 18 25 32 39 46 [5,] 5 12 19 26 33 40 47 [6,] 6 13 20 27 34 41 48 [7,] 7 14 21 28 35 42 49
x <- c( "p.G12C", "p.F121S", "p.P124S", "p.P124L", "p.E13D", "p.E203K", "p.Q209P", "p.Q209P", "p.Q209L" )
install.packages("formatR") library(formatR) tidy_eval("C:/Users/PC_name/Desktop/myfile.R")
args <- paste(a, sep=" ") system(paste("command",args, sep=" "))
Df Sum Sq Mean Sq F value Pr(>F) asq[, 187] 1 3.02 3.01951 12.333 0.0004599 *** Residuals 1335 326.85 0.24483 --- Signif. codes: 0 12 observations deleted due to missingness
str(test) List of 13 $ coefficients : Named num [1:2] 0.2862 0.0973 ..- attr(*, "names")= chr [1:2] "(Intercept)" "asq[, 187]" $ residuals : Named num [1:1337] 0.519 0.519 -0.481 -0.481 -0.481 ... ..- attr(*, "names")= chr [1:1337] "1" "2" "3" "4" ... $ effects : Named num [1:1337] -16.19 -1.738 -0.505 -0.505 -0.505 ... ..- attr(*, "names")= chr [1:1337] "(Intercept)" "asq[, 187]" "" "" ... $ rank : int 2 $ fitted.values: Named num [1:1337] 0.481 0.481 0.481 0.481 0.481 ... ..- attr(*, "names")= chr [1:1337] "1" "2" "3" "4" ... $ assign : int [1:2] 0 1 $ qr :List of 5 ..$ qr : num [1:1337, 1:2] -36.565 0.0273 0.0273 0.0273 0.0273 ... .. ..- attr(*, "dimnames")=List of 2 .. .. ..$ : chr [1:1337] "1" "2" "3" "4" ... .. .. ..$ : chr [1:2] "(Intercept)" "asq[, 187]" .. ..- attr(*, "assign")= int [1:2] 0 1 ..$ qraux: num [1:2] 1.03 1.02 ..$ pivot: int [1:2] 1 2 ..$ tol : num 1e-07 ..$ rank : int 2 ..- attr(*, "class")= chr "qr" $ df.residual : int 1335 $ na.action :Class .. ..- attr(*, "names")= chr [1:12] "26" "257" "352" "458" ... $ xlevels : list() $ call : language aov(formula = asq[, 9] ~ asq[, 187]) $ terms :Classes .. ..- attr(*, "variables")= language list(asq[, 9], asq[, 187]) .. ..- attr(*, "factors")= int [1:2, 1] 0 1 .. .. ..- attr(*, "dimnames")=List of 2 .. .. .. ..$ : chr [1:2] "asq[, 9]" "asq[, 187]" .. .. .. ..$ : chr "asq[, 187]" .. ..- attr(*, "term.labels")= chr "asq[, 187]" .. ..- attr(*, "order")= int 1 .. ..- attr(*, "intercept")= int 1 .. ..- attr(*, "response")= int 1 .. ..- attr(*, ".Environment")=<environment: R_GlobalEnv> .. ..- attr(*, "predvars")= language list(asq[, 9], asq[, 187]) .. ..- attr(*, "dataClasses")= Named chr [1:2] "numeric" "numeric" .. .. ..- attr(*, "names")= chr [1:2] "asq[, 9]" "asq[, 187]" $ model : ..$ asq[, 9] : int [1:1337] 1 1 0 0 0 1 1 1 0 0 ... ..$ asq[, 187]: int [1:1337] 2 2 2 2 2 2 2 2 2 2 ... ..- attr(*, "terms")=Classes .. .. ..- attr(*, "variables")= language list(asq[, 9], asq[, 187]) .. .. ..- attr(*, "factors")= int [1:2, 1] 0 1 .. .. .. ..- attr(*, "dimnames")=List of 2 .. .. .. .. ..$ : chr [1:2] "asq[, 9]" "asq[, 187]" .. .. .. .. ..$ : chr "asq[, 187]" .. .. ..- attr(*, "term.labels")= chr "asq[, 187]" .. .. ..- attr(*, "order")= int 1 .. .. ..- attr(*, "intercept")= int 1 .. .. ..- attr(*, "response")= int 1 .. .. ..- attr(*, ".Environment")=<environment: R_GlobalEnv> .. .. ..- attr(*, "predvars")= language list(asq[, 9], asq[, 187]) .. .. ..- attr(*, "dataClasses")= Named chr [1:2] "numeric" "numeric" .. .. .. ..- attr(*, "names")= chr [1:2] "asq[, 9]" "asq[, 187]" ..- attr(*, "na.action")=Class .. .. ..- attr(*, "names")= chr [1:12] "26" "257" "352" "458" ... - attr(*, "class")= chr [1:2] "aov" "lm"
ggplot(data=PlantGrowth, aes(x=group, y=weight, fill=group)) + geom_boxplot() + stat_summary(fun.y=mean, colour="darkred", geom="point", shape=18, size=3,show_guide = FALSE)
means <- aggregate(weight ~ group, PlantGrowth, mean)
library(ggplot2) ggplot(data=PlantGrowth, aes(x=group, y=weight, fill=group)) + geom_boxplot() + stat_summary(fun.y=mean, colour="darkred", geom="point", shape=18, size=3,show_guide = FALSE) + geom_text(data = means, aes(label = weight, y = weight + 0.08))
means <- aggregate(weight ~ group, PlantGrowth, mean) boxplot(weight ~ group, PlantGrowth) points(1:3, means$weight, col = "red") text(1:3, means$weight + 0.08, labels = means$weight)
ggplot(data=PlantGrowth, aes(x=group, y=weight, fill=group)) + geom_boxplot() + stat_summary(fun.y=mean, colour="darkred", geom="point", hape=18, size=3,show_guide = FALSE) + stat_summary(fun.y=mean, colour="red", geom="text", show_guide = FALSE, vjust=-0.7, aes( label=round(..y.., digits=1)))
fun_mean <- function(x){ return(data.frame(y=mean(x),label=mean(x,na.rm=T)))} ggplot(PlantGrowth,aes(x=group,y=weight)) + geom_boxplot(aes(fill=group)) + stat_summary(fun.y = mean, geom="point",colour="darkred", size=3) + stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7)
PlantGrowth %$% split(weight,group) %T>% boxplot %>% lapply(mean) %>% unlist %T>% points(pch=18) %>% text(x=.+0.06,labels=.)
matxMax <- function(mtx) { colmn <- which(mtx == max(mtx)) %/% nrow(mtx) + 1 row <- which(mtx == max(mtx)) %% nrow(mtx) return( matrix(c(row, colmn), 1)) }
mm <- matrix(rnorm(100), 10, 10) maxCords <- matxMax(mm) mm[maxCords]
set.seed(123) mm <- matrix(rbinom(40, 20, 0.5), 8, 5) mm which(mm == max(mm), arr.ind = TRUE)
round2 = function(x, n) { posneg = sign(x) z = abs(x)*10^n z = z + 0.5 z = trunc(z) z = z/10^n z*posneg }
x = c(1.85, 1.54, 1.65, 1.85, 1.84) round(x, 1) round2(x, 1)
setRefClass( "A", fields=list(a="numeric", b="character"), methods=list( reset=function(fields=NULL, ...){ temp <- new("A") if(is.null(fields)){ fields <- names(getRefClass("A")$fields()) } sapply(fields, function(x){ .self$field(name=x, value=temp$field(x)) }) return(TRUE) } ) ) x <- new("A", a=1:10, b=letters[1:10]) x$a x$b x$reset(fields="a") x$a x$b x$reset() x$a x$b
pdf(file = ifelse(onefile, "Rplots.pdf", "Rplot%03d.pdf"), width, height, onefile, family, title, fonts, version, paper, encoding, bg, fg, pointsize, pagecentre, colormodel, useDingbats, useKerning)
file: a character string giving the name of the file. For use with
pdf("myOut.pdf") for (i in 1:10){ plot(...) } dev.off()
for (i in 1:10){ pdf(paste("myOut",i,".pdf",sep="")) plot(...) dev.off() }
pdf(file = "Location_where_you_want_the_file/name_of_file.pdf", title="if you want any") plot() dev.off()
df <- data.frame(ID = c(1:7), home_pc = c("","CB4 2DT", "NE5 7TH", "BY5 8IB", "DH4 6PB","MP9 7GH","KN4 5GH"), start_pc = c(NA,"Home", "FC5 7YH","Home", "CB3 5TH", "BV6 5PB",NA), end_pc = c(NA,"CB5 4FG","Home","","Home","",NA))
df <- df[!(df$start_pc == ""), ] df <- df[!is.na(df$start_pc), ]
df <- df[!(df$start_pc == "" | is.na(df$start_pc)), ]
df <- with(df, df[!(start_pc == "" | is.na(start_pc)), ])
df <- with(df, df[!(nzchar(start_pc) | is.na(start_pc)), ])
nba <- read.csv("http: dst <- dist(nba[1:20, -1],) dst <- data.matrix(dst) dim <- ncol(dst) image(1:dim, 1:dim, dst, axes = FALSE, xlab="", ylab="") axis(1, 1:dim, nba[1:20,1], cex.axis = 0.5, las=3) axis(2, 1:dim, nba[1:20,1], cex.axis = 0.5, las=1) text(expand.grid(1:dim, 1:dim), sprintf("%0.1f", dst), cex=0.6)
library(tripack) plot(voronoi.mosaic(runif(100), runif(100), duplicate="remove"))
nba <- read.csv("http: dist_m <- as.matrix(dist(nba[1:20, -1])) dist_mi <- 1/dist_m library(qgraph) jpeg( qgraph(dist_mi, layout= dev.off()
library(ggplot2) library(plyr) library(arm) library(reshape2) nba <- read.csv("http: nba$Name <- with(nba, reorder(Name, PTS)) nba.m <- melt(nba) nba.m <- ddply(nba.m, .(variable), transform, rescale = rescale(value)) (p <- ggplot(nba.m, aes(variable, Name)) + geom_tile(aes(fill = rescale), colour = "white") + scale_fill_gradient(low = "white", high = "steelblue")+geom_text(aes(label=round(rescale,1))))
data = read.csv("http: dst = tcrossprod(as.matrix(data[,-1])) dst = matrix(rep(diag(dst), 50L), ncol = 50L, byrow = TRUE) + matrix(rep(diag(dst), 50L), ncol = 50L, byrow = FALSE) - 2*dst library(MASS) mds = isoMDS(dst) plot(mds$points, type = "n", pch = 20, cex = 3, col = adjustcolor("black", alpha = 0.3), xlab = "X", ylab = "Y") text(mds$points, labels = rownames(data), cex = 0.75)
T.8EFF.SP.OT1.D5.VSVOVA T.8EFF.SP.OT1.D6.LISOVA T.8EFF.SP.OT1.D6.LISOVA T.8EFF.SP.OT1.D6.LISOVA T.8EFF.SP.OT1.D6.VSVOVA T.8EFF.SP.OT1.D8.VSVOVA T.8EFF.SP.OT1.D8.VSVOVA T.8MEM.SP T.8MEM.SP T.8MEM.SP.OT1.D106.VSVOVA T.8MEM.SP.OT1.D45.LISOVA T.8MEM.SP.OT1.D45.LISOVA
reg.out <- regexpr( "(?<=\\.D)[0-9]+(?=.LIS)", alice, perl=TRUE ) substr(alice,reg.out,reg.out + attr(reg.out,"match.length")-1)
pat <- ".*\\.D([0-9]+)\\.LIS.*" sub(pat, "\\1", alice)
pat <- ".*\\.D([0-9]+)\\.LIS.*" sub(pat, "\\1", alice[grepl(pat, alice)])
library(stringr) str_match(alice, ".*\\.D([0-9]+)\\.LIS.*")[, 2]
R> file.path("usr", "local", "lib") [1] "usr/local/lib" R>
R> system.file("extdata", "date_time_zonespec.csv", package="RcppBDT") [1] "/usr/local/lib/R/site-library/RcppBDT/extdata/date_time_zonespec.csv" R>
library("iterators") library("itertools") path.cat<-function(...) { elems<-list(...) elems<-as.character(elems) elems<-elems[elems!= relems<-rev(elems) starts<-grep( if (!is.na(starts) && !is.null(starts)) { relems<-relems[1:starts] } starts<-grep( if (length(starts)==0){ starts=length(elems)-length(relems)+1 }else{ starts=length(elems)-starts[[1]]+1} elems<-elems[starts:length(elems)] path<-do.call(file.path,as.list(elems)) elems<-strsplit(path, it<-ihasNext(iter(elems)) out<-rep(NA,length(elems)) i<-1 while(hasNext(it)) { item<-nextElem(it) if(item== { i<-i-1 } else if (item== } else { out[i]<-item i<-i+1 } } do.call(file.path,as.list(out[1:i-1])) }
R> apply(expand.grid(vars, vis), 1, paste, collapse=".") [1] "SR.1" "PL.1" "SR.2" "PL.2" "SR.3" "PL.3"
library(data.table) CJ(vars, vis)[, paste(V1, V2, sep =".")]
CJ(vars, vis, sorted = FALSE)[, paste(V1, V2, sep =".")]
apply(expand.grid(vis, vars), 1, function(x) paste(x[2], x[1], sep=".")) [1] "SR.1" "SR.2" "SR.3" "PL.1" "PL.2" "PL.3"
as.vector(t(outer(vars, vis, paste, sep="."))) [1] "SR.1" "SR.2" "SR.3" "PL.1" "PL.2" "PL.3"
paste(rep(vars, each = length(vis)), vis, sep = ".")
x <- function(i){ if (i < 10) warning("A warning") i } tt <- tryCatch(x(5),error=function(e) e, warning=function(w) w) tt2 <- tryCatch(x(15),error=function(e) e, warning=function(w) w) tt tt2 if(is(tt,"warning")) print("KOOKOO") if(is(tt2,"warning")) print("KOOKOO")
tryCatch(x(5),warning=function(w) return(list(x(5),w)))
op <- options(warn=2) tt <- try(x()) ifelse(is(tt,"try-error"),"There was a warning or an error","OK") options(op)
withWarnings <- function(expr) { myWarnings <- NULL wHandler <- function(w) { myWarnings <<- c(myWarnings, list(w)) invokeRestart("muffleWarning") } val <- withCallingHandlers(expr, warning = wHandler) list(value = val, warnings = myWarnings) }
testit <- function() warning("testit") assign("last.warning", NULL, envir = baseenv()) testit() if(length(warnings())>0){ print("something happened") }
> foo <- data.frame(c("a", "b"), c(1, 2)) > names(foo) <- c("SomeFactor", "SomeNumeric") > lapply(foo, class) $SomeFactor [1] "factor" $SomeNumeric [1] "numeric"
> str(foo) $ SomeFactor : Factor w/ 2 levels "a","b": 1 2 $ SomeNumeric: num 1 2
dat <- data.frame(x = rnorm(100), y = rnorm(100)) ggplot(dat, aes(x=x,y=y)) + geom_point() + labs(y=expression(Blah[1])) dat <- data.frame(x = rnorm(100), y = rnorm(100)) ggplot(dat, aes(x=x,y=y)) + geom_point() + labs(y=expression(Blah[1d]))
ggplot(dat, aes(x=x,y=y)) + geom_point() + labs(y=expression(Blah[1*d])) ggplot(dat, aes(x=x,y=y)) + geom_point() + labs(y=expression(Blah["1d"]))
ggplot(dat, aes(x=x,y=y)) + geom_point() + labs(y=expression(Blah[1*d]*"%"))
ggplot(dat, aes(x=x,y=y)) + geom_point() + labs(y=expression(Blah[1][d]))
> tt <- as.POSIXct( > strftime(tt, [1] "2011-10-11 07:49:36.2"
> tt <- as.POSIXct( > strftime(tt, [1] "2011-10-11 07:49:36.4"
double x = 9.97; printf("%d\n",(int) x); printf("%.0f\n",x); printf("%.1f\n",x); printf("%.2f\n",x);
> as.POSIXct( [1] "2011-10-11 07:49:36.2 CDT" > as.POSIXlt( [1] "2011-10-11 07:49:36.3"
> t1 <- as.POSIXct( > as.numeric(t1 - round(unclass(t1))) - 0.3 [1] -4.768372e-08 > t2 <- as.POSIXlt( > as.numeric(t2$sec - round(unclass(t2$sec))) - 0.3 [1] -2.831069e-15
myformat.POSIXct <- function(x, digits=0) { x2 <- round(unclass(x), digits) attributes(x2) <- attributes(x) x <- as.POSIXlt(x2) x$sec <- round(x$sec, digits) format.POSIXlt(x, paste("%Y-%m-%d %H:%M:%OS",digits,sep="")) }
> options(digits.secs=1) > t1 <- as.POSIXct( > format(t1) [1] "2011-10-11 07:49:36.2" > myformat.POSIXct(t1,1) [1] "2011-10-11 07:49:36.3" > t2 <- as.POSIXct( > format(t2) [1] "2011-10-11 23:59:59.9" > myformat.POSIXct(t2,0) [1] "2011-10-12 00:00:00" > myformat.POSIXct(t2,1) [1] "2011-10-12 00:00:00.0"
form <- function(x, format = "", tz= "", ...) { if (!inherits(x, "POSIXct")) stop("wrong class") if (missing(tz) && !is.null(tzone <- attr(x, "tzone"))) tz <- tzone if (length(format) > 1) stop("length(format) > 1 not supported") m <- gregexpr("%OS[[:digit:]]?", format)[[1]] l <- attr(m, "match.length") if (l == 4) { d <- as.integer(substring(format, l+m-1, l+m-1)) } else { d <- unlist(options("digits.secs")) if (is.null(d)) { d <- 0 } } secs.since.origin <- unclass(x) secs <- round(secs.since.origin %% 60, d) mins <- floor(secs.since.origin / 60) if (secs >= 60) { secs <- secs - 60 mins <- mins + 1 } lt <- as.POSIXlt(60 * mins, tz=tz, origin=ISOdatetime(1970,1,1,0,0,0,tz="GMT")); lt$sec <- secs + 10^(-d-1) format.POSIXlt(as.POSIXlt(lt), format, ...) }
f <- "%Y-%m-%d %H:%M:%OS" f3 <- "%Y-%m-%d %H:%M:%OS3" f6 <- "%Y-%m-%d %H:%M:%OS6"
x <- as.POSIXct("2012-12-14 15:42:04.577895") > format(x, f6) [1] "2012-12-14 15:42:04.577894" > form(x, f6) [1] "2012-12-14 15:42:04.577895" > myformat.POSIXct(x, 6) [1] "2012-12-14 15:42:04.577895"
> format(t1) [1] "2011-10-11 07:49:36.2" > myformat.POSIXct(t1,1) [1] "2011-10-11 07:49:36.3" > form(t1) [1] "2011-10-11 07:49:36.3" > format(t2) [1] "2011-10-11 23:59:59.9" > myformat.POSIXct(t2,0) [1] "2011-10-12 00:00:00" > myformat.POSIXct(t2,1) [1] "2011-10-12 00:00:00.0" > form(t2) [1] "2011-10-12" > form(t2, f) [1] "2011-10-12 00:00:00.0"
> t3 <- as.POSIXct( > format(t3) [1] "2038-12-14 15:42:05.5" > myformat.POSIXct(t3, 1) [1] "2038-12-14 15:42:05.6" > form(t3) [1] "2038-12-14 15:42:04.6"
day = (int) floor(d/86400.0); left = (int) (d - day * 86400.0 + 0.5);
ggplot(...) + ... + facet_grid(facets, switch="both")
ggplot(...) + ... + facet_wrap(facets, strip.position="right")
* checking for missing documentation entries ... WARNING Undocumented S4 methods: << long list of apparently undocumented methods. E.g. generic All user-level objects in a package (including S4 classes and methods) should have documentation entries.
library("devtools") library("roxygen2") document("mypkgname") check_doc("mypkgname")
Account <- setClass("Account", slots = list(balance = "numeric") )
setGeneric("helloworld", function(x, y, ...){ cat("Hello World!") cat("\n") standardGeneric("helloworld") }) setMethod("helloworld", "ANY", function(x, y, ...){ cat(class(x)) }) setMethod("helloworld", "character", function(x){ show(x) }) setMethod("helloworld", c("character", "character"), function(x, y){ show(x) })
library(rCharts) temp <- data.frame(x = 1:2000, y = 1:2000, z = c(rep(1,1000), rep(0,1000))) g <- nPlot(y ~ x, group = "z", data = temp, type = "lineWithFocusChart") g$templates$script <- "http: g$set(title = "Example") g$chart(transitionDuration = -1, tooltipContent = " return }! showLegend = FALSE, margin = list(left = 200, right = 100, bottom = 100, top = 100)) g$xAxis(axisLabel = "x", tickFormat = " g$yAxis(axisLabel = "y", width = 100, tickFormat = " showMaxMin = FALSE) g
library(rCharts) temp <- data.frame(x = 1:2000, y = 1:2000, z = c(rep(1,1000), rep(0,1000))) g <- nPlot(y ~ x, group = "z", data = temp, type = "lineWithFocusChart") g$templates$script <- "c:/users/kent.tleavell_nt/dropbox/development/r/rCharts_nvd3_templates/chartWithTitle_styled.html" g$set(title = "Example") g$chart(transitionDuration = -1, tooltipContent = " return }! showLegend = FALSE, margin = list(left = 200, right = 100, bottom = 100, top = 100)) g$xAxis(axisLabel = "x", tickFormat = " g$yAxis(axisLabel = "y", width = 100, tickFormat = " showMaxMin = FALSE) g$x2Axis(tickFormat = " g$y2Axis( tickFormat = " ) g
df <- data.frame(a=c(9,10),b=c( df.text <- apply( df, 1, paste, collapse=" | " ) menu(df.text,graphics=T)
df.padded <- apply(df,2,format,width=8) df.padded.text <- apply( df.padded, 1, paste, collapse=" | ") menu( df.padded.text,graphics=T )
> df.padded a b [1,] " 9 " "hello " [2,] "10 " "bananas "
library(tcltk) tcl("option", "add", "*Listbox.font", "courier 10") menu(df.padded.text,graphics=T)
na.pad <- function(x,len){ x[1:len] } makePaddedDataFrame <- function(l,...){ maxlen <- max(sapply(l,length)) data.frame(lapply(l,na.pad,len=maxlen),...) } x = c(rep("one",2)) y = c(rep("two",10)) z = c(rep("three",5)) makePaddedDataFrame(list(x=x,y=y,z=z))
f <- function(x,sep1) { sep1=format(sep1,width=8) xa<-gsub(" ","",as.character(x[1])) a1 <- nchar(xa) xa=format(xa,width=8) xb=gsub(" ","",as.character(x[2])) b1 <- nchar(xb) xb=format(xb,width=8) format1=paste("%-",10-a1,"s%s%-",20-b1,"s",sep="") concat=sprintf(format1,xa,sep1,xb) concat }
for (i in 2 : ncol(code)){ ... tempTable <- ... sn <- ... WriteXLS("tempTable", ExcelFileName = "C:/R_code/../file.xlsx", SheetNames = sn); }
library(xlsx) write.xlsx(dataframe1, file="filename.xlsx", sheetName="sheet1", row.names=FALSE) write.xlsx(dataframe2, file="filename.xlsx", sheetName="sheet2", append=TRUE, row.names=FALSE)
wb = createWorkbook() sheet = createSheet(wb, "Sheet 1") addDataFrame(dataframe1, sheet=sheet, startColumn=1, row.names=FALSE) addDataFrame(dataframe2, sheet=sheet, startColumn=10, row.names=FALSE) sheet = createSheet(wb, "Sheet 2") addDataFrame(dataframe3, sheet=sheet, startColumn=1, row.names=FALSE) saveWorkbook(wb, "My_File.xlsx")
require(openxlsx) list_of_datasets <- list("Name of DataSheet1" = dataframe1, "Name of Datasheet2" = dataframe2) write.xlsx(list_of_datasets, file = "writeXLSX2.xlsx")
library(writexl) sheets <- list("sheet1Name" = sheet1, "sheet2Name" = sheet2) write_xlsx(sheets, "path/to/location")
library(XLConnect) newWB <- loadWorkbook( filename="F:/TempDir/tempwb.xlsx", create=TRUE) for(i in 1:10){ wsName <- paste0("newsheet",i) createSheet( newWB, name=wsName) writeWorksheet( newWB, data=data.frame( X=1:10, Dataframe=paste0("DF ",i)), sheet=wsName, header=TRUE, rownames=NULL) } saveWorkbook(newWB)
OUT <- createWorkbook() addWorksheet(OUT, "Sheet 1 Name") addWorksheet(OUT, "Sheet 2 Name") writeData(OUT, sheet = "Sheet 1 Name", x = dataframe1) writeData(OUT, sheet = "Sheet 2 Name", x = dataframe2) saveWorkbook(OUT, "My output file.xlsx")
install.packages("openxlsx") library("openxlsx") start.time <- Sys.time() x <- as.data.frame(matrix(1:4000000,200000,20)) y <- as.data.frame(matrix(1:4000000,200000,20)) z <- as.data.frame(matrix(1:4000000,200000,20)) wb <- createWorkbook("Example.xlsx") Sys.setenv("R_ZIPCMD" = "C:/Rtools/bin/zip.exe")
addWorksheet(wb, "Sheet 1") addWorksheet(wb, "Sheet 2") addWorksheet(wb, "Sheet 3") writeData(wb, 1, x) writeData(wb, 2, x = y, withFilter = TRUE) writeDataTable(wb, 3, z) saveWorkbook(wb, file = "Example.xlsx", overwrite = TRUE) end.time <- Sys.time() time.taken <- end.time - start.time time.taken
library(WriteXLS) x <- list(sheet_a = data.frame(a=letters), sheet_b = data.frame(b = LETTERS)) WriteXLS(x, "test.xlsx", names(x))
`x`: A character vector or factor containing the names of one or more R data frames; A character vector or factor containing the name of a single list which contains one or more R data frames; a single list object of one or more data frames; a single data frame object.
mywritexlsx<-function(fname="temp.xlsx",sheetname="Sheet1",data, startCol = 1, startRow = 1, colNames = TRUE, rowNames = FALSE) { if(! file.exists(fname)) wb = createWorkbook() else wb <- loadWorkbook(file =fname) sheet = addWorksheet(wb, sheetname) writeData(wb,sheet,data,startCol = startCol, startRow = startRow, colNames = colNames, rowNames = rowNames) saveWorkbook(wb, fname,overwrite = TRUE) }
x <- structure(list(variable = structure(c(10L, 6L, 3L, 4L, 2L, 8L, 9L, 5L, 1L, 7L), .Label = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j"), class = c("ordered", "factor")), value = c(0.990683229813665, 0.975155279503106, 0.928571428571429, 0.807453416149068, 0.717391304347826, 0.388198757763975, 0.357142857142857, 0.201863354037267, 0.173913043478261, 0.0496894409937888)), .Names = c("variable", "value"), row.names = c(10L, 6L, 3L, 4L, 2L, 8L, 9L, 5L, 1L, 7L), class = "data.frame") ggplot(x, aes(x=variable,y=value)) + geom_bar(stat="identity") + scale_y_continuous("",label=scales::percent) + coord_flip()
x$variable <- factor(x$variable, levels=unique(as.character(x$variable)) )
x <- transform(x, variable=reorder(variable, -value) )
g <- ggplot(x, aes(reorder(variable, value), value)) g + geom_bar() + scale_y_continuous(formatter="percent") + coord_flip()
ggplot(x, aes(x=variable,y=value)) + geom_bar() + scale_y_continuous("",formatter="percent") + coord_flip() + xlim(rev(levels(x$variable)))
x <- data.frame("variable"=letters[1:5], "value"=rnorm(5)) x <- x[with(x,order(-value)), ] x$variable <- ordered(x$variable, levels=levels(x$variable)[unclass(x$variable)]) ggplot(x, aes(x=variable,y=value)) + geom_bar() + scale_y_continuous("",formatter="percent") + coord_flip()
x %>% arrange(desc(value)) %>% mutate(variable=fct_reorder(variable,value)) %>% ggplot(aes(variable,value,fill=variable)) + geom_bar(stat="identity") + scale_y_continuous("",label=scales::percent) + coord_flip()
s <- read.table("/.../parse-output.txt", sep="\t") dim(s) [1] 67124 3 x <- s[,1] y <- s[,2] z <- s[,3] cols <- cut(z, 6, labels = c("pink", "red", "yellow", "blue", "green", "purple")) plot(x, y, main= "Fragment recruitment plot - FR-HIT", ylab = "Percent identity", xlab = "Base pair position", col = as.character(cols), pch=16)
library(scales) cols <- cut(z, 6, labels = c("pink", "red", "yellow", "blue", "green", "purple")) plot(x, y, main= "Fragment recruitment plot - FR-HIT", ylab = "Percent identity", xlab = "Base pair position", col = alpha(cols, 0.4), pch=16)
plot(1:10, col = rgb(red = 1, green = 0, blue = 0, alpha = 0.5), pch = 16, cex = 4) points((1:10) + 0.4, col = rgb(red = 0, green = 0, blue = 1, alpha = 0.5), pch = 16, cex = 4)
addTrans <- function(color,trans) { if (length(color)!=length(trans)&!any(c(length(color),length(trans))==1)) stop("Vector lengths not correct") if (length(color)==1 & length(trans)>1) color <- rep(color,length(trans)) if (length(trans)==1 & length(color)>1) trans <- rep(trans,length(color)) num2hex <- function(x) { hex <- unlist(strsplit("0123456789ABCDEF",split="")) return(paste(hex[(x-x%%16)/16+1],hex[x%%16+1],sep="")) } rgb <- rbind(col2rgb(color),trans) res <- paste(" return(res) }
cols <- sample(c("red","green","pink"),100,TRUE) plot(rnorm(100),rnorm(100),col=cols,pch=16,cex=4) plot(rnorm(100),rnorm(100),col=addTrans(cols,200),pch=16,cex=4) plot(rnorm(100),rnorm(100),col=addTrans(cols,100),pch=16,cex=4)
library(ggplot2) ggplot(diamonds, aes(carat, price)) + geom_point(alpha = 1/40)
plot(1:100, main="Example of Plot With Transparency") lines(1:100 + sin(1:100*2*pi/(20)), col= mtext("use `col=
mat <- matrix(runif(100),ncol=5) mat <- ifelse(mat<0.1,NA,mat)
set.seed(42) m <- matrix(rnorm(100),10) m <- pmax(m, 0)
for (i in 1:nrow(M)) { for (j in 1:ncol(M)) if (M[i,j]<0.1 & !is.na(M[i,j]) ) M[i,j]=NA }
if(!require(plyr)){ install.packages("plyr")} rm.neg<-colwise(function(x){ return(ifelse(x < 0.1, 0, x))}) rm.neg(data.frame(mat))
minvalue <- 0 n <- 10 columns <- c(1:n) X[X[,columns] < minvalue,columns] <- minvalue
ulbound <- function(v,MAX=1,MIN=0) pmin(MAX,pmax(MIN,v))
windows.options(width=30, height=12) plot(1:10) abline(v=seq(1,10,1), col= legend(4.8, 3, "This legend text should not be disturbed by the dotted grey lines")
windows.options(width=30, height=12) plot(1:10) abline(v=seq(1,10,1), col= legend(1, 5, "This legend text should not be disturbed by the dotted grey lines, but the plotted dots should still be visible")
legend(1, 5, "This legend text should not be disturbed by the dotted grey lines,\nbut the plotted dots should still be visible", bty = "n")
plot(1:10,type = "n") abline(v=seq(1,10,1), col= legend(1, 5, "This legend text should not be disturbed by the dotted grey lines,\nbut the plotted dots should still be visible",box.lwd = 0,box.col = "white",bg = "white") points(1:10,1:10)
> A = c("Dog", "Cat", "Mouse") > B = c("Tiger","Lion","Cat") > A %in% B [1] FALSE TRUE FALSE > intersect(A,B) [1] "Cat" > setdiff(A,B) [1] "Dog" "Mouse" > setdiff(B,A) [1] "Tiger" "Lion"
> length(intersect(A,B)) [1] 1 > length(setdiff(A,B)) [1] 2 > length(setdiff(B,A)) [1] 2
xtab_set <- function(A,B){ both <- union(A,B) inA <- both %in% A inB <- both %in% B return(table(inA,inB)) } set.seed(1) A <- sample(letters[1:20],10,replace=TRUE) B <- sample(letters[1:20],10,replace=TRUE) xtab_set(A,B)
first <- c(1:3, letters[1:6], "foo", "bar") second <- c(2:4, letters[5:8], "bar", "asd") both <- first[first %in% second] onlyfirst <- first[!first %in% second] onlysecond <- second[!second %in% first] length(both) length(onlyfirst) length(onlysecond) require("gplots") venn(list(first.vector = first, second.vector = second))
t1 <- as.data.frame(1:10) t2 <- as.data.frame(5:15) sqldf1 <- sqldf( sqldf2 <- sqldf( sqldf3 <- sqldf( sqldf1 X1_10 1 2 3 4 sqldf2 X5_15 11 12 13 14 15 sqldf3 X1_10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
A = c("Dog", "Cat", "Mouse") B = c("Tiger","Lion","Cat") match(A,B) [1] NA 3 NA
m <- match(A,B) A[!is.na(m)] "Cat" B[m[!is.na(m)]] "Cat"
A[is.na(m)] "Dog" "Mouse" B[which(is.na(m))] "Tiger" "Cat"
makeTransparent<-function(someColor, alpha=100) { newColor<-someColor + alpha return(newColor) }
makeTransparent(2) makeTransparent("red") makeTransparent(rgb(0,0,1))
makeTransparent<-function(someColor, alpha=100) { newColor<-col2rgb(someColor) apply(newColor, 2, function(curcoldata){rgb(red=curcoldata[1], green=curcoldata[2], blue=curcoldata[3],alpha=alpha, maxColorValue=255)}) }
makeTransparent = function(..., alpha=0.5) { if(alpha<0 | alpha>1) stop("alpha must be between 0 and 1") alpha = floor(255*alpha) newColor = col2rgb(col=unlist(list(...)), alpha=FALSE) .makeTransparent = function(col, alpha) { rgb(red=col[1], green=col[2], blue=col[3], alpha=alpha, maxColorValue=255) } newColor = apply(newColor, 2, .makeTransparent, alpha=alpha) return(newColor) }
makeTransparent(2, 4) [1] " makeTransparent("red", "blue") [1] " makeTransparent(rgb(1,0,0), rgb(0,0,1)) [1] " makeTransparent("red", "blue", alpha=0.8) [1] "
makeTransparent <- function(someColor, alpha=100) scales::alpha(someColor, alpha/100)
require(ggplot2) n <- 1e5 df <- data.frame(x = rexp(n), y = rexp(n)) p <- ggplot(df, aes(x = x, y = y)) + stat_binhex() print(p)
my_breaks <- round_any(exp(seq(log(10), log(5000), length = 5)), 10) p + scale_fill_hue(breaks = as.factor(my_breaks), labels = as.character(my_breaks))
p + scale_fill_gradient(name = "count", trans = "log", breaks = my_breaks, labels = my_breaks)
ggplot(cbind(df, z = 1), aes(x = x, y = y, z = z)) + stat_summary_hex(function(z){log(sum(z))})
ggplot(cbind(df, z = 1), aes(x = x, y = y, z = z)) + stat_aggrhex(fun = function(z) log(sum(z))) + labs(fill = "Log counts")
orders <- read.csv("<file_location>", sep=",", header=T, check.names = FALSE)
str(orders) $ OrderID : num -2034590217 -2034590216 -2031892773 -2031892767 -2021008573 ... $ OrderDate: Factor w/ 402 levels "2010-10-01","2010-10-04",..: 263 263 269 268 301 300 300 300 300 300 ...
OrderID,OrderDate -2034590217,2011-10-14 -2034590216,2011-10-14 -2031892773,2011-10-24 -2031892767,2011-10-21 -2021008573,2011-12-08 -2021008572,2011-12-07 -2021008571,2011-12-07 -2021008570,2011-12-07 -2021008569,2011-12-07
orders2 <- read.csv("<file_location>", sep=",", header=T) str(orders2) $ X.OrderID: num -2034590217 -2034590216 -2031892773 -2031892767 -2021008573 ... $ OrderDate: Factor w/ 402 levels "2010-10-01","2010-10-04",..: 263 263 269 268 301 300 300 300 300 300 ... length(orders$X.OrderID) [1] 3331575
check.names: logical. If ‘TRUE’ then the names of the variables in the data frame are checked to ensure that they are syntactically valid variable names. If necessary they are adjusted (by ‘make.names’) so that they are, and also to ensure that there are no duplicates.
Details: A syntactically valid name consists of letters, numbers and the dot or underline characters and starts with a letter or the dot not followed by a number. Names such as ‘".2way"’ are not valid, and neither are the reserved words. The definition of a _letter_ depends on the current locale, but only ASCII digits are considered to be digits. The character ‘"X"’ is prepended if necessary. All invalid characters are translated to ‘"."’. A missing value is translated to ‘"NA"’. Names which match R keywords have a dot appended to them. Duplicated values are altered by ‘make.unique’.
Correct_Colnames <- function(df) { delete.columns <- grep("(^X$)|(^X\\.)(\\d+)($)", colnames(df), perl=T) if (length(delete.columns) > 0) { row.names(df) <- as.character(df[, grep("^X$", colnames(df))]) df <- df[,-delete.columns] colnames(df) <- gsub("^X", "", colnames(df)) } return(df) }
sort by ascending Year, ascending MemberID, descending Month
X <- X[,.SD[order(-Month)],by=list(Year, MemberID)]
monthly.X <- X[, lapply(.SD[], sum), by = list(Year, MemberID, Month)]
require(data.table) set.seed(1L) DT <- data.table(Year = sample(1950:2000, 3e6, TRUE), memberID = sample(paste0("V", 1:1e4), 3e6, TRUE), month = sample(12, 3e6, TRUE)) system.time(ans1 <- DT[base:::order(Year, memberID, -month)]) system.time(ans2 <- DT[order(Year, memberID, -month)]) system.time(setorder(DT, Year, memberID, -month)) identical(ans2, DT) identical(ans1, ans2)
a <- c("NM_020506.1","NM_020519.1","NM_001030297.2","NM_010281.2","NM_011419.3", "NM_053155.2")
a <- c("NM_020506.1","NM_020519.1","NM_001030297.2","NM_010281.2","NM_011419.3", "NM_053155.2") gsub("\\..*","",a) [1] "NM_020506" "NM_020519" "NM_001030297" "NM_010281" "NM_011419" "NM_053155"
R> DF <- data.frame(foo=1:3, bar=LETTERS[1:3]) R> names(DF) [1] "foo" "bar" R> colnames(DF) [1] "foo" "bar" R> M <- matrix(1:9, ncol=3, dimnames=list(1:3, c("alpha","beta","gamma"))) R> names(M) NULL R> colnames(M) [1] "alpha" "beta" "gamma" R>
>a <- array(1:5, 1:4) > a[1,,,] > rownames(a) <- "a" > row.names(a) [1] "a" > a , , 1, 1 [,1] [,2] a 1 2 > dimnames(a) [[1]] [1] "a" [[2]] NULL [[3]] NULL [[4]] NULL
set.seed(10) m <- matrix(round(runif(25, 1, 5)), 5) d <- as.data.frame(m)
names(d) <- LETTERS[1:5] > d A B C D E 1 3 2 4 3 4 2 2 2 3 1 3 3 3 2 1 2 4 4 4 3 3 3 2 5 1 3 2 4 3
names(m) <- LETTERS[1:5] > m [,1] [,2] [,3] [,4] [,5] [1,] 3 2 4 3 4 [2,] 2 2 3 1 3 [3,] 3 2 1 2 4 [4,] 4 3 3 3 2 [5,] 1 3 2 4 3 attr(,"names") [1] "A" "B" "C" "D" "E" NA NA NA NA NA NA NA NA NA NA NA NA NA NA [20] NA NA NA NA NA NA
if (dsnt<0.05) { wilcox.test(distance[result== else { if (dst<0.05) { wilcox.test(distance[result== else { t.test(distance[result==
if (dsnt<0.05) { wilcox.test(distance[result== } else if (dst<0.05) { wilcox.test(distance[result== } else { t.test(distance[result== }
if(condition == TRUE) {x <- TRUE } else {x <- FALSE}
if (dsnt<0.05) { wilcox.test(distance[result== } else if (dst<0.05) { wilcox.test(distance[result== } else t.test(distance[result==
bratPack<-function(members= if (members== members<-c( else if (members== members<-c( ... }
foo <- function(x, members = c("CORE", "ALL")) { members <- match.arg(members) print(members) }
> foo() [1] "CORE" > foo(members = "CORE") [1] "CORE" > foo(members = "ALL") [1] "ALL" > foo(members = "3rdRate") Error in match.arg(members) :
.mdata <- data.frame( CORE= c(TRUE,FALSE,TRUE), OLD = c(TRUE,TRUE,FALSE), ALL = c(TRUE,TRUE,TRUE), row.names=c("John Doe", "Jan Janssen", "Piet Peters") ) bratPack<-function(members= m.tmp <- try( match.arg(members,names(.mdata),several.ok=T), silent=T) if(!is(m.tmp,"try-error")) members <- rownames(.mdata)[.mdata[[members]]] print(members) } > bratPack( [1] "John Doe" "Piet Peters" > bratPack( [1] "Jan Janssen" > bratPack(c("John Doe","Dick Dickers")) [1] "John Doe" "Dick Dickers"
library(sendmailR) from <- "eamil@example.com" to <- "email2@example.com" subject <- "Performance Result" body <- "This is the result of the test:" mailControl=list(smtpServer="snmpt server address") sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
library(mailR) sender <- "SENDER@gmail.com" recipients <- c("RECIPIENT@gmail.com") send.mail(from = sender, to = recipients, subject = "Subject of the email", body = "Body of the email", smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "YOURUSERNAME@gmail.com", passwd = "YOURPASSWORD", ssl = TRUE), authenticate = TRUE, send = TRUE)
library (RDCOMClient) OutApp <- COMCreate("Outlook.Application") outMail = OutApp$CreateItem(0) outMail[["To"]] = "test@test.com" outMail[["subject"]] = "Test Subject" outMail[["body"]] = "Body of email" outMail$Send()
library(mailR) sender <- "abc@gmail.com" recipients <- c("bcd@gmail.com","xyz@gmail.com") send.mail(from = sender, to = recipients, subject="Cash_Collected_Bank_transfer",Sys.Date(),"{}", body = Summary1, encoding = "utf-8", smtp = list(host.name = "smtp.gmail.com", port = 465, user.name="abc@gmail.com", passwd="abc@1234", ssl=TRUE), authenticate = TRUE, send = TRUE ,attach.files = c(path2),html = TRUE , inline = TRUE )
library(mailR) send.mail(from = "sender@gmail.com", to = c("Recipient 1 <recipient1@gmail.com>", "recipient2@gmail.com"), cc = c("CC Recipient <cc.recipient@gmail.com>"), bcc = c("BCC Recipient <bcc.recipient@gmail.com>"), subject = "Subject of the email", body = "Body of the email", smtp = list(host.name = "aspmx.l.google.com", port = 25), authenticate = FALSE, send = TRUE)
EMAIL <- myEmail@gmail.com cmd <- cmd <- paste("echo -e \"Subject:${subject}\n${body}\" | /usr/sbin/sendmail -t \"", EMAIL, "\"") system(cmd)
foocorpus <- c(foolist[[1]], foolist[[2]], foolist[[3]]);
> str(sectioned) List of 154 $ :List of 6 ..$ :Classes .. .. ..- attr(*, "Author")= chr "John Smith" .. .. ..- attr(*, "DateTimeStamp")= POSIXlt[1:1], format: "2013-04-30 12:03:49" .. .. ..- attr(*, "Description")= chr(0) .. .. ..- attr(*, "Heading")= chr "Research Focus" .. .. ..- attr(*, "ID")= chr(0) .. .. ..- attr(*, "Language")= chr(0) .. .. ..- attr(*, "LocalMetaData")=List of 4 .. .. .. ..$ foo : chr "bar" .. .. .. ..$ classification: chr "Technician" .. .. .. ..$ team : chr "" .. .. .. ..$ supervisor : chr "Bill Jones" .. .. ..- attr(*, "Origin")= chr "Smith-John_e.txt"
sectioned.Corpus <- c(sectioned[[1]][[1]], sectioned[[1]][[2]], ..., sectioned[[154]][[6]])
flattenlist <- function(x){ morelists <- sapply(x, function(xprime) class(xprime)[1]=="list") out <- c(x[!morelists], unlist(x[morelists], recursive=FALSE)) if(sum(morelists)){ Recall(out) }else{ return(out) } }
require(ggplot2) require(nlme) mp <-data.frame(year=c(1990:2010)) mp$wav <- rnorm(nrow(mp))*cos(2*pi*mp$year)+2*sin(rnorm(nrow(mp)*pi*mp$wav))+5 mp$wow <- rnorm(nrow(mp))*mp$wav+rnorm(nrow(mp))*mp$wav^3 m01 <- gls(wow~poly(wav,3), data=mp, correlation = corARMA(p=1)) mp$fit <- as.numeric(fitted(m01)) p <- ggplot(mp, aes(year, wow))+ geom_point()+ geom_line(aes(year,fit)) p
p <- ggplot(mp, aes(year, wow))+ geom_point()+ geom_smooth() p
require(ggplot2) require(nlme) set.seed(101) mp <-data.frame(year=1990:2010) N <- nrow(mp) mp <- within(mp, { wav <- rnorm(N)*cos(2*pi*year)+rnorm(N)*sin(2*pi*year)+5 wow <- rnorm(N)*wav+rnorm(N)*wav^3 }) m01 <- gls(wow~poly(wav,3), data=mp, correlation = corARMA(p=1))
V <- vcov(m01) X <- model.matrix(~poly(wav,3),data=mp) se.fit <- sqrt(diag(X %*% V %*% t(X)))
predframe <- with(mp,data.frame(year,wav, wow=fit,lwr=fit-1.96*se.fit,upr=fit+1.96*se.fit))
(p1 <- ggplot(mp, aes(year, wow))+ geom_point()+ geom_line(data=predframe)+ geom_ribbon(data=predframe,aes(ymin=lwr,ymax=upr),alpha=0.3))
(p2 <- ggplot(mp, aes(wav, wow))+ geom_point()+ geom_line(data=predframe)+ geom_ribbon(data=predframe,aes(ymin=lwr,ymax=upr),alpha=0.3))
library(plyr) library(data.table) bdt <- as.data.table(baseball)
setkey(bdt, "id") bdt[g == max(g)] bdt[g == max(g), by = id] bdt[, .SD[g == max(g)]]
library(ggplot2) (myDat <- data.frame(cbind(VarX=10:1, VarY=runif(10)), Descrip=sample(LETTERS[1:3], 10, replace=TRUE))) qplot(VarX,VarY, data=myDat, shape=Descrip) + opts(legend.position="right")
p <- qplot(VarX,VarY, data=myDat, shape=Descrip) + opts(legend.position=c(.5,0.9),plot.margin = unit(c(6,0,0,0), "lines"))
qplot(VarX,VarY, data=myDat, shape=Descrip) + theme(legend.position=
theme_update(legend.position= qplot(VarX,VarY, data=myDat, shape=Descrip)
install.packages("readr") install.packages("digest") library(sparklyr) spark_install(version = "1.6.2")`
> myvec name order_no 1 Amy 12 2 Jack 14 3 Jack 16 4 Dave 11 5 Amy 12 6 Jack 16 7 Tom 19 8 Larry 22 9 Tom 19 10 Dave 11 11 Jack 17 12 Tom 20 13 Amy 23 14 Jack 16
name number_of_distinct_orders Amy 2 Jack 3 Dave 1 Tom 2 Larry 1
ddply(myvec,~name,summarise,number_of_distinct_orders=length(unique(order_no)))
library(data.table) DT <- data.table(myvec) DT[, .(number_of_distinct_orders = length(unique(order_no))), by = name]
DT[, .(number_of_distinct_orders = uniqueN(order_no)), by = name]
aggregate(order_no ~ name, myvec, function(x) length(unique(x)))
library(dplyr) myvec %>% group_by(name) %>% summarise(n_distinct(order_no))
library(dplyr) library(data.table) library(microbenchmark) library(tidyr) library(ggplot2) df <- mtcars DT <- as.data.table(df) DT_32k <- rbindlist(replicate(1e3, mtcars, simplify = FALSE)) df_32k <- as.data.frame(DT_32k) DT_32M <- rbindlist(replicate(1e6, mtcars, simplify = FALSE)) df_32M <- as.data.frame(DT_32M) bench <- microbenchmark( base_32 = aggregate(hp ~ cyl, df, function(x) length(unique(x))), base_32k = aggregate(hp ~ cyl, df_32k, function(x) length(unique(x))), base_32M = aggregate(hp ~ cyl, df_32M, function(x) length(unique(x))), dplyr_32 = summarise(group_by(df, cyl), count = n_distinct(hp)), dplyr_32k = summarise(group_by(df_32k, cyl), count = n_distinct(hp)), dplyr_32M = summarise(group_by(df_32M, cyl), count = n_distinct(hp)), data.table_32 = DT[, .(count = uniqueN(hp)), by = cyl], data.table_32k = DT_32k[, .(count = uniqueN(hp)), by = cyl], data.table_32M = DT_32M[, .(count = uniqueN(hp)), by = cyl], times = 10 )
as_tibble(bench) %>% group_by(expr) %>% summarise(time = median(time)) %>% separate(expr, c("framework", "nrow"), "_", remove = FALSE) %>% mutate(nrow = recode(nrow, "32" = 32, "32k" = 32e3, "32M" = 32e6), time = time / 1e3) %>% ggplot(aes(nrow, time, col = framework)) + geom_line() + scale_x_log10() + scale_y_log10() + ylab("microseconds")
tapply(myvec$order_no, myvec$name, FUN = function(x) length(unique(x)))
library("sqldf") myvec <- read.table(header=TRUE, text= " name order_no 1 Amy 12 2 Jack 14 3 Jack 16 4 Dave 11 5 Amy 12 6 Jack 16 7 Tom 19 8 Larry 22 9 Tom 19 10 Dave 11 11 Jack 17 12 Tom 20 13 Amy 23 14 Jack 16") sqldf("SELECT name,COUNT(distinct(order_no)) as number_of_distinct_orders FROM myvec GROUP BY name")
x <- sapply(split(myvec, myvec$name), function(x) length(unique(x[, 2]))) data.frame(names=names(x), number_of_distinct_orders=x, row.names = NULL)
my.1 <- table(myvec) my.1[my.1 != 0] <- 1 rowSums(my.1)
library(magrittr) myvec %>% unique %>% setNames(c("name","number_of_distinct_orders"))
set.seed(1) data <- data.table(time = c(1:3, 1:4), groups = c(rep(c("b", "a"), c(3, 4))), value = rnorm(7)) data
unlist(tapply(data$value, data$groups, lag)) a1 a2 a3 a4 b1 b2 b3 NA -0.1162932 0.4420753 2.1505440 NA 0.5894583 -0.2890288
library(data.table) data[, lag.value:=c(NA, value[-.N]), by=groups] data
nm1 <- grep("^value", colnames(data), value=TRUE) nm2 <- paste("lag", nm1, sep=".") data[, (nm2):=lapply(.SD, function(x) c(NA, x[-.N])), by=groups, .SDcols=nm1] data
data[, (nm2) := shift(.SD), by=groups, .SDcols=nm1]
set.seed(1) data <- data.table(time =c(1:3,1:4),groups = c(rep(c("b","a"),c(3,4))), value = rnorm(7), value1=rnorm(7), value2=rnorm(7))
library(dplyr) data <- data %>% group_by(groups) %>% mutate(lag.value = dplyr::lag(value, n = 1, default = NA))
> data Source: local data table [7 x 4] Groups: groups time groups value lag.value 1 1 a 0.07614866 NA 2 2 a -0.02784712 0.07614866 3 3 a 1.88612245 -0.02784712 4 1 b 0.26526825 NA 5 2 b 1.23820506 0.26526825 6 3 b 0.09276648 1.23820506 7 4 b -0.09253594 0.09276648
data$lag.value <- c(NA, data$value[-nrow(data)]) data$lag.value[which(!duplicated(data$groups))] <- NA
df <- data.frame(Names = c(rep( Dates = c(seq(1,100,by=2),seq(1,100,by=1)), Values = rnorm(150,0,1)) df <- df %>% group_by(Names) %>% mutate(Rank=rank(Dates), RankDown=Rank-1) df <- df %>% left_join(select(df,Rank,ValueDown=Values,Names),by=c( ) %>% select(-Rank,-RankDown) head(df)
groupLag <- function(mydf,grouping,ranking,lag){ df <- mydf groupL <- lapply(grouping,as.symbol) names <- c( foos <- list(interp(~rank(var),var=as.name(ranking)),~Rank-lag) df <- df %>% group_by_(.dots=groupL) %>% mutate_(.dots=setNames(foos,names)) selectedNames <- c( df2 <- df %>% select_(.dots=selectedNames) colnames(df2) <- c( df <- df %>% left_join(df2,by=c( return(df) } groupLag(df,c(
library(dplyr) library(tidyr) set.seed(1) data_df = data.frame(time = c(1:3, 1:4), groups = c(rep(c("b", "a"), c(3, 4))), value = rnorm(7)) data_df
data_df %>% arrange(groups, time) %>% group_by(groups) %>% mutate(lag.value = lag(value)) %>% ungroup()
dplyr_correct_df = expand.grid( groups = sort(unique(data_df$groups)), time = seq(from = min(data_df$time), to = max(data_df$time)) ) %>% left_join(data_df, by = c("groups", "time")) %>% arrange(groups, time) %>% group_by(groups) %>% mutate(lag.value = lag(value)) %>% ungroup() dplyr_correct_df
library(zoo) zooreg_correct_df = data_df %>% as_tibble() %>% nest(-groups, .key = "zoo_ob") %>% mutate(zoo_ob = lapply(zoo_ob, function(d) { z = zoo::zooreg( data = select(d,-time), order.by = d$time, frequency = 1 ) %>% zoo:::lag.zooreg(k = (-1):0) cbind( time = as.integer(zoo::index(z)), zoo:::as.data.frame.zoo(z) ) })) %>% unnest() %>% select(groups, time, value = value.lag0, lag.value = `value.lag-1`) %>% arrange(groups, time) %>% filter(time <= max(data_df$time)) zooreg_correct_df
> my.list [[1]] [[1]]$global_stdev_ppb [1] 24267673 [[1]]$range [1] 0.03114799 [[1]]$tok [1] "hello" [[1]]$global_freq_ppb [1] 211592.6 [[2]] [[2]]$global_stdev_ppb [1] 11561448 [[2]]$range [1] 0.08870838 [[2]]$tok [1] "world" [[2]]$global_freq_ppb [1] 1002043
> my.matrix<-do.call("rbind", my.list) > my.matrix global_stdev_ppb range tok global_freq_ppb [1,] 24267673 0.03114799 "hello" 211592.6 [2,] 11561448 0.08870838 "world" 1002043
> my.df<-as.data.frame(my.matrix, stringsAsFactors=FALSE) > my.df[,1] [[1]] [1] 24267673 [[2]] [1] 11561448
new.list<-lapply(1:ncol(my.matrix), function(x) as.vector(unlist(my.matrix[,x]))) my.df<-as.data.frame(do.call(cbind, new.list), stringsAsFactors=FALSE)
> do.call(rbind, lapply(my.list, data.frame, stringsAsFactors=FALSE)) global_stdev_ppb range tok global_freq_ppb 1 24267673 0.03114799 hello 211592.6 2 11561448 0.08870838 world 1002043.0 > str(do.call(rbind, lapply(my.list, data.frame, stringsAsFactors=FALSE))) $ global_stdev_ppb: num 24267673 11561448 $ range : num 0.0311 0.0887 $ tok : chr "hello" "world" $ global_freq_ppb : num 211593 1002043
> str(data.frame(t(sapply(mylist, `[`)))) $ a:List of 2 ..$ : num 1 ..$ : num 2 $ b:List of 2 ..$ : num 2 ..$ : num 3 $ c:List of 2 ..$ : chr "a" ..$ : chr "b"
data.frame(lapply(data.frame(t(sapply(mylist, `[`))), unlist))
mylist <- list(list(a = 1, b = 2, c = "a"), list(a = 2, b = 3, c = "b")) > > system.time(replicate(1000, do.call(rbind, lapply(mylist, data.frame, + stringsAsFactors=FALSE)))) user system elapsed 1.740 0.001 1.750 > > system.time(replicate(1000, do.call(rbind, lapply(mylist, data.frame)))) user system elapsed 2.308 0.002 2.339 > > system.time(replicate(1000, data.frame(t(sapply(mylist, `[`))))) user system elapsed 0.296 0.000 0.301 > > system.time(replicate(1000, data.frame(lapply(data.frame(t(sapply(mylist, `[`))), + unlist)))) user system elapsed 1.067 0.001 1.091 > > f = function(x) function(i) sapply(x, `[[`, i) > system.time(replicate(1000, as.data.frame(Map(f(mylist), names(mylist[[1]]))))) user system elapsed 0.775 0.000 0.778 > > f = function(x) function(i) unlist(lapply(x, `[[`, i), use.names=FALSE) > system.time(replicate(1000, as.data.frame(Map(f(mylist), names(mylist[[1]]))))) user system elapsed 0.653 0.000 0.658
my.df <- do.call("rbind", lapply(my.list, data.frame))
library(microbenchmark) library(data.table) l <- replicate(1E4, list(a=runif(1), b=runif(1), c=runif(1)), simplify=FALSE) microbenchmark( times=5, R=as.data.frame(Map(f(l), names(l[[1]]))), dt=data.frame(rbindlist(l)) )
Unit: milliseconds expr min lq median uq max neval R 31.060119 31.403943 32.278537 32.370004 33.932700 5 dt 2.271059 2.273157 2.600976 2.635001 2.729421 5
f = function(x) function(i) unlist(lapply(x, `[[`, i), use.names=FALSE)
f = function(X, FUN) function(...) sapply(X, FUN, ...)
one <- mtcars[1:4, ] two <- mtcars[11:14, ] system.time(dplyr::bind_rows(one, two)) user system elapsed 0.001 0.000 0.001
l <- list(a = list(var.1 = 1, var.2 = 2, var.3 = 3) , b = list(var.1 = 4, var.2 = 5) , c = list(var.1 = 7, var.3 = 9) , d = list(var.1 = 10, var.2 = 11, var.3 = NA)) df <- dplyr::bind_rows(l) df <- purrr::map_df(l, dplyr::bind_rows) df <- purrr::map_df(l, ~.x) var.1 var.2 var.3 <dbl> <dbl> <dbl> 1 1 2 3 2 4 5 NA 3 7 NA 9 4 10 11 NA
library(dplyr) bind_rows( list(a = 1, b = 2), data_frame(a = 3:4, b = 5:6), c(a = 7) ) a b <dbl> <dbl> 1 1 2 2 3 5 3 4 6 4 7 NA
df: id1 id2 laclen aged 9830 64526 26 6 7609 64547 28 0 9925 64551 3 0 9922 64551 3 5 9916 64551 3 8 9917 64551 3 8 9914 64551 3 2
dfnew: id1 id2 laclen aged 9830 64526 26 6 7609 64547 28 0 9925 64551 3 0 9914 64551 3 2
data <- data.frame(matrix(sample(1:40), 4, 10, dimnames = list(1:4, LETTERS[1:10])))
library(magrittr) library(dplyr) cols <- c("A", "C", "D", "H") data %<>% mutate_each_(funs(factor(.)),cols) str(data)
setDT(data) for(j in cols){ set(data, i=NULL, j=j, value=factor(data[[j]])) }
setDT(data)[, (cols):= lapply(.SD, factor), .SDcols=cols]
library(tidyverse) library(magrittr) set.seed(88) data <- data.frame(matrix(sample(1:40), 4, 10, dimnames = list(1:4, LETTERS[1:10]))) cols <- c("A", "C", "D", "H") data %<>% mutate_at(cols, funs(factor(.))) str(data) $ A: Factor w/ 4 levels "5","17","18",..: 2 1 4 3 $ B: int 36 35 2 26 $ C: Factor w/ 4 levels "22","31","32",..: 1 2 4 3 $ D: Factor w/ 4 levels "1","9","16","39": 3 4 1 2 $ E: int 3 14 30 38 $ F: int 27 15 28 37 $ G: int 19 11 6 21 $ H: Factor w/ 4 levels "7","12","20",..: 1 3 4 2 $ I: int 23 24 13 8 $ J: int 10 25 4 33
data <- cbind(stringVar = sample(c("foo","bar"),10,replace=TRUE), data.frame(matrix(sample(1:40), 10, 10, dimnames = list(1:10, LETTERS[1:10]))),stringsAsFactors=FALSE) factoredData = data %>% mutate_if(is.character,funs(factor(.)))
ind <- bigm.train[,lapply(.SD,is.character)] ind <- names(ind[,.SD[T]]) bigm.train[,(ind):=lapply(.SD,factor),.SDcols=ind]
mydata=structure(list(a = 1:10, b = 1:10, c = c("a", "a", "b", "b", "c", "c", "c", "c", "c", "c")), row.names = c(NA, -10L), class = c("tbl_df", "tbl", "data.frame")) a b c <int> <int> <chr> 1 1 1 a 2 2 2 a 3 3 3 b 4 4 4 b 5 5 5 c 6 6 6 c 7 7 7 c 8 8 8 c 9 9 9 c 10 10 10 c
mydata%>% mutate_if(is.integer,as.factor) a b c <fct> <fct> <chr> 1 1 1 a 2 2 2 a 3 3 3 b 4 4 4 b 5 5 5 c 6 6 6 c 7 7 7 c 8 8 8 c 9 9 9 c 10 10 10 c
rotate <- function(x) t(apply(x, 2, rev)) rotate(x) rotate(rotate(x)) rotate(rotate(rotate(x))) rotate(rotate(rotate(rotate(x))))
foo = matrix(1:9, 3) foo foo <- apply(t(foo),2,rev) foo
m <- matrix(rep(1:3,each=3),3) [,1] [,2] [,3] [1,] 1 2 3 [2,] 1 2 3 [3,] 1 2 3 t(m[nrow(m):1,]) [,1] [,2] [,3] [1,] 1 1 1 [2,] 2 2 2 [3,] 3 3 3 m[nrow(m):1,ncol(m):1] [,1] [,2] [,3] [1,] 3 2 1 [2,] 3 2 1 [3,] 3 2 1 t(m)[ncol(m):1,] [,1] [,2] [,3] [1,] 3 3 3 [2,] 2 2 2 [3,] 1 1 1
m <- matrix(1:8,ncol=4) rot <- function(x) "[<-"(x, , rev(x)) rot(m) rot(rot(m))
rotate_clockwise <- function(x) { t( apply(x, 2, rev))} rotate_counter_clockwise <- function(x) { apply( t(x),2, rev)} library(pracma) rotate_one_eighty <- function(x) { rot90(x, 2) } rotate_two_seventy <- function(x) { rot90(x, -1) } foo = matrix(1:9, 3) foo foo = rotate_clockwise(foo) foo foo = rotate_counter_clockwise(foo) foo foo = rotate_one_eighty(foo) foo
[,1] [,2] [,3] [1,] 1 4 7 [2,] 2 5 8 [3,] 3 6 9 [,1] [,2] [,3] [1,] 3 2 1 [2,] 6 5 4 [3,] 9 8 7 [,1] [,2] [,3] [1,] 1 4 7 [2,] 2 5 8 [3,] 3 6 9 [,1] [,2] [,3] [1,] 9 6 3 [2,] 8 5 2 [3,] 7 4 1
rotate <- function(x, clockwise=T) { if (clockwise) { t( apply(x, 2, rev)) } else {apply( t(x),2, rev)} }
Error in x$ed : $ operator is invalid for atomic vectors
x <- c(1, 2) x names(x) <- c("bob", "ed") x <- as.data.frame(t(x)) x$ed [1] 2
Browse[1]> is.atomic(list()) [1] FALSE Browse[1]> is.atomic(data.frame()) [1] FALSE Browse[1]> is.atomic(class(list(foo="bar"))) [1] TRUE Browse[1]> is.atomic(c(" lang ")) [1] TRUE
a = list(1,2,3) b = data.frame(a) d = rbind("?",c(b)) e = exp(1) f = list(d) print(data.frame(c(list(f,e)))) X1 X2 X3 X2.71828182845905 1 ? ? ? 2.718282 2 1 2 3 2.718282
df <- read.table(header = TRUE, text = A 12 A 10 B 3 B 5 B 6 C 1 D 3 D 4 aggregate(df$Value, by = list(df$Gene), max) aggregate(Value ~ Gene, data = df, max) tapply(df$Value, df$Gene, max) lapply(split(df, df$Gene), function(y) max(y$Value)) require(plyr) ddply(df, .(Gene), summarise, Value = max(Value)) require(dplyr) df %>% group_by(Gene) %>% summarise(Value = max(Value)) require(data.table) dt <- data.table(df) dt[ , max(Value), by = Gene] require(doBy) summaryBy(Value~Gene, data = df, FUN = max) require(sqldf) sqldf("select Gene, max(Value) as Value from df group by Gene", drv = df[as.logical(ave(df$Value, df$Gene, FUN = function(x) x == max(x))),]
library(sqldf) sqldf("select max(Value),Gene from df1 group by Gene")
df$Gene <- as.factor(df$Gene) do.call(rbind, lapply(split(df,df$Gene), function(x) {return(x[which.max(x$Value),])}))
> data State Company Employees 1 AK A 82 2 AK B 104 3 AK C 37 4 AK D 24 5 RI E 19 6 RI F 118 7 RI G 88 8 RI H 42 data <- structure(list(State = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L), .Label = c("AK", "RI"), class = "factor"), Company = structure(1:8, .Label = c("A", "B", "C", "D", "E", "F", "G", "H"), class = "factor"), Employees = c(82L, 104L, 37L, 24L, 19L, 118L, 88L, 42L)), .Names = c("State", "Company", "Employees"), class = "data.frame", row.names = c(NA, -8L))
> aggregate(Employees ~ State, data, function(x) min(x)) State Employees 1 AK 24 2 RI 19
> library(data.table) > DT <- data.table(data) > DT[ , list(Employees = min(Employees)), by = State] State Employees 1: AK 24 2: RI 19
library(data.table) DT[ , .SD[which.min(Employees)], by = State] State Company Employees 1: AK D 24 2: RI E 19
library(dplyr) data %>% group_by(State) %>% slice(which.min(Employees))
library(data.table) unique(setDT(data)[order(Employees)], by = "State")
setDT(data)[order(Employees), .SD[1L], by = State, verbose = TRUE]
library(dplyr) data %>% arrange(Employees) %>% distinct(State, .keep_all = TRUE)
tmp <- setDT(data)[, .(Employees = min(Employees)), by = State] data[tmp, on = .(State, Employees), mult = "first"]
library(data.table) library(dplyr) library(plyr) library(stringi) library(microbenchmark) set.seed(123) N <- 1e6 data <- data.frame(State = stri_rand_strings(N, 2, Employees = sample(N*10, N, replace = TRUE)) DT <- copy(data) setDT(DT) DT2 <- copy(DT) str(DT) str(DT2) microbenchmark("(data.table) .SD[which.min]: " = DT[ , .SD[which.min(Employees)], by = State], "(data.table) .I[which.min]: " = DT[DT[ , .I[which.min(Employees)], by = State]$V1], "(data.table) order/unique: " = unique(DT[order(Employees)], by = "State"), "(data.table) order/.SD[1L]: " = DT[order(Employees), .SD[1L], by = State], "(data.table) self join (on):" = { tmp <- DT[, .(Employees = min(Employees)), by = State] DT[tmp, on = .(State, Employees), mult = "first"]}, "(data.table) self join (setkey):" = { tmp <- DT2[, .(Employees = min(Employees)), by = State] setkey(tmp, State, Employees) setkey(DT2, State, Employees) DT2[tmp, mult = "first"]}, "(dplyr) slice(which.min): " = data %>% group_by(State) %>% slice(which.min(Employees)), "(dplyr) arrange/distinct: " = data %>% arrange(Employees) %>% distinct(State, .keep_all = TRUE), "(dplyr) arrange/group_by/slice: " = data %>% arrange(Employees) %>% group_by(State) %>% slice(1), "(plyr) ddply/which.min: " = ddply(data, .(State), function(x) x[which.min(x$Employees),]), "(base) by: " = do.call(rbind, by(data, data$State, function(x) x[which.min(x$Employees), ])))
by(data, data$State, function(x) x[which.min(x$Employees), ] )
do.call(rbind, by(data, data$State, function(x) x[which.min(x$Employees), ] ))
ddply(df, .(State), function(x) x[which.min(x$Employees),])
myStringVariable <- "Very Nice ! I like"; myStringVariabel <- paste(myStringVariable, "\n", sep="");
for (i in 1:5) { for (j in 1:i) { cat(j) } cat("\n") }
p <- ggplot(plotobject, aes(x=Pos, y=Pval),res=300) ggsave(plot=p,height=6,width=6,dpi=200, filename="~/example.pdf")
ggsave(plot=p,height=6,width=6,dpi=200, filename="~/example.pdf", useDingbats=FALSE)
pdf("example.pdf", useDingbats=FALSE) ggplot(plotobject, aes(x=Pos, y=Pval),res=300) dev.off()
scale_x_date(breaks = "1 month", minor_breaks = "1 week", labels=(date_format="%B")) +
scale_x_date(major="months", minor="weeks", format="%B") +
Error in scale_labels.continuous(scale) : Breaks and labels are different lengths
Error in continuous_scale(aesthetics, "date", identity, breaks = breaks, : unused argument(s) (major = "months", minor = "weeks", format = "%B")
scale_x_date(breaks = "1 month", minor_breaks = "1 week") +
scale_x_date(breaks = "1 month", minor_breaks = "1 week", labels=date_format("%B")) +
Error in structure(list(call = match.call(), aesthetics = aesthetics, : could not find function "date_format"
scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%B")
scale_x_date(breaks = "1 month", minor_breaks = "1 week", labels=date_format("%B")) +
