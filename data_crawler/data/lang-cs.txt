var url = Url.Combine( "http: "/too/", "/many/", "/slashes/", "too", "few?", "x=1", "y=2"
Uri baseUri = new Uri("http: Uri myUri = new Uri(baseUri, "catalog/shownew.htm");
Uri result = null; if (Uri.TryCreate(new Uri("http: { Console.WriteLine(result); }
public static string Combine(string uri1, string uri2) { uri1 = uri1.TrimEnd( uri2 = uri2.TrimStart( return string.Format("{0}/{1}", uri1, uri2); }
using System; using System.Linq; public static class UriExtensions { public static Uri Append(this Uri uri, params string[] paths) { return new Uri(paths.Aggregate(uri.AbsoluteUri, (current, path) => string.Format("{0}/{1}", current.TrimEnd( } }
public string UrlCombine(string url1, string url2) { if (url1.Length == 0) { return url2; } if (url2.Length == 0) { return url1; } url1 = url1.TrimEnd( url2 = url2.TrimStart( return string.Format("{0}/{1}", url1, url2); }
public static string CombineUri(params string[] uriParts) { string uri = string.Empty; if (uriParts != null && uriParts.Count() > 0) { char[] trims = new char[] { uri = (uriParts[0] ?? string.Empty).TrimEnd(trims); for (int i = 1; i < uriParts.Count(); i++) { uri = string.Format("{0}/{1}", uri.TrimEnd(trims), (uriParts[i] ?? string.Empty).TrimStart(trims)); } } return uri; }
public static string UriCombine (this string val, string append) { if (String.IsNullOrEmpty(val)) return append; if (String.IsNullOrEmpty(append)) return val; return val.TrimEnd( }
"www.example.com/".UriCombine("/images").UriCombine("first.jpeg");
public string CombineUrl(string baseUrl, string relativeUrl) { UriBuilder baseUri = new UriBuilder(baseUrl); Uri newUri; if (Uri.TryCreate(baseUri.Uri, relativeUrl, out newUri)) return newUri.ToString(); else throw new ArgumentException("Unable to combine specified url values"); }
public static string Combine(params string[] parts) { if (parts == null || parts.Length == 0) return string.Empty; var urlBuilder = new StringBuilder(); foreach (var part in parts) { var tempUrl = tryCreateRelativeOrAbsolute(part); urlBuilder.Append(tempUrl); } return VirtualPathUtility.RemoveTrailingSlash(urlBuilder.ToString()); } private static string tryCreateRelativeOrAbsolute(string s) { System.Uri uri; System.Uri.TryCreate(s, UriKind.RelativeOrAbsolute, out uri); string tempUrl = VirtualPathUtility.AppendTrailingSlash(uri.ToString()); return tempUrl; }
UriBuilder urlb = new UriBuilder("http", _serverAddress, _webPort, _filePath); Uri url = urlb.Uri; return url.AbsoluteUri;
const char PATH_DELIMITER = public static string Combine(string path, string relative) { if(relative == null) relative = String.Empty; if(path == null) path = String.Empty; if(relative.Length == 0 && path.Length == 0) return String.Empty; if(relative.Length == 0) return path; if(path.Length == 0) return relative; path = path.Replace( relative = relative.Replace( return path.TrimEnd(PATH_DELIMITER) + PATH_DELIMITER + relative.TrimStart(PATH_DELIMITER); }
public static string Combine(params string[] uriParts) { string uri = string.Empty; if (uriParts != null && uriParts.Any()) { char[] trims = new char[] { uri = (uriParts[0] ?? string.Empty).TrimEnd(trims); for (int i = 1; i < uriParts.Length; i++) { uri = string.Format("{0}/{1}", uri.TrimEnd(trims), (uriParts[i] ?? string.Empty).TrimStart(trims)); } } return uri; }
public static string PathCombine(bool IsURL , bool IsRelative , bool IsFixInternal , params string[] parts) { if (parts == null || parts.Length == 0) return string.Empty; char separator = IsURL ? if (parts.Length == 1 && IsFixInternal) { string validsingle; if (IsURL) { validsingle = parts[0].Replace( } else { validsingle = parts[0].Replace( } validsingle = validsingle.Trim(separator); return (IsRelative ? separator.ToString() : string.Empty) + validsingle; } string final = parts .Aggregate ( (string first , string second) => { string validfirst; string validsecond; if (IsURL) { validfirst = first.Replace( validsecond = second.Replace( } else { validfirst = first.Replace( validsecond = second.Replace( } var prefix = string.Empty; if (IsFixInternal) { if (IsURL) { if (validfirst.Contains(": { var tofix = validfirst.Substring(validfirst.IndexOf(": prefix = validfirst.Replace(tofix , string.Empty).TrimStart(separator); var tofixlist = tofix.Split(new[] { separator } , StringSplitOptions.RemoveEmptyEntries); validfirst = separator + string.Join(separator.ToString() , tofixlist); } else { var firstlist = validfirst.Split(new[] { separator } , StringSplitOptions.RemoveEmptyEntries); validfirst = string.Join(separator.ToString() , firstlist); } var secondlist = validsecond.Split(new[] { separator } , StringSplitOptions.RemoveEmptyEntries); validsecond = string.Join(separator.ToString() , secondlist); } else { var firstlist = validfirst.Split(new[] { separator } , StringSplitOptions.RemoveEmptyEntries); var secondlist = validsecond.Split(new[] { separator } , StringSplitOptions.RemoveEmptyEntries); validfirst = string.Join(separator.ToString() , firstlist); validsecond = string.Join(separator.ToString() , secondlist); } } return prefix + validfirst.Trim(separator) + separator + validsecond.Trim(separator); } ); return (IsRelative ? separator.ToString() : string.Empty) + final; }
Console.WriteLine(PathCombine(true , true , true , @"\/\/folder 1\/\/\/\\/\folder2\ Console.WriteLine(PathCombine(true , true , false , @"\/\/folder 1\/\/\/\\/\folder2\ Console.WriteLine(PathCombine(true , false , true , @"/\/\/https:/\/\/\lul.com\/\/\/\\/\folder2\ Console.WriteLine(PathCombine(false , true , true , @"../../../\\..\...\./../somepath" , @"anotherpath"));
public static class UrlPath { private static string InternalCombine(string source, string dest) { if (string.IsNullOrWhiteSpace(source)) throw new ArgumentException("Cannot be null or white space", nameof(source)); if (string.IsNullOrWhiteSpace(dest)) throw new ArgumentException("Cannot be null or white space", nameof(dest)); return $"{source.TrimEnd( } public static string Combine(string source, params string[] args) => args.Aggregate(source, InternalCombine); }
UrlPath.Combine("test1", "test2"); UrlPath.Combine("test1 UrlPath.Combine("test1", "/test2"); UrlPath.Combine(@"test1\/\/\/", @"\/\/\\\\\ UrlPath.Combine("/test1/", "/test2/", null); UrlPath.Combine("", "/test2/"); UrlPath.Combine("/test1/", null);
var pathParts = new string[] { destinationBaseUrl, destinationFolderUrl, fileName }; var destination = pathParts.Aggregate((left, right) => { if (string.IsNullOrWhiteSpace(right)) return left; return new Uri(new Uri(left), right).ToString(); });
private Uri UriCombine(string path1, string path2, string path3 = "", string path4 = "") { string path = System.IO.Path.Combine(path1, path2.TrimStart( string url = path.Replace( return new Uri(url); }
public static string UrlCombine(string part1, string part2) { string newPart1 = string.Empty; string newPart2 = string.Empty; string seperator = "/"; if (string.IsNullOrEmpty(part1) || string.IsNullOrEmpty(part2)) { seperator = string.Empty; } if (!string.IsNullOrEmpty(part1)) { newPart1 = part1.TrimEnd( } if (!string.IsNullOrEmpty(part2)) { newPart2 = part2.TrimStart( } return string.Format("{0}{1}{2}", newPart1, seperator, newPart2); }
public static class WebPath { public static string Combine(params string[] args) { var prefixAdjusted = args.Select(x => x.StartsWith("/") && !x.StartsWith("http") ? x.Substring(1) : x); return string.Join("/", prefixAdjusted); } }
System.IO.Path.Combine(rootUrl, subPath).Replace(@"\", "/")
string[] brokenBaseUrl = Context.Url.TrimEnd( string[] brokenRootFolderPath = RootFolderPath.Split( for (int x = 0; x < brokenRootFolderPath.Length; x++) { if (!brokenBaseUrl.Contains(brokenRootFolderPath[x])) { if (x == 0) { RootLocationUrl = Context.Url.TrimEnd( } else { RootLocationUrl += String.Format("/{0}", brokenRootFolderPath[x]); } } }
public static string Combine(this string uri1, string uri2) => $"{uri1.TrimEnd(
public class UriTool { public static Uri Join(string path1, string path2) { string url = path1 + "/" + path2; url = Regex.Replace(url, "(?<!http:)/{2,}", "/"); return new Uri(url); } }
string path1 = "http: string path2 = "/another/address.html"; Uri joinedUri = UriTool.Join(path1, path2);
public static string UrlPathCombine(string path1, string path2) { path1 = path1.TrimEnd( path2 = path2.TrimStart( return Path.Combine(path1, path2) .Replace(Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar); } [TestMethod] public void TestUrl() { const string P1 = "http: Assert.AreEqual("http: var path = UrlPathCombine("Http: Assert.AreEqual( "Http: path); }
Uri final = new Uri(Regex.Replace(baseUrl + "/" + relativePath, "(?<!http:)/{2,}", "/"));
Uri final =new Uri(string.Format("{0}/{1}", baseUrl.ToString().TrimEnd(
public static string JoinUrlParts(params string[] urlParts) { return string.Join("/", urlParts.Where(up => !string.IsNullOrEmpty(up)).ToList().Select(up => up.Trim( }
Uri baseUri = new Uri("http: string path = Path.Combine("Images", "Image.jpg"); Uri myUri = new Uri(baseUri, path);
enum Gender { Male, Female } class Person { int Age { get; set; } Gender Gender { get; set; } }
using Newtonsoft.Json; using Newtonsoft.Json.Converters; [JsonConverter(typeof(StringEnumConverter))] public Gender Gender { get; set; }
HttpConfiguration config = GlobalConfiguration.Configuration; config.Formatters.JsonFormatter.SerializerSettings.Formatting = Newtonsoft.Json.Formatting.Indented; config.Formatters.JsonFormatter.SerializerSettings.Converters.Add (new Newtonsoft.Json.Converters.StringEnumConverter());
JsonConvert.DefaultSettings = (() => { var settings = new JsonSerializerSettings(); settings.Converters.Add(new StringEnumConverter { CamelCaseText = true }); return settings; });
public enum time_zone_enum { [EnumMember(Value = "Europe/London")] EuropeLondon, [EnumMember(Value = "US/Alaska")] USAlaska }
Newtonsoft.Json.JsonConvert.SerializeObject( objectToSerialize, Newtonsoft.Json.Formatting.None, new Newtonsoft.Json.JsonSerializerSettings() { Converters = new List<Newtonsoft.Json.JsonConverter> { new Newtonsoft.Json.Converters.StringEnumConverter() } })
class Person { int Age { get; set; } [ScriptIgnore] Gender Gender { get; set; } string GenderString { get { return Gender.ToString(); } } }
[DataContract( Namespace = "http: class Person { [DataMember] int Age { get; set; } Gender Gender { get; set; } [DataMember(Name = "Gender")] string GenderString { get { return this.Gender.ToString(); } set { Gender g; this.Gender = Enum.TryParse(value, true, out g) ? g : Gender.Male; } } }
enum Gender { Male, Female } class Person { int Age { get; set; } [JsonConverter(typeof(StringEnumConverter))] Gender Gender { get; set; } }
public enum Gender { [EnumMember(Value = "male")] Male, [EnumMember(Value = "female")] Female } class Person { int Age { get; set; } [JsonConverter(typeof(StringEnumConverter))] Gender Gender { get; set; } }
public enum Role { None = Permission.None, Guest = Permission.Browse, Reader = Permission.Browse| Permission.Help , Manager = Permission.Browse | Permission.Help | Permission.Customise }
Get["/roles"] = _ => { var type = typeof(Role); var data = Enum .GetNames(type) .Select(name => new { Id = (int)Enum.Parse(type, name), Name = name }) .ToArray(); return Response.AsJson(data); };
[ {"Id":0,"Name":"None"}, {"Id":2097155,"Name":"Guest"}, {"Id":2916367,"Name":"Reader"}, {"Id":4186095,"Name":"Manager"} ]
fillSelect=(id, url, selectedValue=0)-> $select = $ id $option = (item)-> $ "<option/>", { value:" html:" selected:"selected" if item.Id is selectedValue } $.getJSON(url).done (data)->$option(item).appendTo $select for item in data $ -> fillSelect "
<select id="role" name="role"> <option value="0">None</option> <option value="2097155">Guest</option> <option value="2916367" selected="selected">Reader</option> <option value="4186095">Manager</option> </select>
var result = JsonConvert.SerializeObject ( dataObject, new JsonSerializerSettings { Converters = new [] {new StringEnumConverter()} } );
string SerializedResponse = JsonConvert.SerializeObject( objToSerialize, new Newtonsoft.Json.Converters.StringEnumConverter() );
public class Startup { public IServiceProvider ConfigureServices(IServiceCollection services) { services.AddMvc().AddJsonOptions(options => { options.SerializerSettings.Converters.Add(new Newtonsoft.Json.Converters.StringEnumConverter()); }); } }
public void ConfigureServices(IServiceCollection services) { ... services.AddJsonFormatters(f => f.Converters.Add(new StringEnumConverter())); ... }
public class CustomStringEnumConverter : Newtonsoft.Json.Converters.StringEnumConverter { public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) { Type type = value.GetType() as Type; if (!type.IsEnum) throw new InvalidOperationException("Only type Enum is supported"); foreach (var field in type.GetFields()) { if (field.Name == value.ToString()) { var attribute = Attribute.GetCustomAttribute(field, typeof(DescriptionAttribute)) as DescriptionAttribute; writer.WriteValue(attribute != null ? attribute.Description : field.Name); return; } } throw new ArgumentException("Enum not found"); } }
public enum FooEnum { [Description("Not Applicable")] NotApplicable, Applicable }
[JsonConverter(typeof(CustomStringEnumConverter))] public FooEnum test { get; set; }
JsonConvert.SerializeObject(objToSerialize, Formatting.Indented, new Newtonsoft.Json.Converters.StringEnumConverter())
JsonConvert.DefaultSettings = (() => { var settings = new JsonSerializerSettings(); settings.Converters.Add(new StringEnumConverter { AllowIntegerValues = false }); return settings; });
public class LowercaseJsonSerializer { private static readonly JsonSerializerSettings Settings = new JsonSerializerSettings { ContractResolver = new LowercaseContractResolver() }; public static void Serialize(TextWriter file, object o) { JsonSerializer serializer = new JsonSerializer() { ContractResolver = new LowercaseContractResolver(), Formatting = Formatting.Indented, NullValueHandling = NullValueHandling.Ignore }; serializer.Converters.Add(new Newtonsoft.Json.Converters.StringEnumConverter()); serializer.Serialize(file, o); } public class LowercaseContractResolver : DefaultContractResolver { protected override string ResolvePropertyName(string propertyName) { return Char.ToLowerInvariant(propertyName[0]) + propertyName.Substring(1); } } }
internal void SaveJson(string fileName) { using (StreamWriter file = File.CreateText(@fileName)) { LowercaseJsonSerializer.Serialize(file, jsonobject); } }
new JavaScriptSerializer().Serialize( (from p in (new List<Person>() { new Person() { Age = 35, Gender = Gender.Male } }) select new { Age =p.Age, Gender=p.Gender.ToString() } ).ToArray()[0] );
<system.web.webPages.razor> <pages pageBaseType="System.Web.Mvc.WebViewPage"> <namespaces> <add namespace="System.Web.Mvc" /> <add namespace="System.Web.Mvc.Ajax" /> . . <!-- etc --> </namespaces> </pages> </system.web.webPages.razor>
Microsoft.WebPages.Compilation.CodeGeneratorSettings.AddGlobalImport("Namespace.Namespace");
using Microsoft.WebPages.Compilation; public class PreApplicationStart { public static void InitializeApplication() { CodeGeneratorSettings.AddGlobalImport("Custom.Namespace"); } }
[assembly: PreApplicationStartMethod(typeof(PreApplicationStart), "InitializeApplication")]
@model List<Application_Name.Models.Model_Name> @foreach (var item in Model) { <tr> <td>@item.srno</td> <td>@item.name</td> </tr> }
static class Foo() { static Foo() { Bar = "fubar"; } public static string Bar { get; set; } }
enum public non-nested classes / structs internal interfaces internal delegates in namespace internal class/struct member(s) private delegates nested in class/struct private
nested enum public nested interface public nested class private nested struct private
using System; namespace ClassLibrary1 { public class SameAssemblyBaseClass { public string publicVariable = "public"; protected string protectedVariable = "protected"; protected internal string protected_InternalVariable = "protected internal"; internal string internalVariable = "internal"; private string privateVariable = "private"; public void test() { Console.WriteLine(privateVariable); Console.WriteLine(publicVariable); Console.WriteLine(protectedVariable); Console.WriteLine(internalVariable); Console.WriteLine(protected_InternalVariable); } } public class SameAssemblyDerivedClass : SameAssemblyBaseClass { public void test() { SameAssemblyDerivedClass p = new SameAssemblyDerivedClass(); Console.WriteLine(p.publicVariable); Console.WriteLine(p.protectedVariable); Console.WriteLine(p.internalVariable); Console.WriteLine(p.protected_InternalVariable); } } public class SameAssemblyDifferentClass { public SameAssemblyDifferentClass() { SameAssemblyBaseClass p = new SameAssemblyBaseClass(); Console.WriteLine(p.publicVariable); Console.WriteLine(p.internalVariable); Console.WriteLine(p.protected_InternalVariable); } } }
using System; using ClassLibrary1; namespace ConsoleApplication4 { class DifferentAssemblyClass { public DifferentAssemblyClass() { SameAssemblyBaseClass p = new SameAssemblyBaseClass(); Console.WriteLine(p.publicVariable); } } class DifferentAssemblyDerivedClass : SameAssemblyBaseClass { static void Main(string[] args) { DifferentAssemblyDerivedClass p = new DifferentAssemblyDerivedClass(); Console.WriteLine(p.publicVariable); Console.WriteLine(p.protectedVariable); Console.WriteLine(p.protected_InternalVariable); SameAssemblyDerivedClass dd = new SameAssemblyDerivedClass(); dd.test(); } } }
enum Abc { [Description("Cba")] Abc, Def } public static MvcHtmlString EnumDropDownList<TEnum>(this HtmlHelper htmlHelper, string name, TEnum selectedValue) { IEnumerable<TEnum> values = Enum.GetValues(typeof(TEnum)) .Cast<TEnum>(); List<SelectListItem> items = new List<SelectListItem>(); foreach (var value in values) { string text = value.ToString(); var member = typeof(TEnum).GetMember(value.ToString()); if (member.Count() > 0) { var customAttributes = member[0].GetCustomAttributes(typeof(DescriptionAttribute), false); if (customAttributes.Count() > 0) { text = ((DescriptionAttribute)customAttributes[0]).Description; } } items.Add(new SelectListItem { Text = text, Value = value.ToString(), Selected = (value.Equals(selectedValue)) }); } return htmlHelper.DropDownList( name, items ); }
string url = HttpContext.Current.Request.Url.AbsoluteUri; string path = HttpContext.Current.Request.Url.AbsolutePath; string host = HttpContext.Current.Request.Url.Host;
Response.Write("<br/> " + HttpContext.Current.Request.Url.Host); Response.Write("<br/> " + HttpContext.Current.Request.Url.Authority); Response.Write("<br/> " + HttpContext.Current.Request.Url.Port); Response.Write("<br/> " + HttpContext.Current.Request.Url.AbsolutePath); Response.Write("<br/> " + HttpContext.Current.Request.ApplicationPath); Response.Write("<br/> " + HttpContext.Current.Request.Url.AbsoluteUri); Response.Write("<br/> " + HttpContext.Current.Request.Url.PathAndQuery);
localhost localhost:60527 60527 /WebSite1test/Default2.aspx /WebSite1test http: /WebSite1test/Default2.aspx?QueryString1=1&QueryString2=2
String strPathAndQuery = HttpContext.Current.Request.Url.PathAndQuery; String strUrl = HttpContext.Current.Request.Url.AbsoluteUri.Replace(strPathAndQuery, "/");
String URL = "http: System.Uri uri = new System.Uri(URL);
string url = uri.AbsoluteUri; string host = uri.host
string subPath ="ImagesPath"; bool exists = System.IO.Directory.Exists(Server.MapPath(subPath)); if(!exists) System.IO.Directory.CreateDirectory(Server.MapPath(subPath));
using System.IO; private void CreateIfMissing(string path) { bool folderExists = Directory.Exists(Server.MapPath(path)); if (!folderExists) Directory.CreateDirectory(Server.MapPath(path)); }
try { if (!Directory.Exists(path)) { DirectoryInfo di = Directory.CreateDirectory(path); } } catch (IOException ioex) { Console.WriteLine(ioex.Message); }
using System.IO if (!Directory.Exists(yourDirectory)) Directory.CreateDirectory(yourDirectory);
if (!Directory.Exists(Path.GetDirectoryName(fileName))) { Directory.CreateDirectory(Path.GetDirectoryName(fileName)); }
System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/temp/"));
string pathToNewFolder = System.IO.Path.Combine(parentFolderPath, "NewSubFolder"); DirectoryInfo directory = Directory.CreateDirectory(pathToNewFolder);
string fileToCopy = "filelocation\\file_name.txt"; String server = Environment.UserName; string newLocation = "C:\\Users\\" + server + "\\Pictures\\Tenders\\file_name.txt"; string folderLocation = "C:\\Users\\" + server + "\\Pictures\\Tenders\\"; bool exists = System.IO.Directory.Exists(folderLocation); if (!exists) { System.IO.Directory.CreateDirectory(folderLocation); if (System.IO.File.Exists(fileToCopy)) { MessageBox.Show("file copied"); System.IO.File.Copy(fileToCopy, newLocation, true); } else { MessageBox.Show("no such files"); } }
string root = @"C:\Temp"; string subdir = @"C:\Temp\Mahesh"; if (!Directory.Exists(root)) { Directory.CreateDirectory(root); }
if (!Directory.Exists(subdir)) { Directory.CreateDirectory(subdir); }
public void Init() { String platypusDir = @"C:\platypus"; CreateDirectoryIfDoesNotExist(platypusDir); } private void CreateDirectoryIfDoesNotExist(string dirName) { System.IO.Directory.CreateDirectory(dirName); }
using (var httpClient = new HttpClient()) { httpClient.BaseAddress = new Uri("http: httpClient.DefaultRequestHeaders.Add("Accept", "application/json"); httpClient.DefaultRequestHeaders.Add("Content-Type", "application/json"); }
HttpClient client = new HttpClient(); client.BaseAddress = new Uri("http: client.DefaultRequestHeaders .Accept .Add(new MediaTypeWithQualityHeaderValue("application/json")); HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, "relativeAddress"); request.Content = new StringContent("{\"name\":\"John Doe\",\"age\":33}", Encoding.UTF8, "application/json"); client.SendAsync(request) .ContinueWith(responseTask => { Console.WriteLine("Response: {0}", responseTask.Result); });
req.Content.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
using Flurl.Http; var result = await "http: .WithHeader("Accept", "application/json") .PostJsonAsync(new { ... }) .ReceiveJson<TResult>();
var client = new HttpClient(); client.DefaultRequestHeaders.TryAddWithoutValidation("Content-Type", "application/json; charset=utf-8");
var field = typeof(System.Net.Http.Headers.HttpRequestHeaders) .GetField("invalidHeaders", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static) ?? typeof(System.Net.Http.Headers.HttpRequestHeaders) .GetField("s_invalidHeaders", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static); if (field != null) { var invalidFields = (HashSet<string>)field.GetValue(null); invalidFields.Remove("Content-Type"); } _client.DefaultRequestHeaders.TryAddWithoutValidation("Content-Type", "text/xml");
HttpRequestMessage httpRequest = new HttpRequestMessage(HttpMethod.Get, @"myUrl"); httpRequest.Content = new StringContent(string.Empty, Encoding.UTF8, "application/json"); HttpClient client = new HttpClient(); Task<HttpResponseMessage> response = client.SendAsync(httpRequest); var result = response.Result;
using (var client = new System.Net.WebClient()) { client.Headers.Add("Accept", "application/json"); client.Headers.Add("Content-Type", "application/json; charset=utf-8"); client.DownloadString(...); }
var content = new JsonContent(); content.Headers.ContentType = new MediaTypeHeaderValue("application/json"); content.Headers.ContentType.Parameters.Add(new NameValueHeaderValue("charset", "utf-8")); content.Headers.ContentType.Parameters.Add(new NameValueHeaderValue("IEEE754Compatible", "true"));
public class JsonContent : HttpContent { private readonly MemoryStream _stream = new MemoryStream(); ~JsonContent() { _stream.Dispose(); } public JsonContent(object value) { Headers.ContentType = new MediaTypeHeaderValue("application/json"); using (var contexStream = new MemoryStream()) using (var jw = new JsonTextWriter(new StreamWriter(contexStream)) { Formatting = Formatting.Indented }) { var serializer = new JsonSerializer(); serializer.Serialize(jw, value); jw.Flush(); contexStream.Position = 0; contexStream.WriteTo(_stream); } _stream.Position = 0; } private JsonContent(string content) { Headers.ContentType = new MediaTypeHeaderValue("application/json"); using (var contexStream = new MemoryStream()) using (var sw = new StreamWriter(contexStream)) { sw.Write(content); sw.Flush(); contexStream.Position = 0; contexStream.WriteTo(_stream); } _stream.Position = 0; } protected override Task SerializeToStreamAsync(Stream stream, TransportContext context) { return _stream.CopyToAsync(stream); } protected override bool TryComputeLength(out long length) { length = _stream.Length; return true; } public static HttpContent FromFile(string filepath) { var content = File.ReadAllText(filepath); return new JsonContent(content); } public string ToJsonString() { return Encoding.ASCII.GetString(_stream.GetBuffer(), 0, _stream.GetBuffer().Length).Trim(); } }
var RoomDetails = context.Rooms.ToList(); foreach (var Room in Rooms) { Room.LastUpdated = DateTime.Now; }
ALTER TABLE <TABLE_NAME> ADD CONSTRAINT <CONSTRAINT_NAME> PRIMARY KEY(<COLUMN_NAME>)
[Key, Column(Order = 0)] public Int32? OrderNumber { get; set; } [Key, Column(Order = 1)] public String Customer { get; set; }
<EntityType Name="table_name"> <Key> <PropertyRef Name="order_numbers" /> <PropertyRef Name="customer_name" /> </Key>
var duplicateOrder = myModel.orders.First(x => x.order_date == DateTime.Today); myModel.orders.Remove(duplicateOrder);
DELETE FROM orders WHERE order_number = (duplicateOrder AND customer_name = (duplicateOrder
<site name="WebApplication3" id="2"> <application path="/" applicationPool="Clr4IntegratedAppPool"> <virtualDirectory path="/" physicalPath="C:\Users\user.name\Source\Repos\protoype-one\WebApplication3" /> </application> <bindings> <binding protocol="http" bindingInformation="*:62549:localhost" /> </bindings> </site>
<bindings> <binding protocol="http" bindingInformation="*:8080:localhost" /> <binding protocol="http" bindingInformation="*:8080:hostname" /> </bindings>
<site name="Project.Web" id="2"> <application path="/"> <virtualDirectory path="/" physicalPath="C:\Project\Project.Web" /> </application> <bindings> <binding protocol="http" bindingInformation="*:12345:localhost" /> </bindings> </site>
<binding protocol="http" bindingInformation="*:12345:192.168.1.15" /> <binding protocol="https" bindingInformation="*:44300:192.168.1.15" />
netsh advfirewall firewall add rule name="IISExpressWeb" dir=in protocol=tcp localport=12345 profile=private remoteip=localsubnet action=allow netsh advfirewall firewall add rule name="IISExpressWebHttps" dir=in protocol=tcp localport=44300 profile=private remoteip=localsubnet action=allow
%userprofile%\My Documents\IISExpress\config\applicationhost.config
<rewrite> <rules> <rule name="ReverseProxyInboundRule1" stopProcessing="true"> <match url="^dev/(.*)" /> <action type="Rewrite" url="http: </rule> </rules> </rewrite>
ngrok authtoken xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ngrok http -host-header=localhost 89230
> C:\Program Files (x86)\IIS Express>IisExpressAdminCmd.exe Usage: > iisexpressadmincmd.exe <command> <parameters> Supported commands: > setupFriendlyHostnameUrl -url:<url> > deleteFriendlyHostnameUrl -url:<url> > setupUrl -url:<url> > deleteUrl -url:<url> > setupSslUrl -url:<url> -CertHash:<value> > setupSslUrl -url:<url> -UseSelfSigned > deleteSslUrl -url:<url> > > Examples: 1) Configure "http.sys" and "hosts" file for friendly > hostname "contoso": iisexpressadmincmd setupFriendlyHostnameUrl > -url:http: > deleteFriendlyHostnameUrl -url:http:
netsh http add sslcert ipport=0.0.0.0:443 appid={214124cd-d05b-4309-9af9-9caa44b2b74a} certhash=YOURCERTHASHHERE
<VirtualHost *:8081> ProxyPass / http: ProxyPassReverse / http: </VirtualHost>
using System; using System.IO; using System.Web.Script.Serialization; using System.Xml; using System.Xml.Serialization; namespace Helpers { internal static class ParseHelpers { private static JavaScriptSerializer json; private static JavaScriptSerializer JSON { get { return json ?? (json = new JavaScriptSerializer()); } } public static Stream ToStream(this string @this) { var stream = new MemoryStream(); var writer = new StreamWriter(stream); writer.Write(@this); writer.Flush(); stream.Position = 0; return stream; } public static T ParseXML<T>(this string @this) where T : class { var reader = XmlReader.Create(@this.Trim().ToStream(), new XmlReaderSettings() { ConformanceLevel = ConformanceLevel.Document }); return new XmlSerializer(typeof(T)).Deserialize(reader) as T; } public static T ParseJSON<T>(this string @this) where T : class { return JSON.Deserialize<T>(@this.Trim()); } } }
public class JSONRoot { public catalog catalog { get; set; } } string xml = File.ReadAllText(@"D:\file.xml"); var catalog1 = xml.ParseXML<catalog>(); string json = File.ReadAllText(@"D:\file.json"); var catalog2 = json.ParseJSON<JSONRoot>();
Exception information: Exception type: EntityException Exception message: The underlying provider failed on Open. at System.Data.EntityClient.EntityConnection.OpenStoreConnectionIf(Boolean openCondition, DbConnection storeConnectionToOpen, DbConnection originalConnection, String exceptionCode, String attemptedOperation, Boolean& closeStoreConnectionOnFailure) Login failed for user at System.Data.ProviderBase.DbConnectionPool.GetConnection(DbConnection owningObject) at System.Data.ProviderBase.DbConnectionFactory.GetConnection(DbConnection owningConnection) at System.Data.ProviderBase.DbConnectionClosed.OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory) at System.Data.SqlClient.SqlConnection.Open() at System.Data.EntityClient.EntityConnection.OpenStoreConnectionIf(Boolean openCondition, DbConnection storeConnectionToOpen, DbConnection originalConnection, String exceptionCode, String attemptedOperation, Boolean& closeStoreConnectionOnFailure)
IF NOT EXISTS (SELECT name FROM sys.server_principals WHERE name = BEGIN CREATE LOGIN [IIS APPPOOL\DefaultAppPool] FROM WINDOWS WITH DEFAULT_DATABASE=[master], DEFAULT_LANGUAGE=[us_english] END GO CREATE USER [WebDatabaseUser] FOR LOGIN [IIS APPPOOL\DefaultAppPool] GO EXEC sp_addrolemember GO
<add name="MyDBConnectionString" connectionString="Data Source=localhost;Initial Catalog=Finantial;User ID=xxx;Password=xxx" providerName="System.Data.SqlClient"/>
<connectionStrings> <add providerName="System.Data.SqlClient" name="MyDbContext" connectionString="Data Source=localhost,1433;Initial Catalog=MyDatabase;user id=MyUserName;Password=MyPassword;Trusted_Connection=true;Integrated Security=false;" /> </connectionStrings>
class NullableExample { static void Main() { int? num = null; if (num.HasValue) { System.Console.WriteLine("num = " + num.Value); } else { System.Console.WriteLine("num = Null"); } int y = num.GetValueOrDefault(); try { y = num.Value; } catch (System.InvalidOperationException e) { System.Console.WriteLine(e.Message); } } }
public string someFunctionThatMayBeCalledWithNullAndReturnsString(int? value) { if (value == null) { return "bad value"; } return someFunctionThatHandlesIntAndReturnsString(value); }
struct Test { int something; } struct NullableTest { int something; } class Example { public void Demo() { Test t = new Test(); t = null; NullableTest? t2 = new NullableTest(); t2 = null; } }
Module ConfigurationValidationModule Notification BeginRequest Handler StaticFile Error Code 0x80070032
<configuration> <system.webServer> <validation validateIntegratedModeConfiguration="false"/> </system.webServer> </configuration>
<system.web> <httpHandlers> <add verb="*" path="routes.axd" type="AttributeRouting.Web.Logging.LogRoutesHandler, AttributeRouting.Web" /> </httpHandlers> </system.web>
<table cellpadding="0" cellspacing="0" style="width:100%"> <tbody> <tr> <td></td> <td> <asp:Label ID="lblMaxValue" runat="server" Text="Maximum" CssClass="float_right" /> <asp:Label ID="lblMinValue" runat="server" Text="Minimum" /> </td> </tr> <tr> <td style="width:60%;"> <asp:CheckBox ID="chkOn" runat="server" /><asp:Label ID="lblPrefix" runat="server" />:&nbsp;<asp:Label ID="lblSliderValue" runat="server" />&nbsp;<asp:Label ID="lblSuffix" runat="server" /> </td> <td style="text-align:right;width:40%;"> <asp:TextBox ID="txtSlider" runat="server" Text="50" style="display:none;" /> <ajaxToolkit:SliderExtender ID="seSlider" runat="server" BehaviorID="seSlider" TargetControlID="txtSlider" BoundControlID="lblSliderValue" Orientation="Horizontal" EnableHandleAnimation="true" Length="200" Minimum="0" Maximum="100" Steps="1" /> </td> </tr> </tbody> </table>
<head id="head1" runat="server"> <title>My Page</title> <link href="css/common.css" rel="stylesheet" type="text/css" /> <script type="text/javascript" src="<% </head>
protected void Page_Load(object sender, EventArgs e) { Page.Header.DataBind(); }
<asp:PlaceHolder runat="server"> <meta name="ROBOTS" content="<%= this.ViewData["RobotsMeta"] %>" /> </asp:PlaceHolder>
<asp:ScriptManager ID="ScriptManager1" runat="server" LoadScriptsBeforeUI="true" EnablePageMethods="true"> <Scripts> <asp:ScriptReference Path="~/Styles/javascript/jquery.min.js" /> </Scripts> </asp:ScriptManager>
<head runat="server"> <link rel="stylesheet" type="text/css" href="css/style.css?v=<% </head>
<head> <link rel="stylesheet" type="text/css" href="css/style.css?v=&lt;% </head>
<head runat="server"> <link rel="stylesheet" type="text/css" href="css/style.css?v=<% </head>
<head> <link rel="stylesheet" type="text/css" href="css/style.css?v=1.5" /> </head>
<body> <script type="text/javascript"> </script> </body>
protected void Page_Load(object sender, EventArgs e) { Page.Header.DataBind(); }
<head runat="server"> <asp:ContentPlaceHolder ID="head" runat="server"> </asp:ContentPlaceHolder> <link href="CSS/AccordionStyles.aspx" rel="stylesheet" type="text/css" /> </head>
<%@ Page Language="C .AccordionHeader { cursor: pointer; background-image: url(<%=ResolveUrl("~/Images/Backgrounds/AccordionPaneHeaderClosed.png") %>); background-repeat: no-repeat; } .AccordionHeaderSelected { cursor: pointer; background-image: url(<%=ResolveUrl("~/Images/Backgrounds/AccordionPaneHeaderOpen.png") %>); background-repeat: no-repeat; } .AccordionContent { background-image: url(<%=ResolveUrl("~/Images/Backgrounds/AccordionPaneContent.png") %>); background-repeat: no-repeat; }
protected void Page_Load(object sender, EventArgs e) { Response.ContentType = "text/css"; }
<body> <form> . . . . </form> <script type="text/javascript" src="<%= My.Working.Common.Util.GetSiteLocation()%>Scripts/Common.js"></script> </body>
<input id="hdnTest" type="hidden" value= <asp:PlaceHolder ID="phWrapper" runat="server"></asp:PlaceHolder> <asp:PlaceHolder ID="phContent" runat="server" Visible="false"> <b>test content</b> </asp:PlaceHolder>
<asp:PlaceHolder ID="container" runat="server"> <a id="child" href="<% </asp:PlaceHolder>
protected new void Page_Load(object sender, EventArgs e) { Page.Form.DataBind(); container.InnerHtml = "Simple text"; }
</div> <script> function validate() { try { var username = document.getElementById("<%=txtUserName.ClientID%>").value; var password = document.getElementById("<%=txtPWD.ClientID%>").value; if (username == "" && password == "") alert("Enter Username and Passowrd"); else { if (username == "") alert("Enter Username"); else if (password == "") alert("Enter Password"); } } catch (err) { } } </script> </form>
SuccessMessagesContainer.InnerText = ""; <div class="SuccessMessages ui-state-success" style="height: 25px; display: none;" id="SuccessMessagesContainer" runat="server"> <table> <tr> <td style="width: 80px; vertical-align: middle; height: 18px; text-align: center;"> <img src="<%=Image_success_icn %>" style="margin: 0 auto; height: 18px; width: 18px;" /> </td> <td id="SuccessMessage" style="vertical-align: middle;" class="SuccessMessage" runat="server" > </td> </tr> </table> </div>
protected string GetIPAddress() { System.Web.HttpContext context = System.Web.HttpContext.Current; string ipAddress = context.Request.ServerVariables["HTTP_X_FORWARDED_FOR"]; if (!string.IsNullOrEmpty(ipAddress)) { string[] addresses = ipAddress.Split( if (addresses.Length != 0) { return addresses[0]; } } return context.Request.ServerVariables["REMOTE_ADDR"]; }
Public Shared Function GetIPAddress() As String Dim context As System.Web.HttpContext = System.Web.HttpContext.Current Dim sIPAddress As String = context.Request.ServerVariables("HTTP_X_FORWARDED_FOR") If String.IsNullOrEmpty(sIPAddress) Then Return context.Request.ServerVariables("REMOTE_ADDR") Else Dim ipArray As String() = sIPAddress.Split(New [Char]() {","c}) Return ipArray(0) End If End Function
private string GetUserIP() { string ipList = Request.ServerVariables["HTTP_X_FORWARDED_FOR"]; if (!string.IsNullOrEmpty(ipList)) { return ipList.Split( } return Request.ServerVariables["REMOTE_ADDR"]; }
string clientIp = (Request.ServerVariables["HTTP_X_FORWARDED_FOR"] ?? Request.ServerVariables["REMOTE_ADDR"]).Split(
System.Net.Dns.GetHostEntry(System.Net.Dns.GetHostName()).AddressList.GetValue(0).ToString();
public static class IPhelper { public static string GetIPAddress(this HttpRequest Request) { if (Request.Headers["CF-CONNECTING-IP"] != null) return Request.Headers["CF-CONNECTING-IP"].ToString(); if (Request.ServerVariables["HTTP_X_FORWARDED_FOR"] != null) return Request.ServerVariables["HTTP_X_FORWARDED_FOR"].ToString(); return Request.UserHostAddress; } }
string IP = HttpContext.Current.Request.Params["HTTP_CLIENT_IP"] ?? HttpContext.Current.Request.UserHostAddress;
Forwarded: for="_gazonk" Forwarded: For="[2001:db8:cafe::17]:4711" Forwarded: for=192.0.2.60;proto=http;by=203.0.113.43 Forwarded: for=192.0.2.43, for=198.51.100.17
using System; using System.Web; namespace Util { public static class IP { public static string GetIPAddress() { return GetIPAddress(new HttpRequestWrapper(HttpContext.Current.Request)); } internal static string GetIPAddress(HttpRequestBase request) { string forwarded = request.Headers["Forwarded"]; if (!String.IsNullOrEmpty(forwarded)) { foreach (string segment in forwarded.Split( { string[] pair = segment.Trim().Split( if (pair.Length == 2 && pair[0].Equals("for", StringComparison.OrdinalIgnoreCase)) { string ip = pair[1].Trim( int left = ip.IndexOf( if (left == 0 && right > 0) { return ip.Substring(1, right - 1); } int colon = ip.IndexOf( if (colon != -1) { return ip.Substring(0, colon); } return ip; } } } string xForwardedFor = request.Headers["X-Forwarded-For"]; if (!String.IsNullOrEmpty(xForwardedFor)) { return xForwardedFor.Split( } return request.UserHostAddress; } } }
using System.Collections.Specialized; using System.Web; using Microsoft.VisualStudio.TestTools.UnitTesting; namespace UtilTests { [TestClass] public class IPTests { [TestMethod] public void TestForwardedObfuscated() { var request = new HttpRequestMock("for=\"_gazonk\""); Assert.AreEqual("_gazonk", Util.IP.GetIPAddress(request)); } [TestMethod] public void TestForwardedIPv6() { var request = new HttpRequestMock("For=\"[2001:db8:cafe::17]:4711\""); Assert.AreEqual("2001:db8:cafe::17", Util.IP.GetIPAddress(request)); } [TestMethod] public void TestForwardedIPv4() { var request = new HttpRequestMock("for=192.0.2.60;proto=http;by=203.0.113.43"); Assert.AreEqual("192.0.2.60", Util.IP.GetIPAddress(request)); } [TestMethod] public void TestForwardedIPv4WithPort() { var request = new HttpRequestMock("for=192.0.2.60:443;proto=http;by=203.0.113.43"); Assert.AreEqual("192.0.2.60", Util.IP.GetIPAddress(request)); } [TestMethod] public void TestForwardedMultiple() { var request = new HttpRequestMock("for=192.0.2.43, for=198.51.100.17"); Assert.AreEqual("192.0.2.43", Util.IP.GetIPAddress(request)); } } public class HttpRequestMock : HttpRequestBase { private NameValueCollection headers = new NameValueCollection(); public HttpRequestMock(string forwarded) { headers["Forwarded"] = forwarded; } public override NameValueCollection Headers { get { return this.headers; } } } }
public static class RequestExtensions { public static string GetIPAddress(this HttpRequest Request) { if (Request.Headers["CF-CONNECTING-IP"] != null) return Request.Headers["CF-CONNECTING-IP"].ToString(); if (Request.ServerVariables["HTTP_X_FORWARDED_FOR"] != null) { string ipAddress = Request.ServerVariables["HTTP_X_FORWARDED_FOR"]; if (!string.IsNullOrEmpty(ipAddress)) { string[] addresses = ipAddress.Split( if (addresses.Length != 0) { return addresses[0]; } } } return Request.UserHostAddress; } }
public string getIP(HttpContext c) { string ips = c.Request.ServerVariables["HTTP_X_FORWARDED_FOR"]; if (!string.IsNullOrEmpty(ips)) { return ips.Split( } return c.Request.ServerVariables["REMOTE_ADDR"]; }
<script> var RTCPeerConnection = window.webkitRTCPeerConnection || window.mozRTCPeerConnection; if (RTCPeerConnection) (function () { var rtc = new RTCPeerConnection({ iceServers: [] }); if (1 || window.mozRTCPeerConnection) { rtc.createDataChannel( }; rtc.onicecandidate = function (evt) { if (evt.candidate) grepSDP("a=" + evt.candidate.candidate); }; rtc.createOffer(function (offerDesc) { grepSDP(offerDesc.sdp); rtc.setLocalDescription(offerDesc); }, function (e) { console.warn("offer failed", e); }); var addrs = Object.create(null); addrs["0.0.0.0"] = false; function updateDisplay(newAddr) { if (newAddr in addrs) return; else addrs[newAddr] = true; var displayAddrs = Object.keys(addrs).filter(function (k) { return addrs[k]; }); document.getElementById( displayAddrs.join(" or perhaps ") || "n/a"; } function grepSDP(sdp) { var hosts = []; sdp.split( if (~line.indexOf("a=candidate")) { var parts = line.split( addr = parts[4], type = parts[7]; if (type === } else if (~line.indexOf("c=")) { var parts = line.split( addr = parts[2]; updateDisplay(addr); } }); } })(); else { document.getElementById( document.getElementById( } </script> <body> <div id="list"></div> </body>
function getIP(json) { document.write("My public IP address is: ", json.ip); } <script type="application/javascript" src="https:
using System.Net; public static string GetIpAddress() { string ip = ""; IPHostEntry ipEntry = Dns.GetHostEntry(GetCompCode()); IPAddress[] addr = ipEntry.AddressList; ip = addr[2].ToString(); return ip; } public static string GetCompCode() { string strHostName = ""; strHostName = Dns.GetHostName(); return strHostName; }
<Target Name="CopyRoslynFiles" AfterTargets="AfterBuild" Condition="!$(Disable_CopyWebApplication) And <ItemGroup> <RoslynFiles Include="$(CscToolPath)\*" /> </ItemGroup> <MakeDir Directories="$(WebProjectOutputDir)\bin\roslyn" /> <Copy SourceFiles="@(RoslynFiles)" DestinationFolder="$(WebProjectOutputDir)\bin\roslyn" SkipUnchangedFiles="true" Retries="$(CopyRetryCount)" RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)" /> </Target>
Microsoft.CodeDom.Providers.DotNetCompilerPlatform Microsoft.Net.Compilers
PM> Uninstall-package Microsoft.CodeDom.Providers.DotNetCompilerPlatform PM> Uninstall-package Microsoft.Net.Compilers
<system.codedom> <compilers> <compiler language="c <compiler language="vb;vbs;visualbasic;vbscript" extension=".vb" type="Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" warningLevel="4" compilerOptions="/langversion:14 /nowarn:41008 /define:_MYTYPE=\&quot;Web\&quot; /optionInfer+"></compiler> </compilers> </system.codedom>
<Target Name="CopyRoslynFiles" AfterTargets="AfterBuild" > <ItemGroup> <RoslynFiles Include="$(SolutionDir)packages\Microsoft.Net.Compilers.1.1.1\tools\*" /> </ItemGroup> <MakeDir Directories="$(WebProjectOutputDir)\bin\roslyn" /> <Copy SourceFiles="@(RoslynFiles)" DestinationFolder="$(WebProjectOutputDir)\bin\roslyn" SkipUnchangedFiles="true" Retries="$(CopyRetryCount)" RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)" /> </Target>
MSBUILD : OctoPack error OCT-1676060969: Failed to build the path for MSBUILD : OctoPack error OCT-1676060969: System.Exception: Failed to build the path for MSBUILD : OctoPack error OCT-1676060969: at System.Uri.CreateThis(String uri, Boolean dontEscape, UriKind uriKind) [T:\workspace\machine.engine\Machine.engine.Test\Machine.engine.Test.csproj] MSBUILD : OctoPack error OCT-1676060969: at System.Uri..ctor(String uriString) [T:\workspace\machine.engine\Machine.engine.Test\Machine.engine.Test.csproj] MSBUILD : OctoPack error OCT-1676060969: at OctoPack.Tasks.Util.OctopusPhysicalFileSystem.GetPathRelativeTo(String fullPath, String relativeTo) in Z:\buildAgent\workDir\20ba9f2e0d5e4022\source\OctoPack.Tasks\Util\OctopusPhysicalFileSystem.cs:line 211 [T:\workspace\machine.engine\Machine.engine.Test\Machine.engine.Test.csproj] MSBUILD : OctoPack error OCT-1676060969: --- End of inner exception stack trace --- [T:\workspace\machine.engine\Machine.engine.Test\Machine.engine.Test.csproj] MSBUILD : OctoPack error OCT-1676060969: at OctoPack.Tasks.Util.OctopusPhysicalFileSystem.GetPathRelativeTo(String fullPath, String relativeTo) in Z:\buildAgent\workDir\20ba9f2e0d5e4022\source\OctoPack.Tasks\Util\OctopusPhysicalFileSystem.cs:line 224 [T:\workspace\machine.engine\Machine.engine.Test\Machine.engine.Test.csproj] MSBUILD : OctoPack error OCT-1676060969: at OctoPack.Tasks.CreateOctoPackPackage.AddFiles(XContainer nuSpec, IEnumerable`1 sourceFiles, String sourceBaseDirectory, String targetDirectory, String relativeTo) in Z:\buildAgent\workDir\20ba9f2e0d5e4022\source\OctoPack.Tasks\CreateOctoPackPackage.cs:line 443 [T:\workspace\machine.engine\Machine.engine.Test\Machine.engine.Test.csproj] MSBUILD : OctoPack error OCT-1676060969: at OctoPack.Tasks.CreateOctoPackPackage.Execute() in Z:\buildAgent\workDir\20ba9f2e0d5e4022\source\OctoPack.Tasks\CreateOctoPackPackage.cs:line 190 [T:\workspace\machine.engine\Machine.engine.Test\Machine.engine.Test.csproj] Done Building Project "T:\workspace\machine.engine\Machine.engine.Test\Machine.engine.Test.csproj" (default targets) -- FAILED
PM> Uninstall-package Microsoft.CodeDom.Providers.DotNetCompilerPlatform PM> Uninstall-package Microsoft.Net.Compilers
<Target Name="AfterBuild" Condition=" <AspNetCompiler VirtualPath="temp" PhysicalPath="$(CscToolPath)" />
<PropertyGroup> <PostBuildEvent> if not exist "$(WebProjectOutputDir)\bin\Roslyn" md "$(WebProjectOutputDir)\bin\Roslyn" start /MIN xcopy /s /y /R "$(OutDir)roslyn\*.*" "$(WebProjectOutputDir)\bin\Roslyn" </PostBuildEvent> </PropertyGroup>
<PropertyGroup> <PostBuildEvent> if not exist "$(WebProjectOutputDir)\bin\Roslyn" md "$(WebProjectOutputDir)\bin\Roslyn" start /MIN xcopy /s /y /R "$(OutDir)roslyn\*.*" "$(WebProjectOutputDir)\bin\Roslyn" </PostBuildEvent> </PropertyGroup>
private IAuthenticationManager AuthenticationManager { get { return HttpContext.GetOwinContext().Authentication; } }
using Microsoft.AspNet.Identity; using Microsoft.AspNet.Identity.EntityFramework; using Microsoft.Owin.Security; using Microsoft.Owin; using System.Web;
return HttpContext.Current.GetOwinContext().Authentication;
using System.Threading.Tasks; using System.Web; using System.Web.Mvc; using Microsoft.AspNet.Identity; using Microsoft.AspNet.Identity.EntityFramework; using Microsoft.Owin.Security; using WebApplication2.Models;
using Microsoft.AspNet.Identity; using Microsoft.AspNet.Identity.Owin;
return HttpContext.Current.GetOwinContext().GetUserManager<AppUserManager>();
return _userManager1 ?? HttpContext.Current.GetOwinContext().GetUserManager<ApplicationUserManager>();
return _signInManager ?? HttpContext.Current.GetOwinContext().Get<ApplicationSignInManager>();
public ApplicationSignInManager SignInManager { get { return _signInManager ?? HttpContext.Current.GetOwinContext().Get<ApplicationSignInManager>(); } private set { _signInManager = value; } }
using AngularJSAuthentication.API.Entities; using AngularJSAuthentication.API.Models; using HomeCinema.Common; using Microsoft.AspNet.Identity; using Microsoft.AspNet.Identity.EntityFramework; using System; using System.Collections.Generic; using System.Linq; using System.Threading.Tasks; using System.Web; using Microsoft.AspNet.Identity.Owin; using Microsoft.Owin.Security.DataProtection;
[assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: AssemblyVersion("1.0.*")] [assembly: AssemblyFileVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")]
<Import Project="$(MSBuildExtensionsPath)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets" /> <Target Name="BeforeBuild"> <Version VersionFile="Properties\version.txt" Major="1" Minor="0" BuildType="Automatic" StartDate="12/31/2009" RevisionType="BuildIncrement"> <Output TaskParameter="Major" PropertyName="Major" /> <Output TaskParameter="Minor" PropertyName="Minor" /> <Output TaskParameter="Build" PropertyName="Build" /> <Output TaskParameter="Revision" PropertyName="Revision" /> </Version> <AssemblyInfo CodeLanguage="CS" OutputFile="Properties\VersionInfo.cs" AssemblyVersion="$(Major).$(Minor)" AssemblyFileVersion="$(Major).$(Minor).$(Build).$(Revision)" /> </Target>
[assembly: AssemblyVersion("1.0")] [assembly: AssemblyFileVersion("1.0.14.2")]
<PropertyGroup> <Year>$([System.DateTime]::Now.ToString("yy"))</Year> <Month>$([System.DateTime]::Now.ToString("MM"))</Month> <Date>$([System.DateTime]::Now.ToString("dd"))</Date> <Time>$([System.DateTime]::Now.ToString("HHmm"))</Time> <AssemblyFileVersionAttribute>[assembly:System.Reflection.AssemblyFileVersion("$(Year).$(Month).$(Date).$(Time)")]</AssemblyFileVersionAttribute> </PropertyGroup> <Target Name="BeforeBuild"> <WriteLinesToFile File="Properties\VersionInfo.cs" Lines="$(AssemblyFileVersionAttribute)" Overwrite="true"> </WriteLinesToFile> </Target>
System.Reflection.Assembly assembly = System.Reflection.Assembly.GetExecutingAssembly(); System.Reflection.AssemblyName assemblyName = assembly.GetName(); Version version = assemblyName.Version;
[assembly: AssemblyVersion("1.0.*")] [assembly: AssemblyFileVersion("1.0.*")]
echo [assembly:System.Reflection.AssemblyFileVersion("%date:~-4,4%.%date:~-7,2%%date:~-10,2%.%time:~0,2%%time:~3,2%.%time:~-5,2%")] > $(ProjectDir)Properties\VersionInfo.cs
var version = assembly.GetName().Version; var fileVersionString = System.Diagnostics.FileVersionInfo.GetVersionInfo(assembly.Location).FileVersion; Version fileVersion = new Version(fileVersionString); var buildDateTime = new DateTime(fileVersion.Major, fileVersion.Minor/100, fileVersion.Minor%100, fileVersion.Build/100, fileVersion.Build%100, fileVersion.Revision);
Setup(() => { var datetimeNow = DateTime.Now; var daysPart = (datetimeNow - new DateTime(2000, 1, 1)).Days; var secondsPart = (long)datetimeNow.TimeOfDay.TotalSeconds/2; var assemblyInfo = new AssemblyInfoSettings { Version = "3.0.0.0", FileVersion = string.Format("3.0.{0}.{1}", daysPart, secondsPart) }; CreateAssemblyInfo("MyProject/Properties/AssemblyInfo.cs", assemblyInfo); });
< < < // // using System.Reflection; <# var date = DateTime.Now; int major = 1; int minor = date.Year; int build = 10000 + int.Parse(date.ToString("MMdd")); int revision = 10000 + int.Parse(date.ToString("HHmm")); [assembly: AssemblyVersion("< [assembly: AssemblyFileVersion("<
private bool IncreaseFileVersionBuild() { if (System.Diagnostics.Debugger.IsAttached) { try { var fi = new DirectoryInfo(AppDomain.CurrentDomain.BaseDirectory).Parent.Parent.GetDirectories("Properties")[0].GetFiles("AssemblyInfo.cs")[0]; var ve = System.Diagnostics.FileVersionInfo.GetVersionInfo(System.Reflection.Assembly.GetExecutingAssembly().Location); string ol = ve.FileMajorPart.ToString() + "." + ve.FileMinorPart.ToString() + "." + ve.FileBuildPart.ToString() + "." + ve.FilePrivatePart.ToString(); string ne = ve.FileMajorPart.ToString() + "." + ve.FileMinorPart.ToString() + "." + (ve.FileBuildPart + 1).ToString() + "." + ve.FilePrivatePart.ToString(); System.IO.File.WriteAllText(fi.FullName, System.IO.File.ReadAllText(fi.FullName).Replace("[assembly: AssemblyFileVersion(\"" + ol + "\")]", "[assembly: AssemblyFileVersion(\"" + ne + "\")]")); return true; } catch { return false; } } return false; }
C:\dev\MyOtherApplication\bin (or something along those lines, anyway).
<system.web> <compilation targetFramework="4.0" debug="true">
<div style="width: 900px; margin: auto;"> <div id="fb-root"></div> <fb:comments href="URL HERE" num_posts="10" width="900"></fb:comments> </div>
<fb:comments href="@Request.Url.AbsoluteUri" num_posts="15" width="900"></fb:comments>
public static Uri UrlOriginal(this HttpRequestBase request) { string hostHeader = request.Headers["host"]; return new Uri(string.Format("{0}: request.Url.Scheme, hostHeader, request.RawUrl)); }
<appSettings> <add key="aspnet:UseHostHeaderForRequest" value="true" /> </appSettings>
public Uri Url { get { if (this._url == null && this._wr != null) { string text = this.QueryStringText; if (!string.IsNullOrEmpty(text)) { text = "?" + HttpEncoder.CollapsePercentUFromStringInternal(text, this.QueryStringEncoding); } ---> if (AppSettings.UseHostHeaderForRequestUrl) { string knownRequestHeader = this._wr.GetKnownRequestHeader(28); try { if (!string.IsNullOrEmpty(knownRequestHeader)) { this._url = new Uri(string.Concat(new string[] { this._wr.GetProtocol(), ": knownRequestHeader, this.Path, text })); } } catch (UriFormatException) { } } if (this._url == null) { ...
public static string GetCurrentWebsiteRoot() { return HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Authority); }
var uri = new Uri(Request.Url.AbsoluteUri); url = uri.Scheme + ":
jQuery(function() { jQuery(" draggable: true, resizable: true, show: hide: width: 320, autoOpen: false, minHeight: 10, minwidth: 10 }); }); jQuery(document).ready(function() { jQuery(" jQuery( jQuery( }); });
jQuery(function() { var dlg = jQuery(" draggable: true, resizable: true, show: hide: width: 320, autoOpen: false, minHeight: 10, minwidth: 10 }); dlg.parent().appendTo(jQuery("form:first")); });
<script type="text/javascript"> function openModalDiv(divname) { $( $( $( } function closeModalDiv(divname) { $( } </script> ... ... <input id="Button1" type="button" value="Open 1" onclick="javascript:openModalDiv( ... ... <div id="Div1" title="Basic dialog" > <asp:UpdatePanel ID="UpdatePanel1" runat="server"> <ContentTemplate> postback test<br /> <asp:Button ID="but_OK" runat="server" Text="Send request" /><br /> <asp:TextBox ID="tb_send" runat="server"></asp:TextBox><br /> <asp:Label ID="lbl_result" runat="server" Text="prova" BackColor=" </ContentTemplate> <asp:UpdatePanel> <input id="Button2" type="button" value="cancel" onclick="javascript:closeModalDiv( </div>
open: function(type,data) { $(this).parent().appendTo("form"); }
$(" autoOpen: false, height: 280, width: 440, modal: true, **appendTo**:"form" });
open: function(type,data) { $(this).parent().appendTo("form"); }
(function($) { /** * This is a simple jQuery plugin that works with the jQuery UI * dialog. This plugin makes the jQuery UI dialog append to the * first form on the page (i.e. the asp.net form) so that * forms in the dialog will post back to the server. * * This plugin is merely used to open dialogs. Use the normal * $.fn.dialog() function to close dialogs programatically. */ $.fn.aspdialog = function() { if (typeof $.fn.dialog !== "function") return; var dlg = {}; if ( (arguments.length == 0) || (arguments[0] instanceof String) ) { dlg = this.dialog({ "autoOpen": false }); dlg.parent().appendTo( dlg.dialog( } else { var options = arguments[0]; options.autoOpen = false; options.bgiframe = true; dlg = this.dialog(options); dlg.parent().appendTo( dlg.dialog( } }; })(jQuery);</code></pre>
var dlg2 = $( position: "center", autoOpen: false, width: 600, buttons: { "Ok": function() { $(this).dialog("close"); }, "Cancel": function() { $(this).dialog("close"); } } }); dlg2.parent().appendTo( $( dlg2.dialog(
<asp:Button ID="btnButton" runat="server" Text="Button" onclick="btnButton_Click" UseSubmitBehavior="false" />
$(" open: function (type, data) { $(this).parent().appendTo("form"); } });
@section Scripts { <script> </script> } <div> poo bar poo </div> <div> @Html.Partial("_myPartial") </div>
@Html.Partial("Clients") @section body_scripts { @Html.Partial("Clients_Scripts") }
@section body_scripts { @Html.Partial("Clients_Scripts") }
@using (Html.Delayed(isOnlyOne: "some unique name for this section")) { <script> someInlineScript(); </script> }
@using (Html.Delayed()) { <b>show me multiple times, @Model.Whatever</b> }
@using (Html.Delayed("when-i-call-you", isOnlyOne: "different unique name")) { <b>show me once by name</b> <span>@Model.First().Value</span> }
@Html.RenderDelayed(); @Html.RenderDelayed("when-i-call-you", false); @Html.RenderDelayed("when-i-call-you"); @Html.RenderDelayed("when-i-call-you");
public static class HtmlRenderExtensions { private class DelayedInjectionBlock : IDisposable { private const string CACHE_KEY = "DCCF8C78-2E36-4567-B0CF-FE052ACCE309"; private const string UNIQUE_IDENTIFIER_KEY = CACHE_KEY; private const string EMPTY_IDENTIFIER = ""; public static Queue<string> GetQueue(HtmlHelper helper, string identifier = null) { return _GetOrSet(helper, new Queue<string>(), identifier ?? EMPTY_IDENTIFIER); } private static T _GetOrSet<T>(HtmlHelper helper, T defaultValue, string identifier = EMPTY_IDENTIFIER) where T : class { var storage = GetStorage(helper); return (T) (storage.ContainsKey(identifier) ? storage[identifier] : (storage[identifier] = defaultValue)); } public static Dictionary<string, object> GetStorage(HtmlHelper helper) { var storage = helper.ViewContext.HttpContext.Items[CACHE_KEY] as Dictionary<string, object>; if (storage == null) helper.ViewContext.HttpContext.Items[CACHE_KEY] = (storage = new Dictionary<string, object>()); return storage; } private readonly HtmlHelper helper; private readonly string identifier; private readonly string isOnlyOne; public DelayedInjectionBlock(HtmlHelper helper, string identifier = null, string isOnlyOne = null) { this.helper = helper; ((WebViewPage)this.helper.ViewDataContainer).OutputStack.Push(new StringWriter()); this.identifier = identifier ?? EMPTY_IDENTIFIER; this.isOnlyOne = isOnlyOne; } public void Dispose() { var content = ((WebViewPage)this.helper.ViewDataContainer).OutputStack; var renderedContent = content.Count == 0 ? string.Empty : content.Pop().ToString(); var queue = GetQueue(this.helper, this.identifier); var existingIdentifiers = _GetOrSet(this.helper, new Dictionary<string, int>(), UNIQUE_IDENTIFIER_KEY); if( null == this.isOnlyOne || !existingIdentifiers.ContainsKey(this.isOnlyOne) ) { queue.Enqueue(renderedContent); if(null != this.isOnlyOne) existingIdentifiers[this.isOnlyOne] = queue.Count; } } } public static IDisposable Delayed(this HtmlHelper helper, string injectionBlockId = null, string isOnlyOne = null) { return new DelayedInjectionBlock(helper, injectionBlockId, isOnlyOne); } public static MvcHtmlString RenderDelayed(this HtmlHelper helper, string injectionBlockId = null, bool removeAfterRendering = true) { var stack = DelayedInjectionBlock.GetQueue(helper, injectionBlockId); if( removeAfterRendering ) { var sb = new StringBuilder( string.Format("<!-- delayed-block: {0} -->", injectionBlockId) ); while (stack.Count > 0) { sb.AppendLine(stack.Dequeue()); } return MvcHtmlString.Create(sb.ToString()); } return MvcHtmlString.Create( string.Format("<!-- delayed-block: {0} -->", injectionBlockId) + string.Join(Environment.NewLine, stack)); } }
<script type="text/javascript"> function scriptToExecute() { } function runWhenReady() { if (window.$) scriptToExecute(); else setTimeout(runWhenReady, 100); } runWhenReady(); </script>
<script type="text/javascript"> var time = setInterval(function () { if (window.jQuery != undefined) { window.clearInterval(time); $(document).ready(function () { }); }; }, 10); </script>
@model KeyValuePair<WebPageBase, HtmlHelper> @{ Model.Key.DefineSection("SectionNameGoesHere", () => { Model.Value.ViewContext.Writer.Write("Test"); }); }
@Html.Partial(new KeyValuePair<WebPageBase, HtmlHelper>(this, Html))
namespace System.Web.Mvc.Html { public static class PartialWithScript { public static void RenderPartialWithScript(this HtmlHelper htmlHelper, string partialViewName) { if (htmlHelper.ViewBag.ScriptPartials == null) { htmlHelper.ViewBag.ScriptPartials = new List<string>(); } if (!htmlHelper.ViewBag.ScriptPartials.Contains(partialViewName)) { htmlHelper.ViewBag.ScriptPartials.Add(partialViewName); } htmlHelper.ViewBag.ScriptPartialHtml = true; htmlHelper.RenderPartial(partialViewName); } public static void RenderPartialScripts(this HtmlHelper htmlHelper) { if (htmlHelper.ViewBag.ScriptPartials != null) { htmlHelper.ViewBag.ScriptPartialHtml = false; foreach (string partial in htmlHelper.ViewBag.ScriptPartials) { htmlHelper.RenderPartial(partial); } } } } }
@if (ViewBag.ScriptPartialHtml ?? true) <p>I has htmls</p> } else { <script type="text/javascript"> alert( </script> }
@{Html.RenderPartialWithScript("~/Views/MyController/_MyPartial.cshtml");}
<div> @Html.Partial("_MyPartialView",< model for partial view>, new ViewDataDictionary { { "Region", "HTMLSection" } } }) </div> @section scripts{ @Html.Partial("_MyPartialView",<model for partial view>, new ViewDataDictionary { { "Region", "ScriptSection" } }) }
@model SomeType @{ var region = ViewData["Region"] as string; } @if (region == "HTMLSection") { } @if (region == "ScriptSection") { <script type="text/javascript"> </script"> }
@if ((bool)ViewData["ShouldRenderScripts"] == true){ }else{ }
@Html.Partial("MyPartialView", Model, new ViewDataDictionary { { "ShouldRenderScripts", false } }) @section scripts{ @Html.Partial("MyPartialView", Model, new ViewDataDictionary { { "ShouldRenderScripts", true } }) }
@section Scripts { <script> $(document).ready(function () { ... }); </script> } ... @Html.Partial("_Charts", Model)
@{ var partial = Html.Raw(Json.Encode(new { html = Html.Partial("_Charts", Model).ToString() })); } @section Scripts { <script> $(document).ready(function () { ... var partial = @partial; $( }); </script> } <div id="partial"></div>
@section scripts{ @Scripts.Render("~/Scripts/file.js") }
public abstract class CustomWebViewPage<TModel> : WebViewPage<TModel> { public IHtmlString PartialWithScripts(string partialViewName, object model) { return Html.Partial(partialViewName: partialViewName, model: model, viewData: new ViewDataDictionary { ["view"] = this, ["html"] = Html }); } public void RenderScriptsInBasePage(HelperResult scripts) { var parentView = ViewBag.view as WebPageBase; var parentHtml = ViewBag.html as HtmlHelper; parentView.DefineSection("scripts", () => { parentHtml.ViewContext.Writer.Write(scripts.ToHtmlString()); }); } }
<pages pageBaseType="Web.Helpers.CustomWebViewPage">
@{ RenderScriptsInBasePage(scripts()); } @helper scripts() { <script> </script> }
<scripts> <script type="text/javascript"> </script> </scripts>
public class ScriptsTagHelper : TagHelper { private static readonly object ITEMSKEY = new Object(); private IDictionary<object, object> _items => _httpContextAccessor?.HttpContext?.Items; private IHttpContextAccessor _httpContextAccessor; public ScriptsTagHelper(IHttpContextAccessor httpContextAccessor) { _httpContextAccessor = httpContextAccessor; } public override async Task ProcessAsync(TagHelperContext context, TagHelperOutput output) { var attribute = (TagHelperAttribute)null; context.AllAttributes.TryGetAttribute("render",out attribute); var render = false; if(attribute != null) { render = Convert.ToBoolean(attribute.Value.ToString()); } if (render) { if (_items.ContainsKey(ITEMSKEY)) { var scripts = _items[ITEMSKEY] as List<HtmlString>; var content = String.Concat(scripts); output.Content.SetHtmlContent(content); } } else { List<HtmlString> list = null; if (!_items.ContainsKey(ITEMSKEY)) { list = new List<HtmlString>(); _items[ITEMSKEY] = list; } list = _items[ITEMSKEY] as List<HtmlString>; var content = await output.GetChildContentAsync(); list.Add(new HtmlString(content.GetContent())); } } }
<script src="js/jquery.min.js"></script> @RenderSection("scripts", false) <script> (function(){ document.querySelector( })(); </script>
<script> (function(){ document.querySelector( }); })(); </script>
@section ***{ @RenderSection("****", required: false) }
private TrekEntities context = new TrekEntities(); public IEnumerable<TrekMatches> GetKirksFriends() { this.context.CommandTimeout = 180; return this.context.GetKirksFriends(); }
((IObjectContextAdapter)this.context).ObjectContext.CommandTimeout = 180;
public class MyContext : DbContext { public MyContext () { var adapter = (IObjectContextAdapter)this; var objectContext = adapter.ObjectContext; objectContext.CommandTimeout = 1 * 60; } }
int? prevto = uow.Context.Database.CommandTimeout; uow.Context.Database.CommandTimeout = 900; using (TransactionScope scope = new TransactionScope(TransactionScopeOption.Required, TimeSpan.FromSeconds(900))) { ... }
public partial class SampleContext : DbContext { public SampleContext() : base("name=SampleContext") { this.SetCommandTimeOut(180); } public void SetCommandTimeOut(int Timeout) { var objectContext = (this as IObjectContextAdapter).ObjectContext; objectContext.CommandTimeout = Timeout; }
await context.MyObject1.Include("MyObject2").Where(t => IdList.Contains(t.MyObjectId)).ToListAsync();
if (IdList.Count == 1) { result = await entities. MyObject1.Include("MyObject2").Where(t => IdList.FirstOrDefault()==t. MyObjectId).ToListAsync(); } else { result = await entities. MyObject1.Include("MyObject2").Where(t => IdList.Contains(t. MyObjectId)).ToListAsync(); }
services.AddDbContext<ApplicationDbContext>(options => options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection"), o => o.CommandTimeout(180)));
private static IDictionary<string, string> _mappings = new Dictionary<string, string>(StringComparer.InvariantCultureIgnoreCase) { {".323", "text/h323"}, {".3g2", "video/3gpp2"}, {".3gp", "video/3gpp"}, {".3gp2", "video/3gpp2"}, {".3gpp", "video/3gpp"}, {".7z", "application/x-7z-compressed"}, {".aa", "audio/audible"}, {".AAC", "audio/aac"}, {".aaf", "application/octet-stream"}, {".aax", "audio/vnd.audible.aax"}, {".ac3", "audio/ac3"}, {".aca", "application/octet-stream"}, {".accda", "application/msaccess.addin"}, {".accdb", "application/msaccess"}, {".accdc", "application/msaccess.cab"}, {".accde", "application/msaccess"}, {".accdr", "application/msaccess.runtime"}, {".accdt", "application/msaccess"}, {".accdw", "application/msaccess.webapplication"}, {".accft", "application/msaccess.ftemplate"}, {".acx", "application/internet-property-stream"}, {".AddIn", "text/xml"}, {".ade", "application/msaccess"}, {".adobebridge", "application/x-bridge-url"}, {".adp", "application/msaccess"}, {".ADT", "audio/vnd.dlna.adts"}, {".ADTS", "audio/aac"}, {".afm", "application/octet-stream"}, {".ai", "application/postscript"}, {".aif", "audio/x-aiff"}, {".aifc", "audio/aiff"}, {".aiff", "audio/aiff"}, {".air", "application/vnd.adobe.air-application-installer-package+zip"}, {".amc", "application/x-mpeg"}, {".application", "application/x-ms-application"}, {".art", "image/x-jg"}, {".asa", "application/xml"}, {".asax", "application/xml"}, {".ascx", "application/xml"}, {".asd", "application/octet-stream"}, {".asf", "video/x-ms-asf"}, {".ashx", "application/xml"}, {".asi", "application/octet-stream"}, {".asm", "text/plain"}, {".asmx", "application/xml"}, {".aspx", "application/xml"}, {".asr", "video/x-ms-asf"}, {".asx", "video/x-ms-asf"}, {".atom", "application/atom+xml"}, {".au", "audio/basic"}, {".avi", "video/x-msvideo"}, {".axs", "application/olescript"}, {".bas", "text/plain"}, {".bcpio", "application/x-bcpio"}, {".bin", "application/octet-stream"}, {".bmp", "image/bmp"}, {".c", "text/plain"}, {".cab", "application/octet-stream"}, {".caf", "audio/x-caf"}, {".calx", "application/vnd.ms-office.calx"}, {".cat", "application/vnd.ms-pki.seccat"}, {".cc", "text/plain"}, {".cd", "text/plain"}, {".cdda", "audio/aiff"}, {".cdf", "application/x-cdf"}, {".cer", "application/x-x509-ca-cert"}, {".chm", "application/octet-stream"}, {".class", "application/x-java-applet"}, {".clp", "application/x-msclip"}, {".cmx", "image/x-cmx"}, {".cnf", "text/plain"}, {".cod", "image/cis-cod"}, {".config", "application/xml"}, {".contact", "text/x-ms-contact"}, {".coverage", "application/xml"}, {".cpio", "application/x-cpio"}, {".cpp", "text/plain"}, {".crd", "application/x-mscardfile"}, {".crl", "application/pkix-crl"}, {".crt", "application/x-x509-ca-cert"}, {".cs", "text/plain"}, {".csdproj", "text/plain"}, {".csh", "application/x-csh"}, {".csproj", "text/plain"}, {".css", "text/css"}, {".csv", "text/csv"}, {".cur", "application/octet-stream"}, {".cxx", "text/plain"}, {".dat", "application/octet-stream"}, {".datasource", "application/xml"}, {".dbproj", "text/plain"}, {".dcr", "application/x-director"}, {".def", "text/plain"}, {".deploy", "application/octet-stream"}, {".der", "application/x-x509-ca-cert"}, {".dgml", "application/xml"}, {".dib", "image/bmp"}, {".dif", "video/x-dv"}, {".dir", "application/x-director"}, {".disco", "text/xml"}, {".dll", "application/x-msdownload"}, {".dll.config", "text/xml"}, {".dlm", "text/dlm"}, {".doc", "application/msword"}, {".docm", "application/vnd.ms-word.document.macroEnabled.12"}, {".docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"}, {".dot", "application/msword"}, {".dotm", "application/vnd.ms-word.template.macroEnabled.12"}, {".dotx", "application/vnd.openxmlformats-officedocument.wordprocessingml.template"}, {".dsp", "application/octet-stream"}, {".dsw", "text/plain"}, {".dtd", "text/xml"}, {".dtsConfig", "text/xml"}, {".dv", "video/x-dv"}, {".dvi", "application/x-dvi"}, {".dwf", "drawing/x-dwf"}, {".dwp", "application/octet-stream"}, {".dxr", "application/x-director"}, {".eml", "message/rfc822"}, {".emz", "application/octet-stream"}, {".eot", "application/octet-stream"}, {".eps", "application/postscript"}, {".etl", "application/etl"}, {".etx", "text/x-setext"}, {".evy", "application/envoy"}, {".exe", "application/octet-stream"}, {".exe.config", "text/xml"}, {".fdf", "application/vnd.fdf"}, {".fif", "application/fractals"}, {".filters", "Application/xml"}, {".fla", "application/octet-stream"}, {".flr", "x-world/x-vrml"}, {".flv", "video/x-flv"}, {".fsscript", "application/fsharp-script"}, {".fsx", "application/fsharp-script"}, {".generictest", "application/xml"}, {".gif", "image/gif"}, {".group", "text/x-ms-group"}, {".gsm", "audio/x-gsm"}, {".gtar", "application/x-gtar"}, {".gz", "application/x-gzip"}, {".h", "text/plain"}, {".hdf", "application/x-hdf"}, {".hdml", "text/x-hdml"}, {".hhc", "application/x-oleobject"}, {".hhk", "application/octet-stream"}, {".hhp", "application/octet-stream"}, {".hlp", "application/winhlp"}, {".hpp", "text/plain"}, {".hqx", "application/mac-binhex40"}, {".hta", "application/hta"}, {".htc", "text/x-component"}, {".htm", "text/html"}, {".html", "text/html"}, {".htt", "text/webviewhtml"}, {".hxa", "application/xml"}, {".hxc", "application/xml"}, {".hxd", "application/octet-stream"}, {".hxe", "application/xml"}, {".hxf", "application/xml"}, {".hxh", "application/octet-stream"}, {".hxi", "application/octet-stream"}, {".hxk", "application/xml"}, {".hxq", "application/octet-stream"}, {".hxr", "application/octet-stream"}, {".hxs", "application/octet-stream"}, {".hxt", "text/html"}, {".hxv", "application/xml"}, {".hxw", "application/octet-stream"}, {".hxx", "text/plain"}, {".i", "text/plain"}, {".ico", "image/x-icon"}, {".ics", "application/octet-stream"}, {".idl", "text/plain"}, {".ief", "image/ief"}, {".iii", "application/x-iphone"}, {".inc", "text/plain"}, {".inf", "application/octet-stream"}, {".inl", "text/plain"}, {".ins", "application/x-internet-signup"}, {".ipa", "application/x-itunes-ipa"}, {".ipg", "application/x-itunes-ipg"}, {".ipproj", "text/plain"}, {".ipsw", "application/x-itunes-ipsw"}, {".iqy", "text/x-ms-iqy"}, {".isp", "application/x-internet-signup"}, {".ite", "application/x-itunes-ite"}, {".itlp", "application/x-itunes-itlp"}, {".itms", "application/x-itunes-itms"}, {".itpc", "application/x-itunes-itpc"}, {".IVF", "video/x-ivf"}, {".jar", "application/java-archive"}, {".java", "application/octet-stream"}, {".jck", "application/liquidmotion"}, {".jcz", "application/liquidmotion"}, {".jfif", "image/pjpeg"}, {".jnlp", "application/x-java-jnlp-file"}, {".jpb", "application/octet-stream"}, {".jpe", "image/jpeg"}, {".jpeg", "image/jpeg"}, {".jpg", "image/jpeg"}, {".js", "application/x-javascript"}, {".json", "application/json"}, {".jsx", "text/jscript"}, {".jsxbin", "text/plain"}, {".latex", "application/x-latex"}, {".library-ms", "application/windows-library+xml"}, {".lit", "application/x-ms-reader"}, {".loadtest", "application/xml"}, {".lpk", "application/octet-stream"}, {".lsf", "video/x-la-asf"}, {".lst", "text/plain"}, {".lsx", "video/x-la-asf"}, {".lzh", "application/octet-stream"}, {".m13", "application/x-msmediaview"}, {".m14", "application/x-msmediaview"}, {".m1v", "video/mpeg"}, {".m2t", "video/vnd.dlna.mpeg-tts"}, {".m2ts", "video/vnd.dlna.mpeg-tts"}, {".m2v", "video/mpeg"}, {".m3u", "audio/x-mpegurl"}, {".m3u8", "audio/x-mpegurl"}, {".m4a", "audio/m4a"}, {".m4b", "audio/m4b"}, {".m4p", "audio/m4p"}, {".m4r", "audio/x-m4r"}, {".m4v", "video/x-m4v"}, {".mac", "image/x-macpaint"}, {".mak", "text/plain"}, {".man", "application/x-troff-man"}, {".manifest", "application/x-ms-manifest"}, {".map", "text/plain"}, {".master", "application/xml"}, {".mda", "application/msaccess"}, {".mdb", "application/x-msaccess"}, {".mde", "application/msaccess"}, {".mdp", "application/octet-stream"}, {".me", "application/x-troff-me"}, {".mfp", "application/x-shockwave-flash"}, {".mht", "message/rfc822"}, {".mhtml", "message/rfc822"}, {".mid", "audio/mid"}, {".midi", "audio/mid"}, {".mix", "application/octet-stream"}, {".mk", "text/plain"}, {".mmf", "application/x-smaf"}, {".mno", "text/xml"}, {".mny", "application/x-msmoney"}, {".mod", "video/mpeg"}, {".mov", "video/quicktime"}, {".movie", "video/x-sgi-movie"}, {".mp2", "video/mpeg"}, {".mp2v", "video/mpeg"}, {".mp3", "audio/mpeg"}, {".mp4", "video/mp4"}, {".mp4v", "video/mp4"}, {".mpa", "video/mpeg"}, {".mpe", "video/mpeg"}, {".mpeg", "video/mpeg"}, {".mpf", "application/vnd.ms-mediapackage"}, {".mpg", "video/mpeg"}, {".mpp", "application/vnd.ms-project"}, {".mpv2", "video/mpeg"}, {".mqv", "video/quicktime"}, {".ms", "application/x-troff-ms"}, {".msi", "application/octet-stream"}, {".mso", "application/octet-stream"}, {".mts", "video/vnd.dlna.mpeg-tts"}, {".mtx", "application/xml"}, {".mvb", "application/x-msmediaview"}, {".mvc", "application/x-miva-compiled"}, {".mxp", "application/x-mmxp"}, {".nc", "application/x-netcdf"}, {".nsc", "video/x-ms-asf"}, {".nws", "message/rfc822"}, {".ocx", "application/octet-stream"}, {".oda", "application/oda"}, {".odc", "text/x-ms-odc"}, {".odh", "text/plain"}, {".odl", "text/plain"}, {".odp", "application/vnd.oasis.opendocument.presentation"}, {".ods", "application/oleobject"}, {".odt", "application/vnd.oasis.opendocument.text"}, {".one", "application/onenote"}, {".onea", "application/onenote"}, {".onepkg", "application/onenote"}, {".onetmp", "application/onenote"}, {".onetoc", "application/onenote"}, {".onetoc2", "application/onenote"}, {".orderedtest", "application/xml"}, {".osdx", "application/opensearchdescription+xml"}, {".p10", "application/pkcs10"}, {".p12", "application/x-pkcs12"}, {".p7b", "application/x-pkcs7-certificates"}, {".p7c", "application/pkcs7-mime"}, {".p7m", "application/pkcs7-mime"}, {".p7r", "application/x-pkcs7-certreqresp"}, {".p7s", "application/pkcs7-signature"}, {".pbm", "image/x-portable-bitmap"}, {".pcast", "application/x-podcast"}, {".pct", "image/pict"}, {".pcx", "application/octet-stream"}, {".pcz", "application/octet-stream"}, {".pdf", "application/pdf"}, {".pfb", "application/octet-stream"}, {".pfm", "application/octet-stream"}, {".pfx", "application/x-pkcs12"}, {".pgm", "image/x-portable-graymap"}, {".pic", "image/pict"}, {".pict", "image/pict"}, {".pkgdef", "text/plain"}, {".pkgundef", "text/plain"}, {".pko", "application/vnd.ms-pki.pko"}, {".pls", "audio/scpls"}, {".pma", "application/x-perfmon"}, {".pmc", "application/x-perfmon"}, {".pml", "application/x-perfmon"}, {".pmr", "application/x-perfmon"}, {".pmw", "application/x-perfmon"}, {".png", "image/png"}, {".pnm", "image/x-portable-anymap"}, {".pnt", "image/x-macpaint"}, {".pntg", "image/x-macpaint"}, {".pnz", "image/png"}, {".pot", "application/vnd.ms-powerpoint"}, {".potm", "application/vnd.ms-powerpoint.template.macroEnabled.12"}, {".potx", "application/vnd.openxmlformats-officedocument.presentationml.template"}, {".ppa", "application/vnd.ms-powerpoint"}, {".ppam", "application/vnd.ms-powerpoint.addin.macroEnabled.12"}, {".ppm", "image/x-portable-pixmap"}, {".pps", "application/vnd.ms-powerpoint"}, {".ppsm", "application/vnd.ms-powerpoint.slideshow.macroEnabled.12"}, {".ppsx", "application/vnd.openxmlformats-officedocument.presentationml.slideshow"}, {".ppt", "application/vnd.ms-powerpoint"}, {".pptm", "application/vnd.ms-powerpoint.presentation.macroEnabled.12"}, {".pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation"}, {".prf", "application/pics-rules"}, {".prm", "application/octet-stream"}, {".prx", "application/octet-stream"}, {".ps", "application/postscript"}, {".psc1", "application/PowerShell"}, {".psd", "application/octet-stream"}, {".psess", "application/xml"}, {".psm", "application/octet-stream"}, {".psp", "application/octet-stream"}, {".pub", "application/x-mspublisher"}, {".pwz", "application/vnd.ms-powerpoint"}, {".qht", "text/x-html-insertion"}, {".qhtm", "text/x-html-insertion"}, {".qt", "video/quicktime"}, {".qti", "image/x-quicktime"}, {".qtif", "image/x-quicktime"}, {".qtl", "application/x-quicktimeplayer"}, {".qxd", "application/octet-stream"}, {".ra", "audio/x-pn-realaudio"}, {".ram", "audio/x-pn-realaudio"}, {".rar", "application/octet-stream"}, {".ras", "image/x-cmu-raster"}, {".rat", "application/rat-file"}, {".rc", "text/plain"}, {".rc2", "text/plain"}, {".rct", "text/plain"}, {".rdlc", "application/xml"}, {".resx", "application/xml"}, {".rf", "image/vnd.rn-realflash"}, {".rgb", "image/x-rgb"}, {".rgs", "text/plain"}, {".rm", "application/vnd.rn-realmedia"}, {".rmi", "audio/mid"}, {".rmp", "application/vnd.rn-rn_music_package"}, {".roff", "application/x-troff"}, {".rpm", "audio/x-pn-realaudio-plugin"}, {".rqy", "text/x-ms-rqy"}, {".rtf", "application/rtf"}, {".rtx", "text/richtext"}, {".ruleset", "application/xml"}, {".s", "text/plain"}, {".safariextz", "application/x-safari-safariextz"}, {".scd", "application/x-msschedule"}, {".sct", "text/scriptlet"}, {".sd2", "audio/x-sd2"}, {".sdp", "application/sdp"}, {".sea", "application/octet-stream"}, {".searchConnector-ms", "application/windows-search-connector+xml"}, {".setpay", "application/set-payment-initiation"}, {".setreg", "application/set-registration-initiation"}, {".settings", "application/xml"}, {".sgimb", "application/x-sgimb"}, {".sgml", "text/sgml"}, {".sh", "application/x-sh"}, {".shar", "application/x-shar"}, {".shtml", "text/html"}, {".sit", "application/x-stuffit"}, {".sitemap", "application/xml"}, {".skin", "application/xml"}, {".sldm", "application/vnd.ms-powerpoint.slide.macroEnabled.12"}, {".sldx", "application/vnd.openxmlformats-officedocument.presentationml.slide"}, {".slk", "application/vnd.ms-excel"}, {".sln", "text/plain"}, {".slupkg-ms", "application/x-ms-license"}, {".smd", "audio/x-smd"}, {".smi", "application/octet-stream"}, {".smx", "audio/x-smd"}, {".smz", "audio/x-smd"}, {".snd", "audio/basic"}, {".snippet", "application/xml"}, {".snp", "application/octet-stream"}, {".sol", "text/plain"}, {".sor", "text/plain"}, {".spc", "application/x-pkcs7-certificates"}, {".spl", "application/futuresplash"}, {".src", "application/x-wais-source"}, {".srf", "text/plain"}, {".SSISDeploymentManifest", "text/xml"}, {".ssm", "application/streamingmedia"}, {".sst", "application/vnd.ms-pki.certstore"}, {".stl", "application/vnd.ms-pki.stl"}, {".sv4cpio", "application/x-sv4cpio"}, {".sv4crc", "application/x-sv4crc"}, {".svc", "application/xml"}, {".swf", "application/x-shockwave-flash"}, {".t", "application/x-troff"}, {".tar", "application/x-tar"}, {".tcl", "application/x-tcl"}, {".testrunconfig", "application/xml"}, {".testsettings", "application/xml"}, {".tex", "application/x-tex"}, {".texi", "application/x-texinfo"}, {".texinfo", "application/x-texinfo"}, {".tgz", "application/x-compressed"}, {".thmx", "application/vnd.ms-officetheme"}, {".thn", "application/octet-stream"}, {".tif", "image/tiff"}, {".tiff", "image/tiff"}, {".tlh", "text/plain"}, {".tli", "text/plain"}, {".toc", "application/octet-stream"}, {".tr", "application/x-troff"}, {".trm", "application/x-msterminal"}, {".trx", "application/xml"}, {".ts", "video/vnd.dlna.mpeg-tts"}, {".tsv", "text/tab-separated-values"}, {".ttf", "application/octet-stream"}, {".tts", "video/vnd.dlna.mpeg-tts"}, {".txt", "text/plain"}, {".u32", "application/octet-stream"}, {".uls", "text/iuls"}, {".user", "text/plain"}, {".ustar", "application/x-ustar"}, {".vb", "text/plain"}, {".vbdproj", "text/plain"}, {".vbk", "video/mpeg"}, {".vbproj", "text/plain"}, {".vbs", "text/vbscript"}, {".vcf", "text/x-vcard"}, {".vcproj", "Application/xml"}, {".vcs", "text/plain"}, {".vcxproj", "Application/xml"}, {".vddproj", "text/plain"}, {".vdp", "text/plain"}, {".vdproj", "text/plain"}, {".vdx", "application/vnd.ms-visio.viewer"}, {".vml", "text/xml"}, {".vscontent", "application/xml"}, {".vsct", "text/xml"}, {".vsd", "application/vnd.visio"}, {".vsi", "application/ms-vsi"}, {".vsix", "application/vsix"}, {".vsixlangpack", "text/xml"}, {".vsixmanifest", "text/xml"}, {".vsmdi", "application/xml"}, {".vspscc", "text/plain"}, {".vss", "application/vnd.visio"}, {".vsscc", "text/plain"}, {".vssettings", "text/xml"}, {".vssscc", "text/plain"}, {".vst", "application/vnd.visio"}, {".vstemplate", "text/xml"}, {".vsto", "application/x-ms-vsto"}, {".vsw", "application/vnd.visio"}, {".vsx", "application/vnd.visio"}, {".vtx", "application/vnd.visio"}, {".wav", "audio/wav"}, {".wave", "audio/wav"}, {".wax", "audio/x-ms-wax"}, {".wbk", "application/msword"}, {".wbmp", "image/vnd.wap.wbmp"}, {".wcm", "application/vnd.ms-works"}, {".wdb", "application/vnd.ms-works"}, {".wdp", "image/vnd.ms-photo"}, {".webarchive", "application/x-safari-webarchive"}, {".webtest", "application/xml"}, {".wiq", "application/xml"}, {".wiz", "application/msword"}, {".wks", "application/vnd.ms-works"}, {".WLMP", "application/wlmoviemaker"}, {".wlpginstall", "application/x-wlpg-detect"}, {".wlpginstall3", "application/x-wlpg3-detect"}, {".wm", "video/x-ms-wm"}, {".wma", "audio/x-ms-wma"}, {".wmd", "application/x-ms-wmd"}, {".wmf", "application/x-msmetafile"}, {".wml", "text/vnd.wap.wml"}, {".wmlc", "application/vnd.wap.wmlc"}, {".wmls", "text/vnd.wap.wmlscript"}, {".wmlsc", "application/vnd.wap.wmlscriptc"}, {".wmp", "video/x-ms-wmp"}, {".wmv", "video/x-ms-wmv"}, {".wmx", "video/x-ms-wmx"}, {".wmz", "application/x-ms-wmz"}, {".wpl", "application/vnd.ms-wpl"}, {".wps", "application/vnd.ms-works"}, {".wri", "application/x-mswrite"}, {".wrl", "x-world/x-vrml"}, {".wrz", "x-world/x-vrml"}, {".wsc", "text/scriptlet"}, {".wsdl", "text/xml"}, {".wvx", "video/x-ms-wvx"}, {".x", "application/directx"}, {".xaf", "x-world/x-vrml"}, {".xaml", "application/xaml+xml"}, {".xap", "application/x-silverlight-app"}, {".xbap", "application/x-ms-xbap"}, {".xbm", "image/x-xbitmap"}, {".xdr", "text/plain"}, {".xht", "application/xhtml+xml"}, {".xhtml", "application/xhtml+xml"}, {".xla", "application/vnd.ms-excel"}, {".xlam", "application/vnd.ms-excel.addin.macroEnabled.12"}, {".xlc", "application/vnd.ms-excel"}, {".xld", "application/vnd.ms-excel"}, {".xlk", "application/vnd.ms-excel"}, {".xll", "application/vnd.ms-excel"}, {".xlm", "application/vnd.ms-excel"}, {".xls", "application/vnd.ms-excel"}, {".xlsb", "application/vnd.ms-excel.sheet.binary.macroEnabled.12"}, {".xlsm", "application/vnd.ms-excel.sheet.macroEnabled.12"}, {".xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}, {".xlt", "application/vnd.ms-excel"}, {".xltm", "application/vnd.ms-excel.template.macroEnabled.12"}, {".xltx", "application/vnd.openxmlformats-officedocument.spreadsheetml.template"}, {".xlw", "application/vnd.ms-excel"}, {".xml", "text/xml"}, {".xmta", "application/xml"}, {".xof", "x-world/x-vrml"}, {".XOML", "text/plain"}, {".xpm", "image/x-xpixmap"}, {".xps", "application/vnd.ms-xpsdocument"}, {".xrm-ms", "text/xml"}, {".xsc", "application/xml"}, {".xsd", "text/xml"}, {".xsf", "text/xml"}, {".xsl", "text/xml"}, {".xslt", "text/xml"}, {".xsn", "application/octet-stream"}, {".xss", "application/xml"}, {".xtp", "application/octet-stream"}, {".xwd", "image/x-xwindowdump"}, {".z", "application/x-compress"}, {".zip", "application/x-zip-compressed"}, }; public static string GetMimeType(string extension) { if (extension == null) { throw new ArgumentNullException("extension"); } if (!extension.StartsWith(".")) { extension = "." + extension; } string mime; return _mappings.TryGetValue(extension, out mime) ? mime : "application/octet-stream"; }
string mimeType = MimeMapping.GetMimeMapping(fileName);
MimeMapping._mappingDictionary.AddMapping(string fileExtension, string mimeType)
private string GetMimeType (string fileName) { string mimeType = "application/unknown"; string ext = System.IO.Path.GetExtension(fileName).ToLower(); Microsoft.Win32.RegistryKey regKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(ext); if (regKey != null && regKey.GetValue("Content Type") != null) mimeType = regKey.GetValue("Content Type").ToString(); return mimeType; }
var mimeType = MimeMapping.GetMimeMapping(fileName);
// public static string GetMimeMapping(string fileName);
string mimeType = Registry.GetValue(@"HKEY_CLASSES_ROOT\.pdf", "Content Type", null) as string;
public static Dictionary<string, string> MimeTypes = new Dictionary<string, string> { { "123", "application/vnd.lotus-1-2-3" }, { "3dml", "text/vnd.in3d.3dml" }, { "3g2", "video/3gpp2" }, { "3gp", "video/3gpp" }, { "7z", "application/x-7z-compressed" }, { "aab", "application/x-authorware-bin" }, { "aac", "audio/x-aac" }, { "aam", "application/x-authorware-map" }, { "aas", "application/x-authorware-seg" }, { "abw", "application/x-abiword" }, ...
public static string GetMimeType(string extension) { if (extension == null) throw new ArgumentNullException("extension"); if (extension.StartsWith(".")) extension = extension.Substring(1); switch (extension.ToLower()) { case "323": return "text/h323"; case "3g2": return "video/3gpp2"; case "3gp": return "video/3gpp"; case "3gp2": return "video/3gpp2"; case "3gpp": return "video/3gpp"; case "7z": return "application/x-7z-compressed"; case "aa": return "audio/audible"; case "aac": return "audio/aac"; case "aaf": return "application/octet-stream"; case "aax": return "audio/vnd.audible.aax"; case "ac3": return "audio/ac3"; case "aca": return "application/octet-stream"; case "accda": return "application/msaccess.addin"; case "accdb": return "application/msaccess"; case "accdc": return "application/msaccess.cab"; case "accde": return "application/msaccess"; case "accdr": return "application/msaccess.runtime"; case "accdt": return "application/msaccess"; case "accdw": return "application/msaccess.webapplication"; case "accft": return "application/msaccess.ftemplate"; case "acx": return "application/internet-property-stream"; case "addin": return "text/xml"; case "ade": return "application/msaccess"; case "adobebridge": return "application/x-bridge-url"; case "adp": return "application/msaccess"; case "adt": return "audio/vnd.dlna.adts"; case "adts": return "audio/aac"; case "afm": return "application/octet-stream"; case "ai": return "application/postscript"; case "aif": return "audio/x-aiff"; case "aifc": return "audio/aiff"; case "aiff": return "audio/aiff"; case "air": return "application/vnd.adobe.air-application-installer-package+zip"; case "amc": return "application/x-mpeg"; case "application": return "application/x-ms-application"; case "art": return "image/x-jg"; case "asa": return "application/xml"; case "asax": return "application/xml"; case "ascx": return "application/xml"; case "asd": return "application/octet-stream"; case "asf": return "video/x-ms-asf"; case "ashx": return "application/xml"; case "asi": return "application/octet-stream"; case "asm": return "text/plain"; case "asmx": return "application/xml"; case "aspx": return "application/xml"; case "asr": return "video/x-ms-asf"; case "asx": return "video/x-ms-asf"; case "atom": return "application/atom+xml"; case "au": return "audio/basic"; case "avi": return "video/x-msvideo"; case "axs": return "application/olescript"; case "bas": return "text/plain"; case "bcpio": return "application/x-bcpio"; case "bin": return "application/octet-stream"; case "bmp": return "image/bmp"; case "c": return "text/plain"; case "cab": return "application/octet-stream"; case "caf": return "audio/x-caf"; case "calx": return "application/vnd.ms-office.calx"; case "cat": return "application/vnd.ms-pki.seccat"; case "cc": return "text/plain"; case "cd": return "text/plain"; case "cdda": return "audio/aiff"; case "cdf": return "application/x-cdf"; case "cer": return "application/x-x509-ca-cert"; case "chm": return "application/octet-stream"; case "class": return "application/x-java-applet"; case "clp": return "application/x-msclip"; case "cmx": return "image/x-cmx"; case "cnf": return "text/plain"; case "cod": return "image/cis-cod"; case "config": return "application/xml"; case "contact": return "text/x-ms-contact"; case "coverage": return "application/xml"; case "cpio": return "application/x-cpio"; case "cpp": return "text/plain"; case "crd": return "application/x-mscardfile"; case "crl": return "application/pkix-crl"; case "crt": return "application/x-x509-ca-cert"; case "cs": return "text/plain"; case "csdproj": return "text/plain"; case "csh": return "application/x-csh"; case "csproj": return "text/plain"; case "css": return "text/css"; case "csv": return "text/csv"; case "cur": return "application/octet-stream"; case "cxx": return "text/plain"; case "dat": return "application/octet-stream"; case "datasource": return "application/xml"; case "dbproj": return "text/plain"; case "dcr": return "application/x-director"; case "def": return "text/plain"; case "deploy": return "application/octet-stream"; case "der": return "application/x-x509-ca-cert"; case "dgml": return "application/xml"; case "dib": return "image/bmp"; case "dif": return "video/x-dv"; case "dir": return "application/x-director"; case "disco": return "text/xml"; case "dll": return "application/x-msdownload"; case "dll.config": return "text/xml"; case "dlm": return "text/dlm"; case "doc": return "application/msword"; case "docm": return "application/vnd.ms-word.document.macroenabled.12"; case "docx": return "application/vnd.openxmlformats-officedocument.wordprocessingml.document"; case "dot": return "application/msword"; case "dotm": return "application/vnd.ms-word.template.macroenabled.12"; case "dotx": return "application/vnd.openxmlformats-officedocument.wordprocessingml.template"; case "dsp": return "application/octet-stream"; case "dsw": return "text/plain"; case "dtd": return "text/xml"; case "dtsconfig": return "text/xml"; case "dv": return "video/x-dv"; case "dvi": return "application/x-dvi"; case "dwf": return "drawing/x-dwf"; case "dwp": return "application/octet-stream"; case "dxr": return "application/x-director"; case "eml": return "message/rfc822"; case "emz": return "application/octet-stream"; case "eot": return "application/octet-stream"; case "eps": return "application/postscript"; case "etl": return "application/etl"; case "etx": return "text/x-setext"; case "evy": return "application/envoy"; case "exe": return "application/octet-stream"; case "exe.config": return "text/xml"; case "fdf": return "application/vnd.fdf"; case "fif": return "application/fractals"; case "filters": return "application/xml"; case "fla": return "application/octet-stream"; case "flr": return "x-world/x-vrml"; case "flv": return "video/x-flv"; case "fsscript": return "application/fsharp-script"; case "fsx": return "application/fsharp-script"; case "generictest": return "application/xml"; case "gif": return "image/gif"; case "group": return "text/x-ms-group"; case "gsm": return "audio/x-gsm"; case "gtar": return "application/x-gtar"; case "gz": return "application/x-gzip"; case "h": return "text/plain"; case "hdf": return "application/x-hdf"; case "hdml": return "text/x-hdml"; case "hhc": return "application/x-oleobject"; case "hhk": return "application/octet-stream"; case "hhp": return "application/octet-stream"; case "hlp": return "application/winhlp"; case "hpp": return "text/plain"; case "hqx": return "application/mac-binhex40"; case "hta": return "application/hta"; case "htc": return "text/x-component"; case "htm": return "text/html"; case "html": return "text/html"; case "htt": return "text/webviewhtml"; case "hxa": return "application/xml"; case "hxc": return "application/xml"; case "hxd": return "application/octet-stream"; case "hxe": return "application/xml"; case "hxf": return "application/xml"; case "hxh": return "application/octet-stream"; case "hxi": return "application/octet-stream"; case "hxk": return "application/xml"; case "hxq": return "application/octet-stream"; case "hxr": return "application/octet-stream"; case "hxs": return "application/octet-stream"; case "hxt": return "text/html"; case "hxv": return "application/xml"; case "hxw": return "application/octet-stream"; case "hxx": return "text/plain"; case "i": return "text/plain"; case "ico": return "image/x-icon"; case "ics": return "application/octet-stream"; case "idl": return "text/plain"; case "ief": return "image/ief"; case "iii": return "application/x-iphone"; case "inc": return "text/plain"; case "inf": return "application/octet-stream"; case "inl": return "text/plain"; case "ins": return "application/x-internet-signup"; case "ipa": return "application/x-itunes-ipa"; case "ipg": return "application/x-itunes-ipg"; case "ipproj": return "text/plain"; case "ipsw": return "application/x-itunes-ipsw"; case "iqy": return "text/x-ms-iqy"; case "isp": return "application/x-internet-signup"; case "ite": return "application/x-itunes-ite"; case "itlp": return "application/x-itunes-itlp"; case "itms": return "application/x-itunes-itms"; case "itpc": return "application/x-itunes-itpc"; case "ivf": return "video/x-ivf"; case "jar": return "application/java-archive"; case "java": return "application/octet-stream"; case "jck": return "application/liquidmotion"; case "jcz": return "application/liquidmotion"; case "jfif": return "image/pjpeg"; case "jnlp": return "application/x-java-jnlp-file"; case "jpb": return "application/octet-stream"; case "jpe": return "image/jpeg"; case "jpeg": return "image/jpeg"; case "jpg": return "image/jpeg"; case "js": return "application/x-javascript"; case "jsx": return "text/jscript"; case "jsxbin": return "text/plain"; case "latex": return "application/x-latex"; case "library-ms": return "application/windows-library+xml"; case "lit": return "application/x-ms-reader"; case "loadtest": return "application/xml"; case "lpk": return "application/octet-stream"; case "lsf": return "video/x-la-asf"; case "lst": return "text/plain"; case "lsx": return "video/x-la-asf"; case "lzh": return "application/octet-stream"; case "m13": return "application/x-msmediaview"; case "m14": return "application/x-msmediaview"; case "m1v": return "video/mpeg"; case "m2t": return "video/vnd.dlna.mpeg-tts"; case "m2ts": return "video/vnd.dlna.mpeg-tts"; case "m2v": return "video/mpeg"; case "m3u": return "audio/x-mpegurl"; case "m3u8": return "audio/x-mpegurl"; case "m4a": return "audio/m4a"; case "m4b": return "audio/m4b"; case "m4p": return "audio/m4p"; case "m4r": return "audio/x-m4r"; case "m4v": return "video/x-m4v"; case "mac": return "image/x-macpaint"; case "mak": return "text/plain"; case "man": return "application/x-troff-man"; case "manifest": return "application/x-ms-manifest"; case "map": return "text/plain"; case "master": return "application/xml"; case "mda": return "application/msaccess"; case "mdb": return "application/x-msaccess"; case "mde": return "application/msaccess"; case "mdp": return "application/octet-stream"; case "me": return "application/x-troff-me"; case "mfp": return "application/x-shockwave-flash"; case "mht": return "message/rfc822"; case "mhtml": return "message/rfc822"; case "mid": return "audio/mid"; case "midi": return "audio/mid"; case "mix": return "application/octet-stream"; case "mk": return "text/plain"; case "mmf": return "application/x-smaf"; case "mno": return "text/xml"; case "mny": return "application/x-msmoney"; case "mod": return "video/mpeg"; case "mov": return "video/quicktime"; case "movie": return "video/x-sgi-movie"; case "mp2": return "video/mpeg"; case "mp2v": return "video/mpeg"; case "mp3": return "audio/mpeg"; case "mp4": return "video/mp4"; case "mp4v": return "video/mp4"; case "mpa": return "video/mpeg"; case "mpe": return "video/mpeg"; case "mpeg": return "video/mpeg"; case "mpf": return "application/vnd.ms-mediapackage"; case "mpg": return "video/mpeg"; case "mpp": return "application/vnd.ms-project"; case "mpv2": return "video/mpeg"; case "mqv": return "video/quicktime"; case "ms": return "application/x-troff-ms"; case "msi": return "application/octet-stream"; case "mso": return "application/octet-stream"; case "mts": return "video/vnd.dlna.mpeg-tts"; case "mtx": return "application/xml"; case "mvb": return "application/x-msmediaview"; case "mvc": return "application/x-miva-compiled"; case "mxp": return "application/x-mmxp"; case "nc": return "application/x-netcdf"; case "nsc": return "video/x-ms-asf"; case "nws": return "message/rfc822"; case "ocx": return "application/octet-stream"; case "oda": return "application/oda"; case "odc": return "text/x-ms-odc"; case "odh": return "text/plain"; case "odl": return "text/plain"; case "odp": return "application/vnd.oasis.opendocument.presentation"; case "ods": return "application/oleobject"; case "odt": return "application/vnd.oasis.opendocument.text"; case "one": return "application/onenote"; case "onea": return "application/onenote"; case "onepkg": return "application/onenote"; case "onetmp": return "application/onenote"; case "onetoc": return "application/onenote"; case "onetoc2": return "application/onenote"; case "orderedtest": return "application/xml"; case "osdx": return "application/opensearchdescription+xml"; case "p10": return "application/pkcs10"; case "p12": return "application/x-pkcs12"; case "p7b": return "application/x-pkcs7-certificates"; case "p7c": return "application/pkcs7-mime"; case "p7m": return "application/pkcs7-mime"; case "p7r": return "application/x-pkcs7-certreqresp"; case "p7s": return "application/pkcs7-signature"; case "pbm": return "image/x-portable-bitmap"; case "pcast": return "application/x-podcast"; case "pct": return "image/pict"; case "pcx": return "application/octet-stream"; case "pcz": return "application/octet-stream"; case "pdf": return "application/pdf"; case "pfb": return "application/octet-stream"; case "pfm": return "application/octet-stream"; case "pfx": return "application/x-pkcs12"; case "pgm": return "image/x-portable-graymap"; case "pic": return "image/pict"; case "pict": return "image/pict"; case "pkgdef": return "text/plain"; case "pkgundef": return "text/plain"; case "pko": return "application/vnd.ms-pki.pko"; case "pls": return "audio/scpls"; case "pma": return "application/x-perfmon"; case "pmc": return "application/x-perfmon"; case "pml": return "application/x-perfmon"; case "pmr": return "application/x-perfmon"; case "pmw": return "application/x-perfmon"; case "png": return "image/png"; case "pnm": return "image/x-portable-anymap"; case "pnt": return "image/x-macpaint"; case "pntg": return "image/x-macpaint"; case "pnz": return "image/png"; case "pot": return "application/vnd.ms-powerpoint"; case "potm": return "application/vnd.ms-powerpoint.template.macroenabled.12"; case "potx": return "application/vnd.openxmlformats-officedocument.presentationml.template"; case "ppa": return "application/vnd.ms-powerpoint"; case "ppam": return "application/vnd.ms-powerpoint.addin.macroenabled.12"; case "ppm": return "image/x-portable-pixmap"; case "pps": return "application/vnd.ms-powerpoint"; case "ppsm": return "application/vnd.ms-powerpoint.slideshow.macroenabled.12"; case "ppsx": return "application/vnd.openxmlformats-officedocument.presentationml.slideshow"; case "ppt": return "application/vnd.ms-powerpoint"; case "pptm": return "application/vnd.ms-powerpoint.presentation.macroenabled.12"; case "pptx": return "application/vnd.openxmlformats-officedocument.presentationml.presentation"; case "prf": return "application/pics-rules"; case "prm": return "application/octet-stream"; case "prx": return "application/octet-stream"; case "ps": return "application/postscript"; case "psc1": return "application/powershell"; case "psd": return "application/octet-stream"; case "psess": return "application/xml"; case "psm": return "application/octet-stream"; case "psp": return "application/octet-stream"; case "pub": return "application/x-mspublisher"; case "pwz": return "application/vnd.ms-powerpoint"; case "qht": return "text/x-html-insertion"; case "qhtm": return "text/x-html-insertion"; case "qt": return "video/quicktime"; case "qti": return "image/x-quicktime"; case "qtif": return "image/x-quicktime"; case "qtl": return "application/x-quicktimeplayer"; case "qxd": return "application/octet-stream"; case "ra": return "audio/x-pn-realaudio"; case "ram": return "audio/x-pn-realaudio"; case "rar": return "application/octet-stream"; case "ras": return "image/x-cmu-raster"; case "rat": return "application/rat-file"; case "rc": return "text/plain"; case "rc2": return "text/plain"; case "rct": return "text/plain"; case "rdlc": return "application/xml"; case "resx": return "application/xml"; case "rf": return "image/vnd.rn-realflash"; case "rgb": return "image/x-rgb"; case "rgs": return "text/plain"; case "rm": return "application/vnd.rn-realmedia"; case "rmi": return "audio/mid"; case "rmp": return "application/vnd.rn-rn_music_package"; case "roff": return "application/x-troff"; case "rpm": return "audio/x-pn-realaudio-plugin"; case "rqy": return "text/x-ms-rqy"; case "rtf": return "application/rtf"; case "rtx": return "text/richtext"; case "ruleset": return "application/xml"; case "s": return "text/plain"; case "safariextz": return "application/x-safari-safariextz"; case "scd": return "application/x-msschedule"; case "sct": return "text/scriptlet"; case "sd2": return "audio/x-sd2"; case "sdp": return "application/sdp"; case "sea": return "application/octet-stream"; case "searchconnector-ms": return "application/windows-search-connector+xml"; case "setpay": return "application/set-payment-initiation"; case "setreg": return "application/set-registration-initiation"; case "settings": return "application/xml"; case "sgimb": return "application/x-sgimb"; case "sgml": return "text/sgml"; case "sh": return "application/x-sh"; case "shar": return "application/x-shar"; case "shtml": return "text/html"; case "sit": return "application/x-stuffit"; case "sitemap": return "application/xml"; case "skin": return "application/xml"; case "sldm": return "application/vnd.ms-powerpoint.slide.macroenabled.12"; case "sldx": return "application/vnd.openxmlformats-officedocument.presentationml.slide"; case "slk": return "application/vnd.ms-excel"; case "sln": return "text/plain"; case "slupkg-ms": return "application/x-ms-license"; case "smd": return "audio/x-smd"; case "smi": return "application/octet-stream"; case "smx": return "audio/x-smd"; case "smz": return "audio/x-smd"; case "snd": return "audio/basic"; case "snippet": return "application/xml"; case "snp": return "application/octet-stream"; case "sol": return "text/plain"; case "sor": return "text/plain"; case "spc": return "application/x-pkcs7-certificates"; case "spl": return "application/futuresplash"; case "src": return "application/x-wais-source"; case "srf": return "text/plain"; case "ssisdeploymentmanifest": return "text/xml"; case "ssm": return "application/streamingmedia"; case "sst": return "application/vnd.ms-pki.certstore"; case "stl": return "application/vnd.ms-pki.stl"; case "sv4cpio": return "application/x-sv4cpio"; case "sv4crc": return "application/x-sv4crc"; case "svc": return "application/xml"; case "swf": return "application/x-shockwave-flash"; case "t": return "application/x-troff"; case "tar": return "application/x-tar"; case "tcl": return "application/x-tcl"; case "testrunconfig": return "application/xml"; case "testsettings": return "application/xml"; case "tex": return "application/x-tex"; case "texi": return "application/x-texinfo"; case "texinfo": return "application/x-texinfo"; case "tgz": return "application/x-compressed"; case "thmx": return "application/vnd.ms-officetheme"; case "thn": return "application/octet-stream"; case "tif": return "image/tiff"; case "tiff": return "image/tiff"; case "tlh": return "text/plain"; case "tli": return "text/plain"; case "toc": return "application/octet-stream"; case "tr": return "application/x-troff"; case "trm": return "application/x-msterminal"; case "trx": return "application/xml"; case "ts": return "video/vnd.dlna.mpeg-tts"; case "tsv": return "text/tab-separated-values"; case "ttf": return "application/octet-stream"; case "tts": return "video/vnd.dlna.mpeg-tts"; case "txt": return "text/plain"; case "u32": return "application/octet-stream"; case "uls": return "text/iuls"; case "user": return "text/plain"; case "ustar": return "application/x-ustar"; case "vb": return "text/plain"; case "vbdproj": return "text/plain"; case "vbk": return "video/mpeg"; case "vbproj": return "text/plain"; case "vbs": return "text/vbscript"; case "vcf": return "text/x-vcard"; case "vcproj": return "application/xml"; case "vcs": return "text/plain"; case "vcxproj": return "application/xml"; case "vddproj": return "text/plain"; case "vdp": return "text/plain"; case "vdproj": return "text/plain"; case "vdx": return "application/vnd.ms-visio.viewer"; case "vml": return "text/xml"; case "vscontent": return "application/xml"; case "vsct": return "text/xml"; case "vsd": return "application/vnd.visio"; case "vsi": return "application/ms-vsi"; case "vsix": return "application/vsix"; case "vsixlangpack": return "text/xml"; case "vsixmanifest": return "text/xml"; case "vsmdi": return "application/xml"; case "vspscc": return "text/plain"; case "vss": return "application/vnd.visio"; case "vsscc": return "text/plain"; case "vssettings": return "text/xml"; case "vssscc": return "text/plain"; case "vst": return "application/vnd.visio"; case "vstemplate": return "text/xml"; case "vsto": return "application/x-ms-vsto"; case "vsw": return "application/vnd.visio"; case "vsx": return "application/vnd.visio"; case "vtx": return "application/vnd.visio"; case "wav": return "audio/wav"; case "wave": return "audio/wav"; case "wax": return "audio/x-ms-wax"; case "wbk": return "application/msword"; case "wbmp": return "image/vnd.wap.wbmp"; case "wcm": return "application/vnd.ms-works"; case "wdb": return "application/vnd.ms-works"; case "wdp": return "image/vnd.ms-photo"; case "webarchive": return "application/x-safari-webarchive"; case "webtest": return "application/xml"; case "wiq": return "application/xml"; case "wiz": return "application/msword"; case "wks": return "application/vnd.ms-works"; case "wlmp": return "application/wlmoviemaker"; case "wlpginstall": return "application/x-wlpg-detect"; case "wlpginstall3": return "application/x-wlpg3-detect"; case "wm": return "video/x-ms-wm"; case "wma": return "audio/x-ms-wma"; case "wmd": return "application/x-ms-wmd"; case "wmf": return "application/x-msmetafile"; case "wml": return "text/vnd.wap.wml"; case "wmlc": return "application/vnd.wap.wmlc"; case "wmls": return "text/vnd.wap.wmlscript"; case "wmlsc": return "application/vnd.wap.wmlscriptc"; case "wmp": return "video/x-ms-wmp"; case "wmv": return "video/x-ms-wmv"; case "wmx": return "video/x-ms-wmx"; case "wmz": return "application/x-ms-wmz"; case "wpl": return "application/vnd.ms-wpl"; case "wps": return "application/vnd.ms-works"; case "wri": return "application/x-mswrite"; case "wrl": return "x-world/x-vrml"; case "wrz": return "x-world/x-vrml"; case "wsc": return "text/scriptlet"; case "wsdl": return "text/xml"; case "wvx": return "video/x-ms-wvx"; case "x": return "application/directx"; case "xaf": return "x-world/x-vrml"; case "xaml": return "application/xaml+xml"; case "xap": return "application/x-silverlight-app"; case "xbap": return "application/x-ms-xbap"; case "xbm": return "image/x-xbitmap"; case "xdr": return "text/plain"; case "xht": return "application/xhtml+xml"; case "xhtml": return "application/xhtml+xml"; case "xla": return "application/vnd.ms-excel"; case "xlam": return "application/vnd.ms-excel.addin.macroenabled.12"; case "xlc": return "application/vnd.ms-excel"; case "xld": return "application/vnd.ms-excel"; case "xlk": return "application/vnd.ms-excel"; case "xll": return "application/vnd.ms-excel"; case "xlm": return "application/vnd.ms-excel"; case "xls": return "application/vnd.ms-excel"; case "xlsb": return "application/vnd.ms-excel.sheet.binary.macroenabled.12"; case "xlsm": return "application/vnd.ms-excel.sheet.macroenabled.12"; case "xlsx": return "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"; case "xlt": return "application/vnd.ms-excel"; case "xltm": return "application/vnd.ms-excel.template.macroenabled.12"; case "xltx": return "application/vnd.openxmlformats-officedocument.spreadsheetml.template"; case "xlw": return "application/vnd.ms-excel"; case "xml": return "text/xml"; case "xmta": return "application/xml"; case "xof": return "x-world/x-vrml"; case "xoml": return "text/plain"; case "xpm": return "image/x-xpixmap"; case "xps": return "application/vnd.ms-xpsdocument"; case "xrm-ms": return "text/xml"; case "xsc": return "application/xml"; case "xsd": return "text/xml"; case "xsf": return "text/xml"; case "xsl": return "text/xml"; case "xslt": return "text/xml"; case "xsn": return "application/octet-stream"; case "xss": return "application/xml"; case "xtp": return "application/octet-stream"; case "xwd": return "image/x-xwindowdump"; case "z": return "application/x-compress"; case "zip": return "application/x-zip-compressed"; default: return "application/octet-stream"; } }
using System; using System.Collections.Generic; namespace Mime { class Mime { public static string GetMimeType(string fileName) { if (string.IsNullOrEmpty(fileName) || string.IsNullOrWhiteSpace(fileName)) { throw new ArgumentNullException("filename must contain a filename"); } string extension = System.IO.Path.GetExtension(fileName).ToLower(); if (!extension.StartsWith(".")) { extension = "." + extension; } string mime; if (_mappings.TryGetValue(extension, out mime)) return mime; if (GetWindowsMimeType(extension, out mime)) { _mappings.Add(extension, mime); return mime; } return "application/octet-stream"; } public static bool GetWindowsMimeType(string ext, out string mime) { mime="application/octet-stream"; Microsoft.Win32.RegistryKey regKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(ext); if (regKey != null) { object val=regKey.GetValue("Content Type") ; if (val != null) { string strval = val.ToString(); if(!(string.IsNullOrEmpty(strval)||string.IsNullOrWhiteSpace(strval))) { mime=strval; return true; } } } return false; } static IDictionary<string, string> _mappings = new Dictionary<string, string>(StringComparer.InvariantCultureIgnoreCase) { {".323", "text/h323"}, {".3g2", "video/3gpp2"}, {".3gp", "video/3gpp"}, {".3gp2", "video/3gpp2"}, {".3gpp", "video/3gpp"}, {".7z", "application/x-7z-compressed"}, {".aa", "audio/audible"}, {".AAC", "audio/aac"}, {".aaf", "application/octet-stream"}, {".aax", "audio/vnd.audible.aax"}, {".ac3", "audio/ac3"}, {".aca", "application/octet-stream"}, {".accda", "application/msaccess.addin"}, {".accdb", "application/msaccess"}, {".accdc", "application/msaccess.cab"}, {".accde", "application/msaccess"}, {".accdr", "application/msaccess.runtime"}, {".accdt", "application/msaccess"}, {".accdw", "application/msaccess.webapplication"}, {".accft", "application/msaccess.ftemplate"}, {".acx", "application/internet-property-stream"}, {".AddIn", "text/xml"}, {".ade", "application/msaccess"}, {".adobebridge", "application/x-bridge-url"}, {".adp", "application/msaccess"}, {".ADT", "audio/vnd.dlna.adts"}, {".ADTS", "audio/aac"}, {".afm", "application/octet-stream"}, {".ai", "application/postscript"}, {".aif", "audio/x-aiff"}, {".aifc", "audio/aiff"}, {".aiff", "audio/aiff"}, {".air", "application/vnd.adobe.air-application-installer-package+zip"}, {".amc", "application/x-mpeg"}, {".application", "application/x-ms-application"}, {".art", "image/x-jg"}, {".asa", "application/xml"}, {".asax", "application/xml"}, {".ascx", "application/xml"}, {".asd", "application/octet-stream"}, {".asf", "video/x-ms-asf"}, {".ashx", "application/xml"}, {".asi", "application/octet-stream"}, {".asm", "text/plain"}, {".asmx", "application/xml"}, {".aspx", "application/xml"}, {".asr", "video/x-ms-asf"}, {".asx", "video/x-ms-asf"}, {".atom", "application/atom+xml"}, {".au", "audio/basic"}, {".avi", "video/x-msvideo"}, {".axs", "application/olescript"}, {".bas", "text/plain"}, {".bcpio", "application/x-bcpio"}, {".bin", "application/octet-stream"}, {".bmp", "image/bmp"}, {".c", "text/plain"}, {".cab", "application/octet-stream"}, {".caf", "audio/x-caf"}, {".calx", "application/vnd.ms-office.calx"}, {".cat", "application/vnd.ms-pki.seccat"}, {".cc", "text/plain"}, {".cd", "text/plain"}, {".cdda", "audio/aiff"}, {".cdf", "application/x-cdf"}, {".cer", "application/x-x509-ca-cert"}, {".chm", "application/octet-stream"}, {".class", "application/x-java-applet"}, {".clp", "application/x-msclip"}, {".cmx", "image/x-cmx"}, {".cnf", "text/plain"}, {".cod", "image/cis-cod"}, {".config", "application/xml"}, {".contact", "text/x-ms-contact"}, {".coverage", "application/xml"}, {".cpio", "application/x-cpio"}, {".cpp", "text/plain"}, {".crd", "application/x-mscardfile"}, {".crl", "application/pkix-crl"}, {".crt", "application/x-x509-ca-cert"}, {".cs", "text/plain"}, {".csdproj", "text/plain"}, {".csh", "application/x-csh"}, {".csproj", "text/plain"}, {".css", "text/css"}, {".csv", "text/csv"}, {".cur", "application/octet-stream"}, {".cxx", "text/plain"}, {".dat", "application/octet-stream"}, {".datasource", "application/xml"}, {".dbproj", "text/plain"}, {".dcr", "application/x-director"}, {".def", "text/plain"}, {".deploy", "application/octet-stream"}, {".der", "application/x-x509-ca-cert"}, {".dgml", "application/xml"}, {".dib", "image/bmp"}, {".dif", "video/x-dv"}, {".dir", "application/x-director"}, {".disco", "text/xml"}, {".dll", "application/x-msdownload"}, {".dll.config", "text/xml"}, {".dlm", "text/dlm"}, {".doc", "application/msword"}, {".docm", "application/vnd.ms-word.document.macroEnabled.12"}, {".docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"}, {".dot", "application/msword"}, {".dotm", "application/vnd.ms-word.template.macroEnabled.12"}, {".dotx", "application/vnd.openxmlformats-officedocument.wordprocessingml.template"}, {".dsp", "application/octet-stream"}, {".dsw", "text/plain"}, {".dtd", "text/xml"}, {".dtsConfig", "text/xml"}, {".dv", "video/x-dv"}, {".dvi", "application/x-dvi"}, {".dwf", "drawing/x-dwf"}, {".dwp", "application/octet-stream"}, {".dxr", "application/x-director"}, {".eml", "message/rfc822"}, {".emz", "application/octet-stream"}, {".eot", "application/octet-stream"}, {".eps", "application/postscript"}, {".etl", "application/etl"}, {".etx", "text/x-setext"}, {".evy", "application/envoy"}, {".exe", "application/octet-stream"}, {".exe.config", "text/xml"}, {".fdf", "application/vnd.fdf"}, {".fif", "application/fractals"}, {".filters", "Application/xml"}, {".fla", "application/octet-stream"}, {".flr", "x-world/x-vrml"}, {".flv", "video/x-flv"}, {".fsscript", "application/fsharp-script"}, {".fsx", "application/fsharp-script"}, {".generictest", "application/xml"}, {".gif", "image/gif"}, {".group", "text/x-ms-group"}, {".gsm", "audio/x-gsm"}, {".gtar", "application/x-gtar"}, {".gz", "application/x-gzip"}, {".h", "text/plain"}, {".hdf", "application/x-hdf"}, {".hdml", "text/x-hdml"}, {".hhc", "application/x-oleobject"}, {".hhk", "application/octet-stream"}, {".hhp", "application/octet-stream"}, {".hlp", "application/winhlp"}, {".hpp", "text/plain"}, {".hqx", "application/mac-binhex40"}, {".hta", "application/hta"}, {".htc", "text/x-component"}, {".htm", "text/html"}, {".html", "text/html"}, {".htt", "text/webviewhtml"}, {".hxa", "application/xml"}, {".hxc", "application/xml"}, {".hxd", "application/octet-stream"}, {".hxe", "application/xml"}, {".hxf", "application/xml"}, {".hxh", "application/octet-stream"}, {".hxi", "application/octet-stream"}, {".hxk", "application/xml"}, {".hxq", "application/octet-stream"}, {".hxr", "application/octet-stream"}, {".hxs", "application/octet-stream"}, {".hxt", "text/html"}, {".hxv", "application/xml"}, {".hxw", "application/octet-stream"}, {".hxx", "text/plain"}, {".i", "text/plain"}, {".ico", "image/x-icon"}, {".ics", "application/octet-stream"}, {".idl", "text/plain"}, {".ief", "image/ief"}, {".iii", "application/x-iphone"}, {".inc", "text/plain"}, {".inf", "application/octet-stream"}, {".inl", "text/plain"}, {".ins", "application/x-internet-signup"}, {".ipa", "application/x-itunes-ipa"}, {".ipg", "application/x-itunes-ipg"}, {".ipproj", "text/plain"}, {".ipsw", "application/x-itunes-ipsw"}, {".iqy", "text/x-ms-iqy"}, {".isp", "application/x-internet-signup"}, {".ite", "application/x-itunes-ite"}, {".itlp", "application/x-itunes-itlp"}, {".itms", "application/x-itunes-itms"}, {".itpc", "application/x-itunes-itpc"}, {".IVF", "video/x-ivf"}, {".jar", "application/java-archive"}, {".java", "application/octet-stream"}, {".jck", "application/liquidmotion"}, {".jcz", "application/liquidmotion"}, {".jfif", "image/pjpeg"}, {".jnlp", "application/x-java-jnlp-file"}, {".jpb", "application/octet-stream"}, {".jpe", "image/jpeg"}, {".jpeg", "image/jpeg"}, {".jpg", "image/jpeg"}, {".js", "application/x-javascript"}, {".jsx", "text/jscript"}, {".jsxbin", "text/plain"}, {".latex", "application/x-latex"}, {".library-ms", "application/windows-library+xml"}, {".lit", "application/x-ms-reader"}, {".loadtest", "application/xml"}, {".lpk", "application/octet-stream"}, {".lsf", "video/x-la-asf"}, {".lst", "text/plain"}, {".lsx", "video/x-la-asf"}, {".lzh", "application/octet-stream"}, {".m13", "application/x-msmediaview"}, {".m14", "application/x-msmediaview"}, {".m1v", "video/mpeg"}, {".m2t", "video/vnd.dlna.mpeg-tts"}, {".m2ts", "video/vnd.dlna.mpeg-tts"}, {".m2v", "video/mpeg"}, {".m3u", "audio/x-mpegurl"}, {".m3u8", "audio/x-mpegurl"}, {".m4a", "audio/m4a"}, {".m4b", "audio/m4b"}, {".m4p", "audio/m4p"}, {".m4r", "audio/x-m4r"}, {".m4v", "video/x-m4v"}, {".mac", "image/x-macpaint"}, {".mak", "text/plain"}, {".man", "application/x-troff-man"}, {".manifest", "application/x-ms-manifest"}, {".map", "text/plain"}, {".master", "application/xml"}, {".mda", "application/msaccess"}, {".mdb", "application/x-msaccess"}, {".mde", "application/msaccess"}, {".mdp", "application/octet-stream"}, {".me", "application/x-troff-me"}, {".mfp", "application/x-shockwave-flash"}, {".mht", "message/rfc822"}, {".mhtml", "message/rfc822"}, {".mid", "audio/mid"}, {".midi", "audio/mid"}, {".mix", "application/octet-stream"}, {".mk", "text/plain"}, {".mmf", "application/x-smaf"}, {".mno", "text/xml"}, {".mny", "application/x-msmoney"}, {".mod", "video/mpeg"}, {".mov", "video/quicktime"}, {".movie", "video/x-sgi-movie"}, {".mp2", "video/mpeg"}, {".mp2v", "video/mpeg"}, {".mp3", "audio/mpeg"}, {".mp4", "video/mp4"}, {".mp4v", "video/mp4"}, {".mpa", "video/mpeg"}, {".mpe", "video/mpeg"}, {".mpeg", "video/mpeg"}, {".mpf", "application/vnd.ms-mediapackage"}, {".mpg", "video/mpeg"}, {".mpp", "application/vnd.ms-project"}, {".mpv2", "video/mpeg"}, {".mqv", "video/quicktime"}, {".ms", "application/x-troff-ms"}, {".msi", "application/octet-stream"}, {".mso", "application/octet-stream"}, {".mts", "video/vnd.dlna.mpeg-tts"}, {".mtx", "application/xml"}, {".mvb", "application/x-msmediaview"}, {".mvc", "application/x-miva-compiled"}, {".mxp", "application/x-mmxp"}, {".nc", "application/x-netcdf"}, {".nsc", "video/x-ms-asf"}, {".nws", "message/rfc822"}, {".ocx", "application/octet-stream"}, {".oda", "application/oda"}, {".odc", "text/x-ms-odc"}, {".odh", "text/plain"}, {".odl", "text/plain"}, {".odp", "application/vnd.oasis.opendocument.presentation"}, {".ods", "application/oleobject"}, {".odt", "application/vnd.oasis.opendocument.text"}, {".one", "application/onenote"}, {".onea", "application/onenote"}, {".onepkg", "application/onenote"}, {".onetmp", "application/onenote"}, {".onetoc", "application/onenote"}, {".onetoc2", "application/onenote"}, {".orderedtest", "application/xml"}, {".osdx", "application/opensearchdescription+xml"}, {".p10", "application/pkcs10"}, {".p12", "application/x-pkcs12"}, {".p7b", "application/x-pkcs7-certificates"}, {".p7c", "application/pkcs7-mime"}, {".p7m", "application/pkcs7-mime"}, {".p7r", "application/x-pkcs7-certreqresp"}, {".p7s", "application/pkcs7-signature"}, {".pbm", "image/x-portable-bitmap"}, {".pcast", "application/x-podcast"}, {".pct", "image/pict"}, {".pcx", "application/octet-stream"}, {".pcz", "application/octet-stream"}, {".pdf", "application/pdf"}, {".pfb", "application/octet-stream"}, {".pfm", "application/octet-stream"}, {".pfx", "application/x-pkcs12"}, {".pgm", "image/x-portable-graymap"}, {".pic", "image/pict"}, {".pict", "image/pict"}, {".pkgdef", "text/plain"}, {".pkgundef", "text/plain"}, {".pko", "application/vnd.ms-pki.pko"}, {".pls", "audio/scpls"}, {".pma", "application/x-perfmon"}, {".pmc", "application/x-perfmon"}, {".pml", "application/x-perfmon"}, {".pmr", "application/x-perfmon"}, {".pmw", "application/x-perfmon"}, {".png", "image/png"}, {".pnm", "image/x-portable-anymap"}, {".pnt", "image/x-macpaint"}, {".pntg", "image/x-macpaint"}, {".pnz", "image/png"}, {".pot", "application/vnd.ms-powerpoint"}, {".potm", "application/vnd.ms-powerpoint.template.macroEnabled.12"}, {".potx", "application/vnd.openxmlformats-officedocument.presentationml.template"}, {".ppa", "application/vnd.ms-powerpoint"}, {".ppam", "application/vnd.ms-powerpoint.addin.macroEnabled.12"}, {".ppm", "image/x-portable-pixmap"}, {".pps", "application/vnd.ms-powerpoint"}, {".ppsm", "application/vnd.ms-powerpoint.slideshow.macroEnabled.12"}, {".ppsx", "application/vnd.openxmlformats-officedocument.presentationml.slideshow"}, {".ppt", "application/vnd.ms-powerpoint"}, {".pptm", "application/vnd.ms-powerpoint.presentation.macroEnabled.12"}, {".pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation"}, {".prf", "application/pics-rules"}, {".prm", "application/octet-stream"}, {".prx", "application/octet-stream"}, {".ps", "application/postscript"}, {".psc1", "application/PowerShell"}, {".psd", "application/octet-stream"}, {".psess", "application/xml"}, {".psm", "application/octet-stream"}, {".psp", "application/octet-stream"}, {".pub", "application/x-mspublisher"}, {".pwz", "application/vnd.ms-powerpoint"}, {".qht", "text/x-html-insertion"}, {".qhtm", "text/x-html-insertion"}, {".qt", "video/quicktime"}, {".qti", "image/x-quicktime"}, {".qtif", "image/x-quicktime"}, {".qtl", "application/x-quicktimeplayer"}, {".qxd", "application/octet-stream"}, {".ra", "audio/x-pn-realaudio"}, {".ram", "audio/x-pn-realaudio"}, {".rar", "application/octet-stream"}, {".ras", "image/x-cmu-raster"}, {".rat", "application/rat-file"}, {".rc", "text/plain"}, {".rc2", "text/plain"}, {".rct", "text/plain"}, {".rdlc", "application/xml"}, {".resx", "application/xml"}, {".rf", "image/vnd.rn-realflash"}, {".rgb", "image/x-rgb"}, {".rgs", "text/plain"}, {".rm", "application/vnd.rn-realmedia"}, {".rmi", "audio/mid"}, {".rmp", "application/vnd.rn-rn_music_package"}, {".roff", "application/x-troff"}, {".rpm", "audio/x-pn-realaudio-plugin"}, {".rqy", "text/x-ms-rqy"}, {".rtf", "application/rtf"}, {".rtx", "text/richtext"}, {".ruleset", "application/xml"}, {".s", "text/plain"}, {".safariextz", "application/x-safari-safariextz"}, {".scd", "application/x-msschedule"}, {".sct", "text/scriptlet"}, {".sd2", "audio/x-sd2"}, {".sdp", "application/sdp"}, {".sea", "application/octet-stream"}, {".searchConnector-ms", "application/windows-search-connector+xml"}, {".setpay", "application/set-payment-initiation"}, {".setreg", "application/set-registration-initiation"}, {".settings", "application/xml"}, {".sgimb", "application/x-sgimb"}, {".sgml", "text/sgml"}, {".sh", "application/x-sh"}, {".shar", "application/x-shar"}, {".shtml", "text/html"}, {".sit", "application/x-stuffit"}, {".sitemap", "application/xml"}, {".skin", "application/xml"}, {".sldm", "application/vnd.ms-powerpoint.slide.macroEnabled.12"}, {".sldx", "application/vnd.openxmlformats-officedocument.presentationml.slide"}, {".slk", "application/vnd.ms-excel"}, {".sln", "text/plain"}, {".slupkg-ms", "application/x-ms-license"}, {".smd", "audio/x-smd"}, {".smi", "application/octet-stream"}, {".smx", "audio/x-smd"}, {".smz", "audio/x-smd"}, {".snd", "audio/basic"}, {".snippet", "application/xml"}, {".snp", "application/octet-stream"}, {".sol", "text/plain"}, {".sor", "text/plain"}, {".spc", "application/x-pkcs7-certificates"}, {".spl", "application/futuresplash"}, {".src", "application/x-wais-source"}, {".srf", "text/plain"}, {".SSISDeploymentManifest", "text/xml"}, {".ssm", "application/streamingmedia"}, {".sst", "application/vnd.ms-pki.certstore"}, {".stl", "application/vnd.ms-pki.stl"}, {".sv4cpio", "application/x-sv4cpio"}, {".sv4crc", "application/x-sv4crc"}, {".svc", "application/xml"}, {".swf", "application/x-shockwave-flash"}, {".t", "application/x-troff"}, {".tar", "application/x-tar"}, {".tcl", "application/x-tcl"}, {".testrunconfig", "application/xml"}, {".testsettings", "application/xml"}, {".tex", "application/x-tex"}, {".texi", "application/x-texinfo"}, {".texinfo", "application/x-texinfo"}, {".tgz", "application/x-compressed"}, {".thmx", "application/vnd.ms-officetheme"}, {".thn", "application/octet-stream"}, {".tif", "image/tiff"}, {".tiff", "image/tiff"}, {".tlh", "text/plain"}, {".tli", "text/plain"}, {".toc", "application/octet-stream"}, {".tr", "application/x-troff"}, {".trm", "application/x-msterminal"}, {".trx", "application/xml"}, {".ts", "video/vnd.dlna.mpeg-tts"}, {".tsv", "text/tab-separated-values"}, {".ttf", "application/octet-stream"}, {".tts", "video/vnd.dlna.mpeg-tts"}, {".txt", "text/plain"}, {".u32", "application/octet-stream"}, {".uls", "text/iuls"}, {".user", "text/plain"}, {".ustar", "application/x-ustar"}, {".vb", "text/plain"}, {".vbdproj", "text/plain"}, {".vbk", "video/mpeg"}, {".vbproj", "text/plain"}, {".vbs", "text/vbscript"}, {".vcf", "text/x-vcard"}, {".vcproj", "Application/xml"}, {".vcs", "text/plain"}, {".vcxproj", "Application/xml"}, {".vddproj", "text/plain"}, {".vdp", "text/plain"}, {".vdproj", "text/plain"}, {".vdx", "application/vnd.ms-visio.viewer"}, {".vml", "text/xml"}, {".vscontent", "application/xml"}, {".vsct", "text/xml"}, {".vsd", "application/vnd.visio"}, {".vsi", "application/ms-vsi"}, {".vsix", "application/vsix"}, {".vsixlangpack", "text/xml"}, {".vsixmanifest", "text/xml"}, {".vsmdi", "application/xml"}, {".vspscc", "text/plain"}, {".vss", "application/vnd.visio"}, {".vsscc", "text/plain"}, {".vssettings", "text/xml"}, {".vssscc", "text/plain"}, {".vst", "application/vnd.visio"}, {".vstemplate", "text/xml"}, {".vsto", "application/x-ms-vsto"}, {".vsw", "application/vnd.visio"}, {".vsx", "application/vnd.visio"}, {".vtx", "application/vnd.visio"}, {".wav", "audio/wav"}, {".wave", "audio/wav"}, {".wax", "audio/x-ms-wax"}, {".wbk", "application/msword"}, {".wbmp", "image/vnd.wap.wbmp"}, {".wcm", "application/vnd.ms-works"}, {".wdb", "application/vnd.ms-works"}, {".wdp", "image/vnd.ms-photo"}, {".webarchive", "application/x-safari-webarchive"}, {".webtest", "application/xml"}, {".wiq", "application/xml"}, {".wiz", "application/msword"}, {".wks", "application/vnd.ms-works"}, {".WLMP", "application/wlmoviemaker"}, {".wlpginstall", "application/x-wlpg-detect"}, {".wlpginstall3", "application/x-wlpg3-detect"}, {".wm", "video/x-ms-wm"}, {".wma", "audio/x-ms-wma"}, {".wmd", "application/x-ms-wmd"}, {".wmf", "application/x-msmetafile"}, {".wml", "text/vnd.wap.wml"}, {".wmlc", "application/vnd.wap.wmlc"}, {".wmls", "text/vnd.wap.wmlscript"}, {".wmlsc", "application/vnd.wap.wmlscriptc"}, {".wmp", "video/x-ms-wmp"}, {".wmv", "video/x-ms-wmv"}, {".wmx", "video/x-ms-wmx"}, {".wmz", "application/x-ms-wmz"}, {".wpl", "application/vnd.ms-wpl"}, {".wps", "application/vnd.ms-works"}, {".wri", "application/x-mswrite"}, {".wrl", "x-world/x-vrml"}, {".wrz", "x-world/x-vrml"}, {".wsc", "text/scriptlet"}, {".wsdl", "text/xml"}, {".wvx", "video/x-ms-wvx"}, {".x", "application/directx"}, {".xaf", "x-world/x-vrml"}, {".xaml", "application/xaml+xml"}, {".xap", "application/x-silverlight-app"}, {".xbap", "application/x-ms-xbap"}, {".xbm", "image/x-xbitmap"}, {".xdr", "text/plain"}, {".xht", "application/xhtml+xml"}, {".xhtml", "application/xhtml+xml"}, {".xla", "application/vnd.ms-excel"}, {".xlam", "application/vnd.ms-excel.addin.macroEnabled.12"}, {".xlc", "application/vnd.ms-excel"}, {".xld", "application/vnd.ms-excel"}, {".xlk", "application/vnd.ms-excel"}, {".xll", "application/vnd.ms-excel"}, {".xlm", "application/vnd.ms-excel"}, {".xls", "application/vnd.ms-excel"}, {".xlsb", "application/vnd.ms-excel.sheet.binary.macroEnabled.12"}, {".xlsm", "application/vnd.ms-excel.sheet.macroEnabled.12"}, {".xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}, {".xlt", "application/vnd.ms-excel"}, {".xltm", "application/vnd.ms-excel.template.macroEnabled.12"}, {".xltx", "application/vnd.openxmlformats-officedocument.spreadsheetml.template"}, {".xlw", "application/vnd.ms-excel"}, {".xml", "text/xml"}, {".xmta", "application/xml"}, {".xof", "x-world/x-vrml"}, {".XOML", "text/plain"}, {".xpm", "image/x-xpixmap"}, {".xps", "application/vnd.ms-xpsdocument"}, {".xrm-ms", "text/xml"}, {".xsc", "application/xml"}, {".xsd", "text/xml"}, {".xsf", "text/xml"}, {".xsl", "text/xml"}, {".xslt", "text/xml"}, {".xsn", "application/octet-stream"}, {".xss", "application/xml"}, {".xtp", "application/octet-stream"}, {".xwd", "image/x-xwindowdump"}, {".z", "application/x-compress"}, {".zip", "application/x-zip-compressed"}, }; } }
public void Configure(IApplicationBuilder app) { var provider = new FileExtensionContentTypeProvider(); provider.Mappings[".myapp"] = "application/x-msdownload"; provider.Mappings[".htm3"] = "text/html"; provider.Mappings[".image"] = "image/png"; provider.Mappings[".rtf"] = "application/x-msdownload"; provider.Mappings.Remove(".mp4"); app.UseStaticFiles(new StaticFileOptions() { FileProvider = new PhysicalFileProvider( Path.Combine(Directory.GetCurrentDirectory(), @"wwwroot", "images")), RequestPath = new PathString("/MyImages"), ContentTypeProvider = provider }); app.UseDirectoryBrowser(new DirectoryBrowserOptions() { FileProvider = new PhysicalFileProvider( Path.Combine(Directory.GetCurrentDirectory(), @"wwwroot", "images")), RequestPath = new PathString("/MyImages") }); }
string mimeType = MimeMapping.GetMimeMapping(filename);
<PropertyGroup> <DefineConstants Condition=" !$(DefineConstants.Contains( <DefineConstants Condition=" $(DefineConstants.Contains( </PropertyGroup>
public static class MimeExtensionHelper { static object locker = new object(); static MethodInfo getMimeMappingMethodInfo; static MimeExtensionHelper() { Type mimeMappingType = Assembly.GetAssembly(typeof(HttpRuntime)).GetType("System.Web.MimeMapping"); if (mimeMappingType == null) throw new SystemException("Couldnt find MimeMapping type"); ConstructorInfo constructorInfo = mimeMappingType.GetConstructor(BindingFlags.NonPublic | BindingFlags.Instance, null, Type.EmptyTypes, null); if (constructorInfo == null) throw new SystemException("Couldnt find default constructor for MimeMapping"); mimeMapping = constructorInfo.Invoke(null); if (mimeMapping == null) throw new SystemException("Couldnt find MimeMapping"); getMimeMappingMethodInfo = mimeMappingType.GetMethod("GetMimeMapping", BindingFlags.Static | BindingFlags.NonPublic); if (getMimeMappingMethodInfo == null) throw new SystemException("Couldnt find GetMimeMapping method"); if (getMimeMappingMethodInfo.ReturnType != typeof(string)) throw new SystemException("GetMimeMapping method has invalid return type"); if (getMimeMappingMethodInfo.GetParameters().Length != 1 && getMimeMappingMethodInfo.GetParameters()[0].ParameterType != typeof(string)) throw new SystemException("GetMimeMapping method has invalid parameters"); } public static string GetMimeType(string fileName) { lock (locker) { return (string)getMimeMappingMethodInfo.Invoke(null, new object[] { fileName }); } } } public static class MimeExtensionHelper { static object locker = new object(); static MethodInfo getMimeMappingMethodInfo; static MimeExtensionHelper() { Type mimeMappingType = Assembly.GetAssembly(typeof(HttpRuntime)).GetType("System.Web.MimeMapping"); if (mimeMappingType == null) throw new SystemException("Couldnt find MimeMapping type"); getMimeMappingMethodInfo = mimeMappingType.GetMethod("GetMimeMapping", BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public); if (getMimeMappingMethodInfo == null) throw new SystemException("Couldnt find GetMimeMapping method"); if (getMimeMappingMethodInfo.ReturnType != typeof(string)) throw new SystemException("GetMimeMapping method has invalid return type"); if (getMimeMappingMethodInfo.GetParameters().Length != 1 && getMimeMappingMethodInfo.GetParameters()[0].ParameterType != typeof(string)) throw new SystemException("GetMimeMapping method has invalid parameters"); } public static string GetMimeType(string fileName) { lock (locker) { return (string)getMimeMappingMethodInfo.Invoke(null, new object[] { fileName }); } } } public static class MimeExtensionHelper { public static string GetMimeType(string fileName) { return MimeMapping.GetMimeMapping(fileName); } }
private string GetMimeType(string sFileName) { string sExt = Path.GetExtension(sFileName); if (string.IsNullOrEmpty(sExt)) return "Unknown file type"; string mimeType = string.Format("{0} File", sExt.ToUpper().Replace(".", "")); Microsoft.Win32.RegistryKey regKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(sExt); if (regKey == null) return mimeType; string sSubType = regKey.GetValue("").ToString(); regKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(sSubType); if (regKey?.GetValue("") != null) mimeType = regKey.GetValue("").ToString(); return mimeType; }
using Microsoft.Win32; using System; using System.Drawing; using System.IO; using System.Runtime.InteropServices; public static class Helper { [DllImport("shell32.dll", CharSet = CharSet.Auto)] private static extern int ExtractIconEx(string lpszFile, int nIconIndex, IntPtr[] phIconLarge, IntPtr[] phIconSmall, int nIcons); [DllImport("user32.dll", SetLastError = true)] private static extern int DestroyIcon(IntPtr hIcon); public static string GetFileContentType(string fileName) { if (fileName == null) { throw new ArgumentNullException("fileName"); } RegistryKey registryKey = null; try { FileInfo fileInfo = new FileInfo(fileName); if (string.IsNullOrEmpty(fileInfo.Extension)) { return string.Empty; } string extension = fileInfo.Extension.ToLowerInvariant(); registryKey = Registry.ClassesRoot.OpenSubKey(extension); if (registryKey == null) { return string.Empty; } object contentTypeObject = registryKey.GetValue("Content Type"); if (!(contentTypeObject is string)) { return string.Empty; } string contentType = (string)contentTypeObject; return contentType; } catch (Exception) { return null; } finally { if (registryKey != null) { registryKey.Close(); } } } public static string GetFileDescription(string fileName) { if (fileName == null) { throw new ArgumentNullException("fileName"); } RegistryKey registryKey1 = null; RegistryKey registryKey2 = null; try { FileInfo fileInfo = new FileInfo(fileName); if (string.IsNullOrEmpty(fileInfo.Extension)) { return string.Empty; } string extension = fileInfo.Extension.ToLowerInvariant(); registryKey1 = Registry.ClassesRoot.OpenSubKey(extension); if (registryKey1 == null) { return string.Empty; } object extensionDefaultObject = registryKey1.GetValue(null); if (!(extensionDefaultObject is string)) { return string.Empty; } string extensionDefaultValue = (string)extensionDefaultObject; registryKey2 = Registry.ClassesRoot.OpenSubKey(extensionDefaultValue); if (registryKey2 == null) { return string.Empty; } object fileDescriptionObject = registryKey2.GetValue(null); if (!(fileDescriptionObject is string)) { return string.Empty; } string fileDescription = (string)fileDescriptionObject; return fileDescription; } catch (Exception) { return null; } finally { if (registryKey2 != null) { registryKey2.Close(); } if (registryKey1 != null) { registryKey1.Close(); } } } public static void GetFileIcons(string fileName, out Icon smallIcon, out Icon largeIcon) { if (fileName == null) { throw new ArgumentNullException("fileName"); } smallIcon = null; largeIcon = null; RegistryKey registryKey1 = null; RegistryKey registryKey2 = null; try { FileInfo fileInfo = new FileInfo(fileName); if (string.IsNullOrEmpty(fileInfo.Extension)) { return; } string extension = fileInfo.Extension.ToLowerInvariant(); registryKey1 = Registry.ClassesRoot.OpenSubKey(extension); if (registryKey1 == null) { return; } object extensionDefaultObject = registryKey1.GetValue(null); if (!(extensionDefaultObject is string)) { return; } string defaultIconKeyName = string.Format("{0}\\DefaultIcon", extensionDefaultObject); registryKey2 = Registry.ClassesRoot.OpenSubKey(defaultIconKeyName); if (registryKey2 == null) { return; } object defaultIconPathObject = registryKey2.GetValue(null); if (!(defaultIconPathObject is string)) { return; } string defaultIconPath = (string)defaultIconPathObject; if (string.IsNullOrWhiteSpace(defaultIconPath)) { return; } string iconfileName = null; int iconIndex = 0; int commaIndex = defaultIconPath.IndexOf(","); if (commaIndex > 0) { iconfileName = defaultIconPath.Substring(0, commaIndex); string iconIndexString = defaultIconPath.Substring(commaIndex + 1); if (!int.TryParse(iconIndexString, out iconIndex)) { iconIndex = 0; } } else { iconfileName = defaultIconPath; iconIndex = 0; } IntPtr[] phiconSmall = new IntPtr[1] { IntPtr.Zero }; IntPtr[] phiconLarge = new IntPtr[1] { IntPtr.Zero }; int readIconCount = ExtractIconEx(iconfileName, iconIndex, phiconLarge, phiconSmall, 1); if (readIconCount < 0) { return; } if (phiconSmall[0] != IntPtr.Zero) { smallIcon = (Icon)Icon.FromHandle(phiconSmall[0]).Clone(); DestroyIcon(phiconSmall[0]); } if (phiconLarge[0] != IntPtr.Zero) { largeIcon = (Icon)Icon.FromHandle(phiconLarge[0]).Clone(); DestroyIcon(phiconLarge[0]); } return; } finally { if (registryKey2 != null) { registryKey2.Close(); } if (registryKey1 != null) { registryKey1.Close(); } } } }
string fileName = "NotExists.txt"; string contentType = Helper.GetFileContentType(fileName); string description = Helper.GetFileDescription(fileName); Icon smallIcon, largeIcon; Helper.GetFileIcons(fileName, out smallIcon, out largeIcon);
public class ClaimRequirementAttribute : TypeFilterAttribute { public ClaimRequirementAttribute(string claimType, string claimValue) : base(typeof(ClaimRequirementFilter)) { Arguments = new object[] {new Claim(claimType, claimValue) }; } } public class ClaimRequirementFilter : IAuthorizationFilter { readonly Claim _claim; public ClaimRequirementFilter(Claim claim) { _claim = claim; } public void OnAuthorization(AuthorizationFilterContext context) { var hasClaim = context.HttpContext.User.Claims.Any(c => c.Type == _claim.Type && c.Value == _claim.Value); if (!hasClaim) { context.Result = new ForbidResult(); } } } [Route("api/resource")] public class MyController : Controller { [ClaimRequirement(MyClaimTypes.Permission, "CanReadResource")] [HttpGet] public IActionResult GetResource() { return Ok(); } }
public class Over18Requirement : AuthorizationHandler<Over18Requirement>, IAuthorizationRequirement { public override void Handle(AuthorizationHandlerContext context, Over18Requirement requirement) { if (!context.User.HasClaim(c => c.Type == ClaimTypes.DateOfBirth)) { context.Fail(); return; } var dateOfBirth = Convert.ToDateTime(context.User.FindFirst(c => c.Type == ClaimTypes.DateOfBirth).Value); int age = DateTime.Today.Year - dateOfBirth.Year; if (dateOfBirth > DateTime.Today.AddYears(-age)) { age--; } if (age >= 18) { context.Succeed(requirement); } else { context.Fail(); } } } }
services.AddAuthorization(options => { options.AddPolicy("Over18", policy => policy.Requirements.Add(new Authorization.Over18Requirement())); });
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public class CustomAuthorizeAttribute : AuthorizeAttribute, IAuthorizationFilter { private readonly string _someFilterParameter; public CustomAuthorizeAttribute(string someFilterParameter) { _someFilterParameter = someFilterParameter; } public void OnAuthorization(AuthorizationFilterContext context) { var user = context.HttpContext.User; if (!user.Identity.IsAuthenticated) { return; } var someService = context.HttpContext.RequestServices.GetService<ISomeService>(); var isAuthorized = someService.IsUserAuthorized(user.Identity.Name, _someFilterParameter); if (!isAuthorized) { context.Result = new StatusCodeResult((int)System.Net.HttpStatusCode.Forbidden); return; } } }
public class Startup { public void ConfigureServices(IServiceCollection services) { services.Configure<AuthorizationOptions>(options => { options.AddPolicy("ManageStore", policy => policy.RequireClaim("Action", "ManageStore")); }); } } public class StoreController : Controller { [Authorize(Policy = "ManageStore"), HttpGet] public async Task<IActionResult> Manage() { ... } }
public abstract class AttributeAuthorizationHandler<TRequirement, TAttribute> : AuthorizationHandler<TRequirement> where TRequirement : IAuthorizationRequirement where TAttribute : Attribute { protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, TRequirement requirement) { var attributes = new List<TAttribute>(); var action = (context.Resource as AuthorizationFilterContext)?.ActionDescriptor as ControllerActionDescriptor; if (action != null) { attributes.AddRange(GetAttributes(action.ControllerTypeInfo.UnderlyingSystemType)); attributes.AddRange(GetAttributes(action.MethodInfo)); } return HandleRequirementAsync(context, requirement, attributes); } protected abstract Task HandleRequirementAsync(AuthorizationHandlerContext context, TRequirement requirement, IEnumerable<TAttribute> attributes); private static IEnumerable<TAttribute> GetAttributes(MemberInfo memberInfo) { return memberInfo.GetCustomAttributes(typeof(TAttribute), false).Cast<TAttribute>(); } }
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)] public class PermissionAttribute : AuthorizeAttribute { public string Name { get; } public PermissionAttribute(string name) : base("Permission") { Name = name; } }
public class PermissionAuthorizationRequirement : IAuthorizationRequirement { }
public class PermissionAuthorizationHandler : AttributeAuthorizationHandler<PermissionAuthorizationRequirement, PermissionAttribute> { protected override async Task HandleRequirementAsync(AuthorizationHandlerContext context, PermissionAuthorizationRequirement requirement, IEnumerable<PermissionAttribute> attributes) { foreach (var permissionAttribute in attributes) { if (!await AuthorizeAsync(context.User, permissionAttribute.Name)) { return; } } context.Succeed(requirement); } private Task<bool> AuthorizeAsync(ClaimsPrincipal user, string permission) { } }
services.AddSingleton<IAuthorizationHandler, PermissionAuthorizationHandler>(); services.AddAuthorization(options => { options.AddPolicy("Permission", policyBuilder => { policyBuilder.Requirements.Add(new PermissionAuthorizationRequirement()); }); });
[Permission("AccessCustomers")] public class CustomersController { [Permission("AddCustomer")] IActionResult AddCustomer([FromBody] Customer customer) { } }
public enum PermissionItem { User, Product, Contact, Review, Client } public enum PermissionAction { Read, Create, } public class AuthorizeAttribute : TypeFilterAttribute { public AuthorizeAttribute(PermissionItem item, PermissionAction action) : base(typeof(AuthorizeActionFilter)) { Arguments = new object[] { item, action }; } } public class AuthorizeActionFilter : IAsyncActionFilter { private readonly PermissionItem _item; private readonly PermissionAction _action; public AuthorizeActionFilter(PermissionItem item, PermissionAction action) { _item = item; _action = action; } public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next) { bool isAuthorized = MumboJumboFunction(context.HttpContext.User, _item, _action); if (!isAuthorized) { context.Result = new UnauthorizedResult(); } else { await next(); } } } public class UserController : BaseController { private readonly DbContext _context; public UserController( DbContext context) : base() { _logger = logger; } [Authorize(PermissionItem.User, PermissionAction.Read)] public async Task<IActionResult> Index() { return View(await _context.User.ToListAsync()); } }
private void Somewhere() { ServicePointManager.ServerCertificateValidationCallback += new RemoteCertificateValidationCallback(AlwaysGoodCertificate); } private static bool AlwaysGoodCertificate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors policyErrors) { return true; }
ServicePointManager.Expect100Continue = true; ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072;
ServicePointManager.Expect100Continue = true; ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12 | SecurityProtocolType.Ssl3; HttpWebRequest request = (HttpWebRequest)WebRequest.Create("https:
HttpWebRequest request = (HttpWebRequest)WebRequest.Create("https: ServicePointManager.Expect100Continue = true; ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12 | SecurityProtocolType.Ssl3;
ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12; new WebClient().DownloadData("https:
ServicePointManager.Expect100Continue = true; ServicePointManager.DefaultConnectionLimit = 9999; ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12 | SecurityProtocolType.Ssl3;
public string DownloadSite(string RefinedLink) { try { Uri address = new Uri(RefinedLink); ServicePointManager.ServerCertificateValidationCallback = delegate { return true; }; ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3; System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12; using (WebClient webClient = new WebClient()) { var stream = webClient.OpenRead(address); using (StreamReader sr = new StreamReader(stream)) { var page = sr.ReadToEnd(); return page; } } } catch (Exception e) { log.Error("DownloadSite - error Lin = " + RefinedLink, e); return null; } }
WebRequest webRequest = WebRequest.Create(@"https: webRequest.ContentType = "text/html"; webRequest.Method = "POST"; string body = "..."; byte[] bytes = Encoding.ASCII.GetBytes(body); webRequest.ContentLength = bytes.Length; var os = webRequest.GetRequestStream(); os.Write(bytes, 0, bytes.Length); os.Close(); webRequest.Timeout = 0; WebResponse webResponse = webRequest.GetResponse();
ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3;
Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\.NETFramework\v4.0.30319] "SchUseStrongCrypto"=dword:00000001 [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\v4.0.30319] "SchUseStrongCrypto"=dword:00000001
ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072; XmlReader r = XmlReader.Create(url); SyndicationFeed albums = SyndicationFeed.Load(r);
The following fatal alert was generated: 40. The internal error state is 808.
ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = ".nuget", ".nuget", "{F4AEBB8B-A367-424E-8B14-F611C9667A85}" ProjectSection(SolutionItems) = preProject .nuget\NuGet.Config = .nuget\NuGet.Config .nuget\NuGet.exe = .nuget\NuGet.exe .nuget\NuGet.targets = .nuget\NuGet.targets EndProjectSection EndProject
<Import Project="$(SolutionDir)\.nuget\NuGet.targets" Condition="Exists( <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild"> <PropertyGroup> <ErrorText>This project references NuGet package(s) that are missing on this computer. Enable NuGet Package Restore to download them. For more information, see http: </PropertyGroup> <Error Condition="!Exists( </Target>
<Window x:Class="FixNuGetProblemsInVs2015.MainWindow" xmlns="http: xmlns:x="http: xmlns:d="http: xmlns:mc="http: xmlns:local="clr-namespace:FixNuGetProblemsInVs2015" mc:Ignorable="d" Title="Fix NuGet Packages problems in Visual Studio 2015 (By Eric Ouellet)" Height="350" Width="525"> <Grid> <Grid.RowDefinitions> <RowDefinition Height="Auto"></RowDefinition> <RowDefinition Height="Auto"></RowDefinition> <RowDefinition Height="*"></RowDefinition> <RowDefinition Height="Auto"></RowDefinition> </Grid.RowDefinitions> <Grid.ColumnDefinitions> <ColumnDefinition Width="Auto"></ColumnDefinition> <ColumnDefinition Width="10"></ColumnDefinition> <ColumnDefinition></ColumnDefinition> </Grid.ColumnDefinitions> <TextBlock Grid.Row="0" Grid.Column="0">Root directory of projects</TextBlock> <Grid Grid.Row="0" Grid.Column="2"> <Grid.ColumnDefinitions> <ColumnDefinition></ColumnDefinition> <ColumnDefinition Width="Auto"></ColumnDefinition> </Grid.ColumnDefinitions> <TextBox Grid.Column="0" Name="DirProjects"></TextBox> <Button Grid.Column="1" VerticalAlignment="Bottom" Name="BrowseDirProjects" Click="BrowseDirProjectsOnClick">Browse...</Button> </Grid> <!--<TextBlock Grid.Row="1" Grid.Column="0">Directory of NuGet Packages</TextBlock> <Grid Grid.Row="1" Grid.Column="2"> <Grid.ColumnDefinitions> <ColumnDefinition></ColumnDefinition> <ColumnDefinition Width="Auto"></ColumnDefinition> </Grid.ColumnDefinitions> <TextBox Grid.Column="0" Name="DirPackages"></TextBox> <Button Grid.Column="1" Name="BrowseDirPackages" Click="BrowseDirPackagesOnClick">Browse...</Button> </Grid>--> <TextBox Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="3" Name="TxtLog" IsReadOnly="True"></TextBox> <Button Grid.Row="3" Grid.Column="0" Click="ButtonRevertOnClick">Revert back</Button> <Button Grid.Row="3" Grid.Column="2" Click="ButtonFixOnClick">Fix</Button> </Grid> </Window> using System; using System.Collections.Generic; using System.ComponentModel; using System.Diagnostics; using System.IO; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Forms; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Xml; using System.Xml.Linq; using Application = System.Windows.Application; using MessageBox = System.Windows.MessageBox; namespace FixNuGetProblemsInVs2015 { public partial class MainWindow : Window { public MainWindow() { InitializeComponent(); DirProjects.Text = @"c:\prj"; } private void BrowseDirProjectsOnClick(object sender, RoutedEventArgs e) { FolderBrowserDialog dlg = new FolderBrowserDialog(); dlg.SelectedPath = DirProjects.Text; if (dlg.ShowDialog() == System.Windows.Forms.DialogResult.OK) { DirProjects.Text = dlg.SelectedPath; } } private void ButtonFixOnClick(object sender, RoutedEventArgs e) { DoJob(false); } private void ButtonRevertOnClick(object sender, RoutedEventArgs e) { DoJob(true); } private void DoJob(bool revert = false) { TxtLog.Text = ""; string dirProjects = DirProjects.Text; if (!Directory.Exists(dirProjects)) { MessageBox.Show("Projects directory does not exists: " + dirProjects); return; } RecurseFolder(dirProjects, revert); } private void RecurseFolder(string dirProjects, bool revert = false) { if (revert) { Revert(dirProjects); } else { FixFolder(dirProjects); } foreach (string subfolder in Directory.EnumerateDirectories(dirProjects)) { RecurseFolder(subfolder, revert); } } private const string BackupSuffix = ".fix_nuget_backup"; private void Revert(string dirProject) { foreach (string filename in Directory.EnumerateFiles(dirProject)) { if (filename.ToLower().EndsWith(BackupSuffix)) { string original = filename.Substring(0, filename.Length - BackupSuffix.Length); if (File.Exists(original)) { File.Delete(original); } File.Move(filename, original); Log("File reverted: " + filename + " ==> " + original); } } } private void FixFolder(string dirProject) { BackupFile(System.IO.Path.Combine(dirProject, "nuget.targets")); BackupFile(System.IO.Path.Combine(dirProject, "nuget.exe")); foreach (string filename in Directory.EnumerateFiles(dirProject)) { if (filename.ToLower().EndsWith(".csproj")) { FromProjectFileRemoveNugetTargets(filename); } } } private void BackupFile(string path) { if (File.Exists(path)) { string backup = path + BackupSuffix; if (!File.Exists(backup)) { File.Move(path, backup); Log("File backup: " + backup); } else { Log("Project has already a backup: " + backup); } } } private void FromProjectFileRemoveNugetTargets(string prjFilename) { XDocument xml = XDocument.Load(prjFilename); List<XElement> elementsToRemove = new List<XElement>(); foreach (XElement element in xml.Descendants()) { if (element.Name.LocalName == "Import") { var att = element.Attribute("Project"); if (att != null) { if (att.Value.Contains("NuGet.targets")) { elementsToRemove.Add(element); } } } if (element.Name.LocalName == "Target") { var att = element.Attribute("Name"); if (att != null && att.Value == "EnsureNuGetPackageBuildImports") { elementsToRemove.Add(element); } } } if (elementsToRemove.Count > 0) { elementsToRemove.ForEach(element => element.Remove()); BackupFile(prjFilename); xml.Save(prjFilename); Log("Project updated: " + prjFilename); } } private void Log(string msg) { TxtLog.Text += msg + "\r\n"; } } }
public class SampleViewModel { public string SampleString { get; set; } public MvcHtmlString SampleHtmlString { get; set; } }
public class SampleViewModel { public string SampleString { get; set; } public HtmlString SampleHtmlString { get; set; } }
<!-- this will be encoded --> <div>@Model.SampleString</div> <!-- this will not be encoded --> <div>@Html.Raw(Model.SampleString)</div> <!-- this will not be encoded either --> <div>@Model.SampleHtmlString</div>
@Html.Raw(Html.Encode(myString).Replace("\n", "<br/>"))
@Html.ActionLink(HttpUtility.HtmlDecode("myString","ActionName",..)
System.Configuration.ConfigurationManager. ConnectionStrings["connectionStringName"].ConnectionString;
using System.Configuration; string cs = ConfigurationManager.ConnectionStrings["connectionStringName"].ConnectionString;
Imports System.Configuration Dim cs as String = ConfigurationManager.ConnectionStrings("connectionStringName").ConnectionString
using System.Configuration; ... string conn = ConfigurationManager.ConnectionStrings["ConnectionName"].ConnectionString;
ConfigurationManager.ConnectionStrings("SQLServer").ConnectionString
ConfigurationManager.ConnectionStrings["SQLServer"].ConnectionString
using System.Configuration; string conn = ConfigurationManager.ConnectionStrings["ConStringName"].ToString();
private string ReturnConnectionString() { return ConfigurationManager.ConnectionStrings["DBWebConfigString"].ConnectionString; }
<add name="DBWebConfigString" connectionString="....." /> </connectionStrings>
using System; using System.Collections.Generic; using System.Configuration; using System.Data.SqlClient; using System.Drawing; using System.Linq; using System.Web; using System.Web.UI; using System.Web.UI.DataVisualization.Charting; using System.Web.UI.WebControls;
string constring = ConfigurationManager.ConnectionStrings["ABCD"].ConnectionString; using (SqlConnection con = new SqlConnection(constring))
<connectionStrings> <add name="ABCD" connectionString="Data Source=DESKTOP-SU3NKUU\MSSQLSERVER2016;Initial Catalog=TESTKISWRMIP;Integrated Security=True" providerName="System.Data.SqlClient"/> </connectionStrings>
using System.Configuration; string connString = ConfigurationManager.ConnectionStrings["ConStringName"].ToString();
<UseIIS>true</UseIIS> by <UseIIS>false</UseIIS> <UseIISExpress>true</UseIISExpress> by <UseIISExpress>false</UseIISExpress>
<ProjectGuid>{3AA499DF-4A65-43B7-8965-D08A4C811834}</ProjectGuid> <ProjectTypeGuids>{349c5851-65df-11da-9384-00065b846f21};{fae04ec0-301f-11d3-bf4b-00c04f79efbc}</ProjectTypeGuids>
Internet Information Services > World Wide Web Services > Application Development Features > ASP.NET 4.5
SimpleWorkerRequest swr = new SimpleWorkerRequest(string.Empty, string.Empty, tw); HttpRuntime.ProcessRequest(swr);
c:\Windows\Microsoft.NET\Framework\v4.0.30319\aspnet_regiis.exe -i
c:\Windows\Microsoft.NET\Framework\v4.0.30319\aspnet_regiis.exe -i
c:\Windows\Microsoft.NET\Framework64\v4.0.30319\aspnet_regiis.exe -I
c:\Windows\Microsoft.NET\Framework64\v4.0.30319\aspnet_regiis.exe -i
<applicationInitialization doAppInitAfterRestart="true" skipManagedModules="false"> <add initializationPage="/docs" /> </applicationInitialization>
<system.webServer> <modules> <remove name="WebDAVModule"/> </modules> <handlers> <remove name="WebDAV" /> </handlers> <system.webServer>
<?xml version="1.0" encoding="UTF-8"?> <configuration> <system.webServer> <applicationInitialization skipManagedModules="false" doAppInitAfterRestart="true"> <add initializationPage="/" /> </applicationInitialization> ...
protected override void Render(HtmlTextWriter writer) { foreach (string val in allPossibleListBoxValues) { Page.ClientScript.RegisterForEventValidation(myListBox.UniqueID, val); } base.Render(writer); }
protected override void Render(HtmlTextWriter writer) { foreach (ListItem i in listBoxAll.Items) { Page.ClientScript.RegisterForEventValidation(listBoxSelected.UniqueID, i.Value); } base.Render(writer); }
<customErrors mode="On" defaultRedirect="~/Views/Shared/Error.cshtml"> <error statusCode="403" redirect="~/Views/Shared/UnauthorizedAccess.cshtml" /> <error statusCode="404" redirect="~/Views/Shared/FileNotFound.cshtml" /> </customErrors>
public static void RegisterGlobalFilters(GlobalFilterCollection filters) { filters.Add(new CustomHandleErrorAttribute()); filters.Add(new AuthorizeAttribute()); }
public class ErrorController : Controller { public ViewResult Index() { return View("Error"); } public ViewResult NotFound() { Response.StatusCode = 404; return View("NotFound"); } }
public class ErrorPageController : Controller { public ActionResult Oops(int id) { Response.StatusCode = id; return View(); } }
protected void Application_Error(Object sender, EventArgs e) { var exception = Server.GetLastError(); if (exception is HttpUnhandledException) { Server.Transfer("~/Error.aspx"); } if (exception != null) { Server.Transfer("~/Error.aspx"); } try { HttpApplication app = sender as HttpApplication; app.Response.Filter = null; } catch { } }
public class ErrorPageController : Controller { public ActionResult Index() { return View(); } public ActionResult Oops(int id) { Response.StatusCode = id; return View(); } }
public static void RegisterGlobalFilters(GlobalFilterCollection filters) { }
<customErrors mode="On" defaultRedirect="~/ErrorPage/Oops"> <error redirect="~/ErrorPage/Oops/404" statusCode="404" /> <error redirect="~/ErrorPage/Oops/500" statusCode="500" /> </customErrors>
protected void Application_Error(Object sender, EventArgs e) { var exception = Server.GetLastError(); if (exception != null) { Server.TransferRequest("~/Error?Message=" + exception.Message); } }
public class ErrorController : Controller { public ActionResult Index(string Message) { ViewBag.Message = Message; return View(); } }
<!DOCTYPE html> <html> <head> <title>Error</title> </head> <body> <h2>My Error</h2> <p>@ViewBag.Message</p> </body> </html>
public class FilterConfig { public static void RegisterGlobalFilters(GlobalFilterCollection filters) { } }
@{ ViewBag.Title = "Error"; Layout = "~/Views/Shared/_Layout.cshtml"; } <h2>Error</h2> <hr/> <div style="min-height: 400px;"> @Html.ValidationMessage("Error") <br /> <br /> <button onclick="Error_goBack()" class="k-button">Go Back</button> <script> function Error_goBack() { window.history.back() } </script> </div>
public class HomeController : BaseController { public ActionResult Index() { return View(); } public ActionResult Error() { return this.View(); } ... }
public class BaseController : Controller { public BaseController() { } protected override void OnActionExecuted(ActionExecutedContext filterContext) { if (filterContext.Result is ViewResult) { if (filterContext.Controller.TempData.ContainsKey("Error")) { var modelState = filterContext.Controller.TempData["Error"] as ModelState; filterContext.Controller.ViewData.ModelState.Merge(new ModelStateDictionary() { new KeyValuePair<string, ModelState>("Error", modelState) }); filterContext.Controller.TempData.Remove("Error"); } } if ((filterContext.Result is RedirectResult) || (filterContext.Result is RedirectToRouteResult)) { if (filterContext.Controller.ViewData.ModelState.ContainsKey("Error")) { filterContext.Controller.TempData["Error"] = filterContext.Controller.ViewData.ModelState["Error"]; } } base.OnActionExecuted(filterContext); } }
public class MyController : BaseController { public ActionResult Index() { return View(); } public ActionResult Details(int id) { if (id != 5) { ModelState.AddModelError("Error", "Specified row does not exist."); return RedirectToAction("Error", "Home"); } else { return View("Specified row exists."); } } }
<customErrors mode="On"> <error redirect="/error/401" statusCode="401" /> <error redirect="/error/500" statusCode="500" /> </customErrors>
<system.web> <customErrors mode="RemoteOnly"> <error statusCode="404" redirect="/page-not-found" /> <error statusCode="500" redirect="/internal-server-error" /> </customErrors> </system.web>
<system.webServer> <httpErrors errorMode="DetailedLocalOnly"> <remove statusCode="404"/> <error statusCode="404" path="/page-not-found" responseMode="Redirect"/> <remove statusCode="500"/> <error statusCode="500" path="/internal-server-error" responseMode="Redirect"/> </system.webServer>
<system.webServer> <httpErrors errorMode="Custom" existingResponse="Replace"> <remove statusCode="404"/> <remove statusCode="500"/> <error statusCode="404" responseMode="ExecuteURL" path="/Error/NotFound"/> <error statusCode="500" responseMode="ExecuteURL"path="/Error/ErrorPage"/> </httpErrors>
public class ErrorController : Controller { // [GET("/Error/NotFound")] public ActionResult NotFound() { Response.StatusCode = 404; return View(); } [GET("/Error/ErrorPage")] public ActionResult ErrorPage() { Response.StatusCode = 500; return View(); } }
<appSettings> <add key ="K1" value="Debendra Dash"/> </appSettings>
<appSettings> <add key="K1" value="value dynamicly from Realease" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" /> </appSettings>
<appSettings> <add key="KeyA" value="ValA"/> <add key="KeyB" value="ValB"/> </appSettings>
<appSettings xdt:Transform="Replace"> <add key="ProdKeyA" value="ProdValA"/> <add key="ProdKeyB" value="ProdValB"/> <add key="ProdKeyC" value="ProdValC"/> </appSettings>
<appSettings> <add key="ProdKeyA" value="ProdValA"/> <add key="ProdKeyB" value="ProdValB"/> <add key="ProdKeyC" value="ProdValC"/> </appSettings>
Response.Redirect(url, false); Context.ApplicationInstance.CompleteRequest();
public void btnLogin_Click(UserLoginViewModel model) { bool ValidLogin = false; try { using (Context Db = new Context) { User User = new User(); if (String.IsNullOrEmpty(model.EmailAddress)) ValidLogin = false; else User = Db.FirstOrDefault(x => x.EmailAddress == model.EmailAddress); if (User != null && User.PasswordHash == Hashing.CreateHash(model.Password)) ValidLogin = true; } } catch (Exception ex) { throw ex; } if (ValidLogin) { GenerateCookie(User); Response.Redirect("~/Members/Default.aspx"); } else { } }
public static void Redirect(string VPathRedirect, global::System.Web.UI.Page Sender) { Sender.Response.Redirect(VPathRedirect, false); global::System.Web.UI.HttpContext.Current.ApplicationInstance.CompleteRequest(); }
public static void ResponseRedirect(HttpResponse iResponse, string iUrl) { ResponseRedirect(iResponse, iUrl, HttpContext.Current); } public static void ResponseRedirect(HttpResponse iResponse, string iUrl, HttpContext iContext) { iResponse.Redirect(iUrl, false); iContext.ApplicationInstance.CompleteRequest(); iResponse.BufferOutput = true; iResponse.Flush(); iResponse.Close(); }
try { Response.Redirect("") } catch(ThreadAbortException){} catch(Exception ex) { }
catch (ThreadAbortException ex1) { writeToLog(ex1.Message); } catch(Exception ex) { writeToLog(ex.Message); }
[ConfigurationPropertyAttribute("maxRequestLength", DefaultValue = )]
<system.web> <!-- maxRequestLength for asp.net, in KB --> <httpRuntime maxRequestLength="15360" ></httpRuntime> </system.web>
<system.web> <!-- maxRequestLength for asp.net, in KB --> <httpRuntime maxRequestLength="15360" ></httpRuntime> </system.web> <system.webServer> <security> <requestFiltering> <!-- maxAllowedContentLength, for IIS, in bytes --> <requestLimits maxAllowedContentLength="15728640" ></requestLimits> </requestFiltering> </security> </system.webServer>
<system.web> <httpRuntime maxRequestLength="600000"/> </system.web>
<system.web> <compilation debug="true" targetFramework="4.5" /> <httpRuntime targetFramework="4.5" maxRequestLength="2147483647" executionTimeout="1600" requestLengthDiskThreshold="2147483647" /> </system.web> <system.webServer> <security> <requestFiltering> <requestLimits maxAllowedContentLength="2147483647" /> </requestFiltering> </security> </system.webServer>
<httpRuntime targetFramework="4.6.1" requestValidationMode="2.0" maxRequestLength="10485760" />
<httpRuntime maxRequestLength="2048576000" /> <sessionState timeout="3600" />
<!-- 3GB Files / in kilobyte (3072*1024) --> <httpRuntime targetFramework="4.5" maxRequestLength="3145728"/>
<security> <requestFiltering> <!-- 3GB Files / in byte (3072*1024*1024) --> <requestLimits maxAllowedContentLength="3221225472" /> </requestFiltering> </security>
<location path="YourAreaName/YourControllerName>/YourActionName>"> <system.web> <!-- 15MB maxRequestLength for asp.net, in KB 15360 --> <httpRuntime maxRequestLength="15360" /> </system.web> <system.webServer> <security> <requestFiltering> <!-- 15MB maxAllowedContentLength, for IIS, in bytes 15728640 --> <requestLimits maxAllowedContentLength="15728640" /> </requestFiltering> </security> </system.webServer> </location>
string authority = Request.Url.GetComponents(UriComponents.SchemeAndServer,UriFormat.Unescaped)
namespace ExtensionMethods { public static class JSONHelper { public static string ToJSON(this object obj) { JavaScriptSerializer serializer = new JavaScriptSerializer(); return serializer.Serialize(obj); } public static string ToJSON(this object obj, int recursionDepth) { JavaScriptSerializer serializer = new JavaScriptSerializer(); serializer.RecursionLimit = recursionDepth; return serializer.Serialize(obj); } } }
using ExtensionMethods; ... List<Person> people = new List<Person>{ new Person{ID = 1, FirstName = "Scott", LastName = "Gurthie"}, new Person{ID = 2, FirstName = "Bill", LastName = "Gates"} }; string jsonString = people.ToJSON();
Product product = new Product(); product.Name = "Apple"; product.Expiry = new DateTime(2008, 12, 28); product.Price = 3.99M; product.Sizes = new string[] { "Small", "Medium", "Large" }; string json = JsonConvert.SerializeObject(product);
public static string ToJson<T>( T value, Encoding encoding) { var serializer = new DataContractJsonSerializer(typeof(T)); using (var stream = new MemoryStream()) { using (var writer = JsonReaderWriterFactory.CreateJsonWriter(stream, encoding)) { serializer.WriteObject(writer, value); } return encoding.GetString(stream.ToArray()); } }
var customer = new Customer { Name="Joe Bloggs", Age=31 }; var json = JsonSerializer.SerializeToString(customer); var fromJson = JsonSerializer.DeserializeFromString<Customer>(json);
class templateRequest { public String[] registration_ids; public Data data; public class Data { public String message; public String tickerText; public String contentTitle; public Data(String message, String tickerText, string contentTitle) { this.message = message; this.tickerText = tickerText; this.contentTitle = contentTitle; } }; }
List<String> ids = new List<string>() { "id1", "id2" }; templateRequest request = new templeteRequest(); request.registration_ids = ids.ToArray(); request.data = new templateRequest.Data("Your message", "Your ticker", "Your content"); string json = new JavaScriptSerializer().Serialize(request);
json = "{\"registration_ids\":[\"id1\",\"id2\"],\"data\":{\"message\":\"Your message\",\"tickerText\":\"Your ticket\",\"contentTitle\":\"Your content\"}}"
[WebMethod(CacheDuration = 180)] public List<latlon> GetData(int id) { var data = from p in db.property where p.id == id select new latlon { lat = p.lat, lon = p.lon }; return data.ToList(); } public class latlon { public string lat { get; set; } public string lon { get; set; } }
function getlatlon(propertyid) { var mydata; $.ajax({ url: "getData.asmx/GetLatLon", type: "POST", data: "{ async: false, contentType: "application/json;", dataType: "json", success: function (data, textStatus, jqXHR) { // mydata = data; }, error: function (xmlHttpRequest, textStatus, errorThrown) { console.log(xmlHttpRequest.responseText); console.log(textStatus); console.log(errorThrown); } }); return mydata; } latlondata = getlatlon(id);
{"d":[{"__type":"MapData+latlon","lat":"40.7031420","lon":"-80.6047970}]}
public class dummyObject { public string fake { get; set; } public int id { get; set; } public dummyObject() { fake = "dummy"; id = 5; } public override string ToString() { StringBuilder sb = new StringBuilder(); sb.Append( sb.Append(id); sb.Append( sb.Append(JSONEncoders.EncodeJsString(fake)); sb.Append( return sb.ToString(); } } dummyObject[] dummys = new dummyObject[2]; dummys[0] = new dummyObject(); dummys[1] = new dummyObject(); dummys[0].fake = "mike"; dummys[0].id = 29; string result = JSONEncoders.EncodeJsObjectArray(dummys);
string input = "[14,4,[14,\"data\"],[[5,\"10.186.122.15\"],[6,\"10.186.122.16\"]]]"; string result = input.PrettyPrintJson();
[ 14, 4, [ 14, "data" ], [ [ 5, "10.186.122.15" ], [ 6, "10.186.122.16" ] ] ]
var items = from c in contacts select new ListItem { Value = c.ContactId, Text = c.Name }; var items = from c in contacts select new ListItem { Value = c.ContactId.ToString(), Text = c.Name };
var items = from c in contacts select new ListItem { Value = SqlFunctions.StringConvert((double)c.ContactId).Trim(), Text = c.Name };
var items = from c in contacts select new { Value = c.ContactId, Text = c.Name }; var itemList = new SelectList(); foreach (var item in items) { itemList.Add(new SelectListItem{ Value = item.ContactId, Text = item.Name }); }
var items = from c in contacts.AsEnumerable() select new ListItem { Value = c.ContactId.ToString(), Text = c.Name };
public static IEnumerable<SelectListItem> GetCustomerList() { using (SiteDataContext db = new SiteDataContext()) { var list = from l in db.Customers.AsEnumerable() orderby l.CompanyName select new SelectListItem { Value = l.CustomerID.ToString(), Text = l.CompanyName }; return list.ToList(); } }
var data = (from c in Context.Contacts select new { c.ContactID, c.FullName, c.LocationID }).ToArray(); var data2 = (from c in data select new { c.FullName, ContactLocationKey = c.ContactID.ToString() + "." + c.LocationID.ToString(), Key2 = string.Join(".", c.ContactID.ToString(), c.LocationID.ToString()) }).ToArray();
var selectList = db.NewsClasses.ToList<NewsClass>().Select(a => new SelectListItem({ Text = a.ClassName, Value = a.ClassId.ToString() });
IEnumerable<SelectListItem> producers = new SelectList(Services.GetProducers(), "ID", "Name", model.ProducerID);
var items = contact.Distinct().OrderBy(c => c.Name) .Select( c => new ListItem { Value = c.ContactId.ToString(), Text = c.Name });
public class BtoSelectedListItem : SelectListItem { public int IntValue { get { return string.IsNullOrEmpty(Value) ? 0 : int.Parse(Value); } set { Value = value.ToString(); } } }
var items = from c in contacts select new ListItem { Value = (int)ContractId Text = c.Name };
public partial class Contact{ public string ContactIdString { get{ return this.ContactId.ToString(); } } }
var items = from c in contacts select new ListItem { Value = c.ContactIdString, Text = c.Name };
var items = from c in contacts select new ListItem { Value = String.Concat(c.ContactId), Text = c.Name };
var items = from c in contacts select new ListItem { Value = Convert.ToString(c.ContactId), Text = c.Name };
using System; using System.Data; using System.Configuration; using System.Web; using System.Web.Security; using System.Web.UI; using System.Web.UI.WebControls; using System.Web.UI.WebControls.WebParts; using System.Web.UI.HtmlControls; using System.ServiceModel.Web; using System.Runtime.Serialization; using System.Runtime.Serialization.Json; using System.IO; using System.Text; public partial class _Default : System.Web.UI.Page { protected void Page_Load(object sender, EventArgs e) { GoogleSearchResults g1 = new GoogleSearchResults(); const string json = @"{""responseData"": {""results"":[{""GsearchResultClass"":""GwebSearch"",""unescapedUrl"":""http: g1 = JSONHelper.Deserialise<GoogleSearchResults>(json); Response.Write(g1.content); } } public class JSONHelper { public static T Deserialise<T>(string json) { T obj = Activator.CreateInstance<T>(); MemoryStream ms = new MemoryStream(Encoding.Unicode.GetBytes(json)); DataContractJsonSerializer serialiser = new DataContractJsonSerializer(obj.GetType()); ms.Close(); return obj; } } [Serializable] public class GoogleSearchResults { public GoogleSearchResults() { } public GoogleSearchResults(string _unescapedUrl, string _url, string _visibleUrl, string _cacheUrl, string _title, string _titleNoFormatting, string _content) { this.unescapedUrl = _unescapedUrl; this.url = _url; this.visibleUrl = _visibleUrl; this.cacheUrl = _cacheUrl; this.title = _title; this.titleNoFormatting = _titleNoFormatting; this.content = _content; } string _unescapedUrl; string _url; string _visibleUrl; string _cacheUrl; string _title; string _titleNoFormatting; string _content; [DataMember] public string unescapedUrl { get { return _unescapedUrl; } set { _unescapedUrl = value; } } [DataMember] public string url { get { return _url; } set { _url = value; } } [DataMember] public string visibleUrl { get { return _visibleUrl; } set { _visibleUrl = value; } } [DataMember] public string cacheUrl { get { return _cacheUrl; } set { _cacheUrl = value; } } [DataMember] public string title { get { return _title; } set { _title = value; } } [DataMember] public string titleNoFormatting { get { return _titleNoFormatting; } set { _titleNoFormatting = value; } } [DataMember] public string content { get { return _content; } set { _content = value; } } }
GoogleSearchResults g1 = JsonConvert.DeserializeObject<GoogleSearchResults>(json);
public static T Deserialize<T>(string json) { using (MemoryStream ms = new MemoryStream(Encoding.Unicode.GetBytes(json))) { DataContractJsonSerializer serializer = new DataContractJsonSerializer(typeof(T)); return (T)serializer.ReadObject(ms); } }
public static string Serialize<T>(T obj) { DataContractJsonSerializer serializer = new DataContractJsonSerializer(obj.GetType()); using (MemoryStream ms = new MemoryStream()) { serializer.WriteObject(ms, obj); return Encoding.Default.GetString(ms.ToArray()); } }
[DataMember] public string unescapedUrl { get { return unescapedUrl; } set { this.unescapedUrl = value; } }
string _unescapedUrl; [DataMember] public string unescapedUrl { get { return _unescapedUrl; } set { _unescapedUrl = value; } }
[DataContract] public class GoogleSearchResults { [DataMember] public ResponseData responseData { get; set; } } [DataContract] public class ResponseData { [DataMember] public IEnumerable<Results> results { get; set; } } [DataContract] public class Results { [DataMember] public string unescapedUrl { get; set; } [DataMember] public string url { get; set; } [DataMember] public string visibleUrl { get; set; } [DataMember] public string cacheUrl { get; set; } [DataMember] public string title { get; set; } [DataMember] public string titleNoFormatting { get; set; } [DataMember] public string content { get; set; } }
public static T Deserialise<T>(string json) { using (var ms = new MemoryStream(Encoding.Unicode.GetBytes(json))) { var serialiser = new DataContractJsonSerializer(typeof(T)); return (T)serialiser.ReadObject(ms); } }
public class DynamicJsonObject : DynamicObject { private IDictionary<string, object> Dictionary { get; set; } public DynamicJsonObject(IDictionary<string, object> dictionary) { this.Dictionary = dictionary; } public override bool TryGetMember(GetMemberBinder binder, out object result) { result = this.Dictionary[binder.Name]; if (result is IDictionary<string, object>) { result = new DynamicJsonObject(result as IDictionary<string, object>); } else if (result is ArrayList && (result as ArrayList) is IDictionary<string, object>) { result = new List<DynamicJsonObject>((result as ArrayList).ToArray().Select(x => new DynamicJsonObject(x as IDictionary<string, object>))); } else if (result is ArrayList) { result = new List<object>((result as ArrayList).ToArray()); } return this.Dictionary.ContainsKey(binder.Name); } }
public class DynamicJsonConverter : JavaScriptConverter { public override object Deserialize(IDictionary<string, object> dictionary, Type type, JavaScriptSerializer serializer) { if (dictionary == null) throw new ArgumentNullException("dictionary"); if (type == typeof(object)) { return new DynamicJsonObject(dictionary); } return null; } public override IDictionary<string, object> Serialize(object obj, JavaScriptSerializer serializer) { throw new NotImplementedException(); } public override IEnumerable<Type> SupportedTypes { get { return new ReadOnlyCollection<Type>(new List<Type>(new Type[] { typeof(object) })); } } }
JavaScriptSerializer jss = new JavaScriptSerializer(); jss.RegisterConverters(new JavaScriptConverter[] { new DynamicJsonConverter() }); dynamic glossaryEntry = jss.Deserialize(json, typeof(object)) as dynamic; Console.WriteLine("glossaryEntry.glossary.title: " + glossaryEntry.glossary.title); Console.WriteLine("glossaryEntry.glossary.GlossDiv.title: " + glossaryEntry.glossary.GlossDiv.title); Console.WriteLine("glossaryEntry.glossary.GlossDiv.GlossList.GlossEntry.ID: " + glossaryEntry.glossary.GlossDiv.GlossList.GlossEntry.ID); Console.WriteLine("glossaryEntry.glossary.GlossDiv.GlossList.GlossEntry.GlossDef.para: " + glossaryEntry.glossary.GlossDiv.GlossList.GlossEntry.GlossDef.para); foreach (var also in glossaryEntry.glossary.GlossDiv.GlossList.GlossEntry.GlossDef.GlossSeeAlso) { Console.WriteLine("glossaryEntry.glossary.GlossDiv.GlossList.GlossEntry.GlossDef.GlossSeeAlso: " + also); }
public override bool TryGetMember(GetMemberBinder binder, out object result) { if (!this.Dictionary.ContainsKey(binder.Name)) { result = ""; } else { result = this.Dictionary[binder.Name]; } if (result is IDictionary<string, object>) { result = new DynamicJsonObject(result as IDictionary<string, object>); } else if (result is ArrayList && (result as ArrayList) is IDictionary<string, object>) { result = new List<DynamicJsonObject>((result as ArrayList).ToArray().Select(x => new DynamicJsonObject(x as IDictionary<string, object>))); } else if (result is ArrayList) { result = new List<object>((result as ArrayList).ToArray()); } return true; }
using System; using System.Data; using System.Configuration; using System.Web; using System.Web.Security; using System.Web.UI; using System.Web.UI.WebControls; using System.Web.UI.WebControls.WebParts; using System.Web.UI.HtmlControls; using System.ServiceModel.Web; using System.Runtime.Serialization; using System.Runtime.Serialization.Json; using System.IO; using System.Text; using System.Collections.Generic; public partial class _Default : System.Web.UI.Page { protected void Page_Load(object sender, EventArgs e) { GoogleSearchResults g1 = new GoogleSearchResults(); const string json = @"{""responseData"": {""results"":[{""GsearchResultClass"":""GwebSearch"",""unescapedUrl"":""http: g1 = JSONHelper.Deserialise<GoogleSearchResults>(json); foreach (Pages x in g1.responseData.cursor.pages) { Response.Write(x.label); } } } public class JSONHelper { public static T Deserialise<T>(string json) { using (var ms = new MemoryStream(Encoding.Unicode.GetBytes(json))) { var serialiser = new DataContractJsonSerializer(typeof(T)); return (T)serialiser.ReadObject(ms); } } public static string Serialize<T>(T obj) { DataContractJsonSerializer serializer = new DataContractJsonSerializer(obj.GetType()); using (MemoryStream ms = new MemoryStream()) { serializer.WriteObject(ms, obj); return Encoding.Default.GetString(ms.ToArray()); } } } [DataContract] public class GoogleSearchResults { [DataMember] public ResponseData responseData { get; set; } [DataMember] public string responseStatus { get; set; } } public class ResponseData { [DataMember] public Cursor cursor { get; set; } [DataMember] public IEnumerable<Results> results { get; set; } } [DataContract] public class Cursor { [DataMember] public IEnumerable<Pages> pages { get; set; } } [DataContract] public class Pages { [DataMember] public string start { get; set; } [DataMember] public string label { get; set; } } [DataContract] public class Results { [DataMember] public string unescapedUrl { get; set; } [DataMember] public string url { get; set; } [DataMember] public string visibleUrl { get; set; } [DataMember] public string cacheUrl { get; set; } [DataMember] public string title { get; set; } [DataMember] public string titleNoFormatting { get; set; } [DataMember] public string content { get; set; } }
using System; using System.Runtime.Serialization; using System.Runtime.Serialization.Json; using System.IO; using System.Text; using System.Collections.Generic; namespace <YOUR_NAMESPACE> { public class JSONHelper { public static T Deserialise<T>(string json) { T obj = Activator.CreateInstance<T>(); MemoryStream ms = new MemoryStream(Encoding.Unicode.GetBytes(json)); DataContractJsonSerializer serialiser = new DataContractJsonSerializer(obj.GetType()); obj = (T)serialiser.ReadObject(ms); ms.Close(); return obj; } } public class Result { public string GsearchResultClass { get; set; } public string unescapedUrl { get; set; } public string url { get; set; } public string visibleUrl { get; set; } public string cacheUrl { get; set; } public string title { get; set; } public string titleNoFormatting { get; set; } public string content { get; set; } } public class Page { public string start { get; set; } public int label { get; set; } } public class Cursor { public string resultCount { get; set; } public Page[] pages { get; set; } public string estimatedResultCount { get; set; } public int currentPageIndex { get; set; } public string moreResultsUrl { get; set; } public string searchResultTime { get; set; } } public class ResponseData { public Result[] results { get; set; } public Cursor cursor { get; set; } } public class GoogleSearchResults { public ResponseData responseData { get; set; } public object responseDetails { get; set; } public int responseStatus { get; set; } } }
GoogleSearchResults googleResults = new GoogleSearchResults(); googleResults = JSONHelper.Deserialise<GoogleSearchResults>(jsonData); string contentOfFirstResult = googleResults.responseData.results[0].content;
public class GoogleSearchResults { [DataMember] public ResponseData responseData { get; set; } [DataMember] public string responseDetails { get; set; } [DataMember] public int responseStatus { get; set; } }
[DataContract] public class ResponseData { [DataMember] public List<Results> results { get; set; } }
var url = String.Format("http: var result = new System.Net.WebClient().DownloadString(url); var doc = XDocument.Load(new StringReader(result)); var DirectionsResponse = doc.Elements("DirectionsResponse").Select(l => new { Status = l.Elements("status").Select(q => q.Value).FirstOrDefault(), Route = l.Descendants("route").Select(n => new { Summary = n.Elements("summary").Select(q => q.Value).FirstOrDefault(), Leg = n.Elements("leg").ToList().Select(o => new { Step = o.Elements("step").Select(p => new { Travel_Mode = p.Elements("travel_mode").Select(q => q.Value).FirstOrDefault(), Start_Location = p.Elements("start_location").Select(q => new { Lat = q.Elements("lat").Select(r => r.Value).FirstOrDefault(), Lng = q.Elements("lng").Select(r => r.Value).FirstOrDefault() }).FirstOrDefault(), End_Location = p.Elements("end_location").Select(q => new { Lat = q.Elements("lat").Select(r => r.Value).FirstOrDefault(), Lng = q.Elements("lng").Select(r => r.Value).FirstOrDefault() }).FirstOrDefault(), Polyline = p.Elements("polyline").Select(q => new { Points = q.Elements("points").Select(r => r.Value).FirstOrDefault() }).FirstOrDefault(), Duration = p.Elements("duration").Select(q => new { Value = q.Elements("value").Select(r => r.Value).FirstOrDefault(), Text = q.Elements("text").Select(r => r.Value).FirstOrDefault(), }).FirstOrDefault(), Html_Instructions = p.Elements("html_instructions").Select(q => q.Value).FirstOrDefault(), Distance = p.Elements("distance").Select(q => new { Value = q.Elements("value").Select(r => r.Value).FirstOrDefault(), Text = q.Elements("text").Select(r => r.Value).FirstOrDefault(), }).FirstOrDefault() }).ToList(), Duration = o.Elements("duration").Select(p => new { Value = p.Elements("value").Select(q => q.Value).FirstOrDefault(), Text = p.Elements("text").Select(q => q.Value).FirstOrDefault() }).FirstOrDefault(), Distance = o.Elements("distance").Select(p => new { Value = p.Elements("value").Select(q => q.Value).FirstOrDefault(), Text = p.Elements("text").Select(q => q.Value).FirstOrDefault() }).FirstOrDefault(), Start_Location = o.Elements("start_location").Select(p => new { Lat = p.Elements("lat").Select(q => q.Value).FirstOrDefault(), Lng = p.Elements("lng").Select(q => q.Value).FirstOrDefault() }).FirstOrDefault(), End_Location = o.Elements("end_location").Select(p => new { Lat = p.Elements("lat").Select(q => q.Value).FirstOrDefault(), Lng = p.Elements("lng").Select(q => q.Value).FirstOrDefault() }).FirstOrDefault(), Start_Address = o.Elements("start_address").Select(q => q.Value).FirstOrDefault(), End_Address = o.Elements("end_address").Select(q => q.Value).FirstOrDefault() }).ToList(), Copyrights = n.Elements("copyrights").Select(q => q.Value).FirstOrDefault(), Overview_polyline = n.Elements("overview_polyline").Select(q => new { Points = q.Elements("points").Select(r => r.Value).FirstOrDefault() }).FirstOrDefault(), Waypoint_Index = n.Elements("waypoint_index").Select(o => o.Value).ToList(), Bounds = n.Elements("bounds").Select(q => new { SouthWest = q.Elements("southwest").Select(r => new { Lat = r.Elements("lat").Select(s => s.Value).FirstOrDefault(), Lng = r.Elements("lng").Select(s => s.Value).FirstOrDefault() }).FirstOrDefault(), NorthEast = q.Elements("northeast").Select(r => new { Lat = r.Elements("lat").Select(s => s.Value).FirstOrDefault(), Lng = r.Elements("lng").Select(s => s.Value).FirstOrDefault() }).FirstOrDefault(), }).FirstOrDefault() }).FirstOrDefault() }).FirstOrDefault();
{ "user": { "name": "asdf", "teamname": "b", "email": "c", "players": ["1", "2"] } }
[WebMethod] public static void SaveTeam(Object user) { }
public class User { public string name { get; set; } public string teamname { get; set; } public string email { get; set; } public Array players { get; set; } }
public class User { public User(string json) { JObject jObject = JObject.Parse(json); JToken jUser = jObject["user"]; name = (string) jUser["name"]; teamname = (string) jUser["teamname"]; email = (string) jUser["email"]; players = jUser["players"].ToArray(); } public string name { get; set; } public string teamname { get; set; } public string email { get; set; } public Array players { get; set; } } private void Run() { string json = @"{""user"":{""name"":""asdf"",""teamname"":""b"",""email"":""c"",""players"":[""1"",""2""]}}"; User user = new User(json); Console.WriteLine("Name : " + user.name); Console.WriteLine("Teamname : " + user.teamname); Console.WriteLine("Email : " + user.email); Console.WriteLine("Players:"); foreach (var player in user.players) Console.WriteLine(player); }
Mycustomclassname oMycustomclassname = Newtonsoft.Json.JsonConvert.DeserializeObject<Mycustomclassname>(jsonString);
var oMycustomclassname = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(jsonString);
public static string Serialize<T>(T obj) { DataContractJsonSerializer serializer = new DataContractJsonSerializer(obj.GetType()); MemoryStream ms = new MemoryStream(); serializer.WriteObject(ms, obj); string retVal = Encoding.UTF8.GetString(ms.ToArray()); return retVal; } public static T Deserialize<T>(string json) { T obj = Activator.CreateInstance<T>(); MemoryStream ms = new MemoryStream(Encoding.Unicode.GetBytes(json)); DataContractJsonSerializer serializer = new DataContractJsonSerializer(obj.GetType()); obj = (T)serializer.ReadObject(ms); ms.Close(); return obj; }
using System.Runtime.Serialization; using System.Runtime.Serialization.Json;
JavaScriptSerializer jss= new JavaScriptSerializer(); User user = jss.Deserialize<User>(jsonResponse);
User user = JsonConvert.DeserializeObject<User>(jsonString);
using Microsoft.VisualStudio.TestTools.UnitTesting; using System.Web.Script.Serialization; namespace Tests { [TestClass] public class JsonTests { [TestMethod] public void Test() { var json = "{\"user\":{\"name\":\"asdf\",\"teamname\":\"b\",\"email\":\"c\",\"players\":[\"1\",\"2\"]}}"; JavaScriptSerializer serializer = new JavaScriptSerializer(); dynamic jsonObject = serializer.Deserialize<dynamic>(json); dynamic x = jsonObject["user"]; x = jsonObject["user"]["name"]; x = jsonObject["user"]["players"]; } } }
using System; using Microsoft.VisualStudio.TestTools.UnitTesting; using System.Web.Script.Serialization; using System.Linq; namespace Tests { [TestClass] public class JsonTests { [TestMethod] public void TestJavaScriptSerializer() { var json = "{\"user\":{\"name\":\"asdf\",\"teamname\":\"b\",\"email\":\"c\",\"players\":[\"1\",\"2\"]}}"; User user = new User(json); Console.WriteLine("Name : " + user.name); Console.WriteLine("Teamname : " + user.teamname); Console.WriteLine("Email : " + user.email); Console.WriteLine("Players:"); foreach (var player in user.players) Console.WriteLine(player); } } public class User { public User(string json) { JavaScriptSerializer serializer = new JavaScriptSerializer(); var jsonObject = serializer.Deserialize<dynamic>(json); name = (string)jsonObject["user"]["name"]; teamname = (string)jsonObject["user"]["teamname"]; email = (string)jsonObject["user"]["email"]; players = jsonObject["user"]["players"]; } public string name { get; set; } public string teamname { get; set; } public string email { get; set; } public Array players { get; set; } } }
using Microsoft.VisualStudio.TestTools.UnitTesting; using System.Web.Helpers; namespace Tests { [TestClass] public class JsonTests { [TestMethod] public void TestJsonDecode() { var json = "{\"user\":{\"name\":\"asdf\",\"teamname\":\"b\",\"email\":\"c\",\"players\":[\"1\",\"2\"]}}"; dynamic jsonObject = Json.Decode(json); dynamic x = jsonObject.user; x = jsonObject.user.name; x = jsonObject.user.players; } } }
using System; using Microsoft.VisualStudio.TestTools.UnitTesting; using System.Web.Helpers; using System.Linq; namespace Tests { [TestClass] public class JsonTests { [TestMethod] public void TestJsonDecode() { var json = "{\"user\":{\"name\":\"asdf\",\"teamname\":\"b\",\"email\":\"c\",\"players\":[\"1\",\"2\"]}}"; User user = new User(json); Console.WriteLine("Name : " + user.name); Console.WriteLine("Teamname : " + user.teamname); Console.WriteLine("Email : " + user.email); Console.WriteLine("Players:"); foreach (var player in user.players) Console.WriteLine(player); } } public class User { public User(string json) { var jsonObject = Json.Decode(json); name = (string)jsonObject.user.name; teamname = (string)jsonObject.user.teamname; email = (string)jsonObject.user.email; players = (DynamicJsonArray) jsonObject.user.players; } public string name { get; set; } public string teamname { get; set; } public string email { get; set; } public Array players { get; set; } } }
public static class Utilities { public static T Deserialize<T>(string jsonString) { using (MemoryStream ms = new MemoryStream(Encoding.Unicode.GetBytes(jsonString))) { DataContractJsonSerializer serializer = new DataContractJsonSerializer(typeof(T)); return (T)serializer.ReadObject(ms); } } }
public class JavaScriptSerializerDeSerializer<T> { private readonly JavaScriptSerializer serializer; public JavaScriptSerializerDeSerializer() { this.serializer = new JavaScriptSerializer(); } public string Serialize(T t) { return this.serializer.Serialize(t); } public T Deseralize(string stringObject) { return this.serializer.Deserialize<T>(stringObject); } }
public class JsonSerializerDeserializer<T> where T : class { private readonly DataContractJsonSerializer jsonSerializer; public JsonSerializerDeserializer() { this.jsonSerializer = new DataContractJsonSerializer(typeof(T)); } public string Serialize(T t) { using (var memoryStream = new MemoryStream()) { this.jsonSerializer.WriteObject(memoryStream, t); memoryStream.Position = 0; using (var sr = new StreamReader(memoryStream)) { return sr.ReadToEnd(); } } } public T Deserialize(string objectString) { using (var ms = new MemoryStream(System.Text.ASCIIEncoding.ASCII.GetBytes((objectString)))) { return (T)this.jsonSerializer.ReadObject(ms); } } }
[WebMethod] public static void SaveTeam(useSomeClassHere user) { }
Item last = Model.Results.Last(); foreach (Item result in Model.Results) { if (result.Equals(last)) { } else { } }
for (int i = 0; i < Model.Results.Count; i++) { if (i == Model.Results.Count - 1) { } }
foreach (Item result in Model.Results) { if (Model.Results.IndexOf(result) == Model.Results.Count - 1) { } }
var i=0; var count = Model.Results.Count(); foreach (Item result in Model.Results) { if(++i==count) }
using (var enumerator = collection.GetEnumerator()) { var last = !enumerator.MoveNext(); T current; while(!last) { current = enumerator.Current; last = !enumerator.MoveNext(); } }
foreach (var item in objList) { if(objList.LastOrDefault().Equals(item)) { } }
var elements = new[] { "A", "B", "C" }; elements.ForEach((element, info) => { if (!info.IsLast) { Console.WriteLine(element); } else { Console.WriteLine("Last one: " + element); } });
public static class EnumerableExtensions { public delegate void ElementAction<in T>(T element, ElementInfo info); public static void ForEach<T>(this IEnumerable<T> elements, ElementAction<T> action) { using (IEnumerator<T> enumerator = elements.GetEnumerator()) { bool isFirst = true; bool hasNext = enumerator.MoveNext(); int index = 0; while (hasNext) { T current = enumerator.Current; hasNext = enumerator.MoveNext(); action(current, new ElementInfo(index, isFirst, !hasNext)); isFirst = false; index++; } } } public struct ElementInfo { public ElementInfo(int index, bool isFirst, bool isLast) : this() { Index = index; IsFirst = isFirst; IsLast = isLast; } public int Index { get; private set; } public bool IsFirst { get; private set; } public bool IsLast { get; private set; } } }
for(int i = 0; i < Model.Results.Count; i++) { if(i == Model.Results.Count - 1) doMagic(); }
Item last = null; foreach (Item result in Model.Results) { last = result; } DoSomethingOnLastElement(last);
foreach(Item result in Model.Results) { } Item lastItem = Model.Results[Model.Results.Count - 1];
int last = Model.Results.Count - 1; int index = 0; foreach (Item result in Model.Results) { if (index == last) index++; }
var elements = new[] { "A", "B", "C" }; foreach (var e in elements.Detailed()) { if (!e.IsLast) { Console.WriteLine(e.Value); } else { Console.WriteLine("Last one: " + e.Value); } }
public static class EnumerableExtensions { public static IEnumerable<IterationElement<T>> Detailed<T>(this IEnumerable<T> source) { if (source == null) throw new ArgumentNullException(nameof(source)); using (var enumerator = source.GetEnumerator()) { bool isFirst = true; bool hasNext = enumerator.MoveNext(); int index = 0; while (hasNext) { T current = enumerator.Current; hasNext = enumerator.MoveNext(); yield return new IterationElement<T>(index, current, isFirst, !hasNext); isFirst = false; index++; } } } public struct IterationElement<T> { public int Index { get; } public bool IsFirst { get; } public bool IsLast { get; } public T Value { get; } public IterationElement(int index, T value, bool isFirst, bool isLast) { Index = index; IsFirst = isFirst; IsLast = isLast; Value = value; } } }
Dictionary<string, string> iterativeDictionary = someOtherDictionary; var index = 0; iterativeDictionary.ForEach(kvp => index++ == iterativeDictionary.Count ? : );
using System; using System.Collections; using System.Collections.Generic; using System.Linq; using System.Text; namespace Generic.Utilities { public static class SmartEnumerable { public static SmartEnumerable<T> Create<T>(IEnumerable<T> source) { return new SmartEnumerable<T>(source); } } public class SmartEnumerable<T> : IEnumerable<SmartEnumerable<T>.Entry> { readonly IEnumerable<T> enumerable; public SmartEnumerable(IEnumerable<T> enumerable) { if (enumerable == null) { throw new ArgumentNullException("enumerable"); } this.enumerable = enumerable; } public IEnumerator<Entry> GetEnumerator() { using (IEnumerator<T> enumerator = enumerable.GetEnumerator()) { if (!enumerator.MoveNext()) { yield break; } bool isFirst = true; bool isLast = false; int index = 0; Entry previous = null; T current = enumerator.Current; isLast = !enumerator.MoveNext(); var entry = new Entry(isFirst, isLast, current, index++, previous); isFirst = false; previous = entry; while (!isLast) { T next = enumerator.Current; isLast = !enumerator.MoveNext(); var entry2 = new Entry(isFirst, isLast, next, index++, entry); entry.SetNext(entry2); yield return entry; previous.UnsetLinks(); previous = entry; entry = entry2; } yield return entry; previous.UnsetLinks(); } } IEnumerator IEnumerable.GetEnumerator() { return GetEnumerator(); } public class Entry { private readonly bool isFirst; private readonly bool isLast; private readonly T value; private readonly int index; private Entry previous; private Entry next = null; public T Value { get { return value; } } public bool IsFirst { get { return isFirst; } } public bool IsLast { get { return isLast; } } public int Index { get { return index; } } public Entry Previous { get { return previous; } } public Entry Next { get { return next; } } internal Entry(bool isFirst, bool isLast, T value, int index, Entry previous) { this.isFirst = isFirst; this.isLast = isLast; this.value = value; this.index = index; this.previous = previous; } internal void SetNext(Entry entry) { next = entry; } internal void UnsetLinks() { previous = null; next = null; } public override string ToString() { return String.Format("({0}){1}", Index, Value); } } } }
delegate void DInner (); .... Dinner inner=delegate { inner=delegate { } } foreach (DataGridViewRow dgr in product_list.Rows) { inner() } }
public static void ForEachAndKnowIfLast<T>( this IEnumerable<T> source, Action<T, bool> a, int numLastItems = 1) { int bufferMax = numLastItems + 1; var buffer = new Queue<T>(bufferMax); foreach (T x in source) { buffer.Enqueue(x); if (buffer.Count < bufferMax) continue; a(buffer.Dequeue(), false); } foreach (T item in buffer) a(item, true); }
Model.Results.ForEachAndKnowIfLast( (result, isLast) => { });
List<int> myList = new List<int>() {1, 2, 3, 4, 5}; Console.WriteLine("foreach version"); { foreach (var current in myList) { Console.WriteLine(current); } } Console.WriteLine("equivalent that reacts to last element"); { var enumerator = myList.GetEnumerator(); if (enumerator.MoveNext() == true) { while (true) { int current = enumerator.Current; Console.WriteLine(current); bool ifLastElement = (enumerator.MoveNext() == false); if (ifLastElement) { Console.WriteLine("[last element]"); break; } } } enumerator.Dispose(); }
bool empty = true; Item previousItem; foreach (Item result in Model.Results) { if (!empty) { handleRegularItem(previousItem); } previousItem = result; empty = false; } if (!empty) { handleLastItem(previousItem); }
List<int> ListInt = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; int count = ListInt.Count; int index = 1; foreach (var item in ListInt) { if (index != count) { Console.WriteLine("do something at index number " + index); } else { Console.WriteLine("Foreach loop, this is the last iteration of the loop " + index); } index++; } int count = ListInt.Count; int index = 1; foreach (var item in ListInt) { if (index < count) { Console.WriteLine("do something at index number " + index); } else { Console.WriteLine("Foreach loop, this is the last iteration of the loop " + index); } index++; }
public static class EnumerableExtensions { public static bool IsLast<T>(this List<T> items, T item) { if (items.Count == 0) return false; T last = items[items.Count - 1]; return item.Equals(last); } }
foreach (Item result in Model.Results) { if(Model.Results.IsLast(result)) { } }
for (int i = 0; i < Model.Results.Count - 1; i++) { var item = Model.Results[i]; }
foreach (Item result in Model.Results) { if (Model.Results.IndexOf(result) == Model.Results.Count - 1) { } }
foreach (DataRow drow in ds.Tables[0].Rows) { cnt_sl1 = "<div class= "<div class= "</div></div></div>"; cnt_sl2 = "<div class= "<p>" + drow["situation_details"].ToString() + "</p>" + "</div></div>"; if (i == 0) { lblSituationName.Text = drow["situation"].ToString(); } if (drow["images_position"].ToString() == "0") { content += "<div class= cnt_sl1 = ""; cnt_sl2 = ""; } else if (drow["images_position"].ToString() == "1") { content += "<div class= cnt_sl1 = ""; cnt_sl2 = ""; } i++; }
foreach (Item result in Model.Results) { if (result==Model.Results.Last()) { } }
foreach (DataGridViewRow dgr in product_list.Rows) { if (dgr.Index == dgr.DataGridView.RowCount - 1) { } }
public async Task<string> GenerateCodeAsync() { string code = await GenerateCodeService.GenerateCodeAsync(); return code; }
using (HttpClient client = new HttpClient()) { HttpResponseMessage responseAsync = await client.GetAsync(url); HttpResponseMessage responseSync = client.GetAsync(url).Result; }
string code = GenerateCodeAsync().GetAwaiter().GetResult();
private void button2_Click(object sender, EventArgs e) { label1.Text = "waiting...."; Task<string> sCode = Task.Run(async () => { string msg =await GenerateCodeAsync(); return msg; }); label1.Text += sCode.Result; } private Task<string> GenerateCodeAsync() { return Task.Run<string>(() => GenerateCode()); } private string GenerateCode() { Thread.Sleep(2000); return "I m back" ; }
public static ClaimsIdentity CreateIdentity<TUser, TKey>(this UserManager<TUser, TKey> manager, TUser user, string authenticationType) where TKey : IEquatable<TKey> where TUser : class, IUser<TKey> { if (manager == null) { throw new ArgumentNullException("manager"); } return AsyncHelper.RunSync(() => manager.CreateIdentityAsync(user, authenticationType)); }
public static TResult RunSync<TResult>(Func<Task<TResult>> func) { var cultureUi = CultureInfo.CurrentUICulture; var culture = CultureInfo.CurrentCulture; return _myTaskFactory.StartNew(() => { Thread.CurrentThread.CurrentCulture = culture; Thread.CurrentThread.CurrentUICulture = cultureUi; return func(); }).Unwrap().GetAwaiter().GetResult(); }
Result r = null; YourAsyncMethod() .ContinueWith(t => { r = t.Result; }) .Wait();
string code = Task.Run(() => GenerateCodeAsync("test")).Result;
var roleManager = new RoleManager<IdentityRole>(new RoleStore<IdentityRole>(new ApplicationDbContext()));
<roleManager defaultProvider="DefaultRoleProvider"> <providers> <add name="DefaultRoleProvider" type="System.Web.Providers.DefaultRoleProvider, System.Web.Providers, Version=2.0.0.0, Culture=neutral, PublicKeyToken=NUMBER" connectionStringName="DefaultConnection" applicationName="/" /> </providers> </roleManager>
<roleManager defaultProvider="DefaultRoleProvider" enabled="true">
var userManager = Request.GetOwinContext().GetUserManager<ApplicationUserManager>(); var roles = userManager.GetRoles(User.Identity.GetUserId());
var roles = userManager.GetRoles(User.Identity.GetUserId<int>());
<roleManager enabled="true" cacheRolesInCookie="false" cookieName=".ASPXROLES" cookieTimeout="30" cookiePath="/" cookieRequireSSL="false" cookieSlidingExpiration="true" cookieProtection="All" defaultProvider="AspNetSqlRoleProvider" createPersistentCookie="false" maxCachedResults="25"> <providers> <clear /> <add connectionStringName="MembershipConnection" applicationName="Mvc3" name="AspNetSqlRoleProvider" type="System.Web.Security.SqlRoleProvider, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /> <add applicationName="Mvc3" name="AspNetWindowsTokenRoleProvider" type="System.Web.Security.WindowsTokenRoleProvider, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /> </providers> </roleManager>
query = query.Replace("x", "xxx").Replace("y", "xxy").Replace("*", "xyy");
query = query.Replace("xyy", "*").Replace("xxy", "y").Replace("xxx", "x");
<system.web> <httpRuntime requestPathInvalidCharacters="&lt;,&gt;,%,&amp;,:,\,?" /> </system.web>
<httpRuntime requestPathInvalidCharacters="&lt;,&gt;,*,%,&amp;,:,\,?" />
<system.web> <httpRuntime targetFramework="4.5.2" requestPathInvalidCharacters="" /> <pages > <namespaces> .... </namespaces> </pages> </system.web>
Task task1 = FooAsync(); Task task2 = BarAsync(); await Task.WhenAll(task1, task2);
.ToListAsync() .FirstOrDefaultAsync() .SaveChangesAsync() .FindAsync()
GlobalFilters.Filters.Add(new RequireHttpsAttribute());
<system.web> <httpCookies httpOnlyCookies="true" requireSSL="true" /> </system.web>
app.UseHsts(options => options.MaxAge(days: 720).Preload());
app.UseHpkp(options => options .Sha256Pins( "Base64 encoded SHA-256 hash of your first certificate e.g. cUPcTAZWKaASuYWhhneDttWpY3oBAkE3h2+soZS7sWs=", "Base64 encoded SHA-256 hash of your second backup certificate e.g. M8HztCzM3elUxkcjR2S5P4hhyBNf6lHkmjAHKhpGPWE=") .MaxAge(days: 30));
<rewrite> <rules> <clear /> <rule name="Redirect all requests to https" stopProcessing="true"> <match url="(.*)" /> <conditions logicalGrouping="MatchAll"> <add input="{HTTPS}" pattern="off" ignoreCase="true" /> </conditions> <action type="Redirect" url="https: redirectType="Permanent" appendQueryString="false" /> </rule> </rules> </rewrite>
<rewrite> <rules> <remove name="Http to Https" /> <rule name="Http to Https" enabled="true" patternSyntax="Wildcard" stopProcessing="true"> <match url="*" /> <conditions> <add input="{HTTPS}" pattern="off" /> </conditions> <serverVariables /> <action type="Redirect" url="https: </rule> </rules> </rewrite>
In Dot Net Core, follow the instructions at https: ***In your startup.cs add the following,*** public void ConfigureServices(IServiceCollection services) { services.Configure<MvcOptions>(options => { options.Filters.Add(new RequireHttpsAttribute()); });`enter code here` ***To redirect Http to Https, add the following in the startup.cs*** public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory) { loggerFactory.AddConsole(Configuration.GetSection("Logging")); loggerFactory.AddDebug(); var options = new RewriteOptions() .AddRedirectToHttps(); app.UseRewriter(options);
<nwebsec> <httpHeaderSecurityModule> <securityHttpHeaders> <content-Security-Policy enabled="true"> <upgrade-insecure-requests enabled="true" /> </content-Security-Policy> </securityHttpHeaders> </httpHeaderSecurityModule> </nwebsec>
<system.webServer> <httpErrors errorMode="Custom" defaultResponseMode="File" defaultPath="C:\WebSites\yoursite\" > <remove statusCode="403" subStatusCode="4" /> <error statusCode="403" subStatusCode="4" responseMode="File" path="redirectToHttps.html" /> </httpErrors>
<html> <head><title>Redirecting...</title></head> <script language="JavaScript"> function redirectHttpToHttps() { var httpURL= window.location.hostname + window.location.pathname + window.location.search; var httpsURL= "https: window.location = httpsURL; } redirectHttpToHttps(); </script> <body> </body> </html>
public class MyHandler: IHttpHandler { public void Processrequest(HttpContext context) { this.DoThis(); } public void DoThis() { // } }
[assembly: AssemblyVersion("0.2.6")] [assembly: AssemblyFileVersion("0.2.6")] [assembly: AssemblyInformationalVersion("0.2.6")]
using AutoMapper; namespace Your.Namespace { public class MappingProfile : Profile { MappingProfile() { CreateMap<Animal, AnimalDto>(); } } }
namespace Example { public class ConfigFile { public ConfigFile() { Sensors = new List<ISensorInfo<Int32>>(); } public List<ISensorInfo<Int32>> Sensors { get; set; } } } } **using Example.Sensors.Type1; using System; namespace Example.Sensors { public interface ISensorInfo<T> { String SensorName { get; } } } using Example.Sensors; namespace Example.Sensors.Type1 { public class Type1SensorInfo<T> : ISensorInfo<T> { public Type1SensorInfo() } }
Server stack trace: at System.ServiceModel.Channels.ServiceChannelProxy.InvokeService(IMethodCallMessage methodCall, ProxyOperationRuntime operation) at System.ServiceModel.Channels.ServiceChannelProxy.Invoke(IMessage message) Exception rethrown at [0]: at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg) at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData& msgData, Int32 type) at myAccountSearch.AccountSearch.searchtPhone(searchtPhoneRequest request) at myAccountSearch.AccountSearchClient.myAccountSearch.AccountSearch.searchtPhone(searchtPhoneRequest request) at myAccountSearch.AccountSearchClient.searchtPhone(String ID, String HashID, searchtPhone Phone1) at WS.MyValidation(String AccountNumber, String PhoneNumber)
var myObject = (dynamic)new JsonObject(); myObject.Data = "some data"; myObject.Data2 = "some more data"; HttpClient httpClient = new HttpClient("myurl"); httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json")); HttpResponseMessage response = httpClient.Post("", ???);
var content = new StringContent(jsonObject.ToString(), Encoding.UTF8, "application/json"); var result = client.PostAsync(url, content).Result;
httpClient.Post( "", new StringContent( myObject.ToString(), Encoding.UTF8, "application/json"));
using Newtonsoft.Json; using System.Net.Http; using System.Text; public static class Extensions { public static StringContent AsJson(this object o) => new StringContent(JsonConvert.SerializeObject(o), Encoding.UTF8, "application/json"); }
var httpClient = new HttpClient(); var url = "https: var data = new { identifier = "username", password = "password" }; var result = await httpClient.PostAsync(url, data.AsJson())
var content = new StringContent(jsonObject.ToString(), Encoding.UTF8, "application/json"); content.Headers.ContentType = new MediaTypeHeaderValue("application/json"); var result = client.PostAsync(url, content).Result;
dim FeToSend as new (object--> define class) Dim client As New HttpClient Dim content = New StringContent(FeToSend.ToString(), Encoding.UTF8,"application/json") content.Headers.ContentType = New MediaTypeHeaderValue( "application/json" ) Dim risp = client.PostAsync(Chiamata, content).Result msgbox(risp.tostring)
<appSettings> <add key="myurl" value="http: </appSettings>
<appSettings> <add key="myurl" value="http: <appSettings>
The primary reference "C:\Projects\Business Objects 4\bin\Release\BusinessObjects.dll" could not be resolved because it was built against the ".NETFramework,Version=v4.5" framework. This is a higher version than the currently targeted framework ".NETFramework,Version=v4.0".
<%@ Application Codebehind="Global.asax.vb" Inherits="MyApp" Language="VB" %>
using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.Mvc; using System.Web.Routing; namespace YourNameSpace { public class WebApiApplication : System.Web.HttpApplication { protected void Application_Start() { AreaRegistration.RegisterAllAreas(); FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters); RouteConfig.RegisterRoutes(RouteTable.Routes); } } }
DataSet ds = CreateSampleData(); string excelFilename = "C:\\Sample.xlsx"; CreateExcelFile.CreateExcelDocument(ds, excelFilename);
namespace CLIck10.App_Code { public static class Glob { ... } }
The type X.Y conflicts with the imported type X.Y in MyProject.DLL
bundles.Add(new ScriptBundle("~/bundles/MainJS") .Include("~/Scripts/regular/lib/mvc/jquery.validate.unobtrusive.js*") .Include("~/Scripts/regular/lib/mvc/jquery.validate*") .Include("~/Scripts/regular/lib/bootstrap.js") .IncludeDirectory("~/Scripts/regular/modules", "*.js", true) .IncludeDirectory("~/Scripts/regular/pages", "*.js", true) .IncludeDirectory("~/Scripts/regular/misc", "*.js", true)); bundles.Add(new StyleBundle("~/bundles/MainCSS") .Include("~/Content/css/regular/lib/bootstrap.css*") .IncludeDirectory("~/Content/css/regular/modules", "*.css", true) .IncludeDirectory("~/Content/css/regular/pages", "*.css", true))
var jsBundle = new Bundle("~/Scripts/js"); var jsBundle = new ScriptBundle("~/Scripts/js");
System.Web.Optimization.BundleTable.EnableOptimizations = false
System.Web.Optimization.BundleTable.EnableOptimizations = false;
var scriptBundle = new ScriptBundle("~/bundles/scriptBundle"); ... scriptBundle.Transforms.Clear();
bundles.Add(new ScriptBundle("~/Scripts/Common/js") .Include("~/Scripts/jquery-1.8.3.js") .Include("~/Scripts/zizhujy.com.js") .Include("~/Scripts/Globalize.js") .Include("~/Scripts/common.js") .Include("~/Scripts/requireLite/requireLite.js")); bundles.Add(new StyleBundle("~/Content/appLayoutStyles") .Include("~/Content/AppLayout.css")); bundles.Add(new StyleBundle("~/Content/css/App/FunGrapherStyles") .Include("~/Content/css/Apps/FunGrapher.css") .Include("~/Content/css/tables.css")); foreach (var bundle in BundleTable.Bundles) { bundle.Transforms.Clear(); }
var myBundle = new StyleBundle("~/Content/themes/base/css") .Include("~/Content/themes/base/jquery.ui.core.css" ); myBundle.Transforms.Add(new CssMinify()); bundles.Add(myBundle); myBundle.Transforms.Clear();
protected void Application_Start() { ... BundleTable.EnableOptimizations = true; if (HttpContext.Current.IsDebuggingEnabled) { BundleTable.Bundles.ToList().ForEach(b => b.Transforms.Clear()); } BundleTable.Bundles.ToList() .FindAll(x => x.GetType() == typeof(StyleBundle)) .ForEach(b => b.Transforms.Add(new MyStyleBundleTransformer())); ... }
protected void Application_Start() { System.Web.Optimization.BundleTable.EnableOptimizations = false; }
using System; using System.Text; using System.Web; using System.Web.Mvc; using System.Web.Optimization; namespace Helpers { public static class OptionalCssBundler { const string CssTemplate = "<link href=\"{0}\" rel=\"stylesheet\" type=\"text/css\" />"; public static MvcHtmlString ResolveBundleUrl(string bundleUrl, bool bundle) { return bundle ? BundledFiles(BundleTable.Bundles.ResolveBundleUrl(bundleUrl)) : UnbundledFiles(bundleUrl); } private static MvcHtmlString BundledFiles(string bundleVirtualPath) { return new MvcHtmlString(string.Format(CssTemplate, bundleVirtualPath)); } private static MvcHtmlString UnbundledFiles(string bundleUrl) { var bundle = BundleTable.Bundles.GetBundleFor(bundleUrl); StringBuilder sb = new StringBuilder(); var urlHelper = new UrlHelper(HttpContext.Current.Request.RequestContext); foreach (BundleFile file in bundle.EnumerateFiles(new BundleContext(new HttpContextWrapper(HttpContext.Current), BundleTable.Bundles, bundleUrl))) { sb.AppendFormat(CssTemplate + Environment.NewLine, urlHelper.Content(file.VirtualFile.VirtualPath)); } return new MvcHtmlString(sb.ToString()); } public static MvcHtmlString Render(string bundleUrl, bool bundle) { return ResolveBundleUrl(bundleUrl, bundle); } } }
bundles.Add(new StyleBundleRaw("~/Content/foobarcss").Include("/some/path/foobar.css")); bundles.Add(new ScriptBundleRaw("~/Bundles/foobarjs").Include("/some/path/foobar.js"));
internal sealed class StyleBundleRaw : StyleBundle { private static readonly BundleMimeType CssContentMimeType = new BundleMimeType("text/css"); public StyleBundleRaw(string virtualPath) : this(virtualPath, cdnPath: null) { } public StyleBundleRaw(string virtualPath, string cdnPath) : base(virtualPath, cdnPath) { Transforms.Add(CssContentMimeType); Transforms.Remove(Transforms.FirstOrDefault(x => x is CssMinify)); } } internal sealed class ScriptBundleRaw : ScriptBundle { private static readonly BundleMimeType JsContentMimeType = new BundleMimeType("text/javascript"); public ScriptBundleRaw(string virtualPath) : this(virtualPath, cdnPath: null) { } public ScriptBundleRaw(string virtualPath, string cdnPath) : base(virtualPath, cdnPath) { Transforms.Add(JsContentMimeType); Transforms.Remove(Transforms.FirstOrDefault(x => x is JsMinify)); } } internal sealed class BundleMimeType : IBundleTransform { private readonly string _mimeType; public BundleMimeType(string mimeType) { _mimeType = mimeType; } public void Process(BundleContext context, BundleResponse response) { if (context == null) throw new ArgumentNullException(nameof(context)); if (response == null) throw new ArgumentNullException(nameof(response)); response.ContentType = _mimeType; } }
<runtime> [...] <dependentAssembly> <assemblyIdentity name="System.Web.Optimization" publicKeyToken="31bf3856ad364e35" /> <bindingRedirect oldVersion="1.0.0.0-x.y.z.t" newVersion="x.y.z.t" /> </dependentAssembly> <dependentAssembly> <assemblyIdentity name="WebGrease" publicKeyToken="31bf3856ad364e35" culture="neutral" /> <bindingRedirect oldVersion="0.0.0.0-x.y.z.t" newVersion="x.y.z.t" /> </dependentAssembly> [...] </runtime> <!-- setting mimetypes like we do right below is absolutely vital for published builds because for some reason the --> <!-- iis servers in production environments somehow dont know how to handle otf eot and other font related files --> </system.webServer> [...] <staticContent> <!-- in case iis already has these mime types --> <remove fileExtension=".otf" /> <remove fileExtension=".eot" /> <remove fileExtension=".ttf" /> <remove fileExtension=".woff" /> <remove fileExtension=".woff2" /> <mimeMap fileExtension=".otf" mimeType="font/otf" /> <mimeMap fileExtension=".eot" mimeType="application/vnd.ms-fontobject" /> <mimeMap fileExtension=".ttf" mimeType="application/octet-stream" /> <mimeMap fileExtension=".woff" mimeType="application/font-woff" /> <mimeMap fileExtension=".woff2" mimeType="application/font-woff2" /> </staticContent> <!-- also vital otherwise published builds wont work https: <modules runAllManagedModulesForAllRequests="true"> <remove name="BundleModule" /> <add name="BundleModule" type="System.Web.Optimization.BundleModule" /> </modules> [...] </system.webServer>
<less useNativeMinification="false" ieCompat="true" strictMath="false" strictUnits="false" dumpLineNumbers="None">
@if (Debugger.IsAttached) { <a href="@Styles.Url(ViewBag.CSS)" target="css">View CSS</a> }
<bundleTransformer xmlns="http: <less xdt:Transform="Replace" useNativeMinification="true" ieCompat="true" strictMath="false" strictUnits="false" dumpLineNumbers="None"> <jsEngine name="MsieJsEngine" /> </less> </bundleTransformer>
<compilation xdt:Transform="RemoveAttributes(debug)" />
public partial class Startup { public void Configuration(IAppBuilder app) { AreaRegistration.RegisterAllAreas(); FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters); RouteConfig.RegisterRoutes(RouteTable.Routes); BundleConfig.RegisterBundles(BundleTable.Bundles); ConfigureAuth(app); } }
Microsoft.CodeDom.Providers.DotNetCompilerPlatform v 1.0.0 Microsoft.Net.Compilers v 1.0.0
Install-Package Microsoft.AspNet.WebApi.WebHost -Version 5.2.3 Install-Package Microsoft.AspNet.WebApi -Version 5.2.3 Install-Package WebApiContrib.Formatting.Razor 2.3.0.0
Install-Package Microsoft.Owin.Host.SystemWeb Install-Package Microsoft.AspNet.WebApi.OwinSelfHost
[assembly:OwinStartup(typeof(namespace.Startup))] public class Startup { public static void Configuration(IAppBuilder app) { var httpConfiguration = CreateHttpConfiguration(); app .UseWebApi(httpConfiguration); } public static HttpConfiguration CreateHttpConfiguration() { var httpConfiguration = new HttpConfiguration(); httpConfiguration.MapHttpAttributeRoutes(); return httpConfiguration; } }
using System.Collections; using System.Web; public class GloballyAccessibleClass { private GloballyAccessibleClass() { } public static GloballyAccessibleClass Instance { get { IDictionary items = HttpContext.Current.Items; if(!items.Contains("TheInstance")) { items["TheInstance"] = new GloballyAccessibleClass(); } return items["TheInstance"] as GloballyAccessibleClass; } } }
Uri url = new Uri("http: string path = String.Format("{0}{1}{2}{3}", url.Scheme, Uri.SchemeDelimiter, url.Authority, url.AbsolutePath);
string url = "http: string path = url.Substring(0, url.IndexOf("?"));
var uri = new Uri("http: string path = uri.GetLeftPart(UriPartial.Path);
Request.Url.AbsoluteUri.Replace(Request.Url.Query, String.Empty);
new UriBuilder(url) { Query = string.Empty }.ToString()
using System; namespace YourProject.Extensions { public static class UriExtensions { public static string Path(this Uri uri) { if (uri == null) { throw new ArgumentNullException("uri"); } return uri.GetLeftPart(UriPartial.Path); } } }
string path = HtmlPage.Document.DocumentUri.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
string your_url = "http: string path_you_want = your_url .Substring(0, your_url .IndexOf("?"));
public static string TrimQueryString(this string source) { if (string.IsNullOrEmpty(source)) return source; var hasQueryString = source.IndexOf( if (!hasQueryString) return source; var result = source.Substring(0, source.IndexOf( return result; }
var url = Request.Url?.AbsoluteUri.TrimQueryString()
urlString=Request.RawUrl.ToString.Substring(0, Request.RawUrl.ToString.IndexOf("?"))
DateTimeFormatInfo dfi = DateTimeFormatInfo.CurrentInfo; Calendar cal = dfi.Calendar; return cal.GetWeekOfYear(date, dfi.CalendarWeekRule, dfi.FirstDayOfWeek);
return new GregorianCalendar(GregorianCalendarTypes.Localized).GetWeekOfYear(date, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
CultureInfo ciCurr = CultureInfo.CurrentCulture; int weekNum = ciCurr.Calendar.GetWeekOfYear(dtPassed, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday); return weekNum;
public static int GetIso8601WeekOfYear(DateTime time) { DayOfWeek day = CultureInfo.InvariantCulture.Calendar.GetDayOfWeek(time); if (day >= DayOfWeek.Monday && day <= DayOfWeek.Wednesday) { time = time.AddDays(3); } return CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(time, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday); }
public static int GetIso8601WeekOfYear(DateTime time) { DayOfWeek day = CultureInfo.InvariantCulture.Calendar.GetDayOfWeek(time); if (day >= DayOfWeek.Monday && day <= DayOfWeek.Wednesday) { time = time.AddDays(3); } return CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(time, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday); }
var d = new DateTime(2012, 12, 31); CultureInfo cul = CultureInfo.CurrentCulture; var firstDayWeek = cul.Calendar.GetWeekOfYear( d, CalendarWeekRule.FirstDay, DayOfWeek.Monday); int weekNum = cul.Calendar.GetWeekOfYear( d, CalendarWeekRule.FirstDay, DayOfWeek.Monday); int year = weekNum == 52 && d.Month == 1 ? d.Year - 1 : d.Year; Console.WriteLine("Year: {0} Week: {1}", year, weekNum);
CultureInfo cul = CultureInfo.GetCultureInfo("de-DE");
public int GetWeekNumber() { CultureInfo ciCurr = CultureInfo.CurrentCulture; int weekNum = ciCurr.Calendar.GetWeekOfYear(DateTime.Now, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday); return weekNum; }
public static int ToIso8601Weeknumber(this DateTime date) { var thursday = date.AddDays(3 - date.DayOfWeek.DayOffset()); return (thursday.DayOfYear - 1) / 7 + 1; } public static DateTime FromIso8601Weeknumber(int weekNumber, int? year = null, DayOfWeek day = DayOfWeek.Monday) { var dec28 = new DateTime((year ?? DateTime.Today.Year) - 1, 12, 28); var monday = dec28.AddDays(7 * weekNumber - dec28.DayOfWeek.DayOffset()); return monday.AddDays(day.DayOffset()); } private static int DayOffset(this DayOfWeek weekDay) { return ((int)weekDay + 6) % 7; }
function GetWeekOfYear([datetime] $inputDate) { $day = [System.Globalization.CultureInfo]::InvariantCulture.Calendar.GetDayOfWeek($inputDate) if (($day -ge [System.DayOfWeek]::Monday) -and ($day -le [System.DayOfWeek]::Wednesday)) { $inputDate = $inputDate.AddDays(3) } $weekofYear = [System.Globalization.CultureInfo]::InvariantCulture.Calendar.GetWeekOfYear($inputDate, [System.Globalization.CalendarWeekRule]::FirstFourDayWeek, [System.DayOfWeek]::Monday) return $weekofYear }
namespace System.Globalization { public static class ISOWeek { public static int GetWeekOfYear(DateTime date); public static int GetWeeksInYear(int year); public static int GetYear(DateTime date); public static DateTime GetYearEnd(int year); public static DateTime GetYearStart(int year); public static DateTime ToDateTime(int year, int week, DayOfWeek dayOfWeek); } }
var dayOfWeek = (int)moment.DayOfWeek; if (--dayOfWeek < 0) dayOfWeek = 6; var weekNumber = (moment.AddDays(3 - dayOfWeek).DayOfYear - 1) / 7 + 1;
var cultureInfo = CultureInfo.CurrentCulture; var calendar = cultureInfo.Calendar; var calendarWeekRule = cultureInfo.DateTimeFormat.CalendarWeekRule; var firstDayOfWeek = cultureInfo.DateTimeFormat.FirstDayOfWeek; var lastDayOfWeek = cultureInfo.LCID == 1033 ? DayOfWeek.Saturday : DayOfWeek.Sunday; var lastDayOfYear = new DateTime(date.Year, 12, 31); var weekNumber = calendar.GetWeekOfYear(date, calendarWeekRule, firstDayOfWeek); return weekNumber == 53 && lastDayOfYear.DayOfWeek != lastDayOfWeek ? 1 : weekNumber;
DateTimeFormatInfo dfi = DateTimeFormatInfo.CurrentInfo; DateTime date1 = new DateTime(2011, 1, 1); Calendar cal = dfi.Calendar; Console.WriteLine("{0:d}: Week {1} ({2})", date1, cal.GetWeekOfYear(date1, dfi.CalendarWeekRule, dfi.FirstDayOfWeek), cal.ToString().Substring(cal.ToString().LastIndexOf(".") + 1));
public static string GetSiteUrl() { string url = string.Empty; HttpRequest request = HttpContext.Current.Request; if (request.IsSecureConnection) url = "https: else url = "http: url += request["HTTP_HOST"] + "/"; return url; }
string baseUrl = Request.Url.Scheme + ": Request.ApplicationPath.TrimEnd(
string baseUrl = Request.Url.GetLeftPart(UriPartial.Authority)
uri.GetComponents( UriComponents.SchemeAndServer | UriComponents.UserInfo, UriFormat.Unescaped);
string baseUrl = Request.Url.GetComponents( UriComponents.SchemeAndServer, UriFormat.UriEscaped)
string baseUrl = Url.Request.RequestUri.GetComponents( UriComponents.SchemeAndServer, UriFormat.Unescaped)
string baseUrl = (Url.Request.RequestUri.GetComponents( UriComponents.SchemeAndServer, UriFormat.Unescaped).TrimEnd( + HttpContext.Current.Request.ApplicationPath).TrimEnd(
HttpContext.Current.Request.ServerVariables["HTTP_HOST"]
String baseUrl = Request.RequestUri.GetLeftPart(UriPartial.Authority) + Configuration.VirtualPathRoot;
Request.Url.OriginalString.Replace(Request.Url.PathAndQuery, "") + Request.ApplicationPath;
if (HttpContext.Current.Request.ServerVariables["SERVER_PORT"] != null && HttpContext.Current.Request.ServerVariables["SERVER_PORT"].ToString() != "80" && HttpContext.Current.Request.ServerVariables["SERVER_PORT"].ToString() != "443") { port = String.Concat(":", HttpContext.Current.Request.ServerVariables["SERVER_PORT"].ToString()); }
DateTime StartDate = "3/10/2009"; DateTime EndDate = "3/26/2009"; int DayInterval = 3;
int count = 0; for(int i = 0; i < n; i++) { count++; if(count >= DayInterval) { count = 0; } }
public IEnumerable<DateTime> EachDay(DateTime from, DateTime thru) { for(var day = from.Date; day.Date <= thru.Date; day = day.AddDays(1)) yield return day; }
foreach (DateTime day in EachDay(StartDate, EndDate))
foreach (DateTime date in StartDate.To(EndDate).ExcludeEnd() .Step(DayInterval.Days()) { }
DateTime StartDate = new DateTime(2009, 3, 10); DateTime EndDate = new DateTime(2009, 3, 26); int DayInterval = 3; List<DateTime> dateList = new List<DateTime>(); while (StartDate.AddDays(DayInterval) <= EndDate) { StartDate = StartDate.AddDays(DayInterval); dateList.Add(StartDate); }
public static IEnumerable<DateTime> EachDay(DateTime from, DateTime thru) { for (var day = from.Date; day.Date <= thru.Date; day = day.AddDays(1)) yield return day; } public static IEnumerable<DateTime> EachMonth(DateTime from, DateTime thru) { for (var month = from.Date; month.Date <= thru.Date || month.Month == thru.Month; month = month.AddMonths(1)) yield return month; } public static IEnumerable<DateTime> EachDayTo(this DateTime dateFrom, DateTime dateTo) { return EachDay(dateFrom, dateTo); } public static IEnumerable<DateTime> EachMonthTo(this DateTime dateFrom, DateTime dateTo) { return EachMonth(dateFrom, dateTo); }
DateTime startDate = new DateTime(2009, 3, 10); DateTime stopDate = new DateTime(2009, 3, 26); int interval = 3; for (DateTime dateTime=startDate; dateTime < stopDate; dateTime += TimeSpan.FromDays(interval)) { }
var today = DateTime.UtcNow; var birthday = new DateTime(2018, 01, 01);
var toBirthday = today.RangeTo(birthday, x => x.AddMonths(2));
var toBirthday = today.RangeTo(birthday, x => x.AddYears(1));
var fromToday = birthday.RangeFrom(today); var toBirthday = today.RangeTo(birthday);
public static class DateTimeExtensions { public static IEnumerable<DateTime> RangeTo(this DateTime from, DateTime to, Func<DateTime, DateTime> step = null) { if (step == null) { step = x => x.AddDays(1); } while (from < to) { yield return from; from = step(from); } } public static IEnumerable<DateTime> RangeFrom(this DateTime to, DateTime from, Func<DateTime, DateTime> step = null) { return from.RangeTo(to, step); } }
DateTime startDate = new DateTime(2009, 3, 10); DateTime stopDate = new DateTime(2009, 3, 26); int interval = 3; while ((startDate = startDate.AddDays(interval)) <= stopDate) { }
while (startDate <= endDate) { startDate = startDate.AddDays(1); }
DateTime begindate = Convert.ToDateTime("01/Jan/2018"); DateTime enddate = Convert.ToDateTime("12 Feb 2018"); while (begindate < enddate) { begindate= begindate.AddDays(1); Console.WriteLine(begindate + " " + enddate); }
while (startdate <= enddate) { startdate = startdate.adddays(interval); }
DateTime dt0 = new DateTime(2009, 3, 10); DateTime dt1 = new DateTime(2009, 3, 26); for (; dt0.Date <= dt1.Date; dt0=dt0.AddDays(3)) { }
DateTime startDate = DateTime.Parse("2018-06-24 06:00"); DateTime endDate = DateTime.Parse("2018-06-24 11:45"); while (startDate.AddMinutes(15) <= endDate) { Console.WriteLine(startDate.ToString("yyyy-MM-dd HH:mm")); startDate = startDate.AddMinutes(15); }
public bool IsEventHandlerRegistered(Delegate prospectiveHandler) { if ( this.EventHandler != null ) { foreach ( Delegate existingHandler in this.EventHandler.GetInvocationList() ) { if ( existingHandler == prospectiveHandler ) { return true; } } } return false; }
myClass.MyEvent -= MyHandler; myClass.MyEvent += MyHandler;
public class MyClass { event Action MyEvent; } ... MyClass myClass = new MyClass(); myClass.MyEvent += SomeFunction; ... Action[] handlers = myClass.MyEvent.GetInvocationList(); Console.WriteLine(handlers[0].Method.Name);
try { control_name.Click -= event_Click; main_browser.Document.Click += Document_Click; } catch(Exception exce) { main_browser.Document.Click += Document_Click; }
VirtualPath.Create(path, VirtualPathOptions.AllowAllPath|VirtualPathOptions.AllowNull);
@{ var viewHtmls = new Dictionary<string, object>(); viewHtmls.Add("data-bind", "value: ViewID"); viewHtmls.Add("onchange", "javascript:PageModel.LoadViewContentNames()"); } @Html.DropDownList("view", (List<SelectListItem>)ViewBag.Views, viewHtmls)
this.LoadViewContentNames = function () { $.ajax({ url: type: dataType: data: { viewID: $(" success: function (data) { alert(data); }, error: function (data) { debugger; alert("Error"); } }); };
[{"ViewContentID":1,"Name":"TopContent","Note":"Content on the top"}, {"ViewContentID":2,"Name":"BottomContent","Note":"Content on the bottom"}]
complete: function (xhr, status) { if (status === handleError(); } else { var data = xhr.responseText; } }
$.ajax({ url: type: dataType: data: {viewID: $(" success: function (data) { try { var output = JSON.parse(data); alert(output); } catch (e) { alert("Output is not valid JSON: " + data); } }, error: function (request, error) { alert("AJAX Call Error: " + error); } });
public JsonResult YourAction() { ...return Json(YourReturnObject); }
Connection: Keep-Alive Content-Type: application/json; charset=utf-8 ï»¿ï»¿ï»¿ï»¿ï»¿ï»¿ï»¿ï»¿ï»¿ï»¿{"type":"scan","data":{"image":".\/output\/ou...
$.ajax({ url: type: dataType: cache: false, data: { viewID: $(" success: function (data) { alert(data); }, error: function (data) { debugger; alert("Error"); } });
this.LoadViewContentNames = function () { $.ajax({ url: type: data: { viewID: $(" success: function (data) { alert(data); }, error: function (data) { debugger; alert("Error"); } }); };
String encodedString = getEncodedString(text, encoding); view.setTextAreaContent(encodedString);
<pre> $.parseJSON: function( data ) { ... if ( window.JSON && window.JSON.parse ) { return window.JSON.parse( data ); } ... </pre>
<pre> define([ $.parseJSON: function( data ) { /** THIS RAISES Parsing ERROR if ( window.JSON && window.JSON.parse ) { return window.JSON.parse( data ); } **/ if ( data === null ) { return data; } if ( typeof data === "string" ) { data = $.trim( data ); if ( data ) { if ( rvalidchars.test( data.replace( rvalidescape, "@" ) .replace( rvalidtokens, "]" ) .replace( rvalidbraces, "")) ) { return ( new Function( "return " + data ) )(); } } } $.error( "Invalid JSON: " + data ); } return $; }); </pre>
$.ajax({ dataType: converters: { try { if (typeof JSON === return JSON.parse(result); } else { return $.parseJSON(result); } } catch (e) { console.log("Warning: Could not parse expected JSON response."); return {}; } } }, ...
var index = 0; foreach (var image in Model.Images.OrderBy(p => p.Order)) { Html.RenderPartial("ProductImageForm", image); index++; }
Html.RenderPartial( "ProductImageForm", image, new ViewDataDictionary { { "index", index } } );
Html.RenderPartial( "ProductImageForm", image, new ViewDataDictionary(this.ViewData) { { "index", index } } );
@Html.Partial("_Header", new ViewDataDictionary { { "HeaderName", "User Management" }, { "TitleName", "List Of Users" } }) or @{Html.RenderPartial("_Header", new ViewDataDictionary { { "HeaderName", "User Management" }, { "TitleName", "List Of Users" } });}
<div class="row titleBlock"> <h1>@ViewData["HeaderName"].ToString()</h1> <h5>@ViewData["TitleName"].ToString()</h5> </div>
<configuration> <system.web> <sessionState timeout="20"></sessionState> </system.web> </configuration>
if(Session["UserId"] == null) Response.Redirect("login.aspx");
* Custom Formatting o Build Output o Debug Output o Search Output * Solution Properties o Manage Reference Paths o Manage Project Properties * Apply Fix o File being used by another process o StyleCop warnings o Importing .pfx key file was cancelled * Search Online * Cancel Build When First Project Fails * Advanced Zooming
* Prevent Accidental Drag & Drop * Prevent Accidental Linked Item Delete * Group / Ungroup Items * Show Assembly Details * Build Startup Projects * Open Command Prompt * Open PowerShell * Locate Source File * Open File Location * Show / Hide All Files * Edit Project / Solution File * Copy / Paste As Link * Copy / Paste Reference * Open In Expression Blend * Collapse All * Clean All Build Configurations
* Attach To Local IIS * Debug As Administrator * Debug As Normal user * Debug As Different user
public MyObjectInJson { public long ObjectID {get;set;} public string ObjectInJson {get;set;} }
StringBuilder TheListBuilder = new StringBuilder(); TheListBuilder.Append("["); int TheCounter = 0; foreach (MyObjectInJson TheObject in TheList) { TheCounter++; TheListBuilder.Append(TheObject.ObjectInJson); if (TheCounter != TheList.Count()) { TheListBuilder.Append(","); } } TheListBuilder.Append("]"); return TheListBuilder.ToString();
using System.Web.Script.Serialization; var jsonSerialiser = new JavaScriptSerializer(); var json = jsonSerialiser.Serialize(aList);
using Newtonsoft.Json; var json = JsonConvert.SerializeObject(aList);
using Newtonsoft.Json; string json = JsonConvert.SerializeObject(listTop10);
var serializer = new JavaScriptSerializer(); return serializer.Serialize(TheList);
var serializer = new DataContractJsonSerializer(TheList.GetType()); using (var stream = new MemoryStream()) { serializer.WriteObject(stream, TheList); using (var sr = new StreamReader(stream)) { return sr.ReadToEnd(); } }
[DataContract] public class MyObjectInJson { [DataMember] public long ObjectID {get;set;} [DataMember] public string ObjectInJson {get;set;} }
public static string JSONSerialize<T>(T obj) { string retVal = String.Empty; using (MemoryStream ms = new MemoryStream()) { DataContractJsonSerializer serializer = new DataContractJsonSerializer(obj.GetType()); serializer.WriteObject(ms, obj); var byteArray = ms.ToArray(); retVal = Encoding.UTF8.GetString(byteArray, 0, byteArray.Length); } return retVal; }
var list = new List<string> {"a", "b", "c", "d"}; using(var output = Console.OpenStandardOutput()) { var writer = new DataContractJsonSerializer(typeof (List<string>)); writer.WriteObject(output,list); }
public static void RegisterBundles(BundleCollection bundles) { bundles.Add(new ScriptBundle("~/bundles/jquery").Include( "~/Scripts/jquery-{version}.js")); }
public class MySession { private MySession() { Property1 = "default value"; } public static MySession Current { get { MySession session = (MySession)HttpContext.Current.Session["__MySession__"]; if (session == null) { session = new MySession(); HttpContext.Current.Session["__MySession__"] = session; } return session; } } public string Property1 { get; set; } public DateTime MyDate { get; set; } public int LoginId { get; set; } }
int loginId = MySession.Current.LoginId; string property1 = MySession.Current.Property1; MySession.Current.Property1 = newValue; DateTime myDate = MySession.Current.MyDate; MySession.Current.MyDate = DateTime.Now;
public class SessionCentralized { protected internal static void Save<T>(string sessionName, T value) { HttpContext.Current.Session[sessionName] = value; } protected internal static T Get<T>(string sessionName) { return (T)HttpContext.Current.Session[sessionName]; } public static int? WhatEverSessionVariableYouWantToHold { get { return Get<int?>(nameof(WhatEverSessionVariableYouWantToHold)); } set { Save(nameof(WhatEverSessionVariableYouWantToHold), value); } } }
SessionCentralized.WhatEverSessionVariableYouWantToHold = id;
protected void Button1_Click(object sender, EventArgs e) { EmployeeService es = new EmployeeService(); CityService cs = new CityService(); DateTime dt = new DateTime(2008, 12, 12); Payroll.Entities.Employee e1 = new Payroll.Entities.Employee(); Payroll.Entities.City city1 = cs.SelectCity(Convert.ToInt64(cmbCity.SelectedItem.Value)); e1.Name = "Archana"; e1.Title = "aaaa"; e1.BirthDate = dt; e1.Gender = "F"; e1.HireDate = dt; e1.MaritalStatus = "M"; e1.City = city1; es.AddEmpoyee(e1,city1); }
public string AddEmpoyee(Payroll.Entities.Employee e1, Payroll.Entities.City c1) { Payroll_DAO1 payrollDAO = new Payroll_DAO1(); payrollDAO.AddToEmployee(e1); payrollDAO.SaveChanges(); return "SUCCESS"; }
EmployeeService es = new EmployeeService(); CityService cs = new CityService();
EmployeeService es = new EmployeeService(context); CityService cs = new CityService(context);
var contextOne = new EntityContext(); var contextTwo = new EntityContext(); var user = contexOne.Users.FirstOrDefault(); var group = new Group(); group.User = user; contextTwo.Groups.Add(group); contextTwo.SaveChanges();
var context = new EntityContext(); var user = context.Users.FirstOrDefault(); var group = new Group(); group.User = user; context.Groups.Add(group); context.SaveChanges();
public class Employee{ ... public int? CityId; public virtual City City; }
public sealed class MyModelDbContextSingleton { private static readonly MyModelDbContext instance = new MyModelDbContext(); static MyModelDbContextSingleton() { } private MyModelDbContextSingleton() { } public static MyModelDbContext Instance { get { return instance; } } }
public class ProjectRepository : IProjectRepository { MyModelDbContext context = MyModelDbContextSingleton.Instance;
Payroll.Entities.City city1; using (CityService cs = new CityService()) { city1 = cs.SelectCity(Convert.ToInt64(cmbCity.SelectedItem.Value)); }
private readonly IMyEntityRepository myEntityRepo; private readonly IFooRepository fooRepo; private readonly IBarRepository barRepo; public MyController( IMyEntityRepository myEntityRepo, IFooRepository fooRepo, IBarRepository barRepo) { this.fooRepo = fooRepo; this.barRepo = barRepo; this.myEntityRepo = myEntityRepo; }
... myEntity.Foo = await this.fooRepository.GetFoos().SingleOrDefaultAsync(f => f.Id == model.FooId); if (model.BarId.HasValue) { myEntity.Foo.Bar = await this.barRepository.GetBars().SingleOrDefaultAsync(b => b.Id == model.BarId.Value); } ... await this.myEntityRepo.UpdateAsync(myEntity);
myEntity.Foo.Bar = await this.barRepo.GetBars().AsNoTracking().SingleOrDefault(b => b.Id == model.BarId);
ApplicationUser user = await UserManager.FindByIdAsync(User.Identity.Name); ApplicationDbContext db = new ApplicationDbContent(); db.Users.Uploads.Add(new MyUpload{FileName="newfile.png"}); await db.SavechangesAsync();/ZZZZZZZ
namespace MyDataLayer { namespace Section1 { public class MyClass { public class MyItem { public static string Property1{ get; set; } } public static MyItem GetItem() { MyItem theItem = new MyItem(); theItem.Property1 = "MyValue"; return theItem; } } } }
using MyDataLayer.Section1; public class MyClass { protected void MyMethod { MyClass.MyItem oItem = new MyClass.MyItem(); oItem = MyClass.GetItem(); someLiteral.Text = oItem.Property1; } }
namespace MyNamespace { using System; public class MyType { public string MyProperty { get; set; } = new string(); public static string MyStatic { get; set; } = "I } }
using MyType; public class Somewhere { public void Consuming(){ var myObject = new MyType(); var alpha = myObject.MyProperty; var beta = MyType.MyStatic; } }
System.Data.Entity.Database.SetInitializer<MyDatabaseContext>(MyMigrationStrategy)
using (var client = new HttpClient()) { var response = client.GetAsync("http: if (response.IsSuccessStatusCode) { var responseContent = response.Content; string responseString = responseContent.ReadAsStringAsync().Result; Console.WriteLine(responseString); } }
private static readonly TaskFactory _myTaskFactory = new TaskFactory(CancellationToken.None, TaskCreationOptions.None, TaskContinuationOptions.None, TaskScheduler.Default); public static T RunSync<T>(Func<Task<T>> func) { CultureInfo cultureUi = CultureInfo.CurrentUICulture; CultureInfo culture = CultureInfo.CurrentCulture; return _myTaskFactory.StartNew<Task<T>>(delegate { Thread.CurrentThread.CurrentCulture = culture; Thread.CurrentThread.CurrentUICulture = cultureUi; return func(); }).Unwrap<T>().GetAwaiter().GetResult(); }
Helper.RunSync(new Func<Task<ReturnTypeGoesHere>>(async () => await AsyncCallGoesHere(myparameter)));
public class ValidateMe : IValidatableObject { [Required] public bool Enable { get; set; } [Range(1, 5)] public int Prop1 { get; set; } [Range(1, 5)] public int Prop2 { get; set; } public IEnumerable<ValidationResult> Validate(ValidationContext validationContext) { if (!this.Enable) { /* Return valid result here. * I don * if the whole object is not "enabled" */ } else { /* Check if Prop1 and Prop2 meet their range requirements here * and return accordingly. */ } } }
public class ValidateMe : IValidatableObject { [Required] public bool Enable { get; set; } [Range(1, 5)] public int Prop1 { get; set; } [Range(1, 5)] public int Prop2 { get; set; } public IEnumerable<ValidationResult> Validate(ValidationContext validationContext) { var results = new List<ValidationResult>(); if (this.Enable) { Validator.TryValidateProperty(this.Prop1, new ValidationContext(this, null, null) { MemberName = "Prop1" }, results); Validator.TryValidateProperty(this.Prop2, new ValidationContext(this, null, null) { MemberName = "Prop2" }, results); if (this.Prop1 > this.Prop2) { results.Add(new ValidationResult("Prop1 must be larger than Prop2")); } } return results; } }
public void DoValidation() { var toValidate = new ValidateMe() { Enable = true, Prop1 = 1, Prop2 = 2 }; bool validateAllProperties = false; var results = new List<ValidationResult>(); bool isValid = Validator.TryValidateObject( toValidate, new ValidationContext(toValidate, null, null), results, validateAllProperties); }
public IEnumerable<ValidationResult> Validate(ValidationContext validationContext) { if (this.Enable) { if (this.Prop1 > this.Prop2) { yield return new ValidationResult("Prop1 must be larger than Prop2"); }
var resultsGroupedByMembers = validationResults .SelectMany(vr => vr.MemberNames .Select(mn => new { MemberName = mn ?? "", Error = vr.ErrorMessage })) .GroupBy(x => x.MemberName); foreach (var member in resultsGroupedByMembers) { ModelState.AddModelError( member.Key, string.Join(". ", member.Select(m => m.Error))); }
using System; using System.Collections.Generic; using System.ComponentModel.DataAnnotations; namespace App.Abstractions { [Serializable] abstract public class AEntity { public int Id { get; set; } public IEnumerable<ValidationResult> Validate() { var vResults = new List<ValidationResult>(); var vc = new ValidationContext( instance: this, serviceProvider: null, items: null); var isValid = Validator.TryValidateObject( instance: vc.ObjectInstance, validationContext: vc, validationResults: vResults, validateAllProperties: true); /* if (true) { yield return new ValidationResult("Custom Validation","A Property Name string (optional)"); } */ if (!isValid) { foreach (var validationResult in vResults) { yield return validationResult; } } yield break; } } }
[AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] class RangeIfTrueAttribute : RangeAttribute { private readonly string _NameOfBoolProp; public RangeIfTrueAttribute(string nameOfBoolProp, int min, int max) : base(min, max) { _NameOfBoolProp = nameOfBoolProp; } public RangeIfTrueAttribute(string nameOfBoolProp, double min, double max) : base(min, max) { _NameOfBoolProp = nameOfBoolProp; } protected override ValidationResult IsValid(object value, ValidationContext validationContext) { var property = validationContext.ObjectType.GetProperty(_NameOfBoolProp); if (property == null) return new ValidationResult($"{_NameOfBoolProp} not found"); var boolVal = property.GetValue(validationContext.ObjectInstance, null); if (boolVal == null || boolVal.GetType() != typeof(bool)) return new ValidationResult($"{_NameOfBoolProp} not boolean"); if ((bool)boolVal) { return base.IsValid(value, validationContext); } return null; } }
[AttributeUsage(AttributeTargets.Property)] class ValidEmailAddressIfTrueAttribute : ValidationAttribute { private readonly string _nameOfBoolProp; public ValidEmailAddressIfTrueAttribute(string nameOfBoolProp) { _nameOfBoolProp = nameOfBoolProp; } protected override ValidationResult IsValid(object value, ValidationContext validationContext) { if (validationContext == null) { return null; } var property = validationContext.ObjectType.GetProperty(_nameOfBoolProp); if (property == null) { return new ValidationResult($"{_nameOfBoolProp} not found"); } var boolVal = property.GetValue(validationContext.ObjectInstance, null); if (boolVal == null || boolVal.GetType() != typeof(bool)) { return new ValidationResult($"{_nameOfBoolProp} not boolean"); } if ((bool)boolVal) { var attribute = new EmailAddressAttribute {ErrorMessage = $"{value} is not a valid e-mail address."}; return attribute.GetValidationResult(value, validationContext); } return null; } }
Request.ApplicationPath : /virtual_dir Request.CurrentExecutionFilePath : /virtual_dir/webapp/page.aspx Request.FilePath : /virtual_dir/webapp/page.aspx Request.Path : /virtual_dir/webapp/page.aspx Request.PhysicalApplicationPath : d:\Inetpub\wwwroot\virtual_dir\ Request.QueryString : /virtual_dir/webapp/page.aspx?q=qvalue Request.Url.AbsolutePath : /virtual_dir/webapp/page.aspx Request.Url.AbsoluteUri : http: Request.Url.Host : localhost Request.Url.Authority : localhost:80 Request.Url.LocalPath : /virtual_dir/webapp/page.aspx Request.Url.PathAndQuery : /virtual_dir/webapp/page.aspx?q=qvalue Request.Url.Port : 80 Request.Url.Query : ?q=qvalue Request.Url.Scheme : http Request.Url.Segments : / virtual_dir/ webapp/ page.aspx
Request.ServerVariables("HTTPS") Request.ServerVariables("SERVER_NAME") Request.ServerVariables("SCRIPT_NAME") Request.ServerVariables("QUERY_STRING")
string url = Request.Url.Authority + HttpContext.Current.Request.RawUrl.ToString(); if (Request.ServerVariables["HTTPS"] == "on") { url = "https: } else { url = "http: }
using Microsoft.AspNet.Identity; ... User.Identity.GetUserId();
var store = new UserStore<ApplicationUser>(new ApplicationDbContext()); var userManager = new UserManager<ApplicationUser>(store); ApplicationUser user = userManager.FindByNameAsync(User.Identity.Name).Result;
ApplicationUser user = System.Web.HttpContext.Current.GetOwinContext().GetUserManager<ApplicationUserManager>().FindById(System.Web.HttpContext.Current.User.Identity.GetUserId());
using Microsoft.AspNet.Identity; using Microsoft.AspNet.Identity.Owin;
public AccountController() { IdentityManager = new AuthenticationIdentityManager( new IdentityStore(new ApplicationDbContext())); }
var userWithItems = (ApplicationUser)await IdentityManager.Store.Users .FindAsync(User.Identity.GetUserId(), CancellationToken.None);
public abstract class ApplicationController : Controller { ... protected override void OnAuthentication(AuthenticationContext filterContext) { base.OnAuthentication(filterContext); if ( ... ) { filterContext.HttpContext.User = null; } } ... }
System.Web.HttpRuntime.HostingInit(HostingEnvironmentFlags hostingFlags, PolicyLevel policyLevel, Exception appDomainCreationException) +336
<input type="button" id="btnSave" onclick="javascript:SaveWithParameter( <script type="text/javascript"> function SaveWithParameter(parameter) { __doPostBack( } </script>
public void Page_Load(object sender, EventArgs e) { string parameter = Request["__EVENTARGUMENT"]; }
function testMe(params) { var btnID= __doPostBack(btnID, params); }
string parameter = Request["__EVENTARGUMENT"]; if (parameter == "param1") MyButton_Click(sender, e);
protected void btn_Click(object sender, EventArgs e)
<span class="vote-up<%= puzzle.UserVote == VoteType.Up ? "-selected" : "" %>">Vote Up</span>
<span class="vote-up@{puzzle.UserVote == VoteType.Up ? "-selected" : ""}">Vote Up</span>
<span class="vote-up@(puzzle.UserVote == VoteType.Up ? "-selected" : "")">Vote Up</span>
@(String.IsNullOrEmpty(Model.MaidenName) ? "&nbsp;" : Model.MaidenName)
@if (String.IsNullOrEmpty(Model.MaidenName)) { @Html.Raw("&nbsp;") } else { @Model.MaidenName }
internal class MyResource { internal static global::System.Resources.ResourceManager ResourceManager {...} }
[global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")] internal Strings() { }
public class PublicStrings : Strings { public PublicStrings() { } }
ILog logger = LogManager.GetLogger(typeof(MvcApplication));
void Application_Start(object sender, EventArgs e) { log4net.Config.XmlConfigurator.Configure(); }
<?xml version="1.0" encoding="utf-8" ?> <configuration> <appSettings> <add key="log4net.Internal.Debug" value="true"/> </appSettings> </configuration>
[assembly: log4net.Config.XmlConfigurator(ConfigFile = "log4net.config", Watch = true)]
[assembly: log4net.Config.XmlConfigurator(Watch = true)]
public FileContentResult Test(TestViewModel vm) { var stream = new MemoryStream(); return File(stream.GetBuffer(), "application/pdf", "test.pdf"); }
[HttpPost] public IHttpActionResult Test(TestViewModel vm) { return Ok(pdfOutput); }
[HttpGet] public IHttpActionResult Test() { var stream = new MemoryStream(); var content = new StreamContent(stream); content.Headers.ContentType = new MediaTypeHeaderValue("application/pdf"); content.Headers.ContentLength = stream.GetBuffer().Length; return Ok(content); }
{"Headers":[{"Key":"Content-Type","Value":["application/pdf"]},{"Key":"Content-Length","Value":["152844"]}]}
[HttpGet] public HttpResponseMessage Generate() { var stream = new MemoryStream(); var result = new HttpResponseMessage(HttpStatusCode.OK) { Content = new ByteArrayContent(stream.ToArray()) }; result.Content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("attachment") { FileName = "CertificationCard.pdf" }; result.Content.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream"); return result; }
[HttpGet] public IHttpActionResult Test() { var stream = new MemoryStream(); var result = new HttpResponseMessage(HttpStatusCode.OK) { Content = new ByteArrayContent(stream.GetBuffer()) }; result.Content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("attachment") { FileName = "test.pdf" }; result.Content.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream"); var response = ResponseMessage(result); return response; }
[HttpGet] public HttpResponseMessage Test() { var path = System.Web.HttpContext.Current.Server.MapPath("~/Content/test.docx");; HttpResponseMessage result = new HttpResponseMessage(HttpStatusCode.OK); var stream = new FileStream(path, FileMode.Open); result.Content = new StreamContent(stream); result.Content.Headers.ContentDisposition = new ContentDispositionHeaderValue("attachment"); result.Content.Headers.ContentDisposition.FileName = Path.GetFileName(path); result.Content.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream"); result.Content.Headers.ContentLength = stream.Length; return result; }
<script type="text/javascript"> $(document).ready(function () { $(" window.location.href = "@Url.Action("GetFile", "Data", new { httproute = "" })"; }); }); </script> <button id="btn"> Button text </button> <a href=" @Url.Action("GetFile", "Data", new { httproute = "" }) ">Data</a>
[HttpGet] public HttpResponseMessage Test() { var stream = new MemoryStream(); var response = Request.CreateResponse(HttpStatusCode.OK); response.Content = new StreamContent(stream); return response; }
[HttpGet] public HttpResponseMessage Test() { var stream = new MemoryStream(); stream.Position = 0; var response = Request.CreateResponse(HttpStatusCode.OK); response.Content = new StreamContent(stream); return response; }
var response = Request.CreateResponse(HttpStatusCode.OK, new StringContent(log, System.Text.Encoding.UTF8, "application/octet-stream");
var response = Request.CreateResponse(HttpStatusCode.OK); response.Content = new StringContent(log, System.Text.Encoding.UTF8, "application/octet-stream");
public class FileResult : IHttpActionResult { public FileResult(string filePath) { if (filePath == null) throw new ArgumentNullException(nameof(filePath)); FilePath = filePath; } public string FilePath { get; } public Task<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken) { var response = new HttpResponseMessage(HttpStatusCode.OK); response.Content = new StreamContent(File.OpenRead(FilePath)); var contentType = MimeMapping.GetMimeMapping(Path.GetExtension(FilePath)); response.Content.Headers.ContentType = new MediaTypeHeaderValue(contentType); return Task.FromResult(response); } }
public class MyController : ApiController { public IHttpActionResult Get() { string filePath = GetSomeValidFilePath(); return new FileResult(filePath); } }
[HttpGet] public HttpResponseMessage Me(string hash) { HttpResponseMessage httpResponseMessage; List<Something> somethings = ... httpResponseMessage = Request.CreateResponse(HttpStatusCode.OK, new { result = true, somethings = somethings }); return httpResponseMessage; }
public class Foo { public int Id { get; set; } public string Name { get; set; } [JsonIgnore] public List<Something> Somethings { get; set; } }
[DataContract] public class Foo { [DataMember] public int Id { get; set; } [DataMember] public string Name { get; set; } public List<Something> Somethings { get; set; } }
[DataContract] public class MyClass { [DataMember] public int Id { get; set;} [DataMember] public string Name { get; set; } public string DontExposeMe { get; set; } }
public class PublicDomainJsonContractResolverOptIn : DefaultContractResolver { public string[] AllowList { get; set; } protected override IList<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization) { IList<JsonProperty> properties = base.CreateProperties(type, memberSerialization); properties = properties.Where(p => AllowList.Contains(p.PropertyName)).ToList(); return properties; } }
[HttpGet] public BinaryImage Single(int key) { var contractResolver = Configuration.Formatters.JsonFormatter.SerializerSettings.ContractResolver as PublicDomainJsonContractResolverOptIn; if (contractResolver != null) contractResolver.AllowList = new string[] { "Id", "Bytes", "MimeType", "Width", "Height" }; BinaryImage image = new BinaryImage { Id = 1 }; return image; }
var appXmlType = config.Formatters.XmlFormatter.SupportedMediaTypes.FirstOrDefault(t => t.MediaType == "application/xml"); config.Formatters.XmlFormatter.SupportedMediaTypes.Remove(appXmlType);
[HttpGet] public HttpResponseMessage Me(string hash) { HttpResponseMessage httpResponseMessage; List<Something> somethings = ... var returnObjects = somethings.Select(x => new { Id = x.Id, OtherField = x.OtherField }); httpResponseMessage = Request.CreateResponse(HttpStatusCode.OK, new { result = true, somethings = returnObjects }); return httpResponseMessage; }
public class Foo { public int Id { get; set; } public string Name { get; set; } [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public List<Something> Somethings { get; set; } }
public class Foo { public int Id { get; set; } public string Name { get; set; } public List<Something> Somethings { get; set; } public bool ShouldSerializeSomethings() { var resultOfSomeLogic = false; return resultOfSomeLogic; } }
public class Foo { [IgnoreDataMember] public int Id { get; set; } public string Name { get; set; } }
public class MyJsonContractResolver : DefaultContractResolver { public List<Tuple<string, string>> ExcludeProperties { get; set; } protected override JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization) { JsonProperty property = base.CreateProperty(member, memberSerialization); if (ExcludeProperties?.FirstOrDefault( s => s.Item2 == member.Name && s.Item1 == member.DeclaringType.Name) != null) { property.ShouldSerialize = instance => { return false; }; } return property; } }
public async Task<IActionResult> Sites() { var items = await db.Sites.GetManyAsync(); return Json(items.ToList(), new JsonSerializerSettings { ContractResolver = new MyJsonContractResolver() { ExcludeProperties = new List<Tuple<string, string>> { Tuple.Create("Site", "Name"), Tuple.Create("<TypeName>", "<MemberName>"), } } }); }
public async Task<IActionResult> Sites() { var items = await db.Sites.GetManyAsync(); return Json(items.Select(s => new { s.ID, s.DisplayName, s.Url, UrlAlias = s.Url, NestedItems = s.NestedItems.Select(ni => new { ni.Name, ni.OrdeIndex, ni.Enabled, }), })); }
CreateMap<Foo, Foo>().ForMember(x => x.Bar, opt => opt.Ignore());
[Route("api/myroute")] [AcceptVerbs("POST")] public IHttpActionResult PostMyObject(JObject myObject) { MyObject myObjectConverted = myObject.ToObject<MyObject>(); return Ok(myObjectConverted); }
[Serializable] public partial class MyObject { [IgnoreDataMember] public MyOtherObject MyOtherObject => MyOtherObject.GetById(MyOtherObjectId); } [Serializable] public partial class MyOtherObject { [IgnoreDataMember] public List<MyObject> MyObjects => MyObject.GetByMyOtherObjectId(Id); }
var string1 = @ ; var string2 = "\"inside quotes\"";
var string1 = @"before ""inside"" after"; var string2 = "before \"inside\" after";
string title = string.Format("<div>\"{0}\"</div>", "some text");
public static string AddDoubleQuotes(this string value) { return "\"" + value + "\""; }
string path = @"H:\\MOVIES\\Battel SHIP\\done-battleship-cd1.avi"; string hh = string.Format("\"{0}\"", path); Process.Start(@"C:\Program Files (x86)\VideoLAN\VLC\vlc.exe ", hh + " ,--play");
var title = "Title between quotes"; var string1 = $@"<div>""{title}""</div>"; Console.WriteLine (string1);
string commentor = $"<span class=\"fa fa-plus\" aria-hidden=\"true\"> {variable}</span>";
string doubleQuotedPath = string.Format(@"""{0}""",path);
string1 = @"Your ""Text"" Here"; string2 = "Your \"Text\" Here";
Text = Convert.ToString("<i class=\"fa fa-check-circle\"></i>") : Convert.ToString("<i class=\"fa fa-info-circle\"></i>"
char quote = string modifiedString = quote + "Original String" + quote;
echo "<p>Congratulations, & output -> Congratulations, "Mr Jonh "!
using (var client = new HttpClient()) { client.BaseAddress = new Uri("http: client.DefaultRequestHeaders.Accept.Clear(); client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json")); HttpResponseMessage response = await client.GetAsync("api/products/1"); if (response.IsSuccessStatusCode) { Product product = await response.Content.ReadAsAsync<Product>(); Console.WriteLine("{0}\t${1}\t{2}", product.Name, product.Price, product.Category); } }
HttpClientHandler _sharedHandler = new HttpClientHandler(); HttpClient GetClient(string token) { return new HttpClient(_sharedHandler, disposeHandler: false) { DefaultRequestHeaders = { Authorization = new AuthenticationHeaderValue("Bearer", token) } }; }
const int DefaultConnectionLeaseTimeout = 60000; ServicePoint sp = ServicePointManager.FindServicePoint(new Uri("http: sp.ConnectionLeaseTimeout = DefaultConnectionLeaseTimeout;
using System.Web.Http; namespace WebApplication1 { public static class WebApiConfig { public static void Register(HttpConfiguration config) { config.MapHttpAttributeRoutes(); config.Routes.MapHttpRoute( name: "DefaultApi", routeTemplate: "api/{controller}/{id}", defaults: new { id = RouteParameter.Optional } ); var formatter = GlobalConfiguration.Configuration.Formatters.JsonFormatter; formatter.SerializerSettings.ContractResolver = new Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver(); } } }
protected void Application_Start() { AreaRegistration.RegisterAllAreas(); GlobalConfiguration.Configure(WebApiConfig.Register); FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters); RouteConfig.RegisterRoutes(RouteTable.Routes); BundleConfig.RegisterBundles(BundleTable.Bundles); }
public class TestController : ApiController { public IEnumerable<string> Get() { return new string[] { "value1", "value2" }; } public string Get(int id) { return "value"; } }
Page.ClientScript.RegisterStartupScript(this.GetType(),"CallMyFunction","MyFunction()",true);
ClientScript.RegisterStartupScript(GetType(),"hwa","alert(
<script type="text/javascript" language="javascript"> function Func() { alert("hello!") } </script>
ScriptManager.RegisterStartupScript(this.Page, Page.GetType(), "text", "Func()", true);
string jsFunc = "myFunc(" + MyBackValue + ")"; ScriptManager.RegisterStartupScript(this.Page, Page.GetType(), "myJsFn", jsFunc, true);
public partial class Products : System.Web.UI.Page { [System.Web.Services.WebMethod()] [System.Web.Script.Services.ScriptMethod()] public static List<Product> GetProducts(int cateogryID) { }
<asp:ScriptManager ID="ScriptManager1" runat="server" EnablePageMethods="true" />
ClientScript.RegisterStartupScript(GetType(),"id","callMyJSFunction()",true);
this.Controls.Add(new LiteralControl("<script type=
var newuser = if (newuser == "yes") startTutorial();
ScriptManager.RegisterStartupScript(this, this.Page.GetType(),"updatePanel1Script", "javascript:ConfirmExecute()",true/>
<%@ Page Title="" Language="C <asp:Content ID="Content1" ContentPlaceHolderID="head" runat="Server"> <%@ Register Assembly="AjaxControlToolkit" Namespace="AjaxControlToolkit" TagPrefix="ajax" %> <script type="text/javascript" src="https: <script type="text/javascript"> function helloFromCodeBehind() { alert("hello!") } </script> </asp:Content> <asp:Content ID="Content2" ContentPlaceHolderID="ContentPlaceHolder1" runat="Server"> <div id="container" ></div> </asp:Content>
using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.UI; using System.Web.UI.WebControls; namespace NAMESPACE_Web { public partial class History1 : System.Web.UI.Page { protected void Page_Load(object sender, EventArgs e) { ScriptManager.RegisterStartupScript(this, GetType(), "displayalertmessage", "helloFromCodeBehind()", true); } } }
ScriptManager.RegisterClientScriptBlock(Page, GetType(String), "myScriptName" + key, $"myFunctionName({someJavascriptObject})", True)
ScriptManager.RegisterClientScriptBlock(Page, typeof(string), "myScriptName" + key, $"myFunctionName({someJavascriptObject})", true);
<body> <form id="form1" runat="server"> <div> <asp:Label ID="lblJavaScript" runat="server" Text=""></asp:Label> <asp:Button ID="btnShowDialogue" runat="server" Text="Show Dialogue" /> </div> </form> </body>
<head runat="server"> <title>Calling javascript function from code behind example</title> <script type="text/javascript"> function showDialogue() { alert("this dialogue has been invoked through codebehind."); } </script> </head>
object Json_Object=maintainerService.Convert_To_JSON(Jobitem); ScriptManager.RegisterClientScriptBlock(this,GetType(), "Javascript", "SelectedJobsMaintainer("+Json_Object+"); ",true);
ScriptManager.RegisterStartupScript(UpdatePanel1, UpdatePanel1.GetType(), "CallMyFunction", "confirm()", true);
ScriptManager.RegisterStartupScript(Page, GetType(), "JavaFunction", "AlertError();", true);
string script = "window.onload = function() { YourJavaScriptFunctionName(); };"; ClientScript.RegisterStartupScript(this.GetType(), "YourJavaScriptFunctionName", script, true);
public ActionResult MyXmlAction() { var xml = new XDocument( new XElement("root", new XAttribute("version", "2.0"), new XElement("child", "Hello World!"))); return new XmlActionResult(xml); }
public sealed class XmlActionResult : ActionResult { private readonly XDocument _document; public Formatting Formatting { get; set; } public string MimeType { get; set; } public XmlActionResult(XDocument document) { if (document == null) throw new ArgumentNullException("document"); _document = document; MimeType = "text/xml"; Formatting = Formatting.None; } public override void ExecuteResult(ControllerContext context) { context.HttpContext.Response.Clear(); context.HttpContext.Response.ContentType = MimeType; using (var writer = new XmlTextWriter(context.HttpContext.Response.OutputStream, Encoding.UTF8) { Formatting = Formatting }) _document.WriteTo(writer); } }
public partial class Default : System.Web.UI.Page, IPostBackEventHandler{}
public void RaisePostBackEvent(string eventArgument) { }
<div style="display: none;"> <asp:Button runat="server" ... OnClick="ButtonClickHandlerMethod" /> </div>
var button = document.getElementById( ); button.click();
Ajax.Utility.RegisterTypeForAjax(GetType(YOURPAGECLASSNAME))
<Ajax.AjaxMethod()> _ Public Function Get5() AS Integer Return 5 End Function
<script type="text/javascript"> var xmlhttp = new XMLHttpRequest(); xmlhttp.open("GET", "http: xmlhttp.send(); xmlhttp.onstatereadychange = function() { if (xmlhttp.readyState == 4 && xmlhttp.statsCode == 200) { document.getElementById("resultText").innerHTML = xmlhttp.responseText; } }; </script>
public class DataController : ApiController { public HttpResponseMessage<string[]> Get() { HttpResponseMessage<string[]> response = new HttpResponseMessage<string[]>( Repository.Get(true), new MediaTypeHeaderValue("application/json") ); return response; } }
void Application_Start(object sender, EventArgs e) { RouteTable.Routes.MapHttpRoute("Service", "api/{controller}/{id}"); }
<script src="http: <script language="javascript" type="text/javascript"> function GetCompanies() { $(" $.ajax({ type: "POST", url: "Default.aspx/GetCompanies", data: "{}", dataType: "json", contentType: "application/json; charset=utf-8", success: OnSuccess, error: OnError }); } function OnSuccess(data) { var TableContent = "<table border= "<tr>" + "<td>Rank</td>" + "<td>Company Name</td>" + "<td>Revenue</td>" + "<td>Industry</td>" + "</tr>"; for (var i = 0; i < data.d.length; i++) { TableContent += "<tr>" + "<td>"+ data.d[i].Rank +"</td>" + "<td>"+data.d[i].CompanyName+"</td>" + "<td>"+data.d[i].Revenue+"</td>" + "<td>"+data.d[i].Industry+"</td>" + "</tr>"; } TableContent += "</table>"; $(" } function OnError(data) { } </script>
[WebMethod] [ScriptMethod(ResponseFormat= ResponseFormat.Json)] public static List<TopCompany> GetCompanies() { System.Threading.Thread.Sleep(5000); List<TopCompany> allCompany = new List<TopCompany>(); using (MyDatabaseEntities dc = new MyDatabaseEntities()) { allCompany = dc.TopCompanies.ToList(); } return allCompany; }
var theForm = document.forms[ if (!theForm) { theForm = document.form1; } function __doPostBack(eventTarget, eventArgument) { if (!theForm.onsubmit || (theForm.onsubmit() != false)) { theForm.__EVENTTARGET.value = eventTarget; theForm.__EVENTARGUMENT.value = eventArgument; theForm.submit(); } }
<asp:Button ID="btnJavascript" runat="server" UseSubmitBehavior="false" />
var button = document.getElementById( ); button.click();
public void RaisePostBackEvent(string _arg) { UserControlID.RaisePostBackEvent(_arg); }
public void RaisePostBackEvent(string _arg) { UserControlID.method1(); UserControlID.method2(); }
if(!ClientScript.IsStartupScriptRegistered("window")) { Page.ClientScript.RegisterStartupScript(this.GetType(), "window", "pop();", true); }
<%= Page.ClientScript.GetPostBackEventReference(ddlVoucherType, String.Empty) %>;
protected void Page_Load(object sender, EventArgs e) { if (Request.QueryString["key"] != null) { string key= Request.QueryString["key"]; if (key=="1") { } } }
<div style="display: none;"> <asp:Button runat="server" ... OnClick="ButtonClickHandlerMethod" /> </div>
var button = document.getElementByID( ); button.Click();
HttpContent myContent = HttpContent.Create(SOME_JSON);
var stringContent = new StringContent(jObject.ToString()); var response = await httpClient.PostAsync("http:
var stringContent = new StringContent(JsonConvert.SerializeObject(model), Encoding.UTF8, "application/json"); var response = await httpClient.PostAsync("http:
var stringContent = new StringContent(json, Encoding.UTF8, "application/json"); var response = await httpClient.PostAsync("http:
var stringContent = new FormUrlEncodedContent(new[] { new KeyValuePair<string, string>("field1", "value1"), new KeyValuePair<string, string>("field2", "value2"), }); var response = await httpClient.PostAsync("http:
public interface IPasswordHasher { string HashPassword(string password); PasswordVerificationResult VerifyHashedPassword(string hashedPassword, string providedPassword); }
public static string HashPassword(string password) { byte[] salt; byte[] buffer2; if (password == null) { throw new ArgumentNullException("password"); } using (Rfc2898DeriveBytes bytes = new Rfc2898DeriveBytes(password, 0x10, 0x3e8)) { salt = bytes.Salt; buffer2 = bytes.GetBytes(0x20); } byte[] dst = new byte[0x31]; Buffer.BlockCopy(salt, 0, dst, 1, 0x10); Buffer.BlockCopy(buffer2, 0, dst, 0x11, 0x20); return Convert.ToBase64String(dst); }
public static bool VerifyHashedPassword(string hashedPassword, string password) { byte[] buffer4; if (hashedPassword == null) { return false; } if (password == null) { throw new ArgumentNullException("password"); } byte[] src = Convert.FromBase64String(hashedPassword); if ((src.Length != 0x31) || (src[0] != 0)) { return false; } byte[] dst = new byte[0x10]; Buffer.BlockCopy(src, 1, dst, 0, 0x10); byte[] buffer3 = new byte[0x20]; Buffer.BlockCopy(src, 0x11, buffer3, 0, 0x20); using (Rfc2898DeriveBytes bytes = new Rfc2898DeriveBytes(password, dst, 0x3e8)) { buffer4 = bytes.GetBytes(0x20); } return ByteArraysEqual(buffer3, buffer4); }
/* ======================= * HASHED PASSWORD FORMATS * ======================= * * Version 2: * PBKDF2 with HMAC-SHA1, 128-bit salt, 256-bit subkey, 1000 iterations. * (See also: SDL crypto guidelines v5.1, Part III) * Format: { 0x00, salt, subkey } * * Version 3: * PBKDF2 with HMAC-SHA256, 128-bit salt, 256-bit subkey, 10000 iterations. * Format: { 0x01, prf (UInt32), iter count (UInt32), salt length (UInt32), salt, subkey } * (All UInt32s are stored big-endian.) */
private const int SaltByteSize = 24; private const int HashByteSize = 24; private const int HasingIterationsCount = 10101; public static string HashPassword(string password) { byte[] salt; byte[] buffer2; if (password == null) { throw new ArgumentNullException("password"); } using (Rfc2898DeriveBytes bytes = new Rfc2898DeriveBytes(password, SaltByteSize, HasingIterationsCount)) { salt = bytes.Salt; buffer2 = bytes.GetBytes(HashByteSize); } byte[] dst = new byte[(SaltByteSize + HashByteSize) + 1]; Buffer.BlockCopy(salt, 0, dst, 1, SaltByteSize); Buffer.BlockCopy(buffer2, 0, dst, SaltByteSize + 1, HashByteSize); return Convert.ToBase64String(dst); } public static bool VerifyHashedPassword(string hashedPassword, string password) { byte[] _passwordHashBytes; int _arrayLen = (SaltByteSize + HashByteSize) + 1; if (hashedPassword == null) { return false; } if (password == null) { throw new ArgumentNullException("password"); } byte[] src = Convert.FromBase64String(hashedPassword); if ((src.Length != _arrayLen) || (src[0] != 0)) { return false; } byte[] _currentSaltBytes = new byte[SaltByteSize]; Buffer.BlockCopy(src, 1, _currentSaltBytes, 0, SaltByteSize); byte[] _currentHashBytes = new byte[HashByteSize]; Buffer.BlockCopy(src, SaltByteSize + 1, _currentHashBytes, 0, HashByteSize); using (Rfc2898DeriveBytes bytes = new Rfc2898DeriveBytes(password, _currentSaltBytes, HasingIterationsCount)) { _passwordHashBytes = bytes.GetBytes(SaltByteSize); } return AreHashesEqual(_currentHashBytes, _passwordHashBytes); } private static bool AreHashesEqual(byte[] firstHash, byte[] secondHash) { int _minHashLength = firstHash.Length <= secondHash.Length ? firstHash.Length : secondHash.Length; var xor = firstHash.Length ^ secondHash.Length; for (int i = 0; i < _minHashLength; i++) xor |= firstHash[i] ^ secondHash[i]; return 0 == xor; }
protected void Page_Load(object sender, EventArgs e) { lblDisplayDate.Text = DateTime.Now.ToString("T"); } protected void btnPostback_Click(object sender, EventArgs e) { System.Text.StringBuilder sb = new System.Text.StringBuilder(); sb.Append(@"<script language= sb.Append(@"var lbl = document.getElementById( sb.Append(@"lbl.style.color= sb.Append(@"</script>"); if(!ClientScript.IsStartupScriptRegistered("JSScript")) { ClientScript.RegisterStartupScript(this.GetType(),"JSScript", sb.ToString()); } } protected void btnPostBack2_Click(object sender, EventArgs e) { System.Text.StringBuilder sb = new System.Text.StringBuilder(); sb.Append(@"<script language= sb.Append(@"var lbl = document.getElementById( sb.Append(@"lbl.style.color= sb.Append(@"</script>"); if (!ClientScript.IsClientScriptBlockRegistered("JSScriptBlock")) { ClientScript.RegisterClientScriptBlock(this.GetType(), "JSScriptBlock", sb.ToString()); } }
protected void btnPostBack2_Click(object sender, EventArgs e) { System.Text.StringBuilder sb = new System.Text.StringBuilder(); sb.Append("<script language= sb.Append("var lbl = document.getElementById( sb.Append("lbl.style.color= sb.Append("}</script>"); if (!ClientScript.IsClientScriptBlockRegistered("JSScriptBlock")) { ClientScript.RegisterClientScriptBlock(this.GetType(), "JSScriptBlock", sb.ToString()); } string funcCall = "<script language= if (!ClientScript.IsStartupScriptRegistered("JSScript")) { ClientScript.RegisterStartupScript(this.GetType(), "JSScript", funcCall); } }
Page.ClientScript.RegisterStartupScript(Me.GetType(), "Testing", _ "document.forms[0][
Page.ClientScript.RegisterClientScriptBlock(Me.GetType(), "Testing", _ "document.forms[0][
var data = { ... } $.ajax({ type: "POST", data: data, datatype: "json", traditional: true, contentType: "application/json; charset=utf-8", url: myURL, success: function (response) { ... }, error: function (response) { ... } });
<form id="__AjaxAntiForgeryForm" action=" @Html.AntiForgeryToken() </form>
public class HomeController : Controller { public ActionResult Index() { return View(); } [HttpPost] [ValidateAntiForgeryToken] public ActionResult Index(string someValue) { return Json(new { someValue = someValue }); } }
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "__AjaxAntiForgeryForm" })) { @Html.AntiForgeryToken() } <div id="myDiv" data-url="@Url.Action("Index", "Home")"> Click me to send an AJAX request to a controller action decorated with the [ValidateAntiForgeryToken] attribute </div> <script type="text/javascript"> $( var form = $( var token = $( $.ajax({ url: $(this).data( type: data: { __RequestVerificationToken: token, someValue: }, success: function (result) { alert(result.someValue); } }); return false; }); </script>
public static MvcHtmlString AntiForgeryTokenForAjaxPost(this HtmlHelper helper) { var antiForgeryInputTag = helper.AntiForgeryToken().ToString(); var removedStart = antiForgeryInputTag.Replace(@"<input name=""__RequestVerificationToken"" type=""hidden"" value=""", ""); var tokenValue = removedStart.Replace(@""" />", ""); if (antiForgeryInputTag == removedStart || removedStart == tokenValue) throw new InvalidOperationException("Oops! The Html.AntiForgeryToken() method seems to return something I did not expect."); return new MvcHtmlString(string.Format(@"{0}:""{1}""", "__RequestVerificationToken", tokenValue)); }
__RequestVerificationToken:"P5g2D8vRyE3aBn7qQKfVVVAsQc853s-naENvpUAPZLipuw0pa_ffBf9cINzFgIRPwsf7Ykjt46ttJy5ox5r3mzpqvmgNYdnKc1125jphQV0NnM5nGFtcXXqoY3RpusTH_WcHPzH4S4l1PmB8Uu7ubZBftqFdxCLC5n-xT0fHcAY1"
$(function () { $(" $.ajax({ url: data: { items: $(".sortable").sortable( type: traditional: true }); }); });
<script type="text/javascript"> function gettoken() { var token = token = $(token).val(); return token; } </script>
$.ajax({ type: "POST", url: "/Account/Login", data: { __RequestVerificationToken: gettoken(), uname: uname, pass: pass }, dataType: contentType: success: successFu, });
@using (Html.BeginForm("LoggOff", "Accounts", FormMethod.Post, new { id = "__AjaxAntiForgeryForm" })) { @Html.AntiForgeryToken() } <!-- this could be a button --> <a href=" <script type="text/javascript"> $( $( return false; }); </script>
function registerStudent() { var student = { "FirstName": $( "LastName": $( "Email": $( "Phone": $( }; $.ajax({ url: type: data: { __RequestVerificationToken:token, student: student, }, dataType: contentType: success: function (response) { if (response.result == "Success") { alert( } }, error: function (x,h,r) { alert( } }) };
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf @functions{ public string GetAntiXsrfRequestToken() { return Xsrf.GetAndStoreTokens(Context).RequestToken; } }
function DoSomething(id) { $.post("/something/todo/"+id, { "__RequestVerificationToken": }
services.AddMvc(options => { options.Filters.Add(new AutoValidateAntiforgeryTokenAttribute()); })
$.post( url, $(formId).serialize(), function (data) { $(formId).html(data); });
function AjaxPostWithAntiForgeryToken(destinationUrl, successCallback) { var token = $( var headers = {}; headers["__RequestVerificationToken"] = token; $.ajax({ type: "POST", url: destinationUrl, data: { __RequestVerificationToken: token }, dataType: "json", success: function (response) { successCallback(response); }, error: function (xhr, status, error) { } });
[HttpPost] [AllowAnonymous] [ValidateAntiForgeryToken] public JsonResult SendVerificationCodeSMS(string PhoneNumber) { return Json(PhoneNumber); }
$.ajax( { url: "/Account/SendVerificationCodeSMS", method: "POST", contentType: dataType: "json", data: { PhoneNumber: $( __RequestVerificationToken: $( }, success: function (data, textStatus, jqXHR) { if (textStatus == "success") { alert(data); } else { } }, error: function (jqXHR, textStatus, errorThrown) { console.log(textStatus); console.log(jqXHR.status); console.log(jqXHR.statusText); console.log(jqXHR.responseText); } });
public class Color { public int ColorId { get; set; } public string Name { get; set; } }
public class PageModel { public int MyColorId { get; set; } }
public static IEnumerable<Color> Colors = new List<Color> { new Color { ColorId = 1, Name = "Red" }, new Color { ColorId = 2, Name = "Blue" } };
<%= Html.DropDownListFor(n => n.MyColorId, new SelectList(Colors, "ColorId", "Name")) %>
<%: Html.DropDownListFor( model => model.Color, new SelectList( new List<Object>{ new { value = 0 , text = "Red" }, new { value = 1 , text = "Blue" }, new { value = 2 , text = "Green"} }, "value", "text", Model.Color ) ) %>
namespace EzPL8.Models { public class MyEggs { public Dictionary<int, string> Egg { get; set; } public MyEggs() { Egg = new Dictionary<int, string>() { { 0, "No Preference"}, { 1, "I hate eggs"}, { 2, "Over Easy"}, { 3, "Sunny Side Up"}, { 4, "Scrambled"}, { 5, "Hard Boiled"}, { 6, "Eggs Benedict"} }; } }
@Html.DropDownListFor(m => m.Egg.Keys, new SelectList( Model.Egg, "Key", "Value"))
@Html.DropDownListFor(model => model.MyOption, new List<SelectListItem> { new SelectListItem { Value = "0" , Text = "Option A" }, new SelectListItem { Value = "1" , Text = "Option B" }, new SelectListItem { Value = "2" , Text = "Option C" } }, new { @class="myselect"})
@Html.DropDownListFor(model => model.MyOption, db.MyOptions.Select(x => new SelectListItem { Text = x.Name, Value = x.Id.ToString() }))
@Html.DropDownListFor(model => model.ContentManagement_Send_Section, new List<SelectListItem> { new SelectListItem { Value = "0", Text = "Plese Select one Item" } } .Concat(db.NameOfPaperSections.Select(x => new SelectListItem { Text = x.NameOfPaperSection, Value = x.PaperSectionID.ToString() })), new { @class = "myselect" })
@using (Html.BeginForm()) { <p>Do you like pizza? @Html.DropDownListFor(x => x.likesPizza, new[] { new SelectListItem() {Text = "Yes", Value = bool.TrueString}, new SelectListItem() {Text = "No", Value = bool.FalseString} }, "Choose an option") </p> <input type = "submit" value = "Submit my answer" /> }
if (inputType == InputType.CheckBox) { StringBuilder inputItemBuilder = new StringBuilder(); inputItemBuilder.Append(tagBuilder.ToString(TagRenderMode.SelfClosing)); TagBuilder hiddenInput = new TagBuilder("input"); hiddenInput.MergeAttribute("type", HtmlHelper.GetInputTypeString(InputType.Hidden)); hiddenInput.MergeAttribute("name", fullName); hiddenInput.MergeAttribute("value", "false"); inputItemBuilder.Append(hiddenInput.ToString(TagRenderMode.SelfClosing)); return MvcHtmlString.Create(inputItemBuilder.ToString()); }
var path = System.Web.Hosting.HostingEnvironment.MapPath("~/App_Data/myfile.txt")
var path = Server.MapPath("~/App_Data"); var fullpath = Path.Combine(path , "myfile.txt");
System.Reflection.Assembly.GetAssembly(type).Location
class test { public static void useServerPath(string path) { if (File.Exists(path) { \\...... do whatever you wabt } else { \\..... } }
protected void BtAtualizacao_Click(object sender, EventArgs e) { string path = Server.MapPath("Folder") + "\\anifile.txt"; test.useServerPath(path); }
FileStream fileStream = new FileStream(System.Web.HttpContext.Current.Server.MapPath("~/File.txt"), FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);
HttpContext.Current.Server.MapPath("~/EmailLogic/RegistrationTemplate.html")
DateTime dt = DateTime.MinValue; DateTime.TryParseExact("20071122", "yyyyMMdd", null,System.Globalization.DateTimeStyles.None, out dt);
protected override void Application_Start(object sender, EventArgs e) { base.Application_Start(sender, e); String _path = String.Concat(System.AppDomain.CurrentDomain.RelativeSearchPath, ";", System.Environment.GetEnvironmentVariable("PATH")); System.Environment.SetEnvironmentVariable("PATH", _path, EnvironmentVariableTarget.Process); MyAppLog.Initialize(); MyAppLog.WriteMessage("Application Started"); }
"C:\WINDOWS\system32\inetsrv\rewrite.dll" (reference) Go to "Programs and Features" (Win+X, F) and repair "IIS URL Rewrite Module 2". "C:\WINDOWS\system32\inetsrv\aspnetcore.dll" (reference) Go to "Programs and Features" (Win+X, F) and repair "Microsoft .NET Core 1.0.0 - VS 2015 Tooling ...".
The Module DLL C:\WINDOWS\System32\inetsrv\cgi.dll failed to load. The data is the error.
[workspace] $ "C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\tf.exe" workspace -new Hudson-ProjectName1-Build-MASTER;domain1\username1 -noprompt -server:http: The path D:\jenkins\jobs\ProjectName1-Build\workspace is already mapped in workspace Hudson-ProjectName1-Build-MASTER [http:
tf workspace -delete Hudson-ProjectName1-Build-MASTER;domain1\username1 -noprompt -server:http:
SELECT WorkspaceId, * FROM tbl_Workspace ORDER BY WorkspaceName SELECT LocalItem, * FROM tbl_WorkingFolder WHERE WorkspaceId = <<WorkspaceId from above>> UPDATE tbl_WorkingFolder SET LocalItem =
if (result == "Success") { if (FileUpload.HasFile) { try { File.Delete(Request.PhysicalApplicationPath + app_settings.login_images + txtUploadStatus.Text); string filename = Path.GetFileName(btnFileUpload.FileName); btnFileUpload.SaveAs(Request.PhysicalApplicationPath + app_settings.login_images + filename); } catch (Exception ex) { Message(ex.ToString()); } } }
File.SetAttributes(file, FileAttributes.Normal); File.Delete(file);
File.Copy(file, dest, true); File.SetAttributes(dest, FileAttributes.Normal);
string uploadPath = Server.MapPath("~/uploads"); file.SaveAs(uploadPath); file.SaveAs(Path.Combine(uploadPath, file.FileName));
if(itemUri!="") File.Delete(Path.Combine(RemoteDirectoryPath, itemUri));
System.UnauthorizedAccessException: Access to the path "C:\\Order\\Media 44aa4857-3bac-4a18-a307-820450361662.mp4" is denied.
dirPath = Server.MapPath(".") + "\\website\\" + strUserName; if (!Directory.Exists(dirPath)) { DirectoryInfo DI = Directory.CreateDirectory(dirPath); } string filePath = Server.MapPath(".") + "\\Website\\default.aspx"; File.Copy(filePath, dirPath + "\\default.aspx", true); File.SetAttributes(dirPath + "\\default.aspx", FileAttributes.Normal);
private void BasicApp_Load(object sender, EventArgs e) { if (!DesignMode) { m_Globals = new Globals(); Text = TGG.GetApplicationConfigInfo(); } }
void RenameFile(string from, string to) { try { System.IO.File.Move(from, to) } catch { System.Threading.Thread.Sleep(500); RenameFile(from, to); } }
class Program { private static int numFolders = 10000; private static string rootDirectory = "C:\\1"; static void Main(string[] args) { if (Directory.Exists(rootDirectory)) { Directory.Delete(rootDirectory, true); Thread.Sleep(5000); } Stopwatch sw = Stopwatch.StartNew(); CreateFolder(); long time = sw.ElapsedMilliseconds; Console.WriteLine(time); Console.ReadLine(); } private static void CreateFolder() { var one = Directory.CreateDirectory(rootDirectory); for (int i = 1; i <= numFolders; i++) { one.CreateSubdirectory(i.ToString()); } } }
C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\devenv.exe /SafeMode
C:\Users\Allwyn\AppData\Roaming\Microsoft\VisualStudio\14.0 C:\Users\Allwyn\AppData\Roaming\Microsoft\VisualStudio\14.0
<system.web.webPages.razor> <host factoryType="System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=5.2.3.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" /> <pages pageBaseType="System.Web.Mvc.WebViewPage"> <namespaces> <add namespace="LinkApp.Models.Templates"/> <add namespace="System.Web.Mvc" /> <add namespace="System.Web.Mvc.Ajax" /> <add namespace="System.Web.Mvc.Html" /> <add namespace="System.Web.Optimization"/> <add namespace="System.Web.Routing" /> <add namespace="LinkApp" /> </namespaces> </pages> </system.web.webPages.razor> Oddly enough, I moved my custom namespace to the bottom, and that fixed it, like this: <system.web.webPages.razor> <host factoryType="System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=5.2.3.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" /> <pages pageBaseType="System.Web.Mvc.WebViewPage"> <namespaces> <add namespace="System.Web.Mvc" /> <add namespace="System.Web.Mvc.Ajax" /> <add namespace="System.Web.Mvc.Html" /> <add namespace="System.Web.Optimization"/> <add namespace="System.Web.Routing" /> <add namespace="LinkApp" /> <add namespace="LinkApp.Models.Templates"/> </namespaces> </pages> </system.web.webPages.razor>
<configSections> <sectionGroup name="system.web.webPages.razor" type="System.Web.WebPages.Razor.Configuration.RazorWebSectionGroup, System.Web.WebPages.Razor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"> <section name="host" type="System.Web.WebPages.Razor.Configuration.HostSection, System.Web.WebPages.Razor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" /> <section name="pages" type="System.Web.WebPages.Razor.Configuration.RazorPagesSection, System.Web.WebPages.Razor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" /> </sectionGroup> </configSections> <system.web.webPages.razor> <host factoryType="System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=5.2.3.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\devenv.exe /setup
<input name="submit" type="submit" id="submit" value="Save" /> <input name="process" type="submit" id="process" value="Process" />
<input name="submit" type="submit" id="submit" value="Save" /> <input name="submit" type="submit" id="process" value="Process" />
public ActionResult Index(string submit) { Response.Write(submit); return View(); }
public ActionResult Index(string submit) { switch (submit) { case "Save": break; case "Process": break; default: throw new Exception(); break; } return View(); }
<input name="submit" type="submit" id="submit" value="Save" /> <input name="process" type="submit" id="process" value="Process" />
public ActionResult SomeAction(string submit) { if (!string.IsNullOrEmpty(submit)) { } else { } }
</p> <button name="button" value="register">Register</button> <button name="button" value="cancel">Cancel</button> </p>
public ActionResult Register(string button, string userName, string email, string password, string confirmPassword) { if (button == "cancel") return RedirectToAction("Index", "Home"); ...
if (Request.Form["submit"] != null) { } else if (Request.Form["process"] != null) { }
<input type="submit" value="Cancel" name="action" /> <input type="submit" value="Create" name="action" />
[HttpPost] [MultiButton(MatchFormKey="action", MatchFormValue="Cancel")] public ActionResult Cancel() { return Content("Cancel clicked"); } [HttpPost] [MultiButton(MatchFormKey = "action", MatchFormValue = "Create")] public ActionResult Create(Person person) { return Content("Create clicked"); }
[AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)] public class MultiButtonAttribute : ActionNameSelectorAttribute { public string MatchFormKey { get; set; } public string MatchFormValue { get; set; } public override bool IsValidName(ControllerContext controllerContext, string actionName, MethodInfo methodInfo) { return controllerContext.HttpContext.Request[MatchFormKey] != null && controllerContext.HttpContext.Request[MatchFormKey] == MatchFormValue; } }
<input name="submit" type="submit" id="submit" value="Save" /> <input name="process" type="submit" id="process" value="Process" /> [HttpPost] public ActionResult index(FormCollection collection) { string submitType = "unknown"; if(collection["submit"] != null) { submitType = "submit"; } else if (collection["process"] != null) { submitType = "process"; } }
<input name="btnSubmit" type="submit" value="Save" /> <input name="btnProcess" type="submit" value="Process" />
public ActionResult Create(string btnSubmit, string btnProcess) { if(btnSubmit != null) else }
</p> <input type="submit" name="buttonSave" value="Save"/> <input type="submit" name="buttonProcess" value="Process"/> <input type="submit" name="buttonCancel" value="Process"/> </p>
public ActionResult Register(string buttonSave, string buttonProcess, string buttonCancel){if (buttonSave!= null) { } if (buttonProcess!= null) { } if (buttonCancel!= null) { }
<div> <input name="submitButton" type="submit" value="Register" /> </div> <div> <input name="cancelButton" type="submit" value="Cancel" /> </div>
public ActionResult Save(FormCollection form) { if (this.httpContext.Request.Form["cancelButton"] !=null) { } else if(this.httpContext.Request.Form["submitButton"] !=null) { } }
[Route("api/YOURCONTROLLER/{paramOne}/{paramTwo}")] public string Get(int paramOne, int paramTwo) { return "The [Route] with multiple params worked"; }
public IEnumerable<SampleObject> Get(int pageNumber, int pageSize) { ..
config.Routes.MapHttpRoute( name: "GetPagedData", routeTemplate: "api/{controller}/{pageNumber}/{pageSize}" );
public IEnumerable<Course> Get() { NameValueCollection nvc = HttpUtility.ParseQueryString(Request.RequestUri.Query); var system = nvc["System"]; return _courses; }
$.ajax({ url: type: data: { system : searchString: dataType: success: function (data) { $.each(data, function (index, v) { alert(index + }); }, statusCode: { 404: function () { alert( } } });
public class ResourceQuery { public string Param1 { get; set; } public int OptionalParam2 { get; set; } } public class SampleResourceController : ApiController { public SampleResourceModel Get([FromUri] ResourceQuery query) { } }
[Route("api/controller/{one}/{two}")] public string Get(int One, int Two) { return "both params of the root link({one},{two}) and Get function parameters (one, two) should be same "; }
string htmlContents = new System.IO.StreamReader(resultsStream,Encoding.UTF8,true).ReadToEnd(); HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument(); doc.LoadHtml(htmlContents); if (doc == null) return null; string output = ""; foreach (var node in doc.DocumentNode.ChildNodes) { output += node.InnerText; }
protected string StripHtml(string Txt) { return Regex.Replace(Txt, "<(.|\\n)*?>", string.Empty); } Protected Function StripHtml(Txt as String) as String Return Regex.Replace(Txt, "<(.|\n)*?>", String.Empty) End Function
System.Web.UI.HtmlControls.HtmlGenericControl htmlDiv = new System.Web.UI.HtmlControls.HtmlGenericControl("div"); htmlDiv.InnerHtml = htmlString; String plainText = htmlDiv.InnerText;
public static string RemoveHTMLTags(string content) { var cleaned = string.Empty; try { StringBuilder textOnly = new StringBuilder(); using (var reader = XmlNodeReader.Create(new System.IO.StringReader("<xml>" + content + "</xml>"))) { while (reader.Read()) { if (reader.NodeType == XmlNodeType.Text) textOnly.Append(reader.ReadContentAsString()); } } cleaned = textOnly.ToString(); } catch { string textOnly = string.Empty; Regex tagRemove = new Regex(@"<[^>]*(>|$)"); Regex compressSpaces = new Regex(@"[\s\r\n]+"); textOnly = tagRemove.Replace(content, string.Empty); textOnly = compressSpaces.Replace(textOnly, " "); cleaned = textOnly; } return cleaned; }
string result = Regex.Replace(anytext, @"<(.|\n)*?>", string.Empty);
public static string StripTags(this string markup) { try { StringReader sr = new StringReader(markup); XPathDocument doc; using (XmlReader xr = XmlReader.Create(sr, new XmlReaderSettings() { ConformanceLevel = ConformanceLevel.Fragment })) { doc = new XPathDocument(xr); } return doc.CreateNavigator().Value; } catch { return string.Empty; } }
public static string RemoveHtmlTags(this string html) { if (String.IsNullOrEmpty(html)) return html; var doc = new HtmlAgilityPack.HtmlDocument(); doc.LoadHtml(html); if (doc.DocumentNode == null || doc.DocumentNode.ChildNodes == null) { return WebUtility.HtmlDecode(html); } var sb = new StringBuilder(); var i = 0; foreach (var node in doc.DocumentNode.ChildNodes) { var text = node.InnerText.SafeTrim(); if (!String.IsNullOrEmpty(text)) { sb.Append(text); if (i < doc.DocumentNode.ChildNodes.Count - 1) { sb.Append(Environment.NewLine); } } i++; } var result = sb.ToString(); return WebUtility.HtmlDecode(result); } public static string SafeTrim(this string str) { if (str == null) return null; return str.Trim(); }
public string StripTags(HtmlNode documentNode, IList keepTags) { var result = new StringBuilder(); foreach (var childNode in documentNode.ChildNodes) { if (childNode.Name.ToLower() == " { result.Append(childNode.InnerText); } else { if (!keepTags.Contains(childNode.Name.ToLower())) { result.Append(StripTags(childNode, keepTags)); } else { result.Append(childNode.OuterHtml.Replace(childNode.InnerHtml, StripTags(childNode, keepTags))); } } } return result.ToString(); }
using System.Text.RegularExpressions; string str = Regex.Replace(HttpUtility.HtmlDecode(HTMLString), "<.*?>", string.Empty);
private static string DecodeUrlString(string url) { string newUrl; while ((newUrl = Uri.UnescapeDataString(url)) != url) url = newUrl; return newUrl; }
string decodedUrl = HttpUtility.UrlDecode("my.aspx?val=%2Fxyz2F");
protected void Page_Load(object sender, EventArgs e) { SmtpClient sc = new SmtpClient("mail address"); MailMessage msg = null; try { msg = new MailMessage("xxxx@gmail.com", "yyyy@gmail.com", "Message from PSSP System", "This email sent by the PSSP system"); sc.Send(msg); } catch (Exception ex) { throw ex; } finally { if (msg != null) { msg.Dispose(); } } }
msg = new MailMessage("xxxx@gmail.com", "yyyy@gmail.com", "Message from PSSP System", "This email sent by the PSSP system<br />" + "<b>this is bold text!</b>"); msg.IsBodyHtml = true;
<table> <tr> <td> Dealer </td> <td> : </td> <td> </td> </tr> </table>
string Body = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("EmailTemplates/Customer.htm"));
public static void SendEmail(string Body) { MailMessage message = new MailMessage(); message.From = new MailAddress(Session["Email"].Tostring()); message.To.Add(ConfigurationSettings.AppSettings["RequesEmail"].ToString()); message.Subject = "Request from " + SessionFactory.CurrentCompany.CompanyName + " to add a new supplier"; message.IsBodyHtml = true; message.Body = Body; SmtpClient smtpClient = new SmtpClient(); smtpClient.UseDefaultCredentials = true; smtpClient.Host = ConfigurationSettings.AppSettings["SMTP"].ToString(); smtpClient.Port = Convert.ToInt32(ConfigurationSettings.AppSettings["PORT"].ToString()); smtpClient.EnableSsl = true; smtpClient.Credentials = new System.Net.NetworkCredential(ConfigurationSettings.AppSettings["USERNAME"].ToString(), ConfigurationSettings.AppSettings["PASSWORD"].ToString()); smtpClient.Send(message); }
@Html.DisplayFor(modelItem => item.MyDateTime.ToLongDateString())
@{var val = item.MyDateTime.ToLongDateString(); Html.DisplayFor(modelItem => val); }
public static string FormatDateTimeHideMidNight(this DateTime dateTime) { if (dateTime.TimeOfDay == TimeSpan.Zero) return dateTime.ToString("d"); else return dateTime.ToString("g"); } public static string FormatDateTimeHideMidNight(this DateTime? dateTime) { if (dateTime.HasValue) return dateTime.Value.FormatDateTimeHideMidNight(); else return ""; }
@Html.DisplayFor(m => m.MyDateTime, "ShortDateTime")
[DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)] public DateTime MyDateTime { get; set; }
@Html.TextBox("MyDate", Model.MyDate.ToLongDateString())
@Html.ValueFor(model => model.MyDateTime, "{0:dd/MM/yyyy}")
@Html.TextBoxFor(model => model.DateTime, "{0:d}");
@Html.TextBoxFor( model => model.DateTime.Date, "{0:d}", new { @class = "datePicker", @data_date_format=System.Globalization.CultureInfo .CurrentUICulture.DateTimeFormat.ShortDatePattern }));
$( $(this).datepicker({ dateFormat:$(this).data("dateFormat").toLowerCase().replace("yyyy","yy") }); });
[DataType(DataType.Date)] public DateTime Added { get; set; }
@Model.LeadDate.ToString("dd-MMM-yyyy") @Model.LeadDate.ToString("MM/dd/yy")
<td> @(item.Startdate.HasValue ? item.Startdate.Value.ToString("dd/MM/yyyy") : "Date is Empty") </td
@{ string datein = Convert.ToDateTime(item.InDate).ToString("dd/MM/yyyy"); @datein }
string dt = Model.dateinModel.ToString("dd/MM/yyy");
@Html.FormatValue( (object)Convert.ChangeType(item.transdate, typeof(object)), "{0: yyyy-MM-dd}")
Could not load file or assembly The system cannot find the path specified.
<dependentAssembly> <assemblyIdentity name="System.Net.Http" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" /> <bindingRedirect oldVersion="0.0.0.0-2.2.28.0" newVersion="2.2.28.0" /> </dependentAssembly>
<dependentAssembly> <assemblyIdentity name="System.Net.Http.Formatting" publicKeyToken="31bf3856ad364e35" culture="neutral" /> <bindingRedirect oldVersion="0.0.0.0-5.2.3.0" newVersion="5.2.3.0" /> </dependentAssembly>
Update-Package -ProjectName MyProjectName -reinstall
var setting = config.Formatters.JsonFormatter.SerializerSettings; setting.ContractResolver = new CamelCasePropertyNamesContractResolver(); setting.Formatting = Formatting.Indented;
using Newtonsoft.Json.Serialization; using Newtonsoft.Json;
Dim itemValues As Array = System.Enum.GetValues(GetType(Response)) Dim itemNames As Array = System.Enum.GetNames(GetType(Response)) For i As Integer = 0 To itemNames.Length - 1 Dim item As New ListItem(itemNames(i), itemValues(i)) dropdownlist.Items.Add(item) Next
Array itemValues = System.Enum.GetValues(typeof(Response)); Array itemNames = System.Enum.GetNames(typeof(Response)); for (int i = 0; i <= itemNames.Length - 1 ; i++) { ListItem item = new ListItem(itemNames[i], itemValues[i]); dropdownlist.Items.Add(item); }
public static class Enumeration { public static IDictionary<int, string> GetAll<TEnum>() where TEnum: struct { var enumerationType = typeof (TEnum); if (!enumerationType.IsEnum) throw new ArgumentException("Enumeration type is expected."); var dictionary = new Dictionary<int, string>(); foreach (int value in Enum.GetValues(enumerationType)) { var name = Enum.GetName(enumerationType, value); dictionary.Add(value, name); } return dictionary; } }
ddlResponse.DataSource = Enumeration.GetAll<Response>(); ddlResponse.DataTextField = "Value"; ddlResponse.DataValueField = "Key"; ddlResponse.DataBind();
Html.DropDownListFor(o => o.EnumProperty, Enum.GetValues(typeof(enumtype)).Cast<enumtype>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }))
foreach (Response r in Enum.GetValues(typeof(Response))) { ListItem item = new ListItem(Enum.GetName(typeof(Response), r), r.ToString()); DropDownList1.Items.Add(item); }
protected System.Web.UI.WebControls.DropDownList ddColor; private void Page_Load(object sender, System.EventArgs e) { if(!IsPostBack) { ddColor.DataSource = Enum.GetNames(typeof(Color)); ddColor.DataBind(); } }
private void ddColor_SelectedIndexChanged(object sender, System.EventArgs e) { Color selectedColor = (Color)Enum.Parse(typeof(Color),ddColor.SelectedValue }
using System.ComponentModel; public enum CompanyType { [Description("")] Null = 1, [Description("Supplier")] Supplier = 2, [Description("Customer")] Customer = 3 }
using System.Collections.Generic; using System.ComponentModel; using System.Linq; using System.Web.Mvc; public static class EnumExtension { public static string ToDescription(this System.Enum value) { var attributes = (DescriptionAttribute[])value.GetType().GetField(value.ToString()).GetCustomAttributes(typeof(DescriptionAttribute), false); return attributes.Length > 0 ? attributes[0].Description : value.ToString(); } public static IEnumerable<SelectListItem> ToSelectList<T>(this System.Enum enumValue) { return System.Enum.GetValues(enumValue.GetType()).Cast<T>() .Select( x => new SelectListItem { Text = ((System.Enum)(object) x).ToDescription(), Value = x.ToString(), Selected = (enumValue.Equals(x)) }); } }
public class Company { public string CompanyName { get; set; } public CompanyType Type { get; set; } }
@Html.DropDownListFor(m => m.Type, @Model.Type.ToSelectList<CompanyType>())
@Html.DropDownList("type", Enum.GetValues(typeof(CompanyType)).Cast<CompanyType>() .Select(x => new SelectListItem {Text = x.ToDescription(), Value = x.ToString()}))
public class DropDownData { enum Responses { Yes = 1, No = 2, Maybe = 3 } public String Text { get; set; } public int Value { get; set; } public List<DropDownData> GetList() { var items = new List<DropDownData>(); foreach (int value in Enum.GetValues(typeof(Responses))) { items.Add(new DropDownData { Text = Enum.GetName(typeof (Responses), value), Value = value }); } return items; } }
<asp:DropDownList ID="DropDownList1" runat="server" DataSourceID="ObjectDataSource1" DataTextField="Text" DataValueField="Value"> </asp:DropDownList> <asp:ObjectDataSource ID="ObjectDataSource1" runat="server" SelectMethod="GetList" TypeName="DropDownData"></asp:ObjectDataSource>
enum Responses { Yes = 1, No = 2, Maybe = 3 } protected void Page_Load(object sender, EventArgs e) { if (!IsPostBack) { foreach (int value in Enum.GetValues(typeof(Responses))) { DropDownList1.Items.Add(new ListItem(Enum.GetName(typeof(Responses), value), value.ToString())); } } }
Array itemValues = Enum.GetValues(typeof(TaskStatus)); Array itemNames = Enum.GetNames(typeof(TaskStatus)); for (int i = 0; i <= itemNames.Length; i++) { ListItem item = new ListItem(itemNames.GetValue(i).ToString(), itemValues.GetValue(i).ToString()); ddlStatus.Items.Add(item); }
public enum Color { RED, GREEN, BLUE } ddColor.DataSource = Enum.GetNames(typeof(Color)); ddColor.DataBind();
var responseTypes= Enum.GetNames(typeof(Response)).Select(x => new { text = x, value = (int)Enum.Parse(typeof(Response), x) }); DropDownList.DataSource = responseTypes; DropDownList.DataTextField = "text"; DropDownList.DataValueField = "value"; DropDownList.DataBind();
public static void BindControlToEnum(DataBoundControl ControlToBind, Type type) { if (type == null) throw new ArgumentNullException("type"); else if (ControlToBind==null ) throw new ArgumentNullException("ControlToBind"); if (!type.IsEnum) throw new ArgumentException("Only enumeration type is expected."); Dictionary<int, string> pairs = new Dictionary<int, string>(); foreach (int i in Enum.GetValues(type)) { pairs.Add(i, Enum.GetName(type, i)); } ControlToBind.DataSource = pairs; ListControl lstControl = ControlToBind as ListControl; if (lstControl != null) { lstControl.DataTextField = "Value"; lstControl.DataValueField = "Key"; } ControlToBind.DataBind(); }
DropDownList1.DataSource = Enum.GetValues(typeof(Response)); DropDownList1.DataBind();
Response rIn = Response.Maybe; DropDownList1.Text = rIn.ToString();
Response rOut = (Response) Enum.Parse(typeof(Response), DropDownList1.Text);
public static void BindToEnum(Type enumType, ListControl lc) { string[] names = Enum.GetNames(enumType); Array values = Enum.GetValues(enumType); Hashtable ht = new Hashtable(); for (int i = 0; i < names.Length; i++) ht.Add(names[i], (int)values.GetValue(i)); lc.DataSource = ht; lc.DataTextField = "Key"; lc.DataValueField = "Value"; lc.DataBind(); }
BindToEnum(typeof(NewsType), DropDownList1); BindToEnum(typeof(NewsType), CheckBoxList1); BindToEnum(typeof(NewsType), RadoBuuttonList1);
@Html.DropDownList("response", EnumHelper.GetSelectList(typeof(Response)))
public class YourEntity { public int ID { get; set; } public string Name{ get; set; } public string Description { get; set; } public OptionType Types { get; set; } } public enum OptionType { Unknown, Option1, Option2, Option3 }
@Html.EnumDropDownListFor(model => model.Types, htmlAttributes: new { @class = "form-control" })
var mylist = Enum.GetValues(typeof(MyEnum)).Cast<MyEnum>().ToList<MyEnum>().OrderBy(l => l.ToString()); foreach (MyEnum item in mylist) ddlDivisao.Items.Add(new ListItem(item.ToString(), ((int)item).ToString()));
public static object GetEnumDescriptions(Type enumType) { var list = new List<KeyValuePair<Enum, string>>(); foreach (Enum value in Enum.GetValues(enumType)) { string description = value.ToString(); FieldInfo fieldInfo = value.GetType().GetField(description); var attribute = fieldInfo.GetCustomAttributes(typeof(DescriptionAttribute), false).First(); if (attribute != null) { description = (attribute as DescriptionAttribute).Description; } list.Add(new KeyValuePair<Enum, string>(value, description)); } return list; }
enum SampleEnum { NormalNoSpaces, [Description("Description With Spaces")] DescriptionWithSpaces, [Description("50%")] Percent_50, }
m_Combo_Sample.DataSource = GetEnumDescriptions(typeof(SampleEnum)); m_Combo_Sample.DisplayMember = "Value"; m_Combo_Sample.ValueMember = "Key";
Namespace CustomExtensions Public Module ListItemCollectionExtension <Runtime.CompilerServices.Extension()> _ Public Sub AddEnum(Of TEnum As Structure)(items As System.Web.UI.WebControls.ListItemCollection) Dim enumerationType As System.Type = GetType(TEnum) Dim enumUnderType As System.Type = System.Enum.GetUnderlyingType(enumType) If Not enumerationType.IsEnum Then Throw New ArgumentException("Enumeration type is expected.") Dim enumTypeNames() As String = System.Enum.GetNames(enumerationType) Dim enumTypeValues() As TEnum = System.Enum.GetValues(enumerationType) For i = 0 To enumTypeNames.Length - 1 items.Add(New System.Web.UI.WebControls.ListItem(saveResponseTypeNames(i), TryCast(enumTypeValues(i), System.Enum).ToString("d"))) Next End Sub End Module End Namespace
Imports <projectName>.CustomExtensions.ListItemCollectionExtension ... yourDropDownList.Items.AddEnum(Of EnumType)()
namespace CustomExtensions { public static class ListItemCollectionExtension { public static void AddEnum<TEnum>(this System.Web.UI.WebControls.ListItemCollection items) where TEnum : struct { System.Type enumType = typeof(TEnum); System.Type enumUnderType = System.Enum.GetUnderlyingType(enumType); if (!enumType.IsEnum) throw new Exception("Enumeration type is expected."); string[] enumTypeNames = System.Enum.GetNames(enumType); TEnum[] enumTypeValues = (TEnum[])System.Enum.GetValues(enumType); for (int i = 0; i < enumTypeValues.Length; i++) { items.add(new System.Web.UI.WebControls.ListItem(enumTypeNames[i], (enumTypeValues[i] as System.Enum).ToString("d"))); } } } }
using CustomExtensions.ListItemCollectionExtension; ... yourDropDownList.Items.AddEnum<EnumType>()
items.Add(New System.Web.UI.WebControls.ListItem(saveResponseTypeNames(i), saveResponseTypeValues(i).ToString("d")))
Dim newListItem As System.Web.UI.WebControls.ListItem newListItem = New System.Web.UI.WebControls.ListItem(enumTypeNames(i), Convert.ChangeType(enumTypeValues(i), enumUnderType).ToString()) newListItem.Selected = If(EqualityComparer(Of TEnum).Default.Equals(selected, saveResponseTypeValues(i)), True, False) items.Add(newListItem)
foreach (string value in Enum.GetNames(typeof(Response))) ddlResponse.Items.Add(new ListItem() { Text = value, Value = ((int)Enum.Parse(typeof(Response), value)).ToString() });
<asp:LinkButton ID="myButton" runat="server" Text="Click Me!" OnClick="myButton_Click" OnClientClick="aspnetForm.target =
<script type="text/javascript"> function fixform() { if (opener.document.getElementById("aspnetForm").target != "_blank") return; opener.document.getElementById("aspnetForm").target = ""; opener.document.getElementById("aspnetForm").action = opener.location.href; } </script>
public static class ResponseHelper { public static void Redirect(this HttpResponse response, string url, string target, string windowFeatures) { if ((String.IsNullOrEmpty(target) || target.Equals("_self", StringComparison.OrdinalIgnoreCase)) && String.IsNullOrEmpty(windowFeatures)) { response.Redirect(url); } else { Page page = (Page)HttpContext.Current.Handler; if (page == null) { throw new InvalidOperationException("Cannot redirect to new window outside Page context."); } url = page.ResolveClientUrl(url); string script; if (!String.IsNullOrEmpty(windowFeatures)) { script = @"window.open(""{0}"", ""{1}"", ""{2}"");"; } else { script = @"window.open(""{0}"", ""{1}"");"; } script = String.Format(script, url, target, windowFeatures); ScriptManager.RegisterStartupScript(page, typeof(Page), "Redirect", script, true); } } }
Response.Redirect(redirectURL, "_blank", "menubar=0,scrollbars=1,width=780,height=900,top=10");
response.write("<script>"); response.write("window.open( response.write("</script>");
ScriptManager.RegisterStartupScript(Page, Page.GetType(), "popup", "window.open(
function fixform() { document.getElementById("aspnetForm").target = }
ClientScript.RegisterStartupScript(this.Page.GetType(), "", "window.open(
<script type="text/javascript"> function targetMeBlank() { document.forms[0].target = "_blank"; } </script>
<asp:linkbutton runat="server" ID="lnkbtn1" Text="target me to blank dude" OnClick="lnkbtn1_Click" OnClientClick="targetMeBlank();"/>
<asp:Button ID="btnNewEntry" runat="Server" CssClass="button" Text="New Entry" OnClick="btnNewEntry_Click" OnClientClick="aspnetForm.target = protected void btnNewEntry_Click(object sender, EventArgs e) { Response.Redirect("New.aspx"); }
protected void MyButton_OnPreRender(object sender, EventArgs e) { string URL = "~/MyPage.aspx"; URL = Page.ResolveClientUrl(URL); MyButton.OnClientClick = "window.open( }
<asp:Button ID="Button1" runat="server" Text="Go" OnClientClick="window.open( onclick="Button3_Click" />
String clientScriptName = "ButtonClickScript"; Type clientScriptType = this.GetType (); ClientScriptManager clientScript = Page.ClientScript; if (!clientScript.IsClientScriptBlockRegistered (clientScriptType, clientScriptName)) { StringBuilder sb = new StringBuilder (); sb.Append ("<script type= sb.Append ("window.open( sb.Append ("</script>"); clientScript.RegisterClientScriptBlock (clientScriptType, clientScriptName, sb.ToString ()); }
<asp:Button ID="btnSubmit" OnClientClick="openNewWin();" Text="Submit" OnClick="btn_OnClick" runat="server"/>
function openNewWin () { $( setTimeout( } function resetFormTarget(){ $( }
<asp:HyperLink CssClass="hlk11" ID="hlkLink" runat="server" Text=
protected void Page_Load(object sender, EventArgs e) { Calendar1.SelectionChanged += CalendarSelectionChanged; } private void CalendarSelectionChanged(object sender, EventArgs e) { DateTime selectedDate = ((Calendar) sender).SelectedDate; string url = "HistoryRates.aspx?date=" + HttpUtility.UrlEncode(selectedDate.ToShortDateString()); ScriptManager.RegisterClientScriptBlock(this, GetType(), "rates" + selectedDate, "openWindow( }
Dim URL As String = "http: URL = Page.ResolveClientUrl(URL) btnSearch.OnClientClick = "window.open(
$(function () { $(".new-window").on("click", function () { $(" setTimeout(function () { $(" }, 1); }); });
<asp:LinkButton ID="btn" runat="server" CausesValidation="false" Text="Print" Visible="false" target="_blank" />
btn.Attributes("href") = String.Format(ResolveUrl("~/") + "test/TestForm.aspx?formId={0}", formId)
<asp:Button ID="Button1" runat="server" Text="Button" onclick="Button1_Click" OnClientClick = "SetTarget();" />
function SetTarget() { document.forms[0].target = "_blank";}
public class Car : Vehicle { public string Make { get; set; } }
public string GetPropertyValue(string propertyName) { return the value of the property; }
return car.GetType().GetProperty(propertyName).GetValue(car, null);
public object GetPropertyValue(object car, string propertyName) { return car.GetType().GetProperties() .Single(pi => pi.Name == propertyName) .GetValue(car, null); }
public static object GetPropertyValue(this object car, string propertyName) { return car.GetType().GetProperties() .Single(pi => pi.Name == propertyName) .GetValue(car, null); }
string makeValue = (string)car.GetPropertyValue("Make");
Type t = typeof(Car); PropertyInfo prop = t.GetProperty("Make"); if(null != prop) return prop.GetValue(this, null);
class Customer { public string CustomerName { get; set; } public string Address { get; set; } public string GetPropertyValue(string propertyName) { try { return this.GetType().GetProperty(propertyName).GetValue(this, null) as string; } catch { return null; } } } static void Main(string[] args) { var customer = new Customer { CustomerName = "Harvey Triana", Address = "Something..." }; Console.WriteLine(customer.GetPropertyValue("CustomerName")); }
public static class Helper { public static object GetPropertyValue(this object T, string PropName) { return T.GetType().GetProperty(PropName) == null ? null : T.GetType().GetProperty(PropName).GetValue(T, null); } }
Car foo = new Car(); var balbal = foo.GetPropertyValue("Make");
public static TResult GetPropertyValue<TResult>(this object t, string propertyName) { object val = t.GetType().GetProperties().Single(pi => pi.Name == propertyName).GetValue(t, null); return (TResult)val; }
Enumerable.Range(0, 1 + end.Subtract(start).Days) .Select(offset => start.AddDays(offset)) .ToArray();
var dates = new List<DateTime>(); for (var dt = start; dt <= end; dt = dt.AddDays(1)) { dates.Add(dt); }
var paddedSeries = fullDates.ToDictionary(date => date, date => timeSeries.ContainsDate(date) ? timeSeries[date] : defaultValue);
public static IEnumerable<DateTime> GetDateRange(DateTime startDate, DateTime endDate) { if (endDate < startDate) throw new ArgumentException("endDate must be greater than or equal to startDate"); while (startDate <= endDate) { yield return startDate; startDate = startDate.AddDays(1); } }
public static IEnumerable<DateTime> Range(this DateTime startDate, DateTime endDate) { return Enumerable.Range(0, (endDate - startDate).Days + 1).Select(d => startDate.AddDays(d)); }
var dates = new DateTime(2000, 1, 1).Range(new DateTime(2000, 1, 31));
list = list.Where(s => s.startDate >= Input_startDate && s.endDate <= Input_endDate);
SqlDataReader dr = null; dr = cmd.ExecuteReader(); while (dr.Read()) { TextBox1.Text = dr["ImagePath"].ToString(); }
DataTable dt = new DataTable(); SqlDataAdapter adapter = new SqlDataAdapter(cmd); adapter.Fill(dt); foreach(DataRow row in dt.Rows) { TextBox1.Text = row["ImagePath"].ToString(); }
foreach (DataRow row in myDataTable.Rows) { Console.WriteLine(row["ImagePath"]); }
var imagePaths = dt.AsEnumerble().Select(r => r.Field<string>("ImagePath"); foreach(string imgPath in imagePaths) { TextBox1.Text = imgPath; }
foreach (DataRow row in dtData.Rows) { if (row["Column_name"].ToString() == txtBox.Text) { string strName1 = txtRowDeletion.Text; string strDeleteData = "Sp_name"; SqlCommand cmdDeleteData = new SqlCommand(strDeleteData, conn); cmdDeleteData.CommandType = System.Data.CommandType.StoredProcedure; conn.Open(); cmdDeleteData.ExecuteNonQuery(); conn.Close(); GetData(); dtData = (DataTable)Session["GetData"]; BindGrid(dtData); lblMsgForDeletion.Text = "The row successfully deleted !!" + txtRowDeletion.Text; txtRowDeletion.Text = ""; break; } else { lblMsgForDeletion.Text = "The row is not present "; } }
The inline constraint resolver of type Line 21: GlobalConfiguration.Configuration.EnsureInitialized();
{ "bool", typeof(BoolRouteConstraint) }, { "datetime", typeof(DateTimeRouteConstraint) }, { "decimal", typeof(DecimalRouteConstraint) }, { "double", typeof(DoubleRouteConstraint) }, { "float", typeof(FloatRouteConstraint) }, { "guid", typeof(GuidRouteConstraint) }, { "int", typeof(IntRouteConstraint) }, { "long", typeof(LongRouteConstraint) }, { "minlength", typeof(MinLengthRouteConstraint) }, { "maxlength", typeof(MaxLengthRouteConstraint) }, { "length", typeof(LengthRouteConstraint) }, { "min", typeof(MinRouteConstraint) }, { "max", typeof(MaxRouteConstraint) }, { "range", typeof(RangeRouteConstraint) }, { "alpha", typeof(AlphaRouteConstraint) }, { "regex", typeof(RegexRouteConstraint) }
[Route("goodExample/{number:int}")] [Route("goodExampleBool/{isQuestion:bool}")] [Route("badExample/{number : int}")] [Route("badExampleBool/{isQuestion : bool}")]
[HttpGet] [Route("api/orders/undo/{orderID}/action/{actiontype: OrderCorrectionActionEnum}")] public IHttpActionResult Undo(int orderID, OrderCorrectionActionEnum actiontype) { _route(undo(orderID, action); } public enum OrderCorrectionActionEnum { [EnumMember] Cleared, [EnumMember] Deleted, }
public class OrderCorrectionEnumRouteConstraint : IHttpRouteConstraint { public bool Match(HttpContextBase httpContext, Route route, string parameterName, RouteValueDictionary values, RouteDirection routeDirection) { var response = Enum.GetNames(typeof(OrderCorrectionActionEnum)).Any(s = &gt; s.ToLowerInvariant() == values[parameterName].ToString().ToLowerInvariant()); return response; } public bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary&lt; string, object&gt; values, HttpRouteDirection routeDirection) { bool response = Enum.GetNames(typeof(BlockCorrectionActionEnum)).Any(s = &gt; s.ToLowerInvariant() == values[parameterName].ToString().ToLowerInvariant()); return response; } }
Document document = new Document(); try { PdfWriter.GetInstance(document, new FileStream("Chap0101.pdf", FileMode.Create)); document.Open(); document.Add(new Paragraph("Hello World")); } catch (DocumentException de) { Console.Error.WriteLine(de.Message); } catch (IOException ioe) { Console.Error.WriteLine(ioe.Message); } document.Close();
public FileStreamResult pdf() { MemoryStream m = new MemoryStream(); Document document = new Document(); PdfWriter.GetInstance(document, m); document.Open(); document.Add(new Paragraph("Hello World")); document.Add(new Paragraph(DateTime.Now.ToString())); m.Position = 0; return File(m, "application/pdf"); }
Document document = new Document(); MemoryStream stream = new MemoryStream(); try { PdfWriter pdfWriter = PdfWriter.GetInstance(document, stream); pdfWriter.CloseStream = false; document.Open(); document.Add(new Paragraph("Hello World")); } catch (DocumentException de) { Console.Error.WriteLine(de.Message); } catch (IOException ioe) { Console.Error.WriteLine(ioe.Message); } document.Close(); stream.Flush(); stream.Position = 0; return File(stream, "application/pdf", "DownloadName.pdf");
using iTextSharp.text; using iTextSharp.text.pdf; public FileStreamResult pdf() { MemoryStream workStream = new MemoryStream(); Document document = new Document(); PdfWriter.GetInstance(document, workStream).CloseStream = false; document.Open(); document.Add(new Paragraph("Hello World")); document.Add(new Paragraph(DateTime.Now.ToString())); document.Close(); byte[] byteInfo = workStream.ToArray(); workStream.Write(byteInfo, 0, byteInfo.Length); workStream.Position = 0; return new FileStreamResult(workStream, "application/pdf"); }
Response.AppendHeader("content-disposition", "inline; filename=file.pdf"); return new FileStreamResult(stream, "application/pdf")
public FileResult DownloadFile() { return File("path\\to\\pdf.pdf", "application/pdf"); }
public FileStreamResult About() { MemoryStream ms = new MemoryStream(); Document document = new Document(PageSize.A4.Rotate()); PdfWriter writer = PdfWriter.GetInstance(document, ms); document.Open(); Font font_heading_1 = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 19, Font.BOLD); Font font_body = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 9); Paragraph paragraph; paragraph = new Paragraph("Hello world!", font_heading_1); iTextSharp.text.pdf.draw.VerticalPositionMark seperator = new iTextSharp.text.pdf.draw.LineSeparator(); seperator.Offset = -6f; paragraph.Add(seperator); document.Add(paragraph); document.Close(); byte[] file = ms.ToArray(); MemoryStream output = new MemoryStream(); output.Write(file, 0, file.Length); output.Position = 0; HttpContext.Response.AddHeader("content-disposition","attachment; filename=form.pdf"); return File(output, "application/pdf"); }
Response.Clear(); Response.ContentType = "application/pdf"; Response.AppendHeader("Content-disposition", "attachment; filename=file.pdf"); Response.OutputStream.Write(outStream.GetBuffer(), 0, outStream.GetBuffer().Length); Response.Flush();
@using (Html.BeginForm("DisplayPDF", "Scan", FormMethod.Post)) { <a href="javascript:;" onclick="document.forms[0].submit();">View PDF</a> }
public ActionResult DisplayPDF() { byte[] byteArray = GetPdfFromDB(4); MemoryStream pdfStream = new MemoryStream(); pdfStream.Write(byteArray, 0, byteArray.Length); pdfStream.Position = 0; return new FileStreamResult(pdfStream, "application/pdf"); } private byte[] GetPdfFromDB(int id) { byte[] bytes = { }; string constr = System.Configuration.ConfigurationManager.ConnectionStrings["Connection"].ConnectionString; using (SqlConnection con = new SqlConnection(constr)) { using (SqlCommand cmd = new SqlCommand()) { cmd.CommandText = "SELECT Scan_Pdf_File FROM PWF_InvoiceMain WHERE InvoiceID=@Id and Enabled = 1"; cmd.Parameters.AddWithValue("@Id", id); cmd.Connection = con; con.Open(); using (SqlDataReader sdr = cmd.ExecuteReader()) { if (sdr.HasRows == true) { sdr.Read(); bytes = (byte[])sdr["Scan_Pdf_File"]; } } con.Close(); } } return bytes; }
HttpContext.Response.AddHeader("content-disposition","attachment; filename=form.pdf");
public string Get() { return "<strong>test</strong>"; }
public HttpResponseMessage Get() { return new HttpResponseMessage() { Content = new StringContent( "<strong>test</strong>", Encoding.UTF8, "text/html" ) }; }
public IHttpActionResult Post() { return base.Content(HttpStatusCode.OK, new {} , new JsonMediaTypeFormatter(), "text/plain"); }
<HttpPost> Public Function TestApiCall(<FromBody> screenerRequest As JsonBaseContainer) As IHttpActionResult Dim response = Me.Request.CreateResponse(HttpStatusCode.OK) response.Content = New StringContent("{""foo"":""bar""}", Encoding.UTF8, "text/plain") Return ResponseMessage(response) End Function
Public Async Function PostJsonContent(baseUri As String, requestUri As String, content As String, Optional timeout As Integer = 15, Optional failedResponse As String = "", Optional ignoreSslCertErrors As Boolean = False) As Task(Of String) Return Await PostJsonContent(baseUri, requestUri, New StringContent(content, Encoding.UTF8, "application/json"), timeout, failedResponse, ignoreSslCertErrors) End Function Public Async Function PostJsonContent(baseUri As String, requestUri As String, content As HttpContent, Optional timeout As Integer = 15, Optional failedResponse As String = "", Optional ignoreSslCertErrors As Boolean = False) As Task(Of String) Dim httpResponse As HttpResponseMessage Using handler = New WebRequestHandler If ignoreSslCertErrors Then handler.ServerCertificateValidationCallback = New Security.RemoteCertificateValidationCallback(Function(sender, cert, chain, policyErrors) True) End If Using client = New HttpClient(handler) If Not String.IsNullOrWhiteSpace(baseUri) Then client.BaseAddress = New Uri(baseUri) End If client.DefaultRequestHeaders.Accept.Clear() client.DefaultRequestHeaders.Accept.Add(New MediaTypeWithQualityHeaderValue("application/json")) client.Timeout = New TimeSpan(TimeSpan.FromSeconds(timeout).Ticks) httpResponse = Await client.PostAsync(requestUri, content) If httpResponse.IsSuccessStatusCode Then Dim response = Await httpResponse.Content.ReadAsStringAsync If Not String.IsNullOrWhiteSpace(response) Then Return response End If End If End Using End Using Return failedResponse End Function
return this.Request.CreateResponse(HttpStatusCode.OK, new{content=YourStringContent})
return base.Content(result, "text/html", Encoding.UTF8);
using (SqlConnection connection = new SqlConnection()) using (SqlCommand command = new SqlCommand()) { command.CommandText = "INSERT INTO YourMom (Amount) VALUES (1)"; command.CommandType = System.Data.CommandType.Text; connection.Open(); command.ExecuteNonQuery(); connection.Close(); }
protected override void Dispose(bool disposing) { if (disposing) { this._userConnectionOptions = null; this._poolGroup = null; this.Close(); } this.DisposeMe(disposing); base.Dispose(disposing); }
protected override void Dispose(bool disposing) { if (disposing) { this._userConnectionOptions = null; this._poolGroup = null; this.Close(); } this.DisposeMe(disposing); base.Dispose(disposing); }
protected override void Dispose(bool disposing) { if (disposing) { this._userConnectionOptions = null; this._poolGroup = null; this.Close(); } this.DisposeMe(disposing); base.Dispose(disposing); }
protected override void Dispose(bool disposing) { if (disposing) { this._userConnectionOptions = null; this._poolGroup = null; this.Close(); } this.DisposeMe(disposing); base.Dispose(disposing); }
public class MyExceptionClass : Exception { public MyExceptionClass(string message, string extrainfo) : base(message) { } }
public class MyBase { public MyBase() { Console.WriteLine("MyBase"); } } public class MyDerived : MyBase { public MyDerived():base() { Console.WriteLine("MyDerived"); } }
public class BaseClass { private string sentenceOne = null; public BaseClass() { sentenceOne = "The quick brown fox"; } } public class SubClass : BaseClass { private string sentenceTwo = null; public SubClass() { sentenceTwo = "jumps over the lazy dog"; } }
using System; class Base { public Base() { Console.WriteLine("BASE 1"); } public Base(int x) { Console.WriteLine("BASE 2"); } } class Derived : Base { public Derived():base(10) { Console.WriteLine("DERIVED CLASS"); } } class MyClient { public static void Main() { Derived d1 = new Derived(); } }
using System; class A { public A() { PrintFields(); } public virtual void PrintFields() {} } class B: A { int x = 1; int y; public B() { y = -1; } public override void PrintFields() { Console.WriteLine("x = {0}, y = {1}", x, y); } }
using System; using System.Collections; class A { int x = 1, y = -1, count; public A() { count = 0; } public A(int n) { count = n; } } class B: A { double sqrt2 = Math.Sqrt(2.0); ArrayList items = new ArrayList(100); int max; public B(): this(100) { items.Add("default"); } public B(int n): base(n – 1) { max = n; } }
using System.Collections; class A { int x, y, count; public A() { x = 1; y = -1; object(); count = 0; } public A(int n) { x = 1; y = -1; object(); count = n; } } class B: A { double sqrt2; ArrayList items; int max; public B(): this(100) { B(100); items.Add("default"); } public B(int n): base(n – 1) { sqrt2 = Math.Sqrt(2.0); items = new ArrayList(100); A(n – 1); max = n; } }
NameValueCollection nvc = Request.Form; string userName, password; if (!string.IsNullOrEmpty(nvc["txtUserName"])) { userName = nvc["txtUserName"]; } if (!string.IsNullOrEmpty(nvc["txtPassword"])) { password = nvc["txtPassword"]; } CheckLogin(userName, password);
if (!string.IsNullOrEmpty(Request.Form["username"])) { ... }
NameValueCollection nvclc = Request.Form; string uName= nvclc ["txtUserName"]; string pswod= nvclc ["txtPassword"]; CheckLogin(uName, pswod);
function setHeartbeat() { setTimeout("heartbeat()", 300000); } function heartbeat() { $.get( "/SessionHeartbeat.ashx", null, function(data) { setHeartbeat(); }, "json" ); }
public class SessionHeartbeatHttpHandler : IHttpHandler, IRequiresSessionState { public bool IsReusable { get { return false; } } public void ProcessRequest(HttpContext context) { context.Session["Heartbeat"] = DateTime.Now; } }
<httpHandlers> <add verb="GET,HEAD" path="SessionHeartbeat.ashx" validate="false" type="SessionHeartbeatHttpHandler"/> </httpHandlers>
function beatHeart(times) { var interval = setInterval(function () { $(".heartbeat").fadeIn(500, function () { $(".heartbeat").fadeOut(500); }); }, 1000); setTimeout(function () { clearInterval(interval); }, (1000 * times) + 100); }
<div class="heartbeat">&hearts;</div> .heartbeat { position: absolute; display: none; margin: 5px; color: red; right: 0; top: 0; }
[HttpPost] public JsonResult KeepSessionAlive() { return new JsonResult {Data = "Success"}; }
var keepSessionAlive = false; var keepSessionAliveUrl = null; function SetupSessionUpdater(actionUrl) { keepSessionAliveUrl = actionUrl; var container = $(" container.mousemove(function () { keepSessionAlive = true; }); container.keydown(function () { keepSessionAlive = true; }); CheckToKeepSessionAlive(); } function CheckToKeepSessionAlive() { setTimeout("KeepSessionAlive()", 300000); } function KeepSessionAlive() { if (keepSessionAlive && keepSessionAliveUrl != null) { $.ajax({ type: "POST", url: keepSessionAliveUrl, success: function () { keepSessionAlive = false; } }); } CheckToKeepSessionAlive(); }
public class KeepSessionAlive : IHttpHandler, IRequiresSessionState { public void ProcessRequest(HttpContext context) { context.Response.Cache.SetCacheability(HttpCacheability.NoCache); context.Response.Cache.SetExpires(DateTime.UtcNow.AddMinutes(-1)); context.Response.Cache.SetNoStore(); context.Response.Cache.SetNoServerCaching(); } }
window.onload = function () { setInterval("KeepSessionAlive()", 60000) } function KeepSessionAlive() { url = "/KeepSessionAlive.ashx?"; var xmlHttp = new XMLHttpRequest(); xmlHttp.open("GET", url, true); xmlHttp.send(); }
FormsAuthenticationTicket ticket = FormsAuthentication.Decrypt(formsCookie.Value); if (ticket.Expired) { Request.Cookies.Remove(FormsAuthentication.FormsCookieName); FormsAuthentication.SignOut(); ... } else { ... ticket = FormsAuthentication.RenewTicketIfOld(ticket); ... }
$(document).ready(function () { window.setInterval(function () { var url = $.get(url); },1140000); });
<script type="text/javascript"> $(function () { var t = 9; var prolongBool = false; var originURL = document.location.origin; var expireTime = <%= FormsAuthentication.Timeout.TotalMinutes %>; var dialogCounter = function() { setTimeout( function() { $( t--; if(t <= 0 && prolongBool == false) { var originURL = document.location.origin; window.location.replace(originURL + "/timeout.aspx"); return; } else if(t <= 0) { return; } dialogCounter(); }, 1000); } var refreshDialogTimer = function() { setTimeout(function() { $( }, (expireTime * 1000 * 60 - (10 * 1000)) ); }; refreshDialogTimer(); $( title: "Session Expiring!", autoOpen: false, height: 170, width: 350, modal: true, buttons: { prolongBool = true; $.post("http: refreshDialogTimer(); $(this).dialog("close"); }, Cancel: function () { var originURL = document.location.origin; window.location.replace(originURL + "/timeout.aspx"); } }, open: function() { prolongBool = false; $( t = 9; dialogCounter(); } }); }); </script>
<div id="timeoutDialog" class= <form> <fieldset> <label for="timeoutDialog">Your session will expire in</label> <label for="timeoutDialog" id="tickVar">10</label> <label for="timeoutDialog">seconds, would you like to renew your session?</label> </fieldset> </form> </div>
(function ($) { $.fn.heartbeat = function (options) { var settings = $.extend({ events: , url: , every: 300000 }, options); var keepSessionAlive = false , $container = $(this) , handler = function () { keepSessionAlive = true; $container.off(settings.events, handler) }, reset = function () { keepSessionAlive = false; $container.on(settings.events, handler); setTimeout(sessionAlive, settings.every); }, sessionAlive = function () { keepSessionAlive && $.ajax({ type: "POST" , url: settings.url ,success: reset }); }; reset(); return this; } })(jQuery)
protected override void OnError(EventArgs e) ..... private void Application_Error(object sender, EventArgs e) { if (GlobalHelper.IsMaxRequestExceededException(this.Server.GetLastError())) { this.Server.ClearError(); this.Server.Transfer("~/error/UploadTooLarge.aspx"); } }
const int TimedOutExceptionCode = -2147467259; public static bool IsMaxRequestExceededException(Exception e) { Exception main; var unhandled = e as HttpUnhandledException; if (unhandled != null && unhandled.ErrorCode == TimedOutExceptionCode) { main = unhandled.InnerException; } else { main = e; } var http = main as HttpException; if (http != null && http.ErrorCode == TimedOutExceptionCode) { if (http.StackTrace.Contains("GetEntireRawContent")) { return true; } } return false; }
<?xml version="1.0" encoding="utf-8"?> <configuration> <system.web> <httpRuntime maxRequestLength="102400" executionTimeout="1200" /> </system.web> </configuration>
<?xml version="1.0" encoding="utf-8"?> <configuration> <system.web> <httpRuntime maxRequestLength="102400" /> </system.web> </configuration>
appcmd set config "SiteName" -section:requestFiltering -requestLimits.maxAllowedContentLength:209715200 -commitpath:apphost
<form id="FormID" action="post" name="FormID"> <input id="target" name="target" class="target" type="file" /> </form> <script src="http: <script type="text/javascript" language="javascript"> $( if (typeof FileReader !== "undefined") { var size = document.getElementById( if (size > 100000) { $(this).val(""); } } }); </script>
<system.web> <httpRuntime maxRequestLength="102400" /> </system.web>
protected void btnUploadImage_OnClick(object sender, EventArgs e) { if (fil.FileBytes.Length > 51200) { TextBoxMsg.Text = "file size must be less than 50KB"; } }
private void Application_Error(object sender, EventArgs e) { var ex = Server.GetLastError(); var httpException = ex as HttpException ?? ex.InnerException as HttpException; if(httpException == null) return; if(httpException.WebEventCode == WebEventCodes.RuntimeErrorPostTooLarge) { Response.Write("Sorry, file is too big"); } }
<system.webServer> <security > <requestFiltering> <requestLimits maxAllowedContentLength="[Size In Bytes]" /> </requestFiltering> </security> </system.webServer>
If FileUpload1.PostedFile.ContentLength > 2097152 Then End If
protected void Application_EndRequest(object sender, EventArgs e) { if (Response.StatusCode == 404 && Response.SubStatusCode == 13) { Response.Write("Too big a file"); Response.End(); } }
<security> <requestFiltering> <requestLimits maxAllowedContentLength="4500000" /> </requestFiltering> </security>
<httpErrors errorMode="Custom" existingResponse="Replace"> <remove statusCode="404" subStatusCode="13" /> <error statusCode="404" subStatusCode="13" prefixLanguageFilePath="" path="http: </httpErrors>
<?xml version="1.0" encoding="utf-8"?> <configuration> <system.web> <httpRuntime maxRequestLength="102400" executionTimeout="1200" /> </system.web> </configuration>
protected void Application_EndRequest(object sender, EventArgs e) { HttpRequest request = HttpContext.Current.Request; HttpResponse response = HttpContext.Current.Response; if ((request.HttpMethod == "POST") && (response.StatusCode == 404 && response.SubStatusCode == 13)) { response.ClearHeaders(); HttpContext.Current.Server.Transfer(request.AppRelativeCurrentExecutionFilePath); } }
[ResponseType(typeof(MyDTO))] public IHttpActionResult PostmyObject(MyDTO myObject) { ... return CreatedAtRoute("DefaultApi", new { id = myObject.Id }, myObject); }
gv.HeaderRow.TableSection = TableRowSection.TableHeader;
if (e.Row.RowType == DataControlRowType.Header) e.Row.TableSection = TableRowSection.TableHeader;
protected override void OnPreRender(EventArgs e) { if ( (this.ShowHeader == true && this.Rows.Count > 0) || (this.ShowHeaderWhenEmpty == true)) { this.HeaderRow.TableSection = TableRowSection.TableHeader; } if (this.ShowFooter == true && this.Rows.Count > 0) { this.FooterRow.TableSection = TableRowSection.TableFooter; } base.OnPreRender(e); }
protected void GrdPagosRowCreated(object sender, GridViewRowEventArgs e) { if (e.Row.RowType == DataControlRowType.DataRow) { e.Row.TableSection = TableRowSection.TableBody; } else if (e.Row.RowType == DataControlRowType.Header) { e.Row.TableSection = TableRowSection.TableHeader; } else if (e.Row.RowType == DataControlRowType.Footer) { e.Row.TableSection = TableRowSection.TableFooter; } }
private void MakeGridViewPrinterFriendly(GridView gridView) { if (gridView.Rows.Count > 0) { gridView.UseAccessibleHeader = true; gridView.HeaderRow.TableSection = TableRowSection.TableHeader; } }
protected void Page_Load(object sender, EventArgs e) { if (!IsPostBack) { MakeGridViewPrinterFriendly(grddata); } }
<asp:GridView ID="GridView1" runat="server" OnPreRender="GridView_PreRender">
protected void GridView_PreRender(object sender, EventArgs e) { GridView gv = (GridView)sender; if ((gv.ShowHeader == true && gv.Rows.Count > 0) || (gv.ShowHeaderWhenEmpty == true)) { gv.HeaderRow.TableSection = TableRowSection.TableHeader; } if (gv.ShowFooter == true && gv.Rows.Count > 0) { gv.FooterRow.TableSection = TableRowSection.TableFooter; } }
[x64] C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE
[x86] C:\Program Files\Microsoft Visual Studio 14.0\Common7\IDE
01:10:11.7550: Referenced file 01:10:11.7550: Referenced file 01:10:11.7550: Referenced file 01:10:11.7550: Referenced file 01:10:11.7550: Referenced file
[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\FipsAlgorithmPolicy] Enabled=dword:00000000 And All fixed.
<dependentAssembly> <assemblyIdentity name="System.Collections.Immutable" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/> <bindingRedirect oldVersion="1.0.27.0-1.1.65535.65535" newVersion="1.1.37.0"/> </dependentAssembly>
Method not found: Description: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code. Exception Details: System.MissingMethodException: Method not found: Source Error: An unhandled exception was generated during the execution of the current web request. Information regarding the origin and location of the exception can be identified using the exception stack trace below. Stack Trace: [MissingMethodException: Method not found: SAASApp.BundleConfig.RegisterBundles(BundleCollection bundles) in C:\Proyectos\SAASApp\SAASApp\App_Start\BundleConfig.cs:29 SAASApp.MvcApplication.Application_Start() in C:\Proyectos\SAASApp\SAASApp\Global.asax.cs:18 [HttpException (0x80004005): Method not found: System.Web.HttpApplicationFactory.EnsureAppStartCalledForIntegratedMode(HttpContext context, HttpApplication app) +483 System.Web.HttpApplication.RegisterEventSubscriptionsWithIIS(IntPtr appContext, HttpContext context, MethodInfo[] handlers) +118 System.Web.HttpApplication.InitSpecial(HttpApplicationState state, MethodInfo[] handlers, IntPtr appContext, HttpContext context) +176 System.Web.HttpApplicationFactory.GetSpecialApplicationInstance(IntPtr appContext, HttpContext context) +350 System.Web.Hosting.PipelineRuntime.InitializeApplication(IntPtr appContext) +305 [HttpException (0x80004005): Method not found: System.Web.HttpRuntime.FirstRequestInit(HttpContext context) +661 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context) +96 System.Web.HttpRuntime.ProcessRequestNotificationPrivate(IIS7WorkerRequest wr, HttpContext context) +189
var configuration = new Configuration(); var appSettings = configuration.Get("AppSettings"); var token = configuration.Get("token");
System.Configuration.ConfigurationManager.AppSettings["token"];
{ "MyConfig": { "ApplicationName": "MyApp", "Version": "1.0.0" } }
public class MyConfig { public string ApplicationName { get; set; } public int Version { get; set; } }
public class Startup { public IConfigurationRoot Configuration { get; set; } public Startup(IHostingEnvironment env) { var builder = new ConfigurationBuilder() .SetBasePath(env.ContentRootPath) .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true); Configuration = builder.Build(); } }
public void ConfigureServices(IServiceCollection services) { services.AddMvc(); services.AddOptions(); services.Configure<MyConfig>(Configuration.GetSection("MyConfig")); }
public class HomeController : Controller { private readonly IOptions<MyConfig> config; public HomeController(IOptions<MyConfig> config) { this.config = config; } public IActionResult Index() => View(config.Value); }
public class Startup { public IConfigurationRoot Configuration { get; set; } public Startup(IHostingEnvironment env) { var builder = new ConfigurationBuilder() .SetBasePath(env.ContentRootPath) .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true); Configuration = builder.Build(); } public void ConfigureServices(IServiceCollection services) { services.AddMvc(); services.AddOptions(); services.Configure<MyConfig>(Configuration.GetSection("MyConfig")); } }
"Microsoft.Framework.Configuration.Json": "1.0.0-beta7"
public IConfiguration Configuration { get; set; } public Startup(IHostingEnvironment env, IApplicationEnvironment appEnv) { var configurationBuilder = new ConfigurationBuilder(appEnv.ApplicationBasePath) .AddJsonFile("config.json") .AddEnvironmentVariables(); Configuration = configurationBuilder.Build(); }
public void Configure(IApplicationBuilder app) { var token = Configuration.GetSection("AppSettings:token"); app.Run(async (context) => { await context.Response.WriteAsync("This is a token with key (" + token.Key + ") " + token.Value); }); }
public class AppSettings { public string token { get; set; } }
public void ConfigureServices(IServiceCollection services) { services.AddMvc(); services.Configure<MvcOptions>(options => { }); services.Configure<AppSettings>(Configuration.GetSection("AppSettings")); }
public class HomeController : Controller { private string _token; public HomeController(IOptions<AppSettings> settings) { _token = settings.Options.token; } }
public Startup(IConfiguration configuration) { Configuration = configuration; } public IConfiguration Configuration { get; } public void ConfigureServices(IServiceCollection services) { services.Configure<StorageOptions>(Configuration.GetSection("AzureStorageConfig")); }
namespace Brazzers.Models { public class StorageOptions { public String StorageConnectionString { get; set; } public String AccountName { get; set; } public String AccountKey { get; set; } public String DefaultEndpointsProtocol { get; set; } public String EndpointSuffix { get; set; } public StorageOptions() { } } }
{ "ConnectionStrings": { "DefaultConnection": "Server=(localdb)\\mssqllocaldb;", "StorageConnectionString": "DefaultEndpointsProtocol=https;AccountName=brazzerswebapp;AccountKey=Cng4Afwlk242-23=-_d2ksa69*2xM0jLUUxoAw==;EndpointSuffix=core.windows.net" }, "Logging": { "IncludeScopes": false, "LogLevel": { "Default": "Warning" } }, "AzureStorageConfig": { "AccountName": "brazzerswebapp", "AccountKey": "Cng4Afwlk242-23=-_d2ksa69*2xM0jLUUxoAw==", "DefaultEndpointsProtocol": "https", "EndpointSuffix": "core.windows.net", "StorageConnectionString": "DefaultEndpointsProtocol=https;AccountName=brazzerswebapp;AccountKey=Cng4Afwlk242-23=-_d2ksa69*2xM0jLUUxoAw==;EndpointSuffix=core.windows.net" } }
<ItemGroup> <PackageReference Include="Microsoft.Extensions.Configuration" Version="2.2.0-preview2-35157" /> <PackageReference Include="Microsoft.Extensions.Configuration.FileExtensions" Version="2.2.0-preview2-35157" /> <PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="2.2.0-preview2-35157" /> </ItemGroup>
{ "AppConfig": { "FilePath": "C:\\temp\\logs\\output.txt" } }
static void Main(string[] args) { try { IConfigurationBuilder builder = new ConfigurationBuilder() .SetBasePath(Directory.GetCurrentDirectory()) .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true); IConfigurationRoot configuration = builder.Build(); IConfigurationSection configurationSection = configuration.GetSection("AppConfig").GetSection("FilePath"); } catch (Exception e) { Console.WriteLine(e); } }
using Microsoft.Extensions.Configuration; public class Startup { public void Configure(IConfiguration configuration, ... other injected services ) { app.Run(async (context) => { string myValue = configuration["MyKey"]; await context.Response.WriteAsync(myValue); });
public Startup(IHostingEnvironment env) { var builder = new ConfigurationBuilder() .SetBasePath(env.ContentRootPath) .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true) .AddJsonFile($"appsettings.{env.EnvironmentName}.json", optional: true); if (env.IsDevelopment()) { builder.AddUserSecrets(); } builder.AddEnvironmentVariables(); Configuration = builder.Build(); }
public IConfiguration Configuration { get; set; } public Startup(IConfiguration configuration) { Configuration = configuration; }
public static class ConfigurationExtensions { public static string GetIssuerSigningKey(this IConfiguration configuration) { string result = configuration.GetValue<string>("Authentication:JwtBearer:SecurityKey"); return result; } public static string GetValidIssuer(this IConfiguration configuration) { string result = configuration.GetValue<string>("Authentication:JwtBearer:Issuer"); return result; } public static string GetValidAudience(this IConfiguration configuration) { string result = configuration.GetValue<string>("Authentication:JwtBearer:Audience"); return result; } public static string GetDefaultPolicy(this IConfiguration configuration) { string result = configuration.GetValue<string>("Policies:Default"); return result; } public static SymmetricSecurityKey GetSymmetricSecurityKey(this IConfiguration configuration) { var issuerSigningKey = configuration.GetIssuerSigningKey(); var data = Encoding.UTF8.GetBytes(issuerSigningKey); var result = new SymmetricSecurityKey(data); return result; } public static string[] GetCorsOrigins(this IConfiguration configuration) { string[] result = configuration.GetValue<string>("App:CorsOrigins") .Split(",", StringSplitOptions.RemoveEmptyEntries) .ToArray(); return result; } }
... x.TokenValidationParameters = new TokenValidationParameters() { ValidateIssuerSigningKey = true, ValidateLifetime = true, IssuerSigningKey = _configuration.GetSymmetricSecurityKey(), ValidAudience = _configuration.GetValidAudience(), ValidIssuer = _configuration.GetValidIssuer() };
var appConfiguration = AppConfigurations.Get(WebContentDirectoryFinder.CalculateContentRootFolder()); builder.Register(c => appConfiguration).As<IConfigurationRoot>().SingleInstance();
services.AddSingleton<IConfigurationRoot>(appConfiguration);
public class Startup { public Startup(IHostingEnvironment env) { var builder = new ConfigurationBuilder() .SetBasePath(env.ContentRootPath) .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true) .AddJsonFile($"appsettings.{env.EnvironmentName}.json", optional: true) .AddEnvironmentVariables(); Configuration = builder.Build(); } public static IConfiguration Configuration { get; set; }
protected MyEntities sqlEntities; public virtual void Delete(TEntity entity) { System.Type t = typeof(TEntity); sqlEntities.DeleteObject(entity); sqlEntities.SaveChanges(); }
protected MyEntities sqlEntities; public virtual void Delete(TEntity entity) { sqlEntities.Attach(entity); sqlEntities.DeleteObject(entity); sqlEntities.SaveChanges(); }
using (var context = new MyDataContext()) { context.MyTableEntity.Remove(EntytyToRemove); var nrOfObjectsChanged = context.SaveChanges(); }
using (var context = new MyDataContext()) { context.MyTableEntity.Attach(EntityToRemove); context.MyTableEntity.Remove(EntityToRemove); var nrOfObjectsChanged = context.SaveChanges(); }
public Project DeleteProject(int id) { using (var context = new Context()) { var p = GetProject(id); context.Projects.Remove(p); context.SaveChanges(); return p; } }
public Project GetProject(int id) { using (var context = new Context()) { var project = context.Projects .Include(p => p.Reports.Select(q => q.Issues.Select(r => r.Profession))) .Include(p => p.Reports.Select(q => q.Issues.Select(r => r.Room))) .SingleOrDefault(x => x.Id == id); return project; } }
public Project DeleteProject(int id) { using (var context = new Context()) { var p = context.Projects.SingleOrDefault(x => x.Id == id); if (p == null) return p; context.Projects.Remove(p); context.SaveChanges(); return p; } }
var x=yourquery.FirstOrDefault(); sqlEntities.DeleteObject(x); sqlEntities.SaveChanges();
sqlEntities.Attach(entity); sqlEntities.Remove(entity); sqlEntities.SaveChanges();
[HttpPost] public ActionResult SubmitAction() { ... return something ... }
[HttpPost] public ActionResult SubmitAction(SomeModel model) { var value1 = model.SimpleProp1; var value2 = model.SimpleProp2; var value3 = model.ComplexProp1.SimpleProp1; ... ... return something ... }
[HttpPost] public ActionResult SubmitAction() { var value1 = Request["SimpleProp1"]; var value2 = Request["SimpleProp2"]; var value3 = Request["ComplexProp1.SimpleProp1"]; ... ... return something ... }
[HttpPost] public ActionResult SubmitAction(FormCollection collection) { string var1 = collection["var1"]; }
class MyForm { public string var1 { get; set; } } [HttpPost] public ActionResult SubmitAction(MyForm form) { string var1 = form1.Var1; }
<input type="hidden" name="TrackingID" <input type="text" name="FirstName" id="firstnametext" /> <input type="checkbox" name="IsLegal" value="Do you accept terms and conditions?" />
[HttpPost] public ActionResult PostBack(int TrackingID, string FirstName, string IsLegal){ MyData.SaveRequest(TrackingID,FirstName, IsLegal == null ? false : true); }
public Class MyModel { public int HouseNumber { get; set; } public string StreetAddress { get; set; } }
<input type="text" name="MyHome.HouseNumber" id="whateverid" >
[HttpPost] public ActionResult PostBack(MyModel MyHome){ postBack.HouseNumber; postBack.StreetAddress; }
<input type="text" name="MyHomes[0].HouseNumber" id="id" value="0"> <input type="text" name="MyHomes[1].HouseNumber" id="whateverid-x" value="1"> <input type="text" name="MyHomes[2].HouseNumber" value="2"> <input type="text" name="MyHomes[3].HouseNumber" id="whateverid22" value="3">
[HttpPost] public ActionResult PostBack(List<MyModel> MyHomes){ int counter = MyHomes.Count() foreach(var home in MyHomes) { ... } }
<input type="hidden" name="MyHomes.Index" value="278"> <input type="text" name="MyHomes[278].HouseNumber" id="id" value="3"> <input type="hidden" name="MyHomes.Index" value="99976"> <input type="text" name="MyHomes[99976].HouseNumber" id="id3" value="4"> <input type="hidden" name="MyHomes.Index" value="777"> <input type="text" name="MyHomes[777].HouseNumber" id="id23" value="5">
[HttpPost] public ActionResult PostBack(IEnumerable<MyModel> MyHomes){ int counter = MyHomes.ToList().Count() foreach(var home in MyHomes) { ... } }
[HttpPost] public ActionResult SubmitAction() { var keys = Request.Form.AllKeys; var value1 = Request.Form.Get(keys[0]); var value2 = Request.Form.Get(keys[1]); }
<%@ Application CodeBehind="Global.asax.cs" Inherits="MyNamespace.Global" Language="C
public partial class Global : System.Web.HttpApplication
public partial class Global : HttpApplication { public Global() { // // } }
“Could not load type [Namespace].Global Error in Line 1 etc etc
C:\Users\Your-User-Name\Documents\IISExpress\config\applicationhost.config
[assembly: AssemblyTitle("WebApplication2")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany(" ")] [assembly: AssemblyProduct("WebApplication2")] [assembly: AssemblyCopyright("Copyright © 2017")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]
class Foo : IFoo { public string Name { get; private set; } }
public int Foo { get; set; } public int Foo { get; private set; } public int Foo { get { return _foo; } } public void Poop();
string s1 = "Many characters. The quick brown fox jumps over the lazy dog"; string s2 = "fox"; bool b; b = s1.Contains(s2); int i; i = s1.IndexOf(s2);
public bool Contains(string value) { return (this.IndexOf(value, StringComparison.Ordinal) >= 0); }
public bool Contains(string value) { return (this.IndexOf(value, StringComparison.Ordinal) >= 0); }
needles.AsParallel ( ).Sum ( l => Regex.IsMatch ( haystack , Regex.Escape ( l ) ) ? 1 : 0 );
public class MasterViewData { public ICollection<string> Navigation { get; set; } }
public class IndexViewData : MasterViewData { public string Name { get; set; } public float Price { get; set; } }
public interface IViewDataFactory { T Create<T>() where T : MasterViewData, new() } public class ProductController : Controller { public ProductController(IViewDataFactory viewDataFactory) ... public ActionResult Index() { var viewData = viewDataFactory.Create<ProductViewData>(); viewData.Name = "My product"; viewData.Price = 9.95; return View("Index", viewData); } }
public class IndexViewData : MasterViewData { public string Name { get; set; } public float Price { get; set; } public SubViewData SubViewData { get; set; } } <% Html.RenderPartial("Sub", Model.SubViewData); %>
<script runat="server" type="text/C protected override void OnLoad(EventArgs e) { base.OnLoad(e); MasterModel = SiteMasterViewData.Get(this.Context); } protected SiteMasterViewData MasterModel; </script>
string s = "THIS IS MY TEXT RIGHT NOW"; s = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(s.ToLower());
string s = "THIS IS MY TEXT RIGHT NOW"; s = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(s.ToLower());
string s = "THIS IS MY TEXT RIGHT NOW"; s = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(s.ToLower()); IL_0000: ldstr "THIS IS MY TEXT RIGHT NOW" IL_0005: stloc.0 IL_0006: call System.Threading.Thread.get_CurrentThread IL_000B: callvirt System.Threading.Thread.get_CurrentCulture IL_0010: callvirt System.Globalization.CultureInfo.get_TextInfo IL_0015: ldloc.0 IL_0016: callvirt System.String.ToLower IL_001B: callvirt System.Globalization.TextInfo.ToTitleCase IL_0020: stloc.0
string s = "THIS IS MY TEXT RIGHT NOW"; s = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(s.ToLower()); IL_0000: ldstr "THIS IS MY TEXT RIGHT NOW" IL_0005: stloc.0 IL_0006: call System.Globalization.CultureInfo.get_CurrentCulture IL_000B: callvirt System.Globalization.CultureInfo.get_TextInfo IL_0010: ldloc.0 IL_0011: callvirt System.String.ToLower IL_0016: callvirt System.Globalization.TextInfo.ToTitleCase IL_001B: stloc.0
public string UppercaseFirst(string s) { return char.ToUpper(s[0]) + s.Substring(1); }
public string UppercaseFirst(string s) { char[] a = s.ToCharArray(); a[0] = char.ToUpper(a[0]); return new string(a); }
var phrase = "THIS IS MY TEXT RIGHT NOW"; var rx = new System.Text.RegularExpressions.Regex(@"(?<=\w)\w"); var newString = rx.Replace(phrase,new MatchEvaluator(m=>m.Value.ToLowerInvariant()));
public string UppercaseFirstEach(string s) { char[] a = s.ToLower().ToCharArray(); for (int i = 0; i < a.Count(); i++ ) { a[i] = i == 0 || a[i-1] == } return new string(a); }
string s = "THIS IS MY TEXT RIGHT NOW"; StringBuilder sb = new StringBuilder(s.Length); bool capitalize = true; foreach (char c in s) { sb.Append(capitalize ? Char.ToUpper(c) : Char.ToLower(c)); capitalize = !Char.IsLetter(c); } return sb.ToString();
private static String HexConverter(System.Drawing.Color c) { String rtn = String.Empty; try { rtn = " } catch (Exception ex) { } return rtn; } private static String RGBConverter(System.Drawing.Color c) { String rtn = String.Empty; try { rtn = "RGB(" + c.R.ToString() + "," + c.G.ToString() + "," + c.B.ToString() + ")"; } catch (Exception ex) { } return rtn; }
private static String HexConverter(System.Drawing.Color c) { return " } private static String RGBConverter(System.Drawing.Color c) { return "RGB(" + c.R.ToString() + "," + c.G.ToString() + "," + c.B.ToString() + ")"; }
Color red = ColorTranslator.FromHtml(" string redHex = ColorTranslator.ToHtml(red);
int value = int.Parse(hexValue, System.Globalization.NumberStyles.HexNumber);
public static class ColorConverterExtensions { public static string ToHexString(this Color c) => $" public static string ToRgbString(this Color c) => $"RGB({c.R}, {c.G}, {c.B})"; }
ColorTranslator.ToHtml(Color.FromArgb(Color.Tomato.ToArgb()))
public static string ToHex(this Color color) { return String.Format(" , color.A.ToString("X").Length == 1 ? String.Format("0{0}", color.A.ToString("X")) : color.A.ToString("X") , color.R.ToString("X").Length == 1 ? String.Format("0{0}", color.R.ToString("X")) : color.R.ToString("X") , color.G.ToString("X").Length == 1 ? String.Format("0{0}", color.G.ToString("X")) : color.G.ToString("X") , color.B.ToString("X").Length == 1 ? String.Format("0{0}", color.B.ToString("X")) : color.B.ToString("X")); }
private static string HexConverter(Color c) { return String.Format(" } public static string RgbConverter(Color c) { return String.Format("RGB({0},{1},{2})", c.R, c.G, c.B); }
Console.WriteLine(dateTime.ToString("dd/MM/yyyy"));
DateTime now = DateTime.Now; string date = now.GetDateTimeFormats( string time = now.GetDateTimeFormats(
txtdate.Text = DateTime.Today.ToString("dd-MM-yyyy");
string now = Convert.ToString(DateTime.Now.ToShortDateString()); Console.WriteLine(now); Console.ReadLine();
for month DateTime.Now.ToString("MM"); for Date DateTime.Now.ToString("dd"); for year DateTime.Now.ToString("yyyy");
StudentID CourseID SubjectCode Marks ------------ ---------- ------------- -------- 1 100 MT400 80 2 100 MT400 79 3 100 MT400 88
dataTable.Columns["Marks"].ColumnName = "SubjectMarks";
dataTable.Columns["ColumnName"].ColumnName = "newColumnName";
dtTempColumn.Columns["EXCELCOLUMNS"].ColumnName = "COLUMN_NAME"; dtTempColumn.AcceptChanges();
<NewDataSet> <StudentMarks> <StudentID>1</StudentID> <CourseID>100</CourseID> <SubjectCode>MT400</SubjectCode> <Marks>80</Marks> </StudentMarks> <StudentMarks> <StudentID>1</StudentID> <CourseID>100</CourseID> <SubjectCode>MT400</SubjectCode> <Marks>79</Marks> </StudentMarks> <StudentMarks> <StudentID>1</StudentID> <CourseID>100</CourseID> <SubjectCode>MT400</SubjectCode> <Marks>88</Marks> </StudentMarks> </NewDataSet>
string strXML = DataSet.GetXML(); strXML = strXML.Replace ("<Marks>","<SubjectMarks>"); strXML = strXML.Replace ("<Marks/>","<SubjectMarks/>");
"columns": [ {data: "id", name: "aaa", sortable: false}, {data: "userid", name: "userid", sortable: false}, {data: "group_id", name: "group_id", sortable: false}, {data: "group_name", name: "group_name", sortable: false}, {data: "group_member", name: "group_member"}, {data: "group_fee", name: "group_fee"}, {data: "dynamic_type", name: "dynamic_type"}, {data: "dynamic_id", name: "dynamic_id"}, {data: "content", name: "content", sortable: false}, {data: "images", name: "images", sortable: false}, {data: "money", name: "money"}, {data: "is_audit", name: "is_audit", sortable: false}, {data: "audited_at", name: "audited_at", sortable: false}
dt.Columns["Name"].ColumnName = "xyz"; dt.AcceptChanges();
dt.Columns[0].ColumnName = "xyz"; dt.AcceptChanges();
dataTable.Columns["OldColumnName"].ColumnName = "NewColumnName";
PM> Install-Package Microsoft.CodeDom.Providers.DotNetCompilerPlatform
<system.codedom> <compilers> <compiler language="c <compiler language="vb;vbs;visualbasic;vbscript" extension=".vb" type="Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" warningLevel="4" compilerOptions="/langversion:14 /nowarn:41008 /define:_MYTYPE=\&quot;Web\&quot; /optionInfer+" /> </compilers> </system.codedom>
PM> Install-Package Microsoft.CodeDom.Providers.DotNetCompilerPlatform
public static void DataTabletoXLS(DataTable DT, string fileName) { HttpContext.Current.Response.Clear(); HttpContext.Current.Response.Charset = "utf-16"; HttpContext.Current.Response.ContentEncoding = System.Text.Encoding.GetEncoding("windows-1250"); HttpContext.Current.Response.AddHeader("content-disposition", string.Format("attachment; filename={0}.xls", fileName)); HttpContext.Current.Response.ContentType = "application/ms-excel"; string tab = ""; foreach (DataColumn dc in DT.Columns) { HttpContext.Current.Response.Write(tab + dc.ColumnName.Replace("\n", "").Replace("\t", "")); tab = "\t"; } HttpContext.Current.Response.Write("\n"); int i; foreach (DataRow dr in DT.Rows) { tab = ""; for (i = 0; i < DT.Columns.Count; i++) { HttpContext.Current.Response.Write(tab + dr[i].ToString().Replace("\n", "").Replace("\t", "")); tab = "\t"; } HttpContext.Current.Response.Write("\n"); } HttpContext.Current.Response.End(); }
public static void GridviewtoXLS(GridView gv, string fileName) { int DirtyBit = 0; int PageSize = 0; if (gv.AllowPaging == true) { DirtyBit = 1; PageSize = gv.PageSize; gv.AllowPaging = false; gv.DataBind(); } HttpContext.Current.Response.Clear(); HttpContext.Current.Response.Charset = "utf-8"; HttpContext.Current.Response.ContentEncoding = System.Text.Encoding.GetEncoding("windows-1250"); HttpContext.Current.Response.AddHeader( "content-disposition", string.Format("attachment; filename={0}.xls", fileName)); HttpContext.Current.Response.ContentType = "application/ms-excel"; using (StringWriter sw = new StringWriter()) using (HtmlTextWriter htw = new HtmlTextWriter(sw)) { Table table = new Table(); table.GridLines = gv.GridLines; if (gv.HeaderRow != null) { Utilities.Export.PrepareControlForExport(gv.HeaderRow); table.Rows.Add(gv.HeaderRow); } foreach (GridViewRow row in gv.Rows) { Utilities.Export.PrepareControlForExport(row); table.Rows.Add(row); } if (gv.FooterRow != null) { Utilities.Export.PrepareControlForExport(gv.FooterRow); table.Rows.Add(gv.FooterRow); } table.RenderControl(htw); HttpContext.Current.Response.Write(sw.ToString().Replace("£", "")); HttpContext.Current.Response.End(); } if (DirtyBit == 1) { gv.PageSize = PageSize; gv.AllowPaging = true; gv.DataBind(); } } private static void PrepareControlForExport(Control control) { for (int i = 0; i < control.Controls.Count; i++) { Control current = control.Controls[i]; if (current is LinkButton) { control.Controls.Remove(current); control.Controls.AddAt(i, new LiteralControl((current as LinkButton).Text)); } else if (current is ImageButton) { control.Controls.Remove(current); control.Controls.AddAt(i, new LiteralControl((current as ImageButton).AlternateText)); } else if (current is HyperLink) { control.Controls.Remove(current); control.Controls.AddAt(i, new LiteralControl((current as HyperLink).Text)); } else if (current is DropDownList) { control.Controls.Remove(current); control.Controls.AddAt(i, new LiteralControl((current as DropDownList).SelectedItem.Text)); } else if (current is CheckBox) { control.Controls.Remove(current); control.Controls.AddAt(i, new LiteralControl((current as CheckBox).Checked ? "True" : "False")); } if (current.HasControls()) { Utilities.Export.PrepareControlForExport(current); } } }
string myFilePath = @"C:\MyFile.txt"; string ext = Path.GetExtension(myFilePath);
using (var target = new MemoryStream()) { postedFile.InputStream.CopyTo(target); var array = target.ToArray();
Just do - var isAllowed = array.Take(5).SequenceEqual(FLV);
var contentArray = target.GetBuffer(); var content = Encoding.ASCII.GetString(contentArray);
string FileExtn = System.IO.Path.GetExtension(fpdDocument.PostedFile.FileName);
var name = Path.GetFileNameWithoutExtension(fileFullName); var extension = Path.GetExtension(fileFullName);
FileInfo FileInf = new FileInfo(filePath); string strExtention = FileInf.Name.Replace(System.IO.Path.GetFileNameWithoutExtension(FileInf.Name), "");
string[] files = Utilities.FileList("C:\", ""); foreach (string f in files) { if (!f.EndsWith(".dll", StringComparison.Ordinal)) myListBox.Items.Add(f); }
routes.MapRoute( "Default", "{controller}/{action}/{id}", new { controller = "Home", action = "Index", id = UrlParameter.Optional } );
routes.MapRoute( "Default", "{controller}/{action}/{id}", new { controller = "Sales", action = "ProjectionReport", id = UrlParameter.Optional } );
public static void RegisterRoutes(RouteCollection routes) { routes.IgnoreRoute("{resource}.axd/{*pathInfo}"); routes.MapRoute( name: "Default", url: "{controller}/{action}/{id}", defaults: new { controller = "Account", action = "Login", id = UrlParameter.Optional }); }
var route = routes.MapRoute( name: "Default", url: "{controller}/{action}/{id}", defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional } ).DataTokens = new RouteValueDictionary(new { area = "MyArea" });
routes.MapRoute( "Default", "{action}/{id}", new { controller = "Home", action = "Index", id = UrlParameter.Optional } );
protected void Application_Error(object sender, EventArgs e) { Exception exception = Server.GetLastError(); Response.Clear(); HttpException httpException = exception as HttpException; if (httpException != null) { RouteData routeData = new RouteData(); routeData.Values.Add("controller", "Error"); switch (httpException.GetHttpCode()) { case 404: routeData.Values.Add("action", "HttpError404"); break; case 500: routeData.Values.Add("action", "HttpError500"); break; default: routeData.Values.Add("action", "General"); break; } routeData.Values.Add("error", exception); Server.ClearError(); } }
protected void Application_Error(object sender, EventArgs e) { Exception exception = Server.GetLastError(); Response.Clear(); HttpException httpException = exception as HttpException; if (httpException != null) { string action; switch (httpException.GetHttpCode()) { case 404: action = "HttpError404"; break; case 500: action = "HttpError500"; break; default: action = "General"; break; } Server.ClearError(); Response.Redirect(String.Format("~/Error/{0}/?message={1}", action, exception.Message)); }
public ActionResult HttpError404(string message) { return View("SomeView", message); }
IController errorController = new ErrorController(); errorController.Execute(new RequestContext(new HttpContextWrapper(Context), routeData));
[AcceptVerbs(HttpVerbs.Get)] public ViewResult Error(Exception exception) { return View("Error", exception); }
<% if(Model != null) { %> <p><b>Detailed error:</b><br /> <span class="error"><%= Helpers.General.GetErrorMessage((Exception)Model, false) %></span></p> <% } %>
public static string GetErrorMessage(Exception ex, bool includeStackTrace) { StringBuilder msg = new StringBuilder(); BuildErrorMessage(ex, ref msg); if (includeStackTrace) { msg.Append("\n"); msg.Append(ex.StackTrace); } return msg.ToString(); } private static void BuildErrorMessage(Exception ex, ref StringBuilder msg) { if (ex != null) { msg.Append(ex.Message); msg.Append("\n"); if (ex.InnerException != null) { BuildErrorMessage(ex.InnerException, ref msg); } } }
protected void Application_Error() { if (HttpContext.Current.Request.IsAjaxRequest()) { HttpContext ctx = HttpContext.Current; ctx.Response.Clear(); RequestContext rc = ((MvcHandler)ctx.CurrentHandler).RequestContext; rc.RouteData.Values["action"] = "AjaxGlobalError"; rc.RouteData.Values["newActionName"] = "WrongRequest"; rc.RouteData.Values["controller"] = "ErrorPages"; IControllerFactory factory = ControllerBuilder.Current.GetControllerFactory(); IController controller = factory.CreateController(rc, "ErrorPages"); controller.Execute(rc); ctx.Server.ClearError(); } }
public ActionResult AjaxGlobalError(string newActionName) { return new AjaxRedirectResult(Url.Action(newActionName), this.ControllerContext); }
public class AjaxRedirectResult : RedirectResult { public AjaxRedirectResult(string url, ControllerContext controllerContext) : base(url) { ExecuteResult(controllerContext); } public override void ExecuteResult(ControllerContext context) { if (context.RequestContext.HttpContext.Request.IsAjaxRequest()) { JavaScriptResult result = new JavaScriptResult() { Script = "try{history.pushState(null,null,window.location.href);}catch(err){}window.location.replace( }; result.ExecuteResult(context); } else { base.ExecuteResult(context); } } }
public static class AjaxRequestExtension { public static bool IsAjaxRequest(this HttpRequest request) { return (request.Headers["X-Requested-With"] != null && request.Headers["X-Requested-With"] == "XMLHttpRequest"); } }
protected void Application_Error() { var exception = Server.GetLastError(); var errorMessage = "SOME FRIENDLY MESSAGE"; var errorArea = "AREA"; var errorController = "CONTROLLER"; var errorAction = "ACTION"; var pathToViewFile = $"~/Areas/{errorArea}/Views/{errorController}/{errorAction}.cshtml"; var requestControllerName = Convert.ToString(HttpContext.Current.Request.RequestContext?.RouteData?.Values["controller"]); var requestActionName = Convert.ToString(HttpContext.Current.Request.RequestContext?.RouteData?.Values["action"]); var controller = new BaseController(); var routeData = new RouteData { DataTokens = { { "area", errorArea } }, Values = { { "controller", errorController }, {"action", errorAction} } }; var controllerContext = new ControllerContext(new HttpContextWrapper(HttpContext.Current), routeData, controller); controller.ControllerContext = controllerContext; var sw = new StringWriter(); var razorView = new RazorView(controller.ControllerContext, pathToViewFile, "", false, null); var model = new ViewDataDictionary(new HandleErrorInfo(exception, requestControllerName, requestActionName)); var viewContext = new ViewContext(controller.ControllerContext, razorView, model, new TempDataDictionary(), sw); viewContext.ViewBag.ErrorMessage = errorMessage; razorView.Render(viewContext, sw); HttpContext.Current.Response.Write(sw); Server.ClearError(); HttpContext.Current.Response.End(); }
@model HandleErrorInfo @{ ViewBag.Title = "Error"; } <div class=""> ViewBag.ErrorMessage </div> @if(Model != null && HttpContext.Current.IsDebuggingEnabled) { <div class="" style="background:khaki"> <p> <b>Exception:</b> @Model.Exception.Message <br/> <b>Controller:</b> @Model.ControllerName <br/> <b>Action:</b> @Model.ActionName <br/> </p> <div> <pre> @Model.Exception.StackTrace </pre> </div> </div> }
routeData.Values.Add("error", exception.Message); Server.ClearError(); Response.RedirectToRoute(routeData.Values);
Exception exception = Server.GetLastError(); Response.Clear(); HttpException httpException = exception as HttpException;
Response.Redirect(String.Format("~/Error/{0}/?message={1}", action, exception.Message));
<system.web> <customErrors mode="Off" /> ... </system.web>
<system.web> <customErrors mode="Off"/> </system.web> <system.webServer> <httpErrors errorMode="Detailed" /> </system.webServer>
public static void RegisterGlobalFilters(GlobalFilterCollection filters) { filters.Add(new HandleErrorAttribute()); }
public RhsCustomer GetCustomer(string customerNumber) { using (RhsEbsDataContext context = new RhsEbsDataContext() ) { RhsCustomer rc = (from x in context.custmasts where x.kcustnum == customerNumber select new RhsCustomer() { CustomerName = x.custname, CustomerAddress = x.custadd + ", " + x.custcity CustomerPhone = x.custphone, CustomerFax = x.custfax }).SingleOrDefault(); return rc; } } public List<RhsTruck> GetEquipmentOwned(RhsCustomer cust) { using (RhsEbsDataContext context = new RhsEbsDataContext()) { var trucks = (from m in context.mkpops join c in context.custmasts on m.kcustnum equals c.kcustnum where m.kcustnum == cust.CustomerNumber select new RhsTruck { Make = m.kmfg, Model = m.kmodel, Serial = m.kserialnum, EquipID = m.kserialno1, IsRental = false }).ToList(); return trucks; } } protected void Page_Load(object sender, EventArgs e) { string testCustNum = Page.Request.QueryString["custnum"].ToString(); RhsCustomerRepository rcrep = new RhsCustomerRepository(); RhsCustomer rc = rcrep.GetCustomer(testCustNum); List<RhsTruck> trucks = rcrep.GetEquipmentOwned(rc); GridViewTrucks.DataSource = trucks; GridViewTrucks.DataBind(); }
public int GetPackage(int id,int emp) { int getpackages=Convert.ToInt32(EmployerSubscriptionPackage.GetAllData().Where(x => x.SubscriptionPackageID ==`enter code here` id && x.EmployerID==emp ).FirstOrDefault().ID); return getpackages; } 1. var EmployerId = Convert.ToInt32(Session["EmployerId"]); var getpackage = GetPackage(employerSubscription.ID, EmployerId);
list.SingleOrDefault(); list.Single(); list.FirstOrDefault(); list.First(); list.LastOrDefault(); list.Last();
var list = GetViolations(VehicleID); var list2 = GetViolations(VehicleID2); list.Add(list2);
List<string> initialList = new List<string>(); List<string> listToAdd = new List<string>(); initialList.AddRange(listToAdd);
protected void SaveMyImage_Click(object sender, EventArgs e) { string imageUrl = Hidden1.Value; string saveLocation = Server.MapPath("~/PictureUploads/whatever2.png") ; HttpWebRequest imageRequest = (HttpWebRequest)WebRequest.Create(imageUrl); WebResponse imageResponse = imageRequest.GetResponse(); Stream responseStream = imageResponse.GetResponseStream(); using (BinaryReader br = new BinaryReader(responseStream)) { imageBytes = br.ReadBytes(500000); br.Close(); } responseStream.Close(); imageResponse.Close(); FileStream fs = new FileStream(saveLocation, FileMode.Create); BinaryWriter bw = new BinaryWriter(fs); try { bw.Write(imageBytes); } finally { fs.Close(); bw.Close(); } } }
public Image LoadImage() { byte[] bytes = Convert.FromBase64String("R0lGODlhAQABAIAAAAAAAAAAACH5BAAAAAAALAAAAAABAAEAAAICTAEAOw=="); Image image; using (MemoryStream ms = new MemoryStream(bytes)) { image = Image.FromStream(ms); } return image; }
string filePath = "MyImage.jpg"; File.WriteAllBytes(filePath, Convert.FromBase64String(base64imageString));
private void SaveByteArrayAsImage(string fullOutputPath, string base64String) { byte[] bytes = Convert.FromBase64String(base64String); Image image; using (MemoryStream ms = new MemoryStream(bytes)) { image = Image.FromStream(ms); } image.Save(fullOutputPath, System.Drawing.Imaging.ImageFormat.Png); }
public void SaveImage(string base64) { using (MemoryStream ms = new MemoryStream(Convert.FromBase64String(base64))) { using (Bitmap bm2 = new Bitmap(ms)) { bm2.Save("SavingPath" + "ImageName.jpg"); } } }
String dirPath = "C:\myfolder\"; String imgName = "my_mage_name.bmp"; byte[] imgByteArray = Convert.FromBase64String("your_base64_string"); File.WriteAllBytes(dirPath + imgName, imgByteArray);
byte[] encodedDataAsBytes = System.Convert.FromBase64String(encodedData);
byte[] bytes = Convert.FromBase64String(Base64String); ImageTagId.ImageUrl = "data:image/jpeg;base64," + Convert.ToBase64String(bytes);
public void SaveImage() { string strm = "R0lGODlhAQABAIAAAAAAAP var myfilename= string.Format(@"{0}", Guid.NewGuid()); string filepath= "~/UserImages/" + myfilename+ ".jpeg"; var bytess = Convert.FromBase64String(strm); using (var imageFile = new FileStream(filepath, FileMode.Create)) { imageFile.Write(bytess, 0, bytess.Length); imageFile.Flush(); } }
public List<MemberLoan> GetAllMembersForLoan(string keyword) { using (CosisEntities db = new CosisEntities()) { IQueryable<MemberLoan> query = db.MemberLoans.OrderByDescending(m => m.LoanDate); if (!string.IsNullOrEmpty(keyword)) { keyword = keyword.ToLower(); query = query.Where(m => m.LoanProviderCode.Contains(keyword) || m.MemNo.Contains(keyword) || (!string.IsNullOrEmpty(m.LoanProduct.LoanProductName) && m.LoanProduct.LoanProductName.ToLower().Contains(keyword)) || m.Membership.MemName.Contains(keyword) || m.GeneralMasterInformation.Description.Contains(keyword) ); } return query.ToList(); } } protected void btnSearch_Click(object sender, ImageClickEventArgs e) { string keyword = txtKeyword.Text.ToLower(); LoanController c = new LoanController(); List<COSIS_DAL.MemberLoan> list = new List<COSIS_DAL.MemberLoan>(); list = c.GetAllMembersForLoan(keyword); if (list.Count <= 0) { lblMsg.Text = "No Records Found"; GridView1.DataSourceID = null; GridView1.DataSource = null; GridView1.DataBind(); } else { lblMsg.Text = ""; GridView1.DataSourceID = null; GridView1.DataSource = list; GridView1.DataBind(); } }
public class MemberLoan { public string LoandProviderCode { get; set; } public virtual Membership Membership { get; set; } }
public class MemberLoanProxy : MemberLoan { private CosisEntities db; private int membershipId; private Membership membership; public override Membership Membership { get { if (membership == null) membership = db.Memberships.Find(membershipId); return membership; } set { membership = value; } } }
IQueryable<MemberLoan> query = db.MemberLoans.Include(m => m.Membership);
public class Person { public int Id { get; set; } public string name { get; set; } public int? PetId { get; set; } public Pet Pet { get; set; } } public class Pet { public string name { get; set; } } using (var db = new dbContext()) { var person = db.Persons.FirstOrDefaultAsync(p => p.id == 1); } Console.WriteLine(person.Pet.Name);
public class MyDbContext : DbContext { public MyDbContext() { this.Configuration.LazyLoadingEnabled = false; } }
using (var db = new dbContext()) { var person = db.Persons .Include(p => p.Pet) .FirstOrDefaultAsync(p => p.id == 1); } Console.WriteLine(person.Pet.Name);
using (var db = new dbContext()) { var person = db.Persons.FirstOrDefaultAsync(p => p.id == 1); var pet = db.Pets.FirstOrDefaultAsync(p => p.id == person.PetId); } Console.WriteLine(person.Pet.Name);
var data = db.ApplicationTranceLogs .Include(q=>q.Users) .Include(q => q.LookupItems) .Select(q => new { Id = q.Id, FormatDate = q.Date.ToString("yyyy/MM/dd"), ***Users = q.Users,*** ProcessType = q.ProcessType, CoreProcessId = q.CoreProcessId, Data = q.Data }) .ToList(); var data = db.ApplicationTranceLogs .Include(q=>q.Users).Include(q => q.LookupItems) .Select(q => new { Id = q.Id, FormatDate = q.Date.ToString("yyyy/MM/dd"), ***Users = q.Users.Name***, ProcessType = q.ProcessType, CoreProcessId = q.CoreProcessId, Data = q.Data }) .ToList();
class InventoryItem { ... public virtual List<InvActivity> ItemsActivity { get; set; } public GetLatestActivity() { return ItemActivity?.OrderByDescending(x => x.DateEntered).SingleOrDefault(); } ... }
using (DBContext ctx = new DBContext()) { var latestAct = _item.GetLatestActivity(); ctx.InventoryActivity.Attach(latestAct); }
<asp:Label EnableViewState="false" ID="Label8" runat="server" AssociatedControlID="txtEmail">Email Address:</asp:Label> <asp:TextBox ID="txtEmail" runat="server"></asp:TextBox>
<asp:Label ID="Label1" runat="server" Text="Label Text" ForeColor="Red" Font-Bold="true" ></asp:Label>
<asp:Literal ID="Literal1" runat="server" Text="Literal Control Text"></asp:Literal>
public static class HttpRequestMessageExtensions { private const string HttpContext = "MS_HttpContext"; private const string RemoteEndpointMessage = "System.ServiceModel.Channels.RemoteEndpointMessageProperty"; public static string GetClientIpAddress(this HttpRequestMessage request) { if (request.Properties.ContainsKey(HttpContext)) { dynamic ctx = request.Properties[HttpContext]; if (ctx != null) { return ctx.Request.UserHostAddress; } } if (request.Properties.ContainsKey(RemoteEndpointMessage)) { dynamic remoteEndpoint = request.Properties[RemoteEndpointMessage]; if (remoteEndpoint != null) { return remoteEndpoint.Address; } } return null; } }
using System.Net.Http; using System.ServiceModel.Channels; using System.Web; using System.Web.Http; namespace Trikks.Controllers.Api { public class IpController : ApiController { public string GetIp() { return GetClientIp(); } private string GetClientIp(HttpRequestMessage request = null) { request = request ?? Request; if (request.Properties.ContainsKey("MS_HttpContext")) { return ((HttpContextWrapper)request.Properties["MS_HttpContext"]).Request.UserHostAddress; } else if (request.Properties.ContainsKey(RemoteEndpointMessageProperty.Name)) { RemoteEndpointMessageProperty prop = (RemoteEndpointMessageProperty)request.Properties[RemoteEndpointMessageProperty.Name]; return prop.Address; } else if (HttpContext.Current != null) { return HttpContext.Current.Request.UserHostAddress; } else { return null; } } } }
string clientAddress = HttpContext.Current.Request.UserHostAddress;
object property; Request.Properties.TryGetValue(typeof(RemoteEndpointMessageProperty).FullName, out property); RemoteEndpointMessageProperty remoteProperty = property as RemoteEndpointMessageProperty;
ip = HttpContext.Current != null ? HttpContext.Current.Request.UserHostAddress : "";
private string getClientIp(HttpRequestMessage request = null) { if (request == null) { return null; } if (request.Properties.ContainsKey("MS_OwinContext")) { return ((OwinContext) request.Properties["MS_OwinContext"]).Request.RemoteIpAddress; } return null; }
public string GetUserIp(HttpRequestMessage request) { if (request.Properties.ContainsKey("MS_HttpContext")) { var ctx = request.Properties["MS_HttpContext"] as HttpContextBase; if (ctx != null) { return ctx.Request.UserHostAddress; } } return null; }
public static class HttpRequestMessageExtensions { private const string HttpContext = "MS_HttpContext"; private const string RemoteEndpointMessage = "System.ServiceModel.Channels.RemoteEndpointMessageProperty"; public static string GetClientIpAddress(this HttpRequestMessage request) { if (request.Properties.ContainsKey(HttpContext)) { dynamic ctx = request.Properties[HttpContext]; if (ctx != null) { return ctx.Request.UserHostAddress; } } if (request.Properties.ContainsKey(RemoteEndpointMessage)) { dynamic remoteEndpoint = request.Properties[RemoteEndpointMessage]; if (remoteEndpoint != null) { return remoteEndpoint.Address; } } return null; } }
using System; using System.Net; using System.Web; using System.Web.Http; ... [HttpPost] [Route("ContactForm")] public IHttpActionResult PostContactForm([FromBody] ContactForm contactForm) { var hostname = HttpContext.Current.Request.UserHostAddress; IPAddress ipAddress = IPAddress.Parse(hostname); IPHostEntry ipHostEntry = Dns.GetHostEntry(ipAddress); ...
public static object GetSection(string sectionName) { ... return ConfigurationManager.GetSection(sectionName); } public static object GetSection(string sectionName, string path) { ... return HttpConfigurationSystem.GetSection(sectionName, path); }
WebConfigurationManager.ConnectionStrings["Name"].ConnectionString
StringBuilder sb = new StringBuilder(); UserControl ctrl = (UserControl) LoadControl("~/Controls/UserControl.ascx"); StringWriter sw = new StringWriter(sb); Html32TextWriter htw = new Html32TextWriter(sw); ctrl.RenderControl(htw); string body = sb.ToString();
MailMessage message = new MailMessage(); message.From = new MailAddress("from@email.com", "from name"); message.Subject = "Email Subject"; message.Body = body; message.BodyEncoding = Encoding.ASCII; message.IsBodyHtml = true; SmtpClient smtp = new SmtpClient("server"); smtp.Send(message);
A sample email template by <b>$name</b>. <br /> Foreach example : <br /> [Date: $item.Date] Name: $item.Name, Value: $itemValue.Value <br /><br />
VelocityContext context = new VelocityContext(); context.Put("name", "ScarletGarden"); context.Put("itemList", itemList); StringWriter writer = new StringWriter(); Velocity.MergeTemplate("MailTemplate.vm", context, writer); string mailBody = writer.GetStringBuilder().ToString();
<html> <body> Hi {FirstName} {LastName}, Here are your orders: {foreach Orders} Order {end} </body> </html>
Mail.Html(Template .FromFile("template.txt") .DataFrom(_contact) .Render()) .Text("This is text version of the message.") .From(new MailBox("alice@mail.com", "Alice")) .To(new MailBox("bob@mail.com", "Bob")) .Subject("Your order") .UsingNewSmtp() .WithCredentials("alice@mail.com", "password") .Server("mail.com") .WithSSL() .Send();
using System.Net.Mail; string HTMLTemplatePath = @"path"; string TextTemplatePath = @"path"; string HTMLBody = ""; string TextBody = ""; HTMLBody = File.ReadAllText(HTMLTemplatePath); TextBody = File.ReadAllText(TextTemplatePath); HTMLBody = HTMLBody.Replace(["[BODY]", content); TextBody = HTMLBody.Replace(["[BODY]", content); MailMessage m = new MailMessage(); m.From = new MailAddress("address@gmail.com", "display name"); m.To.Add("address@gmail.com"); m.Subject = "subject"; AlternateView plain = AlternateView.CreateAlternateViewFromString(_EmailBody + text, new System.Net.Mime.ContentType("text/plain")); AlternateView html = AlternateView.CreateAlternateViewFromString(_EmailBody + body, new System.Net.Mime.ContentType("text/html")); mail.AlternateViews.Add(plain); mail.AlternateViews.Add(html); SmtpClient smtp = new SmtpClient("server"); smtp.Send(m);
StringBuilder sb = new StringBuilder(); StringWriter sw = new StringWriter(sb); HtmlTextWriter htmlTW = new HtmlTextWriter(sw); this.Render(htmlTW);
public static string GetHTMLBody(string url) { string htmlBody; using (WebClient client = new WebClient ()) { htmlBody = client.DownloadString(url); } return htmlBody; }
string url = "http: message.Body = GetHTMLBody(url);
Partial Class Purchase Inherits UserControl Private Sub SendReceipt() Dim oTemplate As MailTemplates.PurchaseReceipt oTemplate = MailTemplates.Templates.PurchaseReceipt(Me) oTemplate.Name = "James Bond" oTemplate.OrderTotal = 3500000 oTemplate.OrderDescription = "Q-Stuff" oTemplate.InjectCss("PurchaseReceipt") Utils.SendMail("{0} <james.bond@mi6.co.uk>".ToFormat(oTemplate.Name), "Purchase Receipt", oTemplate.ToHtml) End Sub End Class
Namespace MailTemplates Public MustInherit Class BaseTemplate Inherits UserControl Public Shared Function GetTemplate(Caller As TemplateControl, Template As Type) As BaseTemplate Return Caller.LoadControl("~/MailTemplates/{0}.ascx".ToFormat(Template.Name)) End Function Public Sub InjectCss(FileName As String) If Me.Styler IsNot Nothing Then Me.Styler.Controls.Add(New Controls.Styler(FileName)) End If End Sub Private ReadOnly Property Styler As PlaceHolder Get If _Styler Is Nothing Then _Styler = Me.FindNestedControl(GetType(PlaceHolder)) End If Return _Styler End Get End Property Private _Styler As PlaceHolder End Class End Namespace
Namespace MailTemplates Public Class Templates Public Shared ReadOnly Property PurchaseReceipt(Caller As TemplateControl) As PurchaseReceipt Get Return BaseTemplate.GetTemplate(Caller, GetType(PurchaseReceipt)) End Get End Property End Class End Namespace
Namespace MailTemplates Public MustInherit Class PurchaseReceipt Inherits BaseTemplate Public MustOverride WriteOnly Property Name As String Public MustOverride WriteOnly Property OrderTotal As Decimal Public MustOverride WriteOnly Property OrderDescription As String End Class End Namespace
<%@ Control Language="VB" ClassName="_Header" %> <!DOCTYPE html PUBLIC "- <!-- See https: --> <html xmlns="http: <head> <title></title> <asp:PlaceHolder ID="plcStyler" runat="server"></asp:PlaceHolder> </head> <body>
<%@ Control Language="VB" ClassName="_Footer" %> </body> </html>
<%@ Control Language="VB" AutoEventWireup="false" CodeFile="PurchaseReceipt.ascx.vb" Inherits="PurchaseReceipt" %> <%@ Register Src="_Header.ascx" TagName="Header" TagPrefix="uc" %> <%@ Register Src="_Footer.ascx" TagName="Footer" TagPrefix="uc" %> <uc:Header ID="ctlHeader" runat="server" /> <p>Name: <asp:Label ID="lblName" runat="server"></asp:Label></p> <p>Order Total: <asp:Label ID="lblOrderTotal" runat="server"></asp:Label></p> <p>Order Description: <asp:Label ID="lblOrderDescription" runat="server"></asp:Label></p> <uc:Footer ID="ctlFooter" runat="server" />
Partial Class PurchaseReceipt Inherits MailTemplates.PurchaseReceipt Public Overrides WriteOnly Property Name As String Set(Value As String) lblName.Text = Value End Set End Property Public Overrides WriteOnly Property OrderTotal As Decimal Set(Value As Boolean) lblOrderTotal.Text = Value End Set End Property Public Overrides WriteOnly Property OrderDescription As Decimal Set(Value As Boolean) lblOrderDescription.Text = Value End Set End Property End Class
' ' Public Module Helpers <Extension> Public Function AllControls(Control As Control) As List(Of Control) Return Control.Controls.Flatten End Function <Extension> Public Function FindNestedControl(Control As Control, Id As String) As Control Return Control.Controls.Flatten(Function(C) C.ID = Id).SingleOrDefault End Function <Extension> Public Function FindNestedControl(Control As Control, Type As Type) As Control Return Control.Controls.Flatten(Function(C) C.GetType = Type).SingleOrDefault End Function <Extension> Public Function Flatten(Controls As ControlCollection) As List(Of Control) Flatten = New List(Of Control) Controls.Traverse(Sub(Control) Flatten.Add(Control)) End Function <Extension> Public Function Flatten(Controls As ControlCollection, Predicate As Func(Of Control, Boolean)) As List(Of Control) Flatten = New List(Of Control) Controls.Traverse(Sub(Control) If Predicate(Control) Then Flatten.Add(Control) End If End Sub) End Function <Extension> Public Sub Traverse(Controls As ControlCollection, Action As Action(Of Control)) Controls.Cast(Of Control).ToList.ForEach(Sub(Control As Control) Action(Control) If Control.HasControls Then Control.Controls.Traverse(Action) End If End Sub) End Sub <Extension()> Public Function ToFormat(Template As String, ParamArray Values As Object()) As String Return String.Format(Template, Values) End Function <Extension()> Public Function ToHtml(Control As Control) As String Dim oSb As StringBuilder oSb = New StringBuilder Using oSw As New StringWriter(oSb) Using oTw As New HtmlTextWriter(oSw) Control.RenderControl(oTw) Return oSb.ToString End Using End Using End Function End Module Namespace Controls Public Class Styler Inherits LiteralControl Public Sub New(FileName As String) Dim _ sFileName, sFilePath As String sFileName = Path.GetFileNameWithoutExtension(FileName) sFilePath = HttpContext.Current.Server.MapPath("~/Styles/{0}.css".ToFormat(sFileName)) If File.Exists(sFilePath) Then Me.Text = "{0}<style type=""text/css"">{0}{1}</style>{0}".ToFormat(vbCrLf, File.ReadAllText(sFilePath)) Else Me.Text = String.Empty End If End Sub End Class End Namespace Public Class Utils Public Shared Sub SendMail(Recipient As MailAddress, Subject As String, HtmlBody As String) Using oMessage As New MailMessage oMessage.To.Add(Recipient) oMessage.IsBodyHtml = True oMessage.Subject = Subject.Trim oMessage.Body = HtmlBody.Trim Using oClient As New SmtpClient oClient.Send(oMessage) End Using End Using End Sub End Class
char[] array = yourStringVariable.Take(5).ToArray();
string firstFivChar = new string(yourStringVariable.Take(5).ToArray());
string firstFivCharWithSubString = !String.IsNullOrWhiteSpace(yourStringVariable) && yourStringVariable.Length >= 5 ? yourStringVariable.Substring(0, 5) : yourStringVariable;
string firstFiveChar = str; If(!String.IsNullOrWhiteSpace(yourStringVariable) && yourStringVariable.Length >= 5) firstFiveChar = yourStringVariable.Substring(0, 5);
string title = "love" var firstFiveChars = title.Length <= 5 ? title : title.Substring(0, 5);
var firstFive = stringValue != null ? stringValue.Substring(0, stringValue.Length >= 5 ? 5 : stringValue.Length) : null;
var firstFive = stringValue != null ? string.Join("", stringValue.Take(5)) : null;
var zz = "7814148471"; Console.WriteLine(zz.Remove(5));
string str = (yourStringVariable + " ").Substring(0,5).Trim();
string str = "GoodMorning" string strModified = str.Substring(0,5);
public static class StringExtensions { public static string Ellipsis(this string s, int charsToDisplay) { if (!string.IsNullOrWhiteSpace(s)) return s.Length <= charsToDisplay ? s : new string(s.Take(charsToDisplay).ToArray()) + "..."; return String.Empty; } }
String yourstring="Some Text"; String first_n_Number_of_Characters=yourstring.Substring(0,n);
strSomeString = strSomeString.PadRight(50).Substring(0,50).TrimEnd();
var firstFive = stringValue?.Substring(0, stringValue.Length >= 5 ? 5 : customAlias.Length);
var firstFive = !String.IsNullOrWhiteSpace(stringValue) && stringValue.Length >= 5 ? stringValue.Substring(0, 5) : stringValue
string Name = "Abhishek"; string firstfour = Name.Substring(0, 4); Response.Write(firstfour);
using System.Security.Principal; public ArrayList Groups() { ArrayList groups = new ArrayList(); foreach (IdentityReference group in System.Web.HttpContext.Current.Request.LogonUserIdentity.Groups) { groups.Add(group.Translate(typeof(NTAccount)).ToString()); } return groups; }
public List<GroupPrincipal> GetGroups(string userName) { List<GroupPrincipal> result = new List<GroupPrincipal>(); PrincipalContext yourDomain = new PrincipalContext(ContextType.Domain); UserPrincipal user = UserPrincipal.FindByIdentity(yourDomain, userName); if(user != null) { PrincipalSearchResult<Principal> groups = user.GetAuthorizationGroups(); foreach(Principal p in groups) { if(p is GroupPrincipal) { result.Add((GroupPrincipal)p); } } } return result; }
public string GetDepartment(Principal principal) { string result = string.Empty; DirectoryEntry de = (principal.GetUnderlyingObject() as DirectoryEntry); if (de != null) { if (de.Properties.Contains("department")) { result = de.Properties["department"][0].ToString(); } } return result; }
public string GetDepartment(string username) { string result = string.Empty; PrincipalContext yourDomain = new PrincipalContext(ContextType.Domain); UserPrincipal user = UserPrincipal.FindByIdentity(yourDomain, username); if(user != null) { DirectoryEntry de = (user.GetUnderlyingObject() as DirectoryEntry); if (de != null) { if (de.Properties.Contains("department")) { result = de.Properties["department"][0].ToString(); } } } return result; }
using System.Security.Principal private List<string> GetGroups(string userName) { List<string> result = new List<string>(); WindowsIdentity wi = new WindowsIdentity(userName); foreach (IdentityReference group in wi.Groups) { try { result.Add(group.Translate(typeof(NTAccount)).ToString()); } catch (Exception ex) { } } result.Sort(); return result; }
public static List<string> GetAdGroupsForUser2(string userName, string domainName = null) { var result = new List<string>(); if (userName.Contains( { domainName = userName.Split(new char[] { userName = userName.Split(new char[] { } using (PrincipalContext domainContext = new PrincipalContext(ContextType.Domain, domainName)) using (UserPrincipal user = UserPrincipal.FindByIdentity(domainContext, userName)) using (var searcher = new DirectorySearcher(new DirectoryEntry("LDAP: { searcher.Filter = String.Format("(&(objectCategory=group)(member={0}))", user.DistinguishedName); searcher.SearchScope = SearchScope.Subtree; searcher.PropertiesToLoad.Add("cn"); foreach (SearchResult entry in searcher.FindAll()) if (entry.Properties.Contains("cn")) result.Add(entry.Properties["cn"][0].ToString()); } return result; }
var userNameContains = "part_of_user_name"; var identity = WindowsIdentity.GetCurrent().User; var allDomains = Forest.GetCurrentForest().Domains.Cast<Domain>(); var allSearcher = allDomains.Select(domain => { var searcher = new DirectorySearcher(new DirectoryEntry("LDAP: searcher.Filter = String.Format("(&(&(objectCategory=person)(objectClass=user)(name=*{0}*)))", userNameContains); return searcher; }); var directoryEntriesFound = allSearcher .SelectMany(searcher => searcher.FindAll() .Cast<SearchResult>() .Select(result => result.GetDirectoryEntry())); var memberOf = directoryEntriesFound.Select(entry => { using (entry) { return new { Name = entry.Name, GroupName = ((object[])entry.Properties["MemberOf"].Value).Select(obj => obj.ToString()) }; } }); foreach (var item in memberOf) { Debug.Print("Name = " + item.Name); Debug.Print("Member of:"); foreach (var groupName in item.GroupName) { Debug.Print(" " + groupName); } Debug.Print(String.Empty); } }
var pc = new PrincipalContext(ContextType.Domain, domain, "USER_WITH_PERMISSION", "PASS"); var user = UserPrincipal.FindByIdentity(pc, IdentityType.SamAccountName, userName); var groups = user.GetGroups();
Sub Session_Start(ByVal sender As Object, ByVal e As EventArgs) If HttpContext.Current.User.IsInRole("TheDomain\TheGroup") Then End If
public string[] GetGroupNames(string domainName, string userName) { List<string> result = new List<string>(); using (PrincipalContext principalContext = new PrincipalContext(ContextType.Domain, domainName)) { using (PrincipalSearchResult<Principal> src = UserPrincipal.FindByIdentity(principalContext, userName).GetGroups()) { src.ToList().ForEach(sr => result.Add(sr.SamAccountName)); } } return result.ToArray(); }
version = ConfigurationManager.AppSettings["versionNumber"];
<script src="scripts/myjavascript.js?v=<%=version %>" type="text/javascript"></script> <link href="styles/mystyle.css?v=<%=version %>" rel="stylesheet" type="text/css" />
public static class JavascriptExtension { public static MvcHtmlString IncludeVersionedJs(this HtmlHelper helper, string filename) { string version = GetVersion(helper, filename); return MvcHtmlString.Create("<script type= } private static string GetVersion(this HtmlHelper helper, string filename) { var context = helper.ViewContext.RequestContext.HttpContext; if (context.Cache[filename] == null) { var physicalPath = context.Server.MapPath(filename); var version = $"?v={new System.IO.FileInfo(physicalPath).LastWriteTime.ToString("MMddHHmmss")}"; context.Cache.Add(filename, version, null, DateTime.Now.AddMinutes(5), TimeSpan.Zero, CacheItemPriority.Normal, null); return version; } else { return context.Cache[filename] as string; } } }
<script src="scripts/myjavascript.js" asp-append-version="true"></script> <link href="styles/mystyle.css rel="stylesheet" asp-append-version="true" />
<system.web> <compilation debug="false" /> </system.web>
bundles.Add(new ScriptBundle("~/Scripts/myjavascript.js") .Include("~/Scripts/myjavascript.js")); bundles.Add(new StyleBundle("~/Content/mystyle.css") .Include("~/Content/mystyle.css"));
@Scripts.Render("~/Scripts/myjavascript.js") @Styles.Render("~/Content/mystyle.css")
<script src="scripts/main.js?bust_js_cache=<%=System.IO.File.GetLastWriteTime(Server.MapPath("scripts/main.js")).ToString("HH:mm:ss")%>" type="text/javascript"></script>
<script src="scripts/main.js?bust_js_cache=10:18:38" type="text/javascript"></script>
public static class FileUtility { public static string SetJsVersion(HttpContext context, string filename) { string version = GetJsFileVersion(context, filename); return filename + version; } private static string GetJsFileVersion(HttpContext context, string filename) { if (context.Cache[filename] == null) { string filePhysicalPath = context.Server.MapPath(filename); string version = "?v=" + GetFileLastModifiedDateTime(context, filePhysicalPath, "yyyyMMddhhmmss"); return version; } else { return string.Empty; } } public static string GetFileLastModifiedDateTime(HttpContext context, string filePath, string dateFormat) { return new System.IO.FileInfo(filePath).LastWriteTime.ToString(dateFormat); } }
public class FileVersionService { private IHostingEnvironment _hostingEnvironment; public FileVersionService(IHostingEnvironment hostingEnvironment) { _hostingEnvironment = hostingEnvironment; } public string GetFileVersion(string filename) { var path = string.Format("{0}{1}", _hostingEnvironment.WebRootPath, filename); var fileInfo = new FileInfo(path); var version = fileInfo.LastWriteTimeUtc.ToString("yyyyMMddhhmmssfff"); return version; } }
public void ConfigureServices(IServiceCollection services) { ... services.AddScoped<FileVersionService>(); ... }
@inject Namespace.Here.FileVersionService fileVersionService <!DOCTYPE html> <html lang="en" class="@ViewBag.HtmlClass"> <head> ... <link href="/css/styles.css?v=@fileVersionService.GetFileVersion("\\css\\styles.css")" rel="stylesheet" /> ... </head> <body> ... </body>
<link href="styles/navigation.css?v=<%=ConfigurationManager.AppSettings("VersionNumber")%>" rel="stylesheet" type="text/css" />
public static class HtmlHelperExtensions { public static MvcHtmlString IncludeVersionedJs(this HtmlHelper helper, string filename) { string version = GetVersion(helper, filename); return MvcHtmlString.Create("<script type= } public static MvcHtmlString IncludeVersionedCss(this HtmlHelper helper, string filename) { string version = GetVersion(helper, filename); return MvcHtmlString.Create("<link href= } private static string GetVersion(this HtmlHelper helper, string filename) { var context = helper.ViewContext.RequestContext.HttpContext; var physicalPath = context.Server.MapPath(filename); var version = "?v=" + new System.IO.FileInfo(physicalPath).LastWriteTime .ToString("yyyyMMddHHmmss"); context.Cache.Add(physicalPath, version, null, DateTime.Now.AddMinutes(1), TimeSpan.Zero, CacheItemPriority.Normal, null); if (context.Cache[filename] == null) { context.Cache[filename] = version; return version; } else { if (version != context.Cache[filename].ToString()) { context.Cache[filename] = version; return version; } return context.Cache[filename] as string; } } }
@using System.Web.Caching @using System.Web.Hosting @{ Layout = "~/Views/Shared/_Layout.cshtml"; PageData.Add("scriptFormat", string.Format("<script src=\"{{0}}?_={0}\"></script>", GetDeployTicks())); } @functions { private static string GetDeployTicks() { const string cacheKey = "DeployTicks"; var returnValue = HttpRuntime.Cache[cacheKey] as string; if (null == returnValue) { var absolute = HostingEnvironment.MapPath("~/Web.config"); returnValue = File.GetLastWriteTime(absolute).Ticks.ToString(); HttpRuntime.Cache.Insert(cacheKey, returnValue, new CacheDependency(absolute)); } return returnValue; } }
@Scripts.RenderFormat(PageData["scriptFormat"], "~/Scripts/Search/javascriptFile.min.js")
private static string GetLastWriteTimeForFile(string pathVal) { return System.IO.File.GetLastWriteTime(HostingEnvironment.MapPath(pathVal)).ToFileTime().ToString(); }
public static string AppendDateInFile(string pathVal) { var patheWithDate = new StringBuilder(pathVal); patheWithDate.AppendFormat("{0}x={1}", pathVal.IndexOf( GetLastWriteTimeForFile(pathVal)); return patheWithDate.ToString(); }
namespace TNS.Portal.Helpers { public static class ScriptExtensions { public static HtmlString QueryStringScript<T>(this HtmlHelper<T> html, string path) { var file = html.ViewContext.HttpContext.Server.MapPath(path); DateTime lastModified = File.GetLastWriteTime(file); TagBuilder builder = new TagBuilder("script"); builder.Attributes["src"] = path + "?modified=" + lastModified.ToString("yyyyMMddhhmmss"); return new HtmlString(builder.ToString()); } public static HtmlString QueryStringStylesheet<T>(this HtmlHelper<T> html, string path) { var file = html.ViewContext.HttpContext.Server.MapPath(path); DateTime lastModified = File.GetLastWriteTime(file); TagBuilder builder = new TagBuilder("link"); builder.Attributes["href"] = path + "?modified=" + lastModified.ToString("yyyyMMddhhmmss"); builder.Attributes["rel"] = "stylesheet"; return new HtmlString(builder.ToString()); } } }
<system.web.webPages.razor> <host factoryType="System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=5.2.3.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" /> <pages pageBaseType="System.Web.Mvc.WebViewPage"> <namespaces> <add namespace="System.Web.Mvc" /> <add namespace="System.Web.Mvc.Ajax" /> <add namespace="System.Web.Mvc.Html" /> <add namespace="System.Web.Optimization"/> <add namespace="System.Web.Routing" /> <add namespace="TNS.Portal" /> <add namespace="TNS.Portal.Helpers" /> </namespaces> </pages> </system.web.webPages.razor>
@Html.QueryStringScript("/Scripts/NPIAjaxCalls.js") @Html.QueryStringStylesheet("/Content/StyledRadio.css")
public static string VersionedContent(this HttpContext httpContext, string virtualFilePath) { var physicalFilePath = httpContext.Server.MapPath(virtualFilePath); if (httpContext.Cache[physicalFilePath] == null) { httpContext.Cache[physicalFilePath] = ((Page)httpContext.CurrentHandler).ResolveUrl(virtualFilePath) + (virtualFilePath.Contains("?") ? "&" : "?") + "v=" + File.GetLastWriteTime(physicalFilePath).ToString("yyyyMMddHHmmss"); } return (string)httpContext.Cache[physicalFilePath]; }
<link type="text/css" rel="stylesheet" href="<%= Context.VersionedContent("~/styles/mystyle.css") %>" /> <script type="text/javascript" src="<%= Context.VersionedContent("~/scripts/myjavascript.js") %>"></script>
<script src="scripts/myjavascript.js?_=<%=DateTime.Now.Ticks%>" type="text/javascript"></script> <link href="styles/mystyle.css?_=<%=DateTime.Now.Ticks%>" rel="stylesheet" type="text/css" />
public static class TimestampedContentExtensions { public static string VersionedContent(this UrlHelper helper, string contentPath) { var context = helper.RequestContext.HttpContext; if (context.Cache[contentPath] == null) { var physicalPath = context.Server.MapPath(contentPath); var version = @"v=" + new FileInfo(physicalPath).LastWriteTime.ToString(@"yyyyMMddHHmmss"); var translatedContentPath = helper.Content(contentPath); var versionedContentPath = contentPath.Contains(@"?") ? translatedContentPath + @"&" + version : translatedContentPath + @"?" + version; context.Cache.Add(physicalPath, version, null, DateTime.Now.AddMinutes(1), TimeSpan.Zero, CacheItemPriority.Normal, null); context.Cache[contentPath] = versionedContentPath; return versionedContentPath; } else { return context.Cache[contentPath] as string; } } }
<link href="@Url.Content(@"~/Content/bootstrap.min.css")" rel="stylesheet" type="text/css" /> <script src="@Url.Content(@"~/Scripts/bootstrap.min.js")"></script>
<link href="@Url.VersionedContent(@"~/Content/bootstrap.min.css")" rel="stylesheet" type="text/css" /> <script src="@Url.VersionedContent(@"~/Scripts/bootstrap.min.js")"></script>
<link href="/Content/bootstrap.min.css?v=20151104105858" rel="stylesheet" type="text/css" /> <script src="/Scripts/bootstrap.min.js?v=20151029213517"></script>
protected void Page_PreRender(object sender, EventArgs e) { HtmlLink link = null; LiteralControl script = null; foreach (Control c in Header.Controls) { if (c is HtmlLink) { link = c as HtmlLink; if (link.Href.EndsWith(".css", StringComparison.InvariantCultureIgnoreCase)) { link.Href += string.Format("?v={0}", ConfigurationManager.AppSettings["agVersion"]); } } if (c is LiteralControl) { script = c as LiteralControl; if (script.Text.Contains(".js")) { var foundIndexes = new List<int>(); for (int i = script.Text.IndexOf(".js\""); i > -1; i = script.Text.IndexOf(".js\"", i + 1)) { foundIndexes.Add(i); } for (int i = foundIndexes.Count - 1; i >= 0; i--) { script.Text = script.Text.Insert(foundIndexes[i] + 3, string.Format("?v={0}", ConfigurationManager.AppSettings["agVersion"])); } } } } }
Scripts.DefaultTagFormat = @"<script src=""{0}?v=" + ConfigurationManager.AppSettings["pubversion"] + @"""></script>"; Styles.DefaultTagFormat = @"<link href=""{0}?v=" + ConfigurationManager.AppSettings["pubversion"] + @""" rel=""stylesheet""/>";
<script src="/Scripts/pages/common.js" type="text/javascript"></script>
<script src="/Scripts/pages/common.js?ver<%=DateTime.Now.Ticks.ToString()%>" type="text/javascript"></script>
public class AjaxTestController : Controller { // public ActionResult Index() { return View(); } public ActionResult FirstAjax() { return Json("chamara", JsonRequestBehavior.AllowGet); } }
<head runat="server"> <title>FirstAjax</title> <script src="http: <script src="http: <script type="text/javascript"> $(document).ready(function () { var serviceURL = $.ajax({ type: "POST", url: serviceURL, data: param = "", contentType: "application/json; charset=utf-8", dataType: "json", success: successFunc, error: errorFunc }); function successFunc(data, status) { alert(data); } function errorFunc() { alert( } }); </script> </head>
public class AjaxTestController : Controller { // [HttpGet] public ActionResult FirstAjax() { return View(); } [HttpPost] public ActionResult FirstAjax(string a) { return Json("chamara", JsonRequestBehavior.AllowGet); } }
$.ajax({ url: contentType: "application/json; charset=utf-8", dataType: "json", success: successFunc, error: errorFunc });
$.ajax({ type: "POST", url: contentType: "application/json; charset=utf-8", data: { a: "testing" }, dataType: "json", success: function() { alert( error: errorFunc });
$.ajax({ type: "POST", url: contentType: "application/json; charset=utf-8", data: { data: "yourdata" }, dataType: "json", success: function(recData) { alert( error: function() { alert( });
[HttpGet] public ActionResult FirstAjax() { Some Code--Some Code---Some Code return View(); } [HttpPost] [ActionName("FirstAjax")] public ActionResult FirstAjaxPost() { Some Code--Some Code---Some Code return View(); }
public ActionResult Index() { return View(); } public ActionResult FirstAjax(string a) { return Json("chamara", JsonRequestBehavior.AllowGet); }
<script src="http: <script type="text/javascript"> $(document).ready(function () { var a = "Test"; $.ajax({ url: "../../Home/FirstAjax", type: "GET", data: { a : a }, success: function (response) { alert(response); }, error: function (response) { alert(response); } }); }); </script>
C [HttpGet] public ActionResult FirstAjax() { return Json("chamara", JsonRequestBehavior.AllowGet); } Java Script Code if Get Request $.ajax({ url: success: function(responce){ alert(responce.data)}, error: function(responce){ alert(responce.data)} }); Java Script Code if Post Request and also [HttpGet] to [HttpPost] $.ajax({ url: type: success: function(responce){ alert(responce)}, error: function(responce){ alert(responce)} });
$.ajax({ type: cache: false, url: dataType: data: { }, error: function () { }, success: function (result) { alert("success") } });
public JsonResult Method() { return Json(new JsonResult() { Data = "Result" }, JsonRequestBehavior.AllowGet); }
protected void Application_Start() { AreaRegistration.RegisterAllAreas(); ValueProviderFactories.Factories.Add(new JsonValueProviderFactory()); }
int Value = 1; qryContent objContentLine; using (Entities db = new Entities()) { objContentLine = (from q in db.qryContents where q.LineID == Value orderby q.RowID descending select q).FirstOrDefault(); }
objContentLine = (from q in db.qryContents where q.LineID == Value orderby q.RowID descending select q).FirstOrDefault();
DataTable dt = SomeObject.ReturnsDataTable(); List<string> ls = dt.AsEnumerable().Select(dr => dr["name"].ToString()).ToList<string>();
List<string> ls = SomeObject.ReturnsDataTable().AsEnumerable().Select(dr => dr["name"].ToString()).ToList<string>();
@model ViewModels.MyViewModels.Theme @Html.LabelFor(Model.Theme.name) @foreach (var category in Model.Theme) { @Html.LabelFor(category.name) @foreach(var product in theme.Products) { @Html.LabelFor(product.name) @foreach(var order in product.Orders) { @Html.TextBoxFor(order.Quantity) @Html.TextAreaFor(order.Note) @Html.EditorFor(order.DateRequestedDeliveryFor) } } }
@for(var themeIndex = 0; themeIndex < Model.Theme.Count(); themeIndex++) { @Html.LabelFor(model => model.Theme[themeIndex]) @for(var productIndex=0; productIndex < Model.Theme[themeIndex].Products.Count(); productIndex++) { @Html.LabelFor(model=>model.Theme[themeIndex].Products[productIndex].name) @for(var orderIndex=0; orderIndex < Model.Theme[themeIndex].Products[productIndex].Orders; orderIndex++) { @Html.TextBoxFor(model => model.Theme[themeIndex].Products[productIndex].Orders[orderIndex].Quantity) @Html.TextAreaFor(model => model.Theme[themeIndex].Products[productIndex].Orders[orderIndex].Note) @Html.EditorFor(model => model.Theme[themeIndex].Products[productIndex].Orders[orderIndex].DateRequestedDeliveryFor) } } }
public static MvcHtmlString TextBoxFor<TModel, TProperty>( this HtmlHelper<TModel> htmlHelper, Expression<Func<TModel, TProperty>> expression )
@model ViewModels.MyViewModels.Theme @Html.LabelFor(Model.Theme.name) @Html.EditorFor(Model.Theme.Categories)
@model ViewModels.MyViewModels.Category @Html.LabelFor(Model.Name) @Html.EditorFor(Model.Products)
@model ViewModels.MyViewModels.Product @Html.LabelFor(Model.Name) @Html.EditorFor(Model.Orders)
@model IEnumerable<ViewModels.MyViewModels> @{ if (Model.Count() > 0) { @Html.DisplayFor(modelItem => Model.Theme.FirstOrDefault().name) @foreach (var theme in Model.Theme) { @Html.DisplayFor(modelItem => theme.name) @foreach(var product in theme.Products) { @Html.DisplayFor(modelItem => product.name) @foreach(var order in product.Orders) { @Html.TextBoxFor(modelItem => order.Quantity) @Html.TextAreaFor(modelItem => order.Note) @Html.EditorFor(modelItem => order.DateRequestedDeliveryFor) } } } }else{ <span>No Theam avaiable</span> } }
@for(int i=0;i<Model.Theme.Count;i++) { @Html.LabelFor(m=>m.Theme[i].name) @for(int j=0;j<Model.Theme[i].Products.Count;j++) ) { @Html.LabelFor(m=>m.Theme[i].Products[j].name) @for(int k=0;k<Model.Theme[i].Products[j].Orders.Count;k++) { @Html.TextBoxFor(m=>Model.Theme[i].Products[j].Orders[k].Quantity) @Html.TextAreaFor(m=>Model.Theme[i].Products[j].Orders[k].Note) @Html.EditorFor(m=>Model.Theme[i].Products[j].Orders[k].DateRequestedDeliveryFor) } } }
Uri myReferrer = Request.UrlReferrer; string actual = myReferrer.ToString();
public static string UrlReferrer(this HttpRequestMessage request) { return request.Headers.Referrer == null ? "unknown" : request.Headers.Referrer.AbsoluteUri; }
client.DefaultRequestHeaders.Referrer = new Uri(url);
string referrer = HttpContext.Current.Request.UrlReferrer.ToString();
System.Web.HttpContext.Current.Request.UrlReferrer.ToString();
<dependentAssembly> <assemblyIdentity name="System.Net.Http" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/> <bindingRedirect oldVersion="0.0.0.0-4.0.0.0" newVersion="4.0.0.0"/> </dependentAssembly>
<dependentAssembly> <assemblyIdentity name="System.Net.Http" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/> <bindingRedirect oldVersion="0.0.0.0-1.0.0.0" newVersion="2.0.0.0"/> </dependentAssembly>
<dependentAssembly> <assemblyIdentity name="System.Net.Http" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/> <bindingRedirect oldVersion="0.0.0.0-4.0.0.0" newVersion="2.0.0.0"/> </dependentAssembly>
<Reference Include="System.Data.Entity" /> <Reference Include="System.Net.Http, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"> <Private>True</Private> + <HintPath>..\..\packages\Microsoft.Net.Http.2.0.20710.0\lib\net40\System.Net.Http.dll</HintPath> </Reference> <Reference Include="System.Net.Http.WebRequest, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"> <Private>True</Private> + <HintPath>..\..\packages\Microsoft.Net.Http.2.0.20710.0\lib\net40\System.Net.Http.WebRequest.dll</HintPath> </Reference> <Reference Include="System.Numerics" /> <Reference Include="System.Security" />
<dependentAssembly> <assemblyIdentity name="System.Net.Http" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/> <bindingRedirect oldVersion="0.0.0.0-4.0.0.0" newVersion="2.0.0.0"/> <dependentAssembly>
<dependentAssembly> <assemblyIdentity name="System.Net.Http" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/> <bindingRedirect oldVersion="0.0.0.0-4.0.0.0" newVersion="2.2.15.0"/> </dependentAssembly>
<dependentAssembly> <assemblyIdentity name="System.Net.Http" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/> <bindingRedirect oldVersion="0.0.0.0-4.0.0.0" newVersion="2.0.0.0"/> <dependentAssembly>
C:\Users\tcbl\documents\visual studio 2010\Projects\ModelMonitoring\ModelMonitoring\imageProcess.aspx.cs
C:\Program Files\Common Files\Microsoft Shared\DevServer\10.0\
Server.MapPath(".") returns D:\WebApps\shop\products Server.MapPath("..") returns D:\WebApps\shop Server.MapPath("~") returns D:\WebApps\shop Server.MapPath("/") returns C:\Inetpub\wwwroot Server.MapPath("/shop") returns D:\WebApps\shop
DataTable t; t.Columns.Remove("columnName"); t.Columns.RemoveAt(columnIndex);
DataTable dt; int desiredSize = 10; while (dt.Columns.Count > desiredSize) { dt.Columns.RemoveAt(desiredSize); }
str = "{ "context_name": { "lower_bound": "value", "upper_bound": "value", "values": [ "value1", "valueN" ] } }"
using Newtonsoft.Json; dynamic json = JsonConvert.DeserializeObject(str);
string str = "{ JavaScriptSerializer j = new JavaScriptSerializer(); object a = j.Deserialize(str, typeof(object));
string output = JsonConvert.SerializeObject(jsonStr);
{ "Customer": { "id": "Shell", "Installations": [ { "id": "Shell.Bangalore", "Stations": [ { "id": "Shell.Bangalore.BTM", "Pumps": [ { "id": "Shell.Bangalore.BTM.pump1" }, { "id": "Shell.Bangalore.BTM.pump2" }, { "id": "Shell.Bangalore.BTM.pump3" } ] }, { "id": "Shell.Bangalore.Madiwala", "Pumps": [ { "id": "Shell.Bangalore.Madiwala.pump4" }, { "id": "Shell.Bangalore.Madiwala.pump5" } ] } ] } ] } }
var result = JsonConvert.DeserializeObject<Class>(responseString);
private readonly UserManager<ApplicationUser> _userManager; public ActionResult Register(RegisterViewModel model) { if (ModelState.IsValid) { var ifUserEXists = _userManager.FindByName(model.EmailId); if (ifUserEXists == null) return View(model); var confirmationToken = _userRepository.CreateConfirmationToken(); var result = _userRepository.CreateUser(model,confirmationToken); var user = _userManager.FindByName(model.EmailId); if (result) { var code = _userManager.GenerateEmailConfirmationToken(user.Id); _userRepository.SendEmailConfirmation(model.EmailId, model.FirstName, confirmationToken); return View("~/Views/Account/Thank_You_For_Registering.cshtml"); } } ModelState.AddModelError(string.Empty, Resource.AccountController_Register_Sorry__User_already_exists__please_try_again_); return View(model); }
var code = _userManager.GenerateEmailConfirmationToken(user.Id);
using Microsoft.Owin.Security.DataProtection; using Microsoft.AspNet.Identity.Owin; var provider = new DpapiDataProtectionProvider("SampleAppName"); var userManager = new UserManager<ApplicationUser>(new UserStore<ApplicationUser>()); userManager.UserTokenProvider = new DataProtectorTokenProvider<ApplicationUser>( provider.Create("SampleTokenName"));
services.AddIdentity<ApplicationUser, IdentityRole>() .AddDefaultTokenProviders();
var provider = new DpapiDataProtectionProvider("YourAppName"); UserManager.UserTokenProvider = new DataProtectorTokenProvider<User, string>(provider.Create("UserToken")) as IUserTokenProvider<User, string>;
public ActionResult Index() { var userManager = HttpContext.GetOwinContext().GetUserManager<ApplicationUserManager>(); var user = userManager.FindByName("useremail@gmail.com"); string code = userManager.GeneratePasswordResetToken(user.Id); var callbackUrl = Url.Action("ResetPassword", "Account", new { userId = user.Id, code = code }, protocol: Request.Url.Scheme); return View(); }
public ActionResult NotWorkingCode() { var provider = new DpapiDataProtectionProvider("ApplicationName"); var userManager = new ApplicationUserManager(new UserStore<ApplicationUser>(new ApplicationDbContext())); userManager.UserTokenProvider = new DataProtectorTokenProvider<ApplicationUser>(provider.Create("ASP.NET Identity")); var user = userManager.FindByName("useremail@gmail.com"); string code = userManager.GeneratePasswordResetToken(user.Id); var callbackUrl = Url.Action("ResetPassword", "Account", new { userId = user.Id, code = code }, protocol: Request.Url.Scheme); return View(); }
services.AddIdentity<ApplicationUser, IdentityRole>() .AddDefaultTokenProviders();
container.RegisterType<DbContext, ApplicationDbContext>(new HierarchicalLifetimeManager()); container.RegisterType<UserManager<ApplicationUser>>(new HierarchicalLifetimeManager()); container.RegisterType<IUserStore<ApplicationUser>, UserStore<ApplicationUser>>(new HierarchicalLifetimeManager()); container.RegisterType<AccountController>(new InjectionConstructor());
manager.RegisterTwoFactorProvider("PhoneCode", new PhoneNumberTokenProvider<ApplicationUser> { MessageFormat = "Your security code is {0}" }); manager.RegisterTwoFactorProvider("EmailCode", new EmailTokenProvider<ApplicationUser> { Subject = "Security Code", BodyFormat = "Your security code is {0}" }); manager.SmsService = new Services.SMS(); var dataProtectionProvider = options.DataProtectionProvider; if (dataProtectionProvider != null) { manager.UserTokenProvider = new DataProtectorTokenProvider<ApplicationUser>(dataProtectionProvider.Create("ASP.NET Identity")); }
using System.IO; ... string path = @"C:\MP_Upload"; if(!Directory.Exists(path)) { Directory.CreateDirectory(path); }
using System.IO; ... Directory.CreateDirectory(@"C:\MP_Upload");
if(!System.IO.Directory.Exists(@"c:\mp_upload")) { System.IO.Directory.CreateDirectory(@"c:\mp_upload"); }
if(!Directory.Exists(@"C:\MP_Upload")) { Directory.CreateDirectory(@"C:\MP_Upload"); }
using System; using System.IO; using System.Windows.Forms; namespace DirCombination { public partial class DirCombination : Form { private const string _Path = @"D:/folder1/foler2/folfer3/folder4/file.txt"; private string _finalPath = null; private string _error = null; public DirCombination() { InitializeComponent(); if (!FSParse(_Path)) Console.WriteLine(_error); else Console.WriteLine(_finalPath); } private bool FSParse(string path) { try { string[] Splited = path.Replace(@" string NewPath = Splited[0] + ":"; if (Directory.Exists(NewPath)) { string[] Paths = Splited[1].Substring(1).Split( for (int i = 0; i < Paths.Length - 1; i++) { NewPath += "/"; if (!string.IsNullOrEmpty(Paths[i])) { NewPath += Paths[i]; if (!Directory.Exists(NewPath)) Directory.CreateDirectory(NewPath); } } if (!string.IsNullOrEmpty(Paths[Paths.Length - 1])) { NewPath += "/" + Paths[Paths.Length - 1]; if (!File.Exists(NewPath)) File.Create(NewPath); } _finalPath = NewPath; return true; } else { _error = "Drive is not exists!"; return false; } } catch (Exception ex) { _error = ex.Message; return false; } } } }
String path = Server.MapPath("~/MP_Upload/"); if (!Directory.Exists(path)) { Directory.CreateDirectory(path); }
Server Error in A route named Parameter name: name Description: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code. Exception Details: System.ArgumentException: A route named Parameter name: name Source Error: Line 24: Line 25: Line 26: context.MapRoute( Line 27: "ListTables", Line 28: Source File: C:\inetpub\wwwroot\SchemaBrowserService\Website\Areas\Api\ApiAreaRegistration.cs Line: 26 Stack Trace: [ArgumentException: A route named Parameter name: name] System.Web.Routing.RouteCollection.Add(String name, RouteBase item) +2329682 System.Web.Mvc.RouteCollectionExtensions.MapRoute(RouteCollection routes, String name, String url, Object defaults, Object constraints, String[] namespaces) +236 System.Web.Mvc.AreaRegistrationContext.MapRoute(String name, String url, Object defaults, Object constraints, String[] namespaces) +59 System.Web.Mvc.AreaRegistrationContext.MapRoute(String name, String url, Object defaults) +17 SchemaBrowserService.Areas.Api.ApiAreaRegistration.RegisterArea(AreaRegistrationContext context) in C:\inetpub\wwwroot\SchemaBrowserService\Website\Areas\Api\ApiAreaRegistration.cs:26 System.Web.Mvc.AreaRegistration.CreateContextAndRegister(RouteCollection routes, Object state) +105 System.Web.Mvc.AreaRegistration.RegisterAllAreas(RouteCollection routes, IBuildManager buildManager, Object state) +199 System.Web.Mvc.AreaRegistration.RegisterAllAreas(Object state) +45 System.Web.Mvc.AreaRegistration.RegisterAllAreas() +6 Website.MvcApplication.Application_Start() in C:\Users\djackson\Downloads\RestApiMvc3\Website\Website\Global.asax.cs:35 Version Information: Microsoft .NET Framework Version:4.0.30319; ASP.NET Version:4.0.30319.272
public static void RegisterRoutes(RouteCollection routes) { routes.IgnoreRoute("{resource}.axd/{*pathInfo}"); routes.MapRoute( "Default2", "Api/{controller}/{action}/{id}", new { controller = "DataSource", action = "Index", area = "Api", id = UrlParameter.Optional } ); routes.MapRoute( "Default", "{controller}/{action}/{id}", new { controller = "Home", action = "Index", id = UrlParameter.Optional } ); } protected void Application_Start() { AreaRegistration.RegisterAllAreas(); RegisterRoutes(RouteTable.Routes); } public class ApiAreaRegistration : AreaRegistration { public override string AreaName { get { return "Api"; } } public override void RegisterArea(AreaRegistrationContext context) { context.MapRoute( "ListTables", "Api/DataSources/DataSource/{dataSourceId}/schemata/{schemaName}/tables", new { controller = "Tables", action = "TableList", schemaName = "dbo", dataSourceId = "DefaultId" } ); context.MapRoute( "Schema", "Api/DataSources/DataSource/{dataSourceId}/schemata/{schemaName}", new { controller = "Schema", action = "Schema", dataSourceId = "DefaultId", schemaName = UrlParameter.Optional } ); context.MapRoute( "SingleDataSource", "Api/DataSources/DataSource/{dataSourceId}", new { controller = "DataSource", action = "DataSource", dataSourceId = UrlParameter.Optional } ); context.MapRoute( "ListDataSources", "Api/DataSources", new { controller = "DataSource", action = "DataSourceList", dataSourceId = "DefaultId" } ); context.MapRoute( "Api_default", "Api/{controller}/{action}/{id}", new { action = "Index", id = UrlParameter.Optional } ); } }
protected void Application_Start() { AreaRegistration.RegisterAllAreas(); RouteConfig.RegisterRoutes(RouteTable.Routes); RouteConfig.RegisterRoutes(RouteTable.Routes); FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters); BundleConfig.RegisterBundles(BundleTable.Bundles); }
protected void Application_Start() { AreaRegistration.RegisterAllAreas(); RouteConfig.RegisterRoutes(RouteTable.Routes); AreaRegistration.RegisterAllAreas(); FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters); BundleConfig.RegisterBundles(BundleTable.Bundles); }
[assembly: WebActivator.PreApplicationStartMethod(typeof(Mev.Events.Web.AttributeRoutingHttpConfig), "Start")]
routes.MapRoute( name: "Default", url: "{controller}/{action}/{id}", defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional } ); routes.MapHttpRoute( name: "API", routeTemplate: "api/{controller}/{action}", defaults: new { action = "GetAgentId" } );
Image image = Image.FromFile(fileName); Image thumb = image.GetThumbnailImage(120, 120, ()=>false, IntPtr.Zero); thumb.Save(Path.ChangeExtension(fileName, "thumb"));
public void WriteImage(string path, int width, int height) { Bitmap srcBmp = new Bitmap(path); float ratio = srcBmp.Width / srcBmp.Height; SizeF newSize = new SizeF(width, height * ratio); Bitmap target = new Bitmap((int) newSize.Width,(int) newSize.Height); HttpContext.Response.Clear(); HttpContext.Response.ContentType = "image/jpeg"; using (Graphics graphics = Graphics.FromImage(target)) { graphics.CompositingQuality = CompositingQuality.HighSpeed; graphics.InterpolationMode = InterpolationMode.HighQualityBicubic; graphics.CompositingMode = CompositingMode.SourceCopy; graphics.DrawImage(srcBmp, 0, 0, newSize.Width, newSize.Height); using (MemoryStream memoryStream = new MemoryStream()) { target.Save(memoryStream, ImageFormat.Jpeg); memoryStream.WriteTo(HttpContext.Response.OutputStream); } } Response.End(); }
using System; using System.Drawing; using System.Drawing.Drawing2D; using System.Drawing.Imaging; using System.IO; float imageResolution = 72; long compressionLevel = 80L; public Image resizeImage(Image image, int maxWidth, int maxHeight, bool padImage) { int newWidth; int newHeight; foreach (var prop in image.PropertyItems) { if (prop.Id == 0x0112) { int orientationValue = image.GetPropertyItem(prop.Id).Value[0]; RotateFlipType rotateFlipType = getRotateFlipType(orientationValue); image.RotateFlip(rotateFlipType); break; } } if (padImage == true) { image = applyPaddingToImage(image, Color.Red); } if (image.Width > maxWidth || image.Height > maxHeight) { double ratioX = (double)maxWidth / image.Width; double ratioY = (double)maxHeight / image.Height; double ratio = Math.Min(ratioX, ratioY); newWidth = (int)(image.Width * ratio); newHeight = (int)(image.Height * ratio); } else { newWidth = image.Width; newHeight = image.Height; } Bitmap newImage = new Bitmap(newWidth, newHeight); newImage.SetResolution(imageResolution, imageResolution); using (var graphics = Graphics.FromImage(newImage)) { graphics.CompositingMode = CompositingMode.SourceCopy; graphics.CompositingQuality = CompositingQuality.HighQuality; graphics.SmoothingMode = SmoothingMode.HighQuality; graphics.InterpolationMode = InterpolationMode.HighQualityBicubic; graphics.PixelOffsetMode = PixelOffsetMode.HighQuality; graphics.DrawImage(image, 0, 0, newWidth, newHeight); } using (MemoryStream ms = new MemoryStream()) { EncoderParameters encoderParameters = new EncoderParameters(1); encoderParameters.Param[0] = new EncoderParameter(Encoder.Quality, compressionLevel); newImage.Save(ms, getEncoderInfo("image/jpeg"), encoderParameters); } return newImage; } public Image applyPaddingToImage(Image image, Color backColor) { int maxSize = Math.Max(image.Height, image.Width); Size squareSize = new Size(maxSize, maxSize); Bitmap squareImage = new Bitmap(squareSize.Width, squareSize.Height); using (Graphics graphics = Graphics.FromImage(squareImage)) { graphics.FillRectangle(new SolidBrush(backColor), 0, 0, squareSize.Width, squareSize.Height); graphics.DrawImage(image, (squareSize.Width / 2) - (image.Width / 2), (squareSize.Height / 2) - (image.Height / 2), image.Width, image.Height); } return squareImage; } private ImageCodecInfo getEncoderInfo(string mimeType) { ImageCodecInfo[] encoders = ImageCodecInfo.GetImageEncoders(); for (int j = 0; j < encoders.Length; ++j) { if (encoders[j].MimeType.ToLower() == mimeType.ToLower()) { return encoders[j]; } } return null; } private RotateFlipType getRotateFlipType(int rotateValue) { RotateFlipType flipType = RotateFlipType.RotateNoneFlipNone; switch (rotateValue) { case 1: flipType = RotateFlipType.RotateNoneFlipNone; break; case 2: flipType = RotateFlipType.RotateNoneFlipX; break; case 3: flipType = RotateFlipType.Rotate180FlipNone; break; case 4: flipType = RotateFlipType.Rotate180FlipX; break; case 5: flipType = RotateFlipType.Rotate90FlipX; break; case 6: flipType = RotateFlipType.Rotate90FlipNone; break; case 7: flipType = RotateFlipType.Rotate270FlipX; break; case 8: flipType = RotateFlipType.Rotate270FlipNone; break; default: flipType = RotateFlipType.RotateNoneFlipNone; break; } return flipType; } public string convertImageToBase64(Image image) { using (MemoryStream ms = new MemoryStream()) { image.Save(ms, ImageFormat.Jpeg); byte[] bin = ms.ToArray(); return Convert.ToBase64String(bin); } }
protected void Button1_Click(object sender, EventArgs e) { if (FileUpload1.HasFile == false) { return; } using (Bitmap bitmap = new Bitmap(FileUpload1.PostedFile.InputStream)) { try { Image image = resizeImage(bitmap, 256, 256, true); Label1.Text = "<img src=\"data:image/jpg;base64," + convertImageToBase64(image) + "\">"; } catch (Exception ex) { Label1.Text = "Oops! There was an error when resizing the Image.<br>Error: " + ex.Message; } } }
protected void Button1_Click(object sender, EventArgs e) { System.Drawing.Image img = System.Drawing.Image.FromFile(Server.MapPath("~/profile/Avatar.jpg")); double imgHeight = img.Size.Height; double imgWidth = img.Size.Width; double x = imgWidth / 200; int newWidth = Convert.ToInt32(imgWidth / x); int newHeight = Convert.ToInt32(imgHeight / x); System.Drawing.Image.GetThumbnailImageAbort myCallback = new System.Drawing.Image.GetThumbnailImageAbort(ThumbnailCallback); System.Drawing.Image myThumbnail = img.GetThumbnailImage(newWidth, newHeight, myCallback, IntPtr.Zero); myThumbnail.Save(Server.MapPath("~/profile/NewImage.jpg")); } public bool ThumbnailCallback() { return false; }
testSpace.Style = "display:none;" testSpace.Style("display") = "none";
testSpace.Attributes.Add("style", "text-align: center;");
testSpace.Attributes["style"] = "text-align: center;";
testSpace.Style["background-image"] = "url(images/foo.png)";
public string GetCustomerNumber(Guid id) { string accountNumber = (string)DBSqlHelperFactory.ExecuteScalar(connectionStringSplendidmyApp, CommandType.StoredProcedure, "GetCustomerNumber", new SqlParameter("@id", id)); return accountNumber.ToString(); }
public string GetCustomerNumber(Guid id) { object accountNumber = (object)DBSqlHelperFactory.ExecuteScalar(connectionStringSplendidCRM, CommandType.StoredProcedure, "spx_GetCustomerNumber", new SqlParameter("@id", id)); if (accountNumber is System.DBNull) { return string.Empty; } else { return accountNumber.ToString(); } }
return (accountNumber == DBNull.Value) ? string.Empty : accountNumber.ToString()
return (accountNumber == null) ? string.Empty : accountNumber.ToString()
public static T ConvertFromDBVal<T>(object obj) { if (obj == null || obj == DBNull.Value) { return default(T); } else { return (T)obj; } }
object accountNumber = ...ExecuteScalar(...); return (accountNumber == null) ? String.Empty : accountNumber.ToString();
object accountNumber = ...ExecuteScalar(...); return (accountNumber == null || Convert.IsDBNull(accountNumber) ? (int) accountNumber : 0;
string accountNumber = (string) ... ExecuteScalar(...);
public static T ConvertDBNull<T>(object value, Func<object, T> conversionFunction) { return conversionFunction(value == DBNull.Value ? null : value); }
var result = command.ExecuteScalar(); return result.ConvertDBNull(Convert.ToInt32);
return command .ExecuteScalar() .ConvertDBNull(Convert.ToInt32);
string accountNumber = DBSqlHelperFactory.ExecuteScalar(...) as string;
public string GetCustomerNumber(Guid id) { object accountNumber = (object)DBSqlHelperFactory.ExecuteScalar(connectionStringSplendidCRM, CommandType.StoredProcedure, "spx_GetCustomerNumber", new SqlParameter("@id", id)); return String.Concat(accountNumber); }
public static class Extensions { public String TrimString(this object item) { return String.Format("{0}", item).Trim(); } }
public string GetCustomerNumber(Guid id) { var obj = DBSqlHelperFactory.ExecuteScalar( connectionStringSplendidmyApp, CommandType.StoredProcedure, "GetCustomerNumber", new SqlParameter("@id", id) ); return obj.TrimString(); }
HttpConfiguration config = new HttpConfiguration(); config.Formatters.XmlFormatter.SupportedMediaTypes.Remove(appXmlType); config.Formatters.JsonFormatter.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore;
public IEnumerable<User> GetAll() { using (Database db = new Database()) { return db.Users.ToList(); } }
public class UserModel { public string Name {get;set;} public string Age {get;set;} }
GlobalConfiguration.Configuration.Formatters.JsonFormatter.SerializerSettings .ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore; GlobalConfiguration.Configuration.Formatters .Remove(GlobalConfiguration.Configuration.Formatters.XmlFormatter);
public DbContext() : base("name=ConnectionStringNameFromWebConfig") { this.Configuration.LazyLoadingEnabled = false; this.Configuration.ProxyCreationEnabled = false; }
GlobalConfiguration.Configuration.Formatters.JsonFormatter.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize; GlobalConfiguration.Configuration.Formatters.Remove(GlobalConfiguration.Configuration.Formatters.XmlFormatter);
public class UserController : ApiController { Database db = new Database(); public UserController() { db.Configuration.ProxyCreationEnabled = false; } public IEnumerable<User> GetAll() { return db.Users.ToList(); } }
var listOfUsers = db.Users.Select(r => new UserModel { userModel.FirstName = r.FirstName; userModel.LastName = r.LastName; }); return listOfUsers.ToList();
var listOfUsers = db.Users.Select(r => new { FirstName = r.FirstName; LastName = r.LastName; }); return listOfUsers.ToList();
public HttpResponseMessage Get() { var item = new List<dynamic> { new TestClass { Name = "Ale", Age = 30 } }; return Request.CreateResponse(HttpStatusCode.OK, item); } public class TestClass { public string Name { get; set; } public int Age { get; set; } }
[KnownTypeAttribute(typeof(TestClass))] public class TestClass { public string Name { get; set; } public int Age { get; set; } }
var json = config.Formatters.JsonFormatter; json.SerializerSettings.PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.Objects; config.Formatters.Remove(config.Formatters.XmlFormatter);
config.Formatters.JsonFormatter.SupportedMediaTypes.Add(new MediaTypeHeaderValue("text/html"));
public IEnumerable<User> GetAll() { using (Database db = new Database()) { var users = AutoMapper.Mapper.DynamicMap<List<User>>(db.Users); return users; } }
public class UserInformation { public string Name { get; set; } public int Age { get; set; } public UserInformation(UserEntity user) { this.Name = user.name; this.Age = user.age; } }
public class MyDbContext : DbContext { public MyDbContext() { this.Configuration.ProxyCreationEnabled = false; } }
public class MyDbContext : DbContext { public MyDbContext() { this.Configuration.LazyLoadingEnabled = false; } }
[KnownType(typeof(SomeSubRootType))] public partial class SomeRootStructureType
using (var conn = new SqlConnection("...")) { conn.Open(); }
var conn; try { conn = new SqlConnection("..."); conn.Open(); } finally { conn.Dispose(); }
var registrationService = new RegistrationService(new RegistrationRepository(), new LicenseRepository(), new GodOnlyKnowsWhatElseThatServiceNeeds());
var registrationService = IoC.Resolve<IRegistrationService>();
public class ServiceImpl { public ServiceImpl(IRepo1 repo1, IRepo2 repo2...) { } }
public abstract class ReadOnlyRepository<T,V> { V Find(T lookupKey); } public abstract class InsertRepository<T> { void Add(T entityToSave); } public abstract class UpdateRepository<T,V> { V Update(T entityToUpdate); } public abstract class DeleteRepository<T> { void Delete(T entityToDelete); }
public class RegistrationRepository: ReadOnlyRepository<int, IRegistrationItem>, ReadOnlyRepository<string, IRegistrationItem>
using System; using System.Collections.Generic; using System.Linq; using System.Text; namespace MvcRepository { public class Repository<T> : IRepository<T> where T : class { protected System.Data.Linq.DataContext _dataContextFactory; public IQueryable<T> All() { return GetTable.AsQueryable(); } public IQueryable<T> FindAll(Func<T, bool> exp) { return GetTable.Where<T>(exp).AsQueryable(); } public T Single(Func<T, bool> exp) { return GetTable.Single(exp); } public virtual void MarkForDeletion(T entity) { _dataContextFactory.GetTable<T>().DeleteOnSubmit(entity); } public virtual T CreateInstance() { T entity = Activator.CreateInstance<T>(); GetTable.InsertOnSubmit(entity); return entity; } public void SaveAll() { _dataContextFactory.SubmitChanges(); } public Repository(System.Data.Linq.DataContext dataContextFactory) { _dataContextFactory = dataContextFactory; } public System.Data.Linq.Table<T> GetTable { get { return _dataContextFactory.GetTable<T>(); } } } }
public class AdminRepository<T> : Repository<T> where T: class { static AdminDataContext dc = new AdminDataContext(System.Configuration.ConfigurationManager.ConnectionStrings["MY_ConnectionString"].ConnectionString); public AdminRepository() : base( dc ) { }
PrincipalContext ctx = new PrincipalContext(ContextType.Domain, "YOURDOMAIN");
using (var context = new PrincipalContext(ContextType.Domain, "yourdomain.com")) { using (var searcher = new PrincipalSearcher(new UserPrincipal(context))) { foreach (var result in searcher.FindAll()) { DirectoryEntry de = result.GetUnderlyingObject() as DirectoryEntry; Console.WriteLine("First Name: " + de.Properties["givenName"].Value); Console.WriteLine("Last Name : " + de.Properties["sn"].Value); Console.WriteLine("SAM account name : " + de.Properties["samAccountName"].Value); Console.WriteLine("User principal name: " + de.Properties["userPrincipalName"].Value); Console.WriteLine(); } } } Console.ReadLine();
UserPrincipal userPrin = new UserPrincipal(context); userPrin.Enabled = true;
using (var searcher = new PrincipalSearcher(new UserPrincipal(new PrincipalContext(ContextType.Domain, Environment.UserDomainName)))) { List<UserPrincipal> users = searcher.FindAll().Select(u => (UserPrincipal)u).ToList(); foreach(var u in users) { DirectoryEntry d = (DirectoryEntry)u.GetUnderlyingObject(); Console.WriteLine(d.Properties["GivenName"]?.Value?.ToString() + d.Properties["sn"]?.Value?.ToString()); } }
DirectoryEntry directoryEntry = new DirectoryEntry("WinNT: string userNames="Users: "; foreach (DirectoryEntry child in directoryEntry.Children) { if (child.SchemaClassName == "User") { userNames += child.Name + Environment.NewLine ; } } MessageBox.Show(userNames);
Date today = Date.Today; Date yesterday = Date.Today.AddDays(-1); Date independenceDay = Date.Parse("2013-07-04"); independenceDay.ToLongString(); independenceDay.ToShortString(); independenceDay.ToString(); independenceDay.ToString("s"); int july = independenceDay.Month;
public class Date:IEquatable<Date>,IEquatable<DateTime> { public Date(DateTime date) { value = date.Date; } public bool Equals(Date other) { return other != null && value.Equals(other.value); } public bool Equals(DateTime other) { return value.Equals(other); } public override string ToString() { return value.ToString(); } public static implicit operator DateTime(Date date) { return date.value; } public static explicit operator Date(DateTime dateTime) { return new Date(dateTime); } private DateTime value; }
public static void Main() { System.DateTime _Now = DateAndTime.Now; Console.WriteLine("The Date and Time is " + _Now); Console.WriteLine("The Date Only is " + _Now.Date); Console.Write("Press any key to continue . . . "); Console.ReadKey(true); }
public class AsOfdates { public string DisplayDate { get; set; } private DateTime TheDate; public DateTime DateValue { get { return TheDate.Date; } set { TheDate = value; } } }
DateTime.Now.ToLongDateString(); DateTime.Now.ToShortDateString();
string hex = " Color _color = System.Drawing.ColorTranslator.FromHtml(hex);
var color = System.Drawing.ColorTranslator.FromHtml("
var color = (Color)ColorConverter.ConvertFromString("
Color c = Color.FromArgb(int.Parse(" System.Globalization.NumberStyles.AllowHexSpecifier));
========== Build: 0 succeeded or up-to-date, 1 failed, 0 skipped ==========
private IWebBase FindWebBase() { if (HttpContext.Current as IWebBase != null) { return (IWebBase)HttpContext.Current.; } throw new NotImplementedException("Crawling for IWebBase not implemented yet"); }
Page page = HttpContext.Current.Handler as Page; if (page != null) { }
public class ActivityResult { public String code; public int indexValue; public int primaryCodeReference; }
[HttpPost] public HttpResponseMessage Post(ActivityResult ar) { return new HttpResponseMessage(HttpStatusCode.OK); }
{"code":"XXX-542","indexValue":"3","primaryCodeReference":"7"}
{ "Message": "The request entity "ExceptionMessage": "No MediaTypeFormatter is available to read an object of type "ExceptionType": "System.Net.Http.UnsupportedMediaTypeException", "StackTrace": " in System.Net.Http.HttpContentExtensions.ReadAsAsync[T](HttpContent content, Type type, IEnumerable`1 formatters, IFormatterLogger formatterLogger, CancellationToken cancellationToken)\r\n in System.Net.Http.HttpContentExtensions.ReadAsAsync(HttpContent content, Type type, IEnumerable`1 formatters, IFormatterLogger formatterLogger, CancellationToken cancellationToken)\r\n in System.Web.Http.ModelBinding.FormatterParameterBinding.ReadContentAsync(HttpRequestMessage request, Type type, IEnumerable`1 formatters, IFormatterLogger formatterLogger, CancellationToken cancellationToken)" }
[HttpPost] public HttpResponseMessage Post([FromBody]ActivityResult ar) { return new HttpResponseMessage(HttpStatusCode.OK); }
<add name="Access-Control-Allow-Origin" value="http:
<add name="Access-Control-Allow-Origin" value="http:
<add name="Access-Control-Allow-Origin" value="http:
<add name="Access-Control-Allow-Origin" value="http: <add name="Access-Control-Allow-Origin" value="http:
if (ValidateRequest()) { Response.Headers.Remove("Access-Control-Allow-Origin"); Response.AddHeader("Access-Control-Allow-Origin", Request.UrlReferrer.GetLeftPart(UriPartial.Authority)); Response.Headers.Remove("Access-Control-Allow-Credentials"); Response.AddHeader("Access-Control-Allow-Credentials", "true"); Response.Headers.Remove("Access-Control-Allow-Methods"); Response.AddHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS"); }
<system.webServer> <httpProtocol> <customHeaders> <add name="Access-Control-Allow-Headers" value="Origin, X-Requested-With, Content-Type, Accept" /> <add name="Access-Control-Allow-Methods" value="POST,GET,OPTIONS,PUT,DELETE" /> </customHeaders> </httpProtocol> <rewrite> <outboundRules> <clear /> <rule name="AddCrossDomainHeader"> <match serverVariable="RESPONSE_Access_Control_Allow_Origin" pattern=".*" /> <conditions logicalGrouping="MatchAll" trackAllCaptures="true"> <add input="{HTTP_ORIGIN}" pattern="(http(s)?: </conditions> <action type="Rewrite" value="{C:0}" /> </rule> </outboundRules> </rewrite> </system.webServer>
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public class EnableCorsAttribute : FilterAttribute, IActionFilter { private const string IncomingOriginHeader = "Origin"; private const string OutgoingOriginHeader = "Access-Control-Allow-Origin"; private const string OutgoingMethodsHeader = "Access-Control-Allow-Methods"; private const string OutgoingAgeHeader = "Access-Control-Max-Age"; public void OnActionExecuted(ActionExecutedContext filterContext) { } public void OnActionExecuting(ActionExecutingContext filterContext) { var isLocal = filterContext.HttpContext.Request.IsLocal; var originHeader = filterContext.HttpContext.Request.Headers.Get(IncomingOriginHeader); var response = filterContext.HttpContext.Response; if (!String.IsNullOrWhiteSpace(originHeader) && (isLocal || IsAllowedOrigin(originHeader))) { response.AddHeader(OutgoingOriginHeader, originHeader); response.AddHeader(OutgoingMethodsHeader, "GET,POST,OPTIONS"); response.AddHeader(OutgoingAgeHeader, "3600"); } } protected bool IsAllowedOrigin(string origin) { return true; } }
[EnableCors] public class SecurityController : Controller { [EnableCors] public ActionResult SignIn(Guid key, string email, string password) {
protected void Application_Start() { GlobalFilters.Filters.Add(new EnableCorsAttribute()); RegisterGlobalFilters(GlobalFilters.Filters); }
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = false)] public class EnableCorsByAppSettingAttribute : Attribute, ICorsPolicyProvider { const string defaultKey = "whiteListDomainCors"; private readonly string rawOrigins; private CorsPolicy corsPolicy; public EnableCorsByAppSettingAttribute() : this(defaultKey) { } public EnableCorsByAppSettingAttribute(string appSettingKey) { this.rawOrigins = AppSettings.whiteListDomainCors; this.BuildCorsPolicy(); } private void BuildCorsPolicy() { bool allowAnyHeader = String.IsNullOrEmpty(this.Headers) || this.Headers == "*"; bool allowAnyMethod = String.IsNullOrEmpty(this.Methods) || this.Methods == "*"; this.corsPolicy = new CorsPolicy { AllowAnyHeader = allowAnyHeader, AllowAnyMethod = allowAnyMethod, }; this.corsPolicy.Origins.AddCommaSeperatedValues(this.rawOrigins); this.corsPolicy.Headers.AddCommaSeperatedValues(this.Headers); this.corsPolicy.Methods.AddCommaSeperatedValues(this.Methods); } public string Headers { get; set; } public string Methods { get; set; } public Task<CorsPolicy> GetCorsPolicyAsync(HttpRequestMessage request, CancellationToken cancellationToken) { return Task.FromResult(this.corsPolicy); } } internal static class CollectionExtensions { public static void AddCommaSeperatedValues(this ICollection<string> current, string raw) { if (current == null) { return; } var paths = new List<string>(AppSettings.whiteListDomainCors.Split(new char[] { foreach (var value in paths) { current.Add(value); } } }
string origin = WebOperationContext.Current.IncomingRequest.Headers.Get("Origin"); WebOperationContext.Current.OutgoingResponse.Headers.Add("Access-Control-Allow-Origin", origin);
return new CorsOptions { PolicyProvider = new CorsPolicyProvider { PolicyResolver = context => { var policy = new CorsPolicy() { AllowAnyOrigin = false, AllowAnyMethod = true, AllowAnyHeader = true, SupportsCredentials = true }; policy.Origins.Add("http: policy.Origins.Add("http: return Task.FromResult(policy); } } };
HttpContext.Current.Response.AddHeader("Access-Control-Allow-Origin","*"); if (HttpContext.Current.Request.HttpMethod == "OPTIONS") { HttpContext.Current.Response.AddHeader("Access-Control-Allow-Methods", "POST,GET,OPTIONS,PUT,DELETE"); HttpContext.Current.Response.AddHeader("Access-Control-Allow-Headers", "Content-Type, Authorization, Accept"); HttpContext.Current.Response.End(); }
@Html.Partial("~/Views/Controller/View.cshtml", model)
@model IEnumerable<ArtSchoolProject.Models.Trainer> @{ ViewBag.Title = "Index"; Layout = "~/Views/Shared/_PageLayout.cshtml"; } <h2>Index</h2> <p> @Html.ActionLink("Create New", "Create") </p> <ul class="trainers"> @foreach (var item in Model) { <li> <div> <div class="left"> <a href="@Url.Action("Details", "Details", new { id = item.ID })"> <img src="~/Images/Trainer/@item.Picture" /> </a> </div> <div class="right"> @Html.ActionLink(item.Name,"Details",new {id=item.ID}) <br /> @Html.DisplayFor(modelItem=>@string. item.Description.ToString().Substring(0,100)) </div> </div> </li> } </ul>
@Html.DisplayFor(modelItem=>item.Description.ToString().Substring(0,100))
@{ string parameterValue = item.Description.ToString().Substring(0, 100); } @Html.DisplayFor(modelItem=>parameterValue)
@foreach (var item in Model) { <li> <div> <div class="left"> <a href="@Url.Action("Details", "Details", new { id = item.ID })"> <img src="~/Images/Trainer/@item.Picture" /> </a> </div> <div class="right"> @Html.ActionLink(item.Name,"Details",new {id=item.ID}) <br /> @{ string parameterValue = item.Description.ToString().Substring(0, 100); } @Html.DisplayFor(modelItem=>parameterValue) </div> </div> </li> }
@foreach (var item in Model) { @Html.DisplayFor(m => !item.IsIdle, "BoolIcon") }
@foreach (var item in Model) { var active = !item.IsIdle; @Html.DisplayFor(m => active , "BoolIcon") }
class TrainerViewModel { private Trainer _trainer; public string ShortDescription { get { return _trainer.Description.ToString().Substring(0, 100); } } public TrainerViewModel(Trainer trainer) { _trainer = trainer; } }
@Html.DisplayFor(model => model.EndDate.Value.ToShortDateString())
Could not load file or assembly Culture=neutral, PublicKeyToken=2780ccd10d57b246 The system cannot find the file specified
Assembly manager loaded from: C:\Windows\Microsoft.NET\Framework\v4.0.30319\clr.dll Running under executable C:\Windows\SysWOW64\inetsrv\w3wp.exe --- A detailed error log follows. === Pre-bind state information === LOG: User = notebook\Guilherme LOG: DisplayName = DotNetOpenAuth.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=2780ccd10d57b246 (Fully-specified) LOG: Appbase = file: LOG: Initial PrivatePath = C:\Users\Guilherme\Documents\Visual Studio 2012\Projects\Gedi\Gedi\bin Calling assembly : Microsoft.Web.WebPages.OAuth, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35. === LOG: This bind starts in default load context. LOG: Using application configuration file: C:\Users\Guilherme\Documents\Visual Studio 2012\Projects\Gedi\Gedi\web.config LOG: Using host configuration file: C:\Windows\Microsoft.NET\Framework\v4.0.30319\aspnet.config LOG: Using machine configuration file from C:\Windows\Microsoft.NET\Framework\v4.0.30319\config\machine.config. LOG: Post-policy reference: DotNetOpenAuth.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=2780ccd10d57b246 LOG: Attempting download of new URL file: LOG: Attempting download of new URL file: LOG: Attempting download of new URL file: LOG: Attempting download of new URL file: LOG: Attempting download of new URL file: LOG: Attempting download of new URL file: LOG: Attempting download of new URL file: LOG: Attempting download of new URL file:
<packages> <package id="AutoMapper" version="2.2.0" targetFramework="net45" /> <package id="EntityFramework" version="5.0.0" targetFramework="net45" /> <package id="jQuery" version="1.7.1.1" targetFramework="net45" /> <package id="jQuery.UI.Combined" version="1.8.20.1" targetFramework="net45" /> <package id="jQuery.Validation" version="1.9.0.1" targetFramework="net45" /> <package id="knockoutjs" version="2.1.0" targetFramework="net45" /> <package id="Microsoft.AspNet.Mvc" version="4.0.20710.0" targetFramework="net45" /> <package id="Microsoft.AspNet.Razor" version="2.0.20710.0" targetFramework="net45" /> <package id="Microsoft.AspNet.Web.Optimization" version="1.0.0" targetFramework="net45" /> <package id="Microsoft.AspNet.WebApi" version="4.0.20710.0" targetFramework="net45" /> <package id="Microsoft.AspNet.WebApi.Client" version="4.0.20710.0" targetFramework="net45" /> <package id="Microsoft.AspNet.WebApi.Core" version="4.0.20710.0" targetFramework="net45" /> <package id="Microsoft.AspNet.WebApi.WebHost" version="4.0.20710.0" targetFramework="net45" /> <package id="Microsoft.AspNet.WebPages" version="2.0.20710.0" targetFramework="net45" /> <package id="Microsoft.AspNet.WebPages.Data" version="2.0.20710.0" targetFramework="net45" /> <package id="Microsoft.AspNet.WebPages.WebData" version="2.0.20710.0" targetFramework="net45" /> <package id="Microsoft.jQuery.Unobtrusive.Ajax" version="2.0.20710.0" targetFramework="net45" /> <package id="Microsoft.jQuery.Unobtrusive.Validation" version="2.0.20710.0" targetFramework="net45" /> <package id="Microsoft.Net.Http" version="2.0.20710.0" targetFramework="net45" /> <package id="Microsoft.Web.Infrastructure" version="1.0.0.0" targetFramework="net45" /> <package id="Modernizr" version="2.5.3" targetFramework="net45" /> <package id="Newtonsoft.Json" version="4.5.11" targetFramework="net45" /> <package id="Repository" version="1.0.2.12" targetFramework="net45" /> <package id="RestSharp" version="103.4" targetFramework="net45" /> <package id="WebGrease" version="1.1.0" targetFramework="net45" /> </packages>
<dependentAssembly> <assemblyIdentity name="DotNetOpenAuth.AspNet" publicKeyToken="2780ccd10d57b246" culture="neutral" /> <bindingRedirect oldVersion="0.0.0.0-4.3.0.0" newVersion="4.3.0.0" /> </dependentAssembly> <dependentAssembly> <assemblyIdentity name="DotNetOpenAuth.Core" publicKeyToken="2780ccd10d57b246" culture="neutral" /> <bindingRedirect oldVersion="0.0.0.0-4.3.0.0" newVersion="4.3.0.0" /> </dependentAssembly>
Uninstall-Package Microsoft.AspNet.WebPages.OAuth Uninstall-Package DotNetOpenAuth.AspNet Uninstall-Package DotNetOpenAuth.OpenId.RelyingParty Uninstall-Package DotNetOpenAuth.OpenId.Core Uninstall-Package DotNetOpenAuth.OAuth.Consumer Uninstall-Package DotNetOpenAuth.OAuth.Core Uninstall-Package DotNetOpenAuth.core
install-Package DotNetOpenAuth.AspNet install-Package Microsoft.AspNet.WebPages.OAuth install-Package DotNetOpenAuth.OpenId.RelyingParty install-Package DotNetOpenAuth.OpenId.Core install-Package DotNetOpenAuth.OAuth.Consumer install-Package DotNetOpenAuth.OAuth.Core install-Package DotNetOpenAuth.core
<PropertyGroup> <PostSharpHostConfigurationFile>web.config</PostSharpHostConfigurationFile> </PropertyGroup>
<dependentAssembly> <assemblyIdentity name="DotNetOpenAuth.Core" publicKeyToken="2780ccd10d57b246" /> <bindingRedirect oldVersion="1.0.0.0-4.1.0.0" newVersion="4.1.0.0" /> </dependentAssembly>
BundleTable.Bundles.Remove(BundleTable.Bundles.GetBundleFor(bundleAlias)); var bundle = new ScriptBundle(bundleAlias); foreach (var item in dependencies) { bundle.Include(item.Path); } BundleTable.Bundles.Add(bundle); var bundleUrl = BundleTable.Bundles.ResolveBundleUrl(bundleAlias);
public class BundleConfig { public static void RegisterBundles(BundleCollection bundles) { BundleTable.EnableOptimizations = true; bundles.Add(...); } }
public class BundleConfig { public static void RegisterBundles(BundleCollection bundles) { bundles.Clear(); bundles.ResetAll(); BundleTable.EnableOptimizations = false; bundles.Add(...); } }
BundleTable.Bundles.ResetAll(); var bundle = new Bundle("~/bundles/your-bundle-virtual-path"); var context = new BundleContext(new HttpContextWrapper(HttpContext.Current), BundleTable.Bundles, bundle.Path); bundle.UpdateCache(context, bundle.GenerateBundleResponse(context)); BundleTable.Bundles.Add(bundle);
@Scripts.Render("~/bundles/your-bundle-virtual-path")
public static IHtmlString RenderStyleBundle(string bundlePath, string[] filePaths) { bundlePath = string.Format("{0}{1}", bundlePath, GetBundleHashForFiles(filePaths)); var bundleIsRegistered = BundleTable .Bundles .GetRegisteredBundles() .Where(bundle => bundle.Path == bundlePath) .Any(); if(!bundleIsRegistered) { var bundle = new StyleBundle(bundlePath); bundle.Include(filePaths); BundleTable.Bundles.Add(bundle); } return Styles.Render(bundlePath); } static string GetBundleHashForFiles(IEnumerable<string> filePaths) { var aggregatedPaths = filePaths.Aggregate((pathString, next) => pathString + next); var Md5 = MD5.Create(); var encodedPaths = Encoding.UTF8.GetBytes(aggregatedPaths); var hash = Md5.ComputeHash(encodedPaths); var bundlePath = hash.Aggregate(string.Empty, (hashString, next) => string.Format("{0}{1:x2}", hashString, next)); return bundlePath; }
public override IEnumerable<System.IO.FileInfo> EnumerateFiles(BundleContext context)
BundleTable.Bundles.Add(new StyleBundle("~/bundles/styles.min.css").Include( "~/css/main.css" ));
<link rel="stylesheet" href="~/bundles/styles.min.css" />
List<Phone> phones = PhoneRepository.GetPhoneNumberByUserId(userId); phones[0].Number = “911”; PhoneRepository.Update(phones[0]);
List<Phone> phones = UserRepository.GetPhoneNumbers(userId); User user = UserRepository.GetUserWithPhoneNumbers(userId);
UserRepository.Update(user); UserRepository.UpdatePhone(phone);
public class UserRepository : GenericRepository<User> { IEnumerable<User> GetUserByCustomCriteria() { } User GetUserDetailsWithPhones() { } User GetUserDetailsWithAllSubInfo() { } }
static void updateNumber(int userId, string oldNumber, string newNumber) { using (MyContext uow = new MyContext()) { DbSet<User> repo = uow.Users; User user = repo.Find(userId); Phone oldPhone = user.Phones.Where(x => x.Number.Trim() == oldNumber).SingleOrDefault(); oldPhone.Number = newNumber; uow.SaveChanges(); } }
<appSettings> <add key="webpages:Version" value="1.0.0.0"/> </appSettings>
<runtime><!-- Should be there by default, near end --> <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1"><!-- Should be there by default --> <dependentAssembly>..</dependentAssembly><!-- Should be there by default --> ... some other dependecy redirects ... <dependentAssembly> <assemblyIdentity name="System.Web.WebPages.Razor" publicKeyToken="31bf3856ad364e35" /> <bindingRedirect oldVersion="1.0.0.0" newVersion="2.0.0.0"/> </dependentAssembly> ... some other dependency redirects ... </assemblyBinding> </runtime>
<sectionGroup name="system.web.webPages.razor" type="System.Web.WebPages.Razor.Configuration.RazorWebSectionGroup, System.Web.WebPages.Razor, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"> <section name="host" type="System.Web.WebPages.Razor.Configuration.HostSection, System.Web.WebPages.Razor, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" /> <section name="pages" type="System.Web.WebPages.Razor.Configuration.RazorPagesSection, System.Web.WebPages.Razor, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" /> </sectionGroup>
<appSettings> <add key="webpages:Enabled" value="false" /> </appSettings>
new_passwd_expire = now() + some number of days new_passwd_id = some random string of characters (see below)
<add key="AllowedHosts" value="example.com,example2.com" />
[Route("RequestResetPasswordToken/{email}/")] [HttpGet] [AllowAnonymous] public async Task<IHttpActionResult> GetResetPasswordToken([FromUri]string email) { if (!ModelState.IsValid) return BadRequest(ModelState); var user = await UserManager.FindByEmailAsync(email); if (user == null) { Logger.Warn("Password reset token requested for non existing email"); return NoContent(); } if (!ConfigurationManager.AppSettings["AllowedHosts"].Split( Logger.Warn($"Non allowed host detected for password reset {Request.RequestUri.Scheme}: return BadRequest(); } Logger.Info("Creating password reset token for user id {0}", user.Id); var host = $"{Request.RequestUri.Scheme}: var token = await UserManager.GeneratePasswordResetTokenAsync(user.Id); var callbackUrl = $"{host}/resetPassword/{HttpContext.Current.Server.UrlEncode(user.Email)}/{HttpContext.Current.Server.UrlEncode(token)}"; var subject = "Client - Password reset."; var body = "<html><body>" + "<h2>Password reset</h2>" + $"<p>Hi {user.FullName}, <a href=\"{callbackUrl}\"> please click this link to reset your password </a></p>" + "</body></html>"; var message = new IdentityMessage { Body = body, Destination = user.Email, Subject = subject }; await UserManager.EmailService.SendAsync(message); return NoContent(); } [HttpPost] [Route("ResetPassword/")] [AllowAnonymous] public async Task<IHttpActionResult> ResetPasswordAsync(ResetPasswordRequestModel model) { if (!ModelState.IsValid) return NoContent(); var user = await UserManager.FindByEmailAsync(model.Email); if (user == null) { Logger.Warn("Reset password request for non existing email"); return NoContent(); } if (!await UserManager.UserTokenProvider.ValidateAsync("ResetPassword", model.Token, UserManager, user)) { Logger.Warn("Reset password requested with wrong token"); return NoContent(); } var result = await UserManager.ResetPasswordAsync(user.Id, model.Token, model.NewPassword); if (result.Succeeded) { Logger.Info("Creating password reset token for user id {0}", user.Id); const string subject = "Client - Password reset success."; var body = "<html><body>" + "<h1>Your password for Client was reset</h1>" + $"<p>Hi {user.FullName}!</p>" + "<p>Your password for Client was reset. Please inform us if you did not request this change.</p>" + "</body></html>"; var message = new IdentityMessage { Body = body, Destination = user.Email, Subject = subject }; await UserManager.EmailService.SendAsync(message); } return NoContent(); } public class ResetPasswordRequestModel { [Required] [Display(Name = "Token")] public string Token { get; set; } [Required] [Display(Name = "Email")] public string Email { get; set; } [Required] [StringLength(100, ErrorMessage = "The {0} must be at least {2} characters long.", MinimumLength = 10)] [DataType(DataType.Password)] [Display(Name = "New password")] public string NewPassword { get; set; } [DataType(DataType.Password)] [Display(Name = "Confirm new password")] [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")] public string ConfirmPassword { get; set; } }
<configuration> <startup useLegacyV2RuntimeActivationPolicy="true"> <supportedRuntime version="v4.0"/> </startup> <configSections> <section name="Reva.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" /> <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" /> </configSections> -- -- -- --
<startup useLegacyV2RuntimeActivationPolicy="true"> <supportedRuntime version="v4.0"/> </startup>
<configuration> <configSections> <section name="Reva.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" /> <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" /> </configSections> <startup useLegacyV2RuntimeActivationPolicy="true"> <supportedRuntime version="v4.0"/> </startup>
<?xml version="1.0" encoding="utf-8"?> <configuration> <connectionStrings> <add name="SQLConnect" connectionString="Data Source=SAHIL; Initial Catalog=Demo; Integrated Security=SSPI" providerName="System.Data.SqlClient" /> </connectionStrings> <configSections> <sectionnamesectionname="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" /> </configSections> : : : : : : : </configuration>
Customer a = new Customer(); Customer b = new Customer();
SomeCustomClass a = new SomeCustomClass(); SomeCustomClass b = new SomeCustomClass(); a.x = 100; List<Variance> rt = a.DetailedCompare(b);
class SomeCustomClass { public int x = 12; public int y = 13; }
using System.Collections.Generic; using System.Reflection; static class extentions { public static List<Variance> DetailedCompare<T>(this T val1, T val2) { List<Variance> variances = new List<Variance>(); FieldInfo[] fi = val1.GetType().GetFields(); foreach (FieldInfo f in fi) { Variance v = new Variance(); v.Prop = f.Name; v.valA = f.GetValue(val1); v.valB = f.GetValue(val2); if (!v.valA.Equals(v.valB)) variances.Add(v); } return variances; } } class Variance { public string Prop { get; set; } public object valA { get; set; } public object valB { get; set; } }
@* Omitted code.. *@ @RenderBody() @RenderSection("Sidebar", required: false)
@if (IsSectionDefined("Sidebar")) { @RenderSection("Sidebar") } else { <div>Some default content</div> }
<?xml version="1.0"?> <configuration> <appSettings> <add key="configFile" value="IIS.config"/> <add key="RialtoDomain" value="ASNC_AUDITORS"/> </appSettings> <system.serviceModel> .... </system.serviceModel> </configuration>
String path = ConfigurationSettings.AppSettings["configFile"];
using System.Web.Configuration; WebConfigurationManager.AppSettings["configFile"]
String path = ConfigurationManager.AppSettings["configFile"];
using System.Configuration; public string ReadSetting(string key) { var appSettings = ConfigurationManager.AppSettings; return appSettings[key] ?? string.Empty; } public Dictionary<string, string> ReadAllSettings() { var result = new Dictionary<string, string>(); foreach (var key in ConfigurationManager.AppSettings.AllKeys) result.Add(key, ConfigurationManager.AppSettings[key]); return result; }
public void ExportDataSet(DataSet ds) { try { string filename = "ExcelFile.xls"; HttpResponse response = HttpContext.Current.Response; response.Clear(); response.Charset = ""; response.ContentType = "application/vnd.ms-excel"; response.AddHeader("Content-Disposition", "attachment;filename=\"" + filename + "\""); using (StringWriter sw = new StringWriter()) { using (HtmlTextWriter htw = new HtmlTextWriter(sw)) { GridView dg = new GridView(); dg.DataSource = ds.Tables[0]; dg.DataBind(); dg.RenderControl(htw); response.Write(sw.ToString()); response.End(); } } } catch (Exception ex) { string Err = ex.Message.ToString(); EsHelper.EsADLogger("HOQCMgmt.aspx ibtnExcelAll_Click()", ex.Message.ToString()); } finally { } }
HttpContext.Current.Response.Flush(); HttpContext.Current.Response.SuppressContent = true; HttpContext.Current.ApplicationInstance.CompleteRequest();
try { HttpContext.Current.Response.Write(Data); } catch (Exception exc) {} finally { try { HttpContext.Current.Response.End(); } catch (Exception ex) {} finally { HttpContext.Current.Response.Flush(); HttpContext.Current.Response.SuppressContent = true; HttpContext.Current.ApplicationInstance.CompleteRequest(); Thread.Sleep(1); } }
HttpContext.Current.Response.Flush(); HttpContext.Current.Response.SuppressContent = True; HttpContext.Current.ApplicationInstance.CompleteRequest();
{ ... context.Response.End(); } catch (ThreadAbortException e) { } catch (Exception e) { context.Response.ContentType = "text/plain"; context.Response.Write(e.Message); }
bool endRequest = false; try { .. do stuff endRequest = true; } catch {} if (endRequest) Resonse.End();
... Response.Clear(); ... ... try{ if (something){ Reponse.Write(...); Response.End(); return; } some_more_code... Reponse.Write(...); Response.End(); } catch(Exception){ } finally{}
... Response.Clear(); ... ... try{ if (something){ Reponse.Write(...); return; } some_more_code... Reponse.Write(...); } catch(Exception){ } finally{ Response.End(); }
override protected void Render(HtmlTextWriter w) { if (!isFileDownLoad) base.Render(w); }
public class Bootstrapper { private static CompositionContainer CompositionContainer; private static bool IsLoaded = false; public static void Compose(List<string> pluginFolders) { if (IsLoaded) return; var catalog = new AggregateCatalog(); catalog.Catalogs.Add(new DirectoryCatalog(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "bin"))); foreach (var plugin in pluginFolders) { var directoryCatalog = new DirectoryCatalog(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Modules", plugin)); catalog.Catalogs.Add(directoryCatalog); } CompositionContainer = new CompositionContainer(catalog); CompositionContainer.ComposeParts(); IsLoaded = true; } public static T GetInstance<T>(string contractName = null) { var type = default(T); if (CompositionContainer == null) return type; if (!string.IsNullOrWhiteSpace(contractName)) type = CompositionContainer.GetExportedValue<T>(contractName); else type = CompositionContainer.GetExportedValue<T>(); return type; } }
public class MvcApplication : System.Web.HttpApplication { protected void Application_Start() { var pluginFolders = new List<string>(); var plugins = Directory.GetDirectories(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Modules")).ToList(); plugins.ForEach(s => { var di = new DirectoryInfo(s); pluginFolders.Add(di.Name); }); AreaRegistration.RegisterAllAreas(); RouteConfig.RegisterRoutes(RouteTable.Routes); Bootstrapper.Compose(pluginFolders); ControllerBuilder.Current.SetControllerFactory(new CustomControllerFactory()); ViewEngines.Engines.Add(new CustomViewEngine(pluginFolders)); } }
public class CustomControllerFactory : IControllerFactory { private readonly DefaultControllerFactory _defaultControllerFactory; public CustomControllerFactory() { _defaultControllerFactory = new DefaultControllerFactory(); } public IController CreateController(RequestContext requestContext, string controllerName) { var controller = Bootstrapper.GetInstance<IController>(controllerName); if (controller == null) throw new Exception("Controller not found!"); return controller; } public SessionStateBehavior GetControllerSessionBehavior(RequestContext requestContext, string controllerName) { return SessionStateBehavior.Default; } public void ReleaseController(IController controller) { var disposableController = controller as IDisposable; if (disposableController != null) { disposableController.Dispose(); } } }
[Export("Plugin1", typeof(IController))] [PartCreationPolicy(CreationPolicy.NonShared)] public class Plugin1Controller : Controller { // public ActionResult Index() { return View(); } }
public class CustomViewEngine : RazorViewEngine { private List<string> _plugins = new List<string>(); public CustomViewEngine(List<string> pluginFolders) { _plugins = pluginFolders; ViewLocationFormats = GetViewLocations(); MasterLocationFormats = GetMasterLocations(); PartialViewLocationFormats = GetViewLocations(); } public string[] GetViewLocations() { var views = new List<string>(); views.Add("~/Views/{1}/{0}.cshtml"); _plugins.ForEach(plugin => views.Add("~/Modules/" + plugin + "/Views/{1}/{0}.cshtml") ); return views.ToArray(); } public string[] GetMasterLocations() { var masterPages = new List<string>(); masterPages.Add("~/Views/Shared/{0}.cshtml"); _plugins.ForEach(plugin => masterPages.Add("~/Modules/" + plugin + "/Views/Shared/{0}.cshtml") ); return masterPages.ToArray(); } }
<appSettings> <add key="ClientId" value="127605460617602"/> <add key="RedirectUrl" value="http: </appSettings>
using System.Configuration; string clientId = ConfigurationManager.AppSettings["ClientId"]; string redirectUrl = ConfigurationManager.AppSettings["RedirectUrl"];
string myKey = System.Configuration.ConfigurationManager.AppSettings["myKey"].ToString(); string imageFolder = System.Configuration.ConfigurationManager.AppSettings["imageFolder"].ToString();
using System.Configuration; public static class AppSettingsGet { public static string myKey { get { return ConfigurationManager.AppSettings["myKey"].ToString(); } } public static string imageFolder { get { return ConfigurationManager.AppSettings["imageFolder"].ToString(); } } public static string ConnectionString { get { return ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString; } } }
<configuration> <configSections> <!-- some stuff omitted here --> </configSections> <appSettings> <add key="appKeyString" value="abc" /> <add key="appKeyInt" value="123" /> </appSettings> </configuration>
using System; using System.Configuration; namespace Configuration { public static class SiteConfigurationReader { public static String appKeyString { get { return ConfigurationManager.AppSettings.Get("appKeyString"); } } public static Int32 appKeyInt { get { return ConfigurationManager.AppSettings.Get("appKeyInt").ToInteger(true); } } public static Int32 GetAppSettingsInteger(string keyName) { try { return Convert.ToInt32(ConfigurationManager.AppSettings.Get(keyName)); } catch { return 0; } } } }
string appKeyStringVal= SiteConfigurationReader.appKeyString; int appKeyIntVal= SiteConfigurationReader.appKeyInt; int appKeyStringByPassingKey = SiteConfigurationReader.GetAppSettingsInteger("appKeyInt");
@for(int i = 0; i < Model.ToGroups.Count; i++) { @Html.HiddenFor(model => Model.ToGroups[i]) }
<div style="display: none;">@Html.EditorFor(model => model.MyList)</div>
@using (Ajax.BeginForm("Settings", "AffiliateProgram", Model.DataResponse, new AjaxOptions { UpdateTargetId = "result" })) { string commissionJson = JsonConvert.SerializeObject(Model.DataResponse.Entity.Commission); @Html.HiddenFor(data => data.DataResponse.Entity.Guid) @Html.Hidden("DataResponse_Entity_Commission", commissionJson) [Rest of my form] }
<input id="DataResponse_Entity_Commission" name="DataResponse_Entity_Commission" type="hidden" value="[{"RangeStart":0,"RangeEnd":0,"CommissionPercent":2.00000},{"RangeStart":1,"RangeEnd":2,"CommissionPercent":3.00000},{"RangeStart":2,"RangeEnd":0,"CommissionPercent":2.00000},{"RangeStart":3,"RangeEnd":2,"CommissionPercent":1.00000},{"RangeStart":15,"RangeEnd":10,"CommissionPercent":5.00000}]">
string jsonCommissionRange = Request.Form["DataResponse_Entity_Commission"]; List<CommissionRange> commissionRange = JsonConvert.DeserializeObject<List<CommissionRange>>(jsonCommissionRange);
@{ for (int i = 0; i < Model.Categories.Count; i++) { <tr> <td> @Html.HiddenFor(modelItem => Model.Categories[i].Id) @Html.HiddenFor(modelItem => Model.Categories[i].ProductCategoryId) @Html.HiddenFor(modelItem => Model.Categories[i].CategoryName) @Html.DisplayFor(modelItem => Model.Categories[i].CategoryName) </td> <td> @Html.HiddenFor(modelItem => Model.Categories[i].DailyPurchaseLimit) @Html.EditorFor(modelItem => Model.Categories[i].DailyPurchaseLimit) @Html.ValidationMessageFor(modelItem => Model.Categories[i].DailyPurchaseLimit) </td> <td style="text-align: center"> @Html.HiddenFor(modelItem => Model.Categories[i].IsSelected) @Html.EditorFor(modelItem => Model.Categories[i].IsSelected) </td> </tr> } }
for (int i = 0; i < Model.Categories.Count; i++) { <tr> <td> @Html.HiddenFor(modelItem => Model.Categories[i].Id) @Html.HiddenFor(modelItem => Model.Categories[i].ProductCategoryId) @Html.HiddenFor(modelItem => Model.Categories[i].CategoryName) @Html.DisplayFor(modelItem => Model.Categories[i].CategoryName) </td> <td> @Html.EditorFor(modelItem => Model.Categories[i].DailyPurchaseLimit) @Html.HiddenFor(modelItem => Model.Categories[i].DailyPurchaseLimit) @Html.ValidationMessageFor(modelItem => Model.Categories[i].DailyPurchaseLimit) </td> <td style="text-align: center"> @Html.EditorFor(modelItem => Model.Categories[i].IsSelected) @Html.HiddenFor(modelItem => Model.Categories[i].IsSelected) </td> </tr> }
@if (Model.MyList!= null) { for (int i = 0; i < Model.MyList.Count; i++) { @Html.HiddenFor(x => x.MyList[i]) } }
<input type="hidden" value=@(string.Join(",", Model.MyList)) />
public static IHtmlString HiddenForCollection<TModel, TProperty>(this HtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression) where TProperty : ICollection { var model = html.ViewData.Model; var property = model != null ? expression.Compile().Invoke(model) : default(TProperty); var result = new StringBuilder(); if (property != null && property.Count > 0) { for(int i = 0; i < property.Count; i++) { var modelExp = expression.Parameters.First(); var propertyExp = expression.Body; var itemExp = Expression.ArrayIndex(propertyExp, Expression.Constant(i)); var itemExpression = Expression.Lambda<Func<TModel, object>>(itemExp, modelExp); result.AppendLine(html.HiddenFor(itemExpression).ToString()); } } return new MvcHtmlString(result.ToString()); }
<form runat="server" id="f1"> <div runat="server" id="d"> grid view: <asp:GridView runat="server" ID="g"> </asp:GridView> </div> <asp:TextBox runat="server" ID="t" TextMode="MultiLine" Rows="20" Columns="50"></asp:TextBox> </form>
public partial class ScriptTest : System.Web.UI.Page { protected void Page_Load(object sender, EventArgs e) { g.DataSource = new string[] { "a", "b", "c" }; g.DataBind(); TextWriter tw = new StringWriter(); HtmlTextWriter h = new HtmlTextWriter(tw); d.RenderControl(h); t.Text = tw.ToString(); } }
public override void VerifyRenderingInServerForm(Control control) { }
Control parent = grid.Parent; int GridIndex = 0; if (parent != null) { GridIndex = parent.Controls.IndexOf(grid); parent.Controls.Remove(grid); } grid.RenderControl(hw); if (parent != null) { parent.Controls.AddAt(GridIndex, grid); }
grid.RenderBeginTag(hw); grid.HeaderRow.RenderControl(hw); foreach (GridViewRow row in grid.Rows) { row.RenderControl(hw); } grid.FooterRow.RenderControl(hw); grid.RenderEndTag(hw);
public override void VerifyRenderingInServerForm(Control control) { }
public partial class NoRenderPage : System.Web.UI.Page { protected void Page_Load(object sender, EventArgs e) { } public override void VerifyRenderingInServerForm(Control control) { } public override bool EnableEventValidation { get { return false; } set { } } }
StringWriter tw = new StringWriter(); HtmlTextWriter hw = new HtmlTextWriter(tw); var page = new NoRenderPage(); page.DesignerInitialize(); var form = new HtmlForm(); page.Controls.Add(form); form.Controls.Add(pnl); controlToRender.RenderControl(hw);
protected void btnExcel_Click(object sender, ImageClickEventArgs e) { if (gvDetail.Rows.Count > 0) { System.IO.StringWriter stringWrite1 = new System.IO.StringWriter(); System.Web.UI.HtmlTextWriter htmlWrite1 = new HtmlTextWriter(stringWrite1); gvDetail.RenderControl(htmlWrite1); gvDetail.AllowPaging = false; Search(); sh.ExportToExcel(gvDetail, "Report"); } } public override void VerifyRenderingInServerForm(Control control) { }
[DataType(DataType.DateTime)] public DateTime? StartDate { get; set; }
<%: Model.StartDate %> <%: Html.TextBoxFor(m => m.StartDate) %>
[DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:MM/dd/yyyy}")]
@Html.TextBoxFor(m => m.StartDate, "{0:MM/dd/yyyy}", new { @class = "form-control default-date-picker" })
[DisplayFormat(DataFormatString = "{0:MMM dd, yyyy}")]
[DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:MM/dd/yyyy}")]
[DataType(DataType.Date)] [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:dd/MM/yyyy}")]
[DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:dd/MM/yyyy}")]
private DateTime? dob; public DateTime? DOB { get { if (dob != null) { return dob.Value.Date; } else { return null; } } set { dob = value; } }
Update-Package -Reinstall -ProjectName Project.Name.Here
<TargetFrameworkVersion>v4.5.1</TargetFrameworkVersion>
<TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
[DefaultValue(typeof(DateTime),DateTime.Now.ToString("yyyy-MM-dd"))] public DateTime DateCreated { get; set; }
public DateTime DateCreated { get { return this.dateCreated.HasValue ? this.dateCreated.Value : DateTime.Now; } set { this.dateCreated = value; } } private DateTime? dateCreated = null;
CreateTable( "dbo.SomeTable", c => new { TheDateField = c.DateTime(defaultValueSql: "GETDATE()") });
[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
[System.ComponentModel.DefaultValue(typeof(DateTime), "")]
namespace EntityExample { public partial class Example : EntityObject { public Example() { this._DateCreated = DateTime.Now; } } }
class MyContext : DbContext { public DbSet<Blog> Blogs { get; set; } protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<Blog>() .Property(b => b.Created) .HasDefaultValueSql("getdate()"); } }
public class Foo { public DateTime DateCreated { get; set; } public Foo() { DateCreated = DateTime.Now; } }
[Column(TypeName = "datetime2")] [XmlAttribute] [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:yyyy-MM-dd}")] [Display(Name = "Date Modified")] [DateRange(Min = "1900-01-01", Max = "2999-12-31")] public DateTime DateModified { get { return dateModified; } set { dateModified = value; } } private DateTime dateModified = DateTime.Now.ToUniversalTime();
[JsonProperty( DefaultValueHandling = DefaultValueHandling.Ignore )] [DefaultDateTime] public DateTime EndTime; public class DefaultDateTimeAttribute : DefaultValueAttribute { public DefaultDateTimeAttribute() : base( default( DateTime ) ) { } public DefaultDateTimeAttribute( string dateTime ) : base( DateTime.Parse( dateTime ) ) { } }
public DateTime DateCreated { get { return (this.dateCreated == default(DateTime)) ? this.dateCreated = DateTime.Now : this.dateCreated; } set { this.dateCreated = value; } } private DateTime dateCreated = default(DateTime);
public partial class NWDataContext { partial void InsertCategory(Category instance) { if(Instance.Date == null) Instance.Data = DateTime.Now; ExecuteDynamicInsert(instance); } }
[DbProperty(initialValue: EInitialValue.DateTime_Now)] public DateTime CreationDate { get; set; }
Public Class DbProperty Inherits System.Attribute Public Property InitialValue As Object Public Sub New(ByVal initialValue As EInitialValue) Select Case initialValue Case EInitialValue.DateTime_Now Me.InitialValue = System.DateTime.Now Case EInitialValue.DateTime_Min Me.InitialValue = System.DateTime.MinValue Case EInitialValue.DateTime_Max Me.InitialValue = System.DateTime.MaxValue End Select End Sub End Class
Public Enum EInitialValue DateTime_Now DateTime_Min DateTime_Max End Enum
using System; using System.ComponentModel; using System.ComponentModel.DataAnnotations; using System.Linq; using System.Reflection; using System.Runtime.CompilerServices; using Custom.Extensions; namespace Custom.DefaultValueAttributes { [AttributeUsage(AttributeTargets.Property)] public sealed class DefaultDateTimeValueAttribute : DefaultValueAttribute { public string DefaultValue { get; set; } private object _value; public override object Value { get { if (_value == null) return _value = GetDefaultValue(); return _value; } } public DefaultDateTimeValueAttribute(string defaultValue) : base(defaultValue) { DefaultValue = defaultValue; } public static DateTime GetDefaultValue(Type objectType, string propertyName) { var property = objectType.GetProperty(propertyName); var attribute = property.GetCustomAttributes(typeof(DefaultDateTimeValueAttribute), false) ?.Cast<DefaultDateTimeValueAttribute>() ?.FirstOrDefault(); return attribute.GetDefaultValue(); } private DateTime GetDefaultValue() { if (this.IsProperty) { return GetPropertyValue(); } if (this.IsExtensionMethod) { return GetExtensionMethodValue(); } if (this.IsRelativeValue) { return GetRelativeValue(); } return GetAbsoluteValue(); } private bool IsProperty => typeof(DateTime).GetProperties() .Select(p => p.Name).Contains(this.DefaultValue); private bool IsExtensionMethod => typeof(DefaultDateTimeValueAttribute).Assembly .GetType(typeof(DefaultDateTimeExtensions).FullName) .GetMethods() .Where(m => m.IsDefined(typeof(ExtensionAttribute), false)) .Select(p => p.Name).Contains(this.DefaultValue); private bool IsRelativeValue => this.DefaultValue.Contains(":"); private DateTime GetPropertyValue() { var instance = Activator.CreateInstance<DateTime>(); var value = (DateTime)instance.GetType() .GetProperty(this.DefaultValue) .GetValue(instance); return value; } private DateTime GetExtensionMethodValue() { var instance = Activator.CreateInstance<DateTime>(); var value = (DateTime)typeof(DefaultDateTimeValueAttribute).Assembly .GetType(typeof(DefaultDateTimeExtensions).FullName) .GetMethod(this.DefaultValue) .Invoke(instance, new object[] { DateTime.Now }); return value; } private DateTime GetRelativeValue() { TimeSpan timeSpan; if (!TimeSpan.TryParse(this.DefaultValue, out timeSpan)) { return default(DateTime); } return DateTime.Now.Add(timeSpan); } private DateTime GetAbsoluteValue() { DateTime value; if (!DateTime.TryParse(this.DefaultValue, out value)) { return default(DateTime); } return value; } } }
using System; namespace Custom.Extensions { public static class DefaultDateTimeExtensions { public static DateTime FirstOfYear(this DateTime dateTime) => new DateTime(dateTime.Year, 1, 1, dateTime.Hour, dateTime.Minute, dateTime.Second, dateTime.Millisecond); public static DateTime LastOfYear(this DateTime dateTime) => new DateTime(dateTime.Year, 12, 31, dateTime.Hour, dateTime.Minute, dateTime.Second, dateTime.Millisecond); public static DateTime FirstOfMonth(this DateTime dateTime) => new DateTime(dateTime.Year, dateTime.Month, 1, dateTime.Hour, dateTime.Minute, dateTime.Second, dateTime.Millisecond); public static DateTime LastOfMonth(this DateTime dateTime) => new DateTime(dateTime.Year, dateTime.Month, DateTime.DaysInMonth(dateTime.Year, dateTime.Month), dateTime.Hour, dateTime.Minute, dateTime.Second, dateTime.Millisecond); } }
public DateTime DateCreated { get; set; } = DateTime.Now;
[DatabaseGenerated(DatabaseGeneratedOption.Computed)] public DateTime CreatedOn { get; private set; }
public DateTime fieldname { get; set; } = DateTime.Now;
public class DefaultDateAttribute : DefaultValueAttribute { public DefaultDateAttribute(short yearoffset) : base(DateTime.Now.AddYears(yearoffset).Date) { } }
public ActionResult ListMyItems() { List<Item> list = ItemDB.GetListOfItems(); ViewData["ItemList"] = list; return View(); }
ActionResult Search(string query, int startIndex, int pageSize) {...}
routes.MapRoute("Search", "Search/{query}/{startIndex}", new { controller = "Home", action = "Search", startIndex = 0, pageSize = 20 });
<%=Html.ActionLink("next page", "Search", new { query, startIndex = startIndex + pageSize, pageSize }) %>
return View(partnerList.ToPagedList(currentPageIndex, pageSize));
<div class="pager"> Seite: <%= Html.Pager(ViewData.Model.PageSize, ViewData.Model.PageNumber, ViewData.Model.TotalItemCount)%> </div>
public ActionResult Index(int page = 0) { const int PageSize = 3; var count = this.dataSource.Count(); var data = this.dataSource.Skip(page * PageSize).Take(PageSize).ToList(); this.ViewBag.MaxPage = (count / PageSize) - (count % PageSize == 0 ? 1 : 0); this.ViewBag.Page = page; return this.View(data); }
@* rest of file with view *@ @if (ViewBag.Page > 0) { <a href="@Url.Action("Index", new { page = ViewBag.Page - 1 })" class="btn btn-default"> &laquo; Prev </a> } @if (ViewBag.Page < ViewBag.MaxPage) { <a href="@Url.Action("Index", new { page = ViewBag.Page + 1 })" class="btn btn-default"> Next &raquo; </a> }
[HttpGet] public async Task<ActionResult> Index(int page =1) { if (page < 0 || page ==0 ) { page = 1; } int pageSize = 5; int totalPage = 0; int totalRecord = 0; BusinessLayer bll = new BusinessLayer(); MatchModel matchmodel = new MatchModel(); matchmodel.GetMatchList = bll.GetMatchCore(page, pageSize, out totalRecord, out totalPage); ViewBag.dbCount = totalPage; return View(matchmodel); }
public List<Match> GetMatchCore(int page, int pageSize, out int totalRecord, out int totalPage) { SignalRDataContext db = new SignalRDataContext(); var query = new List<Match>(); totalRecord = db.Matches.Count(); totalPage = (totalRecord / pageSize) + ((totalRecord % pageSize) > 0 ? 1 : 0); query = db.Matches.OrderBy(a => a.QuestionID).Skip(((page - 1) * pageSize)).Take(pageSize).ToList(); return query; }
if (ViewBag.dbCount != null) { for (int i = 1; i <= ViewBag.dbCount; i++) { <ul class="pagination"> <li>@Html.ActionLink(@i.ToString(), "Index", "Grid", new { page = @i },null)</li> </ul> } }
public class ProductController : Controller { public object Index(int? page) { var list = ItemDB.GetListOfItems(); var pageNumber = page ?? 1; var onePageOfItem = list.ToPagedList(pageNumber, 25); ViewBag.onePageOfItem = onePageOfProducts; return View(); } }
public class PageEntity { public int Page { get; set; } public string Class { get; set; } } public class Pagination { public List<PageEntity> Pages { get; set; } public int Next { get; set; } public int Previous { get; set; } public string NextClass { get; set; } public string PreviousClass { get; set; } public bool Display { get; set; } public string Query { get; set; } }
<nav> <div class="navigation" style="text-align: center"> <ul class="pagination"> <li class="page-item @Model.NextClass"><a class="page-link" href="?page=@(@Model.Previous+@Model.Query)">&laquo;</a></li> @foreach (var item in @Model.Pages) { <li class="page-item @item.Class"><a class="page-link" href="?page=@(item.Page+@Model.Query)">@item.Page</a></li> } <li class="page-item @Model.NextClass"><a class="page-link" href="?page=@(@Model.Next+@Model.Query)">&raquo;</a></li> </ul> </div> </nav>
public Pagination GetCategoryPaging(int currentPage, int recordCount, string query) { string pageClass = string.Empty; int pageSize = 10, innerCount = 5; Pagination pagination = new Pagination(); pagination.Pages = new List<PageEntity>(); pagination.Next = currentPage + 1; pagination.Previous = ((currentPage - 1) > 0) ? (currentPage - 1) : 1; pagination.Query = query; int totalPages = ((int)recordCount % pageSize) == 0 ? (int)recordCount / pageSize : (int)recordCount / pageSize + 1; int loopStart = 1, loopCount = 1; if ((currentPage - 2) > 0) { loopStart = (currentPage - 2); } for (int i = loopStart; i <= totalPages; i++) { pagination.Pages.Add(new PageEntity { Page = i, Class = string.Empty }); if (loopCount == innerCount) { break; } loopCount++; } if (totalPages <= innerCount) { pagination.PreviousClass = "disabled"; } foreach (var item in pagination.Pages.Where(x => x.Page == currentPage)) { item.Class = "active"; } if (pagination.Pages.Count() <= 1) { pagination.Display = false; } return pagination; }
public ActionResult GetPages() { int currentPage = 1; string search = string.Empty; if (!string.IsNullOrEmpty(Request.QueryString["page"])) { currentPage = Convert.ToInt32(Request.QueryString["page"]); } if (!string.IsNullOrEmpty(Request.QueryString["q"])) { search = "&q=" + Request.QueryString["q"]; } int recordCount = 100; Place place = new Place(); Pagination pagination = place.GetCategoryPaging(currentPage, recordCount, search); return PartialView("Controls/_Pagination", pagination); }
public ActionResult Paging(int? pageno,bool? fwd,bool? bwd) { if(pageno!=null) { Session["currentpage"] = pageno; } using (HatronEntities DB = new HatronEntities()) { if(fwd!=null && (bool)fwd) { pageno = Convert.ToInt32(Session["currentpage"]) + 1; Session["currentpage"] = pageno; } if (bwd != null && (bool)bwd) { pageno = Convert.ToInt32(Session["currentpage"]) - 1; Session["currentpage"] = pageno; } if (pageno==null) { pageno = 1; } if(pageno<0) { pageno = 1; } int total = DB.EmployeePromotion(0, 0, 0).Count(); int totalPage = (int)Math.Ceiling((double)total / 20); ViewBag.pages = totalPage; if (pageno > totalPage) { pageno = totalPage; } return View (DB.EmployeePromotion(0,0,0).Skip(GetSkip((int)pageno,20)).Take(20).ToList()); } } private static int GetSkip(int pageIndex, int take) { return (pageIndex - 1) * take; } @model IEnumerable<EmployeePromotion_Result> @{ Layout = null; } <!DOCTYPE html> <html> <head> <meta name="viewport" content="width=device-width" /> <title>Paging</title> </head> <body> <div> <table border="1"> @foreach (var itm in Model) { <tr> <td>@itm.District</td> <td>@itm.employee</td> <td>@itm.PromotionTo</td> </tr> } </table> <a href="@Url.Action("Paging", "Home",new { pageno=1 })">First page</a> <a href="@Url.Action("Paging", "Home", new { bwd =true })"><<</a> @for(int itmp =1; itmp< Convert.ToInt32(ViewBag.pages)+1;itmp++) { <a href="@Url.Action("Paging", "Home",new { pageno=itmp })">@itmp.ToString()</a> } <a href="@Url.Action("Paging", "Home", new { fwd = true })">>></a> <a href="@Url.Action("Paging", "Home", new { pageno = Convert.ToInt32(ViewBag.pages) })">Last page</a> </div> </body> </html>
var ci = new CultureInfo("fr-FR"); DateTime dt = DateTime.ParseExact(yourDateInputString, yourFormatString, ci);
DateTimeFormatInfo format; format = (DateTimeFormatInfo)provider.GetFormat(typeof(DateTimeFormatInfo)); if (format != null) DoStuffWithDatesOrTimes(format);
CultureInfo info = provider as CultureInfo; if (info != null) format = info.DateTimeInfo; else { DateTimeFormatInfo dtfi = provider as DateTimeFormatInfo; if (dtfi != null) format = dtfi; else format = (DateTimeFormatInfo)provider.GetFormat(typeof(DateTimeFormatInfo)); } if (format != null) DoStuffWithDatesOrTimes(format);
DateTimeFormatInfo format = DateTimeFormatInfo.GetInstance(provider);
NumberFormatInfo format = NumberFormatInfo.GetInstance(provider);
DateTime.Now.ToString(CultureInfo.CurrentCulture); endTime.ToString(CultureInfo.InvariantCulture); transactionID.toString(CultureInfo.CreateSpecificCulture("qps-ploc"));
string output = theDate.ToString("dd/MM/yy HH:mm:ss.fff", null);
string output = theDate.ToString("dd/MM/yy HH:mm:ss.fff", CultureInfo.InvariantCulture);
<bindings> <binding protocol="http" bindingInformation="*:54764:localhost" /> <binding protocol="https" bindingInformation="*:44360:localhost" /> </bindings>
<bindings> <binding protocol="https" bindingInformation="*:44360:localhost" /> </bindings>
"iisSettings": { "windowsAuthentication": false, "anonymousAuthentication": true, "iisExpress": { "applicationUrl": "https: "sslPort": 0 } },
"iisSettings": { "windowsAuthentication": false, "anonymousAuthentication": true, "iisExpress": { "applicationUrl": "http: "sslPort": 0 } },
<add name="Clr4IntegratedAppPool" managedRuntimeVersion="v4.0" managedPipelineMode="Integrated" CLRConfigFile="%IIS_USER_HOME%\config\aspnet.config" autoStart="true" />
<add name="Clr4IntegratedAppPool" managedRuntimeVersion="v4.0.30319" managedPipelineMode="Integrated" CLRConfigFile="%IIS_USER_HOME%\config\aspnet.config" autoStart="true" />
"iisExpress": { "applicationUrl": "https: "sslPort": 50770 }
taskkill /im iisexpress.exe /f taskkill /im dotnet.exe /f
FormsAuthentication.RedirectFromLoginPage(txtUsername.Text, true);
bool val1 = System.Web.HttpContext.Current.User.Identity.IsAuthenticated
bool val1 = (System.Web.HttpContext.Current.User != null) && System.Web.HttpContext.Current.User.Identity.IsAuthenticated
if (User.Identity.IsAuthenticated) { Page.Title = "Home page for " + User.Identity.Name; } else { Page.Title = "Home page for guest user."; }
using (var client = new HttpClient()) { client.BaseAddress = new Uri("https: client.DefaultRequestHeaders.Accept.Clear(); client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", "xxxxxxxxxxxxxxxxxxxx"); client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json")); var response = client.PostAsJsonAsync("rest/message", svm).Result; }
var request = new HttpRequestMessage { RequestUri = new Uri(EnvironmentSetup.BaseAddress + "Folder"), Method = HttpMethod.Post, Headers = { { HttpRequestHeader.Authorization.ToString(), "Basic " + EnvironmentSetup.GetAuthToken() }, { HttpRequestHeader.ContentType.ToString(), "multipart/mixed" }, }, Content = new MultipartContent { new ObjectContent<FolderWithDocuments>(new FolderWithDocuments { Status = FolderStatus.Draft, Users = new List<User> { EnvironmentSetup.User1, EnvironmentSetup.User2 }, }, new JsonMediaTypeFormatter(), "application/json"), new ByteArrayContent(ResourceHelper.ReadResourceToByteArray("blank.pdf")) { Headers = { { "Content-Type", "application/Executable" }, { "Content-Disposition", "form-data; filename=\"test.pdf\"" }, }, }, }, };
using Newtonsoft.Json; ... var client = new HttpClient(); var httpRequestMessage = new HttpRequestMessage { Method = HttpMethod.Post, RequestUri = new Uri("https: Headers = { { HttpRequestHeader.Authorization.ToString(), "Bearer xxxxxxxxxxxxxxxxxxxx" }, { HttpRequestHeader.Access.ToString(), "application/json" }, { "X-Version", "1" } }, Content = new StringContent(JsonConvert.SerializeObject(svm)) }; var response = client.SendAsync(httpRequestMessage).Result;
public async Task<string> Get(int id) { var x = HttpContext.Current; if (x == null) { throw new ArgumentException("HttpContext.Current is null"); } await Task.Run(() => { Task.Delay(500); id = 3; }); x = HttpContext.Current; if (x == null) { throw new ArgumentException("HttpContext.Current is null"); } return "value"; }
<!-- For a description of web.config changes for .NET 4.5 see http: The following attributes can be set on the <httpRuntime> tag. <system.Web> <httpRuntime targetFramework="4.5" /> </system.Web> -->
HttpContext context = HttpContext.Current; context.Response.Filter = new GZipStream(context.Response.Filter, CompressionMode.Compress); HttpContext.Current.Response.AppendHeader("Content-encoding", "gzip"); HttpContext.Current.Response.Cache.VaryByHeaders["Accept-encoding"] = true;
<httpCompression> <scheme name="gzip" dll="%Windir%\system32\inetsrv\gzip.dll"/> <dynamicTypes> <add mimeType="text/*" enabled="true"/> <add mimeType="message/*" enabled="true"/> <add mimeType="application/javascript" enabled="true"/> <add mimeType="*/*" enabled="false"/> </dynamicTypes> <staticTypes> <add mimeType="text/*" enabled="true"/> <add mimeType="message/*" enabled="true"/> <add mimeType="application/javascript" enabled="true"/> <add mimeType="*/*" enabled="false"/> </staticTypes> </httpCompression> <urlCompression doStaticCompression="true" doDynamicCompression="true"/> </system.webServer>
<img src="www.example.com\exampleimg.jpg" alt="example" />
<httpCompression> <scheme name="gzip" dll="%Windir%\system32\inetsrv\gzip.dll" /> <staticTypes> <add mimeType="text/*" enabled="true" /> </staticTypes> </httpCompression> <urlCompression doStaticCompression="true" />
void Application_PreRequestHandlerExecute(object sender, EventArgs e) { HttpApplication app = sender as HttpApplication; string acceptEncoding = app.Request.Headers["Accept-Encoding"]; Stream prevUncompressedStream = app.Response.Filter; if (app.Context.CurrentHandler == null) return; if (!(app.Context.CurrentHandler is System.Web.UI.Page || app.Context.CurrentHandler.GetType().Name == "SyncSessionlessHandler") || app.Request["HTTP_X_MICROSOFTAJAX"] != null) return; if (acceptEncoding == null || acceptEncoding.Length == 0) return; acceptEncoding = acceptEncoding.ToLower(); if (acceptEncoding.Contains("deflate") || acceptEncoding == "*") { app.Response.Filter = new DeflateStream(prevUncompressedStream, CompressionMode.Compress); app.Response.AppendHeader("Content-Encoding", "deflate"); } else if (acceptEncoding.Contains("gzip")) { app.Response.Filter = new GZipStream(prevUncompressedStream, CompressionMode.Compress); app.Response.AppendHeader("Content-Encoding", "gzip"); } }
<urlCompression doStaticCompression="true" doDynamicCompression="true" />
OdbcCommand fetchCommand = new OdbcCommand(storedProc, conn); fetchCommand.CommandType = CommandType.StoredProcedure; fetchCommand.Parameters.AddWithValue("@column ", myCustomParameter); fetchCommand.Parameters.Add("@myReturnValue", OdbcType.Char, 1) .Direction = ParameterDirection.Output; fetchCommand.ExecuteNonQuery(); string returnValue = fetchCommand.Parameters["@myReturnValue"].Value.ToString(); if (returnValue == "1") { return true; }
bool bVal = Convert.ToBoolean(Convert.ToInt16(returnValue))
if (returnValue == "1") { return true; } else if (returnValue == "0") { return false; } else { throw new FormatException("The string is not a recognized as a valid boolean value."); }
Private Function ConvertToBoolean(p1 As Object) As Boolean If p1 Is Nothing Then Return False If IsDBNull(p1) Then Return False If p1.ToString = "1" Then Return True If p1.ToString.ToLower = "true" Then Return True Return False End Function
IEnumerable<string> namesList = !string.isNullOrEmpty(names) ? names.Split(
var split = new StringConverter().ConvertTo<List<string>>(names); var split = new StringConverter().ConvertTo<List<string>>(names, new ConverterOptions { Delimiter =
string str= "<a href="/Home/Profile/seeker">seeker</a> has applied to <a href="/Jobs/Details/9">Job</a> floated by you.</br>";
IHtmlString str = new HtmlString("<a href="/Home/Profile/seeker">seeker</a> has applied to <a href="/Jobs/Details/9">Job</a> floated by you.</br>");
<input class="ParmInput" type="text" id="respondingRangerUnit" name="respondingRangerUnit" onchange="validateInteger(this.value)" value="@ViewBag.respondingRangerUnit">
public void DebugTable(DataTable table) { Debug.WriteLine("--- DebugTable(" + table.TableName + ") ---"); int zeilen = table.Rows.Count; int spalten = table.Columns.Count; for (int i = 0; i < table.Columns.Count; i++) { string s = table.Columns[i].ToString(); Debug.Write(String.Format("{0,-20} | ", s)); } Debug.Write(Environment.NewLine); for (int i = 0; i < table.Columns.Count; i++) { Debug.Write("---------------------|-"); } Debug.Write(Environment.NewLine); for (int i = 0; i < zeilen; i++) { DataRow row = table.Rows[i]; for (int j = 0; j < spalten; j++) { string s = row[j].ToString(); if (s.Length > 20) s = s.Substring(0, 17) + "..."; Debug.Write(String.Format("{0,-20} | ", s)); } Debug.Write(Environment.NewLine); } for (int i = 0; i < table.Columns.Count; i++) { Debug.Write("---------------------|-"); } Debug.Write(Environment.NewLine); }
public static void printTbl(DataSet myDataset) { printTbl(myDataset.Tables[0]); } public static void printTbl(DataTable mytable) { for (int i = 0; i < mytable.Columns.Count; i++) { Debug.Write(mytable.Columns[i].ToString() + " | "); } Debug.Write(Environment.NewLine + "=======" + Environment.NewLine); for (int rrr = 0; rrr < mytable.Rows.Count; rrr++) { for (int ccc = 0; ccc < mytable.Columns.Count; ccc++) { Debug.Write(mytable.Rows[rrr][ccc] + " | "); } Debug.Write(Environment.NewLine); } } public static void ResponsePrintTbl(DataTable mytable) { for (int i = 0; i < mytable.Columns.Count; i++) { HttpContext.Current.Response.Write(mytable.Columns[i].ToString() + " | "); } HttpContext.Current.Response.Write("<BR>" + "=======" + "<BR>"); for (int rrr = 0; rrr < mytable.Rows.Count; rrr++) { for (int ccc = 0; ccc < mytable.Columns.Count; ccc++) { HttpContext.Current.Response.Write(mytable.Rows[rrr][ccc] + " | "); } HttpContext.Current.Response.Write("<BR>"); } } public static void printTblRow(DataSet myDataset, int RowNum) { printTblRow(myDataset.Tables[0], RowNum); } public static void printTblRow(DataTable mytable, int RowNum) { for (int ccc = 0; ccc < mytable.Columns.Count; ccc++) { Debug.Write(mytable.Columns[ccc].ToString() + " : "); Debug.Write(mytable.Rows[RowNum][ccc]); Debug.Write(Environment.NewLine); } }
public static void DebugDataSet ( string msg, ref System.Data.DataSet ds ) { WriteIf ( "===================================================" + msg + " START " ); if (ds != null) { WriteIf ( msg ); foreach (System.Data.DataTable dt in ds.Tables) { WriteIf ( "================= My TableName is " + dt.TableName + " ========================= START" ); int colNumberInRow = 0; foreach (System.Data.DataColumn dc in dt.Columns) { System.Diagnostics.Debug.Write ( " | " ); System.Diagnostics.Debug.Write ( " |" + colNumberInRow + "| " ); System.Diagnostics.Debug.Write ( dc.ColumnName + " | " ); colNumberInRow++; } int rowNum = 0; foreach (System.Data.DataRow dr in dt.Rows) { System.Diagnostics.Debug.Write ( "\n row " + rowNum + " --- " ); int colNumber = 0; foreach (System.Data.DataColumn dc in dt.Columns) { System.Diagnostics.Debug.Write ( " |" + colNumber + "| " ); System.Diagnostics.Debug.Write ( dr[dc].ToString () + " " ); colNumber++; } rowNum++; } System.Diagnostics.Debug.Write ( " \n" ); WriteIf ( "================= Table " + dt.TableName + " ========================= END" ); WriteIf ( "===================================================" + msg + " END " ); } } else { WriteIf ( "NULL DataSet object passed for debugging !!!" ); } } public static void WriteIf ( string msg ) { int output = System.Convert.ToInt16(System.Configuration.ConfigurationSettings.AppSettings["DebugOutput"] ); switch (output) { case 0: msg = String.Empty; break; case 1: System.Diagnostics.Debug.WriteIf ( System.Convert.ToBoolean( System.Configuration.ConfigurationSettings.AppSettings["Debugging"] ), DateTime.Now.ToString ( "yyyy:MM:dd -- hh:mm:ss.fff --- " ) + msg + "\n" ); break; case 2: string previousMsg = System.Convert.ToString (System.Web.HttpContext.Current.Session["global.DebugMsg"]); System.Web.HttpContext.Current.Session["global.DebugMsg"] = previousMsg + DateTime.Now.ToString ( "yyyy:MM:dd -- hh:mm:ss.fff --- " ) + msg + "\n </br>"; break; case 3: string previousMsg1 = System.Convert.ToString (System.Web.HttpContext.Current.Session["global.DebugMsg"] ); System.Web.HttpContext.Current.Session["global.DebugMsg"] = previousMsg1 + DateTime.Now.ToString ( "yyyy:MM:dd -- hh:mm:ss.fff --- " ) + msg + "\n"; System.Diagnostics.Debug.WriteIf ( System.Convert.ToBoolean( System.Configuration.ConfigurationSettings.AppSettings["Debugging"] ), DateTime.Now.ToString ( "yyyy:MM:dd -- hh:mm:ss.fff --- " ) + msg + "\n </br>" ); break; } }
public static class Helpers { private static ILog Log = Global.Log ?? LogManager.GetLogger("MyLogger"); public static void DebugTable(this DataTable table) { Log?.Debug("--- DebugTable(" + table.TableName + ") ---"); var nRows = table.Rows.Count; var nCols = table.Columns.Count; var nMaxColWidth = 32; var sColFormat = @"{0,-" + nMaxColWidth + @"} | "; var sLogMessage = string.Empty; for (var i = 0; i < table.Columns.Count; i++) { sLogMessage = string.Concat(sLogMessage, string.Format(sColFormat, table.Columns[i].ToString())); } Log?.Debug(sLogMessage); var sUnderScore = string.Empty; var sDashes = string.Empty; for (var j = 0; j <= nMaxColWidth; j++) { sDashes = sDashes + "-"; } for (var i = 0; i < table.Columns.Count; i++) { sUnderScore = string.Concat(sUnderScore, sDashes + "|-"); } sUnderScore = sUnderScore.TrimEnd( Log?.Debug(sUnderScore); for (var i = 0; i < nRows; i++) { DataRow row = table.Rows[i]; sLogMessage = string.Empty; for (var j = 0; j < nCols; j++) { string s = row[j].ToString(); if (s.Length > nMaxColWidth) s = s.Substring(0, nMaxColWidth - 3) + "..."; sLogMessage = string.Concat(sLogMessage, string.Format(sColFormat, s)); } Log?.Debug(sLogMessage); } Log?.Debug(sUnderScore); } }
var sSession; if (Session["variable"] != null) { sSession = Session["variable"].ToString(); } else { sSession = "set this"; Session["variable"] = sSession; }
public class SessionVar { static HttpSessionState Session { get { if (HttpContext.Current == null) throw new ApplicationException("No Http Context, No Session to Get!"); return HttpContext.Current.Session; } } public static T Get<T>(string key) { if (Session[key] == null) return default(T); else return (T)Session[key]; } public static void Set<T>(string key, T value) { Session[key] = value; } }
public static string GetString(string key) { string s = Get<string>(key); return s == null ? string.Empty : s; } public static void SetString(string key, string value) { Set<string>(key, value); }
public class CustomerInfo { public string Name { get { return SessionVar.GetString("CustomerInfo_Name"); } set { SessionVar.SetString("CustomerInfo_Name", value); } } }
sSession = (string)Session["variable"] ?? "set this";
string MySessionVar { get{ return Session["MySessionVar"] ?? String.Empty; } set{ Session["MySessionVar"] = value; } }
string mySessionVar = Session["mySessionVar"] as string;
int mySessionInt; if (!int.TryParse(mySessionVar, out mySessionInt)){ }
String sVar = (string)(Session["SessionVariable"] ?? "Default Value");
DateTime sDateVar = (datetime)(Session["DateValue"] ?? "2010-01-01"); Int NextYear = sDateVar.Year + 1; String Message = "The Procrastinators Club will open it (string)(Session["OpeningDate"] ?? NextYear);
private const string SESSION_VAR = "myString"; string sSession; if (Session[SESSION_VAR] != null) { sSession = (string)Session[SESSION_VAR]; } else { sSession = "set this"; Session[SESSION_VAR] = sSession; }
public class SessionProxy { private HttpSessionState session; public SessionProxy( HttpSessionState session ) { this.session = session; } public DateTime LastUpdate { get { return this.session["LastUpdate"] != null ? (DateTime)this.session["LastUpdate"] : DateTime.MinValue; } set { this.session["LastUpdate"] = value; } } public string UserLastName { get { return (string)this.session["UserLastName"]; } set { this.session["UserLastName"] = value; } } }
string Name { get { if(Session["Name"] == Null) Session["Name"] = "Default value"; return (string)Session["Name"]; } set { Session["Name"] = value; } }
if((Session["MySessionVariable"] ?? "").ToString() != "")
public static bool IsNull(this object input) { input == null ? return true : return false; } public void Main() { object x = new object(); if(x.IsNull) { } }
if (Session.Dictionary.ContainsKey("Sessionkey")) --> return Bool
var uri = new Uri(context.RedirectUri); var queryDictionary = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
var parametersToAdd = new System.Collections.Generic.Dictionary<string, string> { { "resource", "foo" } }; var someUrl = "http: var newUri = Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString(someUrl, parametersToAdd);
var rawurl = "https: var uri = new Uri(rawurl); var baseUri = uri.GetComponents(UriComponents.Scheme | UriComponents.Host | UriComponents.Port | UriComponents.Path, UriFormat.UriEscaped); var query = QueryHelpers.ParseQuery(uri.Query); var items = query.SelectMany(x => x.Value, (col, value) => new KeyValuePair<string, string>(col.Key, value)).ToList(); items.RemoveAll(x => x.Key == "key3"); items.RemoveAll(x => x.Key == "key2" && x.Value == "val2"); var qb = new QueryBuilder(items); qb.Add("nonce", "testingnonce"); qb.Add("payerId", "pyr_"); var fullUri = baseUri + qb.ToQueryString();
public abstract IReadableStringCollection Query { get; }
var rawurl = "https: var uri = new Uri(rawurl); Dictionary<string, string> queryString = ParseQueryString(uri.Query); public Dictionary<string, string> ParseQueryString(string requestQueryString) { Dictionary<string, string> rc = new Dictionary<string, string>(); string[] ar1 = requestQueryString.Split(new char[] { foreach (string row in ar1) { if (string.IsNullOrEmpty(row)) continue; int index = row.IndexOf( if (index < 0) continue; rc[Uri.UnescapeDataString(row.Substring(0, index))] = Uri.UnescapeDataString(row.Substring(index + 1)); } return rc; }
Response.Status = "404 Not Found"; Response.StatusCode = 404;
<asp:Content ID="ContentMain" ContentPlaceHolderID="ContentPlaceHolderMaster" runat="server"> <% Response.Status = "404 Not Found"; Response.StatusCode = 404; %> ... Much more code ... </asp:content>
protected override void Render(HtmlTextWriter writer) { base.Render(writer); Response.StatusCode = 404; }
<customErrors mode="On"> <error statusCode="404" redirect="404.aspx"/> </customErrors>
public partial class _04 : System.Web.UI.Page { protected void Page_Load(object sender, EventArgs e) { Response.StatusCode = 404; } }
HTTP/1.1 404 Not Found Server: Microsoft-IIS/5.1 Date: Sun, 07 Dec 2008 06:04:13 GMT X-Powered-By: ASP.NET X-AspNet-Version: 2.0.50727 Cache-Control: private Content-Type: text/html; charset=utf-8 Content-Length: 533
HTTP/1.1 404 Not Found Date: Sun, 07 Dec 2008 06:21:20 GMT
<system.webServer> <httpErrors existingResponse="Replace"> <remove statusCode="500" subStatusCode="-1" /> <remove statusCode="404" subStatusCode="-1" /> <error statusCode="404" prefixLanguageFilePath="" path="404.htm" responseMode="File" /> <error statusCode="500" prefixLanguageFilePath="" path="500.htm" responseMode="File" /> </httpErrors> </system.webServer>
Response.Status = "404 Not Found"; Response.StatusCode = 404; Response.End(); return;
<% Response.Status = "404 Not Found"; Response.StatusCode = 404; %>
<customErrors mode="RemoteOnly" defaultRedirect="~/error.htm" />
protected void Application_Error(object sender, EventArgs e) { HandleError(); } private void HandleError() { var exception = Server.GetLastError(); if (exception == null) return; var baseException = exception.GetBaseException(); bool errorHandled = _applicationErrorHandler.HandleError(baseException); if (!errorHandled) return; var lastError = Server.GetLastError(); if (null != lastError && HttpContext.Current.IsCustomErrorEnabled) { Elmah.ErrorSignal.FromCurrentContext().Raise(lastError.GetBaseException()); Server.ClearError(); } }
public bool HandleError(Exception exception) { if (exception == null) return false; var baseException = exception.GetBaseException(); Elmah.ErrorSignal.FromCurrentContext().Raise(baseException); if (!HttpContext.Current.IsCustomErrorEnabled) return false; try { var behavior = _responseBehaviorFactory.GetBehavior(exception); if (behavior != null) { behavior.ExecuteRedirect(); return true; } } catch (Exception ex) { Elmah.ErrorSignal.FromCurrentContext().Raise(ex); } return false; }
public ResponseBehaviorFactory() { _behaviors = new Dictionary<Type, Func<IResponseBehavior>> { {typeof(StoreException), () => new Found302StoreResponseBehavior()}, {typeof(HttpUnhandledException), () => new HttpExceptionResponseBehavior()}, {typeof(HttpException), () => new HttpExceptionResponseBehavior()}, {typeof(Exception), () => new Found302DefaultResponseBehavior()} }; } public IResponseBehavior GetBehavior(Exception exception) { if (exception == null) throw new ArgumentNullException("exception"); Func<IResponseBehavior> behavior; bool tryGetValue = _behaviors.TryGetValue(exception.GetType(), out behavior); if (!tryGetValue) _behaviors.TryGetValue(typeof(Exception), out behavior); if (behavior == null) Elmah.ErrorSignal.FromCurrentContext().Raise( new Exception( "Danger! No Behavior defined for this Exception, therefore the user might have received a yellow screen of death!", exception)); return behavior(); }
if (Request.Cookies["userId"] != null) { Response.Cookies["userId"].Expires = DateTime.Now.AddDays(-1); }
if (Request.Cookies["UserSettings"] != null) { HttpCookie myCookie = new HttpCookie("UserSettings"); myCookie.Expires = DateTime.Now.AddDays(-1d); Response.Cookies.Add(myCookie); }
private void ExpireAllCookies() { if (HttpContext.Current != null) { int cookieCount = HttpContext.Current.Request.Cookies.Count; for (var i = 0; i < cookieCount; i++) { var cookie = HttpContext.Current.Request.Cookies[i]; if (cookie != null) { var expiredCookie = new HttpCookie(cookie.Name) { Expires = DateTime.Now.AddDays(-1), Domain = cookie.Domain }; HttpContext.Current.Response.Cookies.Add(expiredCookie); } } HttpContext.Current.Request.Cookies.Clear(); } }
HttpContext.Current.Session.Abandon(); HttpContext.Current.Response.Cookies.Add(new HttpCookie("ASP.NET_SessionId", ""));
Session.Abandon(); Response.Cookies.Add(new HttpCookie("ASP.NET_SessionId", ""));
HttpCookie aCookie; string cookieName; int limit = Request.Cookies.Count; for (int i=0; i<limit; i++) { cookieName = Request.Cookies[i].Name; aCookie = new HttpCookie(cookieName); aCookie.Expires = DateTime.Now.AddDays(-1); Response.Cookies.Add(aCookie); }
int limit = Request.Cookies.Count; HttpCookie aCookie; string cookieName; for(int i = 0; i < limit; i++) { cookieName = Request.Cookies[i].Name; aCookie = new HttpCookie(cookieName); aCookie.Value = ""; aCookie.Expires = DateTime.Now.AddDays(-1); Response.Cookies.Add(aCookie); }
... aCookie = new HttpCookie(cookieName); if (aCookie.Name != "__utmz") { aCookie.Value = ""; aCookie.Expires = DateTime.Now.AddDays(-1); HttpContext.Current.Response.Cookies.Add(aCookie); }
HttpCookie mycookie = new HttpCookie("aa"); mycookie.Expires = DateTime.Now.AddDays(-1d); Response.Cookies.Add(mycookie1);
if(Request.Cookies["aa"] != null) { Response.Cookies.Delete("aa"); } return View();
using System; using System.Linq; using Microsoft.Web.XmlTransform; namespace TransformConfig { class Program { static int Main(string[] args) { var myDocumentsFolder = $@"C:\Users\{Environment.UserName}\Documents"; var myVsProjects = $@"{myDocumentsFolder}\Visual Studio 2015\Projects"; string srcConfigFileName = "Web.config"; string tgtConfigFileName = srcConfigFileName; string transformFileName = "Web.Debug.config"; string basePath = myVsProjects + @"\"; try { var numArgs = args?.Count() ?? 0; if (numArgs == 0 || args.Any(x=>x=="/?")) { Console.WriteLine("\nTransformConfig - Usage:"); Console.WriteLine("\tTransformConfig.exe /d:tgtConfigFileName [/t:transformFileName [/s:srcConfigFileName][/b:basePath]]"); Console.WriteLine($"\nIf Console.WriteLine("\nTransformConfig - Example (inside PostBuild event):"); Console.WriteLine("\t\"c:\\Tools\\TransformConfig.exe\" /d:Web.config /t:Web.$(ConfigurationName).config /s:Web.Template.config /b:\"$(ProjectDir)\\\""); Environment.ExitCode = 1; return 1; } foreach (var a in args) { var param = a.Trim().Substring(3).TrimStart(); switch (a.TrimStart().Substring(0,2).ToLowerInvariant()) { case "/d": tgtConfigFileName = param ?? tgtConfigFileName; break; case "/t": transformFileName = param ?? transformFileName; break; case "/b": var isPath = (param ?? "").Contains("\\"); basePath = (isPath == false) ? $@"{myVsProjects}\" + param ?? "" : param; break; case "/s": srcConfigFileName = param ?? srcConfigFileName; break; default: break; } } basePath = System.IO.Path.GetFullPath(basePath); if (!basePath.EndsWith("\\")) basePath += "\\"; if (tgtConfigFileName != srcConfigFileName) { System.IO.File.Copy(basePath + srcConfigFileName, basePath + tgtConfigFileName, true); } TransformConfig(basePath + tgtConfigFileName, basePath + transformFileName); Console.WriteLine($"TransformConfig - transformed Environment.ExitCode = 0; return 0; } catch (Exception ex) { var msg = $"{ex.Message}\nParameters:\n/d:{tgtConfigFileName}\n/t:{transformFileName}\n/s:{srcConfigFileName}\n/b:{basePath}"; Console.WriteLine($"TransformConfig - Exception occurred: {msg}"); Console.WriteLine($"TransformConfig - Processing aborted."); Environment.ExitCode = 2; return 2; } } public static void TransformConfig(string configFileName, string transformFileName) { var document = new XmlTransformableDocument(); document.PreserveWhitespace = true; document.Load(configFileName); var transformation = new XmlTransformation(transformFileName); if (!transformation.Apply(document)) { throw new Exception("Transformation Failed"); } document.Save(configFileName); } } }
System.Net.WebRequestMethods.Http .Connect = "CONNECT" .Get = "GET" .Head = "HEAD" .MkCol = "MKCOL" .Post = "POST" .Put = "PUT"
Private Function RFC2445TextField(ByVal LongText As String) As String LongText = LongText.Replace("\", "\\") LongText = LongText.Replace(";", "\;") LongText = LongText.Replace(",", "\,") Dim sBuilder As New StringBuilder Dim charArray() As Char = LongText.ToCharArray For i = 1 To charArray.Length sBuilder.Append(charArray(i - 1)) If i Mod 74 = 0 Then sBuilder.Append(vbCrLf & " ") Next Return sBuilder.ToString End Function
DESCRIPTION:Meeting to provide technical review for "Phoenix" design.\n Happy Face Conference Room. Phoenix design team MUST attend this meeting.\n RSVP to team leader.
BEGIN:VCALENDAR VERSION:2.0 PRODID:- CALSCALE:GREGORIAN METHOD:PUBLISH BEGIN:VEVENT DTSTAMP:20170509T164109Z UID:your id-11273661 DTSTART:20170509T190000Z DTEND:20170509T191500Z CLASS:PRIVATE DESCRIPTION:Event Name: 15 Minute Meeting\nDate & Time: 03:00pm - 03:15pm ( Eastern Time - US & Canada) on Tuesday\, May 9\, 2017\n\nBest Phone Number To Reach You :: xxxxxxxxx\n\nany "link": https: SUMMARY:15 Minute Meeting TRANSP:OPAQUE END:VEVENT END:VCALENDAR
DateTime IcsDateStart = DateTime.Now.AddDays(2); DateTime IcsDateEnd = IcsDateStart.AddMinutes(90); string IcsSummary = "ASP.Net demo snippet"; string IcsLocation = "Amsterdam (Netherlands)"; string IcsDescription = @"This snippes show you how to create a calendar item file (.ics) in ASP.NET.\nMay it be useful for you."; string IcsFileName = "MyCalendarFile"; StringBuilder sb = new StringBuilder(); sb.AppendLine("BEGIN:VCALENDAR"); sb.AppendLine("VERSION:2.0"); sb.AppendLine("PRODID:stackoverflow.com"); sb.AppendLine("CALSCALE:GREGORIAN"); sb.AppendLine("METHOD:PUBLISH"); sb.AppendLine("BEGIN:VTIMEZONE"); sb.AppendLine("TZID:Europe/Amsterdam"); sb.AppendLine("BEGIN:STANDARD"); sb.AppendLine("TZOFFSETTO:+0100"); sb.AppendLine("TZOFFSETFROM:+0100"); sb.AppendLine("END:STANDARD"); sb.AppendLine("END:VTIMEZONE"); sb.AppendLine("BEGIN:VEVENT"); sb.AppendLine("DTSTART;TZID=Europe/Amsterdam:" + IcsDateStart.ToString("yyyyMMddTHHmm00")); sb.AppendLine("DTEND;TZID=Europe/Amsterdam:" + IcsDateEnd.ToString("yyyyMMddTHHmm00")); sb.AppendLine("SUMMARY:" + IcsSummary + ""); sb.AppendLine("LOCATION:" + IcsLocation + ""); sb.AppendLine("DESCRIPTION:" + IcsDescription + ""); sb.AppendLine("PRIORITY:3"); sb.AppendLine("END:VEVENT"); sb.AppendLine("END:VCALENDAR"); string CalendarItemAsString = sb.ToString(); Response.ClearHeaders(); Response.Clear(); Response.Buffer = true; Response.ContentType = "text/calendar"; Response.AddHeader("content-length", CalendarItemAsString.Length.ToString()); Response.AddHeader("content-disposition", "attachment; filename=\"" + IcsFileName + ".ics\""); Response.Write(CalendarItemAsString); Response.Flush(); HttpContext.Current.ApplicationInstance.CompleteRequest();
<system.webServer> <security> <requestFiltering allowDoubleEscaping="true" /> </security> </system.webServer>
public ActionResult Tags(string id) { var sql = "SELECT * FROM Tags Where tagName = }
/product/tags/for+families --> /product/tags/for%2Bfamilies --> /product/tags/for%252Bfamilies
reserved = ";" | "/" | "?" | ":" | "@" | "&" | "=" | "+" | "$" | ","
appcmd.exe set config "Default Web Site" -section:system.webServer/security/requestFiltering /allowDoubleEscaping:True
appcmd.exe set config "Default Web Site" -section:system.webServer/security/requestFiltering /+"alwaysAllowedUrls.[url=
var tags = new[] { "for", "family" }; var apiRequest = new RestRequest($"product/tags/{HttpUtility.UrlPathEncode(string.Join("+", tags))}");
<b>Hello World.</b><br/><p><i>Is there anyone out there?</i><p>
private static string HtmlToPlainText(string html) { const string tagWhiteSpace = @"(>|$)(\W|\n|\r)+<"; const string stripFormatting = @"<[^>]*(>|$)"; const string lineBreak = @"<(br|BR)\s{0,1}\/{0,1}>"; var lineBreakRegex = new Regex(lineBreak, RegexOptions.Multiline); var stripFormattingRegex = new Regex(stripFormatting, RegexOptions.Multiline); var tagWhiteSpaceRegex = new Regex(tagWhiteSpace, RegexOptions.Multiline); var text = html; text = System.Net.WebUtility.HtmlDecode(text); text = tagWhiteSpaceRegex.Replace(text, "><"); text = lineBreakRegex.Replace(text, Environment.NewLine); text = stripFormattingRegex.Replace(text, string.Empty); return text; }
public static void HtmlEncode( string s, TextWriter output )
String TestString = "This is a <Test String>."; StringWriter writer = new StringWriter(); Server.HtmlEncode(TestString, writer); String EncodedString = writer.ToString();
private string StripHtml(string source) { string output; output = Regex.Replace(source, "<[^>]*>", string.Empty); output = Regex.Replace(output, @"^\s*$\n", string.Empty, RegexOptions.Multiline); return output; }
HtmlDocument doc = new HtmlDocument(); doc.LoadHtml(htmlString); var textString = doc.DocumentNode.InnerText; Regex.Replace(textString , @"<(.|n)*?>", string.Empty).Replace("&nbsp", "");
public class HtmlToText { public HtmlToText() { } public string Convert(string path) { HtmlDocument doc = new HtmlDocument(); doc.Load(path); StringWriter sw = new StringWriter(); ConvertTo(doc.DocumentNode, sw); sw.Flush(); return sw.ToString(); } public string ConvertHtml(string html) { HtmlDocument doc = new HtmlDocument(); doc.LoadHtml(html); StringWriter sw = new StringWriter(); ConvertTo(doc.DocumentNode, sw); sw.Flush(); return sw.ToString(); } private void ConvertContentTo(HtmlNode node, TextWriter outText) { foreach(HtmlNode subnode in node.ChildNodes) { ConvertTo(subnode, outText); } } public void ConvertTo(HtmlNode node, TextWriter outText) { string html; switch(node.NodeType) { case HtmlNodeType.Comment: break; case HtmlNodeType.Document: ConvertContentTo(node, outText); break; case HtmlNodeType.Text: string parentName = node.ParentNode.Name; if ((parentName == "script") || (parentName == "style")) break; html = ((HtmlTextNode)node).Text; if (HtmlNode.IsOverlappedClosingElement(html)) break; if (html.Trim().Length > 0) { outText.Write(HtmlEntity.DeEntitize(html)); } break; case HtmlNodeType.Element: switch(node.Name) { case "p": outText.Write("\r\n"); break; } if (node.HasChildNodes) { ConvertContentTo(node, outText); } break; } } }
HtmlToText htt=new HtmlToText(); var plainText = htt.ConvertHtml(HTMLContent);
static string HtmlToPlainText(string html) { string buf; string block = "address|article|aside|blockquote|canvas|dd|div|dl|dt|" + "fieldset|figcaption|figure|footer|form|h\\d|header|hr|li|main|nav|" + "noscript|ol|output|p|pre|section|table|tfoot|ul|video"; string patNestedBlock = $"(\\s*?</?({block})[^>]*?>)+\\s*"; buf = Regex.Replace(html, patNestedBlock, "\n", RegexOptions.IgnoreCase); buf = Regex.Replace(buf, @"<(br)[^>]*>", "\n", RegexOptions.IgnoreCase); buf = Regex.Replace(buf, @"<(script|style)[^>]*?>.*?</\1>", "", RegexOptions.Singleline); buf = Regex.Replace(buf, @"<[^>]*(>|$)", "", RegexOptions.Multiline); buf = WebUtility.HtmlDecode(buf); return buf; }
using System; using System.Text.RegularExpressions; public static class StringHelpers { public static string StripHTML(this string HTMLText) { var reg = new Regex("<[^>]+>", RegexOptions.IgnoreCase); return reg.Replace(HTMLText, ""); } }
var yourHtmlString = "<div class=\"someclass\"><h2>yourHtmlText</h2></span>"; var yourTextString = yourHtmlString.StripHTML();
private string ConvertHtml_Totext(string source) { try { string result; result = source.Replace("\r", " "); result = result.Replace("\n", " "); result = result.Replace("\t", string.Empty); result = System.Text.RegularExpressions.Regex.Replace(result, @"( )+", " "); result = System.Text.RegularExpressions.Regex.Replace(result, @"<( )*head([^>])*>","<head>", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"(<( )*(/)( )*head( )*>)","</head>", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, "(<head>).*(</head>)",string.Empty, System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"<( )*script([^>])*>","<script>", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"(<( )*(/)( )*script( )*>)","</script>", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"(<script>).*(</script>)",string.Empty, System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"<( )*style([^>])*>","<style>", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"(<( )*(/)( )*style( )*>)","</style>", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, "(<style>).*(</style>)",string.Empty, System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"<( )*td([^>])*>","\t", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"<( )*br( )*>","\r", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"<( )*li( )*>","\r", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"<( )*div([^>])*>","\r\r", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"<( )*tr([^>])*>","\r\r", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"<( )*p([^>])*>","\r\r", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"<[^>]*>",string.Empty, System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @" "," ", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"&bull;"," * ", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"&lsaquo;","<", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"&rsaquo;",">", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"&trade;","(tm)", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"&frasl;","/", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"&lt;","<", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"&gt;",">", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"&copy;","(c)", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"&reg;","(r)", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, @"&(.{2,6});", string.Empty, System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = result.Replace("\n", "\r"); result = System.Text.RegularExpressions.Regex.Replace(result, "(\r)( )+(\r)","\r\r", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, "(\t)( )+(\t)","\t\t", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, "(\t)( )+(\r)","\t\r", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, "(\r)( )+(\t)","\r\t", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, "(\r)(\t)+(\r)","\r\r", System.Text.RegularExpressions.RegexOptions.IgnoreCase); result = System.Text.RegularExpressions.Regex.Replace(result, "(\r)(\t)+","\r\t", System.Text.RegularExpressions.RegexOptions.IgnoreCase); string breaks = "\r\r\r"; string tabs = "\t\t\t\t\t"; for (int index=0; index<result.Length; index++) { result = result.Replace(breaks, "\r\r"); result = result.Replace(tabs, "\t\t\t\t"); breaks = breaks + "\r"; tabs = tabs + "\t"; } return result; } catch { MessageBox.Show("Error"); return source; }
public string StripHTML(string html) { var regex = new Regex("<[^>]+>", RegexOptions.IgnoreCase); return System.Web.HttpUtility.HtmlDecode((regex.Replace(html, ""))); }
string.Join (Environment.NewLine, XDocument.Parse (html).Root.Elements ().Select (el => el.Value))
using HtmlAgilityPack; using System; using System.IO; using System.Text.RegularExpressions; namespace foo { public static class HtmlToText { public static string Convert(string path) { HtmlDocument doc = new HtmlDocument(); doc.Load(path); return ConvertDoc(doc); } public static string ConvertHtml(string html) { HtmlDocument doc = new HtmlDocument(); doc.LoadHtml(html); return ConvertDoc(doc); } public static string ConvertDoc(HtmlDocument doc) { using (StringWriter sw = new StringWriter()) { ConvertTo(doc.DocumentNode, sw); sw.Flush(); return sw.ToString(); } } internal static void ConvertContentTo(HtmlNode node, TextWriter outText, PreceedingDomTextInfo textInfo) { foreach (HtmlNode subnode in node.ChildNodes) { ConvertTo(subnode, outText, textInfo); } } public static void ConvertTo(HtmlNode node, TextWriter outText) { ConvertTo(node, outText, new PreceedingDomTextInfo(false)); } internal static void ConvertTo(HtmlNode node, TextWriter outText, PreceedingDomTextInfo textInfo) { string html; switch (node.NodeType) { case HtmlNodeType.Comment: break; case HtmlNodeType.Document: ConvertContentTo(node, outText, textInfo); break; case HtmlNodeType.Text: string parentName = node.ParentNode.Name; if ((parentName == "script") || (parentName == "style")) { break; } html = ((HtmlTextNode)node).Text; if (HtmlNode.IsOverlappedClosingElement(html)) { break; } if (html.Length == 0) { break; } if (!textInfo.WritePrecedingWhiteSpace || textInfo.LastCharWasSpace) { html = html.TrimStart(); if (html.Length == 0) { break; } textInfo.IsFirstTextOfDocWritten.Value = textInfo.WritePrecedingWhiteSpace = true; } outText.Write(HtmlEntity.DeEntitize(Regex.Replace(html.TrimEnd(), @"\s{2,}", " "))); if (textInfo.LastCharWasSpace = char.IsWhiteSpace(html[html.Length - 1])) { outText.Write( } break; case HtmlNodeType.Element: string endElementString = null; bool isInline; bool skip = false; int listIndex = 0; switch (node.Name) { case "nav": skip = true; isInline = false; break; case "body": case "section": case "article": case "aside": case "h1": case "h2": case "header": case "footer": case "address": case "main": case "div": case "p": if (textInfo.IsFirstTextOfDocWritten) { outText.Write("\r\n"); } endElementString = "\r\n"; isInline = false; break; case "br": outText.Write("\r\n"); skip = true; textInfo.WritePrecedingWhiteSpace = false; isInline = true; break; case "a": if (node.Attributes.Contains("href")) { string href = node.Attributes["href"].Value.Trim(); if (node.InnerText.IndexOf(href, StringComparison.InvariantCultureIgnoreCase) == -1) { endElementString = "<" + href + ">"; } } isInline = true; break; case "li": if (textInfo.ListIndex > 0) { outText.Write("\r\n{0}.\t", textInfo.ListIndex++); } else { outText.Write("\r\n*\t"); } isInline = false; break; case "ol": listIndex = 1; goto case "ul"; case "ul": endElementString = "\r\n"; isInline = false; break; case "img": if (node.Attributes.Contains("alt")) { outText.Write( endElementString = "]"; } if (node.Attributes.Contains("src")) { outText.Write( } isInline = true; break; default: isInline = true; break; } if (!skip && node.HasChildNodes) { ConvertContentTo(node, outText, isInline ? textInfo : new PreceedingDomTextInfo(textInfo.IsFirstTextOfDocWritten) { ListIndex = listIndex }); } if (endElementString != null) { outText.Write(endElementString); } break; } } } internal class PreceedingDomTextInfo { public PreceedingDomTextInfo(BoolWrapper isFirstTextOfDocWritten) { IsFirstTextOfDocWritten = isFirstTextOfDocWritten; } public bool WritePrecedingWhiteSpace { get; set; } public bool LastCharWasSpace { get; set; } public readonly BoolWrapper IsFirstTextOfDocWritten; public int ListIndex { get; set; } } internal class BoolWrapper { public BoolWrapper() { } public bool Value { get; set; } public static implicit operator bool(BoolWrapper boolWrapper) { return boolWrapper.Value; } public static implicit operator BoolWrapper(bool boolWrapper) { return new BoolWrapper { Value = boolWrapper }; } } }
string id; id = User.Identity.GetUserId(); id = RequestContext.Principal.Identity.GetUserId();
public string UserIdentity { get { var user = UserManager.FindByName(User.Identity.Name); return user; } }
public ApplicationUserManager UserManager { get { return HttpContext.Current.GetOwinContext().GetUserManager<ApplicationUserManager>(); } }
using Microsoft.AspNet.Identity; using Microsoft.AspNet.Identity.Owin;
string userName; string userId; if (HttpContext.Current != null && HttpContext.Current.User != null && HttpContext.Current.User.Identity.Name != null) { userName = HttpContext.Current.User.Identity.Name; userId = HttpContext.Current.User.Identity.GetUserId(); }
object httpContext; actionContext.Request.Properties.TryGetValue("MS_HttpContext", out httpContext);
public static void ReloadEntity<TEntity>( this DbContext context, TEntity entity) where TEntity : class { context.Entry(entity).Reload(); }
public static void ReloadNavigationProperty<TEntity, TElement>( this DbContext context, TEntity entity, Expression<Func<TEntity, ICollection<TElement>>> navigationProperty) where TEntity : class where TElement : class { context.Entry(entity).Collection<TElement>(navigationProperty).Query(); }
public void RefreshAll() { foreach (var entity in ctx.ChangeTracker.Entries()) { entity.Reload(); } }
public void RefreshAll() { var refreshableObjects = (from entry in context.ObjectStateManager.GetObjectStateEntries(EntityState.Deleted | EntityState.Modified | EntityState.Unchanged) where entry.EntityKey != null select entry.Entity); context.Refresh(RefreshMode.StoreWins, refreshableObjects); }
context.Refresh(RefreshMode.StoreWins, yourEntity);
context.Entry(entity).State = EntityState.Detached; entity = context.Find(entity.ID);
<asp:repeater id="rptRepeater" runat="server"> <itemtemplate> Item <% </itemtemplate> <separatortemplate> <br /> </separatortemplate> </asp:repeater>
<asp:Repeater ID="rptr" runat="server" OnItemCreated="RepeaterItemCreated"> <ItemTemplate> <div id="width:50%;height:30px;background: <asp:Label ID="lblSr" runat="server" style="width:30%;float:left;text-align:right;text-indent:-2px;" /> <span style="width:65%;float:right;text-align:left;text-indent:-2px;" > <% </span> </div> </ItemTemplate> </asp:Repeater>
protected void RepeaterItemCreated(object sender, RepeaterItemEventArgs e) { Label l = e.Item.FindControl("lblSr") as Label; if (l != null) l.Text = e.Item.ItemIndex + 1+""; }
<?xml version="1.0"?> <!-- For more information on using web.config transformation visit http: <configuration xmlns:xdt="http: <connectionStrings> <add name="ApplicationServices" connectionString="data source=.\SQLEXPRESS;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\aspnetdb.mdf;User Instance=true" providerName="System.Data.SqlClient" /> <add name="Testing1" connectionString="Data Source=test;Initial Catalog=TestDatabase;Integrated Security=True" providerName="System.Data.SqlClient" /> </connectionStrings> <system.web> <compilation xdt:Transform="RemoveAttributes(debug)" /> </system.web> </configuration>
<?xml version="1.0"?> <!-- For more information on using web.config transformation visit http: <configuration xmlns:xdt="http: <connectionStrings> <add name="ApplicationServices" connectionString="data source=.\SQLEXPRESS;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\aspnetdb.mdf;User Instance=true" providerName="System.Data.SqlClient" /> <add name="Live1" connectionString="Data Source=Live;Initial Catalog=LiveDatabase;Integrated Security=True" providerName="System.Data.SqlClient" /> </connectionStrings> <system.web> <compilation xdt:Transform="RemoveAttributes(debug)" /> </system.web> </configuration>
<?xml version="1.0"?> <!-- For more information on how to configure your ASP.NET application, please visit http: <configuration> <system.web> <compilation debug="true" targetFramework="4.0" /> <authentication mode="Forms"> <forms loginUrl="~/Account/Login.aspx" timeout="2880" /> </authentication> <membership> <providers> <clear/> <add name="AspNetSqlMembershipProvider" type="System.Web.Security.SqlMembershipProvider" connectionStringName="ApplicationServices" enablePasswordRetrieval="false" enablePasswordReset="true" requiresQuestionAndAnswer="false" requiresUniqueEmail="false" maxInvalidPasswordAttempts="5" minRequiredPasswordLength="6" minRequiredNonalphanumericCharacters="0" passwordAttemptWindow="10" applicationName="/" /> </providers> </membership> <profile> <providers> <clear/> <add name="AspNetSqlProfileProvider" type="System.Web.Profile.SqlProfileProvider" connectionStringName="ApplicationServices" applicationName="/"/> </providers> </profile> <roleManager enabled="false"> <providers> <clear/> <add name="AspNetSqlRoleProvider" type="System.Web.Security.SqlRoleProvider" connectionStringName="ApplicationServices" applicationName="/" /> <add name="AspNetWindowsTokenRoleProvider" type="System.Web.Security.WindowsTokenRoleProvider" applicationName="/" /> </providers> </roleManager> </system.web> <system.webServer> <modules runAllManagedModulesForAllRequests="true"/> </system.webServer> </configuration>
xdt:Transform="SetAttributes" xdt:Locator="Match(name)"
<connectionStrings> <add name="EAF" connectionString="Data Source=NTSQLT\S2K5TST;Initial Catalog=HR;User ID=EAFApp;Password=XXXX" providerName="System.Data.SqlClient" /> </connectionString>
<connectionStrings> <add name="EAF" connectionString="Data Source=NTSQLP\S2K5TST;Initial Catalog=HR;User ID=EAFApp;Password=YYYY" xdt:Transform="SetAttributes" xdt:Locator="Match(name)" /> </connectionStrings>
<Target Name="TransformActiveConfiguration" Condition="Exists( <TransformXml Source="$(ProjectDir)/Web.Config" Transform="$(ProjectDir)/Web.$(Configuration).config" Destination="$(TargetDir)/Web.config" /> </Target>
$(SolutionDir)packages\ConfigTransform\ctt.exe source:"$(ProjectDir)connectionStrings.config" transform:"$(ProjectDir)connectionStrings.$(ConfigurationName).config" destination:"$(ProjectDir)connectionStrings.config" $(SolutionDir)packages\ConfigTransform\ctt.exe source:"$(ProjectDir)web.config" transform:"$(ProjectDir)web.$(ConfigurationName).config" destination:"$(ProjectDir)web.config"
<configuration xmlns:xdt="http: <connectionStrings xdt:Transform="Replace"> <!-- production environment config ---> <add name="ApplicationServices" connectionString="data source=.\SQLEXPRESS;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\aspnetdb.mdf;User Instance=true" providerName="System.Data.SqlClient" /> <add name="Testing1" connectionString="Data Source=test;Initial Catalog=TestDatabase;Integrated Security=True" providerName="System.Data.SqlClient" /> </connectionStrings> ....
<li><a href="/Users/Index)" class="elements"><span>Clients</span></a></li>
<li> @Html.ActionLink("Clients", "Index", "User", new { @class = "elements" }, null) </li>
<li> <a href="@Url.Action("Index", "Users")" class="elements"> <span>Clients</span> </a> </li>
<a href="@Url.Action("Index", null, new { area = string.Empty, controller = "User" }, Request.Url.Scheme)"> <span>Clients</span> </a>
<li> <a href="@Url.Action("Index", "Users")" class="elements"><span>Clients</span></a> </li>
<li><a href="./Index" class="elements"><span>Clients</span></a></li>
<li><a href="../newController/Index" class="elements"><span>Clients</span></a></li>
@Html.ActionLink("Come back to Home", "Index", "Home")
private static object ThisLock = new object(); public string GetFoo() { lock (ThisLock) { } }
private static object ThisLock = new object(); ... object dataObject = Cache["globalData"]; if( dataObject == null ) { lock( ThisLock ) { dataObject = Cache["globalData"]; if( dataObject == null ) { dataObject = GlobalObj.GetData(); Cache["globalData"] = dataObject; } } } return dataObject;
private T GetOrAddToCache<T>(string cacheKey, GenericObjectParamsDelegate<T> creator, params object[] creatorArgs) where T : class, new() { T returnValue = HttpContext.Current.Cache[cacheKey] as T; if (returnValue == null) { lock (this) { returnValue = HttpContext.Current.Cache[cacheKey] as T; if (returnValue == null) { returnValue = creator(creatorArgs); if (returnValue == null) { throw new Exception("Attempt to cache a null reference"); } HttpContext.Current.Cache.Add( cacheKey, returnValue, null, System.Web.Caching.Cache.NoAbsoluteExpiration, System.Web.Caching.Cache.NoSlidingExpiration, CacheItemPriority.Normal, null); } } } return returnValue; }
using System; using System.Collections.Concurrent; using System.Web.Caching; public static class CacheExtensions { private static ConcurrentDictionary<string, object> keyLocks = new ConcurrentDictionary<string, object>(); public static T GetOrAdd<T>(this Cache cache, string key, int durationInSeconds, Func<T> factory) where T : class { var value = cache.Get(key); if (value == null) { lock (keyLocks.GetOrAdd(key, new object())) { value = cache.Get(key); if (value == null && (value = factory()) != null) { cache.Insert( key: key, value: value, dependencies: null, absoluteExpiration: DateTime.Now.AddSeconds(durationInSeconds), slidingExpiration: Cache.NoSlidingExpiration, priority: CacheItemPriority.Default, onRemoveCallback: null); } keyLocks.TryRemove(key, out object locker); } } return value as T; } }
private static readonly object _lock = new object(); public static TResult GetOrAdd<TResult>(this Cache cache, string key, Func<TResult> action, int duration = 300) { TResult result; var data = cache[key]; if (data == null) { lock (_lock) { data = cache[key]; if (data == null) { result = action(); if (result == null) return result; if (duration > 0) cache.Insert(key, result, null, DateTime.UtcNow.AddSeconds(duration), TimeSpan.Zero); } else result = (TResult)data; } } else result = (TResult)data; return result; }
private static object _listLock = new object(); public List List() { string cacheKey = "customers"; List myList = Cache[cacheKey] as List; if(myList == null) { lock (_listLock) { myList = Cache[cacheKey] as List; if (myList == null) { myList = DAL.ListCustomers(); Cache.Insert(cacheKey, mList, null, SiteConfig.CacheDuration, TimeSpan.Zero); } } } return myList; }
private static readonly object _lock = new object(); public static object GetOrAdd<TResult>(this Cache cache, string key, Func<TResult> action, DateTime absoluteExpireTime, TimeSpan slidingExpireTime, bool getOnly, out bool oldValueReturned) { object result; var data = cache[key]; if (data == null) { lock (_lock) { data = cache[key]; if (data == null) { oldValueReturned = false; result = action(); if (result == null) { return result; } cache.Insert(key, result, null, absoluteExpireTime, slidingExpireTime); } else { if (getOnly) { oldValueReturned = true; result = data; } else { oldValueReturned = false; result = action(); if (result == null) { return result; } cache.Insert(key, result, null, absoluteExpireTime, slidingExpireTime); } } } } else { if(getOnly) { oldValueReturned = true; result = data; } else { oldValueReturned = false; result = action(); if (result == null) { return result; } cache.Insert(key, result, null, absoluteExpireTime, slidingExpireTime); } } return result; }
using Microsoft.AspNet.Identity; int userId = User.Identity.GetUserId<int>();
<%@ Page Language="C <html> <head id="Head1" runat="server"><title>Email Test Page</title></head> <body> <form id="form1" runat="server"> Message to: <asp:TextBox ID="txtTo" runat="server" /><br> Message from: <asp:TextBox ID="txtFrom" runat="server" /><br> Subject: <asp:TextBox ID="txtSubject" runat="server" /><br> Message Body:<br> <asp:TextBox ID="txtBody" runat="server" Height="171px" TextMode="MultiLine" Width="270px" /><br> <asp:Button ID="Btn_SendMail" runat="server" onclick="Btn_SendMail_Click" Text="Send Email" /><br> <asp:Label ID="Label1" runat="server" Text="Label"></asp:Label> </form> </body> </html>
using System; using System.Web.UI.WebControls; using System.Net.Mail; public partial class SendMail : System.Web.UI.Page { protected void Btn_SendMail_Click(object sender, EventArgs e) { MailMessage mailObj = new MailMessage( txtFrom.Text, txtTo.Text, txtSubject.Text, txtBody.Text); SmtpClient SMTPServer = new SmtpClient("127.0.0.1"); try { SMTPServer.Send(mailObj); } catch (Exception ex) { Label1.Text = ex.ToString(); } } }
SmtpClient smtpClient = new SmtpClient("mail.MyWebsiteDomainName.com", 25); smtpClient.Credentials = new System.Net.NetworkCredential("info@MyWebsiteDomainName.com", "myIDPassword"); smtpClient.UseDefaultCredentials = true; smtpClient.DeliveryMethod = SmtpDeliveryMethod.Network; smtpClient.EnableSsl = true; MailMessage mail = new MailMessage(); mail.From = new MailAddress("info@MyWebsiteDomainName", "MyWeb Site"); mail.To.Add(new MailAddress("info@MyWebsiteDomainName")); mail.CC.Add(new MailAddress("MyEmailID@gmail.com")); smtpClient.Send(mail);
protected void btn_send_Click(object sender, EventArgs e) { System.Net.Mail.MailMessage mail = new System.Net.Mail.MailMessage(); mail.To.Add("to gmail address"); mail.From = new MailAddress("from gmail address", "Email head", System.Text.Encoding.UTF8); mail.Subject = "This mail is send from asp.net application"; mail.SubjectEncoding = System.Text.Encoding.UTF8; mail.Body = "This is Email Body Text"; mail.BodyEncoding = System.Text.Encoding.UTF8; mail.IsBodyHtml = true; mail.Priority = MailPriority.High; SmtpClient client = new SmtpClient(); client.Credentials = new System.Net.NetworkCredential("from gmail address", "your gmail account password"); client.Port = 587; client.Host = "smtp.gmail.com"; client.EnableSsl = true; try { client.Send(mail); Page.RegisterStartupScript("UserMsg", "<script>alert( } catch (Exception ex) { Exception ex2 = ex; string errorMessage = string.Empty; while (ex2 != null) { errorMessage += ex2.ToString(); ex2 = ex2.InnerException; } Page.RegisterStartupScript("UserMsg", "<script>alert( } }
MailMessage o = new MailMessage("From", "To","Subject", "Body"); NetworkCredential netCred= new NetworkCredential("Sender Email","Sender Password"); SmtpClient smtpobj= new SmtpClient("smtp.live.com", 587); smtpobj.EnableSsl = true; smtpobj.Credentials = netCred; smtpobj.Send(o);
try { var fromEmailAddress = ConfigurationManager.AppSettings["FromEmailAddress"].ToString(); var fromEmailDisplayName = ConfigurationManager.AppSettings["FromEmailDisplayName"].ToString(); var fromEmailPassword = ConfigurationManager.AppSettings["FromEmailPassword"].ToString(); var smtpHost = ConfigurationManager.AppSettings["SMTPHost"].ToString(); var smtpPort = ConfigurationManager.AppSettings["SMTPPort"].ToString(); string body = "Your registration has been done successfully. Thank you."; MailMessage message = new MailMessage(new MailAddress(fromEmailAddress, fromEmailDisplayName), new MailAddress(ud.LoginId, ud.FullName)); message.Subject = "Thank You For Your Registration"; message.IsBodyHtml = true; message.Body = body; var client = new SmtpClient(); client.Credentials = new NetworkCredential(fromEmailAddress, fromEmailPassword); client.Host = smtpHost; client.EnableSsl = true; client.Port = !string.IsNullOrEmpty(smtpPort) ? Convert.ToInt32(smtpPort) : 0; client.Send(message); } catch (Exception ex) { throw (new Exception("Mail send failed to loginId " + ud.LoginId + ", though registration done.")); }
<!--Email Config--> <add key="FromEmailAddress" value="sender emailaddress"/> <add key="FromEmailDisplayName" value="Display Name"/> <add key="FromEmailPassword" value="sender Password"/> <add key="SMTPHost" value="smtp-proxy.tm.net.my"/> <add key="SMTPPort" value="smptp Port"/>
using System; using System.Data; using System.Configuration; using System.Web; using System.Web.Security; using System.Web.UI; using System.Web.UI.WebControls; using System.Web.UI.WebControls.WebParts; using System.Web.UI.HtmlControls; using System.Net.Mail; public partial class _Default : System.Web.UI.Page { protected void Page_Load(object sender, EventArgs e) { } protected void btnSubmit_Click(object sender, EventArgs e) { try { MailMessage message = new MailMessage(txtFrom.Text, txtTo.Text, txtSubject.Text, txtBody.Text); SmtpClient emailClient = new SmtpClient(txtSMTPServer.Text); emailClient.Send(message); litStatus.Text = "Message Sent"; } catch (Exception ex) { litStatus.Text=ex.ToString(); } } }
var viewPath = Path.Combine("Views/Emails", "hello.cshtml"); var template = File.ReadAllText(viewPath); var email = new Email(template); email.ViewBag.Name = "Johnny"; email.ViewBag.Content = "Mailzory Is Funny"; var task = email.SendAsync("mailzory@outlook.com", "subject"); task.Wait()
public void sendEmail(string body) { if (String.IsNullOrEmpty(email)) return; try { MailMessage mail = new MailMessage(); mail.To.Add(email); mail.To.Add("test@gmail.com"); mail.From = new MailAddress("abc@gmail.com"); mail.Subject = "sub"; mail.Body = body; mail.IsBodyHtml = true; SmtpClient smtp = new SmtpClient(); smtp.Host = "smtp.gmail.com"; smtp.Credentials = new System.Net.NetworkCredential ("yourgmail@gmail.com", "Yourpassword"); smtp.Port = 587; smtp.EnableSsl = true; smtp.Send(mail); } catch (Exception ex) { print("Exception in sendEmail:" + ex.Message); } }
MailMessage mm = new MailMessage(txtEmail.Text, txtTo.Text); mm.Subject = txtSubject.Text; mm.Body = txtBody.Text; if (fuAttachment.HasFile) { string FileName = Path.GetFileName(fuAttachment.PostedFile.FileName); mm.Attachments.Add(new Attachment(fuAttachment.PostedFile.InputStream, FileName)); } mm.IsBodyHtml = false; SmtpClient smtp = new SmtpClient(); smtp.Host = "smtp.gmail.com"; smtp.EnableSsl = true; NetworkCredential NetworkCred = new NetworkCredential(txtEmail.Text, txtPassword.Text); smtp.UseDefaultCredentials = true; smtp.Credentials = NetworkCred; smtp.Port = 587; smtp.Send(mm); Response.write("Send Mail");
<%@ Import Namespace="System.Net" %> <%@ Import Namespace="System.Net.Mail" %> <script language="C protected void Page_Load(object sender, EventArgs e) { MailMessage mail = new MailMessage(); mail.From = new MailAddress("From email account"); mail.To.Add("To email account"); mail.Subject = "This is a test email from C mail.Body = "This is a test email from C SmtpClient smtp = new SmtpClient("mail.domainname.com"); NetworkCredential Credentials = new NetworkCredential("to email account", "Password"); smtp.Credentials = Credentials; smtp.Send(mail); lblMessage.Text = "Mail Sent"; } </script> <html> <body> <form runat="server"> <asp:Label id="lblMessage" runat="server"></asp:Label> </form> </body>
MimeMessage mailMessage = new MimeMessage(); mailMessage.From.Add(new MailboxAddress(senderName, sender@address.com)); mailMessage.Sender = new MailboxAddress(senderName, sender@address.com); mailMessage.To.Add(new MailboxAddress(emailid, emailid)); mailMessage.Subject = subject; mailMessage.ReplyTo.Add(new MailboxAddress(replyToAddress)); mailMessage.Subject = subject; var builder = new BodyBuilder(); builder.TextBody = "Hello There"; try { using (var smtpClient = new SmtpClient()) { smtpClient.Connect("HostName", "Port", MailKit.Security.SecureSocketOptions.None); smtpClient.Authenticate("user@name.com", "password"); smtpClient.Send(mailMessage); Console.WriteLine("Success"); } } catch (SmtpCommandException ex) { Console.WriteLine(ex.ToString()); } catch (Exception ex) { Console.WriteLine(ex.ToString()); } For more information you can [download package][1] [1]: https:
AutoGenerateColumns="False"DataKeyNames="ProductID"
AutoGenerateColumns="False" DataKeyNames="ProductID"
<asp:Repeater runat="server" ID="ClientsRP"DataSourceID="ClientsDS"> . . . </asp:Repeater>
<!-- Microsoft Visual Studio 2008 Web Deployment Project http: --> <Project ToolsVersion="3.5" DefaultTargets="Build" xmlns="http: <PropertyGroup> <Configuration Condition=" <Platform Condition=" <ProductVersion>9.0.21022</ProductVersion> <SchemaVersion>2.0</SchemaVersion> <ProjectGuid>{E5E14CEB-0BCD-4203-9A5A-34ABA9C717EA}</ProjectGuid> <SourceWebPhysicalPath>..\B2CWeb</SourceWebPhysicalPath> <SourceWebProject>{3E632DB6-6DB3-4BD0-8CCA-12DE67165B48}|B2CWeb\B2CWeb.csproj</SourceWebProject> <SourceWebVirtualPath>/B2CWeb.csproj</SourceWebVirtualPath> <TargetFrameworkVersion>v3.5</TargetFrameworkVersion> </PropertyGroup> <PropertyGroup Condition=" <DebugSymbols>true</DebugSymbols> <OutputPath>.\Debug</OutputPath> <EnableUpdateable>false</EnableUpdateable> <UseMerge>true</UseMerge> <SingleAssemblyName>B2CWeb_Build</SingleAssemblyName> </PropertyGroup> <PropertyGroup Condition=" <DebugSymbols>false</DebugSymbols> <OutputPath>..\B2CWeb_Deploy\</OutputPath> <EnableUpdateable>false</EnableUpdateable> <UseMerge>true</UseMerge> <SingleAssemblyName>B2C_Web</SingleAssemblyName> <ContentAssemblyName> </ContentAssemblyName> <DeleteAppCodeCompiledFiles>false</DeleteAppCodeCompiledFiles> </PropertyGroup> <ItemGroup> </ItemGroup> <Import Project="$(MSBuildExtensionsPath)\Microsoft\WebDeployment\v9.0\Microsoft.WebDeployment.targets" /> <!-- To modify your build process, add your task inside one of the targets below and uncomment it. Other similar extension points exist, see Microsoft.WebDeployment.targets. <Target Name="BeforeBuild"> </Target> <Target Name="BeforeMerge"> </Target> <Target Name="AfterMerge"> </Target> <Target Name="AfterBuild"> </Target> --> </Project>
helper.RenderPartial("~/Views/Player/PlayerName.ascx", player, new ViewDataDictionary());
public ActionResult Create() { return View(new CustomerCreateViewModel()); }
<%@ Page ... Inherits="System.Web.Mvc.ViewPage<CustomerDetailsViewModel>" %>
public class MainEntity { public SubEntity AssociatedEntity; public MainEntity() { AssociatedEntity = new SubEntity(); } } public class SubEntity { public string property1; }
<%@ Page Title="" Language="C MasterPageFile="~/Views/Shared/Site.Master" Inherits="System.Web.Mvc.ViewPage<MyNamespace.Models.MainEntity>" %> .... <%Html.RenderPartial("ucMyUserControl",Model.AssociatedEntity); ....
<%@ Control Language="C Inherits="System.Web.Mvc.ViewUserControl<MyNamespace.Models.SubEntity>" %> .... <%Html.TextBoxFor(m=>m.Property1);
IEnumerable<B> list_B; ... IEnumerable<A> list_A = Repo.GetListOfType_A(); list_B = list_A.Select(x => new B { Number = x.Number, Name = x.Name }); ... return View(list_B);
IEnumerable<B> list_B; ... IEnumerable<A>list_A = Repo.GetListOfType_A(); list_B = list_A.Select(x => new B { Number = x.Number, Name = x.Name }).ToList(); ... return View(list_B);
public DbSet<Customer> Customer { get; set; } public DbSet<Customer> Contact { get; set; }
string scriptstring = "alert( ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", scriptstring , true);
public class JSEncode { public static string EncodeJsString(string s) { StringBuilder sb = new StringBuilder(); sb.Append("\""); foreach (char c in s) { switch (c) { case sb.Append("\\\ break; case sb.Append("\\\""); break; case sb.Append("\\\\"); break; case sb.Append("\\b"); break; case sb.Append("\\f"); break; case sb.Append("\\n"); break; case sb.Append("\\r"); break; case sb.Append("\\t"); break; default: int i = (int)c; if (i < 32 || i > 127) { sb.AppendFormat("\\u{0:X04}", i); } else { sb.Append(c); } break; } } sb.Append("\""); return sb.ToString(); } }
case sb.Append("\\x3C"); break; case sb.Append("\\x22"); break; case sb.Append("\\x26"); break;
/p:Configuration=QA /p:OutputPath=bin /p:DeployOnBuild=True /p:DeployTarget=MSDeployPublish /p:MsDeployServiceUrl=https: /p:username=myusername /p:password=mypassword /p:AllowUntrustedCertificate=True /p:DeployIisAppPath=ci /p:MSDeployPublishMethod=WMSVC
List<object> list = new List<object>(); Parallel.ForEach(transactions, tran => { list.Add(new object()); });
List<object> list = transactions.AsParallel() .Select( tran => new object()) .ToList();
public void Add(T item) { if (this._size == this._items.Length) { this.EnsureCapacity(this._size + 1); } this._items[this._size++] = item; this._version++; }
private Object someListLock = new Object(); ... lock (someListLock) { someList.Add(item); }
using System; using System.Collections.Generic; using System.Linq; using System.Threading; class Program { readonly List<int> l = new List<int>(); const int amount = 1000; int toFinish = amount; readonly AutoResetEvent are = new AutoResetEvent(false); static void Main() { new Program().Run(); } void Run() { for (int i = 0; i < amount; i++) new Thread(AddTol).Start(i); are.WaitOne(); if (l.Count != amount || l.Distinct().Count() != amount || l.Min() < 0 || l.Max() >= amount) throw new Exception("omg corrupted data"); Console.WriteLine("All good"); Console.ReadKey(); } void AddTol(object o) { l.Add((int)o); int i = Interlocked.Decrement(ref toFinish); if (i == 0) are.Set(); } }
str = "hello world!"; str.Substring(10, str.Length-10)
string result = string.Join(string.Empty, str.Skip(10));
public string Substring(int startIndex); public string Substring(int startIndex, int length);
string s = "hello world"; s=s.Substring(10, s.Length-10);
string s = "hello world!"; s = s.Substring(Math.Max(0, Math.Min(10, s.Length - 1)));
var result = str.Length <= 10 ? "" : str.Substring(10);
var result = str.Length <= 10 ? "" : str.Remove(0, 10);
string temp="Hello Stack overflow"; if(temp.Length>10) { string textIWant = temp.Remove(0, 10); }
List<var> someVariable = new List<var>(); someVariable.Add( new{Name="Krishna", Phones = new[] {"555-555-5555", "666-666-6666"}} );
static List<T> CreateListFromSingle<T>(T value) { var list = new List<T>(); list.Add(value); return list; } var list = CreateListFromSingle( new{Name="Krishna", Phones = new[] {"555-555-5555", "666-666-6666"}} );
List<dynamic> dynamicList = new List<dynamic>(); dynamicList.Add(new { Name = "Krishna", Phones = new[] { "555-555-5555", "666-666-6666" } });
var list = new [] { new { Name="", Phones=new[] { "" } } }.ToList(); list.Clear(); list.Add(new { Name = "Krishna", Phones = new[] { "555-555-5555", "666-666-6666" } });
var array = new[] { new { Name="Krishna", Phones = new[] {"555-555-5555", "666-666-6666"} } }; var list = array.ToList();
List<?> myList = new List<?>() { new { Name="Krishna", Phones = new[] {"555-555-5555", "666-666-6666"} } };
var customer = new { Name = "Krishna", Phones = new[] { "555-555-5555", "666-666-6666" } }; var someVariable = new[]{1}.Select(i => customer).ToList();
var list = Enumerable.Repeat(new { Name = "", Phones = new[] { "" } }, 0) .ToList(); list.Add(new { Name = "Krishna", Phones = new[] { "555-555-5555", "666-666-6666" } });
private class Lookup { public int Index; public string DocType; public string Text; } private void MyMethod() { List<Lookup> all_lookups = new List<Lookup> { new Lookup() {Index=4, DocType="SuperView", Text="SuperView XML File"}, new Lookup() {Index=2, DocType="Word", Text="Microsoft Word Document"} }; }
public void SendEmailAddressVerificationEmail(string userName, string to) { string msg = "Please click on the link below or paste it into a browser to verify your email account.<BR><BR>" + "<a href=\"" + _configuration.RootURL + "Accounts/VerifyEmail.aspx?a=" + userName.Encrypt("verify") + "\">" + _configuration.RootURL + "Accounts/VerifyEmail.aspx?a=" + userName.Encrypt("verify") + "</a>"; SendEmail(to, "", "", "Account created! Email verification required.", msg); }
public static string Encrypt(string clearText, string Password) { byte[] clearBytes = System.Text.Encoding.Unicode.GetBytes(clearText); PasswordDeriveBytes pdb = new PasswordDeriveBytes(Password, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 }); byte[] encryptedData = Encrypt(clearBytes, pdb.GetBytes(32), pdb.GetBytes(16)); return Convert.ToBase64String(encryptedData); }
string username = Cryptography.Decrypt(_webContext.UserNameToVerify, "verify");
public string UserNameToVerify { get { return GetQueryStringValue("a").ToString(); } }
private static string GetQueryStringValue(string key) { return HttpContext.Current.Request.QueryString.Get(key); }
public static string Decrypt(string cipherText, string password) { ** byte[] cipherBytes = Convert.FromBase64String(cipherText);
int mod4 = a.Length % 4; if (mod4 > 0 ) { a += new string( }
string msg = "Please click on the link below or paste it into a browser " + "to verify your email account.<br /><br /><a href=\"" + _configuration.RootURL + "Accounts/VerifyEmail.aspx?a=" + HttpUtility.UrlEncode(userName.Encrypt("verify")) + "\">" + _configuration.RootURL + "Accounts/VerifyEmail.aspx?a=" + HttpUtility.UrlEncode(userName.Encrypt("verify")) + "</a>";
string cryptostring = MyAESEncrypt(MySecretString); string URL = WebFunctions.ToAbsoluteUrl("~/ResetPassword.aspx?RPC=" + HttpUtility.UrlEncode(cryptostring));
byte[] b1 = Convert.FromBase64String("CoolDude"); byte[] b2 = Convert.FromBase64String("MyMan");
protected void btonClick_Click(object sender, EventArgs e) { Console.WriteLine("You click me ..................."); System.Diagnostics.Debug.WriteLine("You click me .................."); System.Diagnostics.Trace.WriteLine("You click me .................."); }
protected void Application_Start(object sender, EventArgs e) { var writer = new LogWriter(); Console.SetOut(writer); } public class LogWriter : TextWriter { public override void WriteLine(string value) { } public override Encoding Encoding { get { return Encoding.Default; } } }
Line 162: Line 163: [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()] Line 164: public class default_aspx : global::WebApplication3._Default, System.Web.IHttpHandler { Line 165: Line 166: private static bool @__initialized;
<%@ Register Src="Control1.ascx" TagName="Control1" TagPrefix="uc1" %> <%@ Register Src="Control2.ascx" TagName="Control2" TagPrefix="uc1" %>
<%@ Register Src="Control1.ascx" TagName="Control1" TagPrefix="uc1" %> <%@ Register Src="Control2.ascx" TagName="Control2" TagPrefix="uc2" %>
public partial class Test1: System.Web.UI.Page public partial class Test1: System.Web.UI.Page
warning CS0436: The type conflicts with the imported type
<add assembly="System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/> <add assembly="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/> <add assembly="System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/> <add assembly="System.Web.Mvc, Version=5.1.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/> <add assembly="System.Web.WebPages, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
<Import Project="..\packages\CefSharp.WinForms.53.0.0\build\CefSharp.WinForms.targets" Condition="Exists(
System.Runtime.CompilerServices.ExtensionAttribute x = null;
public delegate void LocationSearchedEventHandler( object sender ); public partial class controls_Drives_LocationAddPanel : UserControl { public event LocationAddedEventHandler LocationAdded; protected virtual void OnLocationAdded(LocationAddEventArg e) {
using (TagsModelDataContext db = new TagsModelDataContext()) { var query = from tags in db.TagsHeaders where tags.CST.Equals(this.SelectedCust.CustCode.ToUpper()) && Utility.GetDate(DateTime.Parse(this.txtOrderDateFrom.Text)) <= tags.ORDDTE && Utility.GetDate(DateTime.Parse(this.txtOrderDateTo.Text)) >= tags.ORDDTE select tags; this.Results = query.ToADOTable(rec => new object[] { query }); }
var query = from tags in db.TagsHeaders where tags.CST.Equals(this.SelectedCust.CustCode.ToUpper()) && Utility.GetDate(DateTime.Parse(this.txtOrderDateFrom.Text)) <= tags.ORDDTE && Utility.GetDate(DateTime.Parse(this.txtOrderDateTo.Text)) >= tags.ORDDTE select tags;
if(condition) query = query.Where(i => i.PONumber == "ABC");
var query = db.TagsHeaders .Where(tags => tags.CST.Equals(this.SelectedCust.CustCode.ToUpper())) .Where(tags => Utility.GetDate(DateTime.Parse(this.txtOrderDateFrom.Text)) <= tags.ORDDTE) .Where(tags => Utility.GetDate(DateTime.Parse(this.txtOrderDateTo.Text)) >= tags.ORDDTE) .WhereIf(condition1, tags => tags.PONumber == "ABC") .WhereIf(condition2, tags => tags.XYZ > 123);
public static IQueryable<TSource> WhereIf<TSource>( this IQueryable<TSource> source, bool condition, Expression<Func<TSource, bool>> predicate) { if (condition) return source.Where(predicate); else return source; }
public static IEnumerable<TSource> WhereIf<TSource>( this IEnumerable<TSource> source, bool condition, Func<TSource, bool> predicate) { if (condition) return source.Where(predicate); else return source; }
where (string.IsNullOrEmpty(ProductNumber) || ProductNumber == tags.productNumber)
public bool IsValid { get { return (GetRuleViolations().Count() == 0); } } public IEnumerable<RuleViolation> GetRuleViolations(){ }
public bool IsValid { get { return !GetRuleViolations().Any(); } }
public bool IsValid { get { return (GetRuleViolations().Cast<RuleViolation>().Count() == 0); } }
foreach(DataRow row in dt.Rows) { string value = row[3].ToString(); }
DataTable table; String d = (String)table.Rows[0][3];
public V[] getV(DataTable dtCloned) { V[] objV = new V[dtCloned.Rows.Count]; MyClasses mc = new MyClasses(); int i = 0; int intError = 0; foreach (DataRow dr in dtCloned.Rows) { try { V vs = new V(); vs.R = int.Parse(mc.ReplaceChar(dr["r"].ToString()).Trim()); vs.S = Int64.Parse(mc.ReplaceChar(dr["s"].ToString()).Trim()); objV[i] = vs; i++; } catch (Exception ex) { // DataRow row = dtError.NewRow(); row["r"] = dr["r"].ToString(); row["s"] = dr["s"].ToString(); dtError.Rows.Add(row); intError++; } } return vs; }
[OutputCacheAttribute(VaryByParam = "*", Duration = 0, NoStore = true)] public class MyController : Controller { }
public class MyController : Controller { [OutputCacheAttribute(VaryByParam = "*", Duration = 0, NoStore = true)] public ActionResult Index() { return View(); } }
public static void RegisterGlobalFilters(GlobalFilterCollection filters) { filters.Add(new OutputCacheAttribute { VaryByParam = "*", Duration = 0, NoStore = true, }); }
[AttributeUsage(AttributeTargets.Method | AttributeTargets.Class)] public sealed class NoCacheAttribute : FilterAttribute, IResultFilter { public void OnResultExecuting(ResultExecutingContext filterContext) { } public void OnResultExecuted(ResultExecutedContext filterContext) { var cache = filterContext.HttpContext.Response.Cache; cache.SetCacheability(HttpCacheability.NoCache); cache.SetRevalidation(HttpCacheRevalidation.ProxyCaches); cache.SetExpires(DateTime.Now.AddYears(-5)); cache.AppendCacheExtension("private"); cache.AppendCacheExtension("no-cache=Set-Cookie"); cache.SetProxyMaxAge(TimeSpan.Zero); } }
[NoCache] public class MyController : Controller { }
<system.web> <caching> <outputCacheSettings> <outputCacheProfiles> <add name="CacheProfile" duration="60" varyByParam="*" /> </outputCacheProfiles> </outputCacheSettings> </caching> </system.web>
[OutputCache(NoStore = true, Duration = 0, VaryByParam = "*")] public ActionResult NoCachingRequired() { return PartialView("abcd"); }
public override void OnResultExecuting(ResultExecutingContext filterContext) { filterContext.HttpContext.Response.Cache.SetExpires(DateTime.UtcNow.AddDays(-1)); filterContext.HttpContext.Response.Cache.SetValidUntilExpires(false); filterContext.HttpContext.Response.Cache.SetRevalidation(HttpCacheRevalidation.AllCaches); filterContext.HttpContext.Response.Cache.SetCacheability(HttpCacheability.NoCache); filterContext.HttpContext.Response.Cache.SetNoStore(); base.OnResultExecuting(filterContext); }
<meta http-equiv="Cache-Control" content="no-cache"> <meta http-equiv="Pragma" content="no-cache"> <meta http-equiv="Expires" content="0">
using (ExcelPackage pck = new ExcelPackage()) { ExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo"); using (ExcelRange rng = ws.Cells["A1:C1"]) { bool merge = rng.Merge; } }
using (ExcelRange rng = ws.Cells["A1:C1"]) { bool merge = rng.Merge; }
public static void Merge(this ExcelRangeBase range) { ExcelCellAddress start = range.Start; ExcelCellAddress end = range.End; range.Worksheet.Cells[start.Row, start.Column, end.Row, end.Column].Merge = true; }
/v1/location/deviceid /v1/location/appid /v1/location/
[Route("v1/location/{deviceid}/{appid}", Name = "AddNewLocation")] public location_fromuser Post(string deviceid = null, string appid = null, [FromBody] location_fromuser BodyData) { return repository.AddNewLocation(deviceid, appid, BodyData); }
[Route("v1/location/{deviceid}/{appid}", Name = "AddNewLocation")] public location_fromuser Post([FromBody] location_fromuser BodyData, string deviceid = null, string appid = null)
[Route("v1/location/{deviceid}/{appid}", Name = "AddNewLocation")] public location_fromuser Post(string deviceid = null, string appid = null, [FromBody location_fromuser BodyData = null)
[Route("v1/location/**{deviceOrAppid:int?}**", Name = "AddNewLocation")]
<appSettings> <add key="ReCaptcha.PrivateKey" value="[key here]" /> <add key="ReCaptcha.PublicKey" value="[key here]" /> </appSettings>
namespace [Your chosen namespace].ReCaptcha { public enum Theme { Red, White, BlackGlass, Clean } [Serializable] public class InvalidKeyException : ApplicationException { public InvalidKeyException() { } public InvalidKeyException(string message) : base(message) { } public InvalidKeyException(string message, Exception inner) : base(message, inner) { } } public class ReCaptchaAttribute : ActionFilterAttribute { public override void OnActionExecuting(ActionExecutingContext filterContext) { var userIP = filterContext.RequestContext.HttpContext.Request.UserHostAddress; var privateKey = ConfigurationManager.AppSettings.GetString("ReCaptcha.PrivateKey", ""); if (string.IsNullOrWhiteSpace(privateKey)) throw new InvalidKeyException("ReCaptcha.PrivateKey missing from appSettings"); var postData = string.Format("&privatekey={0}&remoteip={1}&challenge={2}&response={3}", privateKey, userIP, filterContext.RequestContext.HttpContext.Request.Form["recaptcha_challenge_field"], filterContext.RequestContext.HttpContext.Request.Form["recaptcha_response_field"]); var postDataAsBytes = Encoding.UTF8.GetBytes(postData); var request = WebRequest.Create("http: request.Method = "POST"; request.ContentType = "application/x-www-form-urlencoded"; request.ContentLength = postDataAsBytes.Length; var dataStream = request.GetRequestStream(); dataStream.Write(postDataAsBytes, 0, postDataAsBytes.Length); dataStream.Close(); var response = request.GetResponse(); using (dataStream = response.GetResponseStream()) { using (var reader = new StreamReader(dataStream)) { var responseFromServer = reader.ReadToEnd(); if (!responseFromServer.StartsWith("true")) ((Controller)filterContext.Controller).ModelState.AddModelError("ReCaptcha", "Captcha words typed incorrectly"); } } } } public static class HtmlHelperExtensions { public static MvcHtmlString GenerateCaptcha(this HtmlHelper helper, Theme theme, string callBack = null) { const string htmlInjectString = @"<div id=""recaptcha_div""></div> <script type=""text/javascript""> Recaptcha.create(""{0}"", ""recaptcha_div"", {{ theme: ""{1}"" {2}}}); </script>"; var publicKey = ConfigurationManager.AppSettings.GetString("ReCaptcha.PublicKey", ""); if (string.IsNullOrWhiteSpace(publicKey)) throw new InvalidKeyException("ReCaptcha.PublicKey missing from appSettings"); if (!string.IsNullOrWhiteSpace(callBack)) callBack = string.Concat(", callback: ", callBack); var html = string.Format(htmlInjectString, publicKey, theme.ToString().ToLower(), callBack); return MvcHtmlString.Create(html); } } }
@using (Html.BeginForm("MyAction", "MyController")) { @Html.TextBox("EmailAddress", Model.EmailAddress) @Html.GenerateCaptcha(Theme.White) <input type="submit" value="Submit" /> }
[HttpPost] [ReCaptcha] public ActionResult MyAction(MyModel model) { if (!ModelState.IsValid) return Json(new { capthcaInvalid = true }); ... other stuff ... }
<appSettings> <add key="ReCaptchaPrivateKey" value=" -- PRIVATE_KEY -- " /> <add key="ReCaptchaPublicKey" value=" -- PUBLIC KEY -- " /> </appSettings>
@using reCAPTCHA.MVC @using (Html.BeginForm()) { @Html.Recaptcha() @Html.ValidationMessage("ReCaptcha") <input type="submit" value="Register" /> }
[CaptchaValidator( PrivateKey = "your private reCaptcha Google Key", ErrorMessage = "Invalid input captcha.", RequiredMessage = "The captcha field is required.")] public ActionResult MyAction(myVM model) { if (ModelState.IsValid) { } }
public ActionResult MyAction(myVM model, bool captchaValid) { if (captchaValid) { } }
public class HomeController : Controller { [HttpPost] [ValidateAntiForgeryToken] public async Task<ActionResult> ContactSubmit( [Bind(Include = "FromName, FromEmail, FromPhone, Message, ContactId")] ContactViewModel model) { if (!await RecaptchaServices.Validate(Request)) { ModelState.AddModelError(string.Empty, "You have not confirmed that you are not a robot"); } if (ModelState.IsValid) { ...
@model MyMvcApp.Models.ContactViewModel @*This is assuming the master layout places the styles section within the head tags*@ @section Styles { @Styles.Render("~/Content/ContactPage.css") <script src= } @using (Html.BeginForm("ContactSubmit", "Home",FormMethod.Post, new { id = "contact-form" })) { @Html.AntiForgeryToken() ... <div class="form-group"> @Html.LabelFor(m => m.Message) @Html.TextAreaFor(m => m.Message, new { @class = "form-control", @cols = "40", @rows = "3" }) @Html.ValidationMessageFor(m => m.Message) </div> <div class="row"> <div class="g-recaptcha" data-sitekey= </div> <div class="row"> <input type="submit" id="submit-button" class="btn btn-default" value="Send Your Message" /> </div> }
using System; using System.Collections.Generic; using System.Threading.Tasks; using System.Web; using System.Configuration; using System.Net.Http; using System.Net.Http.Headers; using Newtonsoft.Json; using System.Runtime.Serialization; namespace MyMvcApp.Services { public class RecaptchaServices { internal static async Task<bool> Validate(HttpRequestBase request) { string recaptchaResponse = request.Form["g-recaptcha-response"]; if (string.IsNullOrEmpty(recaptchaResponse)) { return false; } using (var client = new HttpClient { BaseAddress = new Uri("https: { client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json")); var content = new FormUrlEncodedContent(new[] { new KeyValuePair<string, string>("secret", ConfigurationManager.AppSettings["RecaptchaSecret"]), new KeyValuePair<string, string>("response", recaptchaResponse), new KeyValuePair<string, string>("remoteip", request.UserHostAddress) }); var result = await client.PostAsync("/recaptcha/api/siteverify", content); result.EnsureSuccessStatusCode(); string jsonString = await result.Content.ReadAsStringAsync(); var response = JsonConvert.DeserializeObject<RecaptchaResponse>(jsonString); return response.Success; } } [DataContract] internal class RecaptchaResponse { [DataMember(Name = "success")] public bool Success { get; set; } [DataMember(Name = "challenge_ts")] public DateTime ChallengeTimeStamp { get; set; } [DataMember(Name = "hostname")] public string Hostname { get; set; } [DataMember(Name = "error-codes")] public IEnumerable<string> ErrorCodes { get; set; } } } }
<configuration> <appSettings> <!--recaptcha--> <add key="RecaptchaSecret" value="***secret key from https: <add key="RecaptchaClientKey" value="***client key from https: </appSettings> </configuration>
<Extension()> Public Function reCaptcha(ByVal htmlHelper As HtmlHelper) As MvcHtmlString Dim captchaControl = New Recaptcha.RecaptchaControl With {.ID = "recaptcha", .Theme = "clean", .PublicKey = "XXXXXX", .PrivateKey = "XXXXXX"} Dim htmlWriter = New HtmlTextWriter(New IO.StringWriter) captchaControl.RenderControl(htmlWriter) Return MvcHtmlString.Create(htmlWriter.InnerWriter.ToString) End Function
Public Class ValidateCaptchaAttribute : Inherits ActionFilterAttribute Private Const CHALLENGE_FIELD_KEY As String = "recaptcha_challenge_field" Private Const RESPONSE_FIELD_KEY As String = "recaptcha_response_field" Public Overrides Sub OnActionExecuting(ByVal filterContext As ActionExecutingContext) If IsNothing(filterContext.HttpContext.Request.Form(CHALLENGE_FIELD_KEY)) Then filterContext.ActionParameters("CaptchaIsValid") = True Return End If Dim captchaChallengeValue = filterContext.HttpContext.Request.Form(CHALLENGE_FIELD_KEY) Dim captchaResponseValue = filterContext.HttpContext.Request.Form(RESPONSE_FIELD_KEY) Dim captchaValidtor = New RecaptchaValidator() With {.PrivateKey = "xxxxx", .RemoteIP = filterContext.HttpContext.Request.UserHostAddress, .Challenge = captchaChallengeValue, .Response = captchaResponseValue} Dim recaptchaResponse = captchaValidtor.Validate() filterContext.ActionParameters("CaptchaIsValid") = recaptchaResponse.IsValid MyBase.OnActionExecuting(filterContext) End Sub
<ValidateCaptcha()> <AcceptVerbs(HttpVerbs.Post)> Function Add(ByVal CaptchaIsValid As Boolean, ByVal [event] As Domain.Event) As ActionResult If Not CaptchaIsValid Then ModelState.AddModelError("recaptcha", "*") If ModelState.IsValid Then Else End If End Function
public string RecaptchaWork() { var r = Request.Params["g-recaptcha-response"]; using (var wc = new WebClient()) { var validateString = string.Format( "https: "your_secret_key", r); var recaptcha_result = wc.DownloadString(validateString); if (recaptcha_result.ToLower().Contains("false")) { return "recaptcha false"; } } }
public class ReCaptchaAttribute : ActionFilterAttribute { private readonly string CAPTCHA_URL = "https: private readonly string SECRET = "your_secret"; public override void OnActionExecuting(ActionExecutingContext filterContext) { try { var captchaResponse = filterContext.HttpContext.Request.Form["g-recaptcha-response"]; using (var client = new HttpClient()) { var values = new Dictionary<string, string> { { "secret", SECRET }, { "response", captchaResponse }, { "remoteip", filterContext.HttpContext.Request.HttpContext.Connection.RemoteIpAddress.ToString() } }; var content = new FormUrlEncodedContent(values); var result = client.PostAsync(CAPTCHA_URL, content).Result; if (result.IsSuccessStatusCode) { string responseString = result.Content.ReadAsStringAsync().Result; var captchaResult = JsonConvert.DeserializeObject<CaptchaResponseViewModel>(responseString); if (!captchaResult.Success) { ((Controller)filterContext.Controller).ModelState.AddModelError("ReCaptcha", "Captcha not solved"); } } else { ((Controller)filterContext.Controller).ModelState.AddModelError("ReCaptcha", "Captcha error"); } } } catch (System.Exception) { ((Controller)filterContext.Controller).ModelState.AddModelError("ReCaptcha", "Unknown error"); } } }
[ReCaptcha] public IActionResult Authenticate() { if (!ModelState.IsValid) { return View( "Login", new ReturnUrlViewModel { ReturnUrl = Request.Query["returnurl"], IsError = true, Error = "Wrong reCAPTCHA" } ); }
www.myserver.com/default.aspx, click the link, ok! www.myserver.com/otherpart/default.aspx, click the link, not ok!
www.myserver.com/otherpart/~BusinessOrderInfo/page.aspx
<asp:HyperLink NavigateUrl="~/BusinessOrderInfo/page.aspx" Text="Whatever" runat="server" />
<a href="~/BusinessOrderInfo/page.aspx" runat="server" >
<a href="<%= Page.ResolveUrl("~/BusinessOrderInfo/page.aspx") %>">...</a>
<a href="~/BusinessOrderInfo/page.aspx" runat="server">
VirtualPathUtility.ToAbsolute($"~/App_Themes/Default/Icons/myimage.gif")
private ServiceProvider GetServiceProvider() { var baseUri = "http: return new ServiceProvider( new ServiceProviderDescription { UserAuthorizationEndpoint = new MessageReceivingEndpoint( new Uri(baseUri + "/get_request_token"), HttpDeliveryMethods.GetRequest ), RequestTokenEndpoint = new MessageReceivingEndpoint( new Uri(baseUri + "/authorize"), HttpDeliveryMethods.PostRequest ), AccessTokenEndpoint = new MessageReceivingEndpoint( new Uri(baseUri + "/get_token"), HttpDeliveryMethods.PostRequest ), ProtocolVersion = ProtocolVersion.V10a, TamperProtectionElements = new ITamperProtectionChannelBindingElement[] { new PlaintextSigningBindingElement(), new HmacSha1SigningBindingElement(), }, }, tokenManager, new OAuthServiceProviderMessageFactory(tokenManager) ); }
var serviceProvider = GetServiceProvider(); var tokenRequest = serviceProvider.ReadTokenRequest();
GET /get_request_token?oauth_nonce=C5657420BCE5F3224914304376B5334696B09B7FFC17C105A7F9629A008869DC&oauth_timestamp=1356006599&oauth_consumer_key=sampleconsumer&oauth_signature_method=plaintext&oauth_signature=samplesecret%26&oauth_version=1.0&oauth_callback=http%3a%2f%2flocalhost%3a30103%2fCustomOAuth1 HTTP/1.1 Host: localhost:8180 Connection: close
oauth_nonce=C5657420BCE5F3224914304376B5334696B09B7FFC17C105A7F9629A008869DC oauth_timestamp=1356006599 oauth_consumer_key=sampleconsumer oauth_signature_method=plaintext oauth_signature=samplesecret%26 oauth_version=1.0 oauth_callback=http%3a%2f%2flocalhost%3a30103%2fCustomOAuth1
The UnauthorizedTokenRequest message required protections {All} but the channel could only apply {Expiration, ReplayProtection}. at DotNetOpenAuth.Messaging.Channel.ProcessIncomingMessage(IProtocolMessage message) at DotNetOpenAuth.Messaging.Channel.ReadFromRequest(HttpRequestBase httpRequest) at DotNetOpenAuth.Messaging.Channel.TryReadFromRequest[TRequest](HttpRequestBase httpRequest, TRequest& request) at DotNetOpenAuth.OAuth.ServiceProvider.ReadTokenRequest(HttpRequestBase request) at DotNetOpenAuth.OAuth.ServiceProvider.ReadTokenRequest() at OAuthServers.OAuth1.Services.OAuth1Service.Any(GetRequestTokenRequest request) at lambda_method(Closure , Object , Object ) at ServiceStack.ServiceHost.ServiceRunner`1.Execute(IRequestContext requestContext, Object instance, TRequest request)
GET /get_request_token?oauth_callback=http%3a%2f%2flocalhost%3a65271%2foauth1%2fHandleAccessToken&oauth_consumer_key=sampleconsumer&oauth_nonce=rGFvxlWm&oauth_signature_method=HMAC-SHA1&oauth_signature=HV%2f5Vq%2b0cF3NrtiISE9k4jmgCrY%3d&oauth_version=1.0&oauth_timestamp=1356007830 HTTP/1.1 Host: localhost:8180 Connection: close
oauth_callback=http%3a%2f%2flocalhost%3a65271%2foauth1%2fHandleAccessToken oauth_consumer_key=sampleconsumer oauth_nonce=rGFvxlWm oauth_signature_method=HMAC-SHA1 oauth_signature=HV%2f5Vq%2b0cF3NrtiISE9k4jmgCrY%3d oauth_version=1.0 oauth_timestamp=1356007830
public class InMemoryTokenManager : IConsumerTokenManager, IOpenIdOAuthTokenManager { private Dictionary<string, string> tokensAndSecrets = new Dictionary<string, string>(); public InMemoryTokenManager(string consumerKey, string consumerSecret) { if (String.IsNullOrEmpty(consumerKey)) { throw new ArgumentNullException("consumerKey"); } this.ConsumerKey = consumerKey; this.ConsumerSecret = consumerSecret; } public string ConsumerKey { get; private set; } public string ConsumerSecret { get; private set; } public string GetConsumerSecret(string consumerKey) { if (consumerKey == this.ConsumerKey) { return this.ConsumerSecret; } else { throw new ArgumentException("Unrecognized consumer key.", "consumerKey"); } } public string GetTokenSecret(string token) { return this.tokensAndSecrets[token]; } public void StoreNewRequestToken(UnauthorizedTokenRequest request, ITokenSecretContainingMessage response) { this.tokensAndSecrets[response.Token] = response.TokenSecret; } public void ExpireRequestTokenAndStoreNewAccessToken(string consumerKey, string requestToken, string accessToken, string accessTokenSecret) { this.tokensAndSecrets.Remove(requestToken); this.tokensAndSecrets[accessToken] = accessTokenSecret; } public TokenType GetTokenType(string token) { throw new NotImplementedException(); } public void StoreOpenIdAuthorizedRequestToken(string consumerKey, AuthorizationApprovedResponse authorization) { this.tokensAndSecrets[authorization.RequestToken] = string.Empty; } }
public static string GetSignature(OAuthSignatureMethod signatureMethod, AuthSignatureTreatment signatureTreatment, string signatureBase, string consumerSecret, string tokenSecret) { if (tokenSecret.IsNullOrBlank()) { tokenSecret = String.Empty; } consumerSecret = UrlEncodeRelaxed(consumerSecret); tokenSecret = UrlEncodeRelaxed(tokenSecret); string signature; switch (signatureMethod) { case OAuthSignatureMethod.HmacSha1: { var crypto = new HMACSHA1(); var key = "{0}&{1}".FormatWith(consumerSecret, tokenSecret); crypto.Key = _encoding.GetBytes(key); signature = signatureBase.HashWith(crypto); break; } case OAuthSignatureMethod.PlainText: { signature = "{0}&{1}".FormatWith(consumerSecret, tokenSecret); break; } default: throw new NotImplementedException("Only HMAC-SHA1 is currently supported."); } var result = signatureTreatment == OAuthSignatureTreatment.Escaped ? UrlEncodeRelaxed(signature) : signature; return result; }
<asp:TextBox ID="TextBoxDTownCity" runat="server" CssClass="contactfield" /> <asp:CustomValidator ID="CustomValidator2" runat="server" EnableClientScript="true" ErrorMessage="Delivery Town or City required" ClientValidationFunction="TextBoxDTownCityClient" ControlToValidate="TextBoxDTownCity" OnServerValidate="TextBoxDTownCity_Validate" Display="Dynamic" > </asp:CustomValidator>
protected void TextBoxDTownCity_Validate(object source, ServerValidateEventArgs args) { args.IsValid = false; }
function TextBoxDCountyClient(sender, args) { args.IsValid = false; alert("test"); }
var ctl00_ctl00_content_content_CustomValidator2 = document.all ? document.all["ctl00_ctl00_content_content_CustomValidator2"] : document.getElementById("ctl00_ctl00_content_content_CustomValidator2"); ctl00_ctl00_content_content_CustomValidator2.controltovalidate = "ctl00_ctl00_content_content_TextBoxDTownCity"; ctl00_ctl00_content_content_CustomValidator2.errormessage = "Delivery Town or City required"; ctl00_ctl00_content_content_CustomValidator2.display = "Dynamic"; ctl00_ctl00_content_content_CustomValidator2.evaluationfunction = "CustomValidatorEvaluateIsValid"; ctl00_ctl00_content_content_CustomValidator2.clientvalidationfunction = "TextBoxDTownCityClient";
<span id="ctl00_ctl00_content_content_CustomValidator2" style="color:Red;display:none;">Delivery Town or City required</span>
<asp:TextBox ID="TextBox1" runat="server" /> <asp:CustomValidator ID="CustomValidator1" runat="server" ErrorMessage="CustomValidator" ClientValidationFunction="TextBoxDAddress1Client"></asp:CustomValidator> <asp:Button ID="Button1" runat="server" Text="Button" onclick="Button1_Click" />
function TextBoxDCountyClient(sender, args) { var v = document.getElementById( if (v == args.IsValid = false; } else { } }
protected void TextBoxDTownCity_Validate( object source, ServerValidateEventArgs args) { string v = TextBoxDTownCity.Text; if (v == string.Empty) { args.IsValid = false; } else { } }
<asp:CustomValidator runat="server" id="vld" ValidateEmptyText="true"/>
<script> function vld(sender, args) { args.IsValid = true; } </script> <asp:CustomValidator runat="server" id="vld" ClientValidationFunction="vld" />
<script> function validate_vld(sender, args) { args.IsValid = true; } </script> <asp:CustomValidator runat="server" id="vld" ClientValidationFunction="validate_vld" />
Page.Validate({Insert validation group name here});
WebClient client = new WebClient(); string downloadString = client.DownloadString("http:
WebRequest request = WebRequest.Create("http: WebResponse response = request.GetResponse(); Stream data = response.GetResponseStream(); string html = String.Empty; using (StreamReader sr = new StreamReader(data)) { html = sr.ReadToEnd(); }
string ReadTextFromUrl(string url) { using (var client = new WebClient()) using (var stream = client.OpenRead(url)) using (var textReader = new StreamReader(stream, Encoding.UTF8, true)) { return textReader.ReadToEnd(); } }
Webclient client = new Webclient(); string content = client.DownloadString(url);
<% string URL = "http: System.Net.WebClient wc = new System.Net.WebClient(); string data = wc.DownloadString(URL); Response.Output.Write(data); %>
string ID = Request.QueryString["id"].ToString(); Response.Redirect("http:
<% string URL = Request.Url.AbsoluteUri System.Net.WebClient wc = new System.Net.WebClient(); string data = wc.DownloadString(URL); Response.Output.Write(data); %>
Response.Redirect("../index.aspx?Name="+this.textName.Text+"&LastName="+this.textlName.Text);
<system.codedom> <compilers> <compiler language=”c <providerOption name=”CompilerVersion” value=”v4.0″/> </compiler> <compiler language=”vb;vbs;visualbasic;vbscript” extension=”.vb” type=”Microsoft.VisualBasic.VBCodeProvider, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089″ warningLevel=”4″ compilerOptions=”/langversion:14 /nowarn:41008 /define:_MYTYPE=\&quot;Web\&quot; /optionInfer+”> <providerOption name=”CompilerVersion” value=”v4.0″/> </compiler> </compilers> </system.codedom>
<system.codedom> <compilers> <compiler language="c <compiler language="vb;vbs;visualbasic;vbscript" extension=".vb" type="Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" warningLevel="4" compilerOptions="/langversion:14 /nowarn:41008 /define:_MYTYPE=\&quot;Web\&quot; /optionInfer+" /> </compilers> </system.codedom>
Microsoft.CSharp.CSharpCodeProvider, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
Microsoft.CodeDom.Providers.DotNetCompilerPlatform.CSharpCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\MSbuild.exe
<system.codedom> <compilers> <compiler language="c <compiler language="vb;vbs;visualbasic;vbscript" extension=".vb" type="Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" warningLevel="4" compilerOptions="/langversion:14 /nowarn:41008 /define:_MYTYPE=\&quot;Web\&quot; /optionInfer+" /> </compilers> </system.codedom>
<asp:UpdatePanel ID="UpdatePanel1" UpdateMode="Conditional" runat="server"> <ContentTemplate> ... </ContentTemplate> <Triggers> <asp:PostBackTrigger ControlID="myFullPostBackControlID" /> </Triggers> </asp:UpdatePanel>
ScriptManager.GetCurrent(Me).RegisterPostBackControl(myButtonID)
ScriptManager.GetCurrent(this).RegisterPostBackControl(myButtonID);
<Triggers> <asp:PostBackTrigger ControlID="controlID" /> </Triggers>
for (int i = 0; i < wdgMyData.Rows.Count; i++) { ScriptManager.GetCurrent(this).RegisterPostBackControl((ImageButton)wdgMyData.Rows[i].Items[3].FindControl("btnDownloadExcel")); }
ScriptManager.RegisterStartupScript(Page, this.GetType(), "ResetDoc", "ResetDocumentReady();", true);
function ResetDocumentReady() { $("[id$=DummyButton]").click(); }
public enum ControlSelectionType { NotApplicable = 1, SingleSelectRadioButtons = 2, SingleSelectDropDownList = 3, MultiSelectCheckBox = 4, MultiSelectListBox = 5 }
<asp:boundcolumn datafield="ControlSelectionTypeId" headertext="Control Type"></asp:boundcolumn>
<asp:TemplateColumn> <ItemTemplate> <% </ItemTemplate> </asp:TemplateColumn>
using System.ComponentModel; using System.Reflection;
public static string GetDescription(System.Enum value) { FieldInfo fi = value.GetType().GetField(value.ToString()); DescriptionAttribute[] attributes = (DescriptionAttribute[])fi.GetCustomAttributes(typeof(DescriptionAttribute), false); if (attributes.Length > 0) return attributes[0].Description; else return value.ToString(); }
public enum ControlSelectionType { [Description("Not Applicable")] NotApplicable = 1, [Description("Single Select Radio Buttons")] SingleSelectRadioButtons = 2, [Description("Completely Different Display Text")] SingleSelectDropDownList = 3, }
public static string SplitCamelCase(string input) { return System.Text.RegularExpressions.Regex.Replace(input, "([A-Z])", " $1", System.Text.RegularExpressions.RegexOptions.Compiled).Trim(); }
string name = "myNewUIControl"; string[] words = Regex.Matches(name, "(^[a-z]+|[A-Z]+(?![a-z])|[A-Z][a-z]+)") .OfType<Match>() .Select(m => m.Value) .ToArray(); string result = string.Join(" ", words);
Regex.Matches(YOUR_ENUM_VALUE_NAME, "[A-Z][a-z]+").OfType<Match>().Select(match => match.Value).Aggregate((acc, b) => acc + " " + b).TrimStart(
public static string SplitCamelCase(string input) { return Regex.Replace(input, "(?<=[a-z])([A-Z])", " $1", RegexOptions.Compiled); }
using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Globalization; using System.Text.RegularExpressions; using System.Web.Configuration; namespace System { public static class ConventionBasedFormattingExtensions { public static string SplitCamelCase(this string input) { if (input == null) return null; if (string.IsNullOrWhiteSpace(input)) return ""; var separated = input; separated = SplitCamelCaseRegex.Replace(separated, @" $1").Trim(); if (_SplitCamelCase_AllCapsWords.Any()) foreach (var word in _SplitCamelCase_AllCapsWords) separated = SplitCamelCase_AllCapsWords_Regexes[word].Replace(separated, word.ToUpper()); var firstChar = separated.First(); if (char.IsLower(firstChar)) separated = char.ToUpper(firstChar) + separated.Substring(1); return separated; } private static readonly Regex SplitCamelCaseRegex = new Regex(@" ( (?<=[a-z])[A-Z0-9] (? | (?<=[0-9])[a-zA-Z] (? | (?<=[A-Z])[0-9] (? | (?<=[A-Z])[A-Z](?=[a-z]) (? )" , RegexOptions.Compiled | RegexOptions.IgnorePatternWhitespace ); private static readonly string[] _SplitCamelCase_AllCapsWords = (WebConfigurationManager.AppSettings["SplitCamelCase_AllCapsWords"] ?? "") .Split(new[] { .Select(a => a.ToLowerInvariant().Trim()) .ToArray() ; private static Dictionary<string, Regex> _SplitCamelCase_AllCapsWords_Regexes; private static Dictionary<string, Regex> SplitCamelCase_AllCapsWords_Regexes { get { if (_SplitCamelCase_AllCapsWords_Regexes == null) { _SplitCamelCase_AllCapsWords_Regexes = new Dictionary<string,Regex>(); foreach(var word in _SplitCamelCase_AllCapsWords) _SplitCamelCase_AllCapsWords_Regexes.Add(word, new Regex(@"\b" + word + @"\b", RegexOptions.Compiled | RegexOptions.IgnoreCase)); } return _SplitCamelCase_AllCapsWords_Regexes; } } } }
public static string SpacesFromCamel(this string value) { if (value.Length > 0) { var result = new List<char>(); char[] array = value.ToCharArray(); foreach (var item in array) { if (char.IsUpper(item)) { result.Add( } result.Add(item); } return new string(result.ToArray()); } return value; }
public enum ControlSelectionType { NotApplicable = 1, SingleSelectRadioButtons = 2, SingleSelectDropDownList = 3, MultiSelectCheckBox = 4, MultiSelectListBox = 5 } public class NameValue { public string Name { get; set; } public object Value { get; set; } } public static List<NameValue> EnumToList<T>(bool camelcase) { var array = (T[])(Enum.GetValues(typeof(T)).Cast<T>()); var array2 = Enum.GetNames(typeof(T)).ToArray<string>(); List<NameValue> lst = null; for (int i = 0; i < array.Length; i++) { if (lst == null) lst = new List<NameValue>(); string name = ""; if (camelcase) { name = array2[i].CamelCaseFriendly(); } else name = array2[i]; T value = array[i]; lst.Add(new NameValue { Name = name, Value = value }); } return lst; } public static string CamelCaseFriendly(this string pascalCaseString) { Regex r = new Regex("(?<=[a-z])(?<x>[A-Z])|(?<=.)(?<x>[A-Z])(?=[a-z])"); return r.Replace(pascalCaseString, " ${x}"); } protected void Button1_Click1(object sender, EventArgs e) { DropDownList1.DataSource = GeneralClass.EnumToList<ControlSelectionType >(true); ; DropDownList1.DataTextField = "Name"; DropDownList1.DataValueField = "Value"; DropDownList1.DataBind(); }
[DataContract] public enum ControlSelectionType { [EnumMember(Value = "Not Applicable")] NotApplicable = 1, [EnumMember(Value = "Single Select Radio Buttons")] SingleSelectRadioButtons = 2, [EnumMember(Value = "Completely Different Display Text")] SingleSelectDropDownList = 3, } public static string GetDescriptionFromEnumValue(Enum value) { EnumMemberAttribute attribute = value.GetType() .GetField(value.ToString()) .GetCustomAttributes(typeof(EnumMemberAttribute), false) .SingleOrDefault() as EnumMemberAttribute; return attribute == null ? value.ToString() : attribute.Value; }
var chars = ControlSelectionType.NotApplicable.ToString().SelectMany((x, i) => i > 0 && char.IsUpper(x) ? new char[] { Console.WriteLine(new string(chars.ToArray()));
public static string SeperateByCamelCase(this string text, char splitChar = var output = new StringBuilder(); for (int i = 0; i < text.Length; i++) { var c = text[i]; if (i > 0 && char.IsUpper(c)) { var wasLastLower = char.IsLower(text[i - 1]); if (i + 1 < text.Length) { var isNextUpper = char.IsUpper(text[i + 1]); if (!isNextUpper) { output.Append(splitChar); } else if (wasLastLower) { output.Append(splitChar); } } else { if (wasLastLower) { output.Append(splitChar); } } } output.Append(c); } return output.ToString(); }
[TestMethod()] public void ToCamelCaseTest() { var testData = new string[] { "AAACamel", "AAA", "SplitThisByCamel", "AnA", "doesnothing", "a", "A", "aasdasdAAA" }; var expectedData = new string[] { "AAA Camel", "AAA", "Split This By Camel", "An A", "doesnothing", "a", "A", "aasdasd AAA" }; for (int i = 0; i < testData.Length; i++) { var actual = testData[i].SeperateByCamelCase(); var expected = expectedData[i]; Assert.AreEqual(actual, expected); } }
string SeparateCamelCase(string str) { for (int i = 1; i < str.Length; i++) { if (char.IsUpper(str[i])) { str = str.Insert(i, " "); i++; } } return str; }
using System; using System.Linq; using System.Collections.Generic; public class Program { public static void Main() { Console .WriteLine( SeparateByCamelCase("TestString") == "Test String" ); } public static string SeparateByCamelCase(string str) { return String.Join(" ", SplitByCamelCase(str)); } public static IEnumerable<string> SplitByCamelCase(string str) { if (str.Length == 0) return new List<string>(); return new List<string> { Head(str) } .Concat( SplitByCamelCase( Tail(str) ) ); } public static string Head(string str) { return new String( str .Take(1) .Concat( str .Skip(1) .TakeWhile(IsLower) ) .ToArray() ); } public static string Tail(string str) { return new String( str .Skip( Head(str).Length ) .ToArray() ); } public static bool IsLower(char ch) { return ch >= } }
<asp:BoundField DataField="Outlook_ID" HeaderText="OutlookID" />
<head runat="server"> <title>Accessing GridView Hidden Column value </title> <style type="text/css"> .hiddencol { display: none; } </style> <asp:BoundField HeaderText="Email ID" DataField="EmailId" ItemStyle-CssClass="hiddencol" HeaderStyle-CssClass="hiddencol" > </asp:BoundField> ArrayList EmailList = new ArrayList(); foreach (GridViewRow itemrow in gvEmployeeDetails.Rows) { EmailList.Add(itemrow.Cells[YourIndex].Text); }
<asp:BoundField DataField="ID" HeaderText="ID" ItemStyle-CssClass="hiddencol" HeaderStyle-CssClass="hiddencol" ClientIDMode="Static" />
grid0.Columns[0].Visible = true; grid0.DataSource = dt; grid0.DataBind(); grid0.Columns[0].Visible = false;
<asp:TemplateField HeaderText="OutlookID"> <ItemTemplate> <asp:Label ID="blah" runat="server">Existing Control</asp:Label> <asp:HiddenField ID="HiddenOutlookID" runat="server" Value= </ItemTemplate> </asp:TemplateField>
string outlookid = ((HiddenField)e.Row.FindControl("HiddenOutlookID")).Value;
protected void gvSearchResults_DataBound(object sender, EventArgs e) { GridView gridView = (GridView)sender; if (gridView.HeaderRow != null && gridView.HeaderRow.Cells.Count > 0) { gridView.HeaderRow.Cells[UserIdColumnIndex].Visible = false; } foreach (GridViewRow row in gvSearchResults.Rows) { row.Cells[UserIdColumnIndex].Visible = false; } }
txtSpcInst.Text = GridView2.DataKeys(GridView2.SelectedIndex).Values("SpecialInstructions")
SPBoundField hiddenField = new SPBoundField(); hiddenField.HeaderText = "Header"; hiddenField.DataField = "DataFieldName"; grid.Columns.Add(hiddenField); grid.DataSource = myDataSource; grid.DataBind(); hiddenField.Visible = false;
protected void GridviewLecturer_PreRender(object sender, EventArgs e) { GridviewLecturer.Columns[0].Visible = false; }
<%@ Page Language="C <script runat="server"> protected override void OnLoad(EventArgs e) { Response.Redirect("new.aspx"); } </script>
<html> <head> <meta http-equiv="refresh" content="0;url=new.aspx" /> </head> <body> </body> </html>
<%@ Page Language="C <script runat="server"> protected override void OnLoad(EventArgs e) { Response.RedirectPermanent("new.aspx"); base.OnLoad(e); } </script>
<script type="text/javascript"> function toRedirect() { window.location.href="new.aspx"; } </script>
ClientScript.RegisterStartupScript(this.gettype(),"Redirect","toRedirect()",true);
<iframe> <script runat="server"> private void Page_Load(object sender, System.EventArgs e) { Response.Status = "301 Moved Permanently"; Response.AddHeader("Location","http: } </script> </iframe>
public static class GlobalVariables { public static string Foo { get { return "foo"; } } public static string Bar { get { return HttpContext.Current.Application["Bar"] as string; } set { HttpContext.Current.Application["Bar"] = value; } } }
public static class MyGlobalVariables { public static string MyGlobalString { get; set; } }
namespace MvcWebApplication { public class MvcApplication : System.Web.HttpApplication { private string _licensefile; internal string LicenseFile { get { if (String.IsNullOrEmpty(_licensefile)) { string tempMylFile = Path.Combine(Path.GetDirectoryName(Assembly.GetAssembly(typeof(LDLL.License)).Location), "License.l"); if (!File.Exists(tempMylFile)) File.Copy(Server.MapPath("~/Content/license/License.l"), tempMylFile, true); _licensefile = tempMylFile; } return _licensefile; } } protected void Application_Start() { Application["LicenseFile"] = LicenseFile; AreaRegistration.RegisterAllAreas(); RegisterGlobalFilters(GlobalFilters.Filters); RegisterRoutes(RouteTable.Routes); } } }
namespace MvcWebApplication.Controllers { public class HomeController : Controller { // public ActionResult Index() { return View(HttpContext.Application["LicenseFile"] as string); } } }
return View(HttpContext.Application["X"] as yourType);
public static class Config { public static readonly string SomeValue = "blah"; }
public static class GlobalVars { private const string GlobalKey = "AllMyVars"; static GlobalVars() { Hashtable table = HttpContext.Current.Application[GlobalKey] as Hashtable; if (table == null) { table = new Hashtable(); HttpContext.Current.Application[GlobalKey] = table; } } public static Hashtable Vars { get { return HttpContext.Current.Application[GlobalKey] as Hashtable; } } public static IEnumerable<SomeClass> SomeCollection { get { return GetVar("SomeCollection") as IEnumerable<SomeClass>; } set { WriteVar("SomeCollection", value); } } internal static DateTime SomeDate { get { return (DateTime)GetVar("SomeDate"); } set { WriteVar("SomeDate", value); } } private static object GetVar(string varName) { if (Vars.ContainsKey(varName)) { return Vars[varName]; } return null; } private static void WriteVar(string varName, object value) { if (value == null) { if (Vars.ContainsKey(varName)) { Vars.Remove(varName); } return; } if (Vars[varName] == null) { Vars.Add(varName, value); } else { Vars[varName] = value; } } }
<runtime> <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1"> <dependentAssembly> <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" /> <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.1" /> </dependentAssembly> </assemblyBinding> </runtime>
PM> Install-Package Microsoft.AspNet.Mvc -Version 3.0.50813.1
<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1"> <dependentAssembly> <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" /> <bindingRedirect oldVersion="0.0.0.0-3.0.0.1" newVersion="3.0.0.1" /> </dependentAssembly> </assemblyBinding>
Install-Package Microsoft.AspNet.Mvc -Version 3.0.50813.1
public class ServerController : Controller { [HttpPost] public ActionResult ApplicationPoolsUpdate(ServiceViewModel viewModel) { XDocument updatedResultsDocument = myService.UpdateApplicationPools(); } }
public class ApplicationPoolController : Controller { public ActionResult UpdateConfirmation(XDocument xDocument) { return View(); } }
return RedirectToAction("UpdateConfirmation", "ApplicationPool", new { xDocument = updatedResultsDocument }); return RedirectToAction("UpdateConfirmation", new { controller = "ApplicationPool", xDocument = updatedResultsDocument });
return RedirectToAction("ActionName", "Controller", new { arg = updatedResultsDocument });
int documentId = _myDocumentRepository.Save(updatedResultsDocument);
return RedirectToAction("UpdateConfirmation", "ApplicationPoolController ", new { id = documentId });
public ActionResult UpdateConfirmation(int id) { XDocument doc = _myDocumentRepository.GetById(id); ConfirmationModel model = new ConfirmationModel(doc); return View(model); }
[HttpPost] public ActionResult ApplicationPoolsUpdate(ServiceViewModel viewModel) { XDocument updatedResultsDocument = myService.UpdateApplicationPools(); TempData["doc"] = updatedResultsDocument; return RedirectToAction("UpdateConfirmation"); }
public ActionResult UpdateConfirmation() { if (TempData["doc"] != null) { XDocument updatedResultsDocument = (XDocument) TempData["doc"]; ... return View(); } }
public class Home1Controller : Controller { [HttpPost] public ActionResult CheckBox(string date) { return RedirectToAction("ActionName", "Home2", new { Date =date }); } }
public class Home2Controller : Controller { [HttpPost] Public ActionResult ActionName(string Date) { return View(); } }
public class ServerController : Controller { [HttpPost] public ActionResult ApplicationPoolsUpdate(ServiceViewModel viewModel) { XDocument updatedResultsDocument = myService.UpdateApplicationPools(); ApplicationPoolController pool=new ApplicationPoolController(); return pool.UpdateConfirmation(updatedResultsDocument); } }
public static NameValueCollection AppSettings { get { object section = ConfigurationManager.GetSection("appSettings"); if (section == null || !(section is NameValueCollection)) { throw new ConfigurationErrorsException(SR.GetString("Config_appsettings_declaration_invalid")); } return (NameValueCollection)section; } }
public static object GetSection(string sectionName) { if (string.IsNullOrEmpty(sectionName)) { return null; } ConfigurationManager.PrepareConfigSystem(); return ConfigurationManager.s_configSystem.GetSection(sectionName); }
ConfigurationManager.RefreshSection("appSettings"); string fromFile = ConfigurationManager.AppSettings.Get(key) ?? string.Empty;
private string RefreshFromDiskAndGetSetting(string key) { ConfigurationManager.RefreshSection("appSettings"); return GetCachedSetting(key); } private string GetCachedSetting(string key) { return ConfigurationManager.AppSettings.Get(key) ?? string.Empty; }
var file = new FileInfo(@"\\MyConfigFilePath\Web.config"); DateTime first = file.LastAccessTime; string fn = ConfigurationManager.AppSettings["FirstName"]; Thread.Sleep(2000); DateTime second = file.LastAccessTime; string sn = ConfigurationManager.AppSettings["Surname"]; Thread.Sleep(2000); DateTime third = file.LastAccessTime;
string fn1 = ConfigurationManager.AppSettings["FirstName"]; Thread.Sleep(2000); DateTime fourth = file.LastAccessTime;
private async Task SignInAsync(ApplicationUser user, bool isPersistent) { var AccountNo = "101"; AuthenticationManager.SignOut(DefaultAuthenticationTypes.ExternalCookie); var identity = await UserManager.CreateIdentityAsync(user, DefaultAuthenticationTypes.ApplicationCookie); identity.AddClaim(new Claim(ClaimTypes.UserData, AccountNo)); AuthenticationManager.SignIn(new AuthenticationProperties() { IsPersistent = isPersistent, RedirectUri="Account/Index"}, identity); }
public string AccountNo { get { var CP = ClaimsPrincipal.Current.Identities.First(); var Account= CP.Claims.FirstOrDefault(p => p.Type == ClaimTypes.UserData); return Account.Value; } set { var CP = ClaimsPrincipal.Current.Identities.First(); var AccountNo= CP.Claims.FirstOrDefault(p => p.Type == ClaimTypes.UserData).Value; CP.RemoveClaim(new Claim(ClaimTypes.UserData,AccountNo)); CP.AddClaim(new Claim(ClaimTypes.UserData, value)); } }
namespace Foobar.Common.Extensions { public static class Extensions { public static void AddUpdateClaim(this IPrincipal currentPrincipal, string key, string value) { var identity = currentPrincipal.Identity as ClaimsIdentity; if (identity == null) return; var existingClaim = identity.FindFirst(key); if (existingClaim != null) identity.RemoveClaim(existingClaim); identity.AddClaim(new Claim(key, value)); var authenticationManager = HttpContext.Current.GetOwinContext().Authentication; authenticationManager.AuthenticationResponseGrant = new AuthenticationResponseGrant(new ClaimsPrincipal(identity), new AuthenticationProperties() { IsPersistent = true }); } public static string GetClaimValue(this IPrincipal currentPrincipal, string key) { var identity = currentPrincipal.Identity as ClaimsIdentity; if (identity == null) return null; var claim = identity.Claims.FirstOrDefault(c => c.Type == key); return claim.Value; } } }
using Foobar.Common.Extensions; namespace Foobar.Web.Main.Controllers { public class HomeController : Controller { public ActionResult Index() { User.AddUpdateClaim("key1", "value1"); User.AddUpdateClaim("key2", "value2"); User.AddUpdateClaim("key3", "value3"); } public ActionResult Details() { var key2 = User.GetClaim("key2"); } } }
set { var authenticationManager = HttpContext.GetOwinContext().Authentication; var identity = new ClaimsIdentity(User.Identity); identity.RemoveClaim(identity.FindFirst("AccountNo")); identity.AddClaim(new Claim("AccountNo", value)); authenticationManager.AuthenticationResponseGrant = new AuthenticationResponseGrant( new ClaimsPrincipal(identity), new AuthenticationProperties { IsPersistent = true } ); }
ApplicationUser user = await UserManager.FindByIdAsync(User.Identity.GetUserId()); var Identity = new ClaimsIdentity(User.Identity); await UserManager.RemoveClaimAsync(user.Id, Identity.FindFirst("AccountNo")); await UserManager.AddClaimAsync(user.Id, new Claim("AccountNo", value)); await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false); var userClaims = UserManager.GetClaims(user.Id); if (userClaims.Any()) { foreach (var item in userClaims) { UserManager.RemoveClaim(user.Id, item); } }
var identity = User.Identity as ClaimsIdentity; var newIdentity = new ClaimsIdentity(identity.AuthenticationType, identity.NameClaimType, identity.RoleClaimType); newIdentity.AddClaims(identity.Claims.Where(c => false == (c.Type == claim.Type && c.Value == claim.Value))); AuthenticationManager.SignOut(identity.AuthenticationType); AuthenticationManager.SignIn(new AuthenticationProperties() { IsPersistent = isPersistent }, newIdentity);
public async Task<ClaimsIdentity> GenerateUserIdentityAsync(PATAUserManager manager) { var userIdentity = await manager.CreateIdentityAsync(this, DefaultAuthenticationTypes.ApplicationCookie); userIdentity.AddClaim(new Claim(ClaimTypes.Role, this.Role)); return userIdentity; }
var userWithClaims = (ClaimsPrincipal)User; Claim CRole = userWithClaims.Claims.First(c => c.Type == ClaimTypes.Role);
services.AddScoped<IUserClaimsPrincipalFactory<ApplicationUser>, UserClaimService>();
public class UserClaimService : UserClaimsPrincipalFactory<ApplicationUser, ApplicationRole> { private readonly ApplicationDbContext _dbContext; public UserClaimService(ApplicationDbContext dbContext, UserManager<ApplicationUser> userManager, RoleManager<ApplicationRole> roleManager, IOptions<IdentityOptions> optionsAccessor) : base(userManager, roleManager, optionsAccessor) { _dbContext = dbContext; } public override async Task<ClaimsPrincipal> CreateAsync(ApplicationUser user) { var principal = await base.CreateAsync(user); ((ClaimsIdentity)principal.Identity).AddClaim(new Claim("claimType", "some important claim value")); return principal; } }
var user = await _userManager.GetUserAsync(User); await _signInManager.RefreshSignInAsync(user);
var identity = new ClaimsIdentity(User.Identity); if(identity.FindFirst("NameOfUser")!=null) await UserManager.RemoveClaimAsync(applicationUser.Id, identity.FindFirst("NameOfUser")); await UserManager.AddClaimAsync(applicationUser.Id, new Claim("NameOfUser", applicationUser.Name)); AuthenticationManager.SignOut(identity.AuthenticationType); await SignInManager.SignInAsync(Userprofile, isPersistent: false, rememberBrowser: false); return RedirectToAction("Index", "Home");
public class ClaimsCookie { private readonly ClaimsPrincipal _user; private readonly HttpContext _httpContext; public ClaimsCookie(ClaimsPrincipal user, HttpContext httpContext = null) { _user = user; _httpContext = httpContext; } public string GetValue(CookieName cookieName, KeyName keyName) { var principal = _user as ClaimsPrincipal; var cp = principal.Identities.First(i => i.AuthenticationType == ((CookieName)cookieName).ToString()); return cp.FindFirst(((KeyName)keyName).ToString()).Value; } public async void SetValue(CookieName cookieName, KeyName[] keyName, string[] value) { if (keyName.Length != value.Length) { return; } var principal = _user as ClaimsPrincipal; var cp = principal.Identities.First(i => i.AuthenticationType == ((CookieName)cookieName).ToString()); for (int i = 0; i < keyName.Length; i++) { if (cp.FindFirst(((KeyName)keyName[i]).ToString()) != null) { cp.RemoveClaim(cp.FindFirst(((KeyName)keyName[i]).ToString())); cp.AddClaim(new Claim(((KeyName)keyName[i]).ToString(), value[i])); } } await _httpContext.SignOutAsync(CookieName.UserProfilCookie.ToString()); await _httpContext.SignInAsync(CookieName.UserProfilCookie.ToString(), new ClaimsPrincipal(cp), new AuthenticationProperties { IsPersistent = bool.Parse(cp.FindFirst(KeyName.IsPersistent.ToString()).Value), AllowRefresh = true }); } public enum CookieName { CompanyUserProfilCookie = 0, UserProfilCookie = 1, AdminPanelCookie = 2 } public enum KeyName { Id, Name, Surname, Image, IsPersistent } }
if (HttpContext.User.Identity is ClaimsIdentity identity) { identity.RemoveClaim(identity.FindFirst("userId")); identity.AddClaim(new Claim("userId", userInfo?.id.ToString())); await HttpContext.SignInAsync( CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(HttpContext.User.Identity)); }
public static class ClaimExtensions { public static void AddUpdateClaim(this IPrincipal currentPrincipal, string key, string value, ApplicationUserManager userManager) { var identity = currentPrincipal.Identity as ClaimsIdentity; if (identity == null) return; var existingClaim = identity.FindFirst(key); if (existingClaim != null) { RemoveClaim(currentPrincipal, key, userManager); } var claim = new Claim(key, value); identity.AddClaim(claim); var authenticationManager = HttpContext.Current.GetOwinContext().Authentication; authenticationManager.AuthenticationResponseGrant = new AuthenticationResponseGrant(new ClaimsPrincipal(identity), new AuthenticationProperties() { IsPersistent = true }); userManager.AddClaim(identity.GetUserId(),claim); } public static void RemoveClaim(this IPrincipal currentPrincipal, string key, ApplicationUserManager userManager) { var identity = currentPrincipal.Identity as ClaimsIdentity; if (identity == null) return ; var existingClaims = identity.FindAll(key); existingClaims.ForEach(c=> identity.RemoveClaim(c)); var user = userManager.FindById(identity.GetUserId()); var claims = userManager.GetClaims(user.Id); claims.Where(x => x.Type == key).ToList().ForEach(c => userManager.RemoveClaim(user.Id, c)); } public static string GetClaimValue(this IPrincipal currentPrincipal, string key) { var identity = currentPrincipal.Identity as ClaimsIdentity; if (identity == null) return null; var claim = identity.Claims.First(c => c.Type == key); return claim.Value; } public static string GetAllClaims(this IPrincipal currentPrincipal, ApplicationUserManager userManager) { var identity = currentPrincipal.Identity as ClaimsIdentity; if (identity == null) return null; var claims = userManager.GetClaims(identity.GetUserId()); var userClaims = new StringBuilder(); claims.ForEach(c => userClaims.AppendLine($"<li>{c.Type}, {c.Value}</li>")); return userClaims.ToString(); } }
var user = User as ClaimsPrincipal; var identity = user.Identity as ClaimsIdentity; var claim = (from c in user.Claims where c.Type == ClaimTypes.UserData select c).Single(); identity.RemoveClaim(claim);
string filePath ="F:/jan11/MFrame/Templates/feb11";
public static string ReplaceLastOccurrence(string Source, string Find, string Replace) { int place = Source.LastIndexOf(Find); if(place == -1) return Source; string result = Source.Remove(place, Find.Length).Insert(place, Replace); return result; }
int i = filePath.LastIndexOf(TnaName); if (i >= 0) filePath = filePath.Substring(0, i) + filePath.Substring(i + TnaName.Length);
public static string RegexReplace(this string source, string pattern, string replacement) { return Regex.Replace(source,pattern, replacement); } public static string ReplaceEnd(this string source, string value, string replacement) { return RegexReplace(source, $"{value}$", replacement); } public static string RemoveEnd(this string source, string value) { return ReplaceEnd(source, value, string.Empty); }
string filePath ="F:/feb11/MFrame/Templates/feb11"; filePath = filePath.RemoveEnd("feb11"); filePath = filePath.ReplaceEnd("feb11","jan11");
string filePath = "F:/jan11/MFrame/Templates/feb11"; Console.WriteLine(System.IO.Path.GetDirectoryName(filePath));
[Display(Name = "Phone", Description="Hello World!")] public string Phone1 { get; set; }
@Html.LabelFor(model => model.Organization.Phone1) @Html.EditorFor(model => model.Organization.Phone1) @Html.ValidationMessageFor(model => model.Organization.Phone1)
using System; using System.Linq.Expressions; using System.Web.Mvc; public static class MvcHtmlHelpers { public static MvcHtmlString DescriptionFor<TModel, TValue>(this HtmlHelper<TModel> self, Expression<Func<TModel, TValue>> expression) { var metadata = ModelMetadata.FromLambdaExpression(expression, self.ViewData); var description = metadata.Description; return MvcHtmlString.Create(string.Format(@"<span>{0}</span>", description)); } }
@Html.TextBoxFor( model => model.Email , new { title = ModelMetadata.FromLambdaExpression<RegisterModel , string>( model => model.Email , ViewData ).Description } )
using System; using System.Linq.Expressions; using Microsoft.AspNetCore.Html; using Microsoft.AspNetCore.Mvc.Rendering; using Microsoft.AspNetCore.Mvc.ViewFeatures.Internal; public static class HtmlExtensions { public static IHtmlContent DescriptionFor<TModel, TValue>(this IHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression) { if (html == null) throw new ArgumentNullException(nameof(html)); if (expression == null) throw new ArgumentNullException(nameof(expression)); var modelExplorer = ExpressionMetadataProvider.FromLambdaExpression(expression, html.ViewData, html.MetadataProvider); if (modelExplorer == null) throw new InvalidOperationException($"Failed to get model explorer for {ExpressionHelper.GetExpressionText(expression)}"); return new HtmlString(modelExplorer.Metadata.Description); } }
using System; using System.Linq.Expressions; using Microsoft.AspNet.Html.Abstractions; using Microsoft.AspNet.Mvc.ViewFeatures;
<div class="form-group row"> <label asp-for="Name" class="col-md-2 form-control-label"></label> <div class="col-md-10"> <input asp-for="Name" class="form-control" aria-describedby="Name-description" /> <span asp-description-for="Name" class="form-text text-muted" /> <span asp-validation-for="Name" class="text-danger" /> </div> </div>
using System; using System.Threading.Tasks; using Microsoft.AspNetCore.Mvc.Rendering; using Microsoft.AspNetCore.Mvc.ViewFeatures; using Microsoft.AspNetCore.Razor.TagHelpers; [HtmlTargetElement("span", Attributes = DescriptionForAttributeName)] public class SpanDescriptionTagHelper : TagHelper { private const string DescriptionForAttributeName = "asp-description-for"; public SpanDescriptionTagHelper(IHtmlGenerator generator) { Generator = generator; } public override int Order { get { return -1000; } } [HtmlAttributeNotBound] [ViewContext] public ViewContext ViewContext { get; set; } protected IHtmlGenerator Generator { get; } [HtmlAttributeName(DescriptionForAttributeName)] public ModelExpression DescriptionFor { get; set; } public override async Task ProcessAsync(TagHelperContext context, TagHelperOutput output) { if (context == null) { throw new ArgumentNullException(nameof(context)); } if (output == null) { throw new ArgumentNullException(nameof(output)); } var metadata = DescriptionFor.Metadata; if (metadata == null) { throw new InvalidOperationException(string.Format("No provided metadata ({0})", DescriptionForAttributeName)); } output.Attributes.SetAttribute("id", metadata.PropertyName + "-description"); if( !string.IsNullOrWhiteSpace( metadata.Description)) { output.Content.SetContent(metadata.Description); output.TagMode = TagMode.StartTagAndEndTag; } } }
public static class MvcHtmlHelpers { public static string DescriptionFor<TModel, TValue>(this HtmlHelper<TModel> self, Expression<Func<TModel, TValue>> expression) { var metadata = ModelMetadata.FromLambdaExpression(expression, self.ViewData); var description = metadata.Description; return string.IsNullOrWhiteSpace(description) ? "" : description; } }
[Display(Name = "User Name", Description = "Enter your User Name")] public string FullName { get; set; }
@Html.DisplayNameFor(m => m.FullName) @Html.TextBoxFor(m => m.FullName, new { @class = "form-control", placeholder = Html.DescriptionFor(m => m.FullName) })
var attrib = (DisplayAttribute)Attribute.GetCustomAttribute( member, typeof(DisplayAttribute)); var desc = attrib == null ? "" : attrib.GetDescription()
@ViewData.ModelMetadata.Properties .Where(m => m.PropertyName == "Phone1").FirstOrDefault().Description
<div class="form-group col-sm-6"> @Html.LabelFor(m => m.Organization.Phone1) @Html.EditorFor(m => m.Organization.Phone1) <p class="help-block"> @ViewData.ModelMetadata.Properties .Where(m => m.PropertyName == "DayCount").FirstOrDefault().Description </p> </div>
public class ExtendedModelMetadataProvider : DataAnnotationsModelMetadataProvider { protected override ModelMetadata CreateMetadata(IEnumerable<System.Attribute> attributes, Type containerType, Func<object> modelAccessor, Type modelType, string propertyName) { var attributeList = attributes as IList<System.Attribute> ?? attributes.ToList(); var data = base.CreateMetadata(attributeList, containerType, modelAccessor, modelType, propertyName); var description = attributeList.SingleOrDefault(a => typeof(DescriptionAttribute) == a.GetType()); if (description != null) { data.Description = ((DescriptionAttribute)description).Description; } return data; } }
ModelMetadataProviders.Current = new ExtendedModelMetadataProvider();
using System; using System.Threading.Tasks; using Microsoft.AspNetCore.Mvc.Rendering; using Microsoft.AspNetCore.Mvc.ViewFeatures; using Microsoft.AspNetCore.Razor.TagHelpers; [HtmlTargetElement("label", Attributes = ForAttributeName)] public class LabelTitleTagHelper : TagHelper { private const string ForAttributeName = "asp-for"; public LabelTitleTagHelper(IHtmlGenerator generator) { Generator = generator; } public override int Order { get { return -1000; } } [HtmlAttributeNotBound] [ViewContext] public ViewContext ViewContext { get; set; } protected IHtmlGenerator Generator { get; } [HtmlAttributeName(ForAttributeName)] public ModelExpression TitleFor { get; set; } public override async Task ProcessAsync(TagHelperContext context, TagHelperOutput output) { if (context == null) { throw new ArgumentNullException(nameof(context)); } if (output == null) { throw new ArgumentNullException(nameof(output)); } var metadata = TitleFor.Metadata; if (metadata == null) { throw new InvalidOperationException(string.Format("No provided metadata ({0})", ForAttributeName)); } if (!string.IsNullOrWhiteSpace(metadata.Description)) output.Attributes.SetAttribute("title", metadata.Description); } }
using System; using System.Linq.Expressions; using Microsoft.AspNetCore.Html; using Microsoft.AspNetCore.Mvc.Rendering; using Microsoft.AspNetCore.Mvc.ViewFeatures.Internal; public static class HtmlExtensions { public static IHtmlContent DescriptionFor<TModel, TValue>(this IHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression) { if (html == null) throw new ArgumentNullException(nameof(html)); if (expression == null) throw new ArgumentNullException(nameof(expression)); var modelExplorer = ExpressionMetadataProvider.FromLambdaExpression(expression, html.ViewData, html.MetadataProvider); if (modelExplorer == null) throw new InvalidOperationException($"Failed to get model explorer for {ExpressionHelper.GetExpressionText(expression)}"); return new HtmlString(modelExplorer.Metadata.Description); } }
public static MvcHtmlString ToolTipLabel (string resourceKey, string text, bool isRequired, string labelFor = "", string labelId = "",string className="") { string tooltip = string.Empty; StringBuilder sb = new StringBuilder(); if (!string.IsNullOrEmpty(resourceKey)) { var resources = GetAllResourceValues(); if (resources.ContainsKey(resourceKey)) { tooltip = resources[resourceKey].Value; } } sb.Append("<label"); if (!string.IsNullOrEmpty(labelFor)) { sb.AppendFormat(" for=\"{0}\"", labelFor); } if (!string.IsNullOrEmpty(labelId)) { sb.AppendFormat(" Id=\"{0}\"", labelId); } if (!string.IsNullOrEmpty(className)) { sb.AppendFormat(" class=\"{0}\"", className); } if (!string.IsNullOrEmpty(tooltip)) { sb.AppendFormat(" data-toggle= } if (isRequired) { sb.AppendFormat("><em class= } else { sb.AppendFormat(">{0}</label></br>", text); } return MvcHtmlString.Create(sb.ToString()); }
@HtmlExtension.ToolTipLabel(" "," ",true," "," "," ")
Is it acceptable for user a and user b to see the same results?
string oldFile = "oldFile.pdf"; string newFile = "newFile.pdf"; PdfReader reader = new PdfReader(oldFile); Rectangle size = reader.GetPageSizeWithRotation(1); Document document = new Document(size); FileStream fs = new FileStream(newFile, FileMode.Create, FileAccess.Write); PdfWriter writer = PdfWriter.GetInstance(document, fs); document.Open(); PdfContentByte cb = writer.DirectContent; BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252,BaseFont.NOT_EMBEDDED); cb.SetColorFill(BaseColor.DARK_GRAY); cb.SetFontAndSize(bf, 8); cb.BeginText(); string text = "Some random blablablabla..."; cb.ShowTextAligned(1, text, 520, 640, 0); cb.EndText(); cb.BeginText(); text = "Other random blabla..."; cb.ShowTextAligned(2, text, 100, 200, 0); cb.EndText(); PdfImportedPage page = writer.GetImportedPage(reader, 1); cb.AddTemplate(page, 0, 0); document.Close(); fs.Close(); writer.Close(); reader.Close();
using (var reader = new PdfReader(@"C:\Input.pdf")) { using (var fileStream = new FileStream(@"C:\Output.pdf", FileMode.Create, FileAccess.Write)) { var document = new Document(reader.GetPageSizeWithRotation(1)); var writer = PdfWriter.GetInstance(document, fileStream); document.Open(); for (var i = 1; i <= reader.NumberOfPages; i++) { document.NewPage(); var baseFont = BaseFont.CreateFont(BaseFont.HELVETICA_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED); var importedPage = writer.GetImportedPage(reader, i); var contentByte = writer.DirectContent; contentByte.BeginText(); contentByte.SetFontAndSize(baseFont, 12); var multiLineString = "Hello,\r\nWorld!".Split( foreach (var line in multiLineString) { contentByte.ShowTextAligned(PdfContentByte.ALIGN_LEFT, line, 200, 200, 0); } contentByte.EndText(); contentByte.AddTemplate(importedPage, 0, 0); } document.Close(); writer.Close(); } }
PdfReader reader = new PdfReader(new RandomAccessFileOrArray(Request.MapPath("Template.pdf")), null); Rectangle size = reader.GetPageSizeWithRotation(1); using (Stream outStream = Response.OutputStream) { Document document = new Document(size); PdfWriter writer = PdfWriter.GetInstance(document, outStream); document.Open(); try { PdfContentByte cb = writer.DirectContent; cb.BeginText(); try { cb.SetFontAndSize(BaseFont.CreateFont(), 12); cb.SetTextMatrix(110, 110); cb.ShowText("aaa"); } finally { cb.EndText(); } PdfImportedPage page = writer.GetImportedPage(reader, 1); cb.AddTemplate(page, 0, 0); } finally { document.Close(); writer.Close(); reader.Close(); } }
public static void AddTextToPdf(string inputPdfPath, string outputPdfPath, string textToAdd, Point point) { string pathin = inputPdfPath; string pathout = outputPdfPath; using (PdfReader reader = new PdfReader(pathin)) using (PdfStamper stamper = new PdfStamper(reader, new FileStream(pathout, FileMode.Create))) { reader.SelectPages("1-2"); var pageSize = reader.GetPageSize(1); PdfContentByte pbover = stamper.GetOverContent(1); Font font = new Font(); font.Size = 45; int x = point.X; int y = point.Y; y = (int) (pageSize.Height - y); ColumnText.ShowTextAligned(pbover, Element.ALIGN_CENTER, new Phrase(textToAdd, font), x, y, 0); } }
class Person { public string PersonId; public string Name; public string Email; public static bool IsValidName() { } public static bool IsValidEmail() { } } class PersonService { private PersonRepository pRepository; PersonService() { pRepository = new PersonRepository(); } public bool IsExistingEmail(string email) { } public Person GetPerson(email) { return pRepository.Get(email); } public void SavePerson(Person p) { if (Person.IsValidEmail(p.Email) && !IsExistingEmail(p.Email) { pRepository.Save(p); } } } class PersonRepository { public void Save(Person p) { } public Person Get(string email) { } public bool IsExistingEmail(string email) { } }
class PersonService { private PersonRepository pRepository; PersonService() { pRepository = new PersonRepository(); } }
class PersonService { private PersonRepository pRepository; PersonService(PersonRepository pRepository) { this.pRepository = pRepository; } }
using (AmazonS3Client client = new AmazonS3Client(region)) { PutObjectRequest putObjectRequest = new PutObjectRequest { ServerSideEncryptionMethod = ServerSideEncryptionMethod.AES256, InputStream = stream, BucketName = s3Bucket, Key = key, ContentType = "application/octet-stream", Timeout = TimeSpan.FromMinutes(60), ReadWriteTimeout = TimeSpan.FromMinutes(5) }; if (!string.IsNullOrEmpty(fileName)) putObjectRequest.Metadata.Add("Name", fileName); PutObjectResponse putObjectResponse = client.PutObject(putObjectRequest); }
List<ListItem> selected = CBLGold.Items.Cast<ListItem>() .Where(li => li.Selected) .ToList();
List<ListItem> selected = new List<ListItem>(); foreach (ListItem item in CBLGold.Items) if (item.Selected) selected.Add(item);
List<string> selectedValues = CBLGold.Items.Cast<ListItem>() .Where(li => li.Selected) .Select(li => li.Value) .ToList();
var selected = CBLGold.Items.Cast<ListItem>().Where(x => x.Selected);
foreach (ListItem item in CBLGold.Items) { if (item.Selected) { string selectedValue = item.Value; } }
public static IEnumerable<ListItem> GetSelectedItems(this ListControl checkBoxList) { return from ListItem li in checkBoxList.Items where li.Selected select li; }
List<string> selectedValues = CBLGold.Items.Cast<ListItem>() .Where(li => li.Selected) .Select(li => li.Value) .Select(int.Parse) .ToList();
string s= string.Empty for (int i = 0; i < Chkboxlist.Items.Count; i++) { if (Chkboxlist.Items[i].Selected) { s+= Chkboxlist.Items[i].Value + ";"; } }
List<string> values =new list<string>(); foreach(ListItem Item in ChkList.Item) { if(Item.Selected) values.Add(item.Value); }
protected void Page_Load(object sender, EventArgs e) { if (!this.IsPostBack) { SqlConnection dbConn = new SqlConnection(WebConfigurationManager.ConnectionStrings["ConnString"].ConnectionString); string query; try { query = "SELECT [name], [mail] FROM [users]"; dbConn.Open(); SqlDataAdapter da = new SqlDataAdapter(query, dbConn); DataSet ds = new DataSet(); da.Fill(ds); if (ds.Tables[0].Rows.Count != 0) { checkboxlist1.DataSource = ds; checkboxlist1.DataTextField = "name"; checkboxlist1.DataValueField = "mail"; checkboxlist1.DataBind(); } else { Response.Write("No Results found"); } } catch (Exception ex) { Response.Write("<br>" + ex); } finally { dbConn.Close(); } } } protected void btnSend_Click(object sender, EventArgs e) { string strChkBox = string.Empty; foreach (ListItem li in checkboxlist1.Value) { if (li.Selected == true) { strChkBox += li.Value + "; "; } } Response.Write(strChkBox); }
DirectoryEntry dirEnt = new DirectoryEntry("LDAP: string[] loadProps = new string[] { "cn", "samaccountname", "name", "distinguishedname" }; DirectorySearcher srch = new DirectorySearcher(dirEnt, "(objectClass=Group)", loadProps); var results = srch.FindAll();
using(DirectorySearcher srch = new DirectorySearcher(dirEnt, "(objectClass=Group)", loadProps)) { srch.PageSize = 1000; var results = srch.FindAll(); }
public IEnumerable<SearchResult> SafeFindAll(DirectorySearcher searcher) { using(SearchResultCollection results = searcher.FindAll()) { foreach (SearchResult result in results) { yield return result; } } }
using(DirectorySearcher srch = new DirectorySearcher(dirEnt, "(objectClass=Group)", loadProps)) { srch.PageSize = 1000; var results = SafeFindAll(srch); }
public class AccessRequestViewModel { public Request Request { get; private set; } public SelectList Buildings { get; private set; } public List<Person> Persons { get; private set; } }
RuleFor(vm => vm.Persons) .Must((vm, person) => person.Count > 0) .WithMessage("At least one person is required");
public class EnsureOneElementAttribute : ValidationAttribute { public override bool IsValid(object value) { var list = value as IList; if (list != null) { return list.Count > 0; } return false; } }
[EnsureOneElement(ErrorMessage = "At least a person is required")] public List<Person> Persons { get; private set; }
public class EnsureMinimumElementsAttribute : ValidationAttribute { private readonly int _minElements; public EnsureMinimumElementsAttribute(int minElements) { _minElements = minElements; } public override bool IsValid(object value) { var list = value as IList; if (list != null) { return list.Count >= _minElements; } return false; } }
[EnsureMinimumElements(1, ErrorMessage = "At least a person is required")] public List<Person> Persons { get; private set; }
RuleFor(x => x.Persons) .Must(x => x.Count > 0) .WithMessage("At least a person is required");
[Range(minimum: 1, maximum: Int32.MaxValue, ErrorMessage = "At least one item needs to be selected")] public int ItemCount { get { return Items != null ? Items.Length : 0; } }
public class MinimumElementsAttribute : ValidationAttribute { private readonly int minElements; public MinimumElementsAttribute(int minElements) { this.minElements = minElements; } protected override ValidationResult IsValid(object value, ValidationContext validationContext) { var list = value as IList; var result = list?.Count >= minElements; return result ? ValidationResult.Success : new ValidationResult($"{validationContext.DisplayName} requires at least {minElements} element" + (minElements > 1 ? "s" : string.Empty)); } }
[MinimumElements(1)] public List<Customer> Customers {get;set} [MinimumElements(2)] public List<Address> Addresses {get;set}
[Required, MinLength(1, ErrorMessage = "At least one item required in work order")] public ICollection<WorkOrderItem> Items { get; set; }
public class AccessRequestViewModel { public Request Request { get; private set; } public SelectList Buildings { get; private set; } [AtLeastOneItem] public List<Person> Persons { get; private set; } }
public class AccessRequestViewModel { private AccessRequesetViewModel() { }; public static GetAccessRequestViewModel (List<Person> persons) { return new AccessRequestViewModel() { Persons = persons, }; } public Request Request { get; private set; } public SelectList Buildings { get; private set; } public List<Person> Persons { get; private set; } }
List<string> ls = new List<string>(); ls.Add("one"); ls.Add("two"); string type = string.Join(",", ls.ToArray());
List<string> ls = new List<string>(); ls.Add("one"); ls.Add("two"); string type = ls.Aggregate((x,y) => x + "," + y);
string myCommaSeperatedString = string.Join(",",ls);
List<string> name = new List<string>(); name.Add("Latif"); name.Add("Ram"); name.Add("Adam"); string nameOfString = (string.Join(",", name.Select(x => x.ToString()).ToArray()));
static void Main(string[] args) { List<string> listStrings = new List<string>(){ "C string CommaSeparateString = GenerateCommaSeparateStringFromList(listStrings); Console.Write(CommaSeparateString); Console.ReadKey(); } private static string GenerateCommaSeparateStringFromList(List<string> listStrings) { return String.Join(",", listStrings); }
header("HTTP/1.1 500 Internal Server Error"); header("Content-Type: text/plain"); echo "Unable to connect to database on $dbHost";
Context.Response.StatusCode = (int)HttpStatusCode.InternalServerError; Context.Response.ContentType = "text/plain"; Context.Response.Write("Unable to connect to database on " + dbHost);
protected void Page_Load(object sender, System.EventArgs e) { if (Common.CheckDatabaseConnection()) { this.LiteralMachineName.Text = Environment.MachineName; } else { Response.ClearHeaders(); Response.ClearContent(); Response.Status = "503 ServiceUnavailable"; Response.StatusCode = 503; Response.StatusDescription= "An error has occurred"; Response.Flush(); throw new HttpException(503,string.Format("An internal error occurred in the Application on {0}",Environment.MachineName)); } }
public new string navUrl { get { return ...; } set { ... } }
class base1 { public virtual string navUrl { get; set; } } class derived : base1 { public new string navUrl { get; set; } }
public class BaseClass { public void DoWork() { } public int WorkField; public int WorkProperty { get { return 0; } } } public class DerivedClass : BaseClass { public new void DoWork() { } public new int WorkField; public new int WorkProperty { get { return 0; } } } DerivedClass B = new DerivedClass(); B.WorkProperty; BaseClass A = (BaseClass)B; A.WorkProperty;
protected void Page_Load(object sender, EventArgs e) { if (Session["someSessionVal"].ToString() == "some value") { MyId.Visible = true; } else { MyId.Visible = false; } }
<div id="AssignUniqueId" runat="server">.....BLAH......<div/>
public void Page_Load(object source, Event Args e) { if(Session["Something"] == "ShowDiv") AssignUniqueId.Visible = true; else AssignUniqueID.Visible = false; }
protected void btnSubmit_Click(object sender, EventArgs e) { hideid.Visible = false; }
protected global::System.Web.UI.HtmlControls.HtmlGenericControl theDiv;
<div <%=If(True = True, "style= <div <%=If(True = False, "style= <div <%=If(Session.Item("NameExist") IsNot Nothing, "style= <div <%=If(Session.Item("NameNotExist") IsNot Nothing, "style=
<div style= <div >False</div> <div style= <div >NameNotExist</div>
DateTime dt; DateTime.TryParseExact(dateTime, "yyyy-dd-MM hh:mm tt", CultureInfo.InvariantCulture, DateTimeStyles.None, out dt);
dateString = "2011-29-01 12:00 am"; format = "yyyy-dd-MM h:mm tt"; try { result = DateTime.ParseExact(dateString, format, provider); Console.WriteLine("{0} converts to {1}.", dateString, result.ToString()); } catch (FormatException) { Console.WriteLine("{0} is not in the correct format.", dateString); }
dateString = "2011-29-01 12:00 am"; format = "yyyy-dd-MM h:mm tt"; DateTime result; if (DateTime.TryParseExact(dateString, format, provider, DateTimeStyles.None, out result)) { Console.WriteLine("{0} converts to {1}.", dateString, result.ToString()); } else { Console.WriteLine("{0} is not in the correct format.", dateString); }
string[] formats= {"M/d/yyyy h:mm:ss tt", "M/d/yyyy h:mm tt", "MM/dd/yyyy hh:mm:ss", "M/d/yyyy h:mm:ss", "M/d/yyyy hh:mm tt", "M/d/yyyy hh tt", "M/d/yyyy h:mm", "M/d/yyyy h:mm", "MM/dd/yyyy hh:mm", "M/dd/yyyy hh:mm", "MM/d/yyyy HH:mm:ss.ffffff" }; string dateString; try { dateValue = DateTime.ParseExact(dateString, formats, new CultureInfo("en-US"), DateTimeStyles.None); Console.WriteLine("Converted } catch (FormatException) { Console.WriteLine("Unable to convert }
DateTime dt = DateTime.ParseExact("2011-29-01 12:00 am", "yyyy-dd-MM hh:mm tt", System.Globalization.CultureInfo.InvariantCulture);
DateTime temp; string date = "2011-29-01 12:00 am"; DateTime.TryParseExact(date, "yyyy-dd-MM hh:mm tt", CultureInfo.InvariantCulture, DateTimeStyles.None, out temp);
DateTime dt = DateTime.ParseExact("11-22-2012 12:00 am", "MM-dd-yyyy hh:mm tt", System.Globalization.CultureInfo.InvariantCulture);
foreach (ListItem item in ((DropDownList)sender).Items) { if (System.Int32.Parse(item.Value) < 5) item.Attributes.Add("classification", "LessThanFive"); else item.Attributes.Add("classification", "GreaterThanFive"); }
public RadComboBoxItemData[] Search(int id, string searchText) { var query = context.Search(id, searchText); List<RadComboBoxItemData> result = new List<RadComboBoxItemData>(); foreach (var item in query) { RadComboBoxItemData itemData = new RadComboBoxItemData(); itemData.Text = ""; itemData.Value = ""; result.Add(itemData); } return result.ToArray(); }
public IEnumerable<SearchItem> Search(int id, string searchText) { return this.entityContext.Search(id, searchText); }
var query = context.Search(id, searchText).tolist();
repeater.DataSource = data.SPBinsReport().Tolist(); repeater.DataBind();
ID Value CourseID ----- ------ ---------- 1 100 1 2 150 1
Dim newColumn As New Data.DataColumn("Foo", GetType(System.String)) newColumn.DefaultValue = "Your DropDownList value" table.Columns.Add(newColumn)
System.Data.DataColumn newColumn = new System.Data.DataColumn("Foo", typeof(System.String)); newColumn.DefaultValue = "Your DropDownList value"; table.Columns.Add(newColumn);
DataTable tbl = new DataTable(); tbl.Columns.Add(new DataColumn("ID", typeof(Int32))); tbl.Columns.Add(new DataColumn("Name", typeof(string))); for (Int32 i = 1; i <= 10; i++) { DataRow row = tbl.NewRow(); row["ID"] = i; row["Name"] = i + ". row"; tbl.Rows.Add(row); } DataColumn newCol = new DataColumn("NewColumn", typeof(string)); newCol.AllowDBNull = true; tbl.Columns.Add(newCol); foreach (DataRow row in tbl.Rows) { row["NewColumn"] = "You DropDownList value"; } newCol.AllowDBNull = false;
protected DataTable tblDynamic { get { return (DataTable)ViewState["tblDynamic"]; } set { ViewState["tblDynamic"] = value; } } System.Data.DataSet ds = manage.DynamicReport_GetUserType(); tblDynamic = ds.Tables[13]; tblDynamic.Columns.Add(new DataColumn("TypeName", typeof(string))); for (int i = 0; i < tblDynamic.Rows.Count; i++) { if (tblDynamic.Rows[i]["Type"].ToString()=="A") { tblDynamic.Rows[i]["TypeName"] = "Apple"; } if (tblDynamic.Rows[i]["Type"].ToString() == "B") { tblDynamic.Rows[i]["TypeName"] = "Ball"; } if (tblDynamic.Rows[i]["Type"].ToString() == "C") { tblDynamic.Rows[i]["TypeName"] = "Cat"; } if (tblDynamic.Rows[i]["Type"].ToString() == "D") { tblDynamic.Rows[i]["TypeName"] = "Dog; } }
public static string GetUserCountryByIp(string ip) { IpInfo ipInfo = new IpInfo(); try { string info = new WebClient().DownloadString("http: ipInfo = JsonConvert.DeserializeObject<IpInfo>(info); RegionInfo myRI1 = new RegionInfo(ipInfo.Country); ipInfo.Country = myRI1.EnglishName; } catch (Exception) { ipInfo.Country = null; } return ipInfo.Country; }
public class IpInfo { [JsonProperty("ip")] public string Ip { get; set; } [JsonProperty("hostname")] public string Hostname { get; set; } [JsonProperty("city")] public string City { get; set; } [JsonProperty("region")] public string Region { get; set; } [JsonProperty("country")] public string Country { get; set; } [JsonProperty("loc")] public string Loc { get; set; } [JsonProperty("org")] public string Org { get; set; } [JsonProperty("postal")] public string Postal { get; set; } }
public static string CityStateCountByIp(string IP) { var url = "http: var request = System.Net.WebRequest.Create(url); using (WebResponse wrs = request.GetResponse()) using (Stream stream = wrs.GetResponseStream()) using (StreamReader reader = new StreamReader(stream)) { string json = reader.ReadToEnd(); var obj = JObject.Parse(json); var City = (string)obj["city"]; return (City); } return ""; }
using System.Linq; using System.Web; using System.Web.UI.WebControls; using System.Net; using System.IO; using System.Xml; using System.Collections.Specialized;
namespace WebApplication4 { public partial class WebForm1 : System.Web.UI.Page { protected void Page_Load(object sender, EventArgs e) { string VisitorsIPAddr = string.Empty; if (HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"] != null) { VisitorsIPAddr = HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"].ToString(); } else if (HttpContext.Current.Request.UserHostAddress.Length != 0) { VisitorsIPAddr = HttpContext.Current.Request.UserHostAddress;`enter code here` } string res = "http: string ipResponse = IPRequestHelper(res); } public string IPRequestHelper(string url) { string checkURL = url; HttpWebRequest objRequest = (HttpWebRequest)WebRequest.Create(url); HttpWebResponse objResponse = (HttpWebResponse)objRequest.GetResponse(); StreamReader responseStream = new StreamReader(objResponse.GetResponseStream()); string responseRead = responseStream.ReadToEnd(); responseRead = responseRead.Replace("\n", String.Empty); responseStream.Close(); responseStream.Dispose(); return responseRead; } } }
String UserIP = HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"]; if (string.IsNullOrEmpty(UserIP)) { UserIP = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]; } string url = "http: WebClient client = new WebClient(); string jsonstring = client.DownloadString(url); dynamic dynObj = JsonConvert.DeserializeObject(jsonstring); System.Web.HttpContext.Current.Session["UserCountryCode"] = dynObj.country_code;
static public string GetCountry() { return new WebClient().DownloadString("http: }
static public string GetInfo() { return new WebClient().DownloadString("http: }
public string GetCountryByIP(string ipAddress) { string strReturnVal; string ipResponse = IPRequestHelper("http: XmlDocument ipInfoXML = new XmlDocument(); ipInfoXML.LoadXml(ipResponse); XmlNodeList responseXML = ipInfoXML.GetElementsByTagName("query"); NameValueCollection dataXML = new NameValueCollection(); dataXML.Add(responseXML.Item(0).ChildNodes[2].InnerText, responseXML.Item(0).ChildNodes[2].Value); strReturnVal = responseXML.Item(0).ChildNodes[1].InnerText.ToString(); strReturnVal += "(" + responseXML.Item(0).ChildNodes[2].InnerText.ToString() + ")"; return strReturnVal; }
public string IPRequestHelper(string url) { HttpWebRequest objRequest = (HttpWebRequest)WebRequest.Create(url); HttpWebResponse objResponse = (HttpWebResponse)objRequest.GetResponse(); StreamReader responseStream = new StreamReader(objResponse.GetResponseStream()); string responseRead = responseStream.ReadToEnd(); responseStream.Close(); responseStream.Dispose(); return responseRead; }
public class IpProperties { public string Status { get; set; } public string Country { get; set; } public string CountryCode { get; set; } public string Region { get; set; } public string RegionName { get; set; } public string City { get; set; } public string Zip { get; set; } public string Lat { get; set; } public string Lon { get; set; } public string TimeZone { get; set; } public string ISP { get; set; } public string ORG { get; set; } public string AS { get; set; } public string Query { get; set; } } public string IPRequestHelper(string url) { HttpWebRequest objRequest = (HttpWebRequest)WebRequest.Create(url); HttpWebResponse objResponse = (HttpWebResponse)objRequest.GetResponse(); StreamReader responseStream = new StreamReader(objResponse.GetResponseStream()); string responseRead = responseStream.ReadToEnd(); responseStream.Close(); responseStream.Dispose(); return responseRead; } public IpProperties GetCountryByIP(string ipAddress) { string ipResponse = IPRequestHelper("http: using (TextReader sr = new StringReader(ipResponse)) { using (System.Data.DataSet dataBase = new System.Data.DataSet()) { IpProperties ipProperties = new IpProperties(); dataBase.ReadXml(sr); ipProperties.Status = dataBase.Tables[0].Rows[0][0].ToString(); ipProperties.Country = dataBase.Tables[0].Rows[0][1].ToString(); ipProperties.CountryCode = dataBase.Tables[0].Rows[0][2].ToString(); ipProperties.Region = dataBase.Tables[0].Rows[0][3].ToString(); ipProperties.RegionName = dataBase.Tables[0].Rows[0][4].ToString(); ipProperties.City = dataBase.Tables[0].Rows[0][5].ToString(); ipProperties.Zip = dataBase.Tables[0].Rows[0][6].ToString(); ipProperties.Lat = dataBase.Tables[0].Rows[0][7].ToString(); ipProperties.Lon = dataBase.Tables[0].Rows[0][8].ToString(); ipProperties.TimeZone = dataBase.Tables[0].Rows[0][9].ToString(); ipProperties.ISP = dataBase.Tables[0].Rows[0][10].ToString(); ipProperties.ORG = dataBase.Tables[0].Rows[0][11].ToString(); ipProperties.AS = dataBase.Tables[0].Rows[0][12].ToString(); ipProperties.Query = dataBase.Tables[0].Rows[0][13].ToString(); return ipProperties; } } }
var ipResponse = GetCountryByIP("your ip address or domain name :)");
function getLocation() { if (navigator.geolocation) { navigator.geolocation.getCurrentPosition(showPosition); } else { console.log("Geolocation is not supported by this browser."); } } function showPosition(position) { console.log("Latitude: " + position.coords.latitude + "<br>Longitude: " + position.coords.longitude); }
using System.Net; using System.IO; using Newtonsoft.Json.Linq; public ActionResult geoPlugin() { var url = "http: var request = System.Net.WebRequest.Create(url); using (WebResponse wrs = request.GetResponse()) using (Stream stream = wrs.GetResponseStream()) using (StreamReader reader = new StreamReader(stream)) { string json = reader.ReadToEnd(); var obj = JObject.Parse(json); var City = (string)obj["city"]; Session["CurrentRegionName"]= (string)obj["country_name"]; Session["CurrentRegion"] = (string)obj["country_code"]; } return RedirectToAction("Index"); }
protected static int SomeGlobalUnsecureID; protected static string SomeGlobalUnsecureString;
public static class GlobalVariables { public static int SomeGlobalUnsecureID; public static string SomeGlobalUnsecureString; }
protected void Page_Load(object sender, EventArgs e) { sss s1, s2; s1 = new sss(); s1.TotalMark = 10; s2 = new sss(); s2.TotalMark = 20; sss.SchoolName = "St.Joseph s1.PrintData(); s2.PrintData(); } public class sss { public static string SchoolName { set; get; } public int TotalMark { set; get; } public string StudentName{set;get;} public void PrintData() { Console.WriteLine(TotalMark); Console.WriteLine(SchoolName); Console.WriteLine(StudentName); } }
string [] arr = {"One","Two","Three"}; string var = "One"
string [] arr = {"One","Two","Three"}; var target = "One"; var results = Array.FindAll(arr, s => s.Equals(target));
List<String> testing = new List<String>(); testing.Add("One"); testing.Add("Two"); testing.Add("Three"); testing.Add("Mouse"); bool inList = testing.Contains("Mouse");
string[] stringArray = { "text1", "text2", "text3", "text4" }; string value = "text3"; int pos = Array.IndexOf(stringArray, value); if (pos > -1) { return true; } else { return false; }
public static T Find<T>( T[] array, Predicate<T> match )
static void Main() { string[] names = { "Rodney", "Jack", "Jill" }; string match = Array.Find (names, ContainsA); Console.WriteLine (match); } static bool ContainsA (string name) { return name.Contains ("a"); }
string[] names = { "Rodney", "Jack", "Jill" }; string match = Array.Find (names, delegate (string name) { return name.Contains ("a"); } );
string[] names = { "Rodney", "Jack", "Jill" }; string match = Array.Find (names, n => n.Contains ("a"));
int findString(String var, String[] stringArray, int currentIndex, int stringMaxIndex) { if currentIndex > stringMaxIndex return (-stringMaxIndex-1); else if var==arr[currentIndex] return 0; else return findString(var, stringArray, currentIndex++, stringMaxIndex) + 1 ; } int index = findString(var, arr, 0, getMaxIndex(arr)); if index == -1 printOnScreen("Not found"); else printOnScreen("Found on index: " + index);
string name = DateTimeFormatInfo.CurrentInfo.GetMonthName(1);
string[] names = DateTimeFormatInfo.CurrentInfo.MonthNames;
var dateFormatInfo = CultureInfo.GetCultureInfo("en-GB").DateTimeFormat;
var months = Enumerable.Range(1, 12).Select(i => new { I = i, M = DateTimeFormatInfo.CurrentInfo.GetMonthName(i) });
ddlMonths.DataSource = months; ddlMonths.DataTextField = "M"; ddlMonths.DataValueField = "I"; ddlMonths.DataBind();
System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames
using System.Globalization; for (int i = 0; i < 12; i++) { Console.WriteLine(CultureInfo.CurrentUICulture.DateTimeFormat.MonthNames[i]); }
for( int i = 1; i <= 12; i++ ){ combo.Items.Add(CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[i]); }
string[] localizedMonths = Thread.CurrentThread.CurrentCulture.DateTimeFormat.MonthNames; string[] invariantMonths = DateTimeFormatInfo.InvariantInfo.MonthNames; for( int month = 0; month < 12; month++ ) { ListItem monthListItem = new ListItem( localizedMonths[month], invariantMonths[month] ); monthsDropDown.Items.Add( monthListItem ); }
public IEnumerable<SelectListItem> Months { get { return Enumerable.Range(1, 12).Select(x => new SelectListItem { Value = x.ToString(), Text = DateTimeFormatInfo.CurrentInfo.GetMonthName(x) }); } }
ComboBoxName.ItemsSource= System.Globalization.CultureInfo. CurrentCulture.DateTimeFormat.MonthNames. TakeWhile(m => m != String.Empty).ToList();
var months = CultureInfo.CurrentCulture.DateTimeFormat.MonthNames .TakeWhile(m => m != String.Empty) .Select((m,i) => new { Month = i+1, MonthName = m }) .ToList();
var monthOptions = DateTimeFormatInfo.CurrentInfo.MonthNames .Where(p=>!string.IsNullOrEmpty(p)) .Select((item, index) => new { Id = index + 1, Name = item });
List<string> mnt = new List<string>(); int monthCount = Convert.ToInt32(cbYear.Text) == DateTime.Now.Year ? DateTime.Now.Month : 12; for (int i = 0; i < monthCount; i++) { mnt.Add(CultureInfo.CurrentUICulture.DateTimeFormat.MonthNames[i]); } cbMonth.DataSource = mnt;
string[] monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames; foreach (string m in monthNames) { Console.WriteLine(m); }
January February March April May June July August September October November December
string[] monthNames = (new System.Globalization.CultureInfo("en-US")).DateTimeFormat.MonthNames;
Dim currentCulture As CultureInfo = CultureInfo.CurrentUICulture Dim monthName, monthNumber As String For x As Integer = 0 To 11 monthNumber = (x + 1).ToString("D2") monthName = currentCulture.DateTimeFormat.MonthNames(x) Dim month As New ListItem(String.Format("{0} - {1}", monthNumber, monthName), x.ToString("D2")) ddl_expirymonth.Items.Add(month) Next
model.Controls = new { FiscalMonths = new { Value = DateTime.Now.Month, Options = (new List<int> { 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9 }).Select(p => new { Value = p, Text = DateTimeFormatInfo.CurrentInfo.GetMonthName(p) }) } };
"FiscalMonths": { "Value": 10, "Options": [ { "Value": 10, "Text": "October" }, { "Value": 11, "Text": "November" }, { "Value": 12, "Text": "December" }, { "Value": 1, "Text": "January" }, { "Value": 2, "Text": "February" }, etc ....
<p> <%= Html.Encode( ModelMetadata.FromLambdaExpression<YourViewModel, string>( x => x.SomeProperty, ViewData).DisplayName ) %> <p>
public static class HtmlExtensions { public static MvcHtmlString GetDisplayName<TModel, TProperty>( this HtmlHelper<TModel> htmlHelper, Expression<Func<TModel, TProperty>> expression ) { var metaData = ModelMetadata.FromLambdaExpression<TModel, TProperty>(expression, htmlHelper.ViewData); string value = metaData.DisplayName ?? (metaData.PropertyName ?? ExpressionHelper.GetExpressionText(expression)); return MvcHtmlString.Create(value); } }
<p> <%: Html.GetDisplayName(x => x.SomeProperty) %> </p>
list.DataSource = GetListItems(); list.DataValueField = "ValueProperty"; list.DataTextField = "TextProperty"; list.DataBind(); list.SelectedValue = myValue.ToString();
ddlData.SelectedIndex=ddlData.Items.IndexOf(ddlData.Items.FindByText("value"));
DDL.SelectedIndex = DDL.Items.IndexOf(DDL.Items.FindByText("PassedValue"));
DDL.SelectedIndex = DDL.Items.IndexOf(DDL.Items.FindByValue("PassedValue"));
foreach (ListItem listItem in list.Items) { listItem.Selected = listItem.Value.Contains("some value"); }
var index = ctx.Items.FirstOrDefault(item => Equals(item.Value, Settings.Default.Format_Encoding)); ctx.SelectedIndex = ctx.Items.IndexOf(index);
foreach (var listItem in ctx.Items) listItem.Selected = Equals(listItem.Value as Encoding, Settings.Default.Format_Encoding);
ddList.Items.FindByText("oldValue").Selected = false; ddList.Items.FindByText("newValue").Selected = true;
private void Form1_Load(object sender, EventArgs e) { this.comboBoxSubjectCName.DataSource = this.Student.TableClass; this.comboBoxSubjectCName.DisplayMember = TableColumn.ClassName; this.comboBoxSubjectCName.ValueMember = TableColumn.ClassID; }
ListItem oItem = DDL.Items.FindByValue("PassedValue")); if (oItem != null) oItem.Selected = true;
ddlemployee.DataSource = ds.Tables[0]; ddlemployee.DataTextField = "Employee Name"; ddlemployee.DataValueField = "RecId"; ddlemployee.DataBind(); ddlemployee.Items.Insert(0, "All");
public class Startup { public void ConfigureServices(IServiceCollection services) { services.AddDefaultIdentity<ApplicationIdentityDbContext, ApplicationUser, IdentityRole>(Configuration, o => { o.Password.RequireDigit = false; o.Password.RequireLowercase = false; o.Password.RequireUppercase = false; o.Password.RequireNonLetterOrDigit = false; o.Password.RequiredLength = 7; }); } }
services.AddIdentity<ApplicationUser, IdentityRole>(o => { o.Password.RequireDigit = false; o.Password.RequireLowercase = false; o.Password.RequireUppercase = false; o.Password.RequireNonAlphanumeric = false; o.Password.RequiredLength = 6; }) .AddEntityFrameworkStores<ApplicationIdentityDbContext>() .AddDefaultTokenProviders();
manager.PasswordValidator = new PasswordValidator { RequiredLength = 6, RequireNonLetterOrDigit = true, RequireDigit = true, RequireLowercase = true, RequireUppercase = true, };
services.AddIdentity<ApplicationUser, IdentityRole>(x => { x.Password.RequiredLength = 6; x.Password.RequireUppercase = false; x.Password.RequireLowercase = false; x.Password.RequireNonAlphanumeric = false; }).AddEntityFrameworkStores<ApplicationDbContext>().AddDefaultTokenProviders();
manager.PasswordValidator = new PasswordValidator { RequiredLength = 6, RequireNonLetterOrDigit = false, RequireDigit = false, RequireLowercase = false, RequireUppercase = false, };
public class CustomPasswordValidator : IIdentityValidator<string> { public int RequiredLength { get; set; } public CustomPasswordValidator(int length) { RequiredLength = length; } /* * logic to validate password: I am using regex to count how many * types of characters exists in the password */ public Task<IdentityResult> ValidateAsync(string password) { if (String.IsNullOrEmpty(password) || password.Length < RequiredLength) { return Task.FromResult(IdentityResult.Failed( String.Format("Password should be at least {0} characters", RequiredLength))); } int counter = 0; List<string> patterns = new List<string>(); patterns.Add(@"[a-z]"); patterns.Add(@"[A-Z]"); patterns.Add(@"[0-9]"); patterns.Add(@"[!@ foreach (string p in patterns) { if (Regex.IsMatch(password, p)) { counter++; } } if (counter < 2) { return Task.FromResult(IdentityResult.Failed( "Please use characters from at least two of these groups: lowercase, uppercase, digits, special symbols")); } return Task.FromResult(IdentityResult.Success); } }
manager.PasswordValidator = new CustomPasswordValidator(6 ); /* manager.PasswordValidator = new PasswordValidator { RequiredLength = 6, RequireNonLetterOrDigit = true, RequireDigit = true, RequireLowercase = true, RequireUppercase = true, }; */
var filePath = Server.MapPath(DOCUMENT_PATH); if (!File.Exists(filePath)) return; var fileInfo = new System.IO.FileInfo(filePath); Response.ContentType = "application/octet-stream"; Response.AddHeader("Content-Disposition", String.Format("attachment;filename=\"{0}\"", filePath)); Response.AddHeader("Content-Length", fileInfo.Length.ToString()); Response.WriteFile(filePath); Response.End();
Stream stream = null; int bytesToRead = 10000; byte[] buffer = new Byte[bytesToRead]; try { HttpWebRequest fileReq = (HttpWebRequest) HttpWebRequest.Create(url); HttpWebResponse fileResp = (HttpWebResponse) fileReq.GetResponse(); if (fileReq.ContentLength > 0) fileResp.ContentLength = fileReq.ContentLength; stream = fileResp.GetResponseStream(); var resp = HttpContext.Current.Response; resp.ContentType = "application/octet-stream"; resp.AddHeader("Content-Disposition", "attachment; filename=\"" + fileName + "\""); resp.AddHeader("Content-Length", fileResp.ContentLength.ToString()); int length; do { if (resp.IsClientConnected) { length = stream.Read(buffer, 0, bytesToRead); resp.OutputStream.Write(buffer, 0, length); resp.Flush(); buffer = new Byte[bytesToRead]; } else { length = -1; } } while (length > 0); } finally { if (stream != null) { stream.Close(); } }
class WebPage { public static string Get(string uri) { string results = "N/A"; try { HttpWebRequest req = (HttpWebRequest)WebRequest.Create(uri); HttpWebResponse resp = (HttpWebResponse)req.GetResponse(); StreamReader sr = new StreamReader(resp.GetResponseStream()); results = sr.ReadToEnd(); sr.Close(); } catch (Exception ex) { results = ex.Message; } return results; } }
using (var client = new WebClient()) { var content = client.DownloadData(url); using (var stream = new MemoryStream(content)) { ... } }
using(DirectoryEntry de = new DirectoryEntry("IIS: { filePath = de.Properties["Path"].Value; } if (!File.Exists(filePath)) return; var fileInfo = new System.IO.FileInfo(filePath); Response.ContentType = "application/octet-stream"; Response.AddHeader("Content-Disposition", String.Format("attachment;filename=\"{0}\"", filePath)); Response.AddHeader("Content-Length", fileInfo.Length.ToString()); Response.WriteFile(filePath); Response.End();
600: CONNECTION ERROR - This indicates a general connection error 601: INCOMPLETE ERROR - This indicates sever sends an incomplete page/object (as indicated by Content-Length header) 602: UNEXPECTED CLOSE ERROR - This indicates socket connection has been closed unexpectedly 603: REFUSED ERROR - This indicates a request to connect to the server is refused 604: TIMEOUT ERROR - This indicates there is no activity in socket connection in 3 minutes 605: REDIRECT ERROR - This indicates an error in redirect HTTP header 606: SSL ERROR - This indicates a general error in SSL 607: HEADER ERROR - This indicates a malformed HTTP header 608: EMPTY RESPONSE ERROR - This indicates server doesn 609: UNKNOWN HOST ERROR - This indicates socket receives an unknown host error from DNS 610: NO ROUTE TO HOST ERROR - This indicates a no route to host error was received while attempting to open a socket 611: SOCKET ERROR - This indicates a general socket error 612: FRAME LOOP ERROR - This indicates a page has a frame loop (frame A includes Frame B that includes Frame A) 613: REDIRECT LOOP ERROR - This indicates a page has a redirect loop (page A redirects to page B that redirects to page A) 614: CONNECTION RESET ERROR - This indicates socket receive a reset signal from the server 615: SOCKET PROTOCOL ERROR - This indicates an error in socket protocol 616: SOCKET BIND ERROR - This indicates an error in binding the socket 617: CONNECTION ERROR - This indicates a general socket connection error 618: CHUNK ERROR - This indicates an error in chunked encoding 619: SSL TIMEOUT - This indicates a timeout during SSL handshake (2 minutes) 620: SSL END OF INPUT - This indicates an end-of-file is received during SSL handshake 621: SSL HANDSHAKE ERROR - This indicates a general error during SSL handshake 622: SSL CERTIFICATE ERROR - This indicates an error in SSL certificate verification 623: SSL AUTHENTICATION ERROR - This indicates an authentication error during SSL handshake 624: SSL BAD MAC ERROR - This indicates a bad MAC during SSL handshake 625: SSL CIPHER ERROR - This indicates a cipher error during SSL handshake 701: ERROR TEXT FOUND - This code is returned if any error text (such as, "Service Unavailable") are found in the main page (frame HTML contents included). Note that the error text must be defined in advance of the test. Error text means if the text is found, this session should be considered a failure. 702: REQUIRED TEXT NOT FOUND - This code is returned If not all required texts are found in the main page. Note that required text must be defined in advance of the test. Required text means if the text is not found, this session should be considered a failure. 703: HTML BODY EMPTY - This code is returned if the HTML body of the page is empty (only if error text or required text has been defined).
<% foreach (QuestionAnswer qa in Model.QuestionAnswers) { %> <%= Html.RadioButtonFor(model => model.QuestionAnswers[(int)qa.QuestionID - 1].AnswerValue, "Checked" ) %> <%= Html.Encode(qa.OptionValue) %> <% } %>
<div class="editor-field"> <%= Html.RadioButtonFor(m => m.Gender, "M" ) %> Male <%= Html.RadioButtonFor(m => m.Gender, "F" ) %> Female </div>
namespace DeleteMeQuestion.Models { public class QuizModel { public int ParentQuestionId { get; set; } public int QuestionId { get; set; } public string QuestionDisplayText { get; set; } public List<Response> Responses { get; set; } [Range(1,999, ErrorMessage = "Please choose a response.")] public int SelectedResponse { get; set; } } public class Response { public int ResponseId { get; set; } public int ChildQuestionId { get; set; } public string ResponseDisplayText { get; set; } } }
namespace DeleteMeQuestion.Controllers { [HandleError] public class HomeController : Controller { public ActionResult Index(int? id) { var model = GetModel(id); return View(model); } [HttpPost] public ActionResult Index(int? id, QuizModel model) { if (!ModelState.IsValid) { var freshModel = GetModel(id); return View(freshModel); } var nextQuestionId = 999; return RedirectToAction("Index", "Home", new {id = nextQuestionId}); } private QuizModel GetModel(int? questionId) { var model = new QuizModel { QuestionDisplayText = questionId.HasValue ? "And so on..." : "What is your favorite color?", QuestionId = 1, Responses = new List<Response> { new Response { ChildQuestionId = 2, ResponseId = 1, ResponseDisplayText = "Red" }, new Response { ChildQuestionId = 3, ResponseId = 2, ResponseDisplayText = "Blue" }, new Response { ChildQuestionId = 4, ResponseId = 3, ResponseDisplayText = "Green" }, } }; return model; } } }
<%@ Page Language="C <asp:Content ContentPlaceHolderID="TitleContent" runat="server"> Home Page </asp:Content> <asp:Content ContentPlaceHolderID="MainContent" runat="server"> <% using (Html.BeginForm()) { %> <div> <h1><%: Model.QuestionDisplayText %></h1> <div> <ul> <% foreach (var item in Model.Responses) { %> <li> <%= Html.RadioButtonFor(m => m.SelectedResponse, item.ResponseId, new {id="Response" + item.ResponseId}) %> <label for="Response<%: item.ResponseId %>"><%: item.ResponseDisplayText %></label> </li> <% } %> </ul> <%= Html.ValidationMessageFor(m => m.SelectedResponse) %> </div> <input type="submit" value="Submit" /> <% } %> </asp:Content>
@Html.RadioButtonFor(m => Model.Selected, Model.Categories[i].Title)
model.Categories.Find(m => m.Title.Equals(model.Selected)).Selected = true;
namespace System.Net { public static partial class WebUtility { public static string HtmlDecode(string value) { return default(string); } public static string HtmlEncode(string value) { return default(string); } public static string UrlDecode(string encodedValue) { return default(string); } public static byte[] UrlDecodeToBytes(byte[] encodedValue, int offset, int count) { return default(byte[]); } public static string UrlEncode(string value) { return default(string); } public static byte[] UrlEncodeToBytes(byte[] value, int offset, int count) { return default(byte[]); } } }
System.Net.WebUtility.UrlEncode(myString) System.Net.WebUtility.UrlDecode(myString)
public HttpResponseMessage Put(int idAssessment, int idCaseStudy, string value) { var response = Request.CreateResponse(); if (!response.Headers.Contains("Content-Type")) { response.Headers.Add("Content-Type", "text/plain"); } response.StatusCode = HttpStatusCode.OK; return response; }
response.Content.Headers.ContentType = new MediaTypeHeaderValue("text/plain");
if (response.Content == null) { response.Content = new StringContent(""); }
class RemoveVerbsFilter : IDocumentFilter { public void Apply(SwaggerDocument swaggerDoc, SchemaRegistry schemaRegistry, IApiExplorer apiExplorer) { foreach (PathItem path in swaggerDoc.paths.Values) { path.delete = null; path.head = null; path.options = null; path.patch = null; path.post = null; path.put = null; } } }
...EnableSwagger(conf => { conf.DocumentFilter<RemoveVerbsFilter>(); });
[AttributeUsage(AttributeTargets.Method | AttributeTargets.Class)] public class HideInDocsAttribute : Attribute { }
public class HideInDocsFilter : IDocumentFilter { public void Apply(SwaggerDocument swaggerDoc, SchemaRegistry schemaRegistry, IApiExplorer apiExplorer) { foreach (var apiDescription in apiExplorer.ApiDescriptions) { if (!apiDescription.ActionDescriptor.ControllerDescriptor.GetCustomAttributes<HideInDocsAttribute>().Any() && !apiDescription.ActionDescriptor.GetCustomAttributes<HideInDocsAttribute>().Any()) continue; var route = "/" + apiDescription.Route.RouteTemplate.TrimEnd( swaggerDoc.paths.Remove(route); } } }
public class SwaggerConfig { public static void Register(HttpConfiguration config) { var thisAssembly = typeof(SwaggerConfig).Assembly; config .EnableSwagger(c => { ... c.DocumentFilter<HideInDocsFilter>(); ... }) .EnableSwaggerUi(c => { ... }); } }
var pathsToRemove = swaggerDoc.Paths .Where(pathItem => !pathItem.Key.Contains("api/")) .ToList(); foreach (var item in pathsToRemove) { swaggerDoc.Paths.Remove(item.Key); }
[AttributeUsage(AttributeTargets.Method | AttributeTargets.Class)] public class ShowInSwaggerAttribute : Attribute { }
public class ShowInSwaggerFilter : IDocumentFilter { public void Apply(SwaggerDocument swaggerDoc, DocumentFilterContext context) { foreach (var contextApiDescription in context.ApiDescriptions) { var actionDescriptor = (ControllerActionDescriptor) contextApiDescription.ActionDescriptor; if (actionDescriptor.ControllerTypeInfo.GetCustomAttributes<ShowInSwaggerAttribute>().Any() || actionDescriptor.MethodInfo.GetCustomAttributes<ShowInSwaggerAttribute>().Any()) { continue; } else { var key = "/" + contextApiDescription.RelativePath.TrimEnd( var pathItem = swaggerDoc.Paths[key]; if(pathItem == null) continue; switch (contextApiDescription.HttpMethod.ToUpper()) { case "GET": pathItem.Get = null; break; case "POST": pathItem.Post = null; break; case "PUT": pathItem.Put = null; break; case "DELETE": pathItem.Delete = null; break; } if (pathItem.Get == null && pathItem.Post == null && pathItem.Put == null && pathItem.Delete == null) swaggerDoc.Paths.Remove(key); } } } }
public void ConfigureServices(IServiceCollection services) { services.AddSwaggerGen(c => { c.DocumentFilter<ShowInSwaggerFilter>(); }); }
public ActionResult Index() { Dictionary<int, string> states = new Dictionary<int, string>() { { -1, "a"}, { 0, "b"}, { 1, "c"}, { 2, "d"}, }; ViewBag.States = states; foreach (KeyValuePair<int, string> de in ViewBag.States) { Debug.WriteLine(de.Key); } return View(); }
<div class="search-input"> <select> @foreach (KeyValuePair<int, string> de in ViewBag.States) { <option value="@de.Key">@de.Value</option> } </select> </div>
Cannot perform runtime binding on a null reference Line 54: @foreach (KeyValuePair<int, string> de in ViewBag.States)
public ActionResult Accept(int id) { return View(); }
<div class="form-group"> @Html.LabelFor(model => model.ToId, "To", htmlAttributes: new { @class = "control-label col-md-2" }) <div class="col-md-10"> @Html.Flag(Model.from) </div> </div> <div class="form-group"> <div class="col-md-10"> <input value="@ViewBag.MaximounAmount.ToString()" />@* HERE is the error *@ </div> </div>
@if (ViewBag.States!= null) { @foreach (KeyValuePair<int, string> de in ViewBag.States) { value="@de.Key">@de.Value } }
Dictionary<int, string> states = new Dictionary<int, string>()
String RelativePath = AbsolutePath.Replace(Request.ServerVariables["APPL_PHYSICAL_PATH"], String.Empty);
public static class ExtensionMethods { public static string RelativePath(this HttpServerUtility srv, string path, HttpRequest context) { return path.Replace(context.ServerVariables["APPL_PHYSICAL_PATH"], "~/").Replace(@"\", "/"); } }
static string RelativeFromAbsolutePath(string path) { if(HttpContext.Current != null) { var request = HttpContext.Current.Request; var applicationPath = request.PhysicalApplicationPath; var virtualDir = request.ApplicationPath; virtualDir = virtualDir == "/" ? virtualDir : (virtualDir + "/"); return path.Replace(applicationPath, virtualDir).Replace(@"\", "/"); } throw new InvalidOperationException("We can only map an absolute back to a relative path if an HttpContext is available."); }
public static string RelativePath(this HttpServerUtility srv, string path) { return path.Replace(HttpContext.Current.Server.MapPath("~/"), "~/").Replace(@"\", "/"); }
public class FilePathHelper { private readonly IHostingEnvironment _env; public FilePathHelper(IHostingEnvironment env) { _env = env; } public string GetVirtualPath(string physicalPath) { if (physicalPath == null) throw new ArgumentException("physicalPath is null"); if (!File.Exists(physicalPath)) throw new FileNotFoundException(physicalPath + " doesn var lastWord = _env.WebRootPath.Split("\\").Last(); int relativePathIndex = physicalPath.IndexOf(lastWord) + lastWord.Length; var relativePath = physicalPath.Substring(relativePathIndex); return $"/{ relativePath.TrimStart( } public string GetPhysicalPath(string relativepath) { if (relativepath == null) throw new ArgumentException("relativepath is null"); var fileInfo = _env.WebRootFileProvider.GetFileInfo(relativepath); if (fileInfo.Exists) return fileInfo.PhysicalPath; else throw new FileNotFoundException("file doesn }
var physicalPath = _fp.GetPhysicalPath("/img/banners/abro.png");
var virtualPath = _fp.GetVirtualPath(physicalPath);
Process information: Process ID: 4004 Process name: w3wp.exe Account name: NT AUTHORITY\NETWORK SERVICE Exception information: Exception type: HttpException Exception message: Invalid viewstate. Request information: Request URL: http: Request path: /ScriptResource.axd User host address: 124.177.170.75 User: Is authenticated: False Authentication Type: Thread account name: NT AUTHORITY\NETWORK SERVICE Thread information: Thread ID: 1 Thread account name: NT AUTHORITY\NETWORK SERVICE Is impersonating: False Stack trace: at System.Web.UI.Page.DecryptStringWithIV(String s, IVType ivType) at System.Web.UI.Page.DecryptString(String s) at System.Web.Handlers.ScriptResourceHandler.DecryptParameter(NameValueCollection queryString) at System.Web.Handlers.ScriptResourceHandler.ProcessRequestInternal(HttpResponse response, NameValueCollection queryString, VirtualFileReader fileReader) at System.Web.Handlers.ScriptResourceHandler.ProcessRequest(HttpContext context) at System.Web.Handlers.ScriptResourceHandler.System.Web.IHttpHandler.ProcessRequest(HttpContext context) at System.Web.HttpApplication.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute() at System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously) Custom event details: For more information, see Help and Support Center at http:
Exception raised in GLOBAL.ASAX.Application_Error(): at System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount) at System.Security.Cryptography.CryptoStream.FlushFinalBlock() at System.Web.Configuration.MachineKeySection.EncryptOrDecryptData(Boolean fEncrypt, Byte[] buf, Byte[] modifier, Int32 start, Int32 length, IVType ivType, Boolean useValidationSymAlgo) at System.Web.UI.ObjectStateFormatter.Deserialize(String inputString)
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=utf-8">
System.IO.Directory myDir = GetMyDirectoryForTheExample(); int count = myDir.GetFiles().Length;
int fCount = Directory.GetFiles(path, "*", SearchOption.AllDirectories).Length; int fCount = Directory.GetFiles(path, "*", SearchOption.TopDirectoryOnly).Length;
var fileCount = (from file in Directory.EnumerateFiles(@"H:\iPod_Control\Music", "*.mp3", SearchOption.AllDirectories) select file).Count();
System.IO.DirectoryInfo dir = new System.IO.DirectoryInfo("SourcePath"); int count = dir.GetFiles().Length;
var list = Directory.GetFiles(@"C:\ScanPDF", "*.pdf"); if (list.Length > 0) { }
int GetFileCount(string dir, bool includeSubdirectories = false)
[Serializable, StructLayout(LayoutKind.Sequential)] private struct WIN32_FIND_DATA { public int dwFileAttributes; public int ftCreationTime_dwLowDateTime; public int ftCreationTime_dwHighDateTime; public int ftLastAccessTime_dwLowDateTime; public int ftLastAccessTime_dwHighDateTime; public int ftLastWriteTime_dwLowDateTime; public int ftLastWriteTime_dwHighDateTime; public int nFileSizeHigh; public int nFileSizeLow; public int dwReserved0; public int dwReserved1; [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)] public string cFileName; [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 14)] public string cAlternateFileName; } [DllImport("kernel32.dll")] private static extern IntPtr FindFirstFile(string pFileName, ref WIN32_FIND_DATA pFindFileData); [DllImport("kernel32.dll")] private static extern bool FindNextFile(IntPtr hFindFile, ref WIN32_FIND_DATA lpFindFileData); [DllImport("kernel32.dll")] private static extern bool FindClose(IntPtr hFindFile); private static readonly IntPtr INVALID_HANDLE_VALUE = new IntPtr(-1); private const int FILE_ATTRIBUTE_DIRECTORY = 16; private int GetFileCount(string dir, bool includeSubdirectories = false) { string searchPattern = Path.Combine(dir, "*"); var findFileData = new WIN32_FIND_DATA(); IntPtr hFindFile = FindFirstFile(searchPattern, ref findFileData); if (hFindFile == INVALID_HANDLE_VALUE) throw new Exception("Directory not found: " + dir); int fileCount = 0; do { if (findFileData.dwFileAttributes != FILE_ATTRIBUTE_DIRECTORY) { fileCount++; continue; } if (includeSubdirectories && findFileData.cFileName != "." && findFileData.cFileName != "..") { string subDir = Path.Combine(dir, findFileData.cFileName); fileCount += GetFileCount(subDir, true); } } while (FindNextFile(hFindFile, ref findFileData)); FindClose(hFindFile); return fileCount; }
int fileCount = Directory.GetFiles(searchDir, "*", SearchOption.AllDirectories).Length;
string strDocPath = Server.MapPath( int docCount = Directory.GetFiles(strDocPath, "*", SearchOption.TopDirectoryOnly).Length;
int filesCount = Directory.EnumerateFiles(Directory).Count();
int fileCount = Directory.GetFiles(path, "*.*", SearchOption.AllDirectories).Length; int fileCount = Directory.GetFiles(path, "*.*", SearchOption.TopDirectory).Length; int fileCount = Directory.GetFiles(path, "*.xml", SearchOption.AllDirectories).Length;
Dim exts() As String = {".docx", ".ppt", ".pdf"} Dim query = (From f As FileInfo In directory.GetFiles()).Where(Function(f) exts.Contains(f.Extension.ToLower())) Response.Write(query.Count())
public class IPAddressRange { readonly AddressFamily addressFamily; readonly byte[] lowerBytes; readonly byte[] upperBytes; public IPAddressRange(IPAddress lowerInclusive, IPAddress upperInclusive) { this.addressFamily = lowerInclusive.AddressFamily; this.lowerBytes = lowerInclusive.GetAddressBytes(); this.upperBytes = upperInclusive.GetAddressBytes(); } public bool IsInRange(IPAddress address) { if (address.AddressFamily != addressFamily) { return false; } byte[] addressBytes = address.GetAddressBytes(); bool lowerBoundary = true, upperBoundary = true; for (int i = 0; i < this.lowerBytes.Length && (lowerBoundary || upperBoundary); i++) { if ((lowerBoundary && addressBytes[i] < lowerBytes[i]) || (upperBoundary && addressBytes[i] > upperBytes[i])) { return false; } lowerBoundary &= (addressBytes[i] == lowerBytes[i]); upperBoundary &= (addressBytes[i] == upperBytes[i]); } return true; } }
using NetTools; ... var rangeA = IPAddressRange.Parse("192.168.0.0/255.255.255.0"); rangeA.Contains(IPAddress.Parse("192.168.0.34")); rangeA.Contains(IPAddress.Parse("192.168.10.1")); rangeA.ToCidrString(); var rangeB1 = IPAddressRange.Parse("192.168.0.10 - 192.168.10.20"); rangeB1.Contains(IPAddress.Parse("192.168.3.45")); rangeB1.Contains(IPAddress.Parse("192.168.0.9")); var rangeB2 = IPAddressRange.Parse("192.168.10.10-20"); var rangeC = IPAddressRange.Parse("fe80::/10"); rangeC.Contains(IPAddress.Parse("fe80::d503:4ee:3882:c586%3")); rangeC.Contains(IPAddress.Parse("::1"));
public static bool IsInRange(string startIpAddr, string endIpAddr, string address) { long ipStart = BitConverter.ToInt32(IPAddress.Parse(startIpAddr).GetAddressBytes().Reverse().ToArray(), 0); long ipEnd = BitConverter.ToInt32(IPAddress.Parse(endIpAddr).GetAddressBytes().Reverse().ToArray(), 0); long ip = BitConverter.ToInt32(IPAddress.Parse(address).GetAddressBytes().Reverse().ToArray(), 0); return ip >= ipStart && ip <= ipEnd; } Console.WriteLine(IsInRange("100.0.0.1", "110.0.0.255", "102.0.0.4"));
First Octet: 217 Second Octet: 110 Third Octet: 18 Fourth Octet: 206
(first octet * 256³) + (second octet * 256²) + (third octet * 256) + (fourth octet) = (first octet * 16777216) + (second octet * 65536) + (third octet * 256) + (fourth octet) = (217 * 16777216) + (110 * 65536) + (18 * 256) + (206) = 3647869646
from i in iList where i >= MIN && i <= MAX select i;
<system.webServer> <handlers> <remove name="aspNetCore"/> <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModule" resourceType="Unspecified"/> </handlers> <aspNetCore processPath="%LAUNCHER_PATH%" arguments="%LAUNCHER_ARGS%" stdoutLogEnabled="false" stdoutLogFile=".\logs\stdout" requestTimeout="00:06:00" /> <httpRedirect enabled="false" /> </system.webServer>
public IEnumerable<UserBandRelation> GetBandRelationsByUser(Func<int, bool> relation) { using (var ctx = new OpenGroovesEntities()) { Expression<Func<UsersBand, bool>> predicate = (u) => relation(u.RelationTypeId); var relations = ctx.UsersBands.Where(predicate); return relations.ToList(); } }
public IEnumerable<UserBandRelation> GetBandRelationsByUser( Expression<Func<UsersBand, bool>> predicate) { using (var ctx = new OpenGroovesEntities()) { var relations = ctx.UsersBands.Where(predicate); return relations.ToList(); } }
foreach (HttpPostedFileBase f in Request.Files) { if (f.ContentLength > 0) FileUpload(f); }
foreach (string fileName in Request.Files) { HttpPostedFileBase file = Request.Files[fileName]; ... }
<input class="valid" id="file" name="file" multiple="" type="file">
for (int i = 0; i < Request.Files.Count; i++ ){ HttpPostedFileBase fileUpload = Request.Files[i];
var files = Enumerable.Range(0, Request.Files.Count) .Select(i => Request.Files[i]); foreach (var file in files) { }
foreach (string file in Request.Files) { HttpPostedFile hFile = Request.Files[file] as HttpPostedFile; if (hFile.ContentLength > 0) FileUpload(hFile); }
HttpFileCollectionBase files = Request.Files; for(var i = 0; i < files.Count; i++) { HttpPostedFileBase file = files[i]; ... }
HttpResponseMessage result = null; var httpRequest = System.Web.HttpContext.Current.Request; HttpFileCollection uploadFiles = httpRequest.Files; var docfiles = new List<string>(); if (httpRequest.Files.Count > 0){ int i; for (i = 0; i < uploadFiles.Count; i++) { HttpPostedFile postedFile = uploadFiles[i]; var filePath = @"C:/inetpub/wwwroot/test1/reports/" + postedFile.FileName; postedFile.SaveAs(filePath); docfiles.Add(filePath); } result = Request.CreateResponse(HttpStatusCode.Created, docfiles); } else { result = Request.CreateResponse(HttpStatusCode.BadRequest); } return result; }
var culture = new System.Globalization.CultureInfo("de-DE"); var day = culture.DateTimeFormat.GetDayName(DateTime.Today.DayOfWeek);
CultureInfo german = new CultureInfo("de-DE"); string sunday = german.DateTimeFormat.DayNames[(int)DayOfWeek.Sunday];
Dim GermanCultureInfo As Globalization.CultureInfo = New Globalization.CultureInfo("de-DE") Return GermanCultureInfo.DateTimeFormat.GetDayName(DayOfWeek.Sunday)
string DayOfWeekGerman(DayOfWeek dow) { switch(dow) { case(DayOfWeek.Sunday) return "German Sunday"; case(DayOfWeek.Monday) return "German Monday"; ... } }
CultureInfo german = new CultureInfo("de-DE"); string dayName = DateTime.Now.ToString("dddd", german);
public static class DateTimeExtension { public static string GetDayOfWeek(this DateTime uiDateTime, CultureInfo culture = null) { if (culture == null) { culture = Thread.CurrentThread.CurrentUICulture; } return culture.DateTimeFormat.GetDayName(uiDateTime.DayOfWeek); } }
var culture = new System.Globalization.CultureInfo("de-DE"); var day = uiDateTime.GetDayOfWeek(culture);
CultureInfo myCI = new CultureInfo("ar-EG"); MessageBox.Show(myCI.DateTimeFormat.GetDayName(DayOfWeek.Friday));
public ModernButton() : base(HtmlTextWriterTag.Button) { }
using System.Web.UI; using System.Web.UI.WebControls; namespace ModernControls { [ParseChildren] public class ModernButton : Button { public new string Text { get { return (string)ViewState["NewText"] ?? ""; } set { ViewState["NewText"] = value; } } public string Value { get { return base.Text; } set { base.Text = value; } } protected override HtmlTextWriterTag TagKey { get { return HtmlTextWriterTag.Button; } } protected override void AddParsedSubObject(object obj) { var literal = obj as LiteralControl; if (literal == null) return; Text = literal.Text; } protected override void RenderContents(HtmlTextWriter writer) { writer.Write(Text); } } }
<button id="btnSubmit" runat="server" class="myButton" onserverclick="btnSubmit_Click">Hello</button>
[ParseChildren(false)] [PersistChildren(true)] public class ModernButton : Button { protected override string TagName { get { return "button"; } } protected override HtmlTextWriterTag TagKey { get { return HtmlTextWriterTag.Button; } } public new string Text { get { return ViewState["NewText"] as string; } set { ViewState["NewText"] = HttpUtility.HtmlDecode(value); } } protected override void OnPreRender(System.EventArgs e) { base.OnPreRender(e); LiteralControl lc = new LiteralControl(this.Text); Controls.Add(lc); base.Text = UniqueID; } protected override void RenderContents(HtmlTextWriter writer) { RenderChildren(writer); } }
<uc:ModernButton runat="server" ID="btnLogin" OnClick="btnLogin_Click" Text="Purplemonkeydishwasher"> <img src="../someUrl/img.gif" alt="img" /> <asp:Label ID="Label1" runat="server" Text="Login" /> </uc:ModernButton>
btnLogin.Controls.Add(new Label()); btnLogin.Controls.Add(new Table());
<button type="submit" name="ctl02" value="Content" class="btn "> <span>Content</span> </button>
[WebMethod] public static WebMethodReturn<IEnumerable<FleetObserverLiteAddOns.VehicleAddOnAccountStatus>> GetAccountCredits()
[WebMethod] public static object ApplyCredits(int addonid, int[] vehicleIds)
[WebMethod] public static WebMethodReturn ApplyCredits(int addonid, int[] vehicleIds)
<behavior name="MapData.MapDataServiceAspNetAjaxBehavior"> <webHttp /> </behavior>
JavaScriptSerializer serializer = new JavaScriptSerializer(null); string json = serializer.Serialize(foo);
[WebService(Namespace = "http: [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)] [System.ComponentModel.ToolboxItem(false)] [System.Web.Script.Services.ScriptService] public class Test : System.Web.Services.WebService { public class Cat { public String HairType { get; set; } public int MeowVolume { get; set; } public String Name { get; set; } } [WebMethod] public String MyMethodA(Cat cat) { return "return value does not matter"; } [WebMethod] public Cat MyMethodB(String someParam) { return new Cat() { HairType = "Short", MeowVolume = 13, Name = "Felix the Cat" }; } }
<endpointBehaviors> <behavior name="MyServiceEndpoint"> <webHttp/> </behavior> </endpointBehaviors>
[DataMember] public List<Person> People { get; set; }
public List<Person> People { get; set; } [DataMember(Name = "People")] public Person[] Persons { get { return People.ToArray(); } private set { } }
private void SerializeValue(object o, StringBuilder sb, int depth, Hashtable objectsInUse) { if (++depth > this._recursionLimit) { throw new ArgumentException(AtlasWeb.JSON_DepthLimitExceeded); } JavaScriptConverter converter = null; if ((o != null) && this.ConverterExistsForType(o.GetType(), out converter)) { IDictionary<string, object> dictionary = converter.Serialize(o, this); if (this.TypeResolver != null) { string str = this.TypeResolver.ResolveTypeId(o.GetType()); if (str != null) { dictionary["__type"] = str; } } sb.Append(this.Serialize(dictionary)); } else { this.SerializeValueInternal(o, sb, depth, objectsInUse); } }
[XmlType("T")] public class Foo { internal Foo() { } [XmlAttribute("p")] public uint Bar { get; set; } } [WebService(Namespace = "http: [System.ComponentModel.ToolboxItem(false)] [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)] [ScriptService] public class MyService : System.Web.Services.WebService { [WebMethod(EnableSession = true)] [System.Web.Script.Services.ScriptMethod(UseHttpGet = false, ResponseFormat = ResponseFormat.Json, XmlSerializeString = false)] public object GetFoo(int pageId) { List<Foo> foos = new List<Foo>(); rtnFoos.Add( new Foo(){ Bar=99 }}; var rtn = from g in foos.AsEnumerable() select g; return rtn; } }
public class MyClass { protected internal MyClass() { } public MyClass(Object someParameter) { } ... } public class MyClassForParams : MyClass { public MyClassForParams() : base() { } }
[WebMethod] [ScriptMethod(ResponseFormat = ResponseFormat.Json)] public MyClass DoSomething(MyClassForParams someObject) { ... ... }
[WebMethod] [ScriptMethod(UseHttpGet = true, ResponseFormat = ResponseFormat.Json)] public void Status() { MyObject myObject = new MyObject(); var json = Newtonsoft.Json.JsonConvert.SerializeObject(myObject); HttpContext.Current.Response.Write(json); }
s = (JSON string with "__type":"clsname", attributes) string match = "\"__type\":\"([^\\\"]|\\.)*\","; RegEx regex = new Regex(match, RegexOptions.Singleline); string cleaned = regex.Replace(s, "");
string tmp = String.Format("<SCRIPT FOR= ClientScript.RegisterClientScriptBlock(this.GetType(), "NewWindow", tmp);
var uri = new Uri( "http: var clean = uri.GetComponents( UriComponents.Scheme | UriComponents.Host | UriComponents.PathAndQuery, UriFormat.UriEscaped );
var clean = uri.GetComponents( UriComponents.AbsoluteUri & ~UriComponents.Port, UriFormat.UriEscaped );
UriBuilder u1 = new UriBuilder( "http: u1.Port = -1; string clean = u1.Uri.ToString();
var uriBuilder = new UriBuilder("http: if (uriBuilder.Uri.IsDefaultPort) { uriBuilder.Port = -1; } return uriBuilder.Uri.AbsoluteUri;
var url = new Uri("http: var cleanUrl = url.ToString();
var url = "http: var regex = new Regex(@":\d+"); var cleanUrl = regex.Replace(url, "");
string redirectstr = String.Format( "http: studid, intSectionID, HttpUtility.UrlEncode(encrypter.Encrypt(uinfo.ToXml()))); Response.Redirect(redirectstr );
RouteTable.Routes.MapHttpRoute( name: "DefaultApi", routeTemplate: "api/{controller}/{id}", defaults: new { id = System.Web.Http.RouteParameter.Optional } );
protected void Application_Start() { AreaRegistration.RegisterAllAreas(); GlobalConfiguration.Configure(WebApiConfig.Register); FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters); RouteConfig.RegisterRoutes(RouteTable.Routes); BundleConfig.RegisterBundles(BundleTable.Bundles); }
GlobalConfiguration.Configuration.Routes.MapHttpRoute( name: "DefaultApi", routeTemplate: "api/{controller}/{id}", defaults: new { id = System.Web.Http.RouteParameter.Optional } );
C:\Windows\Microsoft.NET\Framework\v4.0.30319>aspnet_regiis.exe -i
RouteTable.Routes.MapHttpRoute( name: "DefaultApi", routeTemplate: "{controller}/{id}", defaults: new { id = System.Web.Http.RouteParameter.Optional } );
<system.webServer> <modules runAllManagedModulesForAllRequests="true" /> </system.webServer>
GlobalConfiguration.Configure(WebApiConfig.Register); RouteConfig.RegisterRoutes(RouteTable.Routes);
RouteConfig.RegisterRoutes(RouteTable.Routes); GlobalConfiguration.Configure(WebApiConfig.Register);
public class RouteConfig { public static void RegisterRoutes(RouteCollection routes) { routes.MapHttpRoute( name: "DefaultApi", routeTemplate: "api/{controller}/{action}/{id}", defaults: new { id = RouteParameter.Optional } ); routes.IgnoreRoute("{resource}.axd/{*pathInfo}"); routes.MapRoute( name: "Default", url: "{controller}/{action}/{id}", defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional } ); } }
internal static bool IsControllerType(Type t) { return t != null && t.IsClass && t.IsVisible && !t.IsAbstract && typeof(IHttpController).IsAssignableFrom(t) && HasValidControllerName(t); }
<add name="ExtensionlessUrlHandler-Integrated-4.0" path="*." verb="GET,HEAD,POST,DEBUG,PUT,DELETE,PATCH,OPTIONS" type="System.Web.Handlers.TransferRequestHandler" preCondition="integratedMode,runtimeVersionv4.0" />
config.Routes.MapHttpRoute( name: "DefaultApi", routeTemplate: "api/{controller}/id", defaults: new { id = RouteParameter.Optional} );
config.Routes.MapHttpRoute( name: "DefaultApi", routeTemplate: "api/{controller}/{id}", defaults: new { id = RouteParameter.Optional} );
HttpCookie myCookie = new HttpCookie("MyTestCookie"); DateTime now = DateTime.Now; myCookie.Value = now.ToString(); myCookie.Expires = now.AddMinutes(1); Response.Cookies.Add(myCookie); Response.Write("<p> The cookie has been written.");
HttpCookie myCookie = new HttpCookie("MyTestCookie"); myCookie = Request.Cookies["MyTestCookie"]; if (myCookie != null) Response.Write("<p>"+ myCookie.Name + "<p>"+ myCookie.Value); else Response.Write("not found");
public void WriteCookie(string name, string value) { var cookie = new HttpCookie(name, value); HttpContext.Current.Response.Cookies.Set(cookie); } public string ReadCookie(string name) { if (HttpContext.Current.Response.Cookies.AllKeys.Contains(name)) { var cookie = HttpContext.Current.Response.Cookies[name]; return cookie.Value; } if (HttpContext.Current.Request.Cookies.AllKeys.Contains(name)) { var cookie = HttpContext.Current.Request.Cookies[name]; return cookie.Value; } return null; }
public void WriteCookie(string strCookieName, string strCookieValue) { var hcCookie = new HttpCookie(strCookieName, strCookieValue); HttpContext.Current.Response.Cookies.Set(hcCookie); } public string ReadCookie(string strCookieName) { foreach (string strCookie in HttpContext.Current.Response.Cookies.AllKeys) { if (strCookie == strCookieName) { return HttpContext.Current.Response.Cookies[strCookie].Value; } } foreach (string strCookie in HttpContext.Current.Request.Cookies.AllKeys) { if (strCookie == strCookieName) { return HttpContext.Current.Request.Cookies[strCookie].Value; } } return null; }
protected void Page_Init(object sender, EventArgs e) { }
public static string GetPostBackControlId(this Page page) { if (!page.IsPostBack) return string.Empty; Control control = null; string controlName = page.Request.Params["__EVENTTARGET"]; if (!String.IsNullOrEmpty(controlName)) { control = page.FindControl(controlName); } else { string controlId; Control foundControl; foreach (string ctl in page.Request.Form) { if (ctl.EndsWith(".x") || ctl.EndsWith(".y")) { controlId = ctl.Substring(0, ctl.Length - 2); foundControl = page.FindControl(controlId); } else { foundControl = page.FindControl(ctl); } if (!(foundControl is IButtonControl)) continue; control = foundControl; break; } } return control == null ? String.Empty : control.ID; }
public static Control GetPostBackControl(Page page) { Control control = null; string ctrlname = page.Request.Params.Get("__EVENTTARGET"); if (ctrlname != null && ctrlname != string.Empty) { control = page.FindControl(ctrlname); } else { foreach (string ctl in page.Request.Form) { Control c = page.FindControl(ctl); if (c is System.Web.UI.WebControls.Button) { control = c; break; } } } return control; }
string controlName = this.Request.Params.Get("__EVENTTARGET");
if (this.Request["imageName"+".x"] != null) ...; if (this.Request["name"] != null) ...;
if (specialControl.UniqueID == Page.Request.Params["__EVENTTARGET"]) { }
if (Request.Params["__EVENTTARGET"] != null) { if (Request.Params["__EVENTTARGET"].ToString().Contains("myControlID")) { DoWhateverYouWant(); } }
string controlName = Page.FindControl(Page.Request.Params["__EVENTTARGET"]).ID;
list.OrderByDescending(i => i == 3).ThenBy(i => i);
List<int> ls=new List<int>{1,2,3,4,5,6,7,8}; int nbr=3; var result= ls.OrderBy (l =>(l==nbr?int.MinValue:l));
int num = 3; var result = list.Where(x => x == num).Concat(list.Where(x => x != num));
public static IEnumerable<T> TakeAndOrder<T>(this IEnumerable<T> items, Func<T, bool> f) { foreach ( var item in items.Where(f)) yield return item; foreach (var item in items.Where(i=>!f(i)).OrderBy(i=>i)) yield return item; } var items = new [] {1, 4, 2, 5, 3}; items.TakeAndOrder(i=> i == 4);
c:\inetpub\wwwroot\Test\Website\App_Code\Company\Project\BusinessLogic\Manager.cs
public MyObjectType(TypeFromOtherAssembly parameter) { }
**Solved:** Add reference of my domain library layer to my web app libary layer
protected void Application_Start() { AreaRegistration.RegisterAllAreas(); FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters); RouteConfig.RegisterRoutes(RouteTable.Routes); GlobalConfiguration.Configure(WebApiConfig.Register); BundleConfig.RegisterBundles(BundleTable.Bundles); }
protected void Application_Start() { AreaRegistration.RegisterAllAreas(); GlobalConfiguration.Configure(WebApiConfig.Register); FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters); RouteConfig.RegisterRoutes(RouteTable.Routes); BundleConfig.RegisterBundles(BundleTable.Bundles); }
Microsoft.AspNet.WebApi Microsoft.AspNet.WebApi.Client Microsoft.AspNet.WebApi.Core Microsoft.AspNet.WebApi.WebHost Newtonsoft.Json
using System.Web.Http; namespace WebApiTest { public static class WebApiConfig { public static void Register(HttpConfiguration config) { config.MapHttpAttributeRoutes(); config.Routes.MapHttpRoute( name: "DefaultApi", routeTemplate: "api/{controller}/{id}", defaults: new { id = RouteParameter.Optional } ); } } }
GlobalConfiguration.Configure(WebApiConfig.Register);
protected void Application_Start() { AreaRegistration.RegisterAllAreas(); GlobalConfiguration.Configure(WebApiConfig.Register); FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters); RouteConfig.RegisterRoutes(RouteTable.Routes); BundleConfig.RegisterBundles(BundleTable.Bundles); }
public static bool TryParseGuid(string guidString, out Guid guid) { if (guidString == null) throw new ArgumentNullException("guidString"); try { guid = new Guid(guidString); return true; } catch (FormatException) { guid = default(Guid); return false; } }
@"^(\{{0,1}([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}\}{0,1})$"
public static Guid ToGuid(this string aString) { Guid newGuid; if (string.IsNullOrWhiteSpace(aString)) { return MagicNumbers.defaultGuid; } if (Guid.TryParse(aString, out newGuid)) { return newGuid; } return MagicNumbers.defaultGuid; }
public static class GuidEx { public static bool IsGuid(string value) { Guid x; return Guid.TryParse(value, out x); } }
string testMe = "not a guid"; if (GuidEx.IsGuid(testMe)) { ... }
if (!Guid.TryParse(yourGuidString, out yourGuid)){ yourGuid= Guid.Empty; }
((OperationURL[1] == "GET") ? GetRequestSignature() : "")
string requestUri = _apiURL + "?e=" + OperationURL[0] + ((OperationURL[1] == "GET") ? GetRequestSignature() : "");
string value = someBooleanExpression ? "Alpha" : "Beta";
string requestUri = _apiURL + "?e=" + OperationURL[0] + ((OperationURL[1] == "GET") ? GetRequestSignature() : "");
string requestUri=""; if ((OperationURL[1] == "GET") { requestUri = _apiURL + "?e=" + GetRequestSignature(); } else { requestUri = _apiURL + "?e="; }
if(b) a = c; else if(d) a = e; else if(f) a = g; else a = h;
string requestUri = _apiURL + "?e=" + OperationURL[0]; if((OperationURL[1] == "GET") requestUri = requestUri + GetRequestSignature();
string requestUri; if((OperationURL[1] == "GET") requestUri = _apiURL + "?e=" + OperationURL[0] + GetRequestSignature(); else requestUri = _apiURL + "?e=" + OperationURL[0];
(HttpContext.Current.Handler as Page).ResolveUrl("~/virtualpath");
System.Web.VirtualPathUtility.ToAbsolute("~/Styles/Contoso.xslt");
Controls_myController ctrl = Page.LoadControl(Page.ResolveUrl("controls/myController.ascx"));
public OutputModel Calculate(InputModel input) { return Service.LongRunningCall(input); }
private void MakeRequest() { var myOutput = Calculate(myInput); }
public async Task<OutputModel> CalculateAsync(InputModel input) { return await Task.Run(() => { return Calculate(input); }); }
private async Task MakeRequest() { var task = CalculateAsync(myInput); var myOutput = await task; }
private async Task MakeRequest() { var task = Task.Run(() => Calculate(myInput)); var myOutput = await task; }
private void MakeRequest() { Parallel.Invoke(() => Calculate(myInput1), () => Calculate(myInput2), () => Calculate(myInput3)); }
public DataTable GetEntriesBySearch(string username,string location,DataTable table) { list = null; list = table; string expression; string sortOrder; expression = "Nachname = sortOrder = "nachname DESC"; DataRow[] rows = list.Select(expression, sortOrder); list = null; list = new DataTable(); foreach (DataRow row in rows) { list.ImportRow(row); } return list; }
DataView dv = new DataView(yourDatatable); dv.RowFilter = "query";
DataTable tblFiltered = table.AsEnumerable() .Where(row => row.Field<String>("Nachname") == username && row.Field<String>("Ort") == location) .OrderByDescending(row => row.Field<String>("Nachname")) .CopyToDataTable();
list = null; list = new DataTable(); foreach (DataRow row in rows) { list.ImportRow(row); }
string _sqlWhere = "Nachname = string _sqlOrder = "Nachname DESC"; DataTable _newDataTable = yurDateTable.Select(_sqlWhere, _sqlOrder).CopyToDataTable();
Dim dv As DataView = yourDatatable.DefaultView dv.RowFilter ="query"
EmployeeId = Session["EmployeeID"].ToString(); var rows = dtCrewList.AsEnumerable().Where (row => row.Field<string>("EmployeeId").ToLower()== EmployeeId.ToLower()); if (rows.Any()) { tblFiltered = rows.CopyToDataTable<DataRow>(); }
if (string.IsNullOrEmpty(Request.QueryString["aspxerrorpath"])) { } if (string.IsNullOrWhiteSpace(Request.QueryString["aspxerrorpath"])) { }
string.IsNullOrEmpty(Request.QueryString["aspxerrorpath"])
if (!Request.QueryString.AllKeys.Contains("aspxerrorpath")) return;
if (String.IsNullOrEmpty(Request.QueryString["aspxerrorpath"])) return;
if(string.IsNullOrWhiteSpace(Request.QueryString["aspxerrorpath"])) return;
string urlData = String.Empty; WebClient wc = new WebClient(); wc.Headers.Add("User-Agent", "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2.12) Gecko/20101026 Firefox/3.6.12"); wc.Headers.Add("Accept", "*/*"); wc.Headers.Add("Accept-Language", "en-gb,en;q=0.5"); wc.Headers.Add("Accept-Charset", "ISO-8859-1,utf-8;q=0.7,*;q=0.7"); urlData = wc.DownloadString(uri);
public static class WebUtils { public static Encoding GetEncodingFrom( NameValueCollection responseHeaders, Encoding defaultEncoding = null) { if(responseHeaders == null) throw new ArgumentNullException("responseHeaders"); var contentType = responseHeaders["Content-Type"]; if(contentType == null) return defaultEncoding; var contentTypeParts = contentType.Split( if(contentTypeParts.Length <= 1) return defaultEncoding; var charsetPart = contentTypeParts.Skip(1).FirstOrDefault( p => p.TrimStart().StartsWith("charset", StringComparison.InvariantCultureIgnoreCase)); if(charsetPart == null) return defaultEncoding; var charsetPartParts = charsetPart.Split( if(charsetPartParts.Length != 2) return defaultEncoding; var charsetName = charsetPartParts[1].Trim(); if(charsetName == "") return defaultEncoding; try { return Encoding.GetEncoding(charsetName); } catch(ArgumentException ex) { throw new UnknownEncodingException( charsetName, "The server returned data in an unknown encoding: " + charsetName, ex); } } }
public static class WebClientExtensions { public static string DownloadStringAwareOfEncoding(this WebClient webClient, Uri uri) { var rawData = webClient.DownloadData(uri); var encoding = WebUtils.GetEncodingFrom(webClient.ResponseHeaders, Encoding.UTF8); return encoding.GetString(rawData); } }
var client = new WebClient { Encoding = System.Text.Encoding.UTF8 }; var json = client.DownloadString(url);
WebClient client = new WebClient() client.Headers.Add(HttpRequestHeader.UserAgent, ""); var stream = client.OpenRead("http: StreamReader sr = new StreamReader(stream); s = sr.ReadToEnd();
public class MyMembershipProvider : MembershipProvider { public override bool ValidateUser(string username, string password) { var oUserProvider = new MyUserProvider(); return oUserProvider.ValidateUser(username,password,CurrentTerritoryID); } }
<membership defaultProvider="MyMembershipProvider"> <providers> <clear /> <add name="MyMembershipProvider" applicationName="MyApp" Description="My Membership Provider" passwordFormat="Clear" connectionStringName="MyMembershipConnection" type="MyApp.MyMembershipProvider" /> </providers> </membership>
public override string[] GetRolesForUser(string username) { SpHelper db = new SpHelper(); DataTable roleNames = null; try { roleNames = db.ExecuteDataset(ConnectionManager.ConStr, "sp_GetUserRoles", new MySqlParameter("_userName", username)).Tables[0]; } catch (Exception ex) { throw ex; } string[] roles = new string[roleNames.Rows.Count]; int counter = 0; foreach (DataRow row in roleNames.Rows) { roles[counter] = row["Role_Name"].ToString(); counter++; } return roles; }
<system.web> ... <roleManager enabled="true" defaultProvider="MyRoleProvider"> <providers> <clear /> <add name="MyRoleProvider" applicationName="MyApp" type="MyApp.MyRoleProvider" connectionStringName="MyMembershipConnection" /> </providers> </roleManager> ... </system.web>
[Authorization(Roles = "Customer Manager,Content Editor")] public class MyController : Controller { ...... }
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, Inherited = true, AllowMultiple = false)] public class MyAuthorizationAttribute : AuthorizeAttribute { public virtual string MasterName { get; set; } public virtual string ViewName { get; set; } public MyAuthorizationAttribute () : base() { this.ViewName = "Error"; } protected void CacheValidateHandler(HttpContext context, object data, ref HttpValidationStatus validationStatus) { validationStatus = OnCacheAuthorization(new HttpContextWrapper(context)); } public override void OnAuthorization(AuthorizationContext filterContext) { if (filterContext == null) { throw new ArgumentNullException("filterContext"); } if (AuthorizeCore(filterContext.HttpContext)) { SetCachePolicy(filterContext); } else if (!filterContext.HttpContext.User.Identity.IsAuthenticated) { filterContext.Result = new HttpUnauthorizedResult(); } else if (filterContext.HttpContext.User.IsInRole("SuperUser")) { SetCachePolicy(filterContext); } else { ViewDataDictionary viewData = new ViewDataDictionary(); viewData.Add("Message", "You do not have sufficient privileges for this operation."); filterContext.Result = new ViewResult { MasterName = this.MasterName, ViewName = this.ViewName, ViewData = viewData }; } } protected void SetCachePolicy(AuthorizationContext filterContext) { HttpCachePolicyBase cachePolicy = filterContext.HttpContext.Response.Cache; cachePolicy.SetProxyMaxAge(new TimeSpan(0)); cachePolicy.AddValidationCallback(CacheValidateHandler, null ); } }
[MyAuthorization(Roles = "Portal Manager,Content Editor", ViewName = "AccessDenied")] public class DropboxController : Controller { ....... }
protected void Application_AuthenticateRequest(object sender, EventArgs e) { if (HttpContext.Current.User != null) { if (HttpContext.Current.User.Identity.IsAuthenticated) { if (HttpContext.Current.User.Identity is FormsIdentity) { FormsIdentity id = (FormsIdentity)HttpContext.Current.User.Identity; FormsAuthenticationTicket ticket = id.Ticket; string userData = ticket.UserData; string[] roles = userData.Split( HttpContext.Current.User = new GenericPrincipal(id, roles); } } } }
public class dbService { private databaseDataContext db = new databaseDataContext(); public IQueryable<vwPostsInfo> AllPostsAndDetails() { return db.vwPostsInfos; } public IQueryable<role> GetUserRoles(int userID) { return (from r in db.roles join ur in db.UsersRoles on r.rolesID equals ur.rolesID where ur.userID == userID select r); } public IEnumerable<user> GetUserId(string userName) { return db.users.Where(u => u.username.ToLower() == userName.ToLower()); } public bool logOn(string username, string password) { try { var userID = GetUserId(username); var rolesIQueryable = GetUserRoles(Convert.ToInt32(userID.Select(x => x.userID).Single())); string roles = ""; foreach (var role in rolesIQueryable) { roles += role.rolesName + ","; } roles.Substring(0, roles.Length - 2); FormsAuthenticationTicket ticket = new FormsAuthenticationTicket( 1, username, DateTime.Now, DateTime.Now.AddMinutes(30), true, roles, FormsAuthentication.FormsCookiePath); string hash = FormsAuthentication.Encrypt(ticket); HttpCookie cookie = new HttpCookie( FormsAuthentication.FormsCookieName, hash); if (ticket.IsPersistent) cookie.Expires = ticket.Expiration; HttpContext.Current.Response.Cookies.Add(cookie); return true; } catch { return (false); } } }
<?xml version="1.0" encoding="utf-8"?> <log4net> <appender name="filelogAppender" type="log4net.Appender.RollingFileAppender" > <file value="..\logs\app.debug.log" /> <encoding value="utf-8" /> <staticLogFileName value="true" /> <datePattern value=".yyyyMMdd. <rollingStyle value="Composite" /> <lockingModel type="log4net.Appender.FileAppender+MinimalLock" /> <appendToFile value="true" /> <maximumFileSize value="1MB" /> <layout type="log4net.Layout.PatternLayout"> <conversionPattern value="%date [%3thread] %-5level %property{log4net:HostName} [%property{Revision}] %logger %message%n" /> </layout> </appender> <!-- use [DB] GO CREATE TABLE [dbo].[Log] ( [Id] [int] IDENTITY (1, 1) NOT NULL, [Date] [datetime] NOT NULL, [Application][varchar] (255) NOT NULL, [Thread] [varchar] (255) NOT NULL, [Level] [varchar] (50) NOT NULL, [Logger] [varchar] (255) NOT NULL, [Server][varchar](255) NOT NULL, [Revision][varchar](50) NOT NULL, [Message] [varchar] (4000) NOT NULL, [Exception] [varchar] (2000) NULL ) --> <appender name="dbLogAppender" type="log4net.Appender.AdoNetAppender" xdt:Transform="InsertBefore(/log4net/root)"> <bufferSize value="100" /> <connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /> <connectionString value="data source=sqlserver;initial catalog=DB;integrated security=false;persist security info=True;User ID=USER;Password=PASSWORD" /> <commandText value="INSERT INTO Log ([Date],[Application],[Thread],[Level],[Logger],[Server],[Revision],[Message],[Exception]) VALUES (@log_date, <parameter> <parameterName value="@log_date" /> <dbType value="DateTime" /> <layout type="log4net.Layout.RawTimeStampLayout" /> </parameter> <parameter> <parameterName value="@thread" /> <dbType value="String" /> <size value="255" /> <layout type="log4net.Layout.PatternLayout"> <conversionPattern value="%thread" /> </layout> </parameter> <parameter> <parameterName value="@log_level" /> <dbType value="String" /> <size value="50" /> <layout type="log4net.Layout.PatternLayout"> <conversionPattern value="%level" /> </layout> </parameter> <parameter> <parameterName value="@logger" /> <dbType value="String" /> <size value="255" /> <layout type="log4net.Layout.PatternLayout"> <conversionPattern value="%logger" /> </layout> </parameter> <parameter> <parameterName value="@server" /> <dbType value="String" /> <size value="255" /> <layout type="log4net.Layout.PatternLayout"> <conversionPattern value="%property{log4net:HostName}"/> </layout> </parameter> <parameter> <parameterName value="@revision" /> <dbType value="String" /> <size value="50" /> <layout type="log4net.Layout.PatternLayout"> <conversionPattern value="%property{Revision}"/> </layout> </parameter> <parameter> <parameterName value="@message" /> <dbType value="String" /> <size value="4000" /> <layout type="log4net.Layout.PatternLayout"> <conversionPattern value="%message" /> </layout> </parameter> <parameter> <parameterName value="@exception" /> <dbType value="String" /> <size value="2000" /> <layout type="log4net.Layout.ExceptionLayout" /> </parameter> </appender> <root> <level value="Error"/> <appender-ref ref="filelogAppender"/> </root> <root> <level value="Info"/> <appender-ref ref="dbLogAppender"/> </root> </log4net>
<appender name="filelogAppender" type="log4net.Appender.RollingFileAppender"> <threshold value="Error" /> </appender> <appender name="dblogAppender" type="log4net.Appender.AdoNetAppender"> <threshold value="Info" /> </appender> <root> <appender-ref ref="filelogAppender" /> <appender-ref ref="dblogAppender" /> </root>
<appender name="filelogAppender" type="log4net.Appender.RollingFileAppender" > <!--File Details/Layout Options--> <filter type="log4net.Filter.LevelRangeFilter"> <levelMin value="INFO"/> </filter> </appender> <appender name="dbLogAppender" type="log4net.Appender.AdoNetAppender"> <!--SQL Options--> <filter type="log4net.Filter.LevelRangeFilter"> <levelMin value="ERROR"/> </filter> </appender> <root> <level value="INFO"/> <appender-ref ref="filelogAppender" /> <!--Prints info, warn, error, or fatal logs. --> <appender-ref ref="dbLogAppender" /> <!--Prints only error or fatal logs. --> </root>
root Optional element, maximum of one allowed. Defines the configuration of the root logger.
<root> <level value="Error"/> <appender-ref ref="filelogAppender"/> </root> <logger name="MyCompany.MyApp.Namespace"> <level value="Info"/> <appender-ref ref="dbLogAppender"/> </logger>
<appender name="filelogAppender" type="log4net.Appender.RollingFileAppender"> <evaluator type="log4net.Core.LevelEvaluator"> <threshold value="ERROR" /> </evaluator> </appender>
if ( true ) { var claims = new List<Claim>(); claims.Add( new Claim( ClaimTypes.Name, "MyUser" ) ); claims.Add( new Claim( ClaimTypes.NameIdentifier, "MyUserID" ) ); claims.Add( new Claim( ClaimTypes.Role, "MyRole" ) ); var claimsIdentity = new ClaimsIdentity( claims ); var principal = new ClaimsPrincipal( new[] { claimsIdentity } ); Thread.CurrentPrincipal = principal; HttpContext.Current.User = principal; }
if ( HttpContext.Current.User.Identity.IsAuthenticated ) { }
var claimsIdentity = new ClaimsIdentity( claims, "CustomApiKeyAuth" );
var claimsIdentity = new ClaimsIdentity( claims, AuthenticationTypes.Password ); if (User.Identity.AuthenticationType == AuthenticationTypes.Password) { }
public void ConfigureOAuth(IAppBuilder app) { app.UseCors(CorsOptions.AllowAll); OAuthAuthorizationServerOptions serverOptions = new OAuthAuthorizationServerOptions() { AllowInsecureHttp = true, TokenEndpointPath = new Microsoft.Owin.PathString("/token"), AccessTokenExpireTimeSpan = TimeSpan.FromDays(1), AuthenticationType = AuthenticationTypes.Password, AuthenticationMode = Microsoft.Owin.Security.AuthenticationMode.Active, Provider = new AppAuthServerProvider() }; app.UseOAuthAuthorizationServer(serverOptions); app.UseOAuthBearerAuthentication(new OAuthBearerAuthenticationOptions() { AuthenticationMode = Microsoft.Owin.Security.AuthenticationMode.Active, AuthenticationType = AuthenticationTypes.Password }); }
public void Configuration(IAppBuilder app) { app.UseCookieAuthentication(new CookieAuthenticationOptions { AuthenticationType = "ApplicationCookie", LoginPath = new PathString("/auth/login") }); }
<script language="c public void Page_Load(object sender, EventArgs e) { } </script>
<%@ Language=C <HTML> <script runat="server" language="C void MyButton_OnClick(Object sender, EventArgs e) { MyLabel.Text = MyTextbox.Text.ToString(); } </script> <body> <form id="MyForm" runat="server"> <asp:textbox id="MyTextbox" text="Hello World" runat="server"></asp:textbox> <asp:button id="MyButton" text="Echo Input" OnClick="MyButton_OnClick" runat="server"></asp:button> <asp:label id="MyLabel" runat="server"></asp:label> </form> </body> </HTML>
<script language="c public void Page_Load(object sender, EventArgs e) { } </script>
<% if (this.MyTextBox.Visible) { %> <span>Only show when myTextBox is visible</span> <% } %>
<%@ Page Language="c <%@ Import namespace="System.IO"%> <% StreamWriter tsw = File.AppendText(@Server.MapPath("./test.txt")); tsw.WriteLine("--------------------------------"); tsw.WriteLine(DateTime.Now.ToString()); tsw.Close(); %> Done
FormsAuthentication.SignOut(); HttpContext.Current.User = new GenericPrincipal(new GenericIdentity(string.Empty), null);
FormsAuthentication.SignOut(); Response.Cookies[FormsAuthentication.FormsCookieName].Expires = DateTime.Now.AddYears(-1);
FormsAuthentication.SignOut() Session.Abandon() FormsAuthentication.RedirectToLoginPage() HttpContext.Current.ApplicationInstance.CompleteRequest() return
if (!this.IsPostBack) { if (HttpContext.Current.User.Identity.IsAuthenticated) { FormsAuthentication.SignOut(); Response.Redirect(Request.RawUrl); } }
public virtual ActionResult LogOff() { FormsAuthentication.SignOut(); foreach (var cookie in Response.Cookies.AllKeys) { Response.Cookies.Remove(cookie); } return RedirectToAction(MVC.Home.Index()); }
<div id="wrap" class="@{if (URL "IFRAME" PARAMETER EQUALS 1) iframe-page}">
<a href="@Url.Action("Query",new {parm1=Context.Request.Query["queryparm1"]})">GO</a>
public ActionResult Action(int IFRAME) { ViewData["IsIframe"] = IFRAME == 1; return View(); } @{ string classToUse = (bool)ViewData["IsIframe"] ? "iframe-page" : ""; <div id="wrap" class= }
<a href="@Url.Action("Query",new {parm1=Request.Query["queryparm1"]})">GO</a>
public class MyClass { private static Dictionary<object, MyClass> cache = new Dictionary<object, MyClass>(); private MyClass() { } public static MyClass GetInstance(object data) { MyClass output; if(!cache.TryGetValue(data, out output)) cache.Add(data, output = new MyClass()); return output; } }
public abstract class BaseClass { private BaseClass() { } public class SubClass1 : BaseClass { public SubClass1() : base() { } } public class SubClass2 : BaseClass { public SubClass2() : base() { } } }
public class MyClass { private MyClass(object data1, string data2) { } public MyClass(object data1) : this(data1, null) { } public MyClass(string data2) : this(null, data2) { } public MyClass() : this(null, null) { } }
public class Foo { private Foo (){} private Foo FooInstance {get;set;} public static Foo GetFooInstance () { if(FooInstance == null){ FooInstance = new Foo(); } return FooInstance; } }
public class TestPrivateConstructor { private TestPrivateConstructor() { } public static int sum(int a , int b) { return a + b; } } class Program { static void Main(string[] args) { int result = TestPrivateConstructor.sum(10, 15); } }
HttpSessionStateBase session = new HttpSessionStateWrapper(HttpContext.Current.Session);
double d = double.Parse("100.20", CultureInfo.CurrentCulture); double d = double.Parse("100.20", CultureInfo.CurrentUICulture);
double d = Double.Parse("5,000.00", NumberStyles.Any, CultureInfo.InvariantCulture);
if (context.UserName != context.Password) { context.SetError("invalid_grant", "The user name or password is incorrect"); return Task.FromResult<object>(null); }
var userName = context.UserName; var password = context.Password; var userService = new UserService(); var user = userService.ValidateUser(userName, password); if (user != null){ ....... }
protected void txtTest_Load(object sender, EventArgs e) { if (sender is TextBox) {...} }
var textBox = sender as TextBox; if (sender == null) {...}
var cont= textboxobject as Control; if(cont.GetType().Name=="TextBox") { MessageBox.show("textboxobject is a textbox"); }
public class BaseClass {} public class Foo : BaseClass {} public class Bar : BaseClass {}
protected override void OnActionExecuting(ActionExecutingContext filterContext) { string actionName = filterContext.ActionDescriptor.ActionName; string controllerName = filterContext.ActionDescriptor.ControllerDescriptor.ControllerName ..... base.OnActionExecuting(filterContext); }
protected override void OnActionExecuting(ActionExecutingContext filterContext) { var descriptor = filterContext.ActionDescriptor; var actionName = descriptor.ActionName; var controllerName = descriptor.ControllerDescriptor.ControllerName; ...... base.OnActionExecuting(filterContext); }
Request.RequestContext.RouteData.Values["Controller"]; Request.RequestContext.RouteData.Values["Action"];
var controllerName = (string)routingValues["controller"]; var actionName = (string)routingValues["action"];
if (this.ChkRememberme != null && this.ChkRememberme.Checked == true) { HttpCookie cookie = new HttpCookie(TxtUserName.Text, TxtPassword.Text); cookie.Expires.AddYears(1); Response.Cookies.Add(cookie); }
FormsAuthentication.SetAuthCookie(userName, isPersistanceCookie);
HttpCookie authCookie = HttpContext.Current.Request.Cookies[FormsAuthentication.FormsCookieName];
if (value != null && MailBnfHelper.HasCROrLF(value)) { throw new ArgumentException(SR.GetString(SR.MailSubjectInvalidFormat)); }
subject = subject.Trim(); subject = subject .Substring(0, Math.Min(subject .Length, 78));
protected void Application_BeginRequest(Object sender, EventArgs e) { Debug.WriteLine("BeginRequest_" + Thread.CurrentThread.ManagedThreadId.ToString()); }
<configuration> <system.web> <sessionState mode="Off" /> </system.web> </configuration>
[SessionState(System.Web.SessionState.SessionStateBehavior.ReadOnly)] [OutputCache(NoStore = true, Duration = 0, VaryByParam = "*")] public class ParallelController : Controller { ... }
var bearerOptions = new JwtBearerOptions() { AutomaticAuthenticate = true, AutomaticChallenge = true, TokenValidationParameters = tokenValidationParameters, Events = new CustomBearerEvents() };
public class CustomBearerEvents : Microsoft.AspNetCore.Authentication.JwtBearer.IJwtBearerEvents { public Func<AuthenticationFailedContext, Task> OnAuthenticationFailed { get; set; } = context => Task.FromResult(0); public Func<MessageReceivedContext, Task> OnMessageReceived { get; set; } = context => Task.FromResult(0); public Func<TokenValidatedContext, Task> OnTokenValidated { get; set; } = context => Task.FromResult(0); public Func<JwtBearerChallengeContext, Task> OnChallenge { get; set; } = context => Task.FromResult(0); Task IJwtBearerEvents.AuthenticationFailed(AuthenticationFailedContext context) { return OnAuthenticationFailed(context); } Task IJwtBearerEvents.Challenge(JwtBearerChallengeContext context) { return OnChallenge(context); } Task IJwtBearerEvents.MessageReceived(MessageReceivedContext context) { return OnMessageReceived(context); } Task IJwtBearerEvents.TokenValidated(TokenValidatedContext context) { return OnTokenValidated(context); } }
var tokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters { ValidateIssuerSigningKey = true, IssuerSigningKey = signingKey, ValidateIssuer = true, ValidIssuer = "ExampleIssuer", ValidateAudience = true, ValidAudience = "ExampleAudience", ValidateLifetime = true, ClockSkew = TimeSpan.Zero, };
public class MyTokenHandler : Microsoft.IdentityModel.Tokens.ISecurityTokenValidator { private int m_MaximumTokenByteSize; public MyTokenHandler() { } bool ISecurityTokenValidator.CanValidateToken { get { return true; } } int ISecurityTokenValidator.MaximumTokenSizeInBytes { get { return this.m_MaximumTokenByteSize; } set { this.m_MaximumTokenByteSize = value; } } bool ISecurityTokenValidator.CanReadToken(string securityToken) { System.Console.WriteLine(securityToken); return true; } ClaimsPrincipal ISecurityTokenValidator.ValidateToken(string securityToken, TokenValidationParameters validationParameters, out SecurityToken validatedToken) { JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler(); try { tokenHandler.ValidateToken(securityToken, validationParameters, out validatedToken); validatedToken = new JwtSecurityToken("jwtEncodedString"); } catch (Exception ex) { System.Console.WriteLine(ex.Message); throw; } ClaimsPrincipal principal = null; validatedToken = null; System.Collections.Generic.List<System.Security.Claims.Claim> ls = new System.Collections.Generic.List<System.Security.Claims.Claim>(); ls.Add( new System.Security.Claims.Claim( System.Security.Claims.ClaimTypes.Name, "IcanHazUsr_éèêëïàáâäåãæóòôöõõúùûüñçø_ÉÈÊËÏÀÁÂÄÅÃÆÓÒÔÖÕÕÚÙÛÜÑÇØ 你好，世界 Привет\tмир" , System.Security.Claims.ClaimValueTypes.String ) ); System.Security.Claims.ClaimsIdentity id = new System.Security.Claims.ClaimsIdentity("authenticationType"); id.AddClaims(ls); principal = new System.Security.Claims.ClaimsPrincipal(id); return principal; throw new NotImplementedException(); } }
System.Security.Cryptography.X509Certificates.X509Certificate2 cert2 = DotNetUtilities.CreateX509Cert2("mycert"); Microsoft.IdentityModel.Tokens.SecurityKey secKey = new X509SecurityKey(cert2);
public static System.Security.Cryptography.X509Certificates.X509Certificate2 CreateX509Cert2(string certName) { var keypairgen = new Org.BouncyCastle.Crypto.Generators.RsaKeyPairGenerator(); keypairgen.Init(new Org.BouncyCastle.Crypto.KeyGenerationParameters( new Org.BouncyCastle.Security.SecureRandom( new Org.BouncyCastle.Crypto.Prng.CryptoApiRandomGenerator() ) , 1024 ) ); Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair keypair = keypairgen.GenerateKeyPair(); var random = new Org.BouncyCastle.Security.SecureRandom( new Org.BouncyCastle.Crypto.Prng.CryptoApiRandomGenerator() ); Org.BouncyCastle.Crypto.ISignatureFactory signatureFactory = new Org.BouncyCastle.Crypto.Operators.Asn1SignatureFactory("SHA512WITHRSA", keypair.Private, random) ; var gen = new Org.BouncyCastle.X509.X509V3CertificateGenerator(); var CN = new Org.BouncyCastle.Asn1.X509.X509Name("CN=" + certName); var SN = Org.BouncyCastle.Math.BigInteger.ProbablePrime(120, new Random()); gen.SetSerialNumber(SN); gen.SetSubjectDN(CN); gen.SetIssuerDN(CN); gen.SetNotAfter(DateTime.Now.AddYears(1)); gen.SetNotBefore(DateTime.Now.Subtract(new TimeSpan(7, 0, 0, 0))); gen.SetPublicKey(keypair.Public); gen.AddExtension( Org.BouncyCastle.Asn1.X509.X509Extensions.AuthorityKeyIdentifier.Id, false, new Org.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier( Org.BouncyCastle.X509.SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(keypair.Public), new Org.BouncyCastle.Asn1.X509.GeneralNames(new Org.BouncyCastle.Asn1.X509.GeneralName(CN)), SN )); gen.AddExtension( Org.BouncyCastle.Asn1.X509.X509Extensions.ExtendedKeyUsage.Id, false, new Org.BouncyCastle.Asn1.X509.ExtendedKeyUsage(new ArrayList() { new Org.BouncyCastle.Asn1.DerObjectIdentifier("1.3.6.1.5.5.7.3.1") })); Org.BouncyCastle.X509.X509Certificate bouncyCert = gen.Generate(signatureFactory); byte[] ba = bouncyCert.GetEncoded(); System.Security.Cryptography.X509Certificates.X509Certificate2 msCert = new System.Security.Cryptography.X509Certificates.X509Certificate2(ba); return msCert; }
app.UseCookieAuthentication(new CookieAuthenticationOptions() { AuthenticationScheme = "MyCookieMiddlewareInstance", CookieName = "SecurityByObscurityDoesntWork", ExpireTimeSpan = new System.TimeSpan(15, 0, 0), LoginPath = new Microsoft.AspNetCore.Http.PathString("/Account/Unauthorized/"), AccessDeniedPath = new Microsoft.AspNetCore.Http.PathString("/Account/Forbidden/"), AutomaticAuthenticate = true, AutomaticChallenge = true, CookieSecure = Microsoft.AspNetCore.Http.CookieSecurePolicy.SameAsRequest, CookieHttpOnly = false, TicketDataFormat = new CustomJwtDataFormat("foo", tokenValidationParameters) });
public class CustomJwtDataFormat : ISecureDataFormat<AuthenticationTicket> { private readonly string algorithm; private readonly TokenValidationParameters validationParameters; public CustomJwtDataFormat(string algorithm, TokenValidationParameters validationParameters) { this.algorithm = algorithm; this.validationParameters = validationParameters; } string ISecureDataFormat<AuthenticationTicket>.Protect(AuthenticationTicket data) { return MyProtect(data, null); } string ISecureDataFormat<AuthenticationTicket>.Protect(AuthenticationTicket data, string purpose) { return MyProtect(data, purpose); } AuthenticationTicket ISecureDataFormat<AuthenticationTicket>.Unprotect(string protectedText) { return MyUnprotect(protectedText, null); } AuthenticationTicket ISecureDataFormat<AuthenticationTicket>.Unprotect(string protectedText, string purpose) { return MyUnprotect(protectedText, purpose); } private string MyProtect(AuthenticationTicket data, string purpose) { return "wadehadedudada"; throw new System.NotImplementedException(); } [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] private AuthenticationTicket MyUnprotect(string protectedText, string purpose) { JwtSecurityTokenHandler handler = new JwtSecurityTokenHandler(); ClaimsPrincipal principal = null; SecurityToken validToken = null; System.Collections.Generic.List<System.Security.Claims.Claim> ls = new System.Collections.Generic.List<System.Security.Claims.Claim>(); ls.Add( new System.Security.Claims.Claim( System.Security.Claims.ClaimTypes.Name, "IcanHazUsr_éèêëïàáâäåãæóòôöõõúùûüñçø_ÉÈÊËÏÀÁÂÄÅÃÆÓÒÔÖÕÕÚÙÛÜÑÇØ 你好，世界 Привет\tмир" , System.Security.Claims.ClaimValueTypes.String ) ); System.Security.Claims.ClaimsIdentity id = new System.Security.Claims.ClaimsIdentity("authenticationType"); id.AddClaims(ls); principal = new System.Security.Claims.ClaimsPrincipal(id); return new AuthenticationTicket(principal, new AuthenticationProperties(), "MyCookieMiddlewareInstance"); try { principal = handler.ValidateToken(protectedText, this.validationParameters, out validToken); JwtSecurityToken validJwt = validToken as JwtSecurityToken; if (validJwt == null) { throw new System.ArgumentException("Invalid JWT"); } if (!validJwt.Header.Alg.Equals(algorithm, System.StringComparison.Ordinal)) { throw new System.ArgumentException($"Algorithm must be } } catch (SecurityTokenValidationException) { return null; } catch (System.ArgumentException) { return null; } return new AuthenticationTicket(principal, new AuthenticationProperties(), "MyCookieMiddlewareInstance"); } }
public class TokenMaker { class SecurityConstants { public static string TokenIssuer; public static string TokenAudience; public static int TokenLifetimeMinutes; } public static string IssueToken() { SecurityKey sSKey = null; var claimList = new List<Claim>() { new Claim(ClaimTypes.Name, "userName"), new Claim(ClaimTypes.Role, "role") }; JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler(); SecurityTokenDescriptor desc = makeSecurityTokenDescriptor(sSKey, claimList); return tokenHandler.CreateEncodedJwt(desc); } public static ClaimsPrincipal ValidateJwtToken(string jwtToken) { SecurityKey sSKey = null; var tokenHandler = new JwtSecurityTokenHandler(); JwtSecurityToken parsedJwt = tokenHandler.ReadToken(jwtToken) as JwtSecurityToken; TokenValidationParameters validationParams = new TokenValidationParameters() { RequireExpirationTime = true, ValidAudience = SecurityConstants.TokenAudience, ValidIssuers = new List<string>() { SecurityConstants.TokenIssuer }, ValidateIssuerSigningKey = true, ValidateLifetime = true, IssuerSigningKey = sSKey, }; SecurityToken secT; return tokenHandler.ValidateToken("token", validationParams, out secT); } private static SecurityTokenDescriptor makeSecurityTokenDescriptor(SecurityKey sSKey, List<Claim> claimList) { var now = DateTime.UtcNow; Claim[] claims = claimList.ToArray(); return new Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor { Subject = new ClaimsIdentity(claims), Issuer = SecurityConstants.TokenIssuer, Audience = SecurityConstants.TokenAudience, IssuedAt = System.DateTime.UtcNow, Expires = System.DateTime.UtcNow.AddMinutes(SecurityConstants.TokenLifetimeMinutes), NotBefore = System.DateTime.UtcNow.AddTicks(-1), SigningCredentials = new SigningCredentials(sSKey, Microsoft.IdentityModel.Tokens.SecurityAlgorithms.EcdsaSha512Signature) }; } }
var payload = new Dictionary<string, object>() { { "claim1", 0 }, { "claim2", "claim2-value" } }; var secretKey = "GQDstcKsx0NHjPOuXOYg5MbeJ1XT0uFiwDVvVBrk"; string token = JWT.JsonWebToken.Encode(payload, secretKey, JWT.JwtHashAlgorithm.HS256); Console.WriteLine(token);
var token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJjbGFpbTEiOjAsImNsYWltMiI6ImNsYWltMi12YWx1ZSJ9.8pwBI_HtXqI3UgQHQ_rDRnSQRxFL1SR8fbQoS-5kM5s"; var secretKey = "GQDstcKsx0NHjPOuXOYg5MbeJ1XT0uFiwDVvVBrk"; try { string jsonPayload = JWT.JsonWebToken.Decode(token, secretKey); Console.WriteLine(jsonPayload); } catch (JWT.SignatureVerificationException) { Console.WriteLine("Invalid token!"); }
namespace BouncyJWT { public class JwtKey { public byte[] MacKeyBytes; public Org.BouncyCastle.Crypto.AsymmetricKeyParameter RsaPrivateKey; public Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters EcPrivateKey; public string MacKey { get { return System.Text.Encoding.UTF8.GetString(this.MacKeyBytes); } set { this.MacKeyBytes = System.Text.Encoding.UTF8.GetBytes(value); } } public JwtKey() { } public JwtKey(string macKey) { this.MacKey = macKey; } public JwtKey(byte[] macKey) { this.MacKeyBytes = macKey; } public JwtKey(Org.BouncyCastle.Crypto.AsymmetricKeyParameter rsaPrivateKey) { this.RsaPrivateKey = rsaPrivateKey; } public JwtKey(Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters ecPrivateKey) { this.EcPrivateKey = ecPrivateKey; } } }
services.AddIdentity<ApplicationUser, ApplicationRole>() .AddEntityFrameworkStores<ApplicationDbContext>() .AddDefaultTokenProviders() .AddOpenIddictCore<Application>(config => config.UseEntityFramework());
app.UseOpenIddictCore(builder => { builder.Options.UseJwtTokens(); builder.Options.AllowInsecureHttp = true; builder.Options.ApplicationCanDisplayErrors = true; }); app.UseJwtBearerAuthentication(options => { options.AutomaticAuthenticate = true; options.AutomaticChallenge = true; options.RequireHttpsMetadata = false; options.Audience = "http: options.Authority = "http: });
[Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
using AspNetCore.Security.Jwt; using System.Threading.Tasks; namespace XXX.API { public class Authenticator : IAuthentication { public async Task<bool> IsValidUser(string id, string password) { return true; } } }
using AspNetCore.Security.Jwt; using Swashbuckle.AspNetCore.Swagger; . . public void ConfigureServices(IServiceCollection services) { . . services.AddSwaggerGen(c => { c.SwaggerDoc("v1", new Info { Title = "XXX API", Version = "v1" }); }); services.AddSecurity<Authenticator>(this.Configuration, true); services.AddMvc().AddSecurity(); } public void Configure(IApplicationBuilder app, IHostingEnvironment env) { . . . app.UseSwaggerUI(c => { c.SwaggerEndpoint("/swagger/v1/swagger.json", "XXX API V1"); }); app.UseSecurity(true); app.UseMvc(); }
{ "SecuritySettings": { "Secret": "a secret that needs to be at least 16 characters long", "Issuer": "your app", "Audience": "the client of your app", "IdType": "Name", "TokenExpiryInHours" : 2 }, . . . }
using Microsoft.AspNetCore.Mvc; . . . namespace XXX.API.Controllers { using Microsoft.AspNetCore.Authorization; [Authorize] [Route("api/[controller]")] public class XXXController : Controller { . . . } }
HttpWebRequest request = WebRequest.Create("http: request.Accept = "application/xrds+xml"; HttpWebResponse response = (HttpWebResponse)request.GetResponse(); WebHeaderCollection header = response.Headers;
HttpWebRequest request = WebRequest.Create("http: HttpWebResponse response = (HttpWebResponse)request.GetResponse(); WebHeaderCollection header = response.Headers; var encoding = ASCIIEncoding.ASCII; using (var reader = new System.IO.StreamReader(response.GetResponseStream(), encoding)) { string responseText = reader.ReadToEnd(); }
public static string GetResponseText(string address) { var request = (HttpWebRequest)WebRequest.Create(address); using (var response = (HttpWebResponse)request.GetResponse()) { var encoding = Encoding.GetEncoding(response.CharacterSet); using (var responseStream = response.GetResponseStream()) using (var reader = new StreamReader(responseStream, encoding)) return reader.ReadToEnd(); } }
private static readonly HttpClient httpClient = new HttpClient(); public static async Task<string> GetResponseText(string address) { return await httpClient.GetStringAsync(address); }
using System; using System.IO; using System.Net; using System.Xml.Linq; using System.Web; class Test { static void Main() { string url = "http: HttpWebRequest request = (HttpWebRequest) WebRequest.Create(url); XDocument doc; using (WebResponse response = request.GetResponse()) { using (Stream stream = response.GetResponseStream()) { doc = XDocument.Load(stream); } } Console.WriteLine(doc); } }
HttpWebRequest request = (HttpWebRequest)WebRequest.Create("https: request.Method = "GET"; HttpWebResponse response = (HttpWebResponse)request.GetResponse(); Stream dataStream = response.GetResponseStream(); StreamReader reader = new StreamReader(dataStream); string strResponse = reader.ReadToEnd();
HttpWebResponse webresponse; webresponse = (HttpWebResponse)webrequest.GetResponse(); Encoding enc = System.Text.Encoding.GetEncoding(1252); StreamReader loResponseStream = new StreamReader(webresponse.GetResponseStream(),enc); string Response = loResponseStream.ReadToEnd(); loResponseStream.Close(); webresponse.Close(); return Response;
public async Task<HomeInfo> GetHomeInfoAsync(DateTime timestamp) { using (var helper = new ServiceHelper<ServiceClient, ServiceContract>()) { return await helper.Proxy.GetHomeInfoAsync(timestamp); } }
try { if (_operationContextScope != null) { _operationContextScope.Dispose(); } if (_serviceClient != null) { if (_serviceClient.State != CommunicationState.Faulted) { _serviceClient.Close(); } else { _serviceClient.Abort(); } } } catch (CommunicationException) { _serviceClient.Abort(); } catch (TimeoutException) { _serviceClient.Abort(); } catch (Exception) { _serviceClient.Abort(); throw; } finally { _operationContextScope = null; _serviceClient = null; }
private async void DoStuffWithDoc(string docId) { var doc = await GetDocumentAsync(docId); if (doc.YadaYada) { } } public Task<Document> GetDocumentAsync(string docId) { var docClient = CreateDocumentServiceClient(); using (new OperationContextScope(docClient.InnerChannel)) { return docClient.GetDocumentAsync(docId); } }
public async Task<HomeInfo> GetHomeInfoAsync(DateTime timestamp) { using (var helper = new ServiceHelper<ServiceClient, ServiceContract>()) { return await helper.Proxy.GetHomeInfoAsync(timestamp); } }
public class ServiceHelper<TServiceClient, TService> : IDisposable where TServiceClient : ClientBase<TService>, new() where TService : class { protected bool _isInitialized; protected TServiceClient _serviceClient; public TServiceClient Proxy { get { if (!_isInitialized) { Initialize(); _isInitialized = true; } else if (_serviceClient == null) { throw new ObjectDisposedException("ServiceHelper"); } return _serviceClient; } } protected virtual void Initialize() { _serviceClient = new TServiceClient(); } public void Dispose() { Dispose(true); GC.SuppressFinalize(this); } protected virtual void Dispose(bool disposing) { if (disposing) { try { if (_serviceClient != null) { if (_serviceClient.State != CommunicationState.Faulted) { _serviceClient.Close(); } else { _serviceClient.Abort(); } } } catch (CommunicationException) { _serviceClient.Abort(); } catch (TimeoutException) { _serviceClient.Abort(); } catch (Exception) { _serviceClient.Abort(); throw; } finally { _serviceClient = null; } } } }
async Task TestAsync() { using(var client = new WcfAPM.ServiceClient()) using (var scope = new FlowingOperationContextScope(client.InnerChannel)) { await client.SomeMethodAsync(1).ContinueOnScope(scope); await client.AnotherMethodAsync(2).ContinueOnScope(scope); } }
public sealed class FlowingOperationContextScope : IDisposable { bool _inflight = false; bool _disposed; OperationContext _thisContext = null; OperationContext _originalContext = null; public FlowingOperationContextScope(IContextChannel channel): this(new OperationContext(channel)) { } public FlowingOperationContextScope(OperationContext context) { _originalContext = OperationContext.Current; OperationContext.Current = _thisContext = context; } public void Dispose() { if (!_disposed) { if (_inflight || OperationContext.Current != _thisContext) throw new InvalidOperationException(); _disposed = true; OperationContext.Current = _originalContext; _thisContext = null; _originalContext = null; } } internal void BeforeAwait() { if (_inflight) return; _inflight = true; } internal void AfterAwait() { if (!_inflight) throw new InvalidOperationException(); _inflight = false; OperationContext.Current = _thisContext; } } public static class TaskExt { public static SimpleAwaiter<TResult> ContinueOnScope<TResult>(this Task<TResult> @this, FlowingOperationContextScope scope) { return new SimpleAwaiter<TResult>(@this, scope.BeforeAwait, scope.AfterAwait); } public class SimpleAwaiter<TResult> : System.Runtime.CompilerServices.INotifyCompletion { readonly Task<TResult> _task; readonly Action _beforeAwait; readonly Action _afterAwait; public SimpleAwaiter(Task<TResult> task, Action beforeAwait, Action afterAwait) { _task = task; _beforeAwait = beforeAwait; _afterAwait = afterAwait; } public SimpleAwaiter<TResult> GetAwaiter() { return this; } public bool IsCompleted { get { if (_task.IsCompleted) return true; _beforeAwait(); return false; } } public TResult GetResult() { return _task.Result; } public void OnCompleted(Action continuation) { _task.ContinueWith(task => { _afterAwait(); continuation(); }, CancellationToken.None, TaskContinuationOptions.ExecuteSynchronously, SynchronizationContext.Current != null ? TaskScheduler.FromCurrentSynchronizationContext() : TaskScheduler.Current); } } }
public Task<Document> GetDocumentAsync(string docId) { var docClient = CreateDocumentServiceClient(); using (new OperationContextScope(docClient.InnerChannel)) { var task = docClient.GetDocumentAsync(docId); } return await task; }
public static class WithOperationContextTaskExtensions { public static ContinueOnOperationContextAwaiter<TResult> WithOperationContext<TResult>(this Task<TResult> @this, bool configureAwait = true) { return new ContinueOnOperationContextAwaiter<TResult>(@this, configureAwait); } public static ContinueOnOperationContextAwaiter WithOperationContext(this Task @this, bool configureAwait = true) { return new ContinueOnOperationContextAwaiter(@this, configureAwait); } public class ContinueOnOperationContextAwaiter : INotifyCompletion { private readonly ConfiguredTaskAwaitable.ConfiguredTaskAwaiter _awaiter; private OperationContext _operationContext; public ContinueOnOperationContextAwaiter(Task task, bool continueOnCapturedContext = true) { if (task == null) throw new ArgumentNullException("task"); _awaiter = task.ConfigureAwait(continueOnCapturedContext).GetAwaiter(); } public ContinueOnOperationContextAwaiter GetAwaiter() { return this; } public bool IsCompleted { get { return _awaiter.IsCompleted; } } public void OnCompleted(Action continuation) { _operationContext = OperationContext.Current; _awaiter.OnCompleted(continuation); } public void GetResult() { OperationContext.Current = _operationContext; _awaiter.GetResult(); } } public class ContinueOnOperationContextAwaiter<TResult> : INotifyCompletion { private readonly ConfiguredTaskAwaitable<TResult>.ConfiguredTaskAwaiter _awaiter; private OperationContext _operationContext; public ContinueOnOperationContextAwaiter(Task<TResult> task, bool continueOnCapturedContext = true) { if (task == null) throw new ArgumentNullException("task"); _awaiter = task.ConfigureAwait(continueOnCapturedContext).GetAwaiter(); } public ContinueOnOperationContextAwaiter<TResult> GetAwaiter() { return this; } public bool IsCompleted { get { return _awaiter.IsCompleted; } } public void OnCompleted(Action continuation) { _operationContext = OperationContext.Current; _awaiter.OnCompleted(continuation); } public TResult GetResult() { OperationContext.Current = _operationContext; return _awaiter.GetResult(); } } }
public async Task<ResultCallWrapper<TResult>> CallAsync<TResult>(Func<T, Task<TResult>> action, EndpointAddress endpoint) { using (ChannelLifetime<T> channelLifetime = new ChannelLifetime<T>(ConstructChannel(endpoint))) { var oldContext = OperationContext.Current; OperationContext.Current = new OperationContext((IContextChannel)channelLifetime.Channel); var result = await action(channelLifetime.Channel) .WithOperationContext(configureAwait: false); HttpResponseMessageProperty incomingMessageProperty = (HttpResponseMessageProperty)OperationContext.Current.IncomingMessageProperties[HttpResponseMessageProperty.Name]; string[] keys = incomingMessageProperty.Headers.AllKeys; var headersOrig = keys.ToDictionary(t => t, t => incomingMessageProperty.Headers[t]); OperationContext.Current = oldContext; return new ResultCallWrapper<TResult>(result, new ReadOnlyDictionary<string, string>(headersOrig)); } }
[ServiceContract] public interface IMessage { [OperationContract] Task<string> GetMessages(string msg); } public class MessageService : IMessage { async Task<string> IMessage.GetMessages(string msg) { var task = Task.Factory.StartNew(() => { Thread.Sleep(10000); return "Return from Server : " + msg; }); return await task.ConfigureAwait(false); } }
var client = new Proxy("BasicHttpBinding_IMessage"); var task = Task.Factory.StartNew(() => client.GetMessages("Hello")); var str = await task;
public Task<MyDomainModel> GetHomeInfoAsync(DateTime timestamp) { using (var helper = new ServiceHelper<ServiceClient, ServiceContract>()) { return helper.Proxy.GetHomeInfoAsync(timestamp).ContinueWith(antecedent=>processReplay(antecedent.Result)); } }
public async Task<HomeInfo> GetHomeInfoAsync(DateTime timestamp) { using (var client = CreateDocumentServiceClient()) { await client.BeginGetHomeInfoAsync(timestamp); } }
<ProjectTypeGuids>{E3E379DF-F4C6-4180-9B81-6769533ABE47};{349c5851-65df-11da-9384-00065b846f21};{fae04ec0-301f-11d3-bf4b-00c04f79efbc}</ProjectTypeGuids>
{E3E379DF-F4C6-4180-9B81-6769533ABE47}; {E53F8FEA-EAE0-44A6-8774-FFD645390401};
ASP.NET MVC 1 {603C0E0B-DB56-11DC-BE95-000D561079B0} ASP.NET MVC 2 {F85E285D-A4E0-4152-9332-AB1D724D3325} ASP.NET MVC 3 {E53F8FEA-EAE0-44A6-8774-FFD645390401} ASP.NET MVC 4 {E3E379DF-F4C6-4180-9B81-6769533ABE47} ASP.NET MVC 5 {349C5851-65DF-11DA-9384-00065B846F21}
{349c5851-65df-11da-9384-00065b846f21};{fae04ec0-301f-11d3-bf4b-00c04f79efbc}
public class MachineKeyProtectionProvider : IDataProtectionProvider { public IDataProtector Create(params string[] purposes) { return new MachineKeyDataProtector(purposes); } } public class MachineKeyDataProtector : IDataProtector { private readonly string[] _purposes; public MachineKeyDataProtector(string[] purposes) { _purposes = purposes; } public byte[] Protect(byte[] userData) { return MachineKey.Protect(userData, _purposes); } public byte[] Unprotect(byte[] protectedData) { return MachineKey.Unprotect(protectedData, _purposes); } }
using System.Web.Mvc; using System.Web.Routing; namespace TEST { public class MvcApplication : System.Web.HttpApplication { public static void RegisterGlobalFilters(GlobalFilterCollection filters) { filters.Add(new HandleErrorAttribute()); } public static void RegisterRoutes(RouteCollection routes) { routes.IgnoreRoute("{resource}.axd/{*pathInfo}"); routes.MapRoute( "Default", "{controller}/{action}/{id}", new { controller = "Home", action = "Index", id = UrlParameter.Optional } ); } protected void Application_Start() { AreaRegistration.RegisterAllAreas(); RegisterGlobalFilters(GlobalFilters.Filters); RegisterRoutes(RouteTable.Routes); } } }
routes.MapRoute( "Default", "{controller}/{action}/{id}", new { controller = "Home", action = "Index", id = UrlParameter.Optional } );
routes.MapRoute( "Default", "{controller}/{action}/{id}", new { controller = "Demo", action = "Index", id = UrlParameter.Optional } );
routes.MapRoute( name: "DefaultWithLanguage", url: "{language}/{controller}/{action}/{id}", defaults: new { language = "fa", controller = "Home", action = "Index", id = UrlParameter.Optional }, constraints: new {language= "[a-z]{2}"} ); routes.MapRoute( name: "Default", url: "{controller}/{action}/{id}", defaults: new { language = "fa", controller = "Home", action = "Index", id = UrlParameter.Optional } );
public ActionResult MyView() { return View(whatever); }
@{ Layout = null; } <!DOCTYPE html> <html> <head> <meta name="viewport" content="width=device-width" /> <title>MyView</title> </head> <body> <div> </div> </body> </html>
public ActionResult GetView() { return View("MyView"); }
public ActionResult LandingPage() { ProjectDetailsViewModels PD = new ProjectDetailsViewModels(); List<ProjectDetail> PDList = new List<ProjectDetail>(); PDList = GetProductList(); PD.Projectmodel = PDList; return View(PD); }
public static void RegisterRoutes(RouteCollection routes) { routes.IgnoreRoute("{resource}.axd/{*pathInfo}"); routes.MapRoute( name: "Default", url: "{controller}/{action}/{id}", defaults: new { controller = "usersController", action = "Index", id = UrlParameter.Optional } ); }
public static void RegisterRoutes(RouteCollection routes) { routes.IgnoreRoute("{resource}.axd/{*pathInfo}"); routes.MapRoute( name: "Default", url: "{controller}/{action}/{id}", defaults: new { controller = "users", action = "Index", id = UrlParameter.Optional } ); }
<gridview> <Columns> <asp:ButtonField ButtonType="Button" CommandName="Edit" Text="Edit" Visible="True" CommandArgument=" ? ? ? " /> .....
protected void Whatever_RowCommand( object sender, GridViewCommandEventArgs e ) { int rowIndex = Convert.ToInt32( e.CommandArgument ); ... }
<asp:TemplateField> <ItemTemplate> <asp:Button ID="AddButton" runat="server" CommandName="AddToCart" CommandArgument="<% Text="Add to Cart" /> </ItemTemplate> </asp:TemplateField>
protected void GridView1_RowCommand(object sender, GridViewCommandEventArgs e) { if (e.CommandName == "AddToCart") { int index = Convert.ToInt32(e.CommandArgument); GridViewRow row = GridView1.Rows[index]; } }
<gridview> <Columns> <asp:ButtonField ButtonType="Button" CommandName="Edit" Text="Edit" Visible="True" CommandArgument="<% </Columns> </gridview>
void GridView1_RowCommand(object sender, GridViewCommandEventArgs e) { Button b = (Button)e.CommandSource; b.CommandArgument = ((GridViewRow)sender).RowIndex.ToString(); }
protected void FormatGridView(object sender, System.Web.UI.WebControls.GridViewRowEventArgs e) { if (e.Row.RowType == DataControlRowType.DataRow) { ((Button)e.Row.Cells(0).FindControl("btnSpecial")).CommandArgument = e.Row.RowIndex.ToString(); } }
<asp:TemplateField HeaderText="" ItemStyle-Width="20%" HeaderStyle-HorizontalAlign="Center"> <ItemTemplate> <asp:LinkButton runat="server" ID="lnkAdd" Text="Add" CommandName="Add" CommandArgument= </ItemTemplate> </asp:TemplateField>
<asp:LinkButton ID="LnkBtn" runat="server" Text="Text" RowIndex=
Protected Sub LnkBtn_Click(ByVal sender As Object, ByVal e As EventArgs) dim rowIndex as integer = sender.Attributes("RowIndex") End Sub
<form action="/api/workitems" enctype="multipart/form-data" method="post"> <input type="hidden" name="type" value="ExtractText" /> <input type="file" name="FileForUpload" /> <input type="submit" value="Run test" /> </form>
using (var client = new HttpClient()) { using (var content = new MultipartFormDataContent()) { var values = new[] { new KeyValuePair<string, string>("Foo", "Bar"), new KeyValuePair<string, string>("More", "Less"), }; foreach (var keyValuePair in values) { content.Add(new StringContent(keyValuePair.Value), keyValuePair.Key); } var fileContent = new ByteArrayContent(System.IO.File.ReadAllBytes(fileName)); fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("attachment") { FileName = "Foo.txt" }; content.Add(fileContent); var requestUri = "/api/action"; var result = client.PostAsync(requestUri, content).Result; } }
HttpClient c = new HttpClient(); var fileContent = new ByteArrayContent(new byte[100]); fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("attachment") { FileName = "myFilename.txt" }; var formData = new FormUrlEncodedContent(new[] { new KeyValuePair<string, string>("name", "ali"), new KeyValuePair<string, string>("title", "ostad") }); MultipartContent content = new MultipartContent(); content.Add(formData); content.Add(fileContent); c.PostAsync(myUrl, content);
var fileContent = new ByteArrayContent(System.IO.File.ReadAllBytes(fileName)); fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data") { Name = "attachment", FileName = "Foo.txt", }; multipartFormDataContent.Add(fileContent);
public static void Main(string[] args) { var config = new ConfigurationBuilder() .SetBasePath(Directory.GetCurrentDirectory()) .AddJsonFile("hosting.json", optional: true) .AddEnvironmentVariables(prefix: "ASPNETCORE_") .AddCommandLine(args) .Build(); var host = new WebHostBuilder() .UseUrls("http: .UseEnvironment("Development") .UseConfiguration(config) .UseKestrel() .UseContentRoot(Directory.GetCurrentDirectory()) .UseIISIntegration() .UseStartup<Startup>() .Build(); host.Run(); }
public static void Main(string[] args) { var host = new WebHostBuilder() .UseUrls("http: .UseKestrel() .UseContentRoot(Directory.GetCurrentDirectory()) .UseIISIntegration() .UseStartup<Startup>() .Build(); host.Run(); }
string colour = "Green"; var col = (Colours)Enum.Parse(typeOf(Colours),colour);
public static bool TryParse<T>(this Enum theEnum, string valueToParse, out T returnValue) { returnValue = default(T); int intEnumValue; if (Int32.TryParse(valueToParse, out intEnumValue)) { if (Enum.IsDefined(typeof(T), intEnumValue)) { returnValue = (T)(object)intEnumValue; return true; } } return false; }
Enum.TryParse<TEnum>( string value, [bool ignoreCase,] out TEnum result )
enum Colour { Red, Blue } private void ParseColours() { Colour aColour; if (Colour.TryParse("RED", true, out aColour)) { } if (Enum.TryParse("Red", out aColour)) { } if (Enum.TryParse<Colour>("Red", out aColour)) { } }
public static object TryParse(Type enumType, string value, out bool success) { success = Enum.IsDefined(enumType, value); if (success) { return Enum.Parse(enumType, value); } return null; }
public static TEnum? ParseEnum<TEnum>(string sEnumValue) where TEnum : struct { TEnum eTemp; TEnum? eReturn = null; if (Enum.TryParse<TEnum>(sEnumValue, out eTemp) == true) eReturn = eTemp; return eReturn; }
private static Northwind.SuppliersDataTable suppliers = null;
HttpRuntime.Cache.Insert( "key", "value", null, Cache.NoAbsoluteExpiration, Cache.NoSlidingExpiration, CacheItemPriority.NotRemovable, null);
[HttpPost] public ActionResult Edit(EmployeesViewModel viewModel) { Employee employee = GetEmployee(viewModel.EmployeeId); TryUpdateModel(employee); if (ModelState.IsValid) { SaveEmployee(employee); TempData["message"] = "Employee has been saved."; return RedirectToAction("Details", new { id = employee.EmployeeID }); } return View(viewModel); }
if (ModelState.IsValid) { } else { var errors = ModelState.Select(x => x.Value.Errors) .Where(y=>y.Count>0) .ToList(); }
if (!ModelState.IsValid) { var message = string.Join(" | ", ModelState.Values .SelectMany(v => v.Errors) .Select(e => e.ErrorMessage)); return new HttpStatusCodeResult(HttpStatusCode.BadRequest, message); }
if (!ModelState.IsValid) { var message = string.Join(" | ", ModelState.Values .SelectMany(v => v.Errors) .Select(e => e.ErrorMessage)); Exception exception = new Exception(message.ToString()); Elmah.ErrorSignal.FromCurrentContext().Raise(exception); return new HttpStatusCodeResult(HttpStatusCode.BadRequest, message); }
public class GetModelErrors { public class KeyMessages { public string Key { get; set; } public string Message { get; set; } } private readonly ModelStateDictionary _entry; public GetModelErrors(ModelStateDictionary entry) { _entry = entry; } public int Count() { return _entry.ErrorCount; } public string Exceptions(string sp = "\n") { return string.Join(sp, _entry.Values .SelectMany(v => v.Errors) .Select(e => e.Exception)); } public string Messages(string sp = "\n") { string msg = string.Empty; foreach (var item in _entry) { if (item.Value.ValidationState == ModelValidationState.Invalid) { msg += string.Join(sp, string.Join(",", item.Value.Errors.Select(i => i.ErrorMessage))); } } return msg; } public List<KeyMessages> MessagesWithKeys(string sp = "<p> ● ") { List<KeyMessages> list = new List<KeyMessages>(); foreach (var item in _entry) { if (item.Value.ValidationState == ModelValidationState.Invalid) { list.Add(new KeyMessages { Key = item.Key, Message = string.Join(null, item.Value.Errors.Select(i => sp + i.ErrorMessage)) }); } } return list; } }
Session[key] = null; - 0.82380000000000009 ms Session.Remove(key); - 59.960100000000004 ms
Session[key] = null; - 1.5368000000000002 ms Session.Remove(key); - 0.6621 ms
Session[key] = null; - 1.0432000000000001 ms Session.Remove(key); - 33.9502 ms
Session.Clear(); for (int i = 0; i < 1000; i++) Session[i.ToString()] = new object(); Stopwatch sw1 = Stopwatch.StartNew(); for (int i = 0; i < 1000; i++) Session[i.ToString()] = null; sw1.Stop(); Session.Clear(); for (int i = 0; i < 1000; i++) Session[i.ToString()] = new object(); Stopwatch sw2 = Stopwatch.StartNew(); for (int i = 0; i < 1000; i++) Session.Remove(i.ToString()); sw2.Stop();
if(Session.ContainsKey["foo"]) { return Session["foo"]; }
if(Session["foo"] != null) { return Session["foo"]; }
using System.Data.Entity; using System.Data.Entity.Core.Objects; using System.Data.Entity.Infrastructure;
<config> <add key="repositoryPath" value="../lib" /> </config>
System.Data.Entity, System.Data.Entity.Design, System.Data.Linq
<asp:repeater id="repeaterOptions" runat="server"> <headertemplate> <div class="divtable"> <h2>Other Options</h2> </headertemplate> <itemtemplate> <div class="item <%
protected void rpt_ItemDataBound(object sender, EventArgs e) { IsAlternatingRow = !IsAlternatingRow; }
.item:nth-child(odd){background-color: .item:nth-child(){background-color:
var deploymentOptions = new Microsoft.Web.Deployment.DeploymentBaseOptions();
System.TypeInitializationException occurred HResult=-2146233036 Message=The type initializer for Source=Microsoft.Web.Deployment TypeName=Microsoft.Web.Deployment.DeploymentManager StackTrace: at Microsoft.Web.Deployment.DeploymentManager.GetLinkExtensions() at Microsoft.Web.Deployment.DeploymentBaseOptions..ctor() at SimpleTest.Test.UnitTest1.TestMethod1() in f:\Source\Projects\SimpleTest.Test\UnitTest1.cs:line 12 InnerException: System.TypeInitializationException HResult=-2146233036 Message=The type initializer for Source=Microsoft.Web.Deployment TypeName=Microsoft.Web.Deployment.BuiltInTypesCache StackTrace: at Microsoft.Web.Deployment.BuiltInTypesCache.get_Factories() at Microsoft.Web.Deployment.DeploymentProviderFactoryCollection.LoadFromRegistry() at Microsoft.Web.Deployment.DeploymentProviderFactoryCollection..ctor() at Microsoft.Web.Deployment.DeploymentManager.LoadDeploymentManagerSettings() at Microsoft.Web.Deployment.DeploymentManager..cctor() InnerException: Microsoft.Web.Deployment.DeploymentException HResult=-2146233088 Message=The provider Source=Microsoft.Web.Deployment StackTrace: at Microsoft.Web.Deployment.DeploymentProviderFactory.Create(Type type) at Microsoft.Web.Deployment.BuiltInTypesCache.InspectTypesForWebDeployAttributes(IEnumerable`1 types, String dllName) at Microsoft.Web.Deployment.BuiltInTypesCache..cctor() InnerException: Microsoft.Web.Deployment.DeploymentException HResult=-2146233088 Message=The type Source=Microsoft.Web.Deployment StackTrace: at Microsoft.Web.Deployment.ReflectionHelper.CreateInstance[T](Type type, Object[] constructorArguments) at Microsoft.Web.Deployment.DeploymentProviderFactory.Create(Type type) InnerException: System.TypeInitializationException HResult=-2146233036 Message=The type initializer for Source=mscorlib TypeName=Microsoft.Data.Tools.Schema.MsDeploy.MsDeployProviderBaseProviderFactory StackTrace: at System.Runtime.Remoting.RemotingServices.AllocateUninitializedObject(RuntimeType objectType) at System.Runtime.Remoting.Activation.ActivationServices.CreateInstance(RuntimeType serverType) at System.Runtime.Remoting.Activation.ActivationServices.IsCurrentContextOK(RuntimeType serverType, Object[] props, Boolean bNewObj) at System.RuntimeTypeHandle.CreateInstance(RuntimeType type, Boolean publicOnly, Boolean noCheck, Boolean& canBeCached, RuntimeMethodHandleInternal& ctor, Boolean& bNeedSecurityCheck) at System.RuntimeType.CreateInstanceSlow(Boolean publicOnly, Boolean skipCheckThis, Boolean fillCache, StackCrawlMark& stackMark) at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean skipCheckThis, Boolean fillCache, StackCrawlMark& stackMark) at System.Activator.CreateInstance(Type type, Boolean nonPublic) at System.RuntimeType.CreateInstanceImpl(BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes, StackCrawlMark& stackMark) at System.Activator.CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes) at System.Activator.CreateInstance(Type type, Object[] args) at Microsoft.Web.Deployment.ReflectionHelper.CreateInstance[T](Type type, Object[] constructorArguments) InnerException: System.IO.FileNotFoundException HResult=-2147024894 Message=Could not load file or assembly Source=Microsoft.Data.Tools.Schema.DbSqlPackage FileName=Microsoft.Data.Tools.Schema.Sql, Version=10.3.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a FusionLog="" StackTrace: at Microsoft.Data.Tools.Schema.MsDeploy.MsDeployProviderBaseProviderFactory..cctor() InnerException:
HKLM\Software\Microsoft\IIS Extensions\msdeploy\3\extensibility HKLM\Software\Wow6432Node\Microsoft\IIS Extensions\msdeploy\3\extensibility
NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces(); String sMacAddress = string.Empty; foreach (NetworkInterface adapter in nics) { if (sMacAddress == String.Empty) { IPInterfaceProperties properties = adapter.GetIPProperties(); sMacAddress = adapter.GetPhysicalAddress().ToString(); } } string IPHost = Dns.GetHostName(); string IP = Dns.GetHostByName(IPHost).AddressList[0].ToString();
protected void GetUser_IP() { string VisitorsIPAddr = string.Empty; if (HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"] != null) { VisitorsIPAddr = HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"].ToString(); } else if (HttpContext.Current.Request.UserHostAddress.Length != 0) { VisitorsIPAddr = HttpContext.Current.Request.UserHostAddress; } uip.Text = "Your IP is: " + VisitorsIPAddr; }
public static string GetVisitorIPAddress(bool GetLan = false) { string visitorIPAddress = HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"]; if (String.IsNullOrEmpty(visitorIPAddress)) visitorIPAddress = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]; if (string.IsNullOrEmpty(visitorIPAddress)) visitorIPAddress = HttpContext.Current.Request.UserHostAddress; if (string.IsNullOrEmpty(visitorIPAddress) || visitorIPAddress.Trim() == "::1") { GetLan = true; visitorIPAddress = string.Empty; } if (GetLan && string.IsNullOrEmpty(visitorIPAddress)) { string stringHostName = Dns.GetHostName(); IPHostEntry ipHostEntries = Dns.GetHostEntry(stringHostName); IPAddress[] arrIpAddress = ipHostEntries.AddressList; try { visitorIPAddress = arrIpAddress[arrIpAddress.Length - 2].ToString(); } catch { try { visitorIPAddress = arrIpAddress[0].ToString(); } catch { try { arrIpAddress = Dns.GetHostAddresses(stringHostName); visitorIPAddress = arrIpAddress[0].ToString(); } catch { visitorIPAddress = "127.0.0.1"; } } } } return visitorIPAddress; }
using System.IO; using System.Net; public string GetUserIP() { string strIP = String.Empty; HttpRequest httpReq = HttpContext.Current.Request; if (httpReq.ServerVariables["HTTP_CLIENT_IP"] != null) { strIP = httpReq.ServerVariables["HTTP_CLIENT_IP"].ToString(); } else if (httpReq.ServerVariables["HTTP_X_FORWARDED_FOR"] != null) { strIP = httpReq.ServerVariables["HTTP_X_FORWARDED_FOR"].ToString(); } else if ( (httpReq.UserHostAddress.Length != 0) && ((httpReq.UserHostAddress != "::1") || (httpReq.UserHostAddress != "localhost")) ) { strIP = httpReq.UserHostAddress; } else { WebRequest request = WebRequest.Create("http: using (WebResponse response = request.GetResponse()) using (StreamReader sr = new StreamReader(response.GetResponseStream())) { strIP = sr.ReadToEnd(); } int i1 = strIP.IndexOf("Address: ") + 9; int i2 = strIP.LastIndexOf("</body>"); strIP = strIP.Substring(i1, i2 - i1); } return strIP; }
public static string GetUserIPAddress() { var context = System.Web.HttpContext.Current; string ip = String.Empty; if (context.Request.ServerVariables["HTTP_X_FORWARDED_FOR"] != null) ip = context.Request.ServerVariables["HTTP_X_FORWARDED_FOR"].ToString(); else if (!String.IsNullOrWhiteSpace(context.Request.UserHostAddress)) ip = context.Request.UserHostAddress; if (ip == "::1") ip = "127.0.0.1"; return ip; }
static void Main(string[] args) { HTTPGet req = new HTTPGet(); req.Request("http: string[] a = req.ResponseBody.Split( string a2 = a[1].Substring(1); string[] a3=a2.Split( string a4 = a3[0]; Console.WriteLine(a4); Console.ReadLine(); }
string ip = System.Web.HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"]; if (string.IsNullOrEmpty(ip)) { ip = System.Web.HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]; }
public static string GetIp(this HttpContextBase context) { if (context == null || context.Request == null) return string.Empty; return context.Request.ServerVariables["HTTP_X_FORWARDED_FOR"] ?? context.Request.UserHostAddress; }
/** * Get visitor */ public static string GetVisitorIp() { string ip = null; if (HttpContext.Current != null) { ip = string.IsNullOrEmpty(HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"]) ? HttpContext.Current.Request.UserHostAddress : HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"]; } if (string.IsNullOrEmpty(ip) || ip.Trim() == "::1") { var lan = Dns.GetHostEntry(Dns.GetHostName()).AddressList.FirstOrDefault(r => r.AddressFamily == AddressFamily.InterNetwork); ip = lan == null ? string.Empty : lan.ToString(); } return ip; }
private string GetClientIpaddress() { string ipAddress = string.Empty; ipAddress = HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"]; if (ipAddress == "" || ipAddress == null) { ipAddress = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"]; return ipAddress; } else { return ipAddress; } }
string cIpAddress = Request.ServerVariables["REMOTE_ADDR"];
string ipAddress = Request.ServerVariables["REMOTE_ADDR"];
string IP = HttpContext.Current.Request.Params["HTTP_CLIENT_IP"] ?? HttpContext.Current.Request.UserHostAddress;
public string GetIP() { string externalIP = ""; externalIP = (new WebClient()).DownloadString("http: externalIP = (new Regex(@"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}")).Matches(externalIP)[0].ToString(); return externalIP; }
Private string getExternalIp() { try { string externalIP; externalIP = (new WebClient()).DownloadString("http: externalIP = (new Regex(@"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}")) .Matches(externalIP)[0].ToString(); return externalIP; } catch { return null; } }
Imports System.Net Private Function GetExternalIp() As String Try Dim ExternalIP As String ExternalIP = (New WebClient()).DownloadString("http: ExternalIP = (New Regex("\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}")) _ .Matches(ExternalIP)(0).ToString() Return ExternalIP Catch Return Nothing End Try
lblmessage.Text =Request.ServerVariables["REMOTE_HOST"].ToString();
List<int> inst = new List<int>(); int index = 0; while (index < source.LastIndexOf("extract\"(me,i-have lots. of]punctuation", 0) + 39) { int src = source.IndexOf("extract\"(me,i-have lots. of]punctuation", index); inst.Add(src); index = src + 40; }
public static List<int> AllIndexesOf(this string str, string value) { if (String.IsNullOrEmpty(value)) throw new ArgumentException("the string to find may not be empty", "value"); List<int> indexes = new List<int>(); for (int index = 0;; index += value.Length) { index = str.IndexOf(value, index); if (index == -1) return indexes; indexes.Add(index); } }
List<int> indexes = "fooStringfooBar".AllIndexesOf("foo");
public static IEnumerable<int> AllIndexesOf(this string str, string value) { if (String.IsNullOrEmpty(value)) throw new ArgumentException("the string to find may not be empty", "value"); for (int index = 0;; index += value.Length) { index = str.IndexOf(value, index); if (index == -1) break; yield return index; } }
public static IEnumerable<int> GetAllIndexes(this string source, string matchString) { matchString = Regex.Escape(matchString); foreach (Match match in Regex.Matches(source, matchString)) { yield return match.Index; } }
public static IEnumerable<int> IndexOfAll(this string sourceString, string subString) { return Regex.Matches(sourceString, subString).Cast<Match>().Select(m => m.Index); }
public static int[] AllIndexesOf(string str, string substr, bool ignoreCase = false) { if (string.IsNullOrWhiteSpace(str) || string.IsNullOrWhiteSpace(substr)) { throw new ArgumentException("String or substring is not specified."); } var indexes = new List<int>(); int index = 0; while ((index = str.IndexOf(substr, index, ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal)) != -1) { indexes.Add(index++); } return indexes.ToArray(); }
public List<int> GetPositions(string source, string searchString) { List<int> ret = new List<int>(); int len = searchString.Length; int start = -len; while (true) { start = source.IndexOf(searchString, start + len); if (start == -1) { break; } else { ret.Add(start); } } return ret; }
List<int> list = GetPositions("bob is a chowder head bob bob sldfjl", "bob");
public static List<int> AllIndexesOf(this string str, string value) { if (String.IsNullOrEmpty(value)) throw new ArgumentException("the string to find may not be empty", "value"); List<int> indexes = new List<int>(); for (int index = 0;; index += value.Length) { index = str.IndexOf(value, index); if (index == -1) return indexes; indexes.Add(index); index--; } }
public static List<int> GetPositions(this string source, string searchString) { List<int> ret = new List<int>(); int len = searchString.Length; int start = -1; while (true) { start = source.IndexOf(searchString, start +1); if (start == -1) { break; } else { ret.Add(start); } } return ret; }
List<int> inst = new List<int>(); int index = 0; while (index >=0) { index = source.IndexOf("extract\"(me,i-have lots. of]punctuation", index); inst.Add(index); index++; }
public static Dictionary<string, IEnumerable<int>> GetWordsPositions(this string input, string[] Susbtrings) { Dictionary<string, IEnumerable<int>> WordsPositions = new Dictionary<string, IEnumerable<int>>(); IEnumerable<int> IndexOfAll = null; foreach (string st in Susbtrings) { IndexOfAll = Regex.Matches(input, st).Cast<Match>().Select(m => m.Index); WordsPositions.Add(st, IndexOfAll); } return WordsPositions; }
string search = "123aa456AA789bb9991AACAA"; string pattern = "AA"; Enumerable.Range(0, search.Length) .Select(index => { return new { Index = index, Length = (index + pattern.Length) > search.Length ? search.Length - index : pattern.Length }; }) .Where(searchbit => searchbit.Length == pattern.Length && pattern.Equals(search.Substring(searchbit.Index, searchbit.Length),StringComparison.OrdinalIgnoreCase)) .Select(searchbit => searchbit.Index)
string search = "123aa456AA789bb9991AACAA"; string[] patterns = new string[] { "aa", "99" }; patterns.SelectMany(pattern => Enumerable.Range(0, search.Length) .Select(index => { return new { Index = index, Length = (index + pattern.Length) > search.Length ? search.Length - index : pattern.Length }; }) .Where(searchbit => searchbit.Length == pattern.Length && pattern.Equals(search.Substring(searchbit.Index, searchbit.Length), StringComparison.OrdinalIgnoreCase)) .Select(searchbit => searchbit.Index))
public static IEnumerable<int> IndexOfAll(this string sourceString, string matchString) { matchString = Regex.Escape(matchString); return from Match match in Regex.Matches(sourceString, matchString) select match.Index; }
<asp:GridView ID="GridView1" runat="server" AllowPaging="True" AutoGenerateColumns="False" DataSourceID="ObjectDataSource1"> <Columns> <asp:BoundField DataField="appID" HeaderText="appID" SortExpression="appID" /> </Columns> </asp:GridView> <asp:ObjectDataSource ID="ObjectDataSource1" runat="server" SelectMethod="GetBookingId" TypeName="AppointmentRepository"> <SelectParameters> <asp:Parameter Name="maximumRows" Type="Int32" /> <asp:Parameter Name="startRowIndex" Type="Int32" /> </SelectParameters> </asp:ObjectDataSource>
ObjectDataSource1.SelectParameters["maximumRows"].DefaultValue = "10"; ObjectDataSource1.SelectParameters["startRowIndex"].DefaultValue = "0";
public IQueryable<tblAppointment> GetBookingId(int maximumRows, int startRowIndex) { var result = (FROM a IN dc.tblAppointments SELECT a).Skip(startRowIndex).Take(maximumRows); }
public List<Company> GetContactList(int startindex) { string path = Server.MapPath("~/contacts.xml"); XDocument xd = XDocument.Load(path); IEnumerable<Company> results = (from items in xd.Elements("Company").Elements("Contact") select new Company { Id = items.Element("ID").Value, Photo = (string)items.Element("photo").Value, Name = (string)items.Element("Name").Value, BloodGroup = (string)items.Element("Bg").Value, Dob = (string)items.Element("dob").Value, Anniversery = (string)items.Element("avd").Value, Mobile = (string)items.Element("cnum").Value, designation = (string)items.Element("desig").Value, Team = (string)items.Element("team").Value }).Skip(startindex*10).Take(10); return (List<Company>) results; }
public List<string> ListofNewsTitle() { var query = from n in db.NewsEvents orderby n.NewsDate descending select n.NewsTitle; return query.ToList(); }
gvCaseLabelsLeft.DataSource = caseLabelsList.OrderBy(c=>c.caseLabelNumber).ToList();
List<Product> products= productModel.GetProducts(start, offset);
public List<Product> GetProducts(int start, int offset) { IEnumerable<Product> query = from m in db.Products orderby m.Id descending select m; query = query.Skip(start).Take(offset); return query.ToList(); }
Error 3027: No mapping specified for the following EntitySet/AssociationSet - GroupSet, ProductSet
Error 2062: No mapping specified for instances of the EntitySet and AssociationSet in the EntityContainer myContainer.
if (Response.Cookies.Count > 0) { foreach (string s in Response.Cookies.AllKeys) { if (s == FormsAuthentication.FormsCookieName || "asp.net_sessionid".Equals(s, StringComparison.InvariantCultureIgnoreCase)) { Response.Cookies[s].Secure = true; } } }
Response.Cookies[FormsAuthentication.FormsCookieName]?.Secure = true; Response.Cookies["asp.net_sessionid"]?.Secure = true;
<system.web> <httpCookies httpOnlyCookies="true" requireSSL="true" /> </system.web>
<authentication mode="Forms"> <forms ... requireSSL="true" /> </authentication>
protected void Session_Start(Object sender, EventArgs e) { SessionStateSection sessionState = (SessionStateSection)ConfigurationManager.GetSection("system.web/sessionState"); string sidCookieName = sessionState.CookieName; if (Request.Cookies[sidCookieName] != null) { HttpCookie sidCookie = Response.Cookies[sidCookieName]; sidCookie.Value = Session.SessionID; sidCookie.HttpOnly = true; sidCookie.Secure = true; sidCookie.Path = "/"; } }
if (Request.IsSecureConnection) { if (Response.Cookies.Count > 0) { foreach (string s in Response.Cookies.AllKeys) { if (s == FormsAuthentication.FormsCookieName || s.ToLower() == "asp.net_sessionid") { Response.Cookies[s].Secure = true; } } } } else { Response.Cookies["asp.net_sessionid"].Value = string.Empty; Response.Cookies["asp.net_sessionid"].Expires = new DateTime(2018, 01, 01); }
public static string GetAbsoluteUrl(string url) { if (url.StartsWith("http: || url.StartsWith("https: { return url; } Page page = HttpContext.Current.Handler as Page; if (url.StartsWith("~/")) { url = page.ResolveUrl(url); } return "http: + url.TrimStart( }
public static string ToAbsoluteUrl(this string relativeUrl) { if (string.IsNullOrEmpty(relativeUrl)) return relativeUrl; if (HttpContext.Current == null) return relativeUrl; if (relativeUrl.StartsWith("/")) relativeUrl = relativeUrl.Insert(0, "~"); if (!relativeUrl.StartsWith("~/")) relativeUrl = relativeUrl.Insert(0, "~/"); var url = HttpContext.Current.Request.Url; var port = url.Port != 80 ? (":" + url.Port) : String.Empty; return String.Format("{0}: url.Scheme, url.Host, port, VirtualPathUtility.ToAbsolute(relativeUrl)); }
new System.Uri(Page.Request.Url, "/myRelativeUrl.aspx").AbsoluteUri
new System.Uri(Page.Request.Url, ResolveClientUrl("~/mypage.aspx")).AbsoluteUri
public static string GetAbsoluteUrl(string relativeUrl) { if (String.IsNullOrEmpty(relativeUrl)) return String.Empty; if (relativeUrl.StartsWith("http: || relativeUrl.StartsWith("https: return relativeUrl; if (HttpContext.Current == null) return relativeUrl; HttpContext context = HttpContext.Current; if (relativeUrl.StartsWith("/")) relativeUrl = relativeUrl.Insert(0, "~"); Page page = context.Handler as Page; if (page != null) { relativeUrl = page.ResolveUrl(relativeUrl); } else { if (!relativeUrl.StartsWith("~/")) relativeUrl = relativeUrl.Insert(0, "~/"); relativeUrl = VirtualPathUtility.ToAbsolute(relativeUrl); } var url = context.Request.Url; var port = url.Port != 80 ? (":" + url.Port) : String.Empty; return String.Format("{0}: url.Scheme, url.Host, port, relativeUrl); }
public static string GetAbsoluteUrl(string url) { if (String.IsNullOrEmpty(url)) { return String.Empty; } if (url.StartsWith("http: { return url; } HttpContext context = HttpContext.Current; if (url.StartsWith("~/")) { url = (context.Handler as Page).ResolveUrl(url); } string port = (context.Request.Url.Port != 80 && context.Request.Url.Port != 443) ? ":" + context.Request.Url.Port : String.Empty; return context.Request.Url.Scheme + Uri.SchemeDelimiter + context.Request.Url.Host + port + "/" + url.TrimStart( }
string absoluteUrl = UrlUtils.MapUrl("~/Contact", UrlUtils.UrlMapOptions.AlwaysSSL);
public class UrlUtils { public enum UrlMapOptions { AlwaysNonSSL, AlwaysSSL, BasedOnCurrentScheme } public static string MapUrl(string relativeUrl, UrlMapOptions option = UrlMapOptions.BasedOnCurrentScheme) { if (relativeUrl.StartsWith("http: relativeUrl.StartsWith("https: return relativeUrl; if (!relativeUrl.StartsWith("~/")) throw new Exception("The relative url must start with ~/"); UrlHelper theHelper = new UrlHelper(HttpContext.Current.Request.RequestContext); string theAbsoluteUrl = HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Authority) + theHelper.Content(relativeUrl); switch (option) { case UrlMapOptions.AlwaysNonSSL: { return theAbsoluteUrl.StartsWith("https: ? string.Format("http: : theAbsoluteUrl; } case UrlMapOptions.AlwaysSSL: { return theAbsoluteUrl.StartsWith("https: ? theAbsoluteUrl : string.Format("https: } } return theAbsoluteUrl; } }
public static string ConvertToAbsoluteUrl(string url) { if (!IsAbsoluteUrl(url)) { if (HttpContext.Current != null && HttpContext.Current.Request != null && HttpContext.Current.Handler is System.Web.UI.Page) { var originalUrl = HttpContext.Current.Request.Url; return string.Format("{0}: } throw new Exception("Invalid context!"); } else return url; } private static bool IsAbsoluteUrl(string url) { Uri result; return Uri.TryCreate(url, UriKind.Absolute, out result); }
private void BindGridView(DataSet ds) { if (ds.Tables.Count > 0) { if (ds.Tables[0].Rows.Count > 0) { GVUserReport.DataSource = ds; GVUserReport.DataBind(); btnExcelExport.Visible = true; } } } protected void btnExcelExport_Click(object sender, EventArgs e) { Response.Clear(); Response.AddHeader("content-disposition","attachment;filename=FileName.xls"); Response.Charset = ""; Response.Cache.SetCacheability(HttpCacheability.NoCache); Response.ContentType = "application/vnd.xls"; System.IO.StringWriter stringWrite = new System.IO.StringWriter(); System.Web.UI.HtmlTextWriter htmlWrite = new HtmlTextWriter(stringWrite); GVUserReport.RenderControl(htmlWrite); Response.Write(stringWrite.ToString()); Response.End(); } public override void VerifyRenderingInServerForm(Control control) { return; }
protected void Page_Load(object sender, EventArgs e) { ScriptManager scriptManager = ScriptManager.GetCurrent(this.Page); scriptManager.RegisterPostBackControl(this.btnExcelExport); }
ScriptManager scriptManager = ScriptManager.GetCurrent(this.Page); scriptManager.RegisterPostBackControl(lblbtndoc1);
Dim scriptManager As ScriptManager = scriptManager.GetCurrent(Me.Page) scriptManager.RegisterPostBackControl(Me.YourButtonNameHere)
</ContentTemplate> <Triggers> <asp:PostBackTrigger ControlID="exportLinkButton" /> </Triggers> </asp:UpdatePanel>
ScriptManager scriptManager = ScriptManager.GetCurrent(this.Page); scriptManager.RegisterPostBackControl(this.lblbtndoc1);
protected void Page_Load(object sender, EventArgs e) { ScriptManager scriptManager = ScriptManager.GetCurrent(this.Page); scriptManager.RegisterPostBackControl(this.btnExcelExport); }
<add key="ValidationSettings:UnobtrusiveValidationMode" value="None" />
ScriptManager.ScriptResourceMapping.AddDefinition("jquery", new ScriptResourceDefinition { Path = "~/scripts/jquery-1.4.1.min.js", DebugPath = "~/scripts/jquery-1.4.1.js", CdnPath = "http: CdnDebugPath = "http: });
<add key="ValidationSettings:UnobtrusiveValidationMode" value="WebForms" />
<appSettings> <add key="ValidationSettings:UnobtrusiveValidationMode" value="None" /> </appSettings>
protected void Application_Start(object sender, EventArgs e) { ScriptManager.ScriptResourceMapping.AddDefinition( "jquery", new ScriptResourceDefinition { Path = "/static/scripts/jquery-1.8.3.min.js", DebugPath = "/static/scripts/jquery-1.8.3.js", CdnPath = "http: CdnDebugPath = "http: CdnSupportsSecureConnection = true, LoadSuccessExpression = "jQuery" }); }
<asp:ScriptManager runat="server" EnableScriptGlobalization="True" EnableCdn="True"> <Scripts> <asp:ScriptReference Name="jquery" /> <asp:ScriptReference Name="WebUIValidation.js" Assembly="System.Web" /> </Scripts> </asp:ScriptManager>
<configuration> <system.web> <compilation debug="true" targetFramework="4.5"> <assemblies> <add assembly="Microsoft.JScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/> </assemblies> </compilation> <httpRuntime targetFramework="4.5"/> </system.web> <appSettings> <add key="ValidationSettings:UnobtrusiveValidationMode" value="none"/> </appSettings> </configuration>
<appSettings> <add key="ValidationSettings:UnobtrusiveValidationMode" value="None"/>
protected void Application_Start(object sender, EventArgs e) { ScriptManager.ScriptResourceMapping.AddDefinition( "jquery", new ScriptResourceDefinition { Path = "~/jquery-1.10.2.js", DebugPath = "~/jquery-1.10.2.js", CdnPath = "http: CdnDebugPath = "http: CdnSupportsSecureConnection = true, LoadSuccessExpression = "jQuery" }); }
<add key="ValidationSettings:UnobtrusiveValidationMode" value="None" />
<compilation debug="true" targetFramework="4.5" /> <httpRuntime targetFramework="4.5" />
<compilation debug="true" targetFramework="4.0" /> <httpRuntime targetFramework="4.0" />
<add key="ValidationSettings:UnobtrusiveValidationMode" value="WebForms" />
<div> <asp:TextBox runat="server" ID="username" /> <asp:RequiredFieldValidator ErrorMessage="The username is required" ControlToValidate="username" runat="server" Text=" - Required" /> </div>
<div> <asp:TextBox runat="server" ID="username" required /> </div>
System.ArgumentException was unhandled by user code Message="The conversion could not be completed because the supplied DateTime did not have the Kind property set correctly. For example, when the Kind property is DateTimeKind.Local, the source time zone must be TimeZoneInfo.Local. Parameter name: sourceTimeZone"
TimeZoneInfo zone = TimeZoneInfo.FindSystemTimeZoneById(id); DateTime now = DateTime.SpecifyKind(DateTime.Now, DateTimeKind.Local); var utc = TimeZoneInfo.ConvertTimeToUtc(now , zone );
DateTime now = DateTime.SpecifyKind(DateTime.Now, DateTimeKind.Local); var utc = TimeZoneInfo.ConvertTimeBySystemTimeZoneId(now, ZoneId, TimeZoneInfo.Utc.Id);
DateTime localServerTime = DateTime.SpecifyKind(DateTime.Now, DateTimeKind.Local); TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById(id); var usersTime = TimeZoneInfo.ConvertTime(localServerTime, info); var utc = TimeZoneInfo.ConvertTimeToUtc(usersTime, userInfo);
var info = TimeZoneInfo.FindSystemTimeZoneById(id) DateTimeOffset usersTime = TimeZoneInfo.ConvertTime(DataBaseUTCDate, TimeZoneInfo.Utc, info);
var info = TimeZoneInfo.FindSystemTimeZoneById("Tokyo Standard Time"); DateTimeOffset localServerTime = DateTimeOffset.Now; DateTimeOffset usersTime = TimeZoneInfo.ConvertTime(localServerTime, info); DateTimeOffset utc = localServerTime.ToUniversalTime(); Console.WriteLine("Local Time: {0}", localServerTime); Console.WriteLine("User Console.WriteLine("UTC: {0}", utc);
Local Time: 30.08.2009 20:48:17 +02:00 User UTC: 30.08.2009 18:48:17 +00:00
DateTime now = DateTime.SpecifyKind(DateTime.Now, DateTimeKind.Unspecified); var utc = TimeZoneInfo.ConvertTimeToUtc(now , zone);
void Main() { var startDate = DateTime.Today; var StartDateUtc = TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.SpecifyKind(startDate.Date, DateTimeKind.Unspecified), "Eastern Standard Time", "UTC"); startDate.Dump(); StartDateUtc.Dump(); }
protected void Page_Load(object sender, EventArgs e) { Session["UserName"] = "Pandiya"; } [WebMethod] public static string GetName() { string s = Session["UserName"].ToString(); return s; }
HttpContext.Current.Session["UserName"].ToString();
string s = (string)HttpContext.Current.Session["UserName"];
string var1 = (string)HttpContext.Current.Cache["Var1"];
public static class SomeLibraryClass { public static string SomeLibraryFunction(HttpSessionState session) { ... } }
[WebMethod] public static string GetName() { return SomeLibraryClass.SomeLibraryFunction(HttpContext.Current.Session); }
var obj = myList.FirstOrDefault(x => x.MyProperty == myValue); if (obj != null) obj.OtherProperty = newValue;
var dict = myList.ToDictionary(x => x.MyProperty); MyObject found; if (dict.TryGetValue(myValue, out found)) found.OtherProperty = newValue;
struct MyStruct { public int TheValue { get; set; } }
List<MyStruct> coll = new List<MyStruct> { new MyStruct {TheValue = 10}, new MyStruct {TheValue = 1}, new MyStruct {TheValue = 145}, }; var found = coll.FirstOrDefault(c => c.TheValue == 1); found.TheValue = 12; foreach (var myStruct in coll) { Console.WriteLine(myStruct.TheValue); } Console.ReadLine();
foreach(MyObject obj in myList) { if(obj.prop == someValue) { obj.otherProp = newValue; break; } }
_lstProductDetail.Where(S => S.ProductID == "") .Select(S => { S.ProductPcs = "Update Value" ; return S; }).ToList();
var itemIndex = listObject.FindIndex(x => x == SomeSpecialCondition()); var item = listObject.ElementAt(itemIndex); listObject.RemoveAt(itemIndex); item.SomePropYouWantToChange = "yourNewValue"; listObject.Insert(itemIndex, item);
if (product != null) { var products = Repository.Products; var indexOf = products.IndexOf(products.Find(p => p.Id == product.Id)); Repository.Products[indexOf] = product; Repository.Products[indexOf].prop = product.prop; }
public static class Timer { private static DateTime _startTime; private static DateTime _stopTime; public static decimal Duration() { TimeSpan duration = _stopTime - _startTime; return duration.Milliseconds; } public static void Start() { _startTime = DateTime.Now; } public static void Stop() { _stopTime = DateTime.Now; } }
Timer timer = new Timer(); timer.Start(); timer.Stop(); decimal duration = timer.Duration();
Stopwatch sw = Stopwatch.StartNew(); sw.Stop(); TimeSpan duration = sw.Elapsed;
public class Foo { public string Bar { get; set; } } public ActionResult Save() { var myFoo = new Foo(); TryUpdateModel(myFoo); }
public ActionResult Update(int id) { var service = new ServiceClass(); var record = service.LoadModel(id); if (!TryUpdateModel(record)) { return View(); } service.SaveModel(record); return View("Success"); }
public ActionResult Save(HttpFormCollection formCollection) { var saveModel = new SaveModel(); var validModel = TryUpdateModel(_saveModel, formCollection); return validModel ? Save(saveModel) : InvalidSaveModel(saveModel); }
string template = "Hello @Model.Name! Welcome to Razor!"; string result = Razor.Parse(template, new { Name = "World" });
var razor = new RazorFormat { VirtualPathProvider = new InMemoryVirtualPathProvider(new BasicAppHost()), EnableLiveReload = false, }.Init(); var page = razor.CreatePage("Hello @Model.Name! Welcome to Razor!"); var html = razor.RenderToHtml(page, new { Name = "World" }); html.Print();
<system.webServer> <validation validateIntegratedModeConfiguration="false" /> <modules runAllManagedModulesForAllRequests="true" /> <security> <requestFiltering> <requestLimits maxAllowedContentLength="1048576" /> </requestFiltering> </security> </system.webServer>
<configuration> <system.web> <httpRuntime maxRequestLength="1048576" /> </system.web> </configuration>
<configuration> <system.webServer> <security> <requestFiltering> <requestLimits> <headerLimits> <add header="Content-type" sizeLimit="100" /> </headerLimits> </requestLimits> </requestFiltering> </security> </system.webServer> </configuration>
<sectionGroup name="requestfiltering"> <section name="requestlimits" maxAllowedContentLength ="40000000" /> </sectionGroup>
<section name="requestfiltering" overrideModeDefault="Deny" />
NameValueCollection filtered = new NameValueCollection(request.QueryString); filtered.Remove("Language");
public static string GetQueryStringWithOutParameter(string parameter) { var nameValueCollection = System.Web.HttpUtility.ParseQueryString(HttpContext.Current.Request.QueryString.ToString()); nameValueCollection.Remove(parameter); string url = HttpContext.Current.Request.Path + "?" + nameValueCollection; return url; }
var hebe = new HttpValueCollection(); hebe.Add(HttpUtility.ParseQueryString(Request.Url.Query)); if (!string.IsNullOrEmpty(hebe["Language"])) hebe.Remove("Language"); Response.Redirect(Request.Url.AbsolutePath + "?" + hebe );
PropertyInfo isreadonly = typeof(System.Collections.Specialized.NameValueCollection).GetProperty("IsReadOnly", BindingFlags.Instance | BindingFlags.NonPublic); isreadonly.SetValue(this.Request.QueryString, false, null); this.Request.QueryString.Remove("foo"); this.Request.QueryString.Set("bar", "123"); isreadonly.SetValue(this.Request.QueryString, true, null);
PropertyInfo isreadonly =typeof(System.Collections.Specialized.NameValueCollection).GetProperty("IsReadOnly", BindingFlags.Instance | BindingFlags.NonPublic); isreadonly.SetValue(this.Request.QueryString, false, null); this.Request.QueryString.Remove("foo");
var queryParams = System.Web.HttpUtility.ParseQueryString(HttpContext.Request.QueryString.ToString()); queryParams.Remove("param_to_remove"); string queryString = string.Join("&", queryParams.Cast<string>().Select(e => e + "=" + queryParams[e]));
int pos = queryString.ToLower().IndexOf("parameter="); if (pos >= 0) { int pos_end = queryString.IndexOf("&", pos); if (pos_end >= 0) queryString = queryString.Substring(0, pos) + queryString.Substring(pos_end + 1); else if (pos == 0) queryString = ""; else queryString=queryString.Substring(0, pos - 1); }
string queryString = "Default.aspx?Agent=10&Language=2"; string parameterToRemove="Language"; string regex=string.Format("(&{0}=[^&\s]+|{0}=[^&\s]+&?)",parameterToRemove); string finalQS = Regex.Replace(queryString, regex, "");
string url = Request.Url.AbsoluteUri.Replace("&ok=1", ""); url = Request.Url.AbsoluteUri.Replace("?ok=1", ""); Response.Write("<script>window.location =
foreach (Assembly a in AppDomain.CurrentDomain.GetAssemblies()) { foreach (Type t in a.GetTypes()) { } }
IEnumerable<Type> types = from a in AppDomain.CurrentDomain.GetAssemblies() from t in a.GetTypes() select t; foreach(Type t in types) { ... }
private static Type FindType(string fullName) { return AppDomain.CurrentDomain.GetAssemblies() .Where(a => !a.IsDynamic) .SelectMany(a => a.GetTypes()) .FirstOrDefault(t => t.FullName.Equals(fullName)); }
public static IEnumerable<Type> FindTypes(Func<Type, bool> predicate) { if (predicate == null) throw new ArgumentNullException(nameof(predicate)); foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies()) { if (!assembly.IsDynamic) { Type[] exportedTypes = null; try { exportedTypes = assembly.GetExportedTypes(); } catch (ReflectionTypeLoadException e) { exportedTypes = e.Types; } if (exportedTypes != null) { foreach (var type in exportedTypes) { if (predicate(type)) yield return type; } } } } }
private const string AspNetNamespace = "ASP"; private static Assembly getApplicationAssembly() { Assembly ass = Assembly.GetEntryAssembly(); HttpContext ctx = HttpContext.Current; if (ctx != null) ass = getWebApplicationAssembly(ctx); return ass ?? (Assembly.GetExecutingAssembly()); } private static Assembly getWebApplicationAssembly(HttpContext context) { Guard.AgainstNullArgument(context); object app = context.ApplicationInstance; if (app == null) return null; Type type = app.GetType(); while (type != null && type != typeof(object) && type.Namespace == AspNetNamespace) type = type.BaseType; return type.Assembly; }
using System.Reflection; using System.Runtime.CompilerServices; ... [assembly: AssemblyVersion("1.0.*")] ...
protected string GetApplicationVersion() { return System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString(); }
public static Version GetHttpApplicationVersion() { Type lBase = typeof(HttpApplication); Type lType = BuildManager.GetGlobalAsaxType(); if (lBase.IsAssignableFrom(lType)) { while (lType.BaseType != lBase) { lType = lType.BaseType; } return lType.Assembly.GetName().Version; } else { return null; } }
var instance = HttpContext.Current.ApplicationInstance; Assembly asm = instance.GetType().BaseType.Assembly; System.Version asmVersion = asm.GetName().Version;
var version = Assembly.GetAssembly(Page.GetType().BaseType) .GetName() .Version;
Version version = new Version(Application.ProductVersion); string message = version.ToString();
public static string GetSystemVersion(HttpServerUtility server) { System.Xml.XmlDocument doc = new System.Xml.XmlDocument(); doc.Load(server.MapPath("~/web.config")); System.Xml.XmlNamespaceManager ns = new System.Xml.XmlNamespaceManager(doc.NameTable); ns.AddNamespace("bla", "http: System.Xml.XmlNode node = doc.SelectSingleNode("/bla:configuration/bla:system.web/bla:authentication/bla:forms[@name]", ns); string projectName = ""; if (node != null && node.Attributes != null && node.Attributes.GetNamedItem("name") != null) projectName = node.Attributes.GetNamedItem("name").Value; else return ""; Assembly assembly = Assembly.Load(projectName); return assembly.GetName().Version.ToString(); }
Type current, last; current = Page.GetType(); do { last = current; current = current.BaseType; } while (current != null && current != typeof(System.Web.UI.Page)); return last;
typeof(MyHttpApplication).Assembly.GetName().Version
typeof(DynamiclyGeneratedTypeFromWebApp).BaseType.Assembly.GetName().Version
json.SerializerSettings.PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.Objects;
json.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore;
class Employee { public string Name { get; set; } public List<Employee> Subordinates { get; set; } }
Employee angela = new Employee { Name = "Angela Anderson" }; Employee bob = new Employee { Name = "Bob Brown" }; Employee charles = new Employee { Name = "Charles Cooper" }; angela.Subordinates = new List<Employee> { bob, charles }; List<Employee> employees = new List<Employee> { angela, bob, charles };
string json = JsonConvert.SerializeObject(employees, Formatting.Indented); Console.WriteLine(json);
[ { "Name": "Angela Anderson", "Subordinates": [ { "Name": "Bob Brown", "Subordinates": null }, { "Name": "Charles Cooper", "Subordinates": null } ] }, { "Name": "Bob Brown", "Subordinates": null }, { "Name": "Charles Cooper", "Subordinates": null } ]
class Employee { public string Name { get; set; } public Employee Supervisor { get; set; } public List<Employee> Subordinates { get; set; } }
Employee angela = new Employee { Name = "Angela Anderson" }; Employee bob = new Employee { Name = "Bob Brown" }; Employee charles = new Employee { Name = "Charles Cooper" }; angela.Subordinates = new List<Employee> { bob, charles }; bob.Supervisor = angela; charles.Supervisor = angela; List<Employee> employees = new List<Employee> { angela, bob, charles };
JsonSerializerSettings settings = new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore, Formatting = Formatting.Indented }; string json = JsonConvert.SerializeObject(employees, settings);
[ { "Name": "Angela Anderson", "Supervisor": null, "Subordinates": [ { "Name": "Bob Brown", "Subordinates": null }, { "Name": "Charles Cooper", "Subordinates": null } ] }, { "Name": "Bob Brown", "Supervisor": { "Name": "Angela Anderson", "Supervisor": null, "Subordinates": [ { "Name": "Charles Cooper", "Subordinates": null } ] }, "Subordinates": null }, { "Name": "Charles Cooper", "Supervisor": { "Name": "Angela Anderson", "Supervisor": null, "Subordinates": [ { "Name": "Bob Brown", "Subordinates": null } ] }, "Subordinates": null } ]
JsonSerializerSettings settings = new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects, Formatting = Formatting.Indented }; string json = JsonConvert.SerializeObject(employees, settings);
[ { "$id": "1", "Name": "Angela Anderson", "Supervisor": null, "Subordinates": [ { "$id": "2", "Name": "Bob Brown", "Supervisor": { "$ref": "1" }, "Subordinates": null }, { "$id": "3", "Name": "Charles Cooper", "Supervisor": { "$ref": "1" }, "Subordinates": null } ] }, { "$ref": "2" }, { "$ref": "3" } ]
<asp:Button ID="pagerLeftButton" runat="server" OnClientClick="disable(this)" onclick="pager_Left_Click" Text="<" />
protected void pager_Left_Click(object sender, EventArgs e) { } protected void pager_Right_Click(object sender, EventArgs e) { }
<asp:Button runat="server" ID="BtnSubmit" OnClientClick="this.disabled = true; this.value =
<input type="button" name="BtnSubmit" onclick="this.disabled = true; this.value =
OnClientClick="return ValidateSearch();" OnClientClick="if(ValidateSearch()) return true;" OnClientClick="ValidateSearch();"
<asp:Button ID="keywordSearch" runat="server" Text="Search" TabIndex="1" OnClick="keywordSearch_Click" OnClientClick="if (!ValidateSearch()) { return false;};" />
OnClientClick="(function(button) { setTimeout(function () { if (Page_IsValid) button.disabled = true; }, 0); })(this);"
OnClientClick="disable(this);" function disable(button) { setTimeout(function () { if (Page_IsValid) button.disabled = true; }, 0); }
OnClick="Button1_Click" protected void Button1_Click(object sender, EventArgs e) { ((Button)sender).Enabled = false; }
for (i = 0; i < Page_Validators.length; i++) { ValidatorValidate(Page_Validators[i]); if (Page_Validators[i].isvalid == false) return false; } btn.disabled = btn.value = return true; }
public string generateID(string url_add) { long i = 1; foreach (byte b in Guid.NewGuid().ToByteArray()) { i *= ((int)b + 1); } string number = String.Format("{0:d9}", (DateTime.Now.Ticks / 10) % 1000000000); return number; }
public string generateID() { return Guid.NewGuid().ToString("N"); }
public string generateID(string sourceUrl) { return string.Format("{0}_{1:N}", sourceUrl, Guid.NewGuid()); }
Guid guid = Guid.NewGuid(); string str = guid.ToString();
StringBuilder builder = new StringBuilder(); Enumerable .Range(65, 26) .Select(e => ((char)e).ToString()) .Concat(Enumerable.Range(97, 26).Select(e => ((char)e).ToString())) .Concat(Enumerable.Range(0, 10).Select(e => e.ToString())) .OrderBy(e => Guid.NewGuid()) .Take(11) .ToList().ForEach(e => builder.Append(e)); string id = builder.ToString();
SHA256 shaAlgorithm = new SHA256Managed(); byte[] shaDigest = shaAlgorithm.ComputeHash(ASCIIEncoding.ASCII.GetBytes(url)); return BitConverter.ToString(shaDigest);
var ticks = DateTime.Now.Ticks; var guid = Guid.NewGuid().ToString(); var uniqueSessionId = ticks.ToString() + var datetime = new DateTime(ticks); var datetimenow = DateTime.Now;
var id64Generator = new Id64Generator(); public string generateID(string sourceUrl) { return string.Format("{0}_{1}", sourceUrl, id64Generator.GenerateId()); }
var id64Generator = new Id64Generator(0); var id64Generator = new Id64Generator(1); var id64Generator = new Id64Generator(10);
List<string> myList = new List<string>(); Session["var"] = myList;
HttpContext.Current.Session.Add("currentUser", appUser);
(AppUser) HttpContext.Current.Session["currentUser"]
List<Cat> cats = new List<Cat> { new Cat(){ Name = "Sylvester", Age=8 }, new Cat(){ Name = "Whiskers", Age=2 }, new Cat(){ Name = "Sasha", Age=14 } }; Session["data"] = cats; foreach (Cat c in cats) System.Diagnostics.Debug.WriteLine("Cats>>" + c.Name);
YourListType ListName = (List<YourListType>)Session["SessionName"];
public static class WebApiConfig { public static void Register(HttpConfiguration config) { config.MapHttpAttributeRoutes(); config.Routes.MapHttpRoute( name: "DefaultApi", routeTemplate: "api/{controller}/{id}", defaults: new { id = RouteParameter.Optional }, constraints: new { id = @"^[0-9]+$" } ); config.Routes.MapHttpRoute( name: "ApiWithActionAndName", routeTemplate: "api/{controller}/{action}/{name}", defaults: null, constraints: new { name = @"^[a-z]+$" } ); config.Routes.MapHttpRoute( name: "ApiWithAction", routeTemplate: "api/{controller}/{action}", defaults: new { action = "Get" } ); } }
public class RouteConfig { public static void RegisterRoutes(RouteCollection routes) { routes.IgnoreRoute("{resource}.axd/{*pathInfo}"); routes.IgnoreRoute(""); routes.IgnoreRoute("partials/*"); routes.IgnoreRoute("assets/*"); } }
public class WebApiApplication : HttpApplication { protected void Application_Start() { AreaRegistration.RegisterAllAreas(); GlobalConfiguration.Configure(WebApiConfig.Register); FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters); RouteConfig.RegisterRoutes(RouteTable.Routes); var formatters = GlobalConfiguration.Configuration.Formatters; formatters.Remove(formatters.XmlFormatter); GlobalConfiguration.Configuration.Formatters.JsonFormatter.SerializerSettings = new JsonSerializerSettings { Formatting = Formatting.Indented, PreserveReferencesHandling = PreserveReferencesHandling.None, ReferenceLoopHandling = ReferenceLoopHandling.Ignore, }; } }
routes.MapPageRoute("Default", "{*anything}", "~/index.html");
<system.web> ... <compilation debug="true" targetFramework="4.5.1"> <buildProviders> ... <add extension=".html" type="System.Web.Compilation.PageBuildProvider" /> <!-- Allows for routing everything to ~/index.html --> ... </buildProviders> </compilation> ... </system.web>
routes.MapRoute( name: "Default", url: "{*anything}", defaults: new { controller = "Home", action = "Index" } );
<system.webServer> <httpErrors errorMode="Custom"> <remove statusCode="404" subStatusCode="-1"/> <error statusCode="404" prefixLanguageFilePath="" path="/index.cshtml" responseMode="ExecuteURL"/> </httpErrors> </system.webServer>
<system.webServer> <rewrite> <rules> <rule name="AngularJS" stopProcessing="true"> <match url="[a-zA-Z]*" /> <conditions logicalGrouping="MatchAll"> <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" /> <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" /> <add input="{REQUEST_URI}" pattern="^/(api)" negate="true" /> </conditions> <action type="Rewrite" url="/" /> </rule> </rules> </rewrite> ...
GlobalConfiguration.Configure(config => { config.MapHttpAttributeRoutes(); }); RouteTable.Routes.Ignore("api/{*anything}"); RouteTable.Routes.MapPageRoute("AnythingNonApi", "{*url}", "~/wwwroot/index.html");
public class GiftCertificateModel { public int GiftCerticiateId {get;set;} public string Code {get;set;} public decimal Amount {get;set;} public DateTime ExpirationDate {get;set;} public bool IsValidCode(){} } public class GiftCertificateRepository { public GiftCertificateModel GetById(int GiftCertificateId) { } public List<GiftCertificateModel> GetMany() { } public void Save(GiftCertificateModel gc) { } public string GetNewUniqueCode() { public GiftCertificateModel CreateNew() { GiftCertificateModel gc = new GiftCertificateModel(); gc.Code = GetNewUniqueCode(); return gc; } }
public class GiftCertificateService() { public void Redeem(string code, decimal amount) { GiftCertificate gc = new GiftCertificate(); if (!gc.IsValidCode(code)) { throw new ArgumentException("Invalid code"); } if (amount <= 0 || GetRemainingBalance(code) < amount) { throw new ArgumentException("Invalid amount"); } GiftCertificateRepository gcRepo = new GiftCertificateRepository(); gcRepo.Redeem(code, amount); } public decimal GetRemainingBalance(string code) { GiftCertificate gc = new GiftCertificate(); if (!gc.IsValidCode(code)) { throw new ArgumentException("Invalid code"); } GiftCertificateRepository gcRepo = new GiftCertificateRepository(); gcRepo.GetRemainingBalance(code); } public SaveNewGC(GiftCertificate gc) { } }
string redeemCode = RedeemCodeTextBox.Text; GiftCertificateService gcService = new GiftCertificateService(); GiftCertificate gc = new GiftCertificate(); if (!gc.IsValid(redeemCode)) { } if (gcService.GetRemainingBalance(redeemCode) < amount) { } gcService.Redeem(code,amount);
GiftCertificateService gcService = new GiftCertificateService(); GiftCertificate gc = new GiftCertificate(); if (!gc.IsValidExpDate(inputExpDate)) { } gc.Code = gcService.GetNewCode(); gc.Amount = 10M; gc.ExpirationDate = inputExpDate; gcService.SaveNewGC(gc);
GiftCertificateModel.CreateGiftCertificate(int GiftCerticiateId, string Code, decimal Amount, DateTime ExpirationDate)
giftCertificateService.GetEntity(giftCertificateId); (which in turn is just a call to the giftCertificateRepository.GetEntity(giftCertificateId) giftCertificateService.Redeem(giftCertificate);
public class GiftCertificateModel { } public class GiftCertificateRepository { Since essence of Repository is to have common CRUD logic at one place soyou don You will create entity specific repository in rare cases, also by deriving base repository. } public class GiftCertificateService() { }
public class GiftCertificateService { public void CreateCertificate() { GiftCertificateRepository gcRepo = new GiftCertificateRepository(); GiftCertificateModel gc = gcRepo.CreateNew(); gc.Amount = 10.00M; gc.ExpirationDate = DateTime.Today.AddMonths(12); gc.Notes = "Test GC"; gcRepo.Save(gc); } }
HttpWebRequest req = (HttpWebRequest)WebRequest.Create(url); req.Method = "GET"; req.AllowAutoRedirect = true; ServicePointManager.ServerCertificateValidationCallback = delegate { return true; }; WebResponse respon = req.GetResponse(); Stream res = respon.GetResponseStream(); string ret = ""; byte[] buffer = new byte[1048]; int read = 0; while ((read = res.Read(buffer, 0, buffer.Length)) > 0) { ret += Encoding.ASCII.GetString(buffer, 0, read); } return ret;
ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12 | SecurityProtocolType.Ssl3;
HttpWebRequest req = (HttpWebRequest)WebRequest.Create(url); req.Method = "GET"; ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3; ServicePointManager.ServerCertificateValidationCallback = delegate { return true; }; WebResponse respon = req.GetResponse(); Stream res = respon.GetResponseStream(); string ret = ""; byte[] buffer = new byte[1048]; int read = 0; while ((read = res.Read(buffer, 0, buffer.Length)) > 0) { Console.Write(Encoding.ASCII.GetString(buffer, 0, read)); ret += Encoding.ASCII.GetString(buffer, 0, read); } return ret;
[System.Net.ServicePointManager]::SecurityProtocol = ` [System.Net.SecurityProtocolType]::Tls11 -bor [System.Net.SecurityProtocolType]::Tls12 -bor ` [System.Net.SecurityProtocolType]::Tls -bor ` [System.Net.SecurityProtocolType]::Ssl3
[System.Net.ServicePointManager]::SecurityProtocol = @("Tls12","Tls11","Tls","Ssl3")
using System; using System.Collections.Generic; using System.Linq; using System.Security.Cryptography; using System.Security.Cryptography.X509Certificates; using System.Text; namespace MyNamespace { public static class SecurityShower { public static void ShowHttpWebRequest(System.Net.HttpWebRequest hwr) { StringBuilder sb = new StringBuilder(); if (null != hwr) { sb.Append("-----------------------------------------------HttpWebRequest" + System.Environment.NewLine); sb.Append(string.Format("HttpWebRequest.Address.AbsolutePath= sb.Append(string.Format("HttpWebRequest.Address.AbsoluteUri= sb.Append(string.Format("HttpWebRequest.Address= sb.Append(string.Format("HttpWebRequest.RequestUri.AbsolutePath= sb.Append(string.Format("HttpWebRequest.RequestUri.AbsoluteUri= sb.Append(string.Format("HttpWebRequest.RequestUri= foreach (X509Certificate cert in hwr.ClientCertificates) { sb.Append("START*************************************************"); ShowX509Certificate(sb, cert); sb.Append("END*************************************************"); } } string result = sb.ToString(); Console.WriteLine(result); } public static void ShowCertAndChain(X509Certificate2 cert) { X509Chain chain = new X509Chain(); chain.ChainPolicy.RevocationFlag = X509RevocationFlag.EntireChain; chain.ChainPolicy.RevocationMode = X509RevocationMode.Offline; chain.ChainPolicy.VerificationFlags = X509VerificationFlags.AllFlags; chain.Build(cert); ShowCertAndChain(cert, chain); } public static void ShowCertAndChain(X509Certificate cert, X509Chain chain) { StringBuilder sb = new StringBuilder(); if (null != cert) { ShowX509Certificate(sb, cert); } if (null != chain) { sb.Append("-X509Chain(Start)-" + System.Environment.NewLine); foreach (X509ChainStatus cstat in chain.ChainStatus) { sb.Append(string.Format("X509ChainStatus:: } X509ChainElementCollection ces = chain.ChainElements; ShowX509ChainElementCollection(sb, ces); sb.Append("-X509Chain(End)-" + System.Environment.NewLine); } string result = sb.ToString(); Console.WriteLine(result); } private static void ShowX509Extension(StringBuilder sb, int x509ExtensionCount, X509Extension ext) { sb.Append(string.Empty + System.Environment.NewLine); sb.Append(string.Format("--------X509ExtensionNumber(Start):{0}", x509ExtensionCount) + System.Environment.NewLine); sb.Append(string.Format("X509Extension.Critical= AsnEncodedData asndata = new AsnEncodedData(ext.Oid, ext.RawData); sb.Append(string.Format("Extension type: {0}", ext.Oid.FriendlyName) + System.Environment.NewLine); sb.Append(string.Format("Oid value: {0}", asndata.Oid.Value) + System.Environment.NewLine); sb.Append(string.Format("Raw data length: {0} {1}", asndata.RawData.Length, Environment.NewLine) + System.Environment.NewLine); sb.Append(asndata.Format(true) + System.Environment.NewLine); X509BasicConstraintsExtension basicEx = ext as X509BasicConstraintsExtension; if (null != basicEx) { sb.Append("-X509BasicConstraintsExtension-" + System.Environment.NewLine); sb.Append(string.Format("X509Extension.X509BasicConstraintsExtension.CertificateAuthority= } X509EnhancedKeyUsageExtension keyEx = ext as X509EnhancedKeyUsageExtension; if (null != keyEx) { sb.Append("-X509EnhancedKeyUsageExtension-" + System.Environment.NewLine); sb.Append(string.Format("X509Extension.X509EnhancedKeyUsageExtension.EnhancedKeyUsages= foreach (Oid oi in keyEx.EnhancedKeyUsages) { sb.Append(string.Format("------------EnhancedKeyUsages.Oid.FriendlyName= sb.Append(string.Format("------------EnhancedKeyUsages.Oid.Value= } } X509KeyUsageExtension usageEx = ext as X509KeyUsageExtension; if (null != usageEx) { sb.Append("-X509KeyUsageExtension-" + System.Environment.NewLine); sb.Append(string.Format("X509Extension.X509KeyUsageExtension.KeyUsages= sb.Append(string.Format("X509KeyUsageExtension.KeyUsages.X509KeyUsageFlags.CrlSign= sb.Append(string.Format("X509KeyUsageExtension.KeyUsages.X509KeyUsageFlags.DataEncipherment= sb.Append(string.Format("X509KeyUsageExtension.KeyUsages.X509KeyUsageFlags.DecipherOnly= sb.Append(string.Format("X509KeyUsageExtension.KeyUsages.X509KeyUsageFlags.DigitalSignature= sb.Append(string.Format("X509KeyUsageExtension.KeyUsages.X509KeyUsageFlags.EncipherOnly= sb.Append(string.Format("X509KeyUsageExtension.KeyUsages.X509KeyUsageFlags.KeyAgreement= sb.Append(string.Format("X509KeyUsageExtension.KeyUsages.X509KeyUsageFlags.KeyCertSign= sb.Append(string.Format("X509KeyUsageExtension.KeyUsages.X509KeyUsageFlags.KeyEncipherment= sb.Append(string.Format("X509KeyUsageExtension.KeyUsages.X509KeyUsageFlags.None= sb.Append(string.Format("X509KeyUsageExtension.KeyUsages.X509KeyUsageFlags.NonRepudiation= } X509SubjectKeyIdentifierExtension skIdEx = ext as X509SubjectKeyIdentifierExtension; if (null != skIdEx) { sb.Append("-X509SubjectKeyIdentifierExtension-" + System.Environment.NewLine); sb.Append(string.Format("X509Extension.X509SubjectKeyIdentifierExtension.Oid= sb.Append(string.Format("X509Extension.X509SubjectKeyIdentifierExtension.SubjectKeyIdentifier= } sb.Append(string.Format("--------X509ExtensionNumber(End):{0}", x509ExtensionCount) + System.Environment.NewLine); } private static void ShowX509Extensions(StringBuilder sb, string cert2SubjectName, X509ExtensionCollection extColl) { int x509ExtensionCount = 0; sb.Append(string.Format("--------ShowX509Extensions(Start):for:{0}", cert2SubjectName) + System.Environment.NewLine); foreach (X509Extension ext in extColl) { ShowX509Extension(sb, ++x509ExtensionCount, ext); } sb.Append(string.Format("--------ShowX509Extensions(End):for:{0}", cert2SubjectName) + System.Environment.NewLine); } private static void ShowX509Certificate2(StringBuilder sb, X509Certificate2 cert2) { if (null != cert2) { sb.Append(string.Format("X509Certificate2.SubjectName.Name= sb.Append(string.Format("X509Certificate2.Subject= sb.Append(string.Format("X509Certificate2.Thumbprint= sb.Append(string.Format("X509Certificate2.HasPrivateKey= sb.Append(string.Format("X509Certificate2.Version= sb.Append(string.Format("X509Certificate2.NotBefore= sb.Append(string.Format("X509Certificate2.NotAfter= sb.Append(string.Format("X509Certificate2.PublicKey.Key.KeySize= ShowX509Extensions(sb, cert2.Subject, cert2.Extensions); } } private static void ShowX509ChainElementCollection(StringBuilder sb, X509ChainElementCollection ces) { int x509ChainElementCount = 0; foreach (X509ChainElement ce in ces) { sb.Append(string.Empty + System.Environment.NewLine); sb.Append(string.Format("----X509ChainElementNumber:{0}", ++x509ChainElementCount) + System.Environment.NewLine); sb.Append(string.Format("X509ChainElement.Cert.SubjectName.Name= sb.Append(string.Format("X509ChainElement.Cert.Issuer= sb.Append(string.Format("X509ChainElement.Cert.Thumbprint= sb.Append(string.Format("X509ChainElement.Cert.HasPrivateKey= X509Certificate2 cert2 = ce.Certificate as X509Certificate2; ShowX509Certificate2(sb, cert2); ShowX509Extensions(sb, cert2.Subject, ce.Certificate.Extensions); } } private static void ShowX509Certificate(StringBuilder sb, X509Certificate cert) { sb.Append("-----------------------------------------------" + System.Environment.NewLine); sb.Append(string.Format("Cert.Subject= sb.Append(string.Format("Cert.Issuer= sb.Append(string.Format("Cert.GetPublicKey().Length= X509Certificate2 cert2 = cert as X509Certificate2; ShowX509Certificate2(sb, cert2); } } }
var password = ConfigurationManager.AppSettings.Get(Common.SVC_PWD); bool isSuccess = LogonUser( @"my_svc_acct", "my.domain.net", password, LOGON32_LOGON_NEW_CREDENTIALS, LOGON32_PROVIDER_DEFAULT, ref token );
public async Task Invoke(HttpContext context) { var authHeader = context.Request.Headers.Get("Authorization"); if (authHeader != null && authHeader.StartsWith("basic", StringComparison.OrdinalIgnoreCase)) { var token = authHeader.Substring("Basic ".Length).Trim(); System.Console.WriteLine(token); var credentialstring = Encoding.UTF8.GetString(Convert.FromBase64String(token)); var credentials = credentialstring.Split( if(credentials[0] == "admin" && credentials[1] == "admin") { var claims = new[] { new Claim("name", credentials[0]), new Claim(ClaimTypes.Role, "Admin") }; var identity = new ClaimsIdentity(claims, "Basic"); context.User = new ClaimsPrincipal(identity); } } else { context.Response.StatusCode = 401; context.Response.Headers.Set("WWW-Authenticate", "Basic realm=\"dotnetthoughts.net\""); } await _next(context); }
public class AuthenticationMiddleware { private readonly RequestDelegate _next; public AuthenticationMiddleware(RequestDelegate next) { _next = next; } public async Task Invoke(HttpContext context) { string authHeader = context.Request.Headers["Authorization"]; if (authHeader != null && authHeader.StartsWith("Basic")) { string encodedUsernamePassword = authHeader.Substring("Basic ".Length).Trim(); Encoding encoding = Encoding.GetEncoding("iso-8859-1"); string usernamePassword = encoding.GetString(Convert.FromBase64String(encodedUsernamePassword)); int seperatorIndex = usernamePassword.IndexOf( var username = usernamePassword.Substring(0, seperatorIndex); var password = usernamePassword.Substring(seperatorIndex + 1); if(username == "test" && password == "test" ) { await _next.Invoke(context); } else { context.Response.StatusCode = 401; return; } } else { context.Response.StatusCode = 401; return; } } }
public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory) { loggerFactory.AddConsole(Configuration.GetSection("Logging")); loggerFactory.AddDebug(); app.UseMiddleware<AuthenticationMiddleware>(); app.UseMvc(); }
app.UseWhen(x => (x.Request.Path.StartsWithSegments("/api", StringComparison.OrdinalIgnoreCase)), builder => { builder.UseMiddleware<AuthenticationMiddleware>(); });
$ dotnet add package System.IdentityModel.Tokens.Jwt
public class TokenController : Controller { [Route("/token")] [HttpPost] public IActionResult Create(string username, string password) { if (IsValidUserAndPasswordCombination(username, password)) return new ObjectResult(GenerateToken(username)); return BadRequest(); } private bool IsValidUserAndPasswordCombination(string username, string password) { return !string.IsNullOrEmpty(username) && username == password; } private string GenerateToken(string username) { var claims = new Claim[] { new Claim(ClaimTypes.Name, username), new Claim(JwtRegisteredClaimNames.Nbf, new DateTimeOffset(DateTime.Now).ToUnixTimeSeconds().ToString()), new Claim(JwtRegisteredClaimNames.Exp, new DateTimeOffset(DateTime.Now.AddDays(1)).ToUnixTimeSeconds().ToString()), }; var token = new JwtSecurityToken( new JwtHeader(new SigningCredentials( new SymmetricSecurityKey(Encoding.UTF8.GetBytes("H38DLSIEKD8EKDOS")), SecurityAlgorithms.HmacSha256)), new JwtPayload(claims)); return new JwtSecurityTokenHandler().WriteToken(token); } }
namespace WebAPISecurity { public class Startup { public Startup(IConfiguration configuration) { Configuration = configuration; } public IConfiguration Configuration { get; } public void ConfigureServices(IServiceCollection services) { services.AddMvc(); services.AddAuthentication(options => { options.DefaultAuthenticateScheme = "JwtBearer"; options.DefaultChallengeScheme = "JwtBearer"; }) .AddJwtBearer("JwtBearer", jwtBearerOptions => { jwtBearerOptions.TokenValidationParameters = new TokenValidationParameters { ValidateIssuerSigningKey = true, IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("H38DLSIEKD8EKDOS")), ValidateIssuer = false, ValidateAudience = false, ValidateLifetime = true, ClockSkew = TimeSpan.FromMinutes(5) }; }); } public void Configure(IApplicationBuilder app, IHostingEnvironment env) { if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } app.UseAuthentication(); app.UseMvc(); } }
public class BasicAuthenticationHandler : AuthenticationHandler<BasicAuthenticationOptions> { protected override Task<AuthenticateResult> HandleAuthenticateAsync() { var authHeader = (string)this.Request.Headers["Authorization"]; if (!string.IsNullOrEmpty(authHeader) && authHeader.StartsWith("basic", StringComparison.OrdinalIgnoreCase)) { string encodedUsernamePassword = authHeader.Substring("Basic ".Length).Trim(); Encoding encoding = Encoding.GetEncoding("iso-8859-1"); string usernamePassword = encoding.GetString(Convert.FromBase64String(encodedUsernamePassword)); int seperatorIndex = usernamePassword.IndexOf( var username = usernamePassword.Substring(0, seperatorIndex); var password = usernamePassword.Substring(seperatorIndex + 1); if (username == "test" && password == "test") { var user = new GenericPrincipal(new GenericIdentity("User"), null); var ticket = new AuthenticationTicket(user, new AuthenticationProperties(), Options.AuthenticationScheme); return Task.FromResult(AuthenticateResult.Success(ticket)); } else { return Task.FromResult(AuthenticateResult.Fail("No valid user.")); } } this.Response.Headers["WWW-Authenticate"]= "Basic realm=\"yourawesomesite.net\""; return Task.FromResult(AuthenticateResult.Fail("No credentials.")); } } public class BasicAuthenticationMiddleware : AuthenticationMiddleware<BasicAuthenticationOptions> { public BasicAuthenticationMiddleware( RequestDelegate next, IOptions<BasicAuthenticationOptions> options, ILoggerFactory loggerFactory, UrlEncoder encoder) : base(next, options, loggerFactory, encoder) { } protected override AuthenticationHandler<BasicAuthenticationOptions> CreateHandler() { return new BasicAuthenticationHandler(); } } public class BasicAuthenticationOptions : AuthenticationOptions { public BasicAuthenticationOptions() { AuthenticationScheme = "Basic"; AutomaticAuthenticate = true; } }
[Authorize(ActiveAuthenticationSchemes = "Basic")] [Route("api/[controller]")] public class ValuesController : Controller
if ( !ddlCustomerNumber.Items.FindByText( GetCustomerNumberCookie().ToString() ) ) ddlCustomerNumber.SelectedIndex = 0;
if (ddlCustomerNumber.Items.Contains(new ListItem(GetCustomerNumberCookie().ToString()))) { }
if (ddlCustomerNumber.Items.FindByText( GetCustomerNumberCookie().ToString()) != null) { }
if (ddlCustomerNumber.Items.FindByText( GetCustomerNumberCookie().ToString()) != null) ddlCustomerNumber.SelectedIndex = 0;
ddlCustomerNumber.SelectedValue = GetCustomerNumberCookie().ToString();
ListItem match = ddlCustomerNumber.Items.FindByText( GetCustomerNumberCookie().ToString()); if (match == null) ddlCustomerNumber.SelectedIndex = 0;
ListItem item = ddlComputedliat1.Items.FindByText("Amt D"); if (item == null) { ddlComputedliat1.Items.Insert(1, lblnewamountamt.Text); }
if (ddlCustomerNumber.Items.FindByText(GetCustomerNumberCookie().ToString()) != null) ddlCustomerNumber.SelectedIndex = 0;
if (DDLAlmacen.Items.Count > 0) { if (DDLAlmacen.Items.FindByValue("AlmacenDefectoAndes").Value == "AlmacenDefectoAndes") { DDLAlmacen.SelectedValue = "AlmacenDefectoAndes"; } }
If DDLAlmacen.Items.Count > 0 Then If DDLAlmacen.Items.Contains(New ListItem("AlmacenDefectoAndes")) Then DDLAlmacen.SelectedValue = "AlmacenDefectoAndes" End If End If
ddlCustomerNumber.SelectedValue = ddlType.Items.FindByValue(GetCustomerNumberCookie().ToString()) != null ? GetCustomerNumberCookie().ToString() : "0";
if (ddlCustomerNumber.Items.FindByText( GetCustomerNumberCookie().ToString()) != Nothing) { ... }
String ClientURL = ResolveClientUrl("~/HomePage.aspx"); String RegURL = ResolveUrl("~/HomePage.aspx"); String ServerMappedPath = Server.MapPath("~/HomePage.aspx"); String appRelVirtPath = AppRelativeVirtualPath; String baseUrl = Request.Url.GetLeftPart(UriPartial.Authority) + Request.ApplicationPath; String absUri = Request.Url.AbsoluteUri;
Page.ResolveUrl(~): creates the URL from the root of app.
Page.ResolveClientUrl(~): creates the URL relative to the current page.(e.g: ../../..)
string ipAddress = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
static public string sGetIP() { try { string functionReturnValue = null; String oRequestHttp = WebOperationContext.Current.IncomingRequest.Headers["User-Host-Address"]; if (string.IsNullOrEmpty(oRequestHttp)) { OperationContext context = OperationContext.Current; MessageProperties prop = context.IncomingMessageProperties; RemoteEndpointMessageProperty endpoint = prop[RemoteEndpointMessageProperty.Name] as RemoteEndpointMessageProperty; oRequestHttp = endpoint.Address; } return functionReturnValue; } catch (Exception ex) { return "unknown IP"; } }
<input name="somefield" type="hidden" value="@ViewBag.Test"/>
public ActionResult SomeAction(bool somefield = false, ...)
<input name="somefield" type="hidden" value="value"/>
<input name="somefield" type="hidden" someprop="@(SomeBooleanExpression)"/>
<input name="somefield" type="hidden" someprop="True"/>
<input name="somefield" type="hidden" someprop="someprop"/>
<input name="somefield" type="hidden" someprop="@(SomeBooleanExpression.ToString())"/>
<script src="../../Scripts/knockout-2.0.0.js" type="text/javascript"></script> <script src="../../Scripts/upshot.js" type="text/javascript"></script> <script src="../../Scripts/upshot.compat.knockout.js" type="text/javascript"></script> <script type="text/javascript"> upshot.metadata({ "CLASSNAME: "fields": { "aId": { "type": "Int32: "Title": { "type": "String: "Description": { "type": "String: "Effort": { "type": "Double: } } }); var myDataSource = new upshot.RemoteDataSource({ providerParameters: { url: "http: operationName: "", operationParameters: {} }, entityType: "CLASSNAME: }); myDataSource.refresh(function (results) { alert(results[0].Title()); }); </script>
using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Data; using System.Data.SqlClient; using System.Web; using System.Text; using System.Web.UI; namespace Registration.DataAccess { public static class Repository { public static void Show(string message) { string cleanMessage = message.Replace(" string script = "<script type="text/javascript">alert( Page page = HttpContext.Current.CurrentHandler as Page; if (page != null && !page.ClientScript.IsClientScriptBlockRegistered("alert")) { page.ClientScript.RegisterClientScriptBlock(typeof(Alert), "alert", script); } } } }
string script = "<script type="text/javascript">alert(
page.ClientScript.RegisterClientScriptBlock(typeof(Alert), "alert", script);
string script = string.Format("alert( if (page != null && !page.ClientScript.IsClientScriptBlockRegistered("alert")) { page.ClientScript.RegisterClientScriptBlock(page.GetType(), "alert", script, true ); }
ScriptManager.RegisterStartupScript(this,GetType(),"showalert","alert(
ScriptManager.RegisterStartupScript(this, GetType(), "displayalertmessage", "Showalert();", true);
System.Web.UI.ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "AlertBox", "alert(
public static void Show(string message) { string cleanMessage = message.Replace(" Page page = HttpContext.Current.CurrentHandler as Page; string script = string.Format("alert( if (page != null && !page.ClientScript.IsClientScriptBlockRegistered("alert")) { page.ClientScript.RegisterClientScriptBlock(page.GetType(), "alert", script, true ); } }
Public Sub Show(message As String) Dim cleanMessage As String = message.Replace(" Dim page As Page = HttpContext.Current.CurrentHandler Dim script As String = String.Format("alert( If (page IsNot Nothing And Not page.ClientScript.IsClientScriptBlockRegistered("alert")) Then page.ClientScript.RegisterClientScriptBlock(page.GetType(), "alert", script, True) End If End Sub
string script = "<script type=\"text/javascript\">alert(
ClientScript.RegisterStartupScript(Page.GetType(), "validation", "<script language=
<script type="text/javascript" language="javascript"> function Func() { alert("hello!") } </script>
ScriptManager.RegisterStartupScript(this.Page, Page.GetType(), "text", "Func()", true);
ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert(
string script = "<script type=\"text/javascript\">alert(
string script = string.Format("alert( ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "key_name", script );", true);
string message = "Helloq World"; System.Text.StringBuilder sb = new System.Text.StringBuilder(); sb.Append("alert( sb.Append(message); sb.Append(" ClientScript.RegisterOnSubmitStatement(this.GetType(), "alert", sb.ToString());
string script = "<script type=\"text/javascript\">alert(
private void MessageBox(string msg) { Label lbl = new Label(); lbl.Text = "<script language= Page.Controls.Add(lbl); }
string script = "<script type="text/javascript">alert(
private void MessageBox(string msg) { Label lbl = new Label(); lbl.Text = string.Format(@"<script type= Page.Controls.Add(lbl); }
string script = "<script type=\"text/javascript\">alert( Response.Write(script);
public static class webMessageBox { public static void Show(string message) { string cleanMessage = message.Replace(" string wsScript = "<script type=\"text/javascript\">alert( Page page = HttpContext.Current.CurrentHandler as Page; if (page != null && !page.ClientScript.IsClientScriptBlockRegistered("alert")) { page.ClientScript.RegisterClientScriptBlock(typeof(webMessageBox), "alert", wsScript, false); } } }
string popupScript = "<script language=JavaScript>"; popupScript += "alert( popupScript += "</"; popupScript += "script>"; Page.RegisterStartupScript("PopupScript", popupScript);
StringBuilder strScript = new StringBuilder(); strScript.Append("alert( Page.ClientScript.RegisterStartupScript(this.GetType(),"Script", strScript.ToString(), true);
DataTable table = dataSet.Tables["YourTableName"]; object sumObject; sumObject = table.Compute("Sum(Amount)", string.Empty);
this.LabelControl.Text = datatable.AsEnumerable() .Sum(x => x.Field<int>("Amount")) .ToString();
this.LabelControl.Text = datatable.AsEnumerable() .Where(y => y.Field<string>("SomeCol") != "foo") .Sum(x => x.Field<int>("MyColumn") ) .ToString();
DataRow[] dr = dtbl.Select("SUM(Amount)"); txtTotalAmount.Text = Convert.ToString(dr[0]);
int sum = 0; foreach(DataRow dr in dataTable.Rows) { sum += Convert.ToInt32(dr["Amount"]); }
public decimal Total() { decimal decTotal=(datagridview1.DataSource as DataTable).Compute("Sum(FieldName)",""); return decTotal; }
lbl_TotaAmt.Text = MyDataTable.Compute("Sum(BalAmt)", "").ToString();
lbl_TotaAmt.Text = MyDataTable.Compute("Sum(BalAmt)", "srno=1 or srno in(1,2)").ToString();
var allEntries = from r in dt.AsEnumerable() select r["Amount"];
int sum = 0; foreach (DataRow dr in dt.Rows) { dynamic value = dr[index].ToString(); if (!string.IsNullOrEmpty(value)) { sum += Convert.ToInt32(value); } }
using System.Linq; (datagridview1.DataSource as DataTable).AsEnumerable().Sum(c => c.Field<double>("valor"))
HttpWebRequest req = (HttpWebRequest)WebRequest.Create("http: req.Method = ... whatever ...; ... other setup for the request ... HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
<configuration> <system.diagnostics> <trace autoflush="true" /> <sources> <source name="System.Net" maxdatasize="1024"> <listeners> <add name="MyTraceFile"/> <add name="MyConsole"/> </listeners> </source> </sources> <sharedListeners> <add name="MyTraceFile" type="System.Diagnostics.TextWriterTraceListener" initializeData="System.Net.trace.log" /> <add name="MyConsole" type="System.Diagnostics.ConsoleTraceListener" /> </sharedListeners> <switches> <add name="System.Net" value="Verbose" /> </switches> </system.diagnostics> </configuration>
System.Net Verbose: 0 : [6596] WebRequest::Create(https: System.Net Verbose: 0 : [6596] HttpWebRequest System.Net Information: 0 : [6596] RAS supported: True System.Net Verbose: 0 : [6596] Exiting HttpWebRequest System.Net Verbose: 0 : [6596] Exiting WebRequest::Create() -> HttpWebRequest System.Net Verbose: 0 : [6596] HttpWebRequest System.Net Verbose: 0 : [6596] ServicePoint System.Net Information: 0 : [6596] Associating HttpWebRequest System.Net Information: 0 : [6596] Associating Connection System.Net Information: 0 : [6596] Connection System.Net Information: 0 : [6596] TlsStream System.Net Information: 0 : [6596] Associating HttpWebRequest System.Net Verbose: 0 : [6596] Exiting HttpWebRequest System.Net Verbose: 0 : [6596] ConnectStream System.Net Verbose: 0 : [6596] Data from ConnectStream System.Net Verbose: 0 : [6596] 00000000 : 3C 73 6F 61 70 3A 45 6E-76 65 6C 6F 70 65 0D 0A : <soap:Envelope.. ...etc
protected void Page_Init(object sender, EventArgs e) { byte[] biData = Request.BinaryRead(Request.TotalBytes); string sWholeRequestAsString = System.Text.Encoding.ASCII.GetString(biData); }
DataTable dt = new DataTable(); dt.Columns.Add("Column Name"); dt.Rows.Add("Column Data"); DataTable dt1 = dt.Clone(); DataTable dt2 = dt.Copy();
Dim target As DataTable = New DataView(source, "1=2", Nothing, DataViewRowState.CurrentRows) .ToTable()
public class CoolNewTable : DataTable { public void FillFromReader(DbDataReader reader) { DataTable schema = reader.GetSchemaTable(); ImportSchema(this, schema); } }
void ImportSchema(DataTable dest, DataTable source) { foreach(var c in source.Columns) dest.Columns.Add(c); }
void ImportSchema(DataTable dest, DataTable source) { var cols = source.Columns.Cast<DataColumn>().ToArray(); dest.Columns.AddRange(cols); }
DataTable dataTable2 = dataTable1.Clone(); dataTable2.Clear();
Dim dt1 As New DataTable dt1 = dtExcelData.Clone() dt1.Columns(17).DataType = System.Type.GetType("System.Decimal") dt1.Columns(26).DataType = System.Type.GetType("System.Decimal") dt1.Columns(30).DataType = System.Type.GetType("System.Decimal") dt1.Columns(35).DataType = System.Type.GetType("System.Decimal") dt1.Columns(38).DataType = System.Type.GetType("System.Decimal") dt1 = dtprevious.Copy()
string url = "http: Uri uri = new Uri(url); Console.WriteLine(uri.GetLeftPart(UriPartial.Path));
Dim uri = New Uri(Request.Url.AbsoluteUri) dim reqURL = uri.GetLeftPart(UriPartial.Path)
string rawUrl = String.Concat(this.GetApplicationUrl(), Request.RawUrl); if (rawUrl.Contains("/post/")) { bool hasQueryStrings = Request.QueryString.Keys.Count > 1; if (hasQueryStrings) { Uri uri = new Uri(rawUrl); rawUrl = uri.GetLeftPart(UriPartial.Path); HtmlLink canonical = new HtmlLink(); canonical.Href = rawUrl; canonical.Attributes["rel"] = "canonical"; Page.Header.Controls.Add(canonical); } }
string path = Request.Url.AbsoluteUri.Replace(Request.Url.PathAndQuery,"");
Dim _CleanUrl as String = Request.Url.AbsoluteUri.Split("?")(0) Response.Redirect(_CleanUrl)
[System.Runtime.InteropServices.DllImport("swedll32.dll")] public static extern Int32 swe_calc(double tjd, int ipl, Int32 iflag, IntPtr xx, IntPtr serr);
[System.Runtime.InteropServices.DllImport("swedll32.dll", EntryPoint = "swe_calc")] public static extern Int32 SweCalc(double tjd, int ipl, Int32 iflag, IntPtr xx, IntPtr serr);
var myDate = DateTime.Parse("2012-09-30T23:00:00.0000000Z");
using System; using System.Globalization; class Test { static void Main() { var date = DateTime.ParseExact("2012-09-30T23:00:00.0000000Z", "yyyy-MM-dd CultureInfo.InvariantCulture, DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); Console.WriteLine(date); Console.WriteLine(date.Kind); } }
DateTime local1 = DateTime.Parse("2012-10-28T00:30:00.0000000Z"); DateTime local2 = DateTime.Parse("2012-10-28T01:30:00.0000000Z"); Console.WriteLine(local1 == local2); DateTime utc1 = TimeZoneInfo.ConvertTimeToUtc(local1); DateTime utc2 = TimeZoneInfo.ConvertTimeToUtc(local2); Console.WriteLine(utc1 == utc2);
using System; using System.Globalization; class Test { static void Main() { DateTime local1 = DateTime.Parse("2012-10-28T00:30:00.0000000Z"); DateTime local2 = DateTime.Parse("2012-10-28T01:30:00.0000000Z"); DateTime utc1 = TimeZoneInfo.ConvertTimeToUtc(local1); DateTime utc2 = TimeZoneInfo.ConvertTimeToUtc(local2); Console.WriteLine(utc1); Console.WriteLine(utc2); DateTime utc3 = local1.ToUniversalTime(); DateTime utc4 = local2.ToUniversalTime(); Console.WriteLine(utc3); Console.WriteLine(utc4); } }
28/10/2012 01:30:00 28/10/2012 01:30:00 28/10/2012 00:30:00 28/10/2012 01:30:00
28/10/2012 00:30:00 28/10/2012 01:30:00 28/10/2012 00:30:00 28/10/2012 01:30:00
var now = DateTime.UtcNow; var strNow = now.ToString("O"); var newNow = DateTime.ParseExact(strNow, "O", CultureInfo.InvariantCulture, DateTimeStyles.RoundtripKind);
var myDate = TimeZoneInfo.ConvertTimeToUtc(DateTime.Parse("2012-09-30T23:00:00.0000000Z"));
public IEnumerable<EscalationType> GetAllTypes() { Database.Configuration.LazyLoadingEnabled = false; return Database.EscalationTypes .Include("Escalation") .Include("Escalation.Primary") .Include("Escalation.Backup") .Include("Escalation.Primary.ContactInformation") .Include("Escalation.Backup.ContactInformation").ToList(); }
public static class ObjectQueryExtensionMethods { public static ObjectQuery<T> Include<T>(this ObjectQuery<T> query, Expression<Func<T, object>> exp) { Expression body = exp.Body; MemberExpression memberExpression = (MemberExpression)exp.Body; string path = GetIncludePath(memberExpression); return query.Include(path); } private static string GetIncludePath(MemberExpression memberExpression) { string path = ""; if (memberExpression.Expression is MemberExpression) { path = GetIncludePath((MemberExpression)memberExpression.Expression) + "."; } PropertyInfo propertyInfo = (PropertyInfo)memberExpression.Member; return path + propertyInfo.Name; } }
HttpResponse.RemoveOutputCacheItem("/caching/CacheForever.aspx");
HttpContextBase httpContext = filterContext.HttpContext; httpContext.Response.AddCacheItemDependency("Pages");
protected void Application_Start() { HttpRuntime.Cache.Insert("Pages", DateTime.Now); }
public class Page : System.Web.UI.Page { protected override void OnLoad(EventArgs e) { try { string cacheKey = "cacheKey"; object cache = HttpContext.Current.Cache[cacheKey]; if (cache == null) { HttpContext.Current.Cache[cacheKey] = DateTime.UtcNow.ToString(); } Response.AddCacheItemDependency(cacheKey); } catch (Exception ex) { throw new SystemException(ex.Message); } base.OnLoad(e); } } public void ClearAllOutPutCache() { string cacheKey = "cacheKey"; HttpContext.Cache.Remove(cacheKey); }
Response.Cache.SetExpires(DateTime.UtcNow.AddMinutes(-1)); Response.Cache.SetCacheability(HttpCacheability.NoCache); Response.Cache.SetNoStore();
string key = "post.aspx?id=" + PostID.ToString(); Cache[key] = new object(); Response.AddCacheItemDependency(key);
<img src="@Url.Content("~/images/logos/hdr.png")" />
@Html.ActionLink("Linktext", "YourController", "YourAction")
<a href="linkOnSameLevel.cshtml">Link</a> <a href="../linkOnParentLevel.cshtml">Link</a> <a href="subFolder/linkOnOneLevelDown.cshtml">Link</a>
<img src="@Url.Content("~/images/logos/hdr.png")" />
public interface ICustomPrincipal : System.Security.Principal.IPrincipal { string FirstName { get; set; } string LastName { get; set; } } public class CustomPrincipal : ICustomPrincipal { public IIdentity Identity { get; private set; } public CustomPrincipal(string username) { this.Identity = new GenericIdentity(username); } public bool IsInRole(string role) { return Identity != null && Identity.IsAuthenticated && !string.IsNullOrWhiteSpace(role) && Roles.IsUserInRole(Identity.Name, role); } public string FirstName { get; set; } public string LastName { get; set; } public string FullName { get { return FirstName + " " + LastName; } } } public class CustomPrincipalSerializedModel { public int Id { get; set; } public string FirstName { get; set; } public string LastName { get; set; } }
public void CreateAuthenticationTicket(string username) { var authUser = Repository.Find(u => u.Username == username); CustomPrincipalSerializedModel serializeModel = new CustomPrincipalSerializedModel(); serializeModel.FirstName = authUser.FirstName; serializeModel.LastName = authUser.LastName; JavaScriptSerializer serializer = new JavaScriptSerializer(); string userData = serializer.Serialize(serializeModel); FormsAuthenticationTicket authTicket = new FormsAuthenticationTicket( 1,username,DateTime.Now,DateTime.Now.AddHours(8),false,userData); string encTicket = FormsAuthentication.Encrypt(authTicket); HttpCookie faCookie = new HttpCookie(FormsAuthentication.FormsCookieName, encTicket); Response.Cookies.Add(faCookie); }
app.UseCookieAuthentication(new CookieAuthenticationOptions { AuthenticationScheme = "MyCookieMiddlewareInstance", LoginPath = new PathString("/Controller/Login/"), AutomaticAuthenticate = true, AutomaticChallenge = true });
[HttpPost] [ValidateAntiForgeryToken] public async Task<IActionResult> Login(String username, String password, String returnUrl = null) { ViewData["ReturnUrl"] = returnUrl; if (ModelState.IsValid) { var claims = new List<Claim> { new Claim(ClaimTypes.Name, username), new Claim("FirstName", "Alice"), new Claim("LastName", "Smith") }; var identity = new ClaimsIdentity(claims, "Password"); var principal = new ClaimsPrincipal(identity); await HttpContext.Authentication.SignInAsync("MyCookieMiddlewareInstance", principal); return RedirectToLocal(returnUrl); } ModelState.AddModelError(String.Empty, "Invalid login attempt."); return View(); }
dotnet ef migrations add InitialIdentityServerMigration -c ApplicationDbContext Add-Migration InitialIdentityServerDbMigration -c ApplicationDbContext
System.Web.Hosting.HostingEnvironment.ApplicationHost.GetSiteName();
using System.DirectoryServices; using System; public class IISAdmin { public static void GetWebsiteID(string websiteName) { DirectoryEntry w3svc = new DirectoryEntry("IIS: foreach(DirectoryEntry de in w3svc.Children) { if(de.SchemaClassName == "IIsWebServer" && de.Properties["ServerComment"][0].ToString() == websiteName) { Console.Write(de.Name); } } } public static void Main() { GetWebsiteID("Default Web Site"); }
using (ServerManager serverManager = new ServerManager()) { var sites = serverManager.Sites; foreach (Site site in sites) { Console.WriteLine(site.Name); }
var sites = (from site in serverManager.Sites where site.State == ObjectState.Stopped orderby site.Name select site); foreach (Site site in sites) { site.Start(); }
using (ServerManager srvMgr = ServerManager.OpenRemote("serverName")) { }
private string WebsiteName() { string websiteName = string.Empty; string AppPath = string.Empty; AppPath = Context.Request.ServerVariables["INSTANCE_META_PATH"]; AppPath = AppPath.Replace("/LM/", "IIS: DirectoryEntry root = new DirectoryEntry(AppPath); websiteName = (string)root.Properties["ServerComment"].Value; return websiteName; }
public partial class SendMessagePage : System.Web.UI.Page { protected void Page_Load(object sender, EventArgs e) { string message = Request.QueryString["Message"]; string clientId = Request.QueryString["ClientId"]; AsyncMessageSender sender = new AsyncMessageSender(clientId, message); sender.Start(); Response.Write("Success"); } }
public class AsyncMessageSender { private BackgroundWorker backgroundWorker; private string client; private string msg; public AsyncMessageSender(string clientId, string message) { this.client = clientId; this.msg = message; backgroundThread = new BackgroundWorker(); backgroundThread.WorkerSupportsCancellation = true; backgroundThread.DoWork += new DoWorkEventHandler(backgroundThread_DoWork); } public void Start() { backgroundThread.RunWorkerAsync(); } ... }
private delegate void DoStuff(); protected void Page_Load(object sender, EventArgs e) { } protected void Button1_Click(object sender, EventArgs e) { DoStuff myAction = new DoStuff(SomeVeryLongAction); myAction.BeginInvoke(null, null); Button1.Text = DateTime.Now.ToString(); } private void SomeVeryLongAction() { for (int i = 0; i < 100; i++) { System.Threading.Thread.Sleep(100); } }
public void Start() { new Task(() => { backgroundThread.RunWorkerAsync(); }).Start(); }
A. Func<string, string> convertMethod = lambda B. public delegate string convertMethod(string value);
public static class Program { public delegate string ConvertedMethod(string value); public static void Main() { Func<string, string> convertedMethod = s => s + ", Hello!"; ConvertedMethod convertedMethod2 = s => s + ", Hello!"; } }
public delegate TReturn Func<TArg, TReturn>(Targ value); public delegate string convertMethod(string value);
Func<string, string> local1 = ...; convertMethod local2 = local1;
delegate int del(int i); static void Main(string[] args) { del myDelegate = x => x * x; int j = myDelegate(5); }
Task deleteTask = DeleteFooAsync() TaskScheduler.UnobservedTaskException += ( sender, e ) => { m_log.Debug( "Unobserved exception! This exception would have been unobserved: {0}", e.Exception ); e.SetObserved(); };
private void async DeleteFooWrapperAsync() { try { await DeleteFooAsync(); } catch(Exception exception ) { m_log.Error("DeleteFooAsync failed: " + exception.ToString()); } }
[AcceptVerbs( HttpVerbs.Post )] public async Task<JsonResult> DeleteItemAsync() { Task deleteTask = DeleteFooAsync(); ... }
private async Task LogExceptionsAsync(Func<Task> code) { try { await code(); } catch(Exception exception) { m_log.Error("Call failed: " + exception.ToString()); } }
BackgroundTaskManager.Run(() => LogExceptionsAsync(() => DeleteFooAsync()));
HostingEnvironment.QueueBackgroundWorkItem(async cancellationToken => await LongMethodAsync());
private void button1_Click(object sender, EventArgs e) { var deleteFooTask = DeleteFooAsync(); deleteFooTask.ContinueWith(ErrorHandeler, TaskContinuationOptions.OnlyOnFaulted); } private void ErrorHandeler(Task obj) { MessageBox.Show(String.Format("Exception happened in the background of DeleteFooAsync.\n{0}", obj.Exception)); } public async Task DeleteFooAsync() { await Task.Delay(5000); throw new Exception("Oops"); }
